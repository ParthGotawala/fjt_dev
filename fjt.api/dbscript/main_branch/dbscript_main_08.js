(function (maxBuildNumber, userid) {
    let allDbChangesArray = [];
    switch (maxBuildNumber) {
        case 1235:
            /* **************************** New Script -> 10-12-2021  *********************************** */
            allDbChangesArray.push(
                /* **************************** New Script -> 10-12-2021  *********************************** */
                "UPDATE `systemconfigrations`  \n" +
                "SET `key`='ShowDigikeyAccessTokenPopupOnLogin',  \n" +
                "`values` = 0,  \n" +
                "`displayName` = 'Show Access Token Popup On Login',  \n" +
                "`Description` = 'Turn off Digikey API Key Setting pop-up by setting value of ShowDigikeyAccessTokenPopupOnLogin to 0.'  \n" +
                "WHERE `key`= 'SkipCheckAccessTokenOnLogin';  \n" +
                /* **************************** Add Script Version ->  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1236,'1.00','V1',' Sample entry - VS '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1236:
            /* **************************** New Script -> 13-12-2021  *********************************** */
            allDbChangesArray.push(
                /* **************************** New Script -> 13-12-2021  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_checkDelete_salesordermst` ;  \n" +
                "CREATE PROCEDURE `Sproc_checkDelete_salesordermst`(  \n" +
                "	IN tableName VARCHAR(255),  \n" +
                "	IN IDs LONGTEXT,  \n" +
                "	IN deletedBy INT,  \n" +
                "	IN entityID VARCHAR(255),  \n" +
                "	IN refrenceIDs LONGTEXT,  \n" +
                "	IN countList INT,  \n" +
                "    IN pRoleID INT  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "DECLARE EXIT HANDLER FOR SQLEXCEPTION  \n" +
                "BEGIN  \n" +
                "	ROLLBACK;  \n" +
                "	RESIGNAL;  \n" +
                "END;  \n" +
                "DECLARE EXIT HANDLER FOR SQLWARNING  \n" +
                "BEGIN  \n" +
                "	ROLLBACK;  \n" +
                "	RESIGNAL;  \n" +
                "END;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempsalesorder;  \n" +
                "	-- delete sales order master if reference ID is not null  \n" +
                "	-- refernece ID is equal to salesOrderDetID  \n" +
                "	IF(IDs <> '') THEN  \n" +
                "		SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempSalesOrderMst as  \n" +
                "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder_salesorder_details\" else \"\" end as msg FROM workorder_salesorder_details WHERE isDeleted=0 AND salesOrderDetailID IN(',IDs,') LIMIT 1)  \n" +
                "			UNION ALL  \n" +
                "            (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"assemblystock\" else \"\" end as msg FROM assemblystock WHERE type=\"OS\" and isDeleted = 0 AND refSalesOrderDetID IN(',IDs,') LIMIT 1)  \n" +
                "			  UNION ALL  \n" +
                "			 (select count(1) cnt, CASE when count(1)>0 then \"salesordermst\" else \"\" end as msg FROM salesorderdet where isDeleted=0 AND refSODetID IN(',IDs,') LIMIT 1)  \n" +
                "			 UNION ALL  \n" +
                "			 (select count(1) cnt, CASE when count(1)>0 then \"salesordermst\" else \"\" end as msg FROM salesorderdet where isDeleted=0  AND refBlanketPOID IN(',IDs,') LIMIT 1)  \n" +
                "		');  \n" +
                "		PREPARE stmt FROM @SQL;  \n" +
                "		EXECUTE stmt;  \n" +
                "		DEALLOCATE PREPARE stmt;  \n" +
                "  \n" +
                "		IF (countList=FALSE) THEN  \n" +
                "			IF (SELECT SUM(t.cnt) FROM tempSalesOrderMst t)=0 THEN  \n" +
                "			START TRANSACTION;  \n" +
                "  \n" +
                "				SET @SQl1 = CONCAT('  \n" +
                "					UPDATE 	kit_allocation ka  \n" +
                "					SET 	ka.returnQty = ka.allocatedQty,  \n" +
                "						ka.returnUnit = ka.allocatedUnit,  \n" +
                "						ka.returnUOM = ka.allocatedUOM,  \n" +
                "						ka.returnDate = \"', fun_DatetimetoUTCDateTime() ,'\",  \n" +
                "						ka.updatedBy = ', deletedBy ,',  \n" +
                "						ka.updateByRoleId = ', pRoleID ,',  \n" +
                "						ka.`status` = \"D\",  \n" +
                "						ka.remark = \"Auto Deallocated from ReCalculation\"  \n" +
                "					WHERE 	ka.refSalesOrderDetID IN (', IDs ,')  \n" +
                "							AND ka.`status` = \"A\"  \n" +
                "				');  \n" +
                "				PREPARE stmt1 FROM @SQL1;  \n" +
                "				EXECUTE stmt1;  \n" +
                "				DEALLOCATE PREPARE stmt1;  \n" +
                "  \n" +
                "				SET @SQl2 = CONCAT('  \n" +
                "					UPDATE 	salesorder_plan_detailsmst  \n" +
                "					SET 	isDeleted = ', 1 ,',  \n" +
                "						deletedAt = \"', fun_DatetimetoUTCDateTime() ,'\",  \n" +
                "						deletedBy = ', deletedBy ,'  \n" +
                "					WHERE 	salesOrderDetID IN (', IDs ,')  \n" +
                "							AND isDeleted = 0  \n" +
                "				');  \n" +
                "				PREPARE stmt2 FROM @SQL2;  \n" +
                "				EXECUTE stmt2;  \n" +
                "				DEALLOCATE PREPARE stmt2;  \n" +
                "  \n" +
                "				SET @SQl3 = CONCAT('update salesshippingmst set isDeleted=',1,',deletedBy=',deletedBy,', deleteByRoleId = ',pRoleID,', deletedAt=\"',fun_DatetimetoUTCDateTime(),'\" where sDetID  IN(',IDs,') and deletedAt is NULL');  \n" +
                "				PREPARE stmt3 FROM @SQL3;  \n" +
                "				EXECUTE stmt3;  \n" +
                "				DEALLOCATE PREPARE stmt3;  \n" +
                "  \n" +
                "				SET @SQl4 = CONCAT('update salesorderdet set isDeleted=',1,',deletedBy=',deletedBy,', deleteByRoleId = ',pRoleID,', deletedAt=\"',fun_DatetimetoUTCDateTime(),'\" where (id IN(',IDs,')) and deletedAt is NULL');  \n" +
                "				PREPARE stmt4 FROM @SQL4;  \n" +
                "				EXECUTE stmt4;  \n" +
                "				DEALLOCATE PREPARE stmt4;  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "				/* [S] - Add Time line log for delete sales order mst */  \n" +
                "				SELECT 	GROUP_CONCAT(salesOrderNumber) INTO @lvSalesOrderNumber  \n" +
                "					FROM salesordermst  \n" +
                "				WHERE FIND_IN_SET(id,refrenceIDs);  \n" +
                "  \n" +
                "				SET @lvEventTitle = CONCAT(\"Sales order(s) deleted\");  \n" +
                "				SET @lvEventDescription = CONCAT(\"Sales order(s) '\",@lvSalesOrderNumber,\" deleted by \" ,(SELECT username FROM users WHERE id=deletedBy AND deletedAt IS NULL),\".\");  \n" +
                "				CALL Sproc_AddToTimeline(deletedBy,@lvEventTitle,@lvEventDescription,tableName,refrenceIDs,6,CONCAT('transaction/salesorder'),deletedBy,3);  /* 3 = DELETE */  \n" +
                "				/* [E] - Add Time line log for delete sales order mst */  \n" +
                "  \n" +
                "				SELECT * FROM tempSalesOrderMst WHERE IFNULL(cnt,0) > 0 AND msg IS NOT NULL AND msg != \"\";  \n" +
                "			COMMIT;  \n" +
                "			ELSE  \n" +
                "			      SELECT SUM(t.cnt) AS TotalCount, GROUP_CONCAT(t.msg SEPARATOR ',') AS Message FROM tempSalesOrderMst t;  \n" +
                "			END IF;  \n" +
                "		ELSE  \n" +
                "			SELECT t1.cnt,t2.display_page_name AS msg  \n" +
                "				FROM tempSalesOrderMst t1  \n" +
                "				INNER JOIN table_mapping_details t2 ON t1.msg=t2.tabel_name  \n" +
                "				WHERE IFNULL(cnt,0) > 0 AND msg IS NOT NULL AND msg != \"\"  \n" +
                "				ORDER BY t2.display_page_name;  \n" +
                "		END IF;  \n" +
                "		DROP TEMPORARY TABLE tempSalesOrderMst;  \n" +
                "	ELSE  \n" +
                "  \n" +
                "		SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempSalesOrderMst as  \n" +
                "  \n" +
                "			 select count(1) cnt, CASE when count(1)>0 then \"salesordermst\" else \"\" end as msg  \n" +
                "				FROM salesorderdet  \n" +
                "				where isDeleted=0  \n" +
                "				AND refSalesOrderID IN (',refrenceIDs,')  \n" +
                "		');  \n" +
                "		PREPARE stmt FROM @SQL;  \n" +
                "		EXECUTE stmt;  \n" +
                "		DEALLOCATE PREPARE stmt;  \n" +
                "  \n" +
                "  \n" +
                "		IF (countList=FALSE) THEN  \n" +
                "			IF (SELECT SUM(t.cnt) FROM tempSalesOrderMst t)=0 THEN  \n" +
                "			START TRANSACTION;  \n" +
                "  \n" +
                "				/* [S] - Add Time line log for delete sales order mst */  \n" +
                "				SELECT 	GROUP_CONCAT(salesOrderNumber) INTO @lvSalesOrderNumber  \n" +
                "					FROM salesordermst  \n" +
                "				WHERE FIND_IN_SET(id,refrenceIDs);  \n" +
                "  \n" +
                "				SET @lvEventTitle = CONCAT(\"Sales order(s) deleted\");  \n" +
                "				SET @lvEventDescription = CONCAT(\"Sales order(s) '\",@lvSalesOrderNumber,\"' deleted by \" ,(SELECT username FROM users WHERE id=deletedBy AND deletedAt IS NULL),\".\");  \n" +
                "				CALL Sproc_AddToTimeline(deletedBy,@lvEventTitle,@lvEventDescription,tableName,refrenceIDs,6,CONCAT('transaction/salesorder'),deletedBy,3);  /* 3 = DELETE */  \n" +
                "				/* [E] - Add Time line log for delete sales order mst */  \n" +
                "				-- Added for sales order master record delete  \n" +
                "				SET @SQl5 = CONCAT('update salesordermst set isDeleted=',1,',deletedBy=',deletedBy,', deleteByRoleId = ',pRoleID,', deletedAt=\"',fun_DatetimetoUTCDateTime(),'\" where id in (', refrenceIDs ,') and deletedAt is NULL');  \n" +
                "				PREPARE stmt5 FROM @SQl5;  \n" +
                "				EXECUTE stmt5;  \n" +
                "				SELECT \"\" TotalCount ,\"\" AS Message FROM salesordermst WHERE id IN(refrenceIDs) AND deletedAt IS NULL LIMIT 1;  \n" +
                "  \n" +
                "  \n" +
                "			COMMIT;  \n" +
                "			ELSE  \n" +
                "			      SELECT SUM(t.cnt) AS TotalCount, GROUP_CONCAT(t.msg SEPARATOR ',') AS Message FROM tempSalesOrderMst t;  \n" +
                "			END IF;  \n" +
                "		ELSE  \n" +
                "			SELECT t1.cnt,t2.display_page_name AS msg  \n" +
                "				FROM tempSalesOrderMst t1  \n" +
                "				INNER JOIN table_mapping_details t2 ON t1.msg=t2.tabel_name  \n" +
                "				WHERE IFNULL(cnt,0) > 0 AND msg IS NOT NULL AND msg != \"\"  \n" +
                "				ORDER BY t2.display_page_name;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "	END IF;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version ->  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1237,'1.00','V1',' Sproc_checkDelete_salesordermst- CC '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1237:
            allDbChangesArray.push(
                /* **************************** New Script -> 13-12-2021  *********************************** */
                "ALTER TABLE customer_packing_slip_track_number add column unqDate datetime default '2001-01-01' on update current_timestamp();  \n" +
                /* **************************** Add Script Version -> 13-12-2021  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1238,'1.00','V1','Add unqDate in Customer Tracking# Table - Shweta '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1238:
            allDbChangesArray.push(
                /* **************************** New Script -> 13-12-2021  *********************************** */
                "ALTER TABLE `customer_packing_slip_track_number`  \n" +
                "ADD UNIQUE INDEX `IDX_UNQ_TRACK_NUMBER` (`refCustPackingSlipID` ASC, `trackNumber` ASC, `isDeleted` ASC, `unqDate` ASC) VISIBLE;  \n" +
                /* **************************** Add Script Version -> 13-12-2021  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1239,'1.00','V1','Add Uniq Index for Duplicate Tracking Number - Shweta '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1239:
            allDbChangesArray.push(
                /* **************************** New Script -> 13-12-2021  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetCustAgedReceivablesRangeDet` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetCustAgedReceivablesRangeDet`(  \n" +
                "	IN pPageIndex INT,  \n" +
                "	IN pRecordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pAgedReceivablesDueAsOfDate DATE ,  \n" +
                "	IN pDueDate DATE ,  \n" +
                "	IN pAdditionalDays INT,  \n" +
                "	IN pTermsAndAboveDays INT  ,  \n" +
                "	IN pIsIncludeZeroValueInvoices TINYINT ,  \n" +
                "	IN pCustomerID VARCHAR(10000) ,  \n" +
                "	IN pAgedRecvAmtWithIn VARCHAR(20),  \n" +
                "	IN pIsAllCustAllInvOnly TINYINT,  \n" +
                "	IN pIsAllCustAllUninvOnly TINYINT,  \n" +
                "	IN pIsAllCustAllDraftCMOnly TINYINT,  \n" +
                "	IN pIsAllCustAllPSWithOutInv TINYINT  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "  \n" +
                "	DECLARE vDueDate DATE;  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255);  \n" +
                "	DECLARE vDateDisplayFormat VARCHAR(15);  \n" +
                "	DECLARE vTimeZone VARCHAR(50);  \n" +
                "	DECLARE currDateWithAppliedTimeZone VARCHAR(15);  \n" +
                "	DECLARE vAgedAmtWithIn VARCHAR(1000);  \n" +
                "	-- DECLARE vSumOfAgedAmtWithIn VARCHAR(1000);  \n" +
                "	DECLARE vWCCustIDForInv VARCHAR(10000);  \n" +
                "	DECLARE vWCCustIDForPMT VARCHAR(10000);  \n" +
                "	DECLARE vWCAllCustAllInv VARCHAR(100);  \n" +
                "	DECLARE vAgedAmtWithInCondition VARCHAR(1000);  \n" +
                "  \n" +
                "	SET vAgedAmtWithIn = \" \";  \n" +
                "	-- SET vSumOfAgedAmtWithIn = \" \";  \n" +
                "	SET vWCCustIDForInv = \" \";  \n" +
                "	SET vWCCustIDForPMT = \" \";  \n" +
                "	SET vWCAllCustAllInv = \" \";  \n" +
                "	SET vAgedAmtWithInCondition = '';  \n" +
                "	/* cps.subStatus 2-Invoiced,3-Corrected and Invoiced */  \n" +
                "	IF (pTermsAndAboveDays IS NOT NULL) THEN  \n" +
                "		SELECT fun_getDateFormatKey() INTO vDateDisplayFormat;  \n" +
                "		SELECT fun_getTimeZone() INTO vTimeZone;  \n" +
                "		SELECT fun_ApplyCommonDateFormatByParaValue(CURRENT_DATE(),vTimeZone,\"%Y-%m-%d\") INTO currDateWithAppliedTimeZone ;  \n" +
                "		SET vDueDate = DATE_ADD(currDateWithAppliedTimeZone, INTERVAL IFNULL(pTermsAndAboveDays,0) DAY);  \n" +
                "	ELSE  \n" +
                "		SET vDueDate = DATE_ADD(pDueDate, INTERVAL IFNULL(pAdditionalDays,0) DAY);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	IF (pIsAllCustAllPSWithOutInv = 1) THEN  /* get all customer packing slip which */  \n" +
                "		IF (pCustomerID IS NOT NULL AND pCustomerID != '') THEN  \n" +
                "			SET vWCCustIDForInv = CONCAT(' AND `customerID` IN (',pCustomerID,') ');  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		SET @temp_balanceDue = CONCAT(\"  \n" +
                "				SELECT id AS cpsMstID, packingSlipNumber, packingSlipDate, refSalesOrderID,  \n" +
                "					transType, 'Customer Packing Slip' AS `transTypeText` ,  \n" +
                "					fun_getMfgCodeAndNameByID(customerID) AS customerCodeName  \n" +
                "				FROM customer_packingslip  \n" +
                "				WHERE transType = 'P'  \n" +
                "				\",vWCCustIDForInv,\"  \n" +
                "				AND refCustInvoiceID IS NULL  \n" +
                "				AND isDeleted = 0  \n" +
                "			\");  \n" +
                "	ELSE  /* aged receivable details */  \n" +
                "  \n" +
                "		IF (pAgedRecvAmtWithIn IS NOT NULL AND pAgedRecvAmtWithIn != '') THEN  \n" +
                "			IF (pAgedRecvAmtWithIn = 'TotPastDue') THEN  \n" +
                "				-- SET vSumOfAgedAmtWithIn = CONCAT( ' SUM(temp_aged_details.totalDueAmount) totalAmountOfAgedDueReceivable , ') ;  \n" +
                "				SET vAgedAmtWithIn = CONCAT( ' (CASE WHEN ((TO_DAYS(\"',vDueDate,'\") - TO_DAYS((`cid`.`DocDate` + INTERVAL `cid`.`termsDays` DAY))) >= 0) THEN (SUM(`cid`.`totalInvoicedAmount`) - SUM(`cid`.`totalRecievedAmount`) + SUM(`cid`.`totalUnappliedAmount`) + SUM(`cid`.`totalUnappliedCreditMemoAmount`)) ELSE 0 END) AS `totalDueAmount` , ') ;  \n" +
                "				SET vAgedAmtWithInCondition = CONCAT( ' AND ((TO_DAYS(\"',vDueDate,'\") - TO_DAYS((`cid`.`DocDate` + INTERVAL `cid`.`termsDays` DAY))) >= 0) ');  \n" +
                "			ELSEIF (pAgedRecvAmtWithIn = 'CurrAmtWithinTerms') THEN  \n" +
                "				-- SET vSumOfAgedAmtWithIn = CONCAT( ' SUM(temp_aged_details.currentAmount) totalAmountWithinTerms , ') ;  \n" +
                "				SET vAgedAmtWithIn = CONCAT( ' (CASE WHEN ((TO_DAYS(\"',vDueDate,'\") - TO_DAYS((`cid`.`DocDate` + INTERVAL `cid`.`termsDays` DAY))) < 0 OR (TO_DAYS(\"',vDueDate,'\") - TO_DAYS((`cid`.`DocDate` + INTERVAL `cid`.`termsDays` DAY))) IS NULL) THEN (SUM(`cid`.`totalInvoicedAmount`) - SUM(`cid`.`totalRecievedAmount`) + SUM(`cid`.`totalUnappliedAmount`) + SUM(`cid`.`totalUnappliedCreditMemoAmount`)) ELSE 0 END) AS `currentAmount` , ') ;  \n" +
                "				SET vAgedAmtWithInCondition = CONCAT( ' AND ((TO_DAYS(\"',vDueDate,'\") - TO_DAYS((`cid`.`DocDate` + INTERVAL `cid`.`termsDays` DAY))) < 0 OR (TO_DAYS(\"',vDueDate,'\") - TO_DAYS((`cid`.`DocDate` + INTERVAL `cid`.`termsDays` DAY))) IS NULL) ');  \n" +
                "			ELSEIF (pAgedRecvAmtWithIn = '0-30') THEN  \n" +
                "				-- set vSumOfAgedAmtWithIn = concat( ' SUM(temp_aged_details.agedAmountAs0To30) agedAmountAs0To30 , ') ;  \n" +
                "				SET vAgedAmtWithIn = CONCAT( ' (CASE WHEN (((TO_DAYS(\"',vDueDate,'\") - TO_DAYS((`cid`.`DocDate` + INTERVAL `cid`.`termsDays` DAY))) >= 0) AND ((TO_DAYS(\"',vDueDate,'\") - TO_DAYS((`cid`.`DocDate` + INTERVAL `cid`.`termsDays` DAY))) <= 30)) THEN (SUM(`cid`.`totalInvoicedAmount`) - SUM(`cid`.`totalRecievedAmount`) +SUM(`cid`.`totalUnappliedAmount`) + SUM(`cid`.`totalUnappliedCreditMemoAmount`)) ELSE 0 END) AS `agedAmountAs0To30` , ') ;  \n" +
                "				SET vAgedAmtWithInCondition = CONCAT( ' AND (((TO_DAYS(\"',vDueDate,'\") - TO_DAYS((`cid`.`DocDate` + INTERVAL `cid`.`termsDays` DAY))) >= 0) AND ((TO_DAYS(\"',vDueDate,'\") - TO_DAYS((`cid`.`DocDate` + INTERVAL `cid`.`termsDays` DAY))) <= 30)) ');  \n" +
                "			ELSEIF (pAgedRecvAmtWithIn = '31-60') THEN  \n" +
                "				-- SET vSumOfAgedAmtWithIn = CONCAT( ' SUM(temp_aged_details.agedAmountAs31To60) agedAmountAs31To60 , ') ;  \n" +
                "				SET vAgedAmtWithIn = CONCAT( ' (CASE WHEN (((TO_DAYS(\"',vDueDate,'\") - TO_DAYS((`cid`.`DocDate` + INTERVAL `cid`.`termsDays` DAY))) >= 31) AND ((TO_DAYS(\"',vDueDate,'\") - TO_DAYS((`cid`.`DocDate` + INTERVAL `cid`.`termsDays` DAY))) <= 60)) THEN (SUM(`cid`.`totalInvoicedAmount`) - SUM(`cid`.`totalRecievedAmount`) +SUM(`cid`.`totalUnappliedAmount`) + SUM(`cid`.`totalUnappliedCreditMemoAmount`)) ELSE 0 END) AS `agedAmountAs31To60` , ') ;  \n" +
                "				SET vAgedAmtWithInCondition = CONCAT( ' AND (((TO_DAYS(\"',vDueDate,'\") - TO_DAYS((`cid`.`DocDate` + INTERVAL `cid`.`termsDays` DAY))) >= 31) AND ((TO_DAYS(\"',vDueDate,'\") - TO_DAYS((`cid`.`DocDate` + INTERVAL `cid`.`termsDays` DAY))) <= 60)) ' );  \n" +
                "			ELSEIF (pAgedRecvAmtWithIn = '61-90') THEN  \n" +
                "				-- SET vSumOfAgedAmtWithIn = CONCAT( ' SUM(temp_aged_details.agedAmountAs61To90) agedAmountAs61To90 , ') ;  \n" +
                "				SET vAgedAmtWithIn = CONCAT( ' (CASE WHEN (((TO_DAYS(\"',vDueDate,'\") - TO_DAYS((`cid`.`DocDate` + INTERVAL `cid`.`termsDays` DAY))) >= 61) AND ((TO_DAYS(\"',vDueDate,'\") - TO_DAYS((`cid`.`DocDate` + INTERVAL `cid`.`termsDays` DAY))) <= 90)) THEN (SUM(`cid`.`totalInvoicedAmount`) - SUM(`cid`.`totalRecievedAmount`) +SUM(`cid`.`totalUnappliedAmount`) + SUM(`cid`.`totalUnappliedCreditMemoAmount`)) ELSE 0 END) AS `agedAmountAs61To90` , ') ;  \n" +
                "				SET vAgedAmtWithInCondition = CONCAT( ' AND (((TO_DAYS(\"',vDueDate,'\") - TO_DAYS((`cid`.`DocDate` + INTERVAL `cid`.`termsDays` DAY))) >= 61) AND ((TO_DAYS(\"',vDueDate,'\") - TO_DAYS((`cid`.`DocDate` + INTERVAL `cid`.`termsDays` DAY))) <= 90)) ' );  \n" +
                "			ELSEIF (pAgedRecvAmtWithIn = '91-120') THEN  \n" +
                "				-- SET vSumOfAgedAmtWithIn = CONCAT( ' SUM(temp_aged_details.agedAmountAs91To120) agedAmountAs91To120 , ') ;  \n" +
                "				SET vAgedAmtWithIn = CONCAT( ' (CASE WHEN (((TO_DAYS(\"',vDueDate,'\") - TO_DAYS((`cid`.`DocDate` + INTERVAL `cid`.`termsDays` DAY))) >= 91) AND ((TO_DAYS(\"',vDueDate,'\") - TO_DAYS((`cid`.`DocDate` + INTERVAL `cid`.`termsDays` DAY))) <= 120)) THEN (SUM(`cid`.`totalInvoicedAmount`) - SUM(`cid`.`totalRecievedAmount`) +SUM(`cid`.`totalUnappliedAmount`) + SUM(`cid`.`totalUnappliedCreditMemoAmount`)) ELSE 0 END) AS `agedAmountAs91To120` , ') ;  \n" +
                "				SET vAgedAmtWithInCondition = CONCAT( ' AND (((TO_DAYS(\"',vDueDate,'\") - TO_DAYS((`cid`.`DocDate` + INTERVAL `cid`.`termsDays` DAY))) >= 91) AND ((TO_DAYS(\"',vDueDate,'\") - TO_DAYS((`cid`.`DocDate` + INTERVAL `cid`.`termsDays` DAY))) <= 120)) ' );  \n" +
                "			ELSEIF (pAgedRecvAmtWithIn = '120+') THEN  \n" +
                "				-- SET vSumOfAgedAmtWithIn = CONCAT( ' SUM(temp_aged_details.agedAmountAs121more) agedAmountAs121More , ') ;  \n" +
                "				SET vAgedAmtWithIn = CONCAT( ' (CASE WHEN ((TO_DAYS(\"',vDueDate,'\") - TO_DAYS((`cid`.`DocDate` + INTERVAL `cid`.`termsDays` DAY))) >= 121) THEN (SUM(`cid`.`totalInvoicedAmount`) - SUM(`cid`.`totalRecievedAmount`) + SUM(`cid`.`totalUnappliedCreditMemoAmount`)) ELSE 0 END) AS `agedAmountAs121more` , ') ;  \n" +
                "				SET vAgedAmtWithInCondition = CONCAT( ' AND ((TO_DAYS(\"',vDueDate,'\") - TO_DAYS((`cid`.`DocDate` + INTERVAL `cid`.`termsDays` DAY))) >= 121) ' );  \n" +
                "			END IF;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF (pCustomerID IS NOT NULL AND pCustomerID != '') THEN  \n" +
                "			SET vWCCustIDForInv = CONCAT(' AND `a`.`customerID` IN (',pCustomerID,') ');  \n" +
                "			SET vWCCustIDForPMT = CONCAT(' AND `a`.`mfgcodeID` IN (',pCustomerID,') ');  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF (pIsAllCustAllInvOnly = 1) THEN  \n" +
                "			SET vWCAllCustAllInv = CONCAT(' WHERE `cid`.`invoiceCount` = 1 ');  \n" +
                "		ELSEIF (pIsAllCustAllUninvOnly = 1) THEN  \n" +
                "			SET vWCAllCustAllInv = CONCAT(' WHERE `cid`.`unInvoiceCount` = 1 ');  \n" +
                "		ELSEIF (pIsAllCustAllDraftCMOnly = 1) THEN  \n" +
                "			SET vWCAllCustAllInv = CONCAT(' WHERE `cid`.`dratftCreditMemoCount` = 1 ');  \n" +
                "		END IF;  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "		SET @temp_balanceDue = CONCAT(\"  \n" +
                "		SELECT  temp_aged_details.*,  \n" +
                "			fun_getMfgCodeAndNameByID(temp_aged_details.customerID) AS customerCodeName  \n" +
                "  \n" +
                "		 FROM (  \n" +
                "				SELECT  \n" +
                "					  `cid`.`customerID`                  AS `customerID`,  \n" +
                "					  `cid`.`transMstID` 		      AS `transMstID`,  \n" +
                "					  `cid`.`transNumber` 		      AS `transNumber` ,  \n" +
                "					  `cid`.`transType`		      AS  `transType` ,  \n" +
                "					  `cid`.`transTypeText` 	      AS `transTypeText` ,  \n" +
                "					  SUM(`cid`.`invoiceCount`)           AS `invoiceCount`,  \n" +
                "					  SUM(`cid`.`unInvoiceCount`)         AS `unInvoiceCount`,  \n" +
                "					  SUM(`cid`.`dratftCreditMemoCount`)  AS `dratftCreditMemoCount`,  \n" +
                "					  `cid`.`DocDate`                     AS `DocDate`,  \n" +
                "					  `cid`.`termsDays`                   AS `termsDays`,  \n" +
                "					  (TO_DAYS(CURDATE()) - TO_DAYS((`cid`.`DocDate` + INTERVAL `cid`.`termsDays` DAY))) AS `DueDaysDiff`,  \n" +
                "					  -- (CASE WHEN ((TO_DAYS('\",vDueDate,\"') - TO_DAYS((`cid`.`DocDate` + INTERVAL `cid`.`termsDays` DAY))) >= 0) THEN (SUM(`cid`.`totalInvoicedAmount`) - SUM(`cid`.`totalRecievedAmount`) + SUM(`cid`.`totalUnappliedAmount`) + SUM(`cid`.`totalUnappliedCreditMemoAmount`)) ELSE 0 END) AS `totalDueAmount`,  \n" +
                "					  -- (CASE WHEN ((TO_DAYS('\",vDueDate,\"') - TO_DAYS((`cid`.`DocDate` + INTERVAL `cid`.`termsDays` DAY))) < 0 OR (TO_DAYS('\",vDueDate,\"') - TO_DAYS((`cid`.`DocDate` + INTERVAL `cid`.`termsDays` DAY))) IS NULL) THEN (SUM(`cid`.`totalInvoicedAmount`) - SUM(`cid`.`totalRecievedAmount`) + SUM(`cid`.`totalUnappliedAmount`) + SUM(`cid`.`totalUnappliedCreditMemoAmount`)) ELSE 0 END) AS `currentAmount`,  \n" +
                "					  \",vAgedAmtWithIn,\"  \n" +
                "					  (SUM(`cid`.`totalInvoicedAmount`) - SUM(`cid`.`totalRecievedAmount`) +SUM(`cid`.`totalUnappliedAmount`) + SUM(`cid`.`totalUnappliedCreditMemoAmount`)) AS `totalOutstandingAmount`,  \n" +
                "					  (SUM(`cid`.`totalUnappliedCreditMemoAmount`))  AS `totalCreditMemoAmount`,  \n" +
                "					  SUM(`cid`.`totalUnappliedAmount`)   AS `totalUnappliedAmount`,  \n" +
                "					  (SUM(`cid`.`totalUnappliedCreditMemoAmount`) + SUM(`cid`.`totalUnappliedAmount`)) AS `totalCreditAmount`,  \n" +
                "					  SUM(`cid`.`totalInvoicedAmount`)    AS `totalCustomerInvoicedAmount`,  \n" +
                "					  SUM(`cid`.`totalDraftAmount`)       AS `totalDraftAmount`,  \n" +
                "					  SUM(`cid`.`totalRecievedAmount`)    AS `totalRecievedAmount`,  \n" +
                "					  (CASE WHEN ((SUM(`cid`.`totalInvoicedAmount`) <> 0) AND (SUM(`cid`.`totalInvoicedAmount`) - SUM(`cid`.`totalRecievedAmount`)) = 0) THEN 1 ELSE 0 END) paidInvoiceCount  \n" +
                "				FROM  \n" +
                "					(  \n" +
                "						SELECT  \n" +
                "							 `a`.`customerID`                     AS `customerID`,  \n" +
                "							 `a`.termsDays			      AS `termsDays`,  \n" +
                "							 `a`.`id`                             AS `transMstID`,  \n" +
                "							 IF((`a`.`transType` = 'I'), `a`.`invoiceNumber`, `a`.`creditMemoNumber`) AS `transNumber`,  \n" +
                "							 `a`.`transType`		      AS `transType` ,  \n" +
                "							IF((`a`.`transType` = 'I'), 'Customer Invoice', 'Customer Credit Memo') AS `transTypeText`,  \n" +
                "							IF(((`a`.`transType` = 'I') AND ((`a`.`subStatus` = '2') OR (`a`.`subStatus` = '3'))),1,0) AS `invoiceCount`,  \n" +
                "							IF(((`a`.`transType` = 'I') AND ((`a`.`subStatus` = '1') OR (`a`.`subStatus` > '3'))),1,0) AS `unInvoiceCount`,  \n" +
                "							IF(((`a`.`transType` = 'C') AND (`a`.`subStatus` = '1')),1,0) AS `dratftCreditMemoCount`,  \n" +
                "							IF((`a`.`transType` = 'I'),`a`.`invoiceDate`,`a`.`creditMemoDate`) AS `DocDate`,  \n" +
                "							IFNULL(b.totalCustomerInvoiceReceivedAmount,0)  AS `totalRecievedAmount`,  \n" +
                "							0                                    AS `totalUnappliedAmount`,  \n" +
                "							IF(((`a`.`transType` = 'C') AND (`a`.`subStatus` = '2')),(IFNULL(`a`.`totalAmount`,0) + (IFNULL(c.totalCreditMemoAppliedAmount,0) + IFNULL(d.totRefundIssuedAgainstCreditMemo,0))),0) AS `totalUnappliedCreditMemoAmount`,  \n" +
                "							IFNULL(c.totalCreditMemoAppliedAmount, 0) AS totalCreditMemoAppliedAmount,  \n" +
                "							IF(((`a`.`transType` = 'I') AND ((`a`.`subStatus` = '2') OR (`a`.`subStatus` = '3'))),IFNULL(`a`.`totalAmount`,0),0) AS `totalInvoicedAmount`,  \n" +
                "							-- IF(((`a`.`transType` = 'I') AND ((`a`.`subStatus` = '1') OR (`a`.`subStatus` > '3'))),IFNULL(`a`.`totalAmount`,0),0) AS `totalDraftAmount`  \n" +
                "							(CASE WHEN `a`.`transType` = 'I' AND (`a`.`subStatus` = '1' OR `a`.`subStatus` > '3') THEN IFNULL(`a`.`totalAmount`,0)  \n" +
                "								WHEN `a`.`transType` = 'C' AND `a`.`subStatus` = '1' THEN IFNULL(`a`.`totalAmount`,0)  \n" +
                "								ELSE 0 END) AS totalDraftAmount  \n" +
                "						FROM `customer_packingslip` `a`  \n" +
                "								LEFT JOIN 	(SELECT     `b`.`refCustPackingslipInvoiceID`     					AS `refCustPackingslipInvoiceID`,  \n" +
                "												      SUM(IF(a.refPaymentMode='R',IFNULL(`b`.`paymentAmount`,0), 0))  	AS `totalRecievedAmount`,  \n" +
                "												      0									  	AS `totalCreditMemoAppliedAmount`,  \n" +
                "													SUM(IFNULL(`b`.`paymentAmount`,0))    					AS `totalCustomerInvoiceReceivedAmount`  \n" +
                "												    FROM (`packingslip_invoice_payment` `a`  \n" +
                "												       LEFT JOIN `packingslip_invoice_payment_det` `b`  \n" +
                "													 ON ((`b`.`refPayementid` = `a`.`id`)))  \n" +
                "												    WHERE ((`a`.`isDeleted` = 0) AND (IFNULL(`b`.`isDeleted`,0) = 0)  \n" +
                "													   AND (`a`.`isPaymentVoided` = 0)  \n" +
                "													   AND (`a`.`refPaymentMode` IN ('R','CA','WOFF')))  \n" +
                "												    GROUP BY `b`.`refCustPackingslipInvoiceID` ) b  \n" +
                "												ON a.id = b.refCustPackingslipInvoiceID  \n" +
                "  \n" +
                "								LEFT JOIN 	(  \n" +
                "											SELECT  \n" +
                "													a.`refCustCreditMemoID` AS refCustCreditMemoID,  \n" +
                "													SUM(IF(a.refPaymentMode='CA',IFNULL(`b`.`paymentAmount`,0), 0))  	AS `totalCreditMemoAppliedAmount`  \n" +
                "											FROM `packingslip_invoice_payment` `a`  \n" +
                "												       LEFT JOIN `packingslip_invoice_payment_det` `b`  \n" +
                "													 ON (`b`.`refPayementid` = `a`.`id`)  \n" +
                "												    WHERE (`a`.`isDeleted` = 0) AND (IFNULL(`b`.`isDeleted`,0) = 0)  \n" +
                "													   AND (`a`.`isPaymentVoided` = 0)  \n" +
                "													   AND (`a`.`refPaymentMode` IN ('R','CA'))  \n" +
                "												    GROUP BY `a`.`refCustCreditMemoID`  \n" +
                "												    ) c  ON a.id = c.refCustCreditMemoID  \n" +
                "								LEFT JOIN (  \n" +
                "											SELECT SUM(paymentAmount) AS totRefundIssuedAgainstCreditMemo , refRefundCustCreditMemoID  \n" +
                "												FROM packingslip_invoice_payment_det  \n" +
                "												WHERE isDeleted = 0 AND isPaymentVoided = 0  \n" +
                "												GROUP BY refRefundCustCreditMemoID  \n" +
                "											) d  ON a.id = d.refRefundCustCreditMemoID  \n" +
                "						WHERE ( (`a`.`transType` IN('I','C'))  \n" +
                "						\",vWCCustIDForInv,\"  \n" +
                "						AND  (a.paymentStatus <> 'RE')  \n" +
                "						-- AND  (IFNULL(a.totalAmount,0) != 0)  \n" +
                "						AND (CASE WHEN \",pIsIncludeZeroValueInvoices,\" = 0 AND a.transType = 'I' THEN IFNULL(a.totalAmount,0) > 0 ELSE 1=1 END)  \n" +
                "						AND (`a`.`isDeleted` = 0))  \n" +
                "  \n" +
                "					UNION  \n" +
                "  \n" +
                "						SELECT  \n" +
                "							`a`.`mfgcodeID`                       					AS `customerID`,  \n" +
                "							NULL									AS `termsDays`,  \n" +
                "							`a`.`id`								AS `transMstID`,  \n" +
                "							`a`.`paymentNumber`							AS `transNumber` ,  \n" +
                "							'R'		  	    						AS `transType` ,  \n" +
                "							'Customer Payment' 							AS `transTypeText`,  \n" +
                "							0                                     					AS `invoiceCount`,  \n" +
                "							0                                     					AS `unInvoiceCount`,  \n" +
                "							0                                     					AS `dratftCreditMemoCount`,  \n" +
                "							`a`.`paymentDate`                     					AS `DocDate`,  \n" +
                "							0  									AS `totalRecievedAmount`,  \n" +
                "							((IFNULL(`a`.`paymentAmount`,0) - (SUM(IFNULL(`b`.`paymentAmount`,0)) + IFNULL(c.totRefundIssuedOfPayment,0))) * -(1)) 	AS `totalUnappliedAmount`,  \n" +
                "							0                                     					AS `totalUnappliedCreditMemoAmount`,  \n" +
                "							0									AS `totalCreditMemoAppliedAmount`,  \n" +
                "							0                                     					AS `totalInvoicedAmount`,  \n" +
                "							0                                     					AS `totalDraftAmount`  \n" +
                "							FROM (`packingslip_invoice_payment` `a`  \n" +
                "								LEFT JOIN `packingslip_invoice_payment_det` `b` ON ((`b`.`refPayementid` = `a`.`id`)))  \n" +
                "								LEFT JOIN (  \n" +
                "										SELECT SUM(paymentAmount) AS totRefundIssuedOfPayment , refRefundPaymentID  \n" +
                "										FROM packingslip_invoice_payment_det  \n" +
                "										WHERE isDeleted = 0 AND isPaymentVoided = 0  \n" +
                "										GROUP BY refRefundPaymentID  \n" +
                "									     ) c  ON a.id = c.refRefundPaymentID  \n" +
                "							WHERE ( (`a`.`refPaymentMode` = 'R')  \n" +
                "							\",vWCCustIDForPMT,\"  \n" +
                "							AND (`a`.`isDeleted` = 0) AND (IFNULL(`b`.`isDeleted`,0) = 0)  \n" +
                "							AND (`a`.`isPaymentVoided` = 0) )  \n" +
                "							GROUP BY `a`.`mfgcodeID`, a.id  ,`a`.`paymentDate`,`a`.`paymentAmount` , `a`.`paymentNumber`  \n" +
                "							HAVING  ((IFNULL(`a`.`paymentAmount`,0) - SUM(IFNULL(`b`.`paymentAmount`,0))) * -(1))  != 0  \n" +
                "					) AS  cid  \n" +
                "  \n" +
                "				\",vWCAllCustAllInv,\"  \n" +
                "				GROUP BY `cid`.`customerID`,`cid`.`transMstID`, `cid`.`transNumber` ,  \n" +
                "					`cid`.`DocDate`, `cid`.`termsDays` ,  `cid`.`transType` , `cid`.`transTypeText` ,  \n" +
                "					(TO_DAYS(CURDATE()) - TO_DAYS((`cid`.`DocDate` + INTERVAL `cid`.`termsDays` DAY)))  \n" +
                "				HAVING (CASE WHEN `cid`.`transType` = 'C' AND \",pIsAllCustAllDraftCMOnly,\" != 1 THEN SUM(`cid`.`totalUnappliedCreditMemoAmount`) != 0  \n" +
                "							\",vAgedAmtWithInCondition,\"  \n" +
                "						WHEN `cid`.`transType` = 'I' AND \",pIsAllCustAllUninvOnly,\" != 1 THEN (SUM(`cid`.`totalInvoicedAmount`) - SUM(`cid`.`totalRecievedAmount`) != 0)  \n" +
                "							\",vAgedAmtWithInCondition,\"  \n" +
                "						WHEN `cid`.`transType` = 'R' THEN SUM(`cid`.`totalUnappliedAmount`) != 0  \n" +
                "					ELSE 1=1 END)  \n" +
                "  \n" +
                "  \n" +
                "			   ) AS temp_aged_details  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "		\");  \n" +
                "  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	IF (pPageIndex <> 0 AND pRecordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (pPageIndex -1) * pRecordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY transTypeText asc, customerCodeName asc \") ;  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = '1=1' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/* to get total count of rows */  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*) as TotalRecord FROM (\", @temp_balanceDue ,\" ) c where \", pWhereClause );  \n" +
                "	PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"  \n" +
                "			SELECT 	c.*  \n" +
                "			FROM 	(\", @temp_balanceDue ,\" ) c  \n" +
                "			where 	\", pWhereClause ,\" \", pOrderBy , rowNumWhere);  \n" +
                "	-- SELECT @SQLStatement2;  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 13-12-2021  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1240,'1.00','V1',' Sproc_GetCustAgedReceivablesRangeDet - KETAN '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1240:
            allDbChangesArray.push(
                /* **************************** New Script -> 14-12-2021  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetUnitDetailFormula` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetUnitDetailFormula`(  \n" +
                "	IN ppageIndex INT(11),  \n" +
                "	IN precordPerPage INT(11),  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pUnitID INT(11)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE pOffset INT(11);  \n" +
                "	DECLARE rowNumWhere VARCHAR(255);  \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
                "  \n" +
                "	SET @temp_Sproc_GetUnitDetailFormula = CONCAT(\"  \n" +
                "		SELECT 		udf.id,  \n" +
                "				udf.unitID,  \n" +
                "				u.unitName,  \n" +
                "				CONCAT('1 ', u.abbreviation) AS 1UOM,  \n" +
                "				uo.abbreviation AS BaseUOM,  \n" +
                "				Replace(udf.formula,'X',1) as currentValue,  \n" +
                "				udf.toUnitID,  \n" +
                "				uo.unitName toUnitName,  \n" +
                "				udf.formula,  \n" +
                "				fun_getUserNameByID(udf.updatedBy) updatedby,  \n" +
                "				fun_getUserNameByID(udf.createdBy) createdby,  \n" +
                "				fun_getRoleByID(udf.createByRoleId) createdbyRole,  \n" +
                "				fun_getRoleByID(udf.updateByRoleId) updatedbyRole,  \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(udf.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAt,  \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(udf.UpdatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt  \n" +
                "		FROM 		unit_detail_formula udf  \n" +
                "		LEFT JOIN 	uoms u ON u.id = udf.unitID AND IFNULL(u.isdeleted,0) = 0  \n" +
                "		LEFT JOIN 	uoms uo ON uo.id = udf.toUnitID AND IFNULL(uo.isdeleted,0) = 0  \n" +
                "		WHERE 		IFNULL(udf.isdeleted,0) = 0  \n" +
                "					AND udf.unitID = \",pUnitID);  \n" +
                "  \n" +
                "	IF (pOrderBy IS NOT NULL) THEN  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , \"unitName DESC\") ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "  \n" +
                "		SET pWhereClause = '1=1' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	/* to get total count of rows */  \n" +
                "		SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_GetUnitDetailFormula,\" ) c where 1=1 and \", pWhereClause);  \n" +
                "		PREPARE query2 FROM @SQLStatement2;  \n" +
                "		EXECUTE query2;  \n" +
                "		DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "		SET @SQLStatement2 = CONCAT(\"select * from ( \", @temp_Sproc_GetUnitDetailFormula,\" ) c  \n" +
                "			where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "		PREPARE query1 FROM @SQLStatement2;  \n" +
                "		EXECUTE query1;  \n" +
                "		DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version ->  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1241,'1.00','V1',' Sproc_GetUnitDetailFormula - CC '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1241:
            allDbChangesArray.push(
                /* **************************** New Script -> 15-12-2021 *********************************** */
                "CREATE or replace VIEW `vu_umid_packingslipmapping_det` AS  \n" +
                "    SELECT DISTINCT  \n" +
                "        `cspd`.`refComponentSidStockID` AS `refComponentSidStockID`,  \n" +
                "        `ps`.`id` AS `PackingslipID`,  \n" +
                "        `ps`.`packingSlipNumber` AS `packingSlipNumber`,  \n" +
                "        `ps`.`mfgCodeID` AS `packingslipsupplierid`,  \n" +
                "        `mcm`.`mfgCode` AS `packingslipSupplierCode`  \n" +
                "    FROM  \n" +
                "        (((`component_sid_stock_packing_detail` `cspd`  \n" +
                "        JOIN `packing_slip_material_receive_det` `psd` ON (((`cspd`.`refPackingSlipDetailID` = `psd`.`id`)  \n" +
                "            AND (`psd`.`isDeleted` = 0))))  \n" +
                "        JOIN `packing_slip_material_receive` `ps` ON (((`psd`.`refPackingSlipMaterialRecID` = `ps`.`id`)  \n" +
                "            AND (`ps`.`isDeleted` = 0))))  \n" +
                "        JOIN `mfgcodemst` `mcm` ON (((`mcm`.`id` = `ps`.`mfgCodeID`)  \n" +
                "            AND (`mcm`.`isDeleted` = 0))));  \n" +
                "DROP procedure IF EXISTS `Sproc_verify_UID`;  \n" +
                "CREATE PROCEDURE `Sproc_verify_UID`(  \n" +
                "	IN pVerificationType VARCHAR(100),  \n" +
                "	IN pUID VARCHAR(15),  \n" +
                "	IN pScanMFGPNLabel VARCHAR(1000),  \n" +
                "	IN pScanPID VARCHAR(50),  \n" +
                "	IN pScanCPN VARCHAR(50),  \n" +
                "	IN pScanUID VARCHAR(15),  \n" +
                "	IN pScanMFGPN VARCHAR(100),  \n" +
                "	IN pCreatedBy VARCHAR(255),  \n" +
                "	IN pMFRId INT,  \n" +
                "	IN pBarcodeId INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE uidVerified TINYINT(1) DEFAULT 0;  \n" +
                "	DECLARE v_mfgcodeID INT;  \n" +
                "	DECLARE v_mfgPN VARCHAR(100);  \n" +
                " 	DECLARE v_PIDCode VARCHAR(100);  \n" +
                " 	DECLARE v_PartDescription VARCHAR(2000);  \n" +
                "	DECLARE v_RoHSStatusID INT;  \n" +
                "	DECLARE v_compStockID INT;  \n" +
                "	DECLARE	v_pkgQty DECIMAL(18,8);  \n" +
                "	DECLARE v_pkgUnit DECIMAL(18,8);  \n" +
                " 	DECLARE v_uom VARCHAR(255);  \n" +
                " 	DECLARE v_string2PartID INT;  \n" +
                " 	DECLARE v_scanString2MFG VARCHAR(100);  \n" +
                " 	DECLARE v_scanString2MFGPNID VARCHAR(100);  \n" +
                " 	DECLARE v_packingSlipId INT;  \n" +
                "	DECLARE	v_packingSlipNumber VARCHAR(255);  \n" +
                "	DECLARE	v_packingSlipSupplierId INT;  \n" +
                "	DECLARE	v_packingSlipSupplierCode VARCHAR(10);  \n" +
                "	DECLARE	v_cOfCValue VARCHAR(100);  \n" +
                "	DECLARE v_isCustom TINYINT(1) DEFAULT 0;  \n" +
                "	DECLARE v_componentId INT;  \n" +
                "	DECLARE v_successId INT;  \n" +
                "	DECLARE v_refcompid INT;  \n" +
                "    DECLARE v_mountingTypeID INT;  \n" +
                "    DECLARE v_partPackage VARCHAR(255);  \n" +
                "    DECLARE v_uomClassID INT;  \n" +
                "    DECLARE v_spq DECIMAL(18,8);  \n" +
                "    DECLARE v_orgQty DECIMAL(18,8);  \n" +
                "	DECLARE v_orgPkgUnit DECIMAL(18,8);  \n" +
                "    DECLARE v_imageURL VARCHAR(1000);  \n" +
                "    DECLARE v_documentPath VARCHAR(1000);  \n" +
                "    DECLARE v_mfgCode VARCHAR(255);  \n" +
                "    DECLARE v_mfgName VARCHAR(255);  \n" +
                "    DECLARE v_mfgType VARCHAR(20);  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempUIDDet;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempUIDHistory;  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS tempUIDDet AS  \n" +
                "  \n" +
                "    SELECT  \n" +
                "						a.* , (CASE WHEN fun_getCofCDocumentCount(IFNULL(parentUIDId,id), packingSlipId) > 0 THEN  \n" +
                "											(  \n" +
                "												CASE  \n" +
                "													WHEN stockInventoryType = 'NI' THEN  \n" +
                "													      CONCAT(a.supplierCode,a.packingSlipNumber)  \n" +
                "													WHEN stockInventoryType = 'SI' THEN  \n" +
                "												       ifnull(CONCAT(a.supplierCode,a.packingSlipNumber),IFNULL(parentUID,uid))  \n" +
                "													ELSE  \n" +
                "														uid  \n" +
                "												END  \n" +
                "											)ELSE NULL END) cOfCValue  \n" +
                "					FROM 		(  \n" +
                "								SELECT 		cs.id, 		cs.uid, 	cs.parentUID,	cs.scanlabel, 	cs.refcompid, 	c.mfgcodeID, 	c.mfgPN, cs.stockInventoryType, c.imageURL, c.documentPath,  \n" +
                "											cs.spq, 	cs.orgQty,	cs.orgPkgUnit,	c.mountingTypeID, IFNULL(c.partPackage, fun_getPackageCaseNameByID(c.partPackageID)) partPackage,  \n" +
                "										c.PIDCode, 	c.RoHSStatusID,	cs.pkgQty,	cs.pkgUnit,	cs.uom,   um.unitName,   um.measurementTypeID uomClassID,   c.isCustom,  c.mfgPNDescription,  \n" +
                "									   vps.PackingslipID PackingslipID,  \n" +
                "                                       vps.packingSlipNumber packingSlipNumber,vps.packingSlipSupplierId, vps.packingslipSupplierCode supplierCode,  \n" +
                "                                        m.mfgCode, m.mfgName, m.mfgType  ,cs.parentUIDId  \n" +
                "								FROM 		component_sid_stock cs  \n" +
                "								INNER JOIN 	component c ON cs.refcompid = c.id  \n" +
                "								INNER JOIN 	mfgcodemst m ON c.mfgcodeID = m.id  \n" +
                "								INNER JOIN 	uoms um ON cs.uom = um.id  \n" +
                "                                Left join vu_umid_packingslipmapping_det vps on case when stockInventoryType ='SI' THEN cs.parentUIDId else  cs.id end =  refComponentSidStockID  \n" +
                "								WHERE 		cs.uid  = pUID  \n" +
                "								AND 		cs.isDeleted = 0  \n" +
                "								-- LIMIT 		1  \n" +
                "							) AS a;  \n" +
                "    /* Old Query commented by DP on 14th-dec-2021 keep this query upto next 1 month till we not give final release on production  \n" +
                "	SELECT 		*,  \n" +
                "				fun_getMfgCodeByID(packingSlipSupplierId) supplierCode  \n" +
                "		FROM 		(  \n" +
                "					SELECT 		*,  \n" +
                "							fun_getPackingSlipNumberById(packingSlipId) packingSlipNumber,  \n" +
                "							fun_getPackingSlipSupplierIdBySlipId(packingSlipId) packingSlipSupplierId,  \n" +
                "                            (CASE WHEN fun_getCofCDocumentCount(IFNULL(parentUIDId,id), packingSlipId) > 0 THEN  \n" +
                "											(  \n" +
                "												CASE  \n" +
                "													WHEN stockInventoryType = 'NI' THEN  \n" +
                "														fun_getUMIDPackingSlipNameByID(id)  \n" +
                "													WHEN stockInventoryType = 'SI' THEN  \n" +
                "														IFNULL(fun_getUMIDPackingSlipNameByID(id),uid)  \n" +
                "													ELSE  \n" +
                "														uid  \n" +
                "												END  \n" +
                "											)ELSE NULL END) cOfCValue  \n" +
                "					FROM 		(  \n" +
                "								SELECT 		cs.id, 		cs.uid, 	cs.parentUIDId,	cs.scanlabel, 	cs.refcompid, 	c.mfgcodeID, 	c.mfgPN, cs.stockInventoryType, c.imageURL, c.documentPath,  \n" +
                "											cs.spq, 	cs.orgQty,	cs.orgPkgUnit,	c.mountingTypeID, IFNULL(c.partPackage, fun_getPackageCaseNameByID(c.partPackageID)) partPackage,  \n" +
                "										c.PIDCode, 	c.RoHSStatusID,	cs.pkgQty,	cs.pkgUnit,	cs.uom,   um.unitName,   um.measurementTypeID uomClassID,   c.isCustom,  c.mfgPNDescription,  \n" +
                "										fun_getUMIDPackingSlipIdByID(cs.id) packingSlipId, m.mfgCode, m.mfgName, m.mfgType  \n" +
                "								FROM 		component_sid_stock cs  \n" +
                "								INNER JOIN 	component c ON cs.refcompid = c.id  \n" +
                "								INNER JOIN 	mfgcodemst m ON c.mfgcodeID = m.id  \n" +
                "								INNER JOIN 	uoms um ON cs.uom = um.id  \n" +
                "								WHERE 		cs.uid =  pUID  \n" +
                "								AND 		cs.isDeleted = 0  \n" +
                "								LIMIT 		1  \n" +
                "							) AS a  \n" +
                "				) AS b;  */  \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS tempUIDHistory (  \n" +
                "		scanString1 VARCHAR(1000) NULL,  \n" +
                "		scanString2 VARCHAR(1000) NULL,  \n" +
                "		string1PartID INT(11) NULL,  \n" +
                "		scanString1MFG VARCHAR(100) NULL,  \n" +
                "		scanString1MFGPNID VARCHAR(100) NULL,  \n" +
                "		string2PartID INT(11) NULL,  \n" +
                "		scanString2MFG VARCHAR(100) NULL,  \n" +
                "		scanString2MFGPNID VARCHAR(100) NULL,  \n" +
                "		STATUS VARCHAR(100) NULL,  \n" +
                "		packingSlipId INT(11) NULL,  \n" +
                "		packingSlipNumber VARCHAR(255) NULL,  \n" +
                "		packingSlipSupplierId INT(11) NULL,  \n" +
                "		packingSlipSupplierCode VARCHAR(10) NULL,  \n" +
                "		cOfCValue VARCHAR(100) NULL,  \n" +
                "		isDeleted TINYINT(1) DEFAULT '0',  \n" +
                "		createdBy VARCHAR(255) NULL,  \n" +
                "		createdAt DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP  \n" +
                "	);  \n" +
                "  \n" +
                "	INSERT INTO `tempUIDHistory`(	`scanString1`, 		`scanString2`, 		`string1PartID`,  \n" +
                "					`scanString1MFG`,	`scanString1MFGPNID`,	`string2PartID`,  \n" +
                "					`scanString2MFG`,	`scanString2MFGPNID`,	`status`,  \n" +
                "					`packingSlipId`,	`packingSlipNumber`,	`packingSlipSupplierId`,  \n" +
                "					`packingSlipSupplierCode`,			`cOfCValue`)  \n" +
                "	SELECT 	pUID 				scanString1, 			IFNULL(pScanMFGPNLabel,		IFNULL(pScanPID,IFNULL(pScanCPN,IFNULL(pScanUID,pScanMFGPN)))) scanString2,  \n" +
                "		UH.refcompid string1PartID, 	UH.mfgcodeID scanString1MFG, 	UH.mfgPN scanString1MFGPNID,  \n" +
                "		NULL string2PartID,  \n" +
                "		NULL scanString2MFG,		NULL scanString2MFGPNID,	NULL STATUS,  \n" +
                "		packingSlipId,			packingSlipNumber,		packingSlipSupplierId,  \n" +
                "		supplierCode,			cOfCValue  \n" +
                "	FROM 	tempUIDDet UH;  \n" +
                "  \n" +
                "	SELECT 	u.mfgcodeID,	u.mfgPN,	u.PIDCode, 	u.mfgPNDescription,	u.RoHSStatusID,	u.mountingTypeID, u.partPackage, u.documentPath,  \n" +
                "			u.spq, 	u.orgQty,	u.orgPkgUnit, 	u.id,		u.pkgQty,	u.pkgUnit,	u.unitName,	u.uomClassID,	u.packingSlipId, u.mfgCode, u.mfgName, u.mfgType,  \n" +
                "            u.packingSlipNumber, 	u.packingSlipSupplierId, 	u.supplierCode, 		u.cOfCValue,	u.isCustom,	u.refcompid, u.imageURL  \n" +
                "	INTO 	v_mfgcodeID,	v_mfgPN, 	v_PIDCode, 	v_PartDescription,	v_RoHSStatusID,	v_mountingTypeID, v_partPackage, v_documentPath,  \n" +
                "			v_spq, 			v_orgQty,	v_orgPkgUnit,	v_compStockID,	v_pkgQty,	v_pkgUnit, 	v_uom, 	v_uomClassID,   v_packingSlipId,	v_mfgCode, v_mfgName, v_mfgType,  \n" +
                "            v_packingSlipNumber,	v_packingSlipSupplierId,	v_packingSlipSupplierCode,	v_cOfCValue, 	v_isCustom,	v_refcompid, v_imageURL  \n" +
                "	FROM 	tempUIDDet u;  \n" +
                "  \n" +
                "	IF EXISTS(SELECT 1 FROM tempUIDDet LIMIT 1) THEN  \n" +
                "		IF (pScanMFGPNLabel IS NOT NULL) THEN  \n" +
                "			-- IF EXISTS (SELECT 1 FROM tempUIDDet cs WHERE cs.scanlabel = pScanMFGPNLabel LIMIT 1) THEN  \n" +
                "				CALL Sproc_MatchBarCodeAndSaveDelimiters (pScanMFGPNLabel,1,NULL,NULL,false,pMFRId,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,pBarcodeId,NULL,NULL,'M',NULL,NULL,NULL,NULL);  \n" +
                "				DROP TEMPORARY TABLE IF EXISTS temp_ScanUIDValidationDetail;  \n" +
                "				CREATE TEMPORARY TABLE IF NOT EXISTS temp_ScanUIDValidationDetail AS  \n" +
                "				SELECT * FROM tempUIDSuccessDetail;  \n" +
                "				DROP TEMPORARY TABLE IF EXISTS temp_ScanUIDComponentDetail;  \n" +
                "				CREATE TEMPORARY TABLE IF NOT EXISTS temp_ScanUIDComponentDetail AS  \n" +
                "				SELECT * FROM tempUIDComponentDetail;  \n" +
                "				SELECT IsSuccess INTO v_successId FROM temp_ScanUIDValidationDetail LIMIT 1;  \n" +
                "				IF (v_successId = 1) THEN  \n" +
                "					SELECT id INTO v_componentId FROM temp_ScanUIDComponentDetail LIMIT 1;  \n" +
                "					IF (v_componentId = v_refcompid) THEN  \n" +
                "						SET uidVerified = 1;  \n" +
                "					END IF;  \n" +
                "				ELSE  \n" +
                "					SET uidVerified = 0;  \n" +
                "				END IF;  \n" +
                "			-- END IF;  \n" +
                "		ELSEIF (pScanPID IS NOT NULL OR pScanCPN IS NOT NULL) THEN  \n" +
                "			SELECT 	c.id, 		c.mfgcodeID, 		c.mfgPN  \n" +
                "			INTO 	v_string2PartID,	v_scanString2MFG, 	v_scanString2MFGPNID  \n" +
                "			FROM 	component c  \n" +
                "			WHERE 	c.PIDCode = IFNULL(pScanPID,pScanCPN);  \n" +
                "			IF EXISTS (SELECT 1 FROM component c WHERE c.PIDCode = IFNULL(pScanPID,pScanCPN) AND c.mfgcodeID = v_mfgcodeID AND c.mfgPN = v_mfgPN LIMIT 1) THEN  \n" +
                "				SET uidVerified = 1;  \n" +
                "			END IF	;  \n" +
                "		ELSEIF (pUID = pScanUID) THEN  \n" +
                "			SELECT 	c.refcompid, 		c.mfgcodeID, 		c.mfgPN  \n" +
                "			INTO 	v_string2PartID,	v_scanString2MFG, 	v_scanString2MFGPNID  \n" +
                "			FROM 	tempUIDDet c;  \n" +
                "			SET uidVerified = 1;  \n" +
                "		ELSEIF (pScanMFGPN IS NOT NULL) THEN  \n" +
                "			IF EXISTS (SELECT 1 FROM tempUIDDet cs WHERE cs.mfgPN = pScanMFGPN LIMIT 1) THEN  \n" +
                "				SELECT 	c.refcompid, 	c.mfgcodeID, 		c.mfgPN  \n" +
                "				INTO 	v_string2PartID,	v_scanString2MFG, 	v_scanString2MFGPNID  \n" +
                "				FROM 	tempUIDDet c;  \n" +
                "				SET uidVerified = 1;  \n" +
                "			ELSE  \n" +
                "				SELECT 	c.id, 			c.mfgcodeID, 		c.mfgPN  \n" +
                "				INTO 	v_string2PartID,	v_scanString2MFG, 	v_scanString2MFGPNID  \n" +
                "				FROM 	component c  \n" +
                "				WHERE 	c.mfgPN = pScanMFGPN;  \n" +
                "			END IF;  \n" +
                "		END IF;  \n" +
                "		UPDATE 	tempUIDHistory  \n" +
                "		SET 	string2PartID = v_string2PartID,  \n" +
                "			scanString2MFG = v_scanString2MFG,  \n" +
                "			scanString2MFGPNID = v_scanString2MFGPNID;  \n" +
                "	ELSE  \n" +
                "		INSERT INTO `tempUIDHistory`(`scanString1`, `scanString2`)  \n" +
                "				VALUES (pUID, IFNULL(pScanMFGPNLabel,IFNULL(pScanPID,IFNULL(pScanCPN,pScanUID))));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	INSERT INTO `uid_verification_history`(	`scanString1`,		`scanString2`,		`verificationType`,  \n" +
                "						`string1PartID`,	`scanString1MFG`,	`scanString1MFGPNID`,  \n" +
                "						`string2PartID`,	`scanString2MFG`,	`scanString2MFGPNID`,  \n" +
                "						`status`,  \n" +
                "						`isDeleted`,		`createdBy`,		`createdAt`)  \n" +
                "	SELECT 	UH.scanString1, 	UH.scanString2,		pVerificationType,  \n" +
                "		UH.string1PartID, 	(SELECT m.mfgCode FROM mfgcodemst m WHERE m.id = UH.scanString1MFG),  \n" +
                "		UH.scanString1MFGPNID,	UH.string2PartID,  \n" +
                "		(SELECT m.mfgCode FROM mfgcodemst m WHERE m.id = UH.scanString2MFG),	UH.scanString2MFGPNID,  \n" +
                "		CASE WHEN (uidVerified = 1) THEN 'Passed Verification' ELSE 'Failed Verification' END,  \n" +
                "		0,	IFNULL(pCreatedBy,''),	fun_DatetimetoUTCDateTime() `createdAt`  \n" +
                "	FROM 	tempUIDHistory UH;  \n" +
                "  \n" +
                "	SELECT 	*, 			v_mfgcodeID mfgcodeID, 	v_mfgCode mfgCode, v_mfgName mfgName, v_mfgType mfgType, v_documentPath documentPath,  \n" +
                "		v_PIDCode PIDCode,	v_PartDescription partDescription,	v_RoHSStatusID RoHSStatusID, 	v_compStockID compStockID,  \n" +
                "        fun_getMountingTypeNameByID(v_mountingTypeID) mountingType, v_partPackage partPackage,  \n" +
                "		v_spq spq, 			v_orgQty orgQty,	v_orgPkgUnit orgPkgUnit, v_imageURL imageURL, v_mfgPN mfgPN,  \n" +
                "		v_pkgQty pkgQty,	v_pkgUnit pkgUnit, 		v_uom uom,    v_uomClassID uomClassID,  \n" +
                "		v_packingSlipId packingSlipId,				v_packingSlipNumber packingSlipNumber,  \n" +
                "		v_packingSlipSupplierId packingSlipSupplierId,		v_packingSlipSupplierCode packingSlipSupplierCode, v_refcompid refcompid,  \n" +
                "		v_cOfCValue cOfCValue,	v_isCustom isCustom  \n" +
                "	FROM 	uid_verification_history  \n" +
                "	WHERE 	id = LAST_INSERT_ID();  \n" +
                "  \n" +
                "	IF (pScanMFGPNLabel IS NOT NULL AND uidVerified = 0) THEN  \n" +
                "		SELECT * FROM tempUIDSuccessDetail;  \n" +
                "	ELSE  \n" +
                "		SELECT 1;  \n" +
                "	END IF;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 15-12-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1242,'1.00','V1',' Bug 39470: COFC Document link should be display in split UMID [Tune by DP]'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1242:
            allDbChangesArray.push(
                /* **************************** New Script -> 15-12-2021  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetSalesOrderSummaryList` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetSalesOrderSummaryList`(  \n" +
                "	IN ppageIndex INT(11),  \n" +
                "	IN precordPerPage INT(11),  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pfilterStatus VARCHAR(100),  \n" +
                "	IN pcustomerIds VARCHAR(16000),  \n" +
                "	IN pshippingMethodId VARCHAR(16000),  \n" +
                "	IN ptermsIds VARCHAR(16000),  \n" +
                "	IN psearchposotext VARCHAR(1000),  \n" +
                "	IN psearchposotype VARCHAR(10),  \n" +
                "	IN pfromDate DATE,  \n" +
                "	IN ptoDate DATE,  \n" +
                "	IN psearchextPricetext VARCHAR(1000),  \n" +
                "	IN psearchextPricetype VARCHAR(10),  \n" +
                "	IN pfilterPOStatus VARCHAR(20)  ,  \n" +
                "    IN pIsRmaPO TINYINT,  \n" +
                "    IN pfromPODate DATE,  \n" +
                "	IN ptoPODate DATE  \n" +
                "	)  \n" +
                "BEGIN  \n" +
                "  \n" +
                "		DECLARE pOffset INT(11);  \n" +
                "		DECLARE rowNumWhere VARCHAR(255) ;  \n" +
                "		DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
                "		DECLARE v_TimeZone VARCHAR(50);  \n" +
                "  \n" +
                "		SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "		SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
                "  \n" +
                "		SET @tempQuery = CONCAT(\"SELECT s.id,  \n" +
                "       s.salesOrderNumber,  \n" +
                "       s.poNumber,  \n" +
                "       s.poDate,  \n" +
                "       s.customerID,  \n" +
                "       s.contactPersonID,  \n" +
                "       s.billingAddressID,  \n" +
                "       s.shippingAddressID,  \n" +
                "       s.shippingMethodID,  \n" +
                "       s.revision,  \n" +
                "       s.shippingComment,  \n" +
                "       s.termsID,  \n" +
                "       CASE WHEN s.status=0 THEN 'Draft' ELSE 'Published' END statusConvertedValue,  \n" +
                "       CASE WHEN s.blanketPOOption=1 THEN 'Use Blanket PO# for All Releases' WHEN s.blanketPOOption=2 THEN 'Link Blanket PO to Future PO(s)' WHEN s.blanketPOOption=3 THEN 'Use Blanket PO# and Release#' ELSE '' END blanketPOOptionText,  \n" +
                "       s.blanketPOOption,  \n" +
                "       s.status,  \n" +
                "       s.soDate,  \n" +
                "       s.revisionChangeNote,  \n" +
                "       s.salesCommissionTo,  \n" +
                "       s.intermediateShipmentId,  \n" +
                "       s.freeOnBoardId,  \n" +
                "       s.internalComment as internalCommentSo,  \n" +
                "       s.serialNumber,  \n" +
                "       s.carrierID,  \n" +
                "       s.carrierAccountNumber,  \n" +
                "       s.originalPODate,  \n" +
                "       s.isLegacyPO,  \n" +
                "       CASE WHEN s.isLegacyPO=0 THEN 'No' ELSE   'Yes' END legacyPOText,  \n" +
                "       s.isRmaPO,  \n" +
                "       CASE WHEN s.isRmaPO=0 THEN 'No' ELSE   'Yes' END rmaPOText,  \n" +
                "       s.poRevision,  \n" +
                "       CASE WHEN isBlanketPO=0 THEN 'No' ELSE 'Yes' END blanketPOText,  \n" +
                "       s.isBlanketPO,  \n" +
                "       CONCAT('(',mg.mfgCode,')',mg.mfgName) AS companyName,  \n" +
                "       mg.mfgName,  \n" +
                "       s.poRevisionDate,  \n" +
                "       fun_getEmployeeNameByEmpID(s.contactPersonID) fullName,  \n" +
                "       fun_getGenericCategoryCodeNameByID(s.termsID) termsDisplayText,  \n" +
                "       fun_getGenericCategoryCodeNameByID(s.carrierID) carrierName,  \n" +
                "       fun_getGenericCategoryCodeNameByID(s.shippingMethodID) genCategoryCode,  \n" +
                "       fb.name freeOnBoardName,  \n" +
                "       s.`rmaNumber` AS `rmaNumber`,  \n" +
                "	   s.`isDebitedByCustomer` AS `isDebitedByCustomer`,  \n" +
                "	   (CASE WHEN (s.`isDebitedByCustomer` = 1) THEN 'Yes' ELSE 'No' END) AS `debitedByCustText`,  \n" +
                "       s.`orgPONumber` AS `rmaOrgPONumber`,  \n" +
                "       s.`orgSalesOrderID` AS `orgSalesOrderID`,  \n" +
                "		s.`isReworkRequired` AS `isReworkRequired`,  \n" +
                "       (CASE  WHEN (s.`isReworkRequired` = 1) THEN 'Yes'  ELSE 'No'  END) AS `reworkReqText`,  \n" +
                "	   s.`reworkPONumber` AS `reworkPONumber`,  \n" +
                "      ifnull(sodCnt.totalLineCount,0)  totalSOLines,  \n" +
                "       ifnull(sodCnt.completedLineCount,0) totalCompletedSOLines,  \n" +
                "       (case when sodCnt.totalLineCount is null then 0 else  Round((sodCnt.completedLineCount * 100/sodCnt.totalLineCount),2) end)soCompletionPercentage,  \n" +
                "      (case when sodCnt.canceledLineCount = ifnull(sodCnt.totalLineCount,0) then 'Canceled'  \n" +
                "			when (sodCnt.canceledLineCount + sodCnt.completedLineCount) = ifnull(sodCnt.totalLineCount,0)  then 'Completed'  \n" +
                "            else 'In Progress' end) salesOrderDetStatusConvertedValues,  \n" +
                "      fun_getTotalSoPrice(s.id) soTotalPrice,  \n" +
                "      fun_getTotalInvoicePrice(s.id) soInvoicePrice,  \n" +
                "			fun_getUserNameByID(s.updatedBy) soModifiedBy,  \n" +
                "			fun_getUserNameByID(s.createdBy) soCreatedBy,  \n" +
                "			fun_getRoleByID(s.createByRoleId) createdbyRole,  \n" +
                "			fun_getRoleByID(s.updateByRoleId) updatedbyRole,  \n" +
                "                       fun_ApplyCommonDateTimeFormatByParaValue(s.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdDate,  \n" +
                "		       fun_ApplyCommonDateTimeFormatByParaValue(s.UpdatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') modifyDate  \n" +
                "		       FROM salesordermst s JOIN mfgcodemst mg ON mg.id=s.customerID AND mg.isdeleted=0  \n" +
                "			LEFT JOIN freeonboardmst fb ON fb.id=s.freeOnBoardId AND fb.isdeleted=0  \n" +
                "    LEFT JOIN ( select sod.refSalesOrderID as soId ,  \n" +
                "							sum((case when sod.salesOrderDetStatus = 2 then 1 else 0 end) ) completedLineCount,  \n" +
                "							count(1) totalLineCount,  \n" +
                "                            sum((case when sod.isCancle = 1 then 1 else 0 end)) canceledLineCount  \n" +
                "                            From salesorderdet sod where sod.isDeleted = 0  \n" +
                "                            Group By sod.refSalesOrderID ) sodCnt on sodCnt.soId = s.id  \n" +
                "			WHERE s.isdeleted=0  \n" +
                "			\");  \n" +
                "  \n" +
                "  \n" +
                "		IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY serialNumber DESC\") ;  \n" +
                "		ELSE  \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF (pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "			SET pWhereClause = '1=1' ;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "                IF(pfilterStatus IS NOT NULL AND pfilterStatus != '') THEN  \n" +
                "  \n" +
                "		      SET pWhereClause = CONCAT(pWhereClause, ' AND  FIND_IN_SET(salesOrderDetStatusConvertedValues,''', pfilterStatus ,''')');  \n" +
                "	        END IF;  \n" +
                "	        IF(pfilterPOStatus IS NOT NULL AND pfilterPOStatus != '') THEN  \n" +
                "  \n" +
                "		      SET pWhereClause = CONCAT(pWhereClause, ' AND  FIND_IN_SET(statusConvertedValue,''', pfilterPOStatus ,''')');  \n" +
                "	        END IF;  \n" +
                "	        IF(pcustomerIds IS NOT NULL AND pcustomerIds != '') THEN  \n" +
                "		      SET pWhereClause = CONCAT(pWhereClause, ' AND customerID in (',pcustomerIds,')');  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "			SET pWhereClause = '1=1' ;  \n" +
                "		END IF;  \n" +
                "                IF(pshippingMethodId IS NOT NULL AND pshippingMethodId != '') THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause, ' AND shippingMethodID in (',pshippingMethodId,')');  \n" +
                "		END IF;  \n" +
                "                IF(ptermsIds IS NOT NULL AND ptermsIds != '') THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause, ' AND termsID in (',ptermsIds,')');  \n" +
                "		END IF;  \n" +
                "		IF(psearchposotype IS NOT NULL AND psearchposotext IS NOT NULL)THEN  \n" +
                "			IF(psearchposotype='C')THEN  \n" +
                "				SET pWhereClause = CONCAT(pWhereClause, ' AND (salesOrderNumber  like ''%',psearchposotext,'%'' OR poNumber  like ''%',psearchposotext,'%'')');  \n" +
                "			ELSE  \n" +
                "				SET pWhereClause= CONCAT(pWhereClause,' and (salesOrderNumber  =''',psearchposotext,''' OR poNumber  =''',psearchposotext,''')');  \n" +
                "			END IF;  \n" +
                "		END IF;  \n" +
                "		IF(psearchextPricetype IS NOT NULL AND psearchextPricetext IS NOT NULL)THEN  \n" +
                "			IF(psearchextPricetype='C')THEN  \n" +
                "				SET pWhereClause = CONCAT(pWhereClause, ' AND (soTotalPrice  like ''%',psearchextPricetext,'%'')');  \n" +
                "			ELSE  \n" +
                "				SET pWhereClause= CONCAT(pWhereClause,' and (soTotalPrice  =''',psearchextPricetext,''')');  \n" +
                "			END IF;  \n" +
                "		END IF;  \n" +
                "		IF(pfromDate IS NOT NULL AND ptoDate IS NOT NULL)THEN  \n" +
                "			SET pWhereClause=CONCAT(pWhereClause, ' and (soDate>=''',pfromDate,''' and soDate<=''',ptoDate,''')');  \n" +
                "		ELSEIF(pfromDate IS NOT NULL)THEN  \n" +
                "			SET pWhereClause=CONCAT(pWhereClause, ' and (soDate>=''',pfromDate,''')');  \n" +
                "		ELSEIF(ptoDate IS NOT NULL)THEN  \n" +
                "			SET pWhereClause=CONCAT(pWhereClause, ' and (soDate<=''',ptoDate,''')');  \n" +
                "		END IF;  \n" +
                "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "			SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "		ELSE  \n" +
                "			SET rowNumWhere = '';  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		/* to get total count of rows */  \n" +
                "			SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@tempquery,\" ) c where 1=1 and \", pWhereClause);  \n" +
                "  \n" +
                "			PREPARE query2 FROM @SQLStatement2;  \n" +
                "  \n" +
                "			 EXECUTE query2;  \n" +
                "			 DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "			SET @SQLStatement1 = CONCAT(\"select * from ( \", @tempquery,\" ) c  \n" +
                "				where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "  \n" +
                "			PREPARE query1 FROM @SQLStatement1;  \n" +
                "  \n" +
                "			 EXECUTE query1;  \n" +
                "		       DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version ->  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1243,'1.00','V1',' Alter procedure Sproc_GetSalesOrderSummaryList - CC '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1243:
            allDbChangesArray.push(
                /* **************************** New Script -> 16-12-2021  *********************************** */
                "update entity set displayName=\"Supplier Packing Slip\" , jsonObjOfEnterprise = \"{\\\"EntityName\\\": \\\"Supplier Packing Slips\\\",\\\"FunctionName\\\": \\\"managePackingSlipInElastic\\\",\\\"Type\\\": \\\"Supplier Packing Slip\\\", \\\"TypeID\\\":\\\"0bfeb850-f0cf-11e9-850e-97d2e8b0d19b\\\",\\\"Title\\\":\\\"Supplier Packing Slip\\\",\\\"Parameter\\\": { \\\"receiptType\\\": \\\"P\\\" },\\\"EntityPrefix\\\":\\\"PackingSlip_\\\"}\" where displayName = \"Packing Slips\";  \n" +
                /* **************************** Add Script Version -> 16-12-2021  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1244,'1.00','V1',' Update Packaging Slip Entity Json Data - SHUBHAM '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1244:
            allDbChangesArray.push(
                /* **************************** New Script -> 16-12-2021  *********************************** */
                "DROP TRIGGER /*!50032 IF EXISTS */ `Trg_AU_customer_packingslip_det` ;  \n" +
                "CREATE TRIGGER `Trg_AU_customer_packingslip_det` AFTER UPDATE ON `customer_packingslip_det`  \n" +
                "    FOR EACH ROW BEGIN  \n" +
                "  \n" +
                "	DECLARE v_trasType VARCHAR(5);  \n" +
                "  DECLARE vNewQuoteFrom VARCHAR(30);  \n" +
                "    DECLARE vOldQuoteFrom VARCHAR(30);  \n" +
                "  DECLARE vBPOQty INT;  \n" +
                "	DECLARE vBPOTotalQty INT;  \n" +
                "  \n" +
                "	SELECT transType INTO v_trasType  \n" +
                "	FROM customer_packingslip  \n" +
                "	WHERE isDeleted = 0 AND id = NEW.refCustPackingSlipID ;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.custPOLineID,0) != IFNULL(NEW.custPOLineID,0) THEN  \n" +
                "       INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "       VALUES(\"CUSTOMER_PACKINGSLIP_DET\",CAST(new.id AS CHAR),'Cust PO Line#',CAST(OLD.custPOLineID AS CHAR),  \n" +
                "       CAST(new.custPOLineID AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.poQty,0) != IFNULL(NEW.poQty,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "       VALUES(\"CUSTOMER_PACKINGSLIP_DET\",CAST(new.id AS CHAR),'Original PO Line Order Qty',CAST(OLD.poQty AS CHAR),  \n" +
                "       CAST(new.poQty AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "        IF IFNULL(OLD.shipQty,0) != IFNULL(NEW.shipQty,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES(\"CUSTOMER_PACKINGSLIP_DET\",CAST(new.id AS CHAR),  \n" +
                "		(CASE WHEN v_trasType='P' THEN 'Shipment Qty' ELSE 'Qty' END),	CAST(OLD.shipQty AS CHAR),  \n" +
                "		CAST(new.shipQty AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "  \n" +
                "  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.remainingQty,0) != IFNULL(NEW.remainingQty,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "       VALUES(\"CUSTOMER_PACKINGSLIP_DET\",CAST(new.id AS CHAR),'Remaining Qty',CAST(OLD.remainingQty AS CHAR),  \n" +
                "       CAST(new.remainingQty AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.shippedQty,0) != IFNULL(NEW.shippedQty,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "       VALUES(\"CUSTOMER_PACKINGSLIP_DET\",CAST(new.id AS CHAR),'Shipped To Date',CAST(OLD.shippedQty AS CHAR),  \n" +
                "       CAST(new.shippedQty AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "     IF IFNULL(OLD.shippingNotes,0) != IFNULL(NEW.shippingNotes,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "       VALUES(\"CUSTOMER_PACKINGSLIP_DET\",CAST(new.id AS CHAR),'Line Shipping Comments',CAST(OLD.shippingNotes AS CHAR),  \n" +
                "       CAST(new.shippingNotes AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.internalComment,0) != IFNULL(NEW.internalComment,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "       VALUES(\"CUSTOMER_PACKINGSLIP_DET\",CAST(new.id AS CHAR),'Line Internal Notes',CAST(OLD.internalComment AS CHAR),  \n" +
                "       CAST(new.internalComment AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.standrads,0) != IFNULL(NEW.standrads,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "       VALUES(\"CUSTOMER_PACKINGSLIP_DET\",CAST(new.id AS CHAR),'Applicable Standards',CAST(OLD.standrads AS CHAR),  \n" +
                "       CAST(new.standrads AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "     IF IFNULL(OLD.refChargesTypeID,0) != IFNULL(NEW.refChargesTypeID,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "       VALUES(\"CUSTOMER_PACKINGSLIP_DET\",CAST(new.id AS CHAR),'Other Charges Type',fun_getGenericCategoryNameByID(OLD.refChargesTypeID),  \n" +
                "       fun_getGenericCategoryNameByID(NEW.refChargesTypeID),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.unitPrice,0) != IFNULL(NEW.unitPrice,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "       VALUES(\"CUSTOMER_PACKINGSLIP_DET\",CAST(new.id AS CHAR),'Unit Price ($)', CAST(OLD.unitPrice AS CHAR), CAST(NEW.unitPrice AS CHAR),  \n" +
                "       fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "      IF IFNULL(OLD.assyDescription,0) != IFNULL(NEW.assyDescription,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "       VALUES(\"CUSTOMER_PACKINGSLIP_DET\",CAST(new.id AS CHAR),'Assy/PID Description',CAST(OLD.assyDescription AS CHAR),  \n" +
                "       CAST(NEW.assyDescription AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	 IF IFNULL(OLD.extendedPrice,0) != IFNULL(NEW.extendedPrice,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "       VALUES(\"CUSTOMER_PACKINGSLIP_DET\",CAST(new.id AS CHAR),'Ext. Price ($)',  \n" +
                "		CASE WHEN v_trasType='C' THEN CONCAT('(',CAST(FORMAT(REPLACE(OLD.extendedPrice,'-',''),2) AS CHAR),')') ELSE CAST(FORMAT(OLD.extendedPrice,2) AS CHAR) END,  \n" +
                "		CASE WHEN v_trasType='C' THEN CONCAT('(',CAST(FORMAT(REPLACE(NEW.extendedPrice,'-',''),2) AS CHAR),')') ELSE CAST(FORMAT(NEW.extendedPrice,2) AS CHAR) END,  \n" +
                "		fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	IF IFNULL(OLD.otherCharges,0) != IFNULL(NEW.otherCharges,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "       VALUES(\"CUSTOMER_PACKINGSLIP_DET\",CAST(new.id AS CHAR),'Total Other Charges Price ($)',CAST(FORMAT(OLD.otherCharges,2) AS CHAR),  \n" +
                "       CAST(FORMAT(new.otherCharges,2) AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	 IF IFNULL(OLD.reflineID,0) != IFNULL(NEW.reflineID,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "       VALUES(\"CUSTOMER_PACKINGSLIP_DET\",CAST(new.id AS CHAR),'SO Line#',CAST(OLD.reflineID AS CHAR),  \n" +
                "       CAST(NEW.reflineID AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  IF(new.refsalesorderdetid IS NOT NULL)THEN  \n" +
                "	SELECT  SUM(cpd.shipQty) INTO @shipQty   FROM customer_packingslip_det cpd JOIN customer_packingslip cp ON cp.id=cpd.refCustPackingSlipID  \n" +
                "		WHERE cpd.isdeleted=0 AND cpd.refsalesorderdetid=new.refsalesorderdetid AND cp.transType='P';  \n" +
                "  \n" +
                "	SELECT SUM(ss.qty),refBlanketPOID INTO @qty,@bpoID FROM salesorderdet ss WHERE ss.id=new.refsalesorderdetid AND ss.isdeleted=0 GROUP BY refBlanketPOID;  \n" +
                "  \n" +
                "		IF(IFNULL(@shipQty,0)>=IFNULL(@qty,0)) THEN  \n" +
                "			UPDATE SalesOrderDet SET salesOrderDetStatus=2,completeStatusReason='AUTO' WHERE id=New.refsalesorderdetid;  \n" +
                "  \n" +
                "		ELSE  \n" +
                "			UPDATE SalesOrderDet SET salesOrderDetStatus=1,completeStatusReason=NULL WHERE id=New.refsalesorderdetid;  \n" +
                "		END IF;  \n" +
                "		SELECT  qty INTO vBPOQty FROM  salesorderdet WHERE id=@bpoID;  \n" +
                "	        SELECT  SUM(qty) INTO vBPOTotalQty FROM  salesorderdet WHERE refBlanketPOID=@bpoID AND isdeleted=0;  \n" +
                "		IF((SELECT COUNT(1) FROM SalesOrderDet WHERE  refBlanketPOID=@bpoID AND isdeleted=0 AND salesOrderDetStatus=1 AND isCancle=0)=0 AND IFNULL(vBPOQty,0)<=IFNULL(vBPOTotalQty,0))THEN  \n" +
                "		        UPDATE SalesOrderDet SET salesOrderDetStatus=2,completeStatusReason='AUTO' WHERE (id=@bpoID OR refSODetID=@bpoID);  \n" +
                "		ELSE  \n" +
                "		      UPDATE SalesOrderDet SET salesOrderDetStatus=1,completeStatusReason=NULL WHERE (id=@bpoID OR refSODetID=@bpoID);  \n" +
                "		END IF;  \n" +
                "  END IF;  \n" +
                "  IF IFNULL(OLD.quoteNumber,0) != IFNULL(NEW.quoteNumber,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "	   VALUES(\"CUSTOMER_PACKINGSLIP_DET\",CAST(new.id AS CHAR),'Quote#',CAST(OLD.quoteNumber AS CHAR),  \n" +
                "	   CAST(NEW.quoteNumber AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "   IF IFNULL(OLD.quoteFrom,0) != IFNULL(NEW.quoteFrom,0) THEN  \n" +
                "		SELECT (CASE WHEN OLD.quoteFrom = 1 THEN 'From RFQ' WHEN OLD.quoteFrom = 2 THEN 'From Part Master' WHEN OLD.quoteFrom = 3 THEN 'N/A' END ) INTO vOldQuoteFrom ;  \n" +
                "        SELECT (CASE WHEN NEW.quoteFrom = 1 THEN 'From RFQ' WHEN NEW.quoteFrom = 2 THEN 'From Part Master' WHEN NEW.quoteFrom = 3 THEN 'N/A' END ) INTO vNewQuoteFrom ;  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "	   VALUES(\"CUSTOMER_PACKINGSLIP_DET\",CAST(new.id AS CHAR),'Quote From',vOldQuoteFrom,  \n" +
                "	   vNewQuoteFrom,fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "     IF IFNULL(OLD.refRFQGroupID,0) != IFNULL(NEW.refRFQGroupID,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "	   VALUES(\"CUSTOMER_PACKINGSLIP_DET\",CAST(new.id AS CHAR),'Quote Group',CAST(OLD.refRFQGroupID AS CHAR),  \n" +
                "	   CAST(NEW.refRFQGroupID AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "     IF IFNULL(OLD.refAssyQtyTurnTimeID,0) != IFNULL(NEW.refAssyQtyTurnTimeID,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "	   VALUES(\"CUSTOMER_PACKINGSLIP_DET\",CAST(new.id AS CHAR),'Quote Group',OLD.assyQtyTurnTimeText,  \n" +
                "	   NEW.assyQtyTurnTimeText,fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "       IF IFNULL(OLD.refRFQQtyTurnTimeID,0) != IFNULL(NEW.refRFQQtyTurnTimeID,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "	   VALUES(\"CUSTOMER_PACKINGSLIP_DET\",CAST(new.id AS CHAR),'Quote Group',OLD.assyQtyTurnTimeText,  \n" +
                "	   NEW.assyQtyTurnTimeText,fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "     IF IFNULL(OLD.isZeroValue,0) != IFNULL(NEW.isZeroValue,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "	   VALUES(\"CUSTOMER_PACKINGSLIP_DET\",CAST(new.id AS CHAR),'Confirming Zero Value Line',(CASE WHEN OLD.isZeroValue =0 THEN 'False' ELSE 'True' END),  \n" +
                "	   (CASE WHEN NEW.isZeroValue =0 THEN 'False' ELSE 'True' END),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "   END;  \n" +
                /* **************************** Add Script Version -> 16-12-2021  *********************************** */
                "DROP TRIGGER /*!50032 IF EXISTS */ `Trg_AI_customer_packingslip_det` ;  \n" +
                "CREATE TRIGGER `Trg_AI_customer_packingslip_det` AFTER INSERT ON `customer_packingslip_det`  \n" +
                "    FOR EACH ROW BEGIN  \n" +
                "	DECLARE vTransType VARCHAR(5);  \n" +
                "	DECLARE vBPOQty INT;  \n" +
                "	DECLARE vBPOTotalQty INT;  \n" +
                "	SELECT transType INTO vTransType  \n" +
                "	FROM customer_packingslip  \n" +
                "	WHERE isDeleted = 0 AND id = NEW.refCustPackingSlipID;  \n" +
                "  \n" +
                "  IF(new.refsalesorderdetid IS NOT NULL AND vTransType='P')THEN  \n" +
                "	SELECT  SUM(cpd.shipQty) INTO @shipQty   FROM customer_packingslip_det cpd JOIN customer_packingslip cp ON cp.id=cpd.refCustPackingSlipID  \n" +
                "		WHERE cpd.isdeleted=0 AND cpd.refsalesorderdetid=new.refsalesorderdetid AND cp.transType='P';  \n" +
                "  \n" +
                "	SELECT SUM(ss.qty),ss.refBlanketPOID INTO @qty,@bpoID FROM salesorderdet ss WHERE ss.id=new.refsalesorderdetid GROUP BY ss.refBlanketPOID;  \n" +
                "	SELECT  qty INTO vBPOQty FROM  salesorderdet WHERE id=@bpoID;  \n" +
                "	SELECT  SUM(qty) INTO vBPOTotalQty FROM  salesorderdet WHERE refBlanketPOID=@bpoID AND isdeleted=0;  \n" +
                "  \n" +
                "		IF(IFNULL(@shipQty,0)>=IFNULL(@qty,0)) THEN  \n" +
                "			UPDATE SalesOrderDet SET salesOrderDetStatus=2,completeStatusReason='AUTO' WHERE id=New.refsalesorderdetid;  \n" +
                "		END IF;  \n" +
                "		IF((SELECT COUNT(1) FROM SalesOrderDet WHERE  refBlanketPOID=@bpoID AND isdeleted=0 AND salesOrderDetStatus=1 AND isCancle=0)=0 AND IFNULL(vBPOQty,0)<=IFNULL(vBPOTotalQty,0))THEN  \n" +
                "		        UPDATE SalesOrderDet SET salesOrderDetStatus=2,completeStatusReason='AUTO' WHERE (id=@bpoID OR refSODetID=@bpoID);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "  END IF;  \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 16-12-2021  *********************************** */
                "DROP TRIGGER /*!50032 IF EXISTS */ `Trg_AU_salesshippingmst` ;  \n" +
                "CREATE TRIGGER `Trg_AU_salesshippingmst` AFTER UPDATE ON `salesshippingmst`  \n" +
                "    FOR EACH ROW BEGIN  \n" +
                "   DECLARE vBPOQty INT;  \n" +
                "	DECLARE vBPOTotalQty INT;  \n" +
                "	SELECT  SUM(cpd.shipQty) INTO @shipQty   FROM customer_packingslip_det cpd JOIN customer_packingslip cp ON cp.id=cpd.refCustPackingSlipID  \n" +
                "		WHERE cpd.isdeleted=0 AND cpd.refsalesorderdetid=new.sDetID AND cp.transType='P';  \n" +
                "  \n" +
                "	SELECT SUM(ss.qty) INTO @qty FROM salesshippingmst ss WHERE ss.sDetID=new.sDetID AND ss.isdeleted=0;  \n" +
                "	SELECT refBlanketPOID INTO @bpoID FROM salesorderdet  WHERE id=new.sDetID AND isdeleted=0;  \n" +
                "	SELECT  qty INTO vBPOQty FROM  salesorderdet WHERE id=@bpoID;  \n" +
                "	SELECT  SUM(qty) INTO vBPOTotalQty FROM  salesorderdet WHERE refBlanketPOID=@bpoID AND isdeleted=0;  \n" +
                "  \n" +
                "		IF(IFNULL(@shipQty,0)>=IFNULL(@qty,1)) THEN  \n" +
                "			UPDATE SalesOrderDet SET salesOrderDetStatus=2,completeStatusReason='AUTO' WHERE id=New.sDetID;  \n" +
                "		ELSE  \n" +
                "			UPDATE SalesOrderDet SET salesOrderDetStatus=1,completeStatusReason=NULL WHERE id=New.sDetID;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF((SELECT COUNT(1) FROM SalesOrderDet WHERE  refBlanketPOID=@bpoID AND isdeleted=0 AND salesOrderDetStatus=1 AND isCancle=0)=0 AND IFNULL(vBPOQty,0)<=IFNULL(vBPOTotalQty,0))THEN  \n" +
                "		        UPDATE SalesOrderDet SET salesOrderDetStatus=2,completeStatusReason='AUTO' WHERE (id=@bpoID OR  refSODetID=@bpoID);  \n" +
                "		ELSE  \n" +
                "		          UPDATE SalesOrderDet SET salesOrderDetStatus=1,completeStatusReason=NULL WHERE (id=@bpoID OR  refSODetID=@bpoID);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "          SELECT COUNT(1) INTO @shippingQty FROM    salesshippingmst WHERE sDetID=new.sDetID AND isdeleted=0;  \n" +
                "  \n" +
                "          UPDATE SalesOrderDet SET shippingQty=@shippingQty  WHERE id=new.sDetID;  \n" +
                "  \n" +
                "          SELECT COUNT(1) INTO @shippingQty FROM    salesshippingmst WHERE sDetID=@bpoID AND isdeleted=0;  \n" +
                "  \n" +
                "          UPDATE SalesOrderDet SET shippingQty=@shippingQty  WHERE id=@bpoID;  \n" +
                "  \n" +
                "          IF IFNULL(OLD.qty,0) != IFNULL(NEW.qty,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "		VALUES(\"SALESSHIPINGMST\",CAST(new.shippingID AS CHAR),'RELEASEQTY',CAST(OLD.qty AS CHAR),  \n" +
                "		CAST(new.qty AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	  END IF;  \n" +
                "	  IF IFNULL(OLD.shippingDate,0) != IFNULL(NEW.shippingDate,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "		VALUES(\"SALESSHIPINGMST\",CAST(new.shippingID AS CHAR),'REQUESTEDSHIPDATE',CAST(DATE_FORMAT(OLD.shippingDate, \"%m/%d/%y\") AS CHAR),  \n" +
                "		CAST(DATE_FORMAT(NEW.shippingDate, \"%m/%d/%y\") AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	  END IF;  \n" +
                "	  IF IFNULL(OLD.promisedShipDate,0) != IFNULL(NEW.promisedShipDate,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "		VALUES(\"SALESSHIPINGMST\",CAST(new.shippingID AS CHAR),'PROMISEDSHIPDATE',CAST(DATE_FORMAT(OLD.promisedShipDate, \"%m/%d/%y\") AS CHAR),  \n" +
                "		CAST(DATE_FORMAT(NEW.promisedShipDate, \"%m/%d/%y\") AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	  END IF;  \n" +
                "	  IF IFNULL(OLD.requestedDockDate,0) != IFNULL(NEW.requestedDockDate,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "		VALUES(\"SALESSHIPINGMST\",CAST(new.shippingID AS CHAR),'REQUESTEDDOCKDATE',CAST(DATE_FORMAT(OLD.requestedDockDate, \"%m/%d/%y\") AS CHAR),  \n" +
                "		CAST(DATE_FORMAT(NEW.requestedDockDate, \"%m/%d/%y\") AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	  END IF;  \n" +
                "  \n" +
                "	  IF IFNULL(OLD.isAgreeToShip,0) != IFNULL(NEW.isAgreeToShip,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "		VALUES(\"SALESSHIPINGMST\",CAST(new.shippingID AS CHAR),'AGREETOSHIP',CAST(CASE WHEN OLD.isAgreeToShip=1 THEN 'YES' ELSE 'NO' END AS CHAR),  \n" +
                "		CAST(CASE WHEN NEW.isAgreeToShip=1 THEN 'YES' ELSE 'NO' END AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	  END IF;  \n" +
                "  \n" +
                "	  IF IFNULL(OLD.revisedRequestedDockDate,0) != IFNULL(NEW.revisedRequestedDockDate,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "		VALUES(\"SALESSHIPINGMST\",CAST(new.shippingID AS CHAR),'REQUESTEDREVISEDDOCKDATE',CAST(DATE_FORMAT(OLD.revisedRequestedDockDate, \"%m/%d/%y\") AS CHAR),  \n" +
                "		CAST(DATE_FORMAT(NEW.revisedRequestedDockDate, \"%m/%d/%y\") AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	  END IF;  \n" +
                "	  IF IFNULL(OLD.revisedRequestedShipDate,0) != IFNULL(NEW.revisedRequestedShipDate,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "		VALUES(\"SALESSHIPINGMST\",CAST(new.shippingID AS CHAR),'REQUESTEDREVISEDSHIPDATE',CAST(DATE_FORMAT(OLD.revisedRequestedShipDate, \"%m/%d/%y\") AS CHAR),  \n" +
                "		CAST(DATE_FORMAT(NEW.revisedRequestedShipDate, \"%m/%d/%y\") AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	  END IF;  \n" +
                "	  IF IFNULL(OLD.revisedRequestedPromisedDate,0) != IFNULL(NEW.revisedRequestedPromisedDate,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "		VALUES(\"SALESSHIPINGMST\",CAST(new.shippingID AS CHAR),'REVISEDPROMISEDDATE',CAST(DATE_FORMAT(OLD.revisedRequestedPromisedDate, \"%m/%d/%y\") AS CHAR),  \n" +
                "		CAST(DATE_FORMAT(NEW.revisedRequestedPromisedDate, \"%m/%d/%y\") AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	  END IF;  \n" +
                "	  IF IFNULL(OLD.shippingMethodID,0) != IFNULL(NEW.shippingMethodID,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "		VALUES(\"SALESSHIPINGMST\",CAST(new.shippingID AS CHAR),'SHIPPINGMETHODID',CAST( fun_getGenericCategoryNameByID(OLD.shippingMethodID) AS CHAR),  \n" +
                "		CAST(fun_getGenericCategoryNameByID(NEW.shippingMethodID) AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	  END IF;  \n" +
                "	  IF IFNULL(OLD.carrierID,0) != IFNULL(NEW.carrierID,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "		VALUES(\"SALESSHIPINGMST\",CAST(new.shippingID AS CHAR),'CARRIERID',CAST( fun_getGenericCategoryNameByID(OLD.carrierID) AS CHAR),  \n" +
                "		CAST(fun_getGenericCategoryNameByID(NEW.carrierID) AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	  END IF;  \n" +
                "	  IF IFNULL(OLD.carrierAccountNumber,0) != IFNULL(NEW.carrierAccountNumber,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "		VALUES(\"SALESSHIPINGMST\",CAST(new.shippingID AS CHAR),'CARRIERACCOUNTNUMBER',CAST( OLD.carrierAccountNumber AS CHAR),  \n" +
                "		CAST(NEW.carrierAccountNumber AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	  END IF;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 16-12-2021  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1245,'1.00','V1',' Alter Trigger Trg_AU_customer_packingslip_det-CC '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1245:
            allDbChangesArray.push(
                /* **************************** New Script -> 09-09-2021  *********************************** */
                "update feature_mst set featureName = 'Allow to Add Packaging Alias Part' where featureName = 'Allow to Add Alias Part';  \n" +

                "DROP procedure IF EXISTS `Sproc_CheckPackagingAlias_Validation`;  \n" +
                "CREATE PROCEDURE `Sproc_CheckPackagingAlias_Validation`(  \n" +
                "	IN pToPartID   INT,  \n" +
                "	IN pFromPartID INT,  \n" +
                "    IN pTypeID INT,  \n" +
                "    INOUT pMissMatchField  longtext)  \n" +
                "BEGIN  \n" +
                "	DECLARE v_FunctionalCategoryID int;  \n" +
                "    DECLARE v_ValidationCount int;  \n" +
                "    DECLARE v_CountryValidationCount int;  \n" +
                "    DECLARE v_fieldNameToValidate  varchar(100);  \n" +
                "	DECLARE v_fieldDataType  varchar(100);  \n" +
                "	DECLARE v_matchCriteria  varchar(10);  \n" +
                "	DECLARE v_fieldTitle  varchar(100);  \n" +
                "    DECLARE v_IndexNo INT DEFAULT 0;  \n" +
                "  \n" +
                "    INSERT INTO  tempFromComponentDetail  \n" +
                "    select * from component where id = pFromPartID;  \n" +
                "  \n" +
                "	INSERT INTO  tempToComponentDetail  \n" +
                "    select * from component where id = pToPartID;  \n" +
                "    set v_FunctionalCategoryID = (select functionalCategoryID from tempFromComponentDetail limit 1);  \n" +
                "  \n" +
                "    SELECT functionalCategoryID INTO v_FunctionalCategoryID FROM tempFromComponentDetail  limit 1;  \n" +
                "  \n" +
                "	INSERT INTO tempComponentAlternateValidationDetail  \n" +
                "    select * from component_alternatepn_validations where type = pTypeID and refRfqPartTypeId =v_FunctionalCategoryID and isDeleted = 0;  \n" +
                "  \n" +
                "    SELECT count(1) INTO v_ValidationCount FROM tempComponentAlternateValidationDetail;  \n" +
                "	SET v_IndexNo = 0;  \n" +
                "    SET pMissMatchField = (SELECT (CASE WHEN pMissMatchField is null THEN '' ELSE pMissMatchField END));  \n" +
                "  \n" +
                "	IF(pTypeID = 2)		-- Apply 'Acceptable Shipping Countries' Validation for (Type = 2) Packaging Alias Part  (TFS - 31463)  \n" +
                "    THEN  \n" +
                "		select sum(a.countryCount) into v_CountryValidationCount from (  \n" +
                "		select count(1) as countryCount from component_acceptable_shipping_countries a where  refComponentID = pToPartID and isDeleted = 0 and  not exists  \n" +
                "			(select * from component_acceptable_shipping_countries where refComponentID = pFromPartID  and countryID = a.countryID and isDeleted = 0)  \n" +
                "		union all  \n" +
                "		select count(1) as countryCount from component_acceptable_shipping_countries a where  refComponentID = pFromPartID and isDeleted = 0 and  not exists  \n" +
                "			(select * from component_acceptable_shipping_countries where refComponentID = pToPartID and countryID = a.countryID and isDeleted = 0)) as a;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF(v_CountryValidationCount  > 0)  \n" +
                "    THEN  \n" +
                "		set pMissMatchField = 'Acceptable Shipping Countries';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  	IF(v_ValidationCount > 0)  \n" +
                "    THEN  \n" +
                "        WHILE v_IndexNo < v_ValidationCount DO  \n" +
                "			set v_fieldNameToValidate = null;  \n" +
                "			set v_fieldDataType = null;  \n" +
                "			set v_matchCriteria = null;  \n" +
                "			set v_fieldTitle = null;  \n" +
                "            set @FromPartValue = null;  \n" +
                "            set @ToPartValue = null;  \n" +
                "            set @IsMatchCriteria = false;  \n" +
                "  \n" +
                "			SELECT fieldNameToValidate,fieldDataType,matchCriteria,fieldTitle  \n" +
                "				INTO v_fieldNameToValidate,v_fieldDataType,v_matchCriteria,v_fieldTitle  \n" +
                "			FROM tempComponentAlternateValidationDetail LIMIT v_IndexNo,1;  \n" +
                "            set @SQLAssignValueStatement1 = CONCAT('SELECT a.', v_fieldNameToValidate, ' INTO @FromPartValue from tempFromComponentDetail a;');  \n" +
                "  \n" +
                "            set @SQLAssignValueStatement2 = CONCAT('SELECT a.', v_fieldNameToValidate, ' INTO @ToPartValue from tempToComponentDetail a;');  \n" +
                "  \n" +
                "			PREPARE query1 FROM @SQLAssignValueStatement1;  \n" +
                "			EXECUTE query1;  \n" +
                "			DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "            PREPARE query2 FROM @SQLAssignValueStatement2;  \n" +
                "			EXECUTE query2;  \n" +
                "			DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "			iF(v_fieldDataType = 'string')  \n" +
                "			THEN  \n" +
                "				set v_matchCriteria = (select CASE WHEN (v_matchCriteria = '==') THEN ' = ' ELSE  \n" +
                "										(CASE WHEN (v_matchCriteria = '!==') THEN ' != ' ELSE v_matchCriteria END) END);  \n" +
                "				set @FromPartValue = (select CASE WHEN (@FromPartValue is null or @FromPartValue = '' )THEN \"''\" ELSE concat(\"'\", CAST(@FromPartValue as CHAR), \"'\") END);  \n" +
                "				set @ToPartValue = (select CASE WHEN (@ToPartValue  is null or @ToPartValue  = '' ) THEN \"''\" ELSE concat(\"'\", CAST(@ToPartValue  as CHAR), \"'\") END);  \n" +
                "				set @SQLValidateStatement1 = CONCAT('select (CASE WHEN(',@FromPartValue ,' ', v_matchCriteria , ' ' ,@ToPartValue,') THEN 1 ELSE 0 END) INTO @IsMatchCriteria;');  \n" +
                "				PREPARE query1 FROM @SQLValidateStatement1;  \n" +
                "				EXECUTE query1;  \n" +
                "				DEALLOCATE PREPARE query1;  \n" +
                "				IF(@IsMatchCriteria = 0)  \n" +
                "				THEN  \n" +
                "					set pMissMatchField = (select (CASE WHEN (pMissMatchField = '') THEN v_fieldTitle ELSE CONCAT(pMissMatchField, \", \", v_fieldTitle) END));  \n" +
                "				END IF;  \n" +
                "			ELSEIF(v_fieldDataType = 'number')  \n" +
                "			THEN  \n" +
                "				set v_matchCriteria = (select CASE WHEN (v_matchCriteria = '==') THEN ' = ' ELSE  \n" +
                "										(CASE WHEN (v_matchCriteria = '!==') THEN ' != ' ELSE v_matchCriteria END) END);  \n" +
                "				set @FromPartValue = (select CASE WHEN (@FromPartValue is null or @FromPartValue = '' ) THEN CAST(0 as DECIMAl(18,8)) ELSE CAST(@FromPartValue as DECIMAl(18,8)) END);  \n" +
                "				set @ToPartValue = (select CASE WHEN (@ToPartValue  is null or @ToPartValue  = '' ) THEN CAST(0 as DECIMAl(18,8)) ELSE CAST(@ToPartValue as DECIMAl(18,8)) END);  \n" +
                "				set @SQLValidateStatement1 = CONCAT('select (CASE WHEN(',@FromPartValue ,' ', v_matchCriteria , ' ' ,@ToPartValue,') THEN 1 ELSE 0 END) INTO @IsMatchCriteria;');  \n" +
                "				PREPARE query1 FROM @SQLValidateStatement1;  \n" +
                "				EXECUTE query1;  \n" +
                "				DEALLOCATE PREPARE query1;  \n" +
                "				IF(@IsMatchCriteria = 0)  \n" +
                "				THEN  \n" +
                "					set pMissMatchField = (select (CASE WHEN (pMissMatchField = '') THEN v_fieldTitle ELSE CONCAT(pMissMatchField, \", \", v_fieldTitle) END));  \n" +
                "				END IF;  \n" +
                "			END IF;  \n" +
                "			SET v_IndexNo = v_IndexNo + 1;  \n" +
                "		END WHILE;  \n" +
                "        set pMissMatchField = (select (CASE WHEN pMissMatchField is null THEN '' ELSE pMissMatchField END));  \n" +
                "    END IF;  \n" +
                "END;  \n" +

                "DROP procedure IF EXISTS `Sproc_CopyAliasPartValidations`;  \n" +
                "CREATE PROCEDURE `Sproc_CopyAliasPartValidations`(  \n" +
                "	IN pFromFunctionalTypeId INT(11),  \n" +
                "    IN pFromPartGroupId INT(11),  \n" +
                "    IN pFromValidationsDetailsId Int(11),  \n" +
                "    IN pToFunctionalTypeIds LONGTEXT,  \n" +
                "    IN pUserRoleId INT(11),  \n" +
                "    IN pUserid INT(11),  \n" +
                "    IN pIsOverride TINYINT(1)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "DECLARE EXIT HANDLER FOR SQLEXCEPTION  \n" +
                "BEGIN  \n" +
                "	ROLLBACK;  \n" +
                "	RESIGNAL;  \n" +
                "END;  \n" +
                "DECLARE EXIT HANDLER FOR SQLWARNING  \n" +
                "  BEGIN  \n" +
                "	ROLLBACK;  \n" +
                "	RESIGNAL;  \n" +
                "END;  \n" +
                "	if pIsOverride = true then  \n" +
                "		SET @DeleteSQLStatement = concat(\"delete  \n" +
                "							  from component_alternatepn_validations  \n" +
                "							 where refRfqPartTypeId  in (\",pToFunctionalTypeIds,\")  \n" +
                "							   and type = \",pFromPartGroupId,\"  \n" +
                "							   and isDeleted = false  \n" +
                "							   and deletedAt is null\");  \n" +
                "  \n" +
                "		 PREPARE strDeleteQuery FROM @DeleteSQLStatement;  \n" +
                "		 EXECUTE strDeleteQuery;  \n" +
                "		 DEALLOCATE PREPARE strDeleteQuery;  \n" +
                "    end if;  \n" +
                "	SET @SQLStatement=concat(\"insert into component_alternatepn_validations(  \n" +
                "									refRfqPartTypeId, fieldNameToValidate, fieldDataType, matchCriteria,  \n" +
                "									isDeleted, createdBy, fieldTitle, type, createByRoleId)  \n" +
                "							select * from  \n" +
                "                            (select  fnt.id refRfqPartTypeId, cav.fieldNameToValidate, cav.fieldDataType,  \n" +
                "									cav.matchCriteria, 0 isDeleted, \",pUserid,\" createdBy,  \n" +
                "									cav.fieldTitle, cav.type, \",pUserRoleId,\" createByRoleId  \n" +
                "							  from component_alternatepn_validations cav  \n" +
                "							  join (select * from rfq_parttypemst rp where rp.id in (\",pToFunctionalTypeIds,\")) fnt  \n" +
                "							 where cav.refRfqPartTypeId = \",pFromFunctionalTypeId,\"  \n" +
                "							   and cav.type = \",pFromPartGroupId,\"  \n" +
                "							   and cav.isDeleted = false  \n" +
                "							   and cav.deletedAt is null) a  \n" +
                "                                where not exists (select 1  \n" +
                "													from component_alternatepn_validations b  \n" +
                "													where b.refRfqPartTypeId = a.refRfqPartTypeId  \n" +
                "													and b.fieldNameToValidate = a.fieldNameToValidate  \n" +
                "													and b.type = a.type  \n" +
                "													and b.isDeleted = false  \n" +
                "													and b.deletedAt is null)\");  \n" +
                "    PREPARE insertQuery FROM @SQLStatement;  \n" +
                "	EXECUTE insertQuery;  \n" +
                "	DEALLOCATE PREPARE insertQuery;  \n" +
                "  \n" +
                "    commit;  \n" +
                "	select 1;  \n" +
                "END;  \n" +

                "DROP procedure IF EXISTS `Sproc_CreateDefaultAliasPartValidationsForFunctionalType`;  \n" +
                "CREATE PROCEDURE `Sproc_CreateDefaultAliasPartValidationsForFunctionalType`(  \n" +
                "IN pFunctionalTypeID int(11),  \n" +
                "IN pUserID int(11)  \n" +
                ")  \n" +
                "begin  \n" +
                "	/*creating defult entry for \"2-Packaging Alias\"*/  \n" +
                "	insert into component_alternatepn_validations  \n" +
                "	(refRfqPartTypeId, fieldNameToValidate, fieldDataType, matchCriteria, fieldTitle, isDeleted, createdBy, createdAt, updatedAt, type)  \n" +
                "	select a.id refRfqPartTypeId, b.fieldNameToValidate, b.fieldDataType, b.matchCriteria, b.fieldTitle, b.isDeleted, pUserID createdBy, current_timestamp() createdAt, current_timestamp() updatedAt, 2 type  \n" +
                "	from rfq_parttypemst a join  \n" +
                "		(select 'functionalCategoryID' fieldNameToValidate, 'number' fieldDataType, '==' matchCriteria, 'Functional Type' fieldTitle, '0' isDeleted, '1' createdBy Union all  \n" +
                "		select 'mountingTypeID' fieldNameToValidate, 'number' fieldDataType, '==' matchCriteria,  'Mounting Type' fieldTitle, '0' isDeleted, '1' createdBy Union all  \n" +
                "		select 'mfgcodeID' fieldNameToValidate, 'number' fieldDataType, '==' matchCriteria,  'MFR Code' fieldTitle, '0' isDeleted, '1' createdBy Union all  \n" +
                "		select 'partType' fieldNameToValidate, 'number' fieldDataType, '==' matchCriteria,  'Part Type' fieldTitle, '0' isDeleted, '1' createdBy Union all  \n" +
                "		select 'partPackageID' fieldNameToValidate, 'number' fieldDataType, '==' matchCriteria, 'Package/Case(Shape) Type' fieldTitle, '0' isDeleted, '1' createdBy Union all  \n" +
                "		/*select 'minOperatingTemp' fieldNameToValidate, 'string' fieldDataType, '==' matchCriteria,  'Minimum Operating Temperature ' fieldTitle, '0' isDeleted, '1' createdBy Union all  \n" +
                "		select 'maxOperatingTemp' fieldNameToValidate, 'string' fieldDataType, '==' matchCriteria,  'Max Operating Temperature' fieldTitle, '0' isDeleted, '1' createdBy Union all*/  \n" +
                "		select 'connecterTypeID' fieldNameToValidate, 'number' fieldDataType, '==' matchCriteria,  'Connector Type' fieldTitle, '0' isDeleted, '1' createdBy Union all  \n" +
                "		select 'noOfPosition' fieldNameToValidate, 'number' fieldDataType, '==' matchCriteria, 'Pin Count' fieldTitle, '0' isDeleted, '1' createdBy Union all  \n" +
                "		select 'noOfRows' fieldNameToValidate, 'number' fieldDataType, '==' matchCriteria,  'No. of Rows' fieldTitle, '0' isDeleted, '1' createdBy Union all  \n" +
                "		select 'pitch' fieldNameToValidate, 'string' fieldDataType, '==' matchCriteria, 'Pitch (Unit in mm)' fieldTitle, '0' isDeleted, '1' createdBy Union all  \n" +
                "		select 'pitchMating' fieldNameToValidate, 'string' fieldDataType, '==' matchCriteria, 'Pitch Mating(Unit in mm)' fieldTitle, '0' isDeleted, '1' createdBy Union all  \n" +
                "		select 'length' fieldNameToValidate, 'number' fieldDataType, '==' matchCriteria, 'Size/Dimension Length' fieldTitle, '0' isDeleted, '1' createdBy Union all  \n" +
                "		select 'width' fieldNameToValidate, 'number' fieldDataType, '==' matchCriteria, 'Size/Dimension Width' fieldTitle, '0' isDeleted, '1' createdBy Union all  \n" +
                "		select 'height' fieldNameToValidate, 'number' fieldDataType, '==' matchCriteria, 'Height' fieldTitle, '0' isDeleted, '1' createdBy Union all  \n" +
                "		select 'tolerance' fieldNameToValidate, 'string' fieldDataType, '==' matchCriteria, 'Tolerance' fieldTitle, '0' isDeleted, '1' createdBy Union all  \n" +
                "		select 'voltage' fieldNameToValidate, 'string' fieldDataType, '==' matchCriteria, 'Voltage' fieldTitle, '0' isDeleted, '1' createdBy Union all  \n" +
                "		select 'value' fieldNameToValidate, 'string' fieldDataType, '==' matchCriteria, 'Value' fieldTitle, '0' isDeleted, '1' createdBy Union all  \n" +
                "		select 'powerRating' fieldNameToValidate, 'string' fieldDataType, '==' matchCriteria, 'Power (Watts)' fieldTitle, '0' isDeleted, '1' createdBy Union all  \n" +
                "		select 'weight' fieldNameToValidate, 'string' fieldDataType, '==' matchCriteria, 'Weight' fieldTitle, '0' isDeleted, '1' createdBy Union all  \n" +
                "		select 'feature' fieldNameToValidate, 'string' fieldDataType, '==' matchCriteria, 'Feature' fieldTitle, '0' isDeleted, '1' createdBy Union all  \n" +
                "		select 'color' fieldNameToValidate, 'string' fieldDataType, '==' matchCriteria, 'Color' fieldTitle, '0' isDeleted, '1' createdBy  \n" +
                "		) b  \n" +
                "		where a.id = ifnull(pFunctionalTypeID,a.id)  \n" +
                "        and a.isdeleted = false  \n" +
                "        and a.deletedAt is null  \n" +
                "		and not exists (select 1 from component_alternatepn_validations d where d.fieldNameToValidate = b.fieldNameToValidate and d.refRfqPartTypeId = a.id and d.type = 2);  \n" +
                "  \n" +
                "	/*creating defult entry for \"1-Alternate part  3-RoHS Alternate Part\"*/  \n" +
                "	insert into component_alternatepn_validations  \n" +
                "	(refRfqPartTypeId, fieldNameToValidate, fieldDataType, matchCriteria, fieldTitle, isDeleted, createdBy, createdAt, updatedAt, type)  \n" +
                "	select a.id refRfqPartTypeId, b.fieldNameToValidate, b.fieldDataType, b.matchCriteria, b.fieldTitle, b.isDeleted, pUserID createdBy, current_timestamp() createdAt, current_timestamp() updatedAt, c.type  \n" +
                "	from rfq_parttypemst a join  \n" +
                "		(select 'functionalCategoryID' fieldNameToValidate, 'number' fieldDataType, '==' matchCriteria, 'Functional Type' fieldTitle, '0' isDeleted, '1' createdBy Union all  \n" +
                "		select 'mountingTypeID' fieldNameToValidate, 'number' fieldDataType, '==' matchCriteria, 'Mounting Type' fieldTitle, '0' isDeleted, '1' createdBy Union all  \n" +
                "		select 'partType' fieldNameToValidate, 'number' fieldDataType, '==' matchCriteria, 'Part Type' fieldTitle, '0' isDeleted, '1' createdBy Union all  \n" +
                "		/*select 'minOperatingTemp' fieldNameToValidate, 'string' fieldDataType, '==' matchCriteria, 'Minimum Operating Temperature ' fieldTitle, '0' isDeleted, '1' createdBy Union all  \n" +
                "		select 'maxOperatingTemp' fieldNameToValidate, 'string' fieldDataType, '==' matchCriteria, 'Max Operating Temperature' fieldTitle, '0' isDeleted, '1' createdBy Union all*/  \n" +
                "		select 'connecterTypeID' fieldNameToValidate, 'number' fieldDataType, '==' matchCriteria, 'Connector Type' fieldTitle, '0' isDeleted, '1' createdBy Union all  \n" +
                "		select 'noOfRows' fieldNameToValidate, 'number' fieldDataType, '==' matchCriteria, 'No. of Rows' fieldTitle, '0' isDeleted, '1' createdBy Union all  \n" +
                "		select 'color' fieldNameToValidate, 'string' fieldDataType, '==' matchCriteria, 'Color' fieldTitle, '0' isDeleted, '1' createdBy  \n" +
                "		) b  \n" +
                "		join ( select 1 type union all  \n" +
                "				select 3 type) c  \n" +
                "		where a.id = ifnull(pFunctionalTypeID,a.id)  \n" +
                "         and a.isdeleted = false  \n" +
                "         and a.deletedAt is null  \n" +
                "		 and not exists (select 1 from component_alternatepn_validations d where d.fieldNameToValidate = b.fieldNameToValidate and d.refRfqPartTypeId = a.id and c.type = d.type);  \n" +
                "  \n" +
                "END;  \n" +

                "DROP procedure IF EXISTS `Sproc_GetPartsDetailForElastic`;  \n" +
                "CREATE PROCEDURE `Sproc_GetPartsDetailForElastic`(  \n" +
                "	IN pId INT,  \n" +
                "    In pFromdate date,  \n" +
                "    In pTodate date,  \n" +
                "    IN pRequiredCount tinyint(1)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "  \n" +
                "	if(pRequiredCount)  \n" +
                "    THEN  \n" +
                "		SELECT  \n" +
                "			count(1) totalCount  \n" +
                "		FROM  \n" +
                "		   component AS co  \n" +
                "		WHERE  (co.isDeleted = FALSE);  \n" +
                "    ELSE  \n" +
                "		SELECT  \n" +
                "			co.id,    co.custAssyPN,    co.mfgPN,	co.productionPN,	co.nickname,	co.PIDCode,	co.mfgPNDescription,	co.specialNote,	co.ltbDate,  \n" +
                "			co.eolDate,	co.deviceMarking,	co.partPackage,	co.powerRating,	co.feature,	co.color,	co.tolerance,	co.voltage,	co.value,	co.noOfPosition,	co.noOfRows,  \n" +
                "			co.mfgcodeID,	mfg.mfgCode AS mfgCode,	mfg.mfgType AS mfgType,	mfg.isCustOrDisty AS isCustOrDisty,  \n" +
                "			co.RoHSStatusID,	rohs.name AS rohsName,  \n" +
                "			co.partStatus,	cps.name AS partStatusName,  \n" +
                "			co.functionalCategoryID,	rpt.partTypeName AS rptName,  \n" +
                "			co.mountingTypeID,	rmt.name AS mountingTypeName,  \n" +
                "			co.connecterTypeID,	rct.name AS rfqConnecterTypeName,  \n" +
                "			co.packagingID,	cpm.name AS packagingName,  \n" +
                "			co.refSupplierMfgpnComponentID,  \n" +
                "			refSuppCom.mfgPN AS refSuppComMgPN,  \n" +
                "			refSuppCom.mfgcodeID AS refSuppComMfgcodeID,  \n" +
                "			refSuppComMfg.mfgCode AS refSuppComMfgCode,  \n" +
                "			refSuppComMfg.mfgType AS refSuppComMfgType,  \n" +
                "			refSuppComMfg.isCustOrDisty AS refSuppComIsCustOrDisty,  \n" +
                "            co.isDeleted  \n" +
                "		FROM  \n" +
                "		   component AS co  \n" +
                "				LEFT OUTER JOIN  \n" +
                "			mfgCodemst AS mfg ON co.mfgcodeID = mfg.id  \n" +
                "				AND (mfg.isDeleted = FALSE)  \n" +
                "				LEFT OUTER JOIN  \n" +
                "			rfq_rohsmst AS rohs ON co.RoHSStatusID = rohs.id  \n" +
                "				AND (rohs.isDeleted  = FALSE)  \n" +
                "				LEFT OUTER JOIN  \n" +
                "			component_partstatusmst AS cps ON co.partStatus = cps.id  \n" +
                "				AND (cps.isDeleted = FALSE)  \n" +
                "				LEFT OUTER JOIN  \n" +
                "			rfq_parttypemst AS rpt ON co.functionalCategoryID = rpt.id  \n" +
                "				AND (rpt.isDeleted = FALSE)  \n" +
                "				LEFT OUTER JOIN  \n" +
                "			rfq_mountingtypemst AS rmt ON co.mountingTypeID = rmt.id  \n" +
                "				AND (rmt.isDeleted = FALSE)  \n" +
                "				LEFT OUTER JOIN  \n" +
                "			rfq_connectertypemst AS rct ON co.connecterTypeID = rct.id  \n" +
                "				AND (rct.isDeleted = FALSE)  \n" +
                "				LEFT OUTER JOIN  \n" +
                "			component_packagingmst AS cpm ON co.packagingID = cpm.id  \n" +
                "				AND ( cpm.isDeleted = FALSE)  \n" +
                "				LEFT OUTER JOIN  \n" +
                "		   component AS refSuppCom ON co.refSupplierMfgpnComponentID = refSuppCom.id  \n" +
                "				AND (refSuppCom.isDeleted = FALSE)  \n" +
                "				LEFT OUTER JOIN  \n" +
                "			mfgCodemst AS refSuppComMfg ON refSuppCom.mfgcodeID = refSuppComMfg.id  \n" +
                "				AND (refSuppComMfg.isDeleted = FALSE)  \n" +
                "		WHERE  (CASE WHEN pId is not null THEN (co.id = IFNULL(pId,co.id)  \n" +
                "        OR IFNULL(co.refSupplierMfgpnComponentID,0) = IFNULL(pId,IFNULL(co.refSupplierMfgpnComponentID,0))) ELSE 1 = 1 END) AND  \n" +
                "					(CASE WHEN (pFromdate is not null and pTodate is not null) THEN  \n" +
                "					((DATE(fun_CovnertDateTimeByTimezoneValue(co.createdAt,v_TimeZone)) between pFromdate and pTodate)  \n" +
                "                    or (DATE(fun_CovnertDateTimeByTimezoneValue(co.updatedAt,v_TimeZone)) between pFromdate and pTodate)) ELSE 1 = 1 END);  \n" +
                "		END IF;  \n" +
                "END;  \n" +

                "DROP procedure IF EXISTS `Sproc_GetComponentCustAliasRev`;  \n" +
                "CREATE PROCEDURE `Sproc_GetComponentCustAliasRev`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pcustomerID VARCHAR(255),  \n" +
                "    IN pComponentId INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255);  \n" +
                "	DECLARE vMfgCodeFormat INT;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempComponentCPNPart;  \n" +
                "  \n" +
                "	SELECT fun_getMFGCodeNameFormat() INTO vMfgCodeFormat;  \n" +
                "  \n" +
                "    set @temp_Sproc_GetComponentCustAliasRev = concat(\"  \n" +
                "    SELECT co.id,co.custAssyPN,co.mfgcodeID,co.rev,co.liveVersion,co.mfgPN, co.restrictUsePermanently,  \n" +
                "    fun_GetFormattedMfgCode(m.mfgCode, m.mfgName,\", vMfgCodeFormat,\") as customer,co.mfgType,  \n" +
                "	co.restrictUSEwithpermission  , ro.rohsIcon , ro.name AS `rohsComplientConvertedValue`, co.isCPN, co.isCustom, co.category, co.partType,  \n" +
                "	co.PIDCode,  \n" +
                "	co.isGoodPart,  \n" +
                "	co.restrictPackagingUsePermanently,  \n" +
                "	co.restrictPackagingUseWithpermission,  \n" +
                "    (case when co.isCustom = 1 then 'Yes' else 'No' end) as isCustomValue,  \n" +
                "    (case when co.isCPN = 1 then 'Yes' else 'No' end) as isCPNValue, pc.categoryName ,co.mfgPNDescription  \n" +
                "    FROM component co  \n" +
                "    JOIN mfgcodemst m ON co.mfgcodeID = m.id  \n" +
                "	Inner JOIN rfq_rohsmst ro ON ro.id = co.RoHSStatusID AND ro.isDeleted = 0  \n" +
                "    Inner Join rfq_partcategory pc on pc.id = co.partType  \n" +
                "	WHERE co.isDeleted = 0  \n" +
                "	AND (co.isCPN = 1 or co.isCustom = 1 or co.category = 3 )\");  \n" +
                "  \n" +
                "	IF(pComponentId IS NOT NULL) THEN  \n" +
                "		CREATE TEMPORARY TABLE tempComponentCPNPart(refCPNPartID INT);  \n" +
                "  \n" +
                "		INSERT INTO tempComponentCPNPart  \n" +
                "        SELECT refCPNPartID FROM component_cust_alias_rev_pn WHERE isDeleted = 0 AND refComponentID = pComponentId;  \n" +
                "  \n" +
                "		set @temp_Sproc_GetComponentCustAliasRev = CONCAT(@temp_Sproc_GetComponentCustAliasRev,' AND co.id IN (select refCPNPartID  from tempComponentCPNPart)');  \n" +
                "    END IF;  \n" +
                "	IF(pcustomerID IS NOT NULL) THEN  \n" +
                "    	set @temp_Sproc_GetComponentCustAliasRev = CONCAT(@temp_Sproc_GetComponentCustAliasRev,' AND co.mfgCodeID = ' , pcustomerID);  \n" +
                "	END IF;  \n" +
                "	IF (pOrderBy IS NOT NULL) THEN  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , \"rev ASC\") ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = '1=1' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/* to get total count of rows */  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_GetComponentCustAliasRev,\" ) c where 1=1 and \", pWhereClause);  \n" +
                "    PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"select * from ( \", @temp_Sproc_GetComponentCustAliasRev,\" ) c  \n" +
                "		where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "	PREPARE query1 FROM @SQLStatement2;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "    END;  \n" +

                "DROP procedure IF EXISTS `Sproc_getCPNDetails`;  \n" +
                "CREATE PROCEDURE `Sproc_getCPNDetails`(  \n" +
                "	 IN pcustomerID INT,  \n" +
                "     IN pComponentID INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE vMfgCodeFormat INT;  \n" +
                "  \n" +
                "	SELECT fun_getMFGCodeNameFormat() INTO vMfgCodeFormat;  \n" +
                "    DROP TEMPORARY TABLE IF EXISTS tempComponentCPNPart;  \n" +
                "  \n" +
                "    IF(pComponentId IS NOT NULL) THEN  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS tempComponentCPNPart;  \n" +
                "		CREATE TEMPORARY TABLE tempComponentCPNPart(refCPNPartID INT);  \n" +
                "  \n" +
                "		INSERT INTO tempComponentCPNPart  \n" +
                "        SELECT refCPNPartID FROM component_cust_alias_rev_pn WHERE isDeleted = 0 AND refComponentID = pComponentId;  \n" +
                "  \n" +
                "		set @temp_Sproc_GetComponentCustAliasRev = CONCAT(@temp_Sproc_GetComponentCustAliasRev,' AND co.id IN (select refCPNPartID  from tempComponentCPNPart)');  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    SELECT  co.id,  \n" +
                "    cpn.PIDCode,  \n" +
                "	co.custAssyPN,  \n" +
                "	co.rev,  \n" +
                "    cpn.liveVersion,  \n" +
                "    co.mfgPNDescription as `CPNDescription`,  \n" +
                "    (case when co.isCPN = 1 then 'Yes' else 'No' end) as `CPN`, pc.categoryName as `PartType`,  \n" +
                "	cpnmfg.mfgCode,  \n" +
                "    fun_GetFormattedMfgCode(cpnmfg.mfgCode, cpnmfg.mfgName, vMfgCodeFormat) as customer,  \n" +
                "	cpn.mfgPN, cpn.mfgPNDescription as `Description`  \n" +
                "	FROM component co  \n" +
                "    Inner Join rfq_partcategory pc on pc.id = co.partType  \n" +
                "	LEFT OUTER JOIN component_cust_alias_rev_pn rc ON rc.refCPNPartID = co.id AND rc.deletedAt IS NULL  \n" +
                "	LEFT JOIN component cpn ON cpn.id = rc.refComponentID AND cpn.deletedAt IS NULL  \n" +
                "	LEFT JOIN mfgCodeMst cpnmfg ON cpnmfg.id = cpn.mfgCodeId AND cpnmfg.deletedAt IS NULL  \n" +
                "	WHERE co.mfgCodeID = IFNULL(pcustomerID,co.mfgCodeID)  and (co.isCPN = 1 or co.isCustom = 1 or co.category = 3 )  \n" +
                "    AND (CASE WHEN(pComponentId is NULL) THEN 1 = 1 ELSE co.id IN (select refCPNPartID  from tempComponentCPNPart) END)  \n" +
                "	AND co.isdeleted  = 0;  \n" +
                "    END;  \n" +

                "DROP procedure IF EXISTS `Sproc_RetrieveComponentCPNList`;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveComponentCPNList`(  \n" +
                "	IN pPageIndex INT,  \n" +
                "	IN pRecordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "    IN pComponentID int  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;  \n" +
                "	DECLARE vMfgCodeFormat INT;  \n" +
                "  \n" +
                "	SELECT fun_getMFGCodeNameFormat() INTO vMfgCodeFormat;  \n" +
                "    set @temp_Sproc_RetrieveComponentCPNList = concat(\"SELECT 	cpn.ID,  			c.id refCPNPartID,  					c.PIDCode,  \n" +
                "					c.mfgPN,			c.mfgcodeID,						m.mfgCode, m.mfgType,  \n" +
                "					c.RoHSStatusID,		rohs.rohsIcon, 						rohs.name rohsName,  \n" +
                "                    fun_GetFormattedMfgCode(m.mfgCode, m.mfgName,\", vMfgCodeFormat,\") as customer,  \n" +
                "                    c.rev,				c.liveVersion  \n" +
                "  \n" +
                "				FROM component c  \n" +
                "				JOIN component_cust_alias_rev_pn cpn ON cpn.refCPNPartID = c.id  AND cpn.deletedAt is null and cpn.isdeleted = 0  \n" +
                "				join mfgcodemst m ON c.mfgcodeID = m.id  \n" +
                "				join rfq_rohsmst rohs ON c.RoHSStatusID = rohs.id  \n" +
                "			   WHERE c.deletedAt is null and c.isdeleted = 0  \n" +
                "				AND cpn.refComponentID = \", pComponentID, \" \");  \n" +
                "  \n" +
                "    IF (pOrderBy IS NOT NULL) THEN  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = \"ORDER BY id\";  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = '1=1';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF(pPageIndex <> 0 AND pRecordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (pPageIndex -1) * pRecordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*) FROM (\",@temp_Sproc_RetrieveComponentCPNList,\") c where \", pWhereClause );  \n" +
                "    PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(@temp_Sproc_RetrieveComponentCPNList,\" and \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "    PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "END;  \n" +

                "DROP procedure IF EXISTS `Sproc_GetComponentBuyDetail`;  \n" +
                "CREATE PROCEDURE `Sproc_GetComponentBuyDetail`(  \n" +
                "	IN pComponentID INT(11)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempLastQuoteDetail;  \n" +
                "    DROP TEMPORARY TABLE IF EXISTS tempBuyDetail;  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS tempBuyDetail (  \n" +
                "		actionName varchar(25), 	componentID INT(11), 	supplier varchar(255), quoteQty INT(11),  \n" +
                "        unitPrice decimal(16,6),	uom INT(11),			unit varchar(10)  \n" +
                "    );  \n" +
                "  \n" +
                "	INSERT INTO	tempBuyDetail  \n" +
                "			(actionName, componentID, supplier, quoteQty, unitPrice, uom, unit)  \n" +
                "    VALUES	('Best Buy', NULL, NULL, NULL, NULL, NULL, NULL),  \n" +
                "			('Last Purchase', NULL, NULL, NULL, NULL, NULL, NULL),  \n" +
                "			('Last Quote', NULL, NULL, NULL, NULL, NULL, NULL);  \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS tempLastQuoteDetail  \n" +
                "    SELECT  'Last Quote' actionName, 	r.componentID,			r.supplier,  \n" +
                "			r.quoteQty,					r.unitPrice  \n" +
                "    FROM 	rfq_consolidate_mfgpn_lineitem_quantity r  \n" +
                "    WHERE 	r.componentID = pComponentID  \n" +
                "    AND		IFNULL(r.isdeleted,0) = 0  \n" +
                "    ORDER BY createdAt  \n" +
                "    LIMIT 1;  \n" +
                "  \n" +
                "    UPDATE	tempBuyDetail t, tempLastQuoteDetail lq  \n" +
                "	SET  	t.componentID = lq.componentID,	t.supplier = lq.supplier,		t.quoteQty = lq.quoteQty,  \n" +
                "			t.unitPrice = lq.unitPrice  \n" +
                "    WHERE 	t.actionName = lq.actionName;  \n" +
                "  \n" +
                "    UPDATE	tempBuyDetail t,  \n" +
                "		(select 'Last Purchase' as actionName,  \n" +
                "				a.mfgPartID as componentID,  \n" +
                "                m.mfgCode as supplier,  \n" +
                "                a.qty as quoteQty,  \n" +
                "                a.price as unitPrice  \n" +
                "			from purchase_order_det a  \n" +
                "				join purchase_order_mst pm on a.refPurchaseOrderID = pm.id  \n" +
                "				join mfgcodemst m on m.id = pm.supplierID  \n" +
                "			where a.mfgPartID = pComponentID and  \n" +
                "				a.isdeleted = 0 and pm.poWorkingStatus != 'CA'  \n" +
                "			order by pm.poDate desc LIMIT 1) lp  \n" +
                "	SET  	t.componentID = lp.componentID,	t.supplier = lp.supplier,		t.quoteQty = lp.quoteQty,  \n" +
                "			t.unitPrice = lp.unitPrice  \n" +
                "    WHERE 	t.actionName = lp.actionName;  \n" +
                "  \n" +
                "    UPDATE	tempBuyDetail t,  \n" +
                "		(select 'Best Buy' as actionName,  \n" +
                "				a.mfgPartID as componentID,  \n" +
                "                m.mfgCode as supplier,  \n" +
                "                a.qty as quoteQty,  \n" +
                "                a.price as unitPrice  \n" +
                "			from purchase_order_det a  \n" +
                "				join purchase_order_mst pm on a.refPurchaseOrderID = pm.id  \n" +
                "				join mfgcodemst m on m.id = pm.supplierID  \n" +
                "			where a.mfgPartID = pComponentID and  \n" +
                "				a.isdeleted = 0 and pm.poWorkingStatus != 'CA'  \n" +
                "			order by a.price asc LIMIT 1) lp  \n" +
                "	SET  	t.componentID = lp.componentID,	t.supplier = lp.supplier,		t.quoteQty = lp.quoteQty,  \n" +
                "			t.unitPrice = lp.unitPrice  \n" +
                "    WHERE 	t.actionName = lp.actionName;  \n" +
                "  \n" +
                "    UPDATE 	tempBuyDetail t, component c  \n" +
                "    SET 	t.uom = c.uom  \n" +
                "    WHERE 	t.componentID = c.id;  \n" +
                "  \n" +
                "	UPDATE 	tempBuyDetail t, uoms u  \n" +
                "    SET 	t.unit = u.abbreviation  \n" +
                "    WHERE 	t.uom = u.id;  \n" +
                "  \n" +
                "    SELECT * from tempBuyDetail;  \n" +
                "END;  \n" +

                "DROP procedure IF EXISTS `Sproc_GetComponentWithPackaginaAlias`;  \n" +
                "CREATE PROCEDURE `Sproc_GetComponentWithPackaginaAlias`(  \n" +
                "	IN Ids varchar(500)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS partText;  \n" +
                "	CREATE TEMPORARY TABLE partText(txt TEXT );  \n" +
                "	INSERT INTO partText VALUES(Ids);  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS partIdList;  \n" +
                "	CREATE TEMPORARY TABLE partIdList(partId int);  \n" +
                "	SET @SQL = CONCAT(\"insert into partIdList (partId) values ('\", REPLACE(( SELECT GROUP_CONCAT(DISTINCT txt) AS DATA FROM partText ), \",\", \"'),('\"),\"');\");  \n" +
                "	PREPARE stmt1 FROM @SQL;  \n" +
                "	EXECUTE stmt1;  \n" +
                "  \n" +
                "	SELECT  \n" +
                "		c.id,    c.PIDCode,    c.mfgPN,    c.mfgcodeID,    c.mountingTypeID,    c.functionalCategoryID,    c.partPackageID,    c.connecterTypeID,    c.RoHSStatusID,    c.packaginggroupID,    c.isCustom,  \n" +
                "		mfc.mfgCode AS mfgCode,  mfc.mfgName,  c.mfgPNDescription,c.mfgType, c.custAssyPN, c.rev, c.liveVersion, c.isGoodPart,  \n" +
                "		packageAliasPart.componentID, 	cpa.PIDCode AS packgingPIDCode,    cpa.mfgPN AS packgingmfgPN,    cpa.mfgcodeID AS packgingmfgcodeID,    cpa.mountingTypeID AS packgingmountingTypeID,    cpa.functionalCategoryID AS packgingfunctionalCategoryID,    cpa.partPackageID AS packgingpartPackageID,  \n" +
                "		cpa.connecterTypeID AS packgingconnecterTypeID,    cpa.RoHSStatusID AS packgingRoHSStatusID,    cpa.packaginggroupID AS packgingpackaginggroupID,    cpa.isCustom AS packgingisCustom,  \n" +
                "		cpamfc.mfgCode AS packgingMfcmfgCode,        cpamfc.mfgName AS packgingMfcmfgName,  \n" +
                "		rohs.name AS rohName,  \n" +
                "		rohs.rohsIcon AS rohsIcon,  \n" +
                "		rohs.refMainCategoryID AS rohsRefMainCategoryID,  \n" +
                "		pt.partTypeName AS functionalTypeName,  \n" +
                "		pt.isTemperatureSensitive AS isTemperatureSensitive,  \n" +
                "		pc.name AS packageCaseName,  \n" +
                "		mt.name AS mountingTypeName,  \n" +
                "		ct.name AS connectorTypename,  \n" +
                "        c.isGoodPart,  \n" +
                "        c.restrictUsePermanently,  \n" +
                "        c.restrictUSEwithpermission,  \n" +
                "		c.restrictPackagingUsePermanently,  \n" +
                "		c.restrictPackagingUseWithpermission,  \n" +
                "        c.packagingID, cpm.name as packagingName,  \n" +
                "        c.feature,        c.maxOperatingTemp,        c.minOperatingTemp,        c.temperatureCoefficient,        c.temperatureCoefficientValue,        c.temperatureCoefficientUnit,        c.noOfPosition,        c.noOfRows,  \n" +
                "        c.pitch,        c.pitchMating,        c.width,        c.length,        c.heightText,        c.height,        c.tolerance,        c.voltage,        c.value,        c.powerRating,        c.weight,        c.color  \n" +
                "	FROM  \n" +
                "		component AS c  \n" +
                "			LEFT OUTER JOIN    mfgCodemst AS mfc ON c.mfgcodeID = mfc.id            AND mfc.isDeleted = FALSE  \n" +
                "			LEFT OUTER JOIN    component_packagingalias AS packageAliasPart ON packageAliasPart.aliasgroupID = c.packaginggroupID and     packageAliasPart.componentID != c.id AND packageAliasPart.isDeleted = FALSE  \n" +
                "			LEFT OUTER JOIN    component AS cpa ON cpa.id = packageAliasPart.componentID  AND packageAliasPart.isDeleted = FALSE  \n" +
                "			LEFT OUTER JOIN    mfgCodemst AS cpamfc ON cpa.mfgcodeID = cpamfc.id         AND cpamfc.isDeleted = FALSE  \n" +
                "			LEFT OUTER JOIN    rfq_rohsmst AS rohs ON c.RoHSStatusID = rohs.id        AND rohs.isDeleted = FALSE  \n" +
                "			LEFT OUTER JOIN    rfq_parttypemst AS pt ON c.functionalCategoryID = pt .id             AND pt .isDeleted = FALSE  \n" +
                "			LEFT OUTER JOIN    rfq_packagecasetypemst AS pc ON c.partPackageID = pc.id       AND pc.isDeleted = FALSE  \n" +
                "			LEFT OUTER JOIN    rfq_mountingtypemst AS mt ON c.mountingTypeID = mt.id            AND mt.isDeleted = FALSE  \n" +
                "			LEFT OUTER JOIN    rfq_connectertypemst AS ct ON c.connecterTypeID = ct.id          AND ct.isDeleted = FALSE  \n" +
                "            LEFT OUTER JOIN    component_packagingmst as cpm on c.packagingID = cpm.id AND cpm.isDeleted = false  \n" +
                "	WHERE  \n" +
                "		((c.id IN (select partId from partIdList)  \n" +
                "			AND c.isDeleted = FALSE));  \n" +
                "END;  \n" +

                "DROP procedure IF EXISTS `Sproc_RetrieveComponentAlternetPart`;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveComponentAlternetPart`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "    IN pType INT,  \n" +
                "	IN pComponentID INT  \n" +
                "	)  \n" +
                "BEGIN  \n" +
                "		DECLARE pOffset INT;  \n" +
                "		DECLARE rowNumWhere VARCHAR(255) ;  \n" +
                "		DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
                "	        DECLARE v_TimeZone VARCHAR(50);  \n" +
                "	DECLARE vMfgCodeFormat INT;  \n" +
                "  \n" +
                "	SELECT fun_getMFGCodeNameFormat() INTO vMfgCodeFormat;  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
                "  \n" +
                "		SET @temp_Sproc_RetrieveComponentAlternetPart = CONCAT(\"SELECT  \n" +
                "        c.ID,						c.mfgPN AS `mfgPN`,							c.mfgcodeID,		m.mfgCode AS `mfgCode`,   			c.PIDCode,  \n" +
                "        fun_GetFormattedMfgCode(m.mfgCode, m.mfgName,\", vMfgCodeFormat,\") as mfrCode, c.mfgPNDescription,   c.custAssyPN, c.rev, c.liveVersion,  \n" +
                "        c.isGoodPart,        c.restrictUsePermanently,        c.restrictUSEwithpermission,		c.restrictPackagingUsePermanently,		c.restrictPackagingUseWithpermission,  \n" +
                "		m.mfgType,					c.operatingTemp AS `operatingTemp`,			c.minOperatingTemp AS `minOperatingTemp`,				c.maxOperatingTemp AS `maxOperatingTemp`,  \n" +
                "        c.tolerance AS `tolerance`,	c.voltage AS `voltage`,c.value AS `value`,	c.partPackage AS `partPackage`,							c.powerRating AS `powerRating`,  \n" +
                "        c.weight AS `weight`,		c.feature AS `feature`,						c.functionalCategoryText AS `functionalTypeExternal`,	functional.partTypeName AS `functionalTypeInternal`,  \n" +
                "        c.mountingTypeText AS `mountingTypeExternal`,							mounting.name AS `mountingTypeInternal`,				ro.rohsIcon,ro.name rohsName,  \n" +
                "        c.connecterTypeID,			cast(NULL as char(50)) connecterTypeInternal,	c.connectorTypeText,  								c.noOfPosition,  \n" +
                "        c.noOfPositionText,	        c.noOfRows,									c.noOfRowsText,											c.pitch,  \n" +
                "        c.pitchMating,				c.sizeDimension,								(CASE WHEN (c.isEpoxyMount = 1) THEN 'Yes' ELSE 'No' END) AS isEpoxyMount,  \n" +
                "        c.length,		            c.width,	c.heightText,						c.height, 												c.color,  \n" +
                "        c.temperatureCoefficient,	c.temperatureCoefficientValue,					c.temperatureCoefficientUnit,  \n" +
                "        fun_getUserNameByID(a.updatedBy) updatedby,								fun_getUserNameByID(a.createdBy) createdby, 			fun_getRoleByID(a.createByRoleId) createdbyRole,  \n" +
                "		fun_getRoleByID(a.updateByRoleId) updatedbyRole,    					fun_ApplyCommonDateTimeFormatByParaValue(a.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAt,  \n" +
                "		fun_ApplyCommonDateTimeFormatByParaValue(a.UpdatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt  \n" +
                "        FROM component_alternatepn a  \n" +
                "        JOIN component c ON a.ComponentID = c.ID  \n" +
                "        JOIN mfgcodemst m ON m.id = c.mfgcodeID  \n" +
                "        LEFT JOIN rfq_rohsmst ro ON c.RoHSStatusID = ro.id  \n" +
                "        LEFT OUTER JOIN rfq_parttypemst functional ON functional.id = c.functionalCategoryID  \n" +
                "        LEFT OUTER JOIN rfq_mountingtypemst mounting ON mounting.id = c.mountingTypeID  \n" +
                "        WHERE a.refComponentID = \",pComponentID,\" AND a.Type = \", pType,\" AND a.isDeleted = 0\");  \n" +
                "  \n" +
                "		IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "			SET pOrderBy = \"ORDER BY mfgPN ASC\";  \n" +
                "		ELSE  \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "			SET pWhereClause = '1=1' ;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "			SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "		ELSE  \n" +
                "			SET rowNumWhere = '';  \n" +
                "		END IF;  \n" +
                "		/* to get total count of rows */  \n" +
                "		SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_RetrieveComponentAlternetPart,\" ) c where 1=1 and \", pWhereClause);  \n" +
                "		PREPARE query2 FROM @SQLStatement2;  \n" +
                "		EXECUTE query2;  \n" +
                "		DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "		SET @SQLStatement2 = CONCAT(\"select * from ( \", @temp_Sproc_RetrieveComponentAlternetPart,\" ) c  \n" +
                "			where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "		PREPARE query1 FROM @SQLStatement2;  \n" +
                "		EXECUTE query1;  \n" +
                "		DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "    END;  \n" +

                "DROP procedure IF EXISTS `Sproc_RetrievePackagingParts`;  \n" +
                "CREATE PROCEDURE `Sproc_RetrievePackagingParts`(  \n" +
                "	IN pPageIndex INT(11),  \n" +
                "	IN pRecordPerPage INT(11),  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "    IN pComponentID int(11)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE pOffset INT(11);  \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;  \n" +
                "	DECLARE vMfgCodeFormat INT;  \n" +
                "  \n" +
                "	SELECT fun_getMFGCodeNameFormat() INTO vMfgCodeFormat;  \n" +
                "	SELECT packaginggroupID INTO @packagingGroupID FROM component WHERE id = pComponentID;  \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS packagingPartResults AS  \n" +
                "    SELECT 	c.ID,  						c.PIDCode,					c.mfgPNDescription,  \n" +
                "			c.isGoodPart,		c.custAssyPN,	c.rev,		c.liveVersion,  \n" +
                "			c.restrictPackagingUsePermanently,  \n" +
                "			c.restrictPackagingUseWithpermission,  \n" +
                "			c.mfgcodeID,				m.mfgCode, fun_GetFormattedMfgCode(m.mfgCode, m.mfgName,vMfgCodeFormat) as mfrCode,  \n" +
                "            m.mfgType,				c.mfgPN,  \n" +
                "            c.RoHSStatusID,				rohs.rohsIcon, 				rohs.name rohsName,  \n" +
                "            c.functionalCategoryID,		pt.partTypeName functionalTypeInternal,	c.functionalCategoryText functionalTypeExternal,  \n" +
                "			c.mountingTypeID,			mt.name mountingTypeInternal,	c.mountingTypeText mountingTypeExternal,  \n" +
                "            c.operatingTemp,			c.minOperatingTemp,								c.maxOperatingTemp,  \n" +
                "            c.connecterTypeID,			cast(NULL as char(50)) connecterTypeInternal,	c.connectorTypeText,  \n" +
                "            c.noOfPositionText,	        c.noOfRows,		c.pitch,				c.pitchMating,  \n" +
                "            c.sizeDimension,			c.length,		c.width,  \n" +
                "            c.heightText,				c.height,  \n" +
                "            c.temperatureCoefficient,	c.temperatureCoefficientValue,					c.temperatureCoefficientUnit,  \n" +
                "           	c.tolerance,				c.voltage,		c.value,				c.partPackage,  \n" +
                "            c.powerRating,				c.weight,		c.feature,				c.color  ,  \n" +
                "            (CASE WHEN (c.isEpoxyMount = 1) THEN 'Yes' ELSE 'No' END) AS isEpoxyMount  \n" +
                "    FROM 	component c  \n" +
                "    join  component_packagingalias cp  on c.id = cp.componentID  \n" +
                "    join  mfgcodemst m on c.mfgcodeID = m.id  \n" +
                "    left join rfq_mountingtypemst mt on c.mountingTypeID = mt.id  \n" +
                "    left join rfq_parttypemst pt on c.functionalCategoryID = pt.id  \n" +
                "    left join rfq_rohsmst rohs on c.RoHSStatusID = rohs.id  \n" +
                "	WHERE  	c.isDeleted = 0  \n" +
                "    AND		cp.componentID != pComponentID  \n" +
                "    AND		cp.aliasgroupID = @packagingGroupID  \n" +
                "    AND 	cp.isDeleted = 0;  \n" +
                "  \n" +
                "    IF (pOrderBy IS NOT NULL) THEN  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = \"ORDER BY id\";  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = '1=1';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF(pPageIndex <> 0 AND pRecordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (pPageIndex -1) * pRecordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*) FROM packagingPartResults where \", pWhereClause );  \n" +
                "    PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT * FROM packagingPartResults where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "    PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "    DROP TEMPORARY TABLE packagingPartResults;  \n" +
                "END;  \n" +

                "DROP procedure IF EXISTS `Sproc_RetrieveComponentPossibleAlternetPart`;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveComponentPossibleAlternetPart`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pComponentID INT  \n" +
                "	)  \n" +
                "BEGIN  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;  \n" +
                "	DECLARE pTolerance VARCHAR(50);  \n" +
                "	DECLARE pVoltage VARCHAR(50);  \n" +
                "	DECLARE pValue VARCHAR(50);  \n" +
                "	DECLARE pOperatingTemp VARCHAR(50);  \n" +
                "        DECLARE pCategory INT;  \n" +
                "        DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "	DECLARE vMfgCodeFormat INT;  \n" +
                "  \n" +
                "	SELECT fun_getMFGCodeNameFormat() INTO vMfgCodeFormat;  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
                "	SELECT c.tolerance,  \n" +
                "		c.voltage,  \n" +
                "		c.value,  \n" +
                "		c.operatingTemp,  \n" +
                "        c.category  \n" +
                "		INTO pTolerance,pVoltage,pValue,pOperatingTemp,pCategory  \n" +
                "	FROM component c  \n" +
                "	WHERE c.id = pComponentID;  \n" +
                "  \n" +
                "	SET @temp_Sproc_RetrieveComponentPossibleAlternetPart = CONCAT(\"SELECT 	c.ID,c.mfgPN AS `mfgPN`,c.mfgcodeID, c.PIDCode, c.isCustom,  \n" +
                "    fun_GetFormattedMfgCode(m.mfgCode, m.mfgName,\", vMfgCodeFormat,\") as mfrCode, c.mfgPNDescription,  c.custAssyPN, c.rev, c.liveVersion,  \n" +
                "	c.isGoodPart,        c.restrictUsePermanently,        c.restrictUSEwithpermission,		c.restrictPackagingUsePermanently,		c.restrictPackagingUseWithpermission,  \n" +
                "    m.mfgCode AS `mfgCode`,m.mfgType,c.operatingTemp AS `operatingTemp`,c.minOperatingTemp AS `minOperatingTemp`,  \n" +
                "    c.maxOperatingTemp AS `maxOperatingTemp`,c.tolerance AS `tolerance`,c.voltage AS `voltage`,c.value AS `value`,  \n" +
                "    c.partPackage AS `partPackage`,c.powerRating AS `powerRating`,c.weight AS `weight`,c.feature AS `feature`,  \n" +
                "    c.functionalCategoryText AS `functionalTypeExternal`,functional.partTypeName AS `functionalTypeInternal`,  \n" +
                "    c.mountingTypeText AS `mountingTypeExternal`,mounting.name AS `mountingTypeInternal`,ro.rohsIcon,ro.name rohsName,  \n" +
                "    fun_getUserNameByID(c.updatedBy) updatedby,  \n" +
                "	fun_getUserNameByID(c.createdBy) createdby,  \n" +
                "	fun_getRoleByID(c.createByRoleId) createdbyRole,  \n" +
                "	fun_getRoleByID(c.updateByRoleId) updatedbyRole,  \n" +
                "	fun_ApplyCommonDateTimeFormatByParaValue(c.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAt,  \n" +
                "	fun_ApplyCommonDateTimeFormatByParaValue(c.UpdatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt  \n" +
                "    FROM component c  \n" +
                "    LEFT OUTER JOIN mfgcodemst m ON c.mfgcodeID=m.id  \n" +
                "    LEFT OUTER JOIN rfq_parttypemst functional ON functional.id = c.functionalCategoryID  \n" +
                "    LEFT OUTER JOIN rfq_mountingtypemst mounting ON mounting.id = c.mountingTypeID  \n" +
                "    LEFT JOIN rfq_rohsmst ro ON c.RoHSStatusID = ro.id  \n" +
                "    WHERE m.mfgType='MFG'  \n" +
                "    AND NOT EXISTS (SELECT 1 FROM component_alternatepn ap WHERE ap.componentID = c.id AND ap.type = 1 AND ap.isDeleted = 0)  \n" +
                "    AND c.id != \",pComponentID);  \n" +
                "  IF(pTolerance IS NOT NULL AND pTolerance != '') THEN  \n" +
                "	SET @temp_Sproc_RetrieveComponentPossibleAlternetPart = CONCAT(@temp_Sproc_RetrieveComponentPossibleAlternetPart,' AND c.tolerance= ''',pTolerance,''' ');  \n" +
                "  END IF;  \n" +
                "  IF(pVoltage IS NOT NULL AND pVoltage != '') THEN  \n" +
                "	SET @temp_Sproc_RetrieveComponentPossibleAlternetPart = CONCAT(@temp_Sproc_RetrieveComponentPossibleAlternetPart,' AND c.voltage= ''',pVoltage,''' ');  \n" +
                "  END IF;  \n" +
                "  IF(pValue IS NOT NULL AND pValue != '') THEN  \n" +
                "	SET @temp_Sproc_RetrieveComponentPossibleAlternetPart = CONCAT(@temp_Sproc_RetrieveComponentPossibleAlternetPart,' AND c.value= ''',pValue,''' ');  \n" +
                "  END IF;  \n" +
                "  IF(pOperatingTemp IS NOT NULL AND pOperatingTemp != '') THEN  \n" +
                "	SET @temp_Sproc_RetrieveComponentPossibleAlternetPart = CONCAT(@temp_Sproc_RetrieveComponentPossibleAlternetPart,' AND c.operatingTemp= ''',pOperatingTemp,''' ');  \n" +
                "  END IF;  \n" +
                "  IF(pCategory IS NOT NULL AND pCategory != '') THEN  \n" +
                "	SET @temp_Sproc_RetrieveComponentPossibleAlternetPart = CONCAT(@temp_Sproc_RetrieveComponentPossibleAlternetPart,' AND c.Category = ''',pCategory,''' ');  \n" +
                "  END IF;  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "		SET pOrderBy = \"ORDER BY mfgPN ASC\";  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = '1=1' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/* to get total count of rows */  \n" +
                "		SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_RetrieveComponentPossibleAlternetPart,\" ) c where 1=1 and \", pWhereClause);  \n" +
                "		PREPARE query2 FROM @SQLStatement2;  \n" +
                "		EXECUTE query2;  \n" +
                "		DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "		SET @SQLStatement2 = CONCAT(\"select * from ( \", @temp_Sproc_RetrieveComponentPossibleAlternetPart,\" ) c  \n" +
                "			where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "		PREPARE query1 FROM @SQLStatement2;  \n" +
                "		EXECUTE query1;  \n" +
                "		DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "END;  \n" +

                "DROP procedure IF EXISTS `Sproc_GetDriveToolListByComponentId`;  \n" +
                "CREATE PROCEDURE `Sproc_GetDriveToolListByComponentId`(  \n" +
                "	IN pRefComponentID INT,  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "    IN pWithStock TINYINT(1)  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255);  \n" +
                "	DECLARE vMfgCodeFormat INT;  \n" +
                "  \n" +
                "	SELECT fun_getMFGCodeNameFormat() INTO vMfgCodeFormat;  \n" +
                "  \n" +
                "  SET @SQLStatement1=\"  \n" +
                "		select cd.id, cd.refComponentID, cd.componentID, co.imageURL, co.documentPath, mf.id mfgCodeId, mf.mfgCode, mf.mfgType, co.mfgPN, co.isCustom, co.PIDCode,  \n" +
                "                co.custAssyPN,	co.rev,		co.liveVersion, \";  \n" +
                "	IF (pWithStock IS NOT NULL AND pWithStock != '') THEN  \n" +
                "		SET @SQLStatement1=CONCAT(@SQLStatement1,\" fun_getComponentStock(co.id) partStock, \");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	SET @SQLStatement1=CONCAT(@SQLStatement1,\"  \n" +
                "				co.functionalCategoryID,  \n" +
                "				co.functionalCategoryText,  \n" +
                "				pt.partTypeName functionalCategoryName,  \n" +
                "                co.mountingTypeID,  \n" +
                "				co.mountingTypeText,  \n" +
                "				mt.name mountingTypeName,  \n" +
                "				ro.rohsIcon,  \n" +
                "				ro.name rohsName  ,  \n" +
                "                fun_GetFormattedMfgCode(mf.mfgCode, mf.mfgName,\", vMfgCodeFormat,\") as mfrCode, co.mfgPNDescription,  \n" +
                "				co.isGoodPart,        co.restrictUsePermanently,        co.restrictUSEwithpermission,		co.restrictPackagingUsePermanently,		co.restrictPackagingUseWithpermission  \n" +
                "		  from component co  \n" +
                "		  JOIN mfgcodemst mf ON co.mfgcodeID = mf.id  \n" +
                "		  JOIN rfq_parttypemst pt ON pt.id = co.functionalCategoryID  \n" +
                "		  JOIN rfq_mountingtypemst mt ON mt.id = co.mountingTypeID  \n" +
                "		  join component_drivetools cd ON cd.componentID = co.id and cd.isDeleted = 0  \n" +
                "          LEFT JOIN rfq_rohsmst ro ON co.RoHSStatusID = ro.id  \n" +
                "		 where co.isdeleted = 0 and cd.refComponentID = \",pRefComponentID);  \n" +
                "  \n" +
                "	IF (pOrderBy IS NOT NULL) THEN  \n" +
                "        SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy);  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = \"ORDER BY mfgPN DESC\" ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = '1=1' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  /* to get total count of rows */  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) from ( \",@SQLStatement1,\" ) c where 1=1 and \", pWhereClause);  \n" +
                "    PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"select * from ( \", @SQLStatement1,\" ) c  \n" +
                "		where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "  \n" +
                "    /*main query create temp table*/  \n" +
                "	PREPARE query1 FROM @SQLStatement2;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "END;  \n" +

                "DROP procedure IF EXISTS `Sproc_RetrieveComponentProcessMatrial`;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveComponentProcessMatrial`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pComponentID INT  \n" +
                "	)  \n" +
                "BEGIN  \n" +
                "		DECLARE pOffset INT;  \n" +
                "		DECLARE rowNumWhere VARCHAR(255) ;  \n" +
                "		DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
                "		DECLARE v_TimeZone VARCHAR(50);  \n" +
                "		DECLARE vMfgCodeFormat INT;  \n" +
                "  \n" +
                "		SELECT fun_getMFGCodeNameFormat() INTO vMfgCodeFormat;  \n" +
                "	    SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "	    SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
                "  \n" +
                "		SET @temp_Sproc_RetrieveComponentAlternetPart = CONCAT(\"  \n" +
                " SELECT  \n" +
                "        c.ID,						c.mfgPN AS `mfgPN`,							c.mfgcodeID,				c.PIDCode,						m.mfgCode AS `mfgCode`,   c.isCustom,  \n" +
                "        fun_GetFormattedMfgCode(m.mfgCode, m.mfgName,\", vMfgCodeFormat,\") as mfrCode, c.mfgPNDescription,		c.custAssyPN, c.rev, c.liveVersion,  \n" +
                "        c.isGoodPart,        c.restrictUsePermanently,        c.restrictUSEwithpermission,		c.restrictPackagingUsePermanently,		c.restrictPackagingUseWithpermission,  \n" +
                "		m.mfgType,					c.operatingTemp AS `operatingTemp`,			c.minOperatingTemp AS `minOperatingTemp`,				c.maxOperatingTemp AS `maxOperatingTemp`,  \n" +
                "        c.tolerance AS `tolerance`,	c.voltage AS `voltage`,c.value AS `value`,	c.partPackage AS `partPackage`,							c.powerRating AS `powerRating`,  \n" +
                "        c.weight AS `weight`,		c.feature AS `feature`,						c.functionalCategoryText AS `functionalTypeExternal`,	functional.partTypeName AS `functionalTypeInternal`,  \n" +
                "        c.mountingTypeText AS `mountingTypeExternal`,							mounting.name AS `mountingTypeInternal`,				ro.rohsIcon,ro.name rohsName,  \n" +
                "        c.connecterTypeID,			cast(NULL as char(50)) connecterTypeInternal,	c.connectorTypeText,  								c.noOfPosition,  \n" +
                "        c.noOfPositionText,	        c.noOfRows,									c.noOfRowsText,											c.pitch,  \n" +
                "        c.pitchMating, 							            c.sizeDimension,	(CASE WHEN (c.isEpoxyMount = 1) THEN 'Yes' ELSE 'No' END) AS isEpoxyMount,  \n" +
                "        c.temperatureCoefficient,	c.temperatureCoefficientValue,					c.temperatureCoefficientUnit,  \n" +
                "        c.length,		            c.width,	c.heightText,						c.height, 												c.color,  \n" +
                "        fun_getUserNameByID(a.updatedBy) updatedby,								fun_getUserNameByID(a.createdBy) createdby, 			fun_getRoleByID(a.createByRoleId) createdbyRole,  \n" +
                "		fun_getRoleByID(a.updateByRoleId) updatedbyRole,    					fun_ApplyCommonDateTimeFormatByParaValue(a.createdAt,'US/Central', '%m/%d/%y %h:%i %p') createdAt,  \n" +
                "		fun_ApplyCommonDateTimeFormatByParaValue(a.UpdatedAt,'US/Central', '%m/%d/%y %h:%i %p') updatedAt  \n" +
                "        FROM component_processmaterial a  \n" +
                "        JOIN component c ON a.ComponentID = c.ID  \n" +
                "        JOIN mfgcodemst m ON m.id = c.mfgcodeID  \n" +
                "        LEFT JOIN rfq_rohsmst ro ON c.RoHSStatusID = ro.id  \n" +
                "        LEFT OUTER JOIN rfq_parttypemst functional ON functional.id = c.functionalCategoryID  \n" +
                "        LEFT OUTER JOIN rfq_mountingtypemst mounting ON mounting.id = c.mountingTypeID  \n" +
                "        WHERE a.refComponentID = \",pComponentID,\" AND a.isDeleted = 0\");  \n" +
                "  \n" +
                "		IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "			SET pOrderBy = \"ORDER BY mfgPN ASC\";  \n" +
                "		ELSE  \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "			SET pWhereClause = '1=1' ;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "			SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "		ELSE  \n" +
                "			SET rowNumWhere = '';  \n" +
                "		END IF;  \n" +
                "		/* to get total count of rows */  \n" +
                "		SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_RetrieveComponentAlternetPart,\" ) c where 1=1 and \", pWhereClause);  \n" +
                "		PREPARE query2 FROM @SQLStatement2;  \n" +
                "		EXECUTE query2;  \n" +
                "		DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "		SET @SQLStatement2 = CONCAT(\"select * from ( \", @temp_Sproc_RetrieveComponentAlternetPart,\" ) c  \n" +
                "			where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "		PREPARE query1 FROM @SQLStatement2;  \n" +
                "		EXECUTE query1;  \n" +
                "		DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "    END;  \n" +

                "DROP procedure IF EXISTS `Sproc_GetComponetCustAliasRevPN`;  \n" +
                "CREATE PROCEDURE `Sproc_GetComponetCustAliasRevPN`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN prefComponentCustAliasRevID VARCHAR(255)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255);  \n" +
                "    DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "	DECLARE vMfgCodeFormat INT;  \n" +
                "  \n" +
                "	SELECT fun_getMFGCodeNameFormat() INTO vMfgCodeFormat;  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
                "	SET @temp_Sproc_GetComponetCustAliasRevPN = CONCAT(\"  \n" +
                "       SELECT co.id, co.id as refComponentID, co.mfgPN,mfg.mfgCode,co.restrictUsePermanently, co.isCustom,co.PIDCode,  \n" +
                "			co.restrictUSEwithpermission  , ro.rohsIcon ,  ro.name AS `rohsComplientConvertedValue`,  \n" +
                "            fun_GetFormattedMfgCode(mfg.mfgCode, mfg.mfgName,\", vMfgCodeFormat,\") as mfrCode,co.mfgType,co.mfgcodeID,  \n" +
                "			co.isGoodPart, co.custAssyPN, co.rev, co.liveVersion,  \n" +
                "			co.restrictPackagingUsePermanently,  \n" +
                "			co.restrictPackagingUseWithpermission,  \n" +
                "            fun_GetFormattedMfgCode(mfg.mfgCode, co.mfgPN,\", vMfgCodeFormat,\") as displayMfgPN,  \n" +
                "            co.mfgPNDescription,  \n" +
                "			co.operatingTemp AS `operatingTemp`,			co.minOperatingTemp AS `minOperatingTemp`,				co.maxOperatingTemp AS `maxOperatingTemp`,  \n" +
                "        co.tolerance AS `tolerance`,	co.voltage AS `voltage`,co.value AS `value`,	co.partPackage AS `partPackage`,							co.powerRating AS `powerRating`,  \n" +
                "        co.weight AS `weight`,		co.feature AS `feature`,						co.functionalCategoryText AS `functionalTypeExternal`,	functional.partTypeName AS `functionalTypeInternal`,  \n" +
                "        co.mountingTypeText AS `mountingTypeExternal`,							mounting.name AS `mountingTypeInternal`,  \n" +
                "        co.connecterTypeID,			cast(NULL as char(50)) connecterTypeInternal,	co.connectorTypeText,  								co.noOfPosition,  \n" +
                "        co.noOfPositionText,	        co.noOfRows,									co.noOfRowsText,											co.pitch,  \n" +
                "        co.pitchMating,				co.sizeDimension,								(CASE WHEN (co.isEpoxyMount = 1) THEN 'Yes' ELSE 'No' END) AS isEpoxyMount,  \n" +
                "        co.length,		            co.width,	co.heightText,						co.height, 												co.color,  \n" +
                "        co.temperatureCoefficient,	co.temperatureCoefficientValue,					co.temperatureCoefficientUnit,  \n" +
                "        fun_getUserNameByID(co.updatedBy) updatedby,								fun_getUserNameByID(co.createdBy) createdby, 			fun_getRoleByID(co.createByRoleId) createdbyRole,  \n" +
                "		fun_getRoleByID(co.updateByRoleId) updatedbyRole,    					fun_ApplyCommonDateTimeFormatByParaValue(co.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAt,  \n" +
                "		fun_ApplyCommonDateTimeFormatByParaValue(co.UpdatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt  \n" +
                "		FROM component co  \n" +
                "        Inner JOIN mfgcodemst mfg ON mfg.id= co.mfgcodeID AND mfg.isDeleted = 0  \n" +
                "		Inner JOIN rfq_rohsmst ro ON ro.id = co.RoHSStatusID AND ro.isDeleted = 0  \n" +
                "		Inner Join rfq_partcategory pc on pc.id = co.partType  \n" +
                "        LEFT OUTER JOIN rfq_parttypemst functional ON functional.id = co.functionalCategoryID  \n" +
                "        LEFT OUTER JOIN rfq_mountingtypemst mounting ON mounting.id = co.mountingTypeID  \n" +
                "		WHERE co.isDeleted = 0  \n" +
                "		 AND co.id = \" , prefComponentCustAliasRevID ,\"  \n" +
                "		Union all  \n" +
                "		SELECT car_pn.id ,car_pn.refComponentID,comp.mfgPN,mfg.mfgCode,comp.restrictUsePermanently, comp.isCustom,comp.PIDCOde,  \n" +
                "			comp.restrictUSEwithpermission  , ro.rohsIcon , ro.name AS `rohsComplientConvertedValue`,  \n" +
                "            fun_GetFormattedMfgCode(mfg.mfgCode, mfg.mfgName,\", vMfgCodeFormat,\") as mfrCode,mfg.mfgType,mfg.id as mfgcodeID,  \n" +
                "			comp.isGoodPart, comp.custAssyPN, comp.rev, comp.liveVersion,  \n" +
                "			comp.restrictPackagingUsePermanently,  \n" +
                "			comp.restrictPackagingUseWithpermission,  \n" +
                "            fun_GetFormattedMfgCode(mfg.mfgCode, comp.mfgPN,\", vMfgCodeFormat,\") as displayMfgPN,  \n" +
                "            comp.mfgPNDescription,  \n" +
                "            comp.operatingTemp AS `operatingTemp`,			comp.minOperatingTemp AS `minOperatingTemp`,				comp.maxOperatingTemp AS `maxOperatingTemp`,  \n" +
                "        comp.tolerance AS `tolerance`,	comp.voltage AS `voltage`, comp.value AS `value`,	comp.partPackage AS `partPackage`,							comp.powerRating AS `powerRating`,  \n" +
                "        comp.weight AS `weight`,		comp.feature AS `feature`,						comp.functionalCategoryText AS `functionalTypeExternal`,	functional.partTypeName AS `functionalTypeInternal`,  \n" +
                "        comp.mountingTypeText AS `mountingTypeExternal`,							mounting.name AS `mountingTypeInternal`,  \n" +
                "        comp.connecterTypeID,			cast(NULL as char(50)) connecterTypeInternal,	comp.connectorTypeText,  								comp.noOfPosition,  \n" +
                "        comp.noOfPositionText,	        comp.noOfRows,									comp.noOfRowsText,											comp.pitch,  \n" +
                "        comp.pitchMating,				comp.sizeDimension,								(CASE WHEN (comp.isEpoxyMount = 1) THEN 'Yes' ELSE 'No' END) AS isEpoxyMount,  \n" +
                "        comp.length,		            comp.width,	comp.heightText,						comp.height, 												comp.color,  \n" +
                "        comp.temperatureCoefficient,	comp.temperatureCoefficientValue,					comp.temperatureCoefficientUnit,  \n" +
                "        fun_getUserNameByID(car_pn.updatedBy) updatedby,								fun_getUserNameByID(car_pn.createdBy) createdby, 			fun_getRoleByID(car_pn.createByRoleId) createdbyRole,  \n" +
                "		fun_getRoleByID(car_pn.updateByRoleId) updatedbyRole,    					fun_ApplyCommonDateTimeFormatByParaValue(car_pn.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAt,  \n" +
                "		fun_ApplyCommonDateTimeFormatByParaValue(car_pn.UpdatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt  \n" +
                "		FROM component_cust_alias_rev_pn car_pn  \n" +
                "			LEFT OUTER JOIN component comp ON comp.id=car_pn.refComponentID AND IFNULL(comp.isDeleted,0)=0  \n" +
                "				LEFT OUTER JOIN mfgcodemst mfg ON mfg.id=comp.mfgcodeID AND IFNULL(mfg.isDeleted,0)=0  \n" +
                "				LEFT OUTER JOIN rfq_rohsmst ro ON ro.id = comp.RoHSStatusID AND ro.deletedAt IS NULL  \n" +
                "				Inner Join rfq_partcategory pc on pc.id = comp.partType  \n" +
                "				LEFT OUTER JOIN rfq_parttypemst functional ON functional.id = comp.functionalCategoryID  \n" +
                "				LEFT OUTER JOIN rfq_mountingtypemst mounting ON mounting.id = comp.mountingTypeID  \n" +
                "		WHERE IFNULL(car_pn.isDeleted,0)=0  \n" +
                "		 AND car_pn.refCPNPartID = \" , prefComponentCustAliasRevID ,\"  \n" +
                "	\");  \n" +
                "  \n" +
                "	IF (pOrderBy IS NOT NULL) THEN  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , \"id DESC\") ;  \n" +
                "	END IF;  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = '1=1' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "	 /* to get total count of rows */  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_GetComponetCustAliasRevPN,\" ) c where 1=1 and \", pWhereClause);  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"select * from ( \", @temp_Sproc_GetComponetCustAliasRevPN,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "	PREPARE query1 FROM @SQLStatement2;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "    END;  \n" +

                "DROP procedure IF EXISTS `Sproc_RetriveWhereUsedComponentsOther`;  \n" +
                "CREATE PROCEDURE `Sproc_RetriveWhereUsedComponentsOther`(  \n" +
                "	IN pPageIndex INT,  \n" +
                "	IN pRecordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "    IN pPartID INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255);  \n" +
                "    DECLARE v_mfgNameFormat VARCHAR(100);  \n" +
                "  \n" +
                "    select fun_getMFGCodeNameFormat() into v_mfgNameFormat;  \n" +
                "  \n" +
                "    DROP TEMPORARY TABLE IF EXISTS componentWhereUsedOther;  \n" +
                "    CREATE TEMPORARY TABLE componentWhereUsedOther AS  \n" +
                "    select ca.id, ca.id rfqLineItemsID, c.mfgPN, c.PIDCode, c.nickName, c.id partID, c.custAssyPN, c.rev, c.liveVersion,  \n" +
                "			m.id MID, 		m.mfgCode,		m.mfgType, fun_GetFormattedMfgCode(m.mfgCode, c.mfgPN, v_mfgNameFormat) displayValue,  \n" +
                "            fun_GetFormattedMfgCode(m.mfgCode, m.mfgName, v_mfgNameFormat) mfrCode,  \n" +
                "			c.partStatus,	(SELECT g.name FROM component_partstatusmst g WHERE g.id = c.partStatus) partStatusValue,  \n" +
                "			ro.rohsIcon,	ro.name rohsName,  \n" +
                "			case when ca.Type=1 then  \n" +
                "					'Alternate Parts'  \n" +
                "				  when ca.Type=2 then  \n" +
                "					'Pickup Pad'  \n" +
                "				  when ca.Type=3 then  \n" +
                "					'Program'  \n" +
                "				  when ca.Type=4 then  \n" +
                "					'Functional Testing Tools'  \n" +
                "				  when ca.Type=5 then  \n" +
                "					'Require Mating Parts'  \n" +
                "					end whereUsed,  \n" +
                "			case when ca.Type=1 then  \n" +
                "					1  \n" +
                "				  when ca.Type=2 then  \n" +
                "					7  \n" +
                "				  when ca.Type=4 then  \n" +
                "					8  \n" +
                "				  when ca.Type=5 then  \n" +
                "					6  \n" +
                "					end whereUsedOrder,  \n" +
                "			false isBOM,  \n" +
                "            c.isCustom,  \n" +
                "            c.mfgcodeID,  \n" +
                "			c.mfgPNDescription,  \n" +
                "			c.isGoodPart,  \n" +
                "            c.restrictUsePermanently,  \n" +
                "			c.restrictUSEwithpermission,  \n" +
                "			c.restrictPackagingUsePermanently,  \n" +
                "			c.restrictPackagingUseWithpermission  \n" +
                "		from component_alternatepn ca  \n" +
                "		join component c ON c.id = ca.refComponentID  \n" +
                "		JOIN mfgCodemst AS m ON c.mfgcodeID = m.id  \n" +
                "		JOIN rfq_rohsmst ro ON c.RoHSStatusID = ro.id  \n" +
                "	  where ca.componentID = pPartID  \n" +
                "         and ca.isDeleted = 0  \n" +
                "         and c.isDeleted = 0  \n" +
                "		 union all  \n" +
                "		 select cp.id, cp.id rfqLineItemsID, c.mfgPN, c.PIDCode, c.nickName, c.id partID,  c.custAssyPN, c.rev, c.liveVersion,  \n" +
                "				m.id MID, 		m.mfgCode,		m.mfgType, fun_GetFormattedMfgCode(m.mfgCode, c.mfgPN, v_mfgNameFormat) displayValue,  \n" +
                "                fun_GetFormattedMfgCode(m.mfgCode, m.mfgName, v_mfgNameFormat) mfrCode,  \n" +
                "				c.partStatus,	(SELECT g.name FROM component_partstatusmst g WHERE g.id = c.partStatus) partStatusValue,  \n" +
                "				ro.rohsIcon,  \n" +
                "				ro.name rohsName,  \n" +
                "				'Process Material' whereUsed,  \n" +
                "                4 whereUsedOrder,  \n" +
                "				false isBOM,  \n" +
                "				c.isCustom,  \n" +
                "			c.mfgPNDescription,  \n" +
                "			c.isGoodPart,  \n" +
                "            c.mfgcodeID,  \n" +
                "            c.restrictUsePermanently,  \n" +
                "			c.restrictUSEwithpermission,  \n" +
                "			c.restrictPackagingUsePermanently,  \n" +
                "			c.restrictPackagingUseWithpermission  \n" +
                "		   from component_processmaterial cp  \n" +
                "		   join component c ON c.id = cp.refComponentID  \n" +
                "		   JOIN mfgCodemst AS m ON c.mfgcodeID = m.id AND m.isDeleted = 0  \n" +
                "		   JOIN rfq_rohsmst ro ON c.RoHSStatusID = ro.id  \n" +
                "		  where cp.componentID = pPartID  \n" +
                "            and cp.isDeleted = 0  \n" +
                "		    and c.isDeleted = 0  \n" +
                "		union all  \n" +
                "        select cd.id, cd.id rfqLineItemsID, c.mfgPN, c.PIDCode, c.nickName, c.id partID,      c.custAssyPN, c.rev, c.liveVersion,  \n" +
                "				m.id MID, 		m.mfgCode,		m.mfgType,	fun_GetFormattedMfgCode(m.mfgCode, c.mfgPN, v_mfgNameFormat) displayValue,  \n" +
                "                fun_GetFormattedMfgCode(m.mfgCode, m.mfgName, v_mfgNameFormat) mfrCode,  \n" +
                "				c.partStatus,	(SELECT g.name FROM component_partstatusmst g WHERE g.id = c.partStatus) partStatusValue,  \n" +
                "				ro.rohsIcon,  \n" +
                "				ro.name rohsName,  \n" +
                "				'Drive Tools' whereUsed,  \n" +
                "                3 whereUsedOrder,  \n" +
                "				false isBOM,  \n" +
                "				c.isCustom ,  \n" +
                "            c.mfgcodeID,  \n" +
                "			c.mfgPNDescription,  \n" +
                "			c.isGoodPart,  \n" +
                "            c.restrictUsePermanently,  \n" +
                "			c.restrictUSEwithpermission,  \n" +
                "			c.restrictPackagingUsePermanently,  \n" +
                "			c.restrictPackagingUseWithpermission  \n" +
                "		   from component_drivetools cd  \n" +
                "		   join component c ON c.id = cd.refComponentID  \n" +
                "			JOIN mfgCodemst AS m ON c.mfgcodeID = m.id AND m.isDeleted = 0  \n" +
                "			JOIN rfq_rohsmst ro ON c.RoHSStatusID = ro.id  \n" +
                "		  where cd.componentID = pPartID  \n" +
                "            and cd.isDeleted = 0  \n" +
                "		    and c.isDeleted = 0  \n" +
                "		union all  \n" +
                "        select cc.id, cc.id rfqLineItemsID, c.mfgPN, c.PIDCode, c.nickName, c.id partID,    c.custAssyPN, c.rev, c.liveVersion,  \n" +
                "				m.id MID, 		m.mfgCode,		m.mfgType,	fun_GetFormattedMfgCode(m.mfgCode, c.mfgPN, v_mfgNameFormat) displayValue,  \n" +
                "                fun_GetFormattedMfgCode(m.mfgCode, m.mfgName, v_mfgNameFormat) mfrCode,  \n" +
                "				c.partStatus,	(SELECT g.name FROM component_partstatusmst g WHERE g.id = c.partStatus) partStatusValue,  \n" +
                "				ro.rohsIcon,  \n" +
                "				ro.name rohsName,  \n" +
                "				'Customer CPN' whereUsed,  \n" +
                "                5 whereUsedOrder,  \n" +
                "				false isBOM,  \n" +
                "				c.isCustom   ,  \n" +
                "            c.mfgcodeID,  \n" +
                "			c.mfgPNDescription,  \n" +
                "			c.isGoodPart,  \n" +
                "            c.restrictUsePermanently,  \n" +
                "			c.restrictUSEwithpermission,  \n" +
                "			c.restrictPackagingUsePermanently,  \n" +
                "			c.restrictPackagingUseWithpermission  \n" +
                "		   from component_cust_alias_rev_pn cc  \n" +
                "		   join component c ON c.id = cc.refCPNPartID  \n" +
                "			JOIN mfgCodemst AS m ON c.mfgcodeID = m.id AND m.isDeleted = 0  \n" +
                "			JOIN rfq_rohsmst ro ON c.RoHSStatusID = ro.id  \n" +
                "		  where cc.refComponentID = pPartID  \n" +
                "            and cc.isDeleted = 0  \n" +
                "			and c.isDeleted = 0;  \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , \"whereUsedOrder ASC\") ;  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = '1=1' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pPageIndex <> 0 AND pRecordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (pPageIndex -1) * pRecordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/* to get total count of rows */  \n" +
                "	SET @SQLStatement4 = CONCAT(\" SELECT COUNT(1) as TotalRecord FROM componentWhereUsedOther where \", pWhereClause );  \n" +
                "	PREPARE query4 FROM @SQLStatement4;  \n" +
                "	EXECUTE query4;  \n" +
                "	DEALLOCATE PREPARE query4;  \n" +
                "  \n" +
                "	SET @SQLStatement5 = CONCAT(\" SELECT * FROM  componentWhereUsedOther where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "	PREPARE query5 FROM @SQLStatement5;  \n" +
                "	EXECUTE query5;  \n" +
                "	DEALLOCATE PREPARE query5;  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS componentWhereUsedOther;  \n" +
                "  \n" +
                "END;  \n" +

                "DROP procedure IF EXISTS `Sproc_RetriveWhereUsedComponents`;  \n" +
                "CREATE PROCEDURE `Sproc_RetriveWhereUsedComponents`(  \n" +
                "	IN pPageIndex INT,  \n" +
                "	IN pRecordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "    IN pPartID INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255);  \n" +
                "	DECLARE vMfgCodeFormat INT;  \n" +
                "  \n" +
                "	SELECT fun_getMFGCodeNameFormat() INTO vMfgCodeFormat;  \n" +
                "    DROP TEMPORARY TABLE IF EXISTS componentResult;  \n" +
                "  \n" +
                "	set @temp_Sproc_RetriveWhereUsedComponents1 = concat(\"  \n" +
                "		select id, rfqLineItemsID, mfgPN, PIDCode, nickname, partID, refDesig, qpa,dnpQty, dnpDesig, MID, mfgCode, mfgType, partStatus, partStatusValue, totalUsage,  \n" +
                "        annualUsage, rohsIcon, rohsName, whereUsed, isBOM, isCustom,mfrCode,mfgPNDescription,restrictUsePermanently, restrictUSEwithpermission, custAssyPN,	rev, liveVersion  \n" +
                "			from  \n" +
                "			(SELECT 	rla.id id, 		rla.rfqLineItemsID,             c.restrictUsePermanently, c.restrictUSEwithpermission,  \n" +
                "						c.isGoodPart,	c.restrictPackagingUsePermanently,	c.restrictPackagingUseWithpermission,  \n" +
                "						c.mfgPN , 		c.PIDCode ,		c.nickname,  c.mfgPNDescription, c.custAssyPN,	c.rev,		c.liveVersion,  \n" +
                "						rla.partID, 	rl.refDesig,	IFNULL(rl.qpa,0) qpa, IFNULL(rl.dnpQty,0) dnpQty, rl.dnpDesig ,  \n" +
                "						m.id MID, 		m.mfgCode,		m.mfgType,  \n" +
                "						c.partStatus,	(SELECT g.name FROM component_partstatusmst g WHERE g.id = c.partStatus) partStatusValue,  \n" +
                "						0 totalUsage,  \n" +
                "						0 annualUsage,  \n" +
                "						ro.rohsIcon,  \n" +
                "						ro.name rohsName,  \n" +
                "						'Bill of Material' whereUsed,  \n" +
                "						true isBOM,  \n" +
                "						c.isCustom,  \n" +
                "                        fun_GetFormattedMfgCode(m.mfgCode, m.mfgName,\", vMfgCodeFormat,\") as mfrCode,  \n" +
                "                        rank() over(partition by rla.rfqLineItemsID, c.id, rla.partID, rl.refDesig order by rla.id) rnk  \n" +
                "				FROM rfq_lineitems_alternatepart AS rla  \n" +
                "				inner JOIN rfq_lineitems AS rl ON rl.id = rla.rfqLineItemsID  \n" +
                "				inner JOIN component AS c ON c.id = rla.partID AND c.isDeleted = 0  \n" +
                "				inner JOIN mfgCodemst AS m ON m.id = c.mfgcodeID AND  m.isDeleted = 0  \n" +
                "				inner JOIN rfq_rohsmst ro ON ro.id = c.RoHSStatusID  \n" +
                "				WHERE (rla.mfgPNID = \",pPartID,\"  OR  \n" +
                "					  rla.distMfgPNID = \",pPartID,\"  OR  \n" +
                "                      rl.custPNID = \",pPartID,\" OR  \n" +
                "					  exists (  \n" +
                "							SELECT 1  \n" +
                "							FROM rfq_lineitems_alternatepart AS cassy  \n" +
                "							WHERE cassy.partID = rla.mfgPNID  \n" +
                "							AND 	(cassy.mfgPNID = \",pPartID,\" OR  cassy.distMfgPNID = \",pPartID,\")  \n" +
                "							AND  	cassy.isDeleted = 0  \n" +
                "					  ))  \n" +
                "					AND  rla.isDeleted = 0  \n" +
                "                    and rl.isDeleted = 0) a  \n" +
                "			where rnk = 1\");  \n" +
                "  \n" +
                "	SET @SQLStatement1 = CONCAT(\"CREATE TEMPORARY TABLE componentResult AS  \n" +
                "							\",@temp_Sproc_RetriveWhereUsedComponents1,\" \");  \n" +
                "    PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "    UPDATE componentResult c  \n" +
                "		SET c.totalUsage = (c.qpa * IFNULL((SELECT SUM(w.buildQty)  \n" +
                "										FROM	workorder w  \n" +
                "										WHERE	w.partID = c.partID  \n" +
                "										AND 	w.isDeleted = 0  \n" +
                "										), 0));  \n" +
                "  \n" +
                "	UPDATE 	componentResult c  \n" +
                "		SET c.annualUsage = (c.qpa * IFNULL((SELECT SUM(w.buildQty)  \n" +
                "									FROM (  \n" +
                "                                    SELECT 	w.buildQty, TIMESTAMPDIFF(MONTH, w.createdAt, fun_DatetimetoUTCDateTime()) createdBefore  \n" +
                "									FROM	workorder w  \n" +
                "									WHERE	w.partID = c.partID  \n" +
                "									AND 	w.isDeleted = 0  \n" +
                "                                    ) w WHERE w.createdBefore <= 12), 0));  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , \"whereUsed ASC\") ;  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = '1=1' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pPageIndex <> 0 AND pRecordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (pPageIndex -1) * pRecordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/* to get total count of rows */  \n" +
                "	SET @SQLStatement4 = CONCAT(\" SELECT COUNT(1) as TotalRecord FROM componentResult where \", pWhereClause );  \n" +
                "	PREPARE query4 FROM @SQLStatement4;  \n" +
                "	EXECUTE query4;  \n" +
                "	DEALLOCATE PREPARE query4;  \n" +
                "  \n" +
                "	SET @SQLStatement5 = CONCAT(\" SELECT * FROM  componentResult where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "	PREPARE query5 FROM @SQLStatement5;  \n" +
                "	EXECUTE query5;  \n" +
                "	DEALLOCATE PREPARE query5;  \n" +
                "  \n" +
                "    DROP TEMPORARY TABLE IF EXISTS componentResult;  \n" +
                "  \n" +
                "END;  \n" +

                "DROP procedure IF EXISTS `Sproc_GetComponentList`;  \n" +
                "CREATE PROCEDURE `Sproc_GetComponentList`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pIsMFG TINYINT,  \n" +
                "    IN pMfgCodeIDs LONGTEXT,  \n" +
                "    IN pMfgCodeIdsForSupplierParts LONGTEXT,  \n" +
                "    IN pPackagingIDs LONGTEXT,  \n" +
                "    IN pPackageIDs LONGTEXT,  \n" +
                "    IN pPartStatusIDs LONGTEXT,  \n" +
                "    IN pMountingTypeIDs LONGTEXT,  \n" +
                "    IN pExternalMountingTypeValues LONGTEXT,  \n" +
                "    IN pFunctionalTypeIDs LONGTEXT,  \n" +
                "    IN pExternalFunctionalTypeValues LONGTEXT,  \n" +
                "    IN pAttributesSearchHeader LONGTEXT,  \n" +
                "    IN pAttributesSearch LONGTEXT,  \n" +
                "    IN pPackagingAlias TEXT,  \n" +
                "    IN pAlternatePart TEXT,  \n" +
                "    IN pRoHSAlternatePart TEXT,  \n" +
                "    IN pPartUsedInAssembly TEXT,  \n" +
                "    IN pMultiplePartNumbers LONGTEXT,  \n" +
                "    IN pStockQuantity TEXT,  \n" +
                "    IN pPartTypeIDs LONGTEXT,  \n" +
                "    IN pCertificateStandardsIds LONGTEXT,  \n" +
                "    IN pStandardsClassIds LONGTEXT,  \n" +
                "    IN pAssemblyIds LONGTEXT,  \n" +
                "    IN pAssemblyTypeIds LONGTEXT,  \n" +
                "    IN pRohsIds LONGTEXT,  \n" +
                "    IN pExternalRoHSStatusListValues LONGTEXT,  \n" +
                "    IN pOperationalAttributeIds LONGTEXT,  \n" +
                "    IN pAcceptableShippingCountryIds LONGTEXT,  \n" +
                "    IN pComponentOrdering TEXT,  \n" +
                "    IN pComponentUsageCriteria TEXT,  \n" +
                "    IN pIsRefreshMasterFilters TINYINT,  \n" +
                "    IN pFromDate DATE,  \n" +
                "    IN pToDate DATE,  \n" +
                "    IN pIsReversal TINYINT,  \n" +
                "    IN pIsCPN TINYINT,  \n" +
                "    IN pIsCustom TINYINT,  \n" +
                "    IN pIsBOMActivityStarted TINYINT,  \n" +
                "    IN pIsEcoDfmColumnVisible TINYINT,  \n" +
                "    IN pIsSearchFromHeader TINYINT,  \n" +
                "    IN pIsExportControl TINYINT,  \n" +
                "    IN pObsoleteDate DATE,  \n" +
                "    IN pIsOperatingTemperatureBlank TINYINT,  \n" +
                "    IN pFromCreatedOnDate DATE,  \n" +
                "    IN pToCreatedOnDate DATE,  \n" +
                "    IN pIsIdenticalMfrPN TINYINT,  \n" +
                "    IN pIsProductionPNEmpty TINYINT,  \n" +
                "    IN pDisapprovedSupplierIds LONGTEXT,  \n" +
                "	IN pIsExcludeIncorrectPart TINYINT,  \n" +
                "    IN pMultiplePartFilterFieldName VARCHAR(50),  \n" +
                "    IN pMultiplePartByUploadFileDetail LONGTEXT,  \n" +
                "    IN pIsRestrictUSEwithpermission TINYINT,  \n" +
                "    IN pIsRestrictPackagingUseWithpermission TINYINT,  \n" +
                "    IN pIsRestrictUsePermanently TINYINT,  \n" +
                "    IN pIsRestrictPackagingUsePermanently TINYINT  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255);  \n" +
                "    DECLARE attributeSearchString LONGTEXT;  \n" +
                "    DECLARE attributeSearchLength INT DEFAULT 0;  \n" +
                "    DECLARE attributeSearchChip    VARCHAR(500) DEFAULT NULL;  \n" +
                "	DECLARE attributeSearchSubLength INT DEFAULT 0;  \n" +
                "    DECLARE vPartUsedInAssemblyExists VARCHAR(20);  \n" +
                "    DECLARE vPartUsedInAssemblyAndOR VARCHAR(20);  \n" +
                "  \n" +
                "    DECLARE vDateTimeDisplayFormat VARCHAR(100);  \n" +
                "    DECLARE vTimeZone VARCHAR(50);  \n" +
                "    DECLARE vCurrentSession datetime;  \n" +
                "    DECLARE vMfgCodeFormat INT;  \n" +
                "  \n" +
                "    SELECT fun_getMFGCodeNameFormat() INTO vMfgCodeFormat;  \n" +
                "    SELECT fun_DatetimetoUTCDateTime() INTO vCurrentSession;  \n" +
                "	SELECT fun_getTimeZone() INTO vTimeZone;  \n" +
                "    SELECT fun_getDateTimeFormat() INTO vDateTimeDisplayFormat;  \n" +
                "  SET @SQLStatement1=CONCAT(\"  \n" +
                "	SELECT co.id,co.imageURL,co.mfgPN,co.mfgcodeID,co.mfgPNDescription,co.packageQty,co.ltbDate,co.RoHSStatusID,co.PIDCode,co.custAssyPN, co.rev, co.liveVersion  \n" +
                ",co.leadTime,co.noOfPosition,co.mountingTypeID,co.partPackage,co.deviceMarking,co.minimum,co.mult,co.uomText,co.rohsText,co.dataSheetLink  \n" +
                ",co.eolDate,co.value,co.tolerance,co.minOperatingTemp,co.maxOperatingTemp,co.weight,co.length,co.width,co.height,co.saftyStock  \n" +
                ",co.specialNote,co.heightText,co.partStatusText,co.feature,co.functionalCategoryText,co.supplier,co.mountingTypeText,co.maxPriceLimit  \n" +
                ",co.selfLifeDays,co.isCustom,co.connecterTypeID,co.connectorTypeText,co.maxQtyonHand,co.noOfRows,co.powerRating,co.pitch,co.pitchMating  \n" +
                ",co.scrapRatePercentagePerBuild,co.plannedOverRunPercentagePerBuild,co.nickName,co.restrictUSEwithpermission,co.operatingTemp  \n" +
                ",co.sizeDimension,co.plannedValuePerBuild,co.scrapValuePerBuild,co.restrictUsePermanently,co.eau,co.pcbPerArray,co.isCPN,co.partType,co.category  \n" +
                ",co.shelfListDaysThresholdPercentage,co.color,co.businessRisk,co.grossWeight,co.packagingWeight,co.restrictPackagingUsePermanently  \n" +
                ",co.restrictPackagingUseWithpermission,co.reversalDate,co.serialNumber,co.isActivityStart,co.activityStartBy,co.activityStartAt  \n" +
                ",co.systemGenerated,co.purchasingComment,co.detailDescription,co.documentPath,co.obsoleteDate,co.epicorType,co.partStatus,co.packagingID,co.functionalCategoryID,co.partPackageID,co.isWaterSoluble,co.isNoClean  \n" +
                ",co.mfrNameText,co.isHazmatMaterial,co.rfqNumber,co.salesacctId,co.purchaseacctId,co.umidSPQ,co.internalReference,  fun_GetFormattedMfgCode(mf.mfgCode, mf.mfgName, \", vMfgCodeFormat ,\") as mfgCode,  \n" +
                " mf.isCustOrDisty, mf.mfgName as manufacturerName, mf.displayOrder mfgDisplayOrder,  \n" +
                "		(case when co.isGoodPart!=2 and mf.mfgType = 'MFG' then 1 else 0 end) as isCopyPart,  \n" +
                "		gc.name AS partStatusValue,  \n" +
                "        gc.displayOrder parStatusDisplayOrder,  \n" +
                "		mf.mfgType, co.isReceiveBulkItem \");  \n" +
                "	IF pIsMFG = TRUE THEN  \n" +
                "		SET @SQLStatement1=CONCAT(@SQLStatement1,\" ,  \n" +
                "			null AliasMFGPN,  \n" +
                "			null AliasMFGCode,  \n" +
                "			null AliasMFGCodeID,  \n" +
                "			null AliascompID,  \n" +
                "			null AliasMFGName,  \n" +
                "            null AliasMFGDisplayOrder\");  \n" +
                "    ELSE  \n" +
                "	SET @SQLStatement1=CONCAT(@SQLStatement1,\" ,  \n" +
                "		/*(case when (mf.mfgType = 'DIST' and co.refSupplierMfgpnComponentID is not null) then (select MFGPN from component vu_co where vu_co.id = co.refSupplierMfgpnComponentID limit 1) else null end) AliasMFGPN,*/  \n" +
                "         vu_co.MFGPN AliasMFGPN,  \n" +
                "          fun_GetFormattedMfgCode(mfc.mfgCode, mfc.mfgName,\", vMfgCodeFormat ,\") as AliasMFGCode,  \n" +
                "        mfc.id AliasMFGCodeID,  \n" +
                "	    co.refSupplierMfgpnComponentID AliascompID,  \n" +
                "        mfc.mfgName as AliasMFGName,  \n" +
                "        mfc.displayOrder AliasMFGDisplayOrder \");  \n" +
                "	END IF;  \n" +
                "	SET @SQLStatement1=CONCAT(@SQLStatement1,\" ,  \n" +
                "		ro.name AS `rohsComplientConvertedValue`,  \n" +
                "        ro.displayOrder rohsDisplayOrder,  \n" +
                "		ro.rohsIcon AS `rohsIcon`,  \n" +
                "		(CASE WHEN (`co`.`isGoodPart` = 1) THEN 'Correct Part'  \n" +
                "					WHEN (`co`.`isGoodPart` = 2) THEN 'Incorrect Part'  \n" +
                "					WHEN (`co`.`isGoodPart` = 3) THEN 'TBD Part'  \n" +
                "					ELSE '' END) AS `isGoodPartValue`,  \n" +
                "		case when co.isCustom = 1 then  \n" +
                "				'Yes'  \n" +
                "			else 'No' end as isCustomValue,  \n" +
                "		case when co.isCPN = 1 then  \n" +
                "				'Yes'  \n" +
                "			else 'No' end as isCPNValue,  \n" +
                "		pt.partTypeName functionalCategoryName,  \n" +
                "        pt.displayOrder functionalCategoryDisplayOrder,  \n" +
                "		mt.name mountingTypeName,  \n" +
                "        mt.displayOrder mountingTypeDisplayOrder,  \n" +
                "		pc.categoryName,  \n" +
                "		rct.name connecterTypeName,  \n" +
                "		u.unitName,  \n" +
                "		CONCAT(cmsl.levelRating,' (', cmsl.time,')') mslName,  \n" +
                "		pck.name packagingName,  \n" +
                "        pck.displayOrder packagingDisplayOrder,  \n" +
                "			(CASE WHEN (`co`.`isReversal` = 1) THEN 'Yes'  \n" +
                "					ELSE 'No' END) AS `reversalPart`,  \n" +
                "			(CASE WHEN (`co`.`isEpoxyMount` = 1) THEN 'Yes'  \n" +
                "					ELSE 'No' END) AS `isEpoxyMount`,  \n" +
                "		ifnull(vucomstd.isExportControl, 'No') as isExportControl,  \n" +
                "        IFNULL(vuempcre.initialName,co.createdBy) as createdbyValue,  \n" +
                "		IFNULL(vuempupd.initialName ,co.updatedBy)as updatedbyValue,  \n" +
                "		rc.name as createdbyRoleValue,  \n" +
                "		ru.name as updatedbyRoleValue,  \n" +
                "        co.createdAt,  \n" +
                " 		co.updatedAt,  \n" +
                "        co.updatedAtApi,  \n" +
                "		(CASE WHEN (co.systemGenerated = 0) THEN 'No'  \n" +
                "		WHEN (co.systemGenerated = 1) THEN 'Yes' ELSE '' END) AS `SystemGeneratedValue`,  \n" +
                "        pct.name packageCaseTypeValue,  \n" +
                "        concat(pt.partTypeName,' - ',mt.name) groupName,  \n" +
                "		case when co.category = 3 then  \n" +
                "			fun_getSamplePicturesUploadCount(co.id)  \n" +
                "		end uploadedSamplePicturesCount,  \n" +
                "		case when co.category = 3 then  \n" +
                "			vurfass.count  \n" +
                "		end assemblyCount,  \n" +
                "		case when co.category = 3 then  \n" +
                "			 vurline.lineCount  \n" +
                "		end bomLineCount,  \n" +
                "		case when co.category = 3 then  \n" +
                "			vurfass.quoteProgress  \n" +
                "		end quoteProgress,  \n" +
                "		CASE when co.category = 3 then  \n" +
                "		 	vurfass.id  \n" +
                "		END rfqAssyID,  \n" +
                "		concat(usr.firstName, ' ', usr.lastName) activityStartedByUserName,  \n" +
                "		case when co.isActivityStart=true then  \n" +
                "				TIMESTAMPDIFF(SECOND, co.activityStartAt,'\",vCurrentSession,\"')  \n" +
                "			else null end activityStartTime,  \n" +
                "		rat.name assemblyTypeName,  \n" +
                "		CASE when co.frequency = 1 then  \n" +
                "		 	'Every' when    co.frequency = 2 then  \n" +
                "		 	'First' when  co.frequency = 3 then  \n" +
                "		 	'Last' else ''  \n" +
                "		END frequencyName,  \n" +
                "        CASE WHEN co.isWaterSoluble = 0 THEN 'NO' ELSE 'YES' END isWaterSolubleConvertedValue ,  \n" +
                "        CASE WHEN co.isNoClean = 0 THEN 'NO' ELSE 'YES' END isNoCleanConvertedValue,  \n" +
                "        fun_getHazmateValue(co.isHazmatMaterial) as isHazmatMaterialValue,  \n" +
                "        CASE WHEN co.isReceiveBulkItem = 0 THEN 'NO' ELSE 'YES' END isReceiveBulkConvertedValue,  \n" +
                "        CONCAT('(',am.`acct_code`,') ',am.`acct_name`) AS SalesCOA,  \n" +
                "        CONCAT('(',aam.`acct_code`,') ',aam.`acct_name`) AS PurchaseCOA,  \n" +
                "        vucomstd.certificatelist,  \n" +
                "        vusac.subAssemblyCount\");  \n" +
                "	IF (pStockQuantity IS NOT NULL AND pStockQuantity != '') OR pComponentOrdering = 'STOCK' THEN  \n" +
                "		SET @SQLStatement1=CONCAT(@SQLStatement1,\" , fun_getComponentStock(co.id) partStock \");  \n" +
                "	ELSE  \n" +
                "		SET @SQLStatement1=CONCAT(@SQLStatement1,\" , null partStock \");  \n" +
                "	END IF;  \n" +
                "    IF pComponentOrdering = 'USAGE' THEN  \n" +
                "		SET @SQLStatement1=CONCAT(@SQLStatement1,\" , fun_getComponentUsage(co.id,'\",pFromDate,\"','\",pToDate,\"','\",pComponentUsageCriteria,\"') partUsage \");  \n" +
                "	ELSE  \n" +
                "		SET @SQLStatement1=CONCAT(@SQLStatement1,\" , null partUsage \");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF pIsEcoDfmColumnVisible = TRUE THEN  \n" +
                "		SET @SQLStatement1=CONCAT(@SQLStatement1,\" , (select count(1)  \n" +
                "													  from eco_request ec  \n" +
                "													 where ec.isdeleted = 0  \n" +
                "													   and ec.finalstatus = 'P'  \n" +
                "													   and ec.fromPartID = co.id) activeEcoDfmCount \");  \n" +
                "	ELSE  \n" +
                "		SET @SQLStatement1=CONCAT(@SQLStatement1,\" , null activeEcoDfmCount \");  \n" +
                "	END IF;  \n" +
                "	IF (pFromCreatedOnDate IS NOT NULL OR pToCreatedOnDate IS NOT NULL) THEN  \n" +
                "		SET @SQLStatement1=CONCAT(@SQLStatement1,\" , CAST(fun_CovnertDateTimeByTimezoneValue(co.createdAt,'\",vTimeZone,\"') AS DATE) createdAtFilter \");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF pIsIdenticalMfrPN = TRUE THEN  \n" +
                "		SET @SQLStatement1=CONCAT(@SQLStatement1,\" , count(1) over(partition by co.mfgPN,mf.mfgType) identicalPNCount \");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "SET @SQLStatement1=CONCAT(@SQLStatement1,\"  \n" +
                "	FROM component co  \n" +
                "		JOIN rfq_partcategory pc ON pc.id = co.partType  \n" +
                " 		JOIN mfgcodemst mf ON co.mfgcodeID = mf.id  \n" +
                " 		JOIN component_partstatusmst gc ON gc.id = co.partStatus  \n" +
                " 		JOIN rfq_rohsmst ro ON co.RoHSStatusID = ro.id  \n" +
                " 		JOIN rfq_parttypemst pt ON pt.id = co.functionalCategoryID  \n" +
                " 		JOIN rfq_mountingtypemst mt ON mt.id = co.mountingTypeID  \n" +
                " 		LEFT JOIN rfq_connectertypemst rct ON rct.id = co.connecterTypeID  \n" +
                " 		JOIN uoms u ON u.id = co.uom  \n" +
                " 		LEFT JOIN component_mslmst cmsl ON cmsl.id = co.mslID  \n" +
                "		left join rfq_packagecasetypemst pct ON pct.id = co.partPackageID  \n" +
                "        LEFT JOIN users usr ON usr.id = co.activityStartBy  \n" +
                "        left join rfq_assy_typemst rat ON rat.id = co.assemblyType  \n" +
                " 		LEFT JOIN component_packagingmst pck ON pck.id = co.packagingID  \n" +
                "        LEFT JOIN acct_acctmst am ON am.acct_id = co.salesacctId  \n" +
                "        LEFT JOIN acct_acctmst aam ON aam.acct_id = co.purchaseacctId  \n" +
                "		left JOIN vu_component_standard vucomstd ON vucomstd.componentID = co.id  \n" +
                "        left JOIN vu_emp_detail vuempcre ON vuempcre.id = co.createdBy  \n" +
                "        left JOIN vu_emp_detail vuempupd ON vuempupd.id = co.updatedBy  \n" +
                "        left JOIN roles rc ON rc.id = co.createByRoleId  \n" +
                "        left JOIN roles ru ON ru.id = co.updateByRoleId  \n" +
                "        left join vu_rfq_assembly_detail vurfass on vurfass.partId = co.id  \n" +
                "        left join vu_rfq_lineitem_count vurline on vurline.partId = co.id  \n" +
                "        left join vu_sub_assembly_count vusac on vusac.partId = co.id\");  \n" +
                "    IF pIsMFG = FALSE THEN  \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1,\"  \n" +
                "			JOIN mfgcodemst mfc ON mfc.id = co.refMfgPNMfgCodeId  \n" +
                "            JOIN COMPONENT vu_co on vu_co.id = co.refSupplierMfgpnComponentID \");  \n" +
                "	END IF;  \n" +
                "	SET @SQLStatement1 = CONCAT(@SQLStatement1,\"  \n" +
                "    WHERE co.isdeleted = 0 \");  \n" +
                "  \n" +
                "	IF pIsMFG = TRUE THEN  \n" +
                "		SET @SQLStatement1= CONCAT(@SQLStatement1, ' AND mf.mfgType= ''MFG'' ');  \n" +
                "    ELSE  \n" +
                "		SET @SQLStatement1= CONCAT(@SQLStatement1, ' AND mf.mfgType= ''DIST'' ');  \n" +
                "    END IF;  \n" +
                "  \n" +
                "	IF (pMultiplePartFilterFieldName is not null AND pMultiplePartByUploadFileDetail IS NOT NULL AND pMultiplePartByUploadFileDetail != '')  \n" +
                "    THEN  \n" +
                "		if(pMultiplePartFilterFieldName = 'SystemID')  \n" +
                "        THEN  \n" +
                "			SET @SQLStatement1= CONCAT(@SQLStatement1, ' AND co.serialNumber IN(',pMultiplePartByUploadFileDetail,')  ');  \n" +
                "		ELSEif(pMultiplePartFilterFieldName = 'PID Code')  \n" +
                "        THEN  \n" +
                "			SET @SQLStatement1= CONCAT(@SQLStatement1, ' AND co.PIDCode IN(',pMultiplePartByUploadFileDetail,')  ');  \n" +
                "		ELSE  \n" +
                "			SET @SQLStatement1= CONCAT(@SQLStatement1, ' AND co.mfgPN IN(',pMultiplePartByUploadFileDetail,')  ');  \n" +
                "        END IF;  \n" +
                "    END IF;  \n" +
                "	IF (pOrderBy IS NOT NULL) THEN  \n" +
                "		IF pComponentOrdering = 'MFG' THEN  \n" +
                "			IF LOCATE('mfgcode',pOrderBy) = 0 THEN  \n" +
                "				SET pOrderBy = CONCAT(\"MFGCode asc, \" , pOrderBy);  \n" +
                "            END IF;  \n" +
                "		ELSEIF pComponentOrdering = 'MFGPN' THEN  \n" +
                "			IF LOCATE('mfgcode',pOrderBy) = 0 THEN  \n" +
                "				SET pOrderBy = CONCAT(\"mfgPN asc, \" , pOrderBy);  \n" +
                "			END IF;  \n" +
                "		ELSEIF pComponentOrdering = 'USAGE' THEN  \n" +
                "			SET pOrderBy = CONCAT(\"partUsage desc, \" , pOrderBy);  \n" +
                "		ELSEIF pComponentOrdering = 'STOCK' THEN  \n" +
                "			SET pOrderBy = CONCAT(\"partStock desc, \" , pOrderBy);  \n" +
                "		END IF;  \n" +
                "        SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy);  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = \"ORDER BY mfgPN DESC\" ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = '1=1' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF (pMfgCodeIDs IS NOT NULL AND pMfgCodeIDs != '') THEN  \n" +
                "		SET @SQLStatement1= CONCAT(@SQLStatement1, ' AND co.mfgcodeID in (', pMfgCodeIDs, ' )');  \n" +
                "    END IF;  \n" +
                "    IF (pMfgCodeIdsForSupplierParts IS NOT NULL AND pMfgCodeIdsForSupplierParts != '') THEN  \n" +
                "		SET @SQLStatement1= CONCAT(@SQLStatement1, ' AND co.refMfgPNMfgCodeId in (', pMfgCodeIdsForSupplierParts, ' )');  \n" +
                "    END IF;  \n" +
                "    IF (pPackagingIDs IS NOT NULL AND pPackagingIDs != '') THEN  \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.packagingID in (', pPackagingIDs, ' )');  \n" +
                "    END IF;  \n" +
                "    IF (pPackageIDs IS NOT NULL AND pPackageIDs != '') THEN  \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.partPackageID in (', pPackageIDs, ' )');  \n" +
                "    END IF;  \n" +
                "    IF (pPartStatusIDs IS NOT NULL AND pPartStatusIDs != '') THEN  \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.partStatus in (', pPartStatusIDs, ' )');  \n" +
                "    END IF;  \n" +
                "    IF (pMountingTypeIDs IS NOT NULL AND pMountingTypeIDs != '') THEN  \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.mountingTypeID in (', pMountingTypeIDs, ' )');  \n" +
                "    END IF;  \n" +
                "    IF (pExternalMountingTypeValues IS NOT NULL AND pExternalMountingTypeValues != '') THEN  \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.mountingTypeText in (', pExternalMountingTypeValues, ' )');  \n" +
                "    END IF;  \n" +
                "    IF (pFunctionalTypeIDs IS NOT NULL AND pFunctionalTypeIDs != '') THEN  \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.functionalCategoryID in (', pFunctionalTypeIDs, ' )');  \n" +
                "    END IF;  \n" +
                "    IF (pExternalFunctionalTypeValues IS NOT NULL AND pExternalFunctionalTypeValues != '') THEN  \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.functionalCategoryText in (', pExternalFunctionalTypeValues, ' )');  \n" +
                "    END IF;  \n" +
                "    IF (pMultiplePartNumbers IS NOT NULL AND pMultiplePartNumbers != '') THEN  \n" +
                "		IF pIsMFG = TRUE THEN  \n" +
                "			SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND (co.mfgPN in (', pMultiplePartNumbers, ' )  \n" +
                "																OR exists (select 1 from component_otherpn cp  \n" +
                "																	where cp.isdeleted = false and cp.deletedat is null and cp.refComponentID = co.id and cp.name in (', pMultiplePartNumbers, '))  \n" +
                "																)');  \n" +
                "		ELSE  \n" +
                "			SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND (co.mfgPN in (', pMultiplePartNumbers, ' )  \n" +
                "																OR exists (select 1 from component cc where cc.id = co.refSupplierMfgpnComponentID  \n" +
                "																and cc.isdeleted = false and cc.deletedat is null and cc.refSupplierMfgpnComponentID is null  \n" +
                "                                                                and cc.mfgpn in (', pMultiplePartNumbers, '))  \n" +
                "                                                                OR exists (select 1 from component_otherpn cp  \n" +
                "																	where cp.isdeleted = false and cp.deletedat is null and cp.refComponentID = co.id and cp.name in (', pMultiplePartNumbers, '))  \n" +
                "                                                                )');  \n" +
                "        END IF;  \n" +
                "    END IF;  \n" +
                "    IF (pPartTypeIDs IS NOT NULL AND pPartTypeIDs != '') THEN  \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.partType in (', pPartTypeIDs, ' )');  \n" +
                "    END IF;  \n" +
                "    IF (pCertificateStandardsIds IS NOT NULL AND pCertificateStandardsIds != '' AND  \n" +
                "		pStandardsClassIds IS NOT NULL AND pStandardsClassIds != '') THEN  \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND exists (select 1 from component_standard_details csd where csd.componentID = co.id and csd.isDeleted = 0 and csd.certificateStandardID in (', pCertificateStandardsIds, ' ) and csd.ClassID in (', pStandardsClassIds, ' )) ');  \n" +
                "	ELSEIF (pCertificateStandardsIds IS NOT NULL AND pCertificateStandardsIds != '') THEN  \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND exists (select 1 from component_standard_details csd where csd.componentID = co.id and csd.isDeleted = 0 and csd.certificateStandardID in (', pCertificateStandardsIds, ' )) ');  \n" +
                "	ELSEIF (pStandardsClassIds IS NOT NULL AND pStandardsClassIds != '') THEN  \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND exists (select 1 from component_standard_details csd where csd.componentID = co.id and csd.isDeleted = 0 and csd.ClassID in (', pStandardsClassIds, ' )) ');  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF (pAssemblyIds IS NOT NULL AND pAssemblyIds != '') THEN  \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND (exists (select 1 from rfq_lineitems_alternatepart rla where rla.mfgPNID = co.id and rla.mfgPNID is not null and rla.isdeleted = 0 and rla.partID in (', pAssemblyIds, '))  \n" +
                "															or exists (select 1 from rfq_lineitems_alternatepart rla where rla.distMfgPNID = co.id and rla.distMfgPNID is not null and rla.isdeleted = 0 and rla.partID in (', pAssemblyIds, '))  \n" +
                "															or exists (select 1 from rfq_lineitems rl where rl.custPNID = co.id and rl.custPNID is not null and rl.isdeleted = 0 and rl.partID in (', pAssemblyIds, '))) ');  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF (pAssemblyTypeIds IS NOT NULL AND pAssemblyTypeIds != '') THEN  \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.assemblyType in (', pAssemblyTypeIds, ' )');  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF (pRohsIds IS NOT NULL AND pRohsIds != '') THEN  \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.RoHSStatusID in (', pRohsIds, ' )');  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF (pExternalRoHSStatusListValues IS NOT NULL AND pExternalRoHSStatusListValues != '') THEN  \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.rohsText in (', pExternalRoHSStatusListValues, ' )');  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF pIsReversal = TRUE THEN  \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.isReversal = true');  \n" +
                "    END IF;  \n" +
                "    IF pIsCPN = TRUE THEN  \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.isCPN = true');  \n" +
                "    END IF;  \n" +
                "    IF pIsCustom = TRUE THEN  \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.isCustom = true');  \n" +
                "    END IF;  \n" +
                "    IF pIsBOMActivityStarted = TRUE THEN  \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.isActivityStart = true');  \n" +
                "    END IF;  \n" +
                "    IF pIsOperatingTemperatureBlank = TRUE THEN  \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.operatingTemp is not null and co.operatingTemp != \"\" and (co.minOperatingTemp is null or co.maxOperatingTemp is null) ');  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF pObsoleteDate IS NOT NULL THEN  \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, \" AND co.obsoleteDate >= '\",pObsoleteDate,\"'\");  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF pIsProductionPNEmpty = TRUE THEN  \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.productionPN is null ');  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF(pFromCreatedOnDate IS NOT NULL AND pToCreatedOnDate IS NOT NULL) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND CAST(createdAtFilter AS DATE) >= \"',pFromCreatedOnDate,'\" AND CAST(createdAtFilter AS DATE) <= \"',pToCreatedOnDate,'\" ');  \n" +
                "    ELSEIF(pFromCreatedOnDate IS NOT NULL AND pToCreatedOnDate IS NULL) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND CAST(createdAtFilter AS DATE) >= \"',pFromCreatedOnDate,'\" ');  \n" +
                "    ELSEIF(pToCreatedOnDate IS NOT NULL AND pFromCreatedOnDate IS NULL) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND CAST(createdAtFilter AS DATE) <= \"',pToCreatedOnDate,'\" ');  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF pIsIdenticalMfrPN = TRUE THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND identicalPNCount > 1 ');  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF (pOperationalAttributeIds IS NOT NULL AND pOperationalAttributeIds != '') THEN  \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND exists (select 1 from component_dynamic_attribute_mapping_part cd  \n" +
                "													   where cd.mfgPNID=co.id and cd.isdeleted=false  \n" +
                "														 and cd.deletedat is null  \n" +
                "                                                         and cd.attributeID in (',pOperationalAttributeIds,'))');  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF (pDisapprovedSupplierIds IS NOT NULL AND pDisapprovedSupplierIds != '') THEN  \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND exists (select 1 from component_approved_supplier_mst cd  \n" +
                "													   where cd.partID = co.id and cd.isdeleted=false  \n" +
                "														 and cd.deletedat is null  \n" +
                "                                                         and cd.supplierID in (',pDisapprovedSupplierIds,'))');  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF (pAcceptableShippingCountryIds IS NOT NULL AND pAcceptableShippingCountryIds != '') THEN  \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND exists (select 1 from component_acceptable_shipping_countries ca  \n" +
                "														  where ca.isdeleted = false  \n" +
                "															and ca.deletedat is null  \n" +
                "															and ca.refComponentID = co.id  \n" +
                "															and ca.countryID in (',pAcceptableShippingCountryIds,'))');  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF (pIsRestrictUSEwithpermission = TRUE OR pIsRestrictPackagingUseWithpermission = true OR pIsRestrictUsePermanently = true OR pIsRestrictPackagingUsePermanently = true)  \n" +
                "    THEN  \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND (');  \n" +
                "        set @restricStatement = '';  \n" +
                "		IF pIsRestrictUSEwithpermission = TRUE THEN  \n" +
                "			SET @restricStatement =  ' co.restrictUSEwithpermission = true ';  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF pIsRestrictPackagingUseWithpermission = TRUE THEN  \n" +
                "			SET @restricStatement = CONCAT(@restricStatement,(CASE WHEN @restricStatement != '' THEN ' or ' ELSE '' END), ' co.restrictPackagingUseWithpermission = true ');  \n" +
                "		END IF;  \n" +
                "		IF pIsRestrictUsePermanently = TRUE THEN  \n" +
                "			SET @restricStatement = CONCAT(@restricStatement,(CASE WHEN @restricStatement != '' THEN ' or ' ELSE '' END),  ' co.restrictUsePermanently = true ');  \n" +
                "		END IF;  \n" +
                "		IF pIsRestrictPackagingUsePermanently = TRUE THEN  \n" +
                "			SET @restricStatement = CONCAT(@restricStatement,(CASE WHEN @restricStatement != '' THEN ' or ' ELSE '' END), ' co.restrictPackagingUsePermanently = true ');  \n" +
                "		END IF;  \n" +
                "        SET @SQLStatement1 = CONCAT(@SQLStatement1, @restricStatement, ')');  \n" +
                "    END IF;  \n" +
                "	IF (pAttributesSearchHeader IS NOT NULL AND pAttributesSearchHeader != '') THEN  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND (co.functionalCategoryText like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR pt.partTypeName like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR exists (SELECT 1 FROM component_fields_genericalias_mst WHERE refTableName =''rfq_parttypemst'' AND refId=pt.id  \n" +
                "																		AND isdeleted = 0  \n" +
                "            and alias like ''%', pAttributesSearchHeader, '%'') ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.mountingTypeText like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR mt.name like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR exists (SELECT 1 FROM component_fields_genericalias_mst WHERE refTableName =''rfq_mountingtypemst'' AND refId=mt.id  \n" +
                "																		AND isdeleted = 0  \n" +
                "            and alias like ''%', pAttributesSearchHeader, '%'') ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.operatingTemp like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.minOperatingTemp like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.maxOperatingTemp like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.temperatureCoefficient like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.temperatureCoefficientValue like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.temperatureCoefficientUnit like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.connectorTypeText like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR rct.name like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.noOfPosition like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.noOfRows like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.pitch like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.pitchMating like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.sizeDimension like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.length like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.width like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.heightText like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.height like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.tolerance like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.voltage like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.value like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.partPackage like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.powerRating like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.weight like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.feature like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.color like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.PIDCode like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.mfgPNDescription like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.detailDescription like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.specialNote like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.serialNumber like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR mf.mfgCode like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR mf.mfgName like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR gc.name like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR ro.name like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR pc.categoryName like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR u.unitName like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR pck.name like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR exists (select 1 from component_otherpn cp  \n" +
                "																	where cp.isdeleted = false and cp.deletedat is null and cp.refComponentID = co.id and cp.name like (''%', pAttributesSearchHeader, '%'' )) ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.mfgPN like ''%', pAttributesSearchHeader, '%'' ');  \n" +
                "          IF pIsMFG = FALSE THEN  \n" +
                "				SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR exists (select 1 from component cc  \n" +
                "																			where cc.id = co.refSupplierMfgpnComponentID  \n" +
                "                                                                            and cc.isdeleted = false and cc.deletedat is null and cc.refSupplierMfgpnComponentID is null  \n" +
                "                                                                            and cc.mfgPN like ''%', pAttributesSearchHeader, '%'' )  \n" +
                "														      OR exists (select 1 from component_otherpn cp where cp.isdeleted = false and cp.deletedat is null and cp.refComponentID = co.refSupplierMfgpnComponentID and cp.name like (''%', pAttributesSearchHeader, '%'' ))  \n" +
                "																		');  \n" +
                "          END IF;  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' )');  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF (pAttributesSearch IS NOT NULL AND pAttributesSearch != '') THEN  \n" +
                "		SET attributeSearchString = pAttributesSearch;  \n" +
                "       do_this:  \n" +
                "	  LOOP  \n" +
                "		SET attributeSearchLength = CHAR_LENGTH(attributeSearchString);  \n" +
                "		SET attributeSearchChip = SUBSTRING_INDEX(attributeSearchString, ',', 1);  \n" +
                "		SET attributeSearchSubLength = CHAR_LENGTH(attributeSearchChip);  \n" +
                "		SET attributeSearchString = MID(attributeSearchString, (attributeSearchSubLength+2), attributeSearchLength);  \n" +
                "  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND (co.functionalCategoryText REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR pt.partTypeName REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR exists (SELECT 1 FROM component_fields_genericalias_mst WHERE refTableName =''rfq_parttypemst'' AND refId=pt.id  \n" +
                "																		AND isdeleted = 0  \n" +
                "            and alias REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'') ');  \n" +
                "  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.mountingTypeText REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR mt.name REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR exists (SELECT 1 FROM component_fields_genericalias_mst WHERE refTableName =''rfq_mountingtypemst'' AND refId=mt.id  \n" +
                "																		AND  isdeleted = 0  \n" +
                "            and alias REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'') ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.operatingTemp REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR trim(co.minOperatingTemp)+0 REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR trim(co.maxOperatingTemp)+0 REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.temperatureCoefficient REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR trim(co.temperatureCoefficientValue)+0 REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.temperatureCoefficientUnit REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.connectorTypeText REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR rct.name REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR trim(co.noOfPosition)+0 REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR trim(co.noOfRows)+0 REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.pitch REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.pitchMating REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.sizeDimension REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR trim(co.length)+0 REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR trim(co.width)+0 REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.heightText REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR trim(co.height)+0 REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.tolerance REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.voltage REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.value REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.partPackage REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.powerRating REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.weight REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.feature REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.color REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.PIDCode REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.mfgPNDescription REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.detailDescription REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.specialNote REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.serialNumber REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR mf.mfgCode REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR mf.mfgName REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR gc.name REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR ro.name REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR pc.categoryName REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR u.unitName REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR pck.name REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ');  \n" +
                "          SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR exists (select 1 from component_otherpn cp  \n" +
                "																	where cp.isdeleted = false and cp.deletedat is null and cp.refComponentID = co.id and cp.name REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' ) ');  \n" +
                "		  SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR co.mfgPN REGEXP ''(^|[[:space:]])',attributeSearchChip,'([[:space:]]|$)'' )');  \n" +
                "          /*IF pIsMFG = FALSE THEN  \n" +
                "				SET @SQLStatement1 = CONCAT(@SQLStatement1, ' OR exists (select 1 from component cc where cc.id = co.refSupplierMfgpnComponentID and cc.mfgPN like ''%', attributeSearchChip, '%'' )');  \n" +
                "          END IF;  */  \n" +
                "		IF attributeSearchString = NULL OR attributeSearchString = \"\" THEN  \n" +
                "		  LEAVE do_this;  \n" +
                "		END IF;  \n" +
                "	  END LOOP do_this;  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF (pPackagingAlias IS NOT NULL AND pPackagingAlias != '') THEN  \n" +
                "		IF (pPackagingAlias = '1') THEN  \n" +
                "			SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.packaginggroupID is not null ');  \n" +
                "		ELSE  \n" +
                "			SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.packaginggroupID is null ');  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "		IF (pAlternatePart IS NOT NULL AND pAlternatePart != '') THEN  \n" +
                "			IF (pAlternatePart = '1') THEN  \n" +
                "				SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND exists ');  \n" +
                "			ELSE  \n" +
                "				SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND not exists ');  \n" +
                "			END IF;  \n" +
                "			SET @SQLStatement1 = CONCAT(@SQLStatement1, ' (select 1 from component_alternatepn ca where ca.refComponentID = co.id and ca.type = 1 and ca.isDeleted = 0) ');  \n" +
                "		END IF;  \n" +
                "		IF (pRoHSAlternatePart IS NOT NULL AND pRoHSAlternatePart != '') THEN  \n" +
                "			IF (pRoHSAlternatePart = '1') THEN  \n" +
                "				SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND exists ');  \n" +
                "			ELSE  \n" +
                "				SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND not exists ');  \n" +
                "			END IF;  \n" +
                "			SET @SQLStatement1 = CONCAT(@SQLStatement1, ' (select 1 from component_alternatepn ca where ca.refComponentID = co.id and ca.type = 6 and ca.isDeleted = 0) ');  \n" +
                "		END IF;  \n" +
                "  \n" +
                "        IF (pPartUsedInAssembly IS NOT NULL AND pPartUsedInAssembly != '') THEN  \n" +
                "			SET vPartUsedInAssemblyExists = \" \";  \n" +
                "            SET vPartUsedInAssemblyAndOR = \" \";  \n" +
                "			IF (pPartUsedInAssembly = '1') THEN  \n" +
                "				SET vPartUsedInAssemblyExists = \" \";  \n" +
                "				SET vPartUsedInAssemblyAndOR = \" OR \";  \n" +
                "			ELSEIF (pPartUsedInAssembly = '2') THEN  \n" +
                "				SET vPartUsedInAssemblyExists = \" NOT \";  \n" +
                "				SET vPartUsedInAssemblyAndOR = \" AND \";  \n" +
                "            END IF;  \n" +
                "				SET @SQLStatement1 = CONCAT(@SQLStatement1, 'AND co.category = 2  \n" +
                "															AND ( ',vPartUsedInAssemblyExists,' exists (select 1 from rfq_lineitems_alternatepart rla where rla.mfgPNID = co.id and rla.mfgPNID is not null and rla.isdeleted = 0 and exists (select 1 from component c where c.id = rla.partid and c.partStatus = 1))  \n" +
                "																',vPartUsedInAssemblyAndOR,' ',vPartUsedInAssemblyExists,' exists (select 1 from rfq_lineitems_alternatepart rla where rla.distMfgPNID = co.id and rla.distMfgPNID is not null and rla.isdeleted = 0 and exists (select 1 from component c where c.id = rla.partid and c.partStatus = 1))  \n" +
                "																',vPartUsedInAssemblyAndOR,' ',vPartUsedInAssemblyExists,' exists (select 1 from rfq_lineitems rl where rl.custPNID = co.id and rl.custPNID is not null and rl.isdeleted = 0 and exists (select 1 from component c where c.id = rl.partid and c.partStatus = 1))) ');  \n" +
                "  \n" +
                "		END IF;  \n" +
                "  \n" +
                "	IF (pStockQuantity IS NOT NULL AND pStockQuantity != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause,\" and c.partStock >= \", pStockQuantity);  \n" +
                "	END IF;  \n" +
                "   IF pIsExportControl = 1 THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause,' ',' and c.isExportControl = \"Yes\" ');  \n" +
                "   END IF;  \n" +
                "	IF pIsExcludeIncorrectPart = TRUE THEN  \n" +
                "		SET @SQLStatement1 = CONCAT(@SQLStatement1, ' AND co.isGoodPart in (1,3) ');  \n" +
                "	END IF;  \n" +
                "    DROP temporary TABLE IF EXISTS tempComponentListData;  \n" +
                "  \n" +
                "    SET @SQLStatement2 = CONCAT(\"create temporary table tempComponentListData  \n" +
                "    select count(1) over(partition by c.mfgType) as totalCount,c.*,  \n" +
                "        fun_ApplyCommonDateTimeFormatByParaValue(c.createdAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') createdAtValue,  \n" +
                " 		fun_ApplyCommonDateTimeFormatByParaValue(c.UpdatedAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') updatedAtValue,  \n" +
                "        fun_ApplyCommonDateTimeFormatByParaValue(c.updatedAtApi,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') updatedAtApiValue  \n" +
                "									from ( \", @SQLStatement1,\" ) c  \n" +
                "		where \", pWhereClause , \" \", pOrderBy , rowNumWhere);  \n" +
                "    /*main query create temp table*/  \n" +
                "	PREPARE query1 FROM @SQLStatement2;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  /* to get total count of rows */  \n" +
                "	-- SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) from ( \",@SQLStatement1,\" ) c where \", pWhereClause);  \n" +
                "    SET @SQLStatement2 = CONCAT(\" SELECT totalCount from tempComponentListData limit 1\");  \n" +
                "	PREPARE query1 FROM @SQLStatement2;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "	/*PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  */  \n" +
                "	SET @SQLStatement2 = CONCAT(\" select * from tempComponentListData\");  \n" +
                "    /*main query create temp table*/  \n" +
                "	PREPARE query1 FROM @SQLStatement2;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "  \n" +
                "	IF pIsRefreshMasterFilters = TRUE THEN  \n" +
                "		SET @SQLStatement2 = CONCAT(\" SELECT mfgCodeID as mfgcodeID, mfgCode, manufacturerName as mfgName, mfgDisplayOrder,  \n" +
                "											partStatus,partStatusValue, parStatusDisplayOrder,  \n" +
                "											packagingID,packagingName, packagingDisplayOrder,  \n" +
                "											functionalCategoryID,functionalCategoryName, functionalCategoryDisplayOrder,  \n" +
                "											mountingTypeID, mountingTypeName, mountingTypeDisplayOrder,  \n" +
                "											partType,categoryName,  \n" +
                "											functionalCategoryText,  \n" +
                "											mountingTypeText,  \n" +
                "											  RoHSStatusID, rohsComplientConvertedValue, rohsDisplayOrder,  \n" +
                "											  rohsText,  \n" +
                "                                            AliasMFGCodeID,  \n" +
                "                                            AliasMFGCode,  \n" +
                "                                            AliasMFGName,  \n" +
                "                                            AliasMFGDisplayOrder,  \n" +
                "                                            packageCaseTypeValue,  \n" +
                "                                            partPackageID  \n" +
                "										from ( \",@SQLStatement1,\" ) c where \", pWhereClause,\"  \n" +
                "                                        group by mfgCodeID, mfgCode, manufacturerName , mfgDisplayOrder,  \n" +
                "											partStatus,partStatusValue, parStatusDisplayOrder,  \n" +
                "											packagingID,packagingName, packagingDisplayOrder,  \n" +
                "											functionalCategoryID,functionalCategoryName, functionalCategoryDisplayOrder,  \n" +
                "											mountingTypeID, mountingTypeName, mountingTypeDisplayOrder,  \n" +
                "											partType,categoryName,  \n" +
                "											functionalCategoryText,  \n" +
                "											mountingTypeText,  \n" +
                "											  RoHSStatusID, rohsComplientConvertedValue, rohsDisplayOrder,  \n" +
                "											  rohsText,  \n" +
                "                                            AliasMFGCodeID,  \n" +
                "                                            AliasMFGCode,  \n" +
                "                                            AliasMFGName,  \n" +
                "                                            AliasMFGDisplayOrder,  \n" +
                "                                            packageCaseTypeValue,  \n" +
                "                                            partPackageID\");  \n" +
                "		 PREPARE query3 FROM @SQLStatement2;  \n" +
                "		EXECUTE query3;  \n" +
                "		DEALLOCATE PREPARE query3;  \n" +
                "  \n" +
                "        /*SET @SQLStatement2 = CONCAT(\" with cte as ( SELECT id from ( \",@SQLStatement1,\" ) c where \", pWhereClause,\" )  \n" +
                "									select * from  \n" +
                "										(select case when stdc.classID is not null then  \n" +
                "													concat(cs.certificateStandardID,':',stdc.classID)  \n" +
                "													else cs.certificateStandardID end certificateStandardID,  \n" +
                "												case when stdc.classID is not null then  \n" +
                "													concat(cs.fullName,' ',stdc.classname)  \n" +
                "													else cs.fullName end fullName,  \n" +
                "												cs.displayOrder  \n" +
                "										  from certificate_standards cs  \n" +
                "										  join component_standard_details csd on csd.certificateStandardID = cs.certificateStandardID  \n" +
                "										  left join standard_class stdc on csd.ClassID = stdc.classID  \n" +
                "										where csd.isDeleted = 0 and csd.deletedAt is null and csd.componentID in (select id from cte)  \n" +
                "										) a group by certificateStandardID, fullName, displayOrder  \n" +
                "										order by displayOrder,fullName\");  \n" +
                "		PREPARE query3 FROM @SQLStatement2;  \n" +
                "		EXECUTE query3;  \n" +
                "		DEALLOCATE PREPARE query3;  */  \n" +
                "  \n" +
                "        /*SET @SQLStatement2 = CONCAT(\" select distinct cm.countryID, cm.countryName  \n" +
                "					  from component_acceptable_shipping_countries casc  \n" +
                "					  join countrymst cm ON cm.countryid = casc.countryid  \n" +
                "					 where casc.isdeleted = false  \n" +
                "					   and casc.deletedat is null  \n" +
                "					   and exists (select 1 from ( \",@SQLStatement1,\" ) c  \n" +
                "									where c.id = casc.refComponentID and \", pWhereClause,\" )  \n" +
                "                                    order by cm.countryName\");  \n" +
                "		PREPARE query3 FROM @SQLStatement2;  \n" +
                "		EXECUTE query3;  \n" +
                "		DEALLOCATE PREPARE query3;  */  \n" +
                "  \n" +
                "         /*SET @SQLStatement2 = CONCAT(\" select distinct cda.id, cda.attributeName  \n" +
                "					  from component_dynamic_attribute_mapping_part cdam  \n" +
                "					  join component_dynamic_attribute cda ON cda.id = cdam.attributeID  \n" +
                "					 where cdam.isdeleted = false  \n" +
                "					   and cdam.deletedat is null  \n" +
                "					   and cda.isdeleted = false  \n" +
                "					   and cda.deletedat is null  \n" +
                "					   and exists (select 1 from ( \",@SQLStatement1,\" ) c  \n" +
                "                                     where c.id = cdam.mfgPNID and \", pWhereClause,\" )  \n" +
                "                                     order by cda.attributeName\");  \n" +
                "		PREPARE query3 FROM @SQLStatement2;  \n" +
                "		EXECUTE query3;  \n" +
                "		DEALLOCATE PREPARE query3;  */  \n" +
                "    END IF;  \n" +
                "  \n" +
                "		IF (pIsSearchFromHeader = TRUE) THEN  \n" +
                "			/*Fetch Functional Type and Mounting Type wise grouping*/  \n" +
                "			SET @SQLStatement2 = CONCAT(\" select concat(functionalCategoryName,' - ',mountingTypeName) groupName,  \n" +
                "											null groupNameText,  \n" +
                "											functionalCategoryID, mountingTypeID,  \n" +
                "											count(1) recCount  \n" +
                "											from ( \",@SQLStatement1,\" ) c where \", pWhereClause,  \n" +
                "										' group by functionalCategoryName,mountingTypeName,  \n" +
                "													functionalCategoryID, mountingTypeID  \n" +
                "											order by groupName, groupNameText, recCount desc');  \n" +
                "  \n" +
                "            PREPARE query3 FROM @SQLStatement2;  \n" +
                "			EXECUTE query3;  \n" +
                "			DEALLOCATE PREPARE query3;  \n" +
                "        END IF;  \n" +
                "END;  \n" +

                "ALTER TABLE `component_alternatepn_validations` DROP COLUMN `nullValueIsValid`;  \n" +
                /* **************************** Add Script Version ->  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1246,'1.00','V1',' User Story 39307: [Main Branch] Improvement points for Alias & Alternate parts changes on 07-12-2021 - SHUBHAM '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1246:
            allDbChangesArray.push(
                /* **************************** New Script -> 17-12-2021  *********************************** */
                "DROP PROCEDURE IF EXISTS Sproc_RetrieveCustomerPackingSlipDetailPerLine;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveCustomerPackingSlipDetailPerLine`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pfilterStatus VARCHAR(1000),  \n" +
                "	IN pmfgCodelist VARCHAR(16000),  \n" +
                "	IN pmfgPartID  VARCHAR(5000) ,  \n" +
                "	IN ppsSearchType VARCHAR(5),  \n" +
                "	IN padvanceSearchPoSoPsInv VARCHAR(100),  \n" +
                "	IN pstatusIds VARCHAR(50),  \n" +
                "	IN pfromDate DATE,  \n" +
                "	IN ptoDate DATE  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;  \n" +
                "	DECLARE vTimeZone VARCHAR(50);  \n" +
                "	DECLARE vDateTimeDisplayFormat VARCHAR(100);  \n" +
                "	SELECT fun_getDateTimeFormat() INTO vDateTimeDisplayFormat;  \n" +
                "	SELECT fun_getTimeZone() INTO vTimeZone;  \n" +
                "  \n" +
                "	SET @temp_Sproc_RetrieveCustomerPackingSlipDetails = CONCAT(\"  \n" +
                "		SELECT cd.id,  \n" +
                "				cd.packingSlipNumber,  \n" +
                "		       cd.packingslipDate,  \n" +
                "		       cd.poNumber,  \n" +
                "		       cd.soNumber,  \n" +
                "		       cd.soDate,  \n" +
                "		       cd.poDate,  \n" +
                "               cd.poRevision,  \n" +
                "		       ss.releaseNumber,  \n" +
                "		       ss.qty as releaseLineQty,  \n" +
                "		       cd.customerID,  \n" +
                "			fun_getMfgCodeAndNameByID(cd.customerID) customerName,  \n" +
                "			cd.systemID,  \n" +
                "			fun_getFOBById(cd.freeOnBoardId) freeOnBoard,  \n" +
                "			cd.packingslipcomment,  \n" +
                "			cd.refCustInvoiceID,  \n" +
                "			cpd.internalComment,  \n" +
                "			cd.headerComment,  \n" +
                "			fun_getGenericCategoryCodeNameByID(cd.shippingmethodid)  shippingMethod,  \n" +
                "			cd.subStatus,  \n" +
                "			cd.sorevision,  \n" +
                "            cpd.poReleaseNumber,  \n" +
                "			cpd.refBlanketPONumber,  \n" +
                "            cpd.partId,  \n" +
                "            fun_getRoHSNameByPartID(cpd.partId) rohsName,  \n" +
                "            `cpd`.assyDescription,  \n" +
                "            fun_getRoHSIconByPartID(cpd.partId) rohsIcon,  \n" +
                "            c.mfgPN as assyName ,  \n" +
                "            c.PIDCode as assyId,  \n" +
                "            c.mfgCodeID,  \n" +
                "            cd.termsID,  \n" +
                "            cd.shippingmethodid,  \n" +
                "            invoice.invoiceNumber,  \n" +
                "            invoice.id as invoiceID,  \n" +
                "            invoice.subStatus as invoiceSubstatus,  \n" +
                "			fun_getMfgCodeAndNameByID(c.mfgCodeID) mfrName,  \n" +
                "			fun_getMfgCodeByID(cd.customerID) custCode,  \n" +
                "			case when som.isBlanketPO=1 then 'Yes' else 'No' end blanketPOText,  \n" +
                "			som.isBlanketPO,  \n" +
                "			ifnull(invoice.paymentStatus,'') paymentStatus,  \n" +
                "			case when cd.transType = 'P' then fun_getPaymentStatusByCustPackingSlipSubStatus(invoice.subStatus,cd.transType,invoice.paymentStatus,'VAL') end paymentStatusValue,  \n" +
                "			case when cd.transType = 'P' then fun_getPaymentStatusByCustPackingSlipSubStatus(invoice.subStatus,cd.transType,invoice.paymentStatus,'CODE') end paymentStatusCode,  \n" +
                "			fun_getCustomerInvoiceSubStatusName(cd.subStatus,'P') statusConvertedValue,  \n" +
                "            cd.refSalesOrderID,  \n" +
                "			cpd.custPOLineID,cpd.poQty,cpd.shipQty,fun_getUnitAbbrivationByID(c.uom) uom,  \n" +
                "			cpd.shippingNotes,cpd.id AS customerSlipDetID, cd.id AS customerslipId,  \n" +
                "			case when cd.packingSlipType=1 then 'MISC' else 'PO/SO' end as packingTypeText,cd.packingSlipType,  \n" +
                "			fun_getCustomerInvoiceSubStatusName(invoice.subStatus,'I') as packingSlipStatusValue,  \n" +
                "			fun_getAddressbyID(cd.intermediateShipmentId) markFor,fun_getAddressbyID(cd.shipToId) shipTo,fun_getAddressbyID(cd.billToId) billTo,  \n" +
                "			concat('(',emp.initialName,')',' ',ifnull(emp.firstName,''),' ',ifnull(emp.lastName,'')) salesCommissionTo,  \n" +
                "		(CASE WHEN cd.termsID IS NULL THEN '' ELSE fun_getGenericCategoryCodeNameByID(cd.termsID) END) AS termsDisplayText ,  \n" +
                "         CASE WHEN cpd.id IS NULL THEN  fun_getUserNameByID(cd.updatedBy) ELSE fun_getUserNameByID(cpd.updatedBy) END  updatedby,  \n" +
                "         CASE WHEN cpd.id IS NULL THEN  fun_getUserNameByID(cd.createdBy) ELSE fun_getUserNameByID(cpd.createdBy) END  createdby,  \n" +
                "         CASE WHEN cpd.id IS NULL THEN  fun_getRoleByID(cd.createByRoleId) ELSE fun_getRoleByID(cpd.createByRoleId) END  createdbyRole,  \n" +
                "         CASE WHEN cpd.id IS NULL THEN  fun_getRoleByID(cd.updateByRoleId) ELSE fun_getRoleByID(cpd.updateByRoleId) END  updatedbyRole,  \n" +
                "         CASE WHEN cpd.id IS NULL THEN fun_ApplyCommonDateTimeFormatByParaValue(cd.createdAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') ELSE fun_ApplyCommonDateTimeFormatByParaValue(cpd.createdAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') END  createdAt,  \n" +
                "         CASE WHEN cpd.id IS NULL THEN fun_ApplyCommonDateTimeFormatByParaValue(cd.UpdatedAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') ELSE fun_ApplyCommonDateTimeFormatByParaValue(cpd.UpdatedAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') END  updatedAt,  \n" +
                "		 cd.isLocked,  \n" +
                "         fun_getIntToText(cd.isLocked) isLockedConvertedValue,  \n" +
                "         fun_getUserNameByID(cd.lockedBy) lockedBy,  \n" +
                "         fun_getRoleByID(cd.lockedByRole) lockedByRole,  \n" +
                "         fun_ApplyCommonDateTimeFormatByParaValue(cd.lockedAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') lockedAt ,  \n" +
                "		if(cd.packingSlipType = 2, sod.price, cpd.unitPrice)  unitPrice,  \n" +
                "        if(cd.packingSlipType = 2, cpd.shipQty * sod.price,  cpd.extendedPrice) extendedPrice,  \n" +
                "        if(cd.packingSlipType = 2, sod.quoteNumber, cpd.quoteNumber)  quoteNumber,  \n" +
                "		if(cd.packingSlipType = 2, sod.quoteFrom, cpd.quoteFrom) quoteFrom,  \n" +
                "        if(cd.packingSlipType = 2, sod.refAssyQtyTurnTimeID, cpd.refAssyQtyTurnTimeID) refAssyQtyTurnTimeID,  \n" +
                "        if(cd.packingSlipType = 2, sod.assyQtyTurnTimeText, cpd.assyQtyTurnTimeText) assyQtyTurnTimeText,  \n" +
                "        if(cd.packingSlipType = 2, sod.refRFQGroupID, cpd.refRFQGroupID)  refRFQGroupID,  \n" +
                "		if(cd.packingSlipType = 2, sod.refRFQQtyTurnTimeID, cpd.refRFQQtyTurnTimeID) refRFQQtyTurnTimeID,  \n" +
                "		(case when if(cd.packingSlipType = 2, sod.quoteFrom, cpd.quoteFrom) = 1 then 'From RFQ' when if(cd.packingSlipType = 2, sod.quoteFrom, cpd.quoteFrom) = 3 then 'N/A' when if(cd.packingSlipType = 2, sod.quoteFrom, cpd.quoteFrom) = 2 then 'From Part Master' else '' end) quoteFromText,  \n" +
                "        (case when cd.subStatus = 5 and (invoice.subStatus = 4 or invoice.subStatus = 5) then concat(fun_getCustomerInvoiceSubStatusName(cd.subStatus,'P'),' - ',fun_getCustomerInvoiceSubStatusName(invoice.subStatus,'I'))  \n" +
                "						else '' end) materialStatus,  \n" +
                "        cd.revision,  \n" +
                "		(select group_concat(cert.fullName)from  certificate_standards cert  \n" +
                "			where cert.certificateStandardID in (select compstd.certificateStandardID  \n" +
                "			from component_standard_details compstd where compstd.componentID = c.id and compstd.isDeleted= 0) )componentStandardList,  \n" +
                "		c.isCustom,   c.custAssyPN customPartNumber  ,        cpd.remainingQty ,  \n" +
                "			som.rmaNumber,som.isRmaPO,  \n" +
                "			(CASE when som.isRmaPO = 1 then 'YES' when som.isRmaPO = 0 then 'NO' else 'NA' end) isRmaPOText,  \n" +
                "			(CASE when som.isRmaPO = 1 then 'Yes' when som.isRmaPO = 0 then 'No' else 'N/A' end) isRmaPOTextDisp  \n" +
                "		FROM customer_packingslip cd  \n" +
                "		JOIN customer_packingslip_det AS `cpd`  ON cd.id=cpd.refCustPackingSlipID AND cpd.isdeleted=0  \n" +
                "		LEFT JOIN component c ON c.id=cpd.partid  \n" +
                "		LEFT JOIN salesshippingmst ss ON ss.shippingID=cpd.shippingId  \n" +
                "		LEFT JOIN employees emp on emp.id=cd.salesCommissionTo and emp.isdeleted=0  \n" +
                "		LEFT JOIN customer_packingslip invoice on invoice.id=cd.refCustInvoiceID and invoice.isDeleted = 0 and invoice.transType ='I'  \n" +
                "        LEFT JOIN salesorderdet sod on sod.id = cpd.refSalesorderDetid and sod.isDeleted = 0  \n" +
                "        LEFT JOIN salesordermst som on som.id = cd.refSalesOrderID and som.isDeleted = 0  \n" +
                "		WHERE  cd.isDeleted=0 and cd.transType='P'  \n" +
                "	\");  \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "        SET pOrderBy = \"ORDER BY systemID DESC\";  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = '1=1' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  IF(pfilterStatus IS NOT NULL AND pfilterStatus!='')THEN  \n" +
                "    if (pfilterStatus = '0') then  \n" +
                "		SET pWhereClause=CONCAT(pWhereClause, ' and c.invoiceSubStatus is null');  \n" +
                "    else  \n" +
                "		SET pWhereClause=CONCAT(pWhereClause, ' and c.invoiceSubStatus in (', pfilterStatus ,')');  \n" +
                "    end if;  \n" +
                "  END IF;  \n" +
                "  IF(pstatusIds IS NOT NULL AND pstatusIds!='')THEN  \n" +
                "	SET @temp_Sproc_RetrieveCustomerPackingSlipDetails=CONCAT(@temp_Sproc_RetrieveCustomerPackingSlipDetails, ' and cd.subStatus in (',pstatusIds,')');  \n" +
                "  END IF;  \n" +
                "  IF(pmfgCodelist IS NOT NULL AND pmfgCodelist!='')THEN  \n" +
                "	SET @temp_Sproc_RetrieveCustomerPackingSlipDetails=CONCAT(@temp_Sproc_RetrieveCustomerPackingSlipDetails, ' and cd.customerID in (',pmfgCodelist,')');  \n" +
                "  END IF;  \n" +
                "  IF(pmfgPartID IS NOT NULL)THEN  \n" +
                "	SET @temp_Sproc_RetrieveCustomerPackingSlipDetails=CONCAT(@temp_Sproc_RetrieveCustomerPackingSlipDetails, ' and cpd.partId in ( ',pmfgPartID,')');  \n" +
                "  END IF;  \n" +
                "  IF(padvanceSearchPoSoPsInv IS NOT NULL AND padvanceSearchPoSoPsInv!='')THEN  \n" +
                "    IF(ppsSearchType='E')THEN  \n" +
                "      SET @temp_Sproc_RetrieveCustomerPackingSlipDetails=CONCAT(@temp_Sproc_RetrieveCustomerPackingSlipDetails, ' and (cd.poNumber=''',padvanceSearchPoSoPsInv,''' or cd.soNumber=''',padvanceSearchPoSoPsInv,''' or cd.packingSlipNumber=''',  \n" +
                "      padvanceSearchPoSoPsInv,''' or invoice.invoiceNumber=''',padvanceSearchPoSoPsInv,''' or som.rmaNumber=''',padvanceSearchPoSoPsInv,''')');  \n" +
                "   ELSE  \n" +
                "       SET @temp_Sproc_RetrieveCustomerPackingSlipDetails=CONCAT(@temp_Sproc_RetrieveCustomerPackingSlipDetails, ' and (cd.poNumber like''%',padvanceSearchPoSoPsInv,'%'' or cd.soNumber like ''%',  \n" +
                "       padvanceSearchPoSoPsInv,'%'' or cd.packingSlipNumber like ''%',padvanceSearchPoSoPsInv,'%'' or invoice.invoiceNumber like ''%',padvanceSearchPoSoPsInv,'%'' or som.rmaNumber like ''%',padvanceSearchPoSoPsInv,'%'')');  \n" +
                "  END IF;  \n" +
                "  END IF;  \n" +
                "  \n" +
                "  IF(pfromDate IS NOT NULL AND ptoDate IS NOT NULL)THEN  \n" +
                "	 SET @temp_Sproc_RetrieveCustomerPackingSlipDetails=CONCAT(@temp_Sproc_RetrieveCustomerPackingSlipDetails, ' and (cd.packingslipdate>=''',pfromDate,''' and cd.packingslipdate<=''',ptoDate,''')');  \n" +
                "  ELSEIF(pfromDate IS NOT NULL)THEN  \n" +
                "       SET @temp_Sproc_RetrieveCustomerPackingSlipDetails=CONCAT(@temp_Sproc_RetrieveCustomerPackingSlipDetails, ' and (cd.packingslipdate>=''',pfromDate,''')');  \n" +
                "  ELSEIF(ptoDate IS NOT NULL)THEN  \n" +
                "       SET @temp_Sproc_RetrieveCustomerPackingSlipDetails=CONCAT(@temp_Sproc_RetrieveCustomerPackingSlipDetails, ' and (cd.packingslipdate<=''',ptoDate,''')');  \n" +
                "  END IF;  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                " -- select   @temp_Sproc_RetrieveCustomerPackingSlipDetails ,pWhereClause ;  \n" +
                "  \n" +
                "	 /* to get total count of rows */  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_RetrieveCustomerPackingSlipDetails,\" ) c where 1=1 and \", pWhereClause);  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"select * from ( \", @temp_Sproc_RetrieveCustomerPackingSlipDetails,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "	PREPARE query1 FROM @SQLStatement2;  \n" +
                "	-- select @SQLStatement2;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 17-12-2021  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1247,'1.00','V1','Sproc_RetrieveCustomerPackingSlipDetailPerLine-Bug 39606: Blanket PO label not proper displayed  - Shweta '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1247:
            allDbChangesArray.push(
                /* **************************** New Script -> 22-12-2021  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetSalesOrderSummaryList` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetSalesOrderSummaryList`(  \n" +
                "	IN ppageIndex INT(11),  \n" +
                "	IN precordPerPage INT(11),  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pfilterStatus VARCHAR(100),  \n" +
                "	IN pcustomerIds VARCHAR(16000),  \n" +
                "	IN pshippingMethodId VARCHAR(16000),  \n" +
                "	IN ptermsIds VARCHAR(16000),  \n" +
                "	IN psearchposotext VARCHAR(1000),  \n" +
                "	IN psearchposotype VARCHAR(10),  \n" +
                "	IN pfromDate DATE,  \n" +
                "	IN ptoDate DATE,  \n" +
                "	IN psearchextPricetext VARCHAR(1000),  \n" +
                "	IN psearchextPricetype VARCHAR(10),  \n" +
                "	IN pfilterPOStatus VARCHAR(20)  ,  \n" +
                "    IN pIsRmaPO TINYINT,  \n" +
                "    IN pfromPODate DATE,  \n" +
                "	IN ptoPODate DATE  \n" +
                "	)  \n" +
                "BEGIN  \n" +
                "  \n" +
                "		DECLARE pOffset INT(11);  \n" +
                "		DECLARE rowNumWhere VARCHAR(255) ;  \n" +
                "		DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
                "		DECLARE v_TimeZone VARCHAR(50);  \n" +
                "  \n" +
                "		SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "		SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
                "  \n" +
                "		SET @tempQuery = CONCAT(\"SELECT s.id,  \n" +
                "       s.salesOrderNumber,  \n" +
                "       s.poNumber,  \n" +
                "       s.poDate,  \n" +
                "       s.customerID,  \n" +
                "       s.contactPersonID,  \n" +
                "       s.billingAddressID,  \n" +
                "       s.shippingAddressID,  \n" +
                "       s.shippingMethodID,  \n" +
                "       s.revision,  \n" +
                "       s.shippingComment,  \n" +
                "       s.termsID,  \n" +
                "       CASE WHEN s.status=0 THEN 'Draft' ELSE 'Published' END statusConvertedValue,  \n" +
                "       CASE WHEN s.blanketPOOption=1 THEN 'Use This Blanket PO# for All Releases' WHEN s.blanketPOOption=2 THEN 'Link Future PO(s) to This Blanket PO' WHEN s.blanketPOOption=3 THEN 'Use Blanket PO# and Release#' ELSE '' END blanketPOOptionText,  \n" +
                "       s.blanketPOOption,  \n" +
                "       s.status,  \n" +
                "       s.soDate,  \n" +
                "       s.revisionChangeNote,  \n" +
                "       s.salesCommissionTo,  \n" +
                "       s.intermediateShipmentId,  \n" +
                "       s.freeOnBoardId,  \n" +
                "       s.internalComment as internalCommentSo,  \n" +
                "       s.serialNumber,  \n" +
                "       s.carrierID,  \n" +
                "       s.carrierAccountNumber,  \n" +
                "       s.originalPODate,  \n" +
                "       s.isLegacyPO,  \n" +
                "       CASE WHEN s.isLegacyPO=0 THEN 'No' ELSE   'Yes' END legacyPOText,  \n" +
                "       s.isRmaPO,  \n" +
                "       CASE WHEN s.isRmaPO=0 THEN 'No' ELSE   'Yes' END rmaPOText,  \n" +
                "       s.poRevision,  \n" +
                "       CASE WHEN isBlanketPO=0 THEN 'No' ELSE 'Yes' END blanketPOText,  \n" +
                "       s.isBlanketPO,  \n" +
                "       CONCAT('(',mg.mfgCode,')',mg.mfgName) AS companyName,  \n" +
                "       mg.mfgName,  \n" +
                "       s.poRevisionDate,  \n" +
                "       fun_getEmployeeNameByEmpID(s.contactPersonID) fullName,  \n" +
                "       fun_getGenericCategoryCodeNameByID(s.termsID) termsDisplayText,  \n" +
                "       fun_getGenericCategoryCodeNameByID(s.carrierID) carrierName,  \n" +
                "       fun_getGenericCategoryCodeNameByID(s.shippingMethodID) genCategoryCode,  \n" +
                "       fb.name freeOnBoardName,  \n" +
                "       s.`rmaNumber` AS `rmaNumber`,  \n" +
                "	   s.`isDebitedByCustomer` AS `isDebitedByCustomer`,  \n" +
                "	   (CASE WHEN (s.`isDebitedByCustomer` = 1) THEN 'Yes' ELSE 'No' END) AS `debitedByCustText`,  \n" +
                "       s.`orgPONumber` AS `rmaOrgPONumber`,  \n" +
                "       s.`orgSalesOrderID` AS `orgSalesOrderID`,  \n" +
                "		s.`isReworkRequired` AS `isReworkRequired`,  \n" +
                "       (CASE  WHEN (s.`isReworkRequired` = 1) THEN 'Yes'  ELSE 'No'  END) AS `reworkReqText`,  \n" +
                "	   s.`reworkPONumber` AS `reworkPONumber`,  \n" +
                "      ifnull(sodCnt.totalLineCount,0)  totalSOLines,  \n" +
                "       ifnull(sodCnt.completedLineCount,0) totalCompletedSOLines,  \n" +
                "       (case when sodCnt.totalLineCount is null then 0 else  Round((sodCnt.completedLineCount * 100/sodCnt.totalLineCount),2) end)soCompletionPercentage,  \n" +
                "      (case when sodCnt.canceledLineCount = ifnull(sodCnt.totalLineCount,0) then 'Canceled'  \n" +
                "			when (sodCnt.canceledLineCount + sodCnt.completedLineCount) = ifnull(sodCnt.totalLineCount,0)  then 'Completed'  \n" +
                "            else 'In Progress' end) salesOrderDetStatusConvertedValues,  \n" +
                "      fun_getTotalSoPrice(s.id) soTotalPrice,  \n" +
                "      fun_getTotalInvoicePrice(s.id) soInvoicePrice,  \n" +
                "			fun_getUserNameByID(s.updatedBy) soModifiedBy,  \n" +
                "			fun_getUserNameByID(s.createdBy) soCreatedBy,  \n" +
                "			fun_getRoleByID(s.createByRoleId) createdbyRole,  \n" +
                "			fun_getRoleByID(s.updateByRoleId) updatedbyRole,  \n" +
                "                       fun_ApplyCommonDateTimeFormatByParaValue(s.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdDate,  \n" +
                "		       fun_ApplyCommonDateTimeFormatByParaValue(s.UpdatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') modifyDate  \n" +
                "		       FROM salesordermst s JOIN mfgcodemst mg ON mg.id=s.customerID AND mg.isdeleted=0  \n" +
                "			LEFT JOIN freeonboardmst fb ON fb.id=s.freeOnBoardId AND fb.isdeleted=0  \n" +
                "    LEFT JOIN ( select sod.refSalesOrderID as soId ,  \n" +
                "							sum((case when sod.salesOrderDetStatus = 2 then 1 else 0 end) ) completedLineCount,  \n" +
                "							count(1) totalLineCount,  \n" +
                "                            sum((case when sod.isCancle = 1 then 1 else 0 end)) canceledLineCount  \n" +
                "                            From salesorderdet sod where sod.isDeleted = 0  \n" +
                "                            Group By sod.refSalesOrderID ) sodCnt on sodCnt.soId = s.id  \n" +
                "			WHERE s.isdeleted=0  \n" +
                "			\");  \n" +
                "  \n" +
                "  \n" +
                "		IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY serialNumber DESC\") ;  \n" +
                "		ELSE  \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF (pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "			SET pWhereClause = '1=1' ;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "                IF(pfilterStatus IS NOT NULL AND pfilterStatus != '') THEN  \n" +
                "  \n" +
                "		      SET pWhereClause = CONCAT(pWhereClause, ' AND  FIND_IN_SET(salesOrderDetStatusConvertedValues,''', pfilterStatus ,''')');  \n" +
                "	        END IF;  \n" +
                "	        IF(pfilterPOStatus IS NOT NULL AND pfilterPOStatus != '') THEN  \n" +
                "  \n" +
                "		      SET pWhereClause = CONCAT(pWhereClause, ' AND  FIND_IN_SET(statusConvertedValue,''', pfilterPOStatus ,''')');  \n" +
                "	        END IF;  \n" +
                "	        IF(pcustomerIds IS NOT NULL AND pcustomerIds != '') THEN  \n" +
                "		      SET pWhereClause = CONCAT(pWhereClause, ' AND customerID in (',pcustomerIds,')');  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "			SET pWhereClause = '1=1' ;  \n" +
                "		END IF;  \n" +
                "                IF(pshippingMethodId IS NOT NULL AND pshippingMethodId != '') THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause, ' AND shippingMethodID in (',pshippingMethodId,')');  \n" +
                "		END IF;  \n" +
                "                IF(ptermsIds IS NOT NULL AND ptermsIds != '') THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause, ' AND termsID in (',ptermsIds,')');  \n" +
                "		END IF;  \n" +
                "		IF(psearchposotype IS NOT NULL AND psearchposotext IS NOT NULL)THEN  \n" +
                "			IF(psearchposotype='C')THEN  \n" +
                "				SET pWhereClause = CONCAT(pWhereClause, ' AND (salesOrderNumber  like ''%',psearchposotext,'%'' OR poNumber  like ''%',psearchposotext,'%'')');  \n" +
                "			ELSE  \n" +
                "				SET pWhereClause= CONCAT(pWhereClause,' and (salesOrderNumber  =''',psearchposotext,''' OR poNumber  =''',psearchposotext,''')');  \n" +
                "			END IF;  \n" +
                "		END IF;  \n" +
                "		IF(psearchextPricetype IS NOT NULL AND psearchextPricetext IS NOT NULL)THEN  \n" +
                "			IF(psearchextPricetype='C')THEN  \n" +
                "				SET pWhereClause = CONCAT(pWhereClause, ' AND (soTotalPrice  like ''%',psearchextPricetext,'%'')');  \n" +
                "			ELSE  \n" +
                "				SET pWhereClause= CONCAT(pWhereClause,' and (soTotalPrice  =''',psearchextPricetext,''')');  \n" +
                "			END IF;  \n" +
                "		END IF;  \n" +
                "		IF(pfromDate IS NOT NULL AND ptoDate IS NOT NULL)THEN  \n" +
                "			SET pWhereClause=CONCAT(pWhereClause, ' and (soDate>=''',pfromDate,''' and soDate<=''',ptoDate,''')');  \n" +
                "		ELSEIF(pfromDate IS NOT NULL)THEN  \n" +
                "			SET pWhereClause=CONCAT(pWhereClause, ' and (soDate>=''',pfromDate,''')');  \n" +
                "		ELSEIF(ptoDate IS NOT NULL)THEN  \n" +
                "			SET pWhereClause=CONCAT(pWhereClause, ' and (soDate<=''',ptoDate,''')');  \n" +
                "		END IF;  \n" +
                "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "			SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "		ELSE  \n" +
                "			SET rowNumWhere = '';  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		/* to get total count of rows */  \n" +
                "			SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@tempquery,\" ) c where 1=1 and \", pWhereClause);  \n" +
                "  \n" +
                "			PREPARE query2 FROM @SQLStatement2;  \n" +
                "  \n" +
                "			 EXECUTE query2;  \n" +
                "			 DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "			SET @SQLStatement1 = CONCAT(\"select * from ( \", @tempquery,\" ) c  \n" +
                "				where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "  \n" +
                "			PREPARE query1 FROM @SQLStatement1;  \n" +
                "  \n" +
                "			 EXECUTE query1;  \n" +
                "		       DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** New Script -> 22-12-2021  *********************************** */
                "DROP VIEW IF EXISTS `vu_salesorder_updatedlist_report` ;  \n" +
                "CREATE VIEW `vu_salesorder_updatedlist_report` AS  \n" +
                "    SELECT  \n" +
                "        `a`.`wosalesOrderDetail` AS `wosalesOrderDetail`,  \n" +
                "        `a`.`salesOrderId` AS `Sales Order ID`,  \n" +
                "        `a`.`salesOrderNumber` AS `Sales Order`,  \n" +
                "        `a`.`poNumber` AS `Po Number`,  \n" +
                "        `a`.`poDate` AS `Po Date`,  \n" +
                "        `a`.`customerID` AS `Customer ID`,  \n" +
                "        `a`.`contactPersonID` AS `ContactPerson ID`,  \n" +
                "        `a`.`shippingMethodID` AS `ShippingMethod ID`,  \n" +
                "        `a`.`status` AS `Sales Order Status`,  \n" +
                "        `a`.`revision` AS `Revision`,  \n" +
                "        `a`.`shippingComment` AS `Shipping Comment`,  \n" +
                "        `a`.`termsID` AS `Terms ID`,  \n" +
                "        `a`.`soDate` AS `So Date`,  \n" +
                "        `a`.`partID` AS `PartID`,  \n" +
                "        `a`.`PIDCode` AS `Assy ID`,  \n" +
                "        `a`.`mfgPN` AS `Assy Name`,  \n" +
                "        `a`.`rev` AS `Assy Revision`,  \n" +
                "        `a`.`nickName` AS `NickName`,  \n" +
                "        `a`.`liveVersion` AS `liveVersion`,  \n" +
                "        `a`.`mfgPNDescription` AS `AssyDescr`,  \n" +
                "        `a`.`isCustomPart` AS `isCustomPart`,  \n" +
                "        `a`.`qty` AS `PO Qty`,  \n" +
                "        `a`.`ShippedQty` AS `Shipped Qty`,  \n" +
                "        `a`.`shippingQty` AS `shippingQty`,  \n" +
                "        `a`.`companyName` AS `Company Name`,  \n" +
                "        `a`.`internalPO` AS `internalPO`,  \n" +
                "        `a`.`mfgCode` AS `mfgCode`,  \n" +
                "        `a`.`fullName` AS `Full Name`,  \n" +
                "        `a`.`gencCategoryCode` AS `GencCategory Code`,  \n" +
                "        `a`.`isCancle` AS `isCancle`,  \n" +
                "        `a`.`cancleReason` AS `cancleReason`,  \n" +
                "        `a`.`materialTentitiveDocDate` AS `materialTentitiveDocDate`,  \n" +
                "        `a`.`materialDueDate` AS `materialDueDate`,  \n" +
                "        `a`.`shippingDate` AS `shippingDate`,  \n" +
                "        `a`.`prcNumberofWeek` AS `prcNumberofWeek`,  \n" +
                "        `a`.`remark` AS `remark`,  \n" +
                "        `a`.`price` AS `price`,  \n" +
                "        `a`.`mrpQty` AS `mrpQty`,  \n" +
                "        `a`.`kitQty` AS `kitQty`,  \n" +
                "        `a`.`isHotJob` AS `isHotJob`,  \n" +
                "        `a`.`RoHSStatusID` AS `RoHSStatusID`,  \n" +
                "        `a`.`RoHSName` AS `RoHSName`,  \n" +
                "        `a`.`rohsIcon` AS `RohsIcon`,  \n" +
                "        `a`.`lineID` AS `lineID`,  \n" +
                "        `a`.`mfgcodeID` AS `mfgcodeID`,  \n" +
                "        `a`.`manufacturerName` AS `manufacturerName`,  \n" +
                "        (IFNULL(`a`.`qty`, 0) - IFNULL(`a`.`ShippedQty`, 0)) AS `Balanced Due Qty`,  \n" +
                "        (CASE  \n" +
                "            WHEN (`a`.`isCancle` = 1) THEN 'Canceled'  \n" +
                "            WHEN (`a`.`salesOrderDetStatus` = 2) THEN 'Completed'  \n" +
                "            ELSE 'In Progress'  \n" +
                "        END) AS `Status`,  \n" +
                "        `a`.`modifyDate` AS `modifyDate`,  \n" +
                "        `a`.`createdDate` AS `createdDate`,  \n" +
                "        `a`.`soModifiedBy` AS `soModifiedBy`,  \n" +
                "        `a`.`soCreatedBy` AS `soCreatedBy`,  \n" +
                "        `a`.`updatedbyRole` AS `updatedbyRole`,  \n" +
                "        `a`.`createdbyRole` AS `createdbyRole`,  \n" +
                "        `a`.`deletedbyRole` AS `deletedbyRole`,  \n" +
                "        `a`.`salesOrderDetailId` AS `SalesOrderDetailId`,  \n" +
                "        `a`.`releasedWorkorder` AS `releasedWorkorder`,  \n" +
                "        `a`.`releasedWorkorderNmberAndId` AS `releasedWorkorderNmberAndId`,  \n" +
                "        `a`.`kitnumber` AS `kitnumber`,  \n" +
                "        `a`.`isSkipKitCreation` AS `isSkipKitCreation`,  \n" +
                "        `a`.`partDescription` AS `partDescription`,  \n" +
                "        `a`.`custPOLineNumber` AS `custPOLineNumber`,  \n" +
                "        `a`.`freeOnBoardId` AS `Free On Board`,  \n" +
                "        `a`.`intermediateShipmentId` AS `intermediateShipmentId`,  \n" +
                "        `a`.`billingAddressID` AS `billingAddressID`,  \n" +
                "        `a`.`shippingAddressID` AS `shippingAddressID`,  \n" +
                "        `a`.`internalCommentSo` AS `internalCommentSo`,  \n" +
                "        `a`.`internalComment` AS `internalComment`,  \n" +
                "        `a`.`partCategory` AS `partCategory`,  \n" +
                "        `a`.`serialNumber` AS `serialNumber`,  \n" +
                "        `a`.`isBlanketPO` AS `isBlanketPO`,  \n" +
                "        `a`.`blanketPOText` AS `blanketPOText`,  \n" +
                "        `a`.`rmaNumber` AS `rmaNumber`,  \n" +
                "        `a`.`isDebitedByCustomer` AS `isDebitedByCustomer`,  \n" +
                "        `a`.`debitedByCustText` AS `debitedByCustText`,  \n" +
                "        `a`.`rmaOrgPONumber` AS `rmaOrgPONumber`,  \n" +
                "        `a`.`orgSalesOrderID` AS `orgSalesOrderID`,  \n" +
                "        `a`.`isReworkRequired` AS `isReworkRequired`,  \n" +
                "        `a`.`reworkReqText` AS `reworkReqText`,  \n" +
                "        `a`.`reworkPONumber` AS `reworkPONumber`,  \n" +
                "        `a`.`poRevision` AS `poRevision`,  \n" +
                "        `a`.`partType` AS `partType`,  \n" +
                "        (CASE  \n" +
                "            WHEN (`a`.`isCancle` = 1) THEN -(1)  \n" +
                "            ELSE `a`.`salesOrderDetStatus`  \n" +
                "        END) AS `salesOrderDetStatus`,  \n" +
                "        `a`.`completeStatusReason` AS `completeStatusReason`,  \n" +
                "        `a`.`frequency` AS `frequency`,  \n" +
                "        `a`.`refSODetID` AS `refSODetID`,  \n" +
                "        `a`.`refSOReleaseLineID` AS `refSOReleaseLineID`,  \n" +
                "        `a`.`originalPODate` AS `originalPODate`,  \n" +
                "        `a`.`isRmaPO` AS `isRmaPO`,  \n" +
                "        `a`.`rmaPOText` AS `rmaPOText`,  \n" +
                "        `a`.`isLegacyPO` AS `isLegacyPO`,  \n" +
                "        `a`.`legacyPOText` AS `legacyPOText`,  \n" +
                "        `a`.`originalPOQty` AS `originalPOQty`,  \n" +
                "        `a`.`frequencyType` AS `frequencyType`,  \n" +
                "        `a`.`assignQty` AS `assignQty`,  \n" +
                "        `a`.`poRevisionDate` AS `poRevisionDate`,  \n" +
                "        `a`.`releaseLevelComment` AS `releaseLevelComment`,  \n" +
                "        `a`.`custOrgPOLineNumber` AS `custOrgPOLineNumber`,  \n" +
                "        `a`.`blanketPOOption` AS `blanketPOOption`,  \n" +
                "        `a`.`blanketPOOptionText` AS `blanketPOOptionText`  \n" +
                "    FROM  \n" +
                "        (SELECT  \n" +
                "            `sm`.`id` AS `salesOrderId`,  \n" +
                "                `sm`.`salesOrderNumber` AS `salesOrderNumber`,  \n" +
                "                `sm`.`poNumber` AS `poNumber`,  \n" +
                "                `sm`.`poDate` AS `poDate`,  \n" +
                "                `sm`.`customerID` AS `customerID`,  \n" +
                "                `sm`.`contactPersonID` AS `contactPersonID`,  \n" +
                "                `sm`.`shippingMethodID` AS `shippingMethodID`,  \n" +
                "                `sm`.`status` AS `status`,  \n" +
                "                `sm`.`revision` AS `revision`,  \n" +
                "                `sm`.`shippingComment` AS `shippingComment`,  \n" +
                "                `sm`.`termsID` AS `termsID`,  \n" +
                "                `sm`.`soDate` AS `soDate`,  \n" +
                "                `sm`.`billingAddressID` AS `billingAddressID`,  \n" +
                "                `sm`.`shippingAddressID` AS `shippingAddressID`,  \n" +
                "                `sm`.`freeOnBoardId` AS `freeOnBoardId`,  \n" +
                "                `sm`.`intermediateShipmentId` AS `intermediateShipmentId`,  \n" +
                "                `sm`.`internalComment` AS `internalCommentSo`,  \n" +
                "                `sm`.`serialNumber` AS `serialNumber`,  \n" +
                "                `sm`.`isBlanketPO` AS `isBlanketPO`,  \n" +
                "                `sm`.`rmaNumber` AS `rmaNumber`,  \n" +
                "                `sm`.`isDebitedByCustomer` AS `isDebitedByCustomer`,  \n" +
                "                (CASE  \n" +
                "                    WHEN (`sm`.`isDebitedByCustomer` = 1) THEN 'Yes'  \n" +
                "                    ELSE 'No'  \n" +
                "                END) AS `debitedByCustText`,  \n" +
                "                `sm`.`orgPONumber` AS `rmaOrgPONumber`,  \n" +
                "                `sm`.`orgSalesOrderID` AS `orgSalesOrderID`,  \n" +
                "                `sm`.`isReworkRequired` AS `isReworkRequired`,  \n" +
                "                (CASE  \n" +
                "                    WHEN (`sm`.`isReworkRequired` = 1) THEN 'Yes'  \n" +
                "                    ELSE 'No'  \n" +
                "                END) AS `reworkReqText`,  \n" +
                "                `sm`.`reworkPONumber` AS `reworkPONumber`,  \n" +
                "                (CASE  \n" +
                "                    WHEN (`sm`.`isBlanketPO` = 1) THEN 'Yes'  \n" +
                "                    ELSE 'No'  \n" +
                "                END) AS `blanketPOText`,  \n" +
                "                `sm`.`poRevision` AS `poRevision`,  \n" +
                "                FUN_GETUSERNAMEBYID(`sm`.`updatedBy`) AS `soModifiedBy`,  \n" +
                "                FUN_GETUSERNAMEBYID(`sm`.`createdBy`) AS `soCreatedBy`,  \n" +
                "                FUN_GETROLEBYID(`sm`.`updateByRoleId`) AS `updatedbyRole`,  \n" +
                "                FUN_GETROLEBYID(`sm`.`createByRoleId`) AS `createdbyRole`,  \n" +
                "                FUN_GETROLEBYID(`sm`.`deleteByRoleId`) AS `deletedbyRole`,  \n" +
                "                `sm`.`createdAt` AS `createdDate`,  \n" +
                "                `sm`.`updatedAt` AS `modifyDate`,  \n" +
                "                `co`.`PIDCode` AS `PIDCode`,  \n" +
                "                `co`.`mfgPN` AS `mfgPN`,  \n" +
                "                `co`.`rev` AS `rev`,  \n" +
                "                `co`.`nickName` AS `nickName`,  \n" +
                "                `co`.`liveVersion` AS `liveVersion`,  \n" +
                "                `co`.`mfgPNDescription` AS `mfgPNDescription`,  \n" +
                "                `co`.`isCustom` AS `isCustomPart`,  \n" +
                "                `co`.`partType` AS `partType`,  \n" +
                "                `co`.`mfgcodeID` AS `mfgcodeID`,  \n" +
                "                CONCAT('(', `cu`.`mfgCode`, ') ', `cu`.`mfgName`) AS `companyName`,  \n" +
                "                `cu`.`mfgCode` AS `mfgCode`,  \n" +
                "                `cu`.`isCompany` AS `internalPO`,  \n" +
                "                `mg`.`mfgName` AS `manufacturerName`,  \n" +
                "                CONCAT(`cc`.`firstName`, ' ', `cc`.`lastName`) AS `fullName`,  \n" +
                "                `gc`.`gencCategoryCode` AS `gencCategoryCode`,  \n" +
                "                `co`.`RoHSStatusID` AS `RoHSStatusID`,  \n" +
                "                `roh`.`name` AS `RoHSName`,  \n" +
                "                `roh`.`rohsIcon` AS `rohsIcon`,  \n" +
                "                `a`.`qty` AS `qty`,  \n" +
                "                `a`.`id` AS `salesOrderDetailId`,  \n" +
                "                `a`.`kitNumber` AS `kitnumber`,  \n" +
                "                `a`.`isSkipKitCreation` AS `isSkipKitCreation`,  \n" +
                "                `a`.`partDescription` AS `partDescription`,  \n" +
                "                `a`.`partID` AS `partID`,  \n" +
                "                `a`.`isCancle` AS `isCancle`,  \n" +
                "                `a`.`isHotJob` AS `isHotJob`,  \n" +
                "                `a`.`cancleReason` AS `cancleReason`,  \n" +
                "                `a`.`materialTentitiveDocDate` AS `materialTentitiveDocDate`,  \n" +
                "                `sh`.`shippingDate` AS `shippingDate`,  \n" +
                "                `wsd`.`wosalesOrderDetail` AS `wosalesOrderDetail`,  \n" +
                "                `a`.`materialDueDate` AS `materialDueDate`,  \n" +
                "                `a`.`prcNumberofWeek` AS `prcNumberofWeek`,  \n" +
                "                `a`.`remark` AS `remark`,  \n" +
                "                `a`.`price` AS `price`,  \n" +
                "                `a`.`mrpQty` AS `mrpQty`,  \n" +
                "                `a`.`kitQty` AS `kitQty`,  \n" +
                "                `a`.`shippingQty` AS `shippingQty`,  \n" +
                "                `a`.`custPOLineNumber` AS `custPOLineNumber`,  \n" +
                "                `a`.`salesOrderDetStatus` AS `salesOrderDetStatus`,  \n" +
                "                `a`.`completeStatusReason` AS `completeStatusReason`,  \n" +
                "                `a`.`internalComment` AS `internalComment`,  \n" +
                "                `a`.`partCategory` AS `partCategory`,  \n" +
                "                `a`.`lineID` AS `lineID`,  \n" +
                "                `sm`.`originalPODate` AS `originalPODate`,  \n" +
                "                `a`.`originalPOQty` AS `originalPOQty`,  \n" +
                "                `sm`.`isRmaPO` AS `isRmaPO`,  \n" +
                "                `sm`.`poRevisionDate` AS `poRevisionDate`,  \n" +
                "                `a`.`releaseLevelComment` AS `releaseLevelComment`,  \n" +
                "                `soh`.`assignQty` AS `assignQty`,  \n" +
                "                `a`.`custOrgPOLineNumber` AS `custOrgPOLineNumber`,  \n" +
                "                (CASE  \n" +
                "                    WHEN (`sm`.`isRmaPO` = 1) THEN 'Yes'  \n" +
                "                    ELSE 'NO'  \n" +
                "                END) AS `rmaPOText`,  \n" +
                "                `sm`.`isLegacyPO` AS `isLegacyPO`,  \n" +
                "                (CASE  \n" +
                "                    WHEN (`sm`.`isLegacyPO` = 1) THEN 'Yes'  \n" +
                "                    ELSE 'NO'  \n" +
                "                END) AS `legacyPOText`,  \n" +
                "                (CASE  \n" +
                "                    WHEN (`a`.`frequency` = 1) THEN 'Every'  \n" +
                "                    WHEN (`a`.`frequency` = 2) THEN 'First'  \n" +
                "                    WHEN (`a`.`frequency` = 3) THEN 'Last'  \n" +
                "                    ELSE ''  \n" +
                "                END) AS `frequency`,  \n" +
                "                (CASE  \n" +
                "                    WHEN (`a`.`frequencyType` = 1) THEN 'Release'  \n" +
                "                    WHEN (`a`.`frequencyType` = 2) THEN 'Shipment'  \n" +
                "                    ELSE ''  \n" +
                "                END) AS `frequencyType`,  \n" +
                "                `a`.`refSODetID` AS `refSODetID`,  \n" +
                "                `a`.`refSOReleaseLineID` AS `refSOReleaseLineID`,  \n" +
                "                IFNULL((CASE  \n" +
                "                    WHEN (`sm`.`blanketPOOption` = 2) THEN `sqt`.`BPOShippedQty`  \n" +
                "                    ELSE `sq`.`ShippedQty`  \n" +
                "                END), 0) AS `ShippedQty`,  \n" +
                "                `k`.`releasedWorkorder` AS `releasedWorkorder`,  \n" +
                "                `k`.`releasedWorkorderNmberAndId` AS `releasedWorkorderNmberAndId`,  \n" +
                "                `sm`.`blanketPOOption` AS `blanketPOOption`,  \n" +
                "                (CASE  \n" +
                "                    WHEN (`sm`.`blanketPOOption` = 1) THEN 'Use This Blanket PO# for All Releases'  \n" +
                "                    WHEN (`sm`.`blanketPOOption` = 2) THEN 'Link Future PO(s) to This Blanket PO'  \n" +
                "                    WHEN (`sm`.`blanketPOOption` = 3) THEN 'Use Blanket PO# and Release#'  \n" +
                "                    ELSE ''  \n" +
                "                END) AS `blanketPOOptionText`  \n" +
                "        FROM  \n" +
                "            (((((((((((((`salesordermst` `sm`  \n" +
                "        LEFT JOIN `salesorderdet` `a` ON (((`sm`.`id` = `a`.`refSalesOrderID`)  \n" +
                "            AND (`a`.`isDeleted` = 0)  \n" +
                "            AND (`sm`.`isDeleted` = 0))))  \n" +
                "        LEFT JOIN `mfgcodemst` `cu` ON (((`sm`.`customerID` = `cu`.`id`)  \n" +
                "            AND (`cu`.`isDeleted` = 0))))  \n" +
                "        LEFT JOIN `component` `co` ON ((`a`.`partID` = `co`.`id`)))  \n" +
                "        LEFT JOIN `mfgcodemst` `mg` ON (((`mg`.`id` = `co`.`mfgcodeID`)  \n" +
                "            AND (`mg`.`isDeleted` = 0))))  \n" +
                "        LEFT JOIN `rfq_rohsmst` `roh` ON (((`roh`.`id` = `co`.`RoHSStatusID`)  \n" +
                "            AND (`roh`.`isDeleted` = 0))))  \n" +
                "        LEFT JOIN `customer_contactperson` `cc` ON (((`sm`.`contactPersonID` = `cc`.`personId`)  \n" +
                "            AND (`cc`.`isDeleted` = 0))))  \n" +
                "        LEFT JOIN `genericcategory` `gc` ON (((`sm`.`shippingMethodID` = `gc`.`gencCategoryID`)  \n" +
                "            AND (`gc`.`isDeleted` = 0))))  \n" +
                "        LEFT JOIN (SELECT  \n" +
                "            IFNULL(SUM(`sbt`.`ShippedQty`), 0) AS `BPOShippedQty`,  \n" +
                "                `sbt`.`refBlanketPOID` AS `blanketPOSoDetID`  \n" +
                "        FROM  \n" +
                "            (SELECT  \n" +
                "            `cpd`.`refSalesorderDetid` AS `refSalesorderDetid`,  \n" +
                "                `sdd`.`refBlanketPOID` AS `refBlanketPOID`,  \n" +
                "                IFNULL(SUM(`cpd`.`shipQty`), 0) AS `ShippedQty`  \n" +
                "        FROM  \n" +
                "            ((`customer_packingslip_det` `cpd`  \n" +
                "        JOIN `customer_packingslip` `cps` ON ((`cps`.`id` = `cpd`.`refCustPackingSlipID`)))  \n" +
                "        JOIN `salesorderdet` `sdd` ON (((`sdd`.`id` = `cpd`.`refSalesorderDetid`)  \n" +
                "            AND (`sdd`.`isDeleted` = 0))))  \n" +
                "        WHERE  \n" +
                "            ((`cps`.`transType` = 'P')  \n" +
                "                AND (`cpd`.`isDeleted` = 0))  \n" +
                "        GROUP BY `cpd`.`refSalesorderDetid` , `sdd`.`refBlanketPOID`) `sbt`  \n" +
                "        GROUP BY `sbt`.`refBlanketPOID`) `sqt` ON ((`sqt`.`blanketPOSoDetID` = `a`.`id`)))  \n" +
                "        LEFT JOIN (SELECT  \n" +
                "            `cpd`.`refSalesorderDetid` AS `refSalesorderDetid`,  \n" +
                "                IFNULL(SUM(`cpd`.`shipQty`), 0) AS `ShippedQty`  \n" +
                "        FROM  \n" +
                "            (`customer_packingslip_det` `cpd`  \n" +
                "        JOIN `customer_packingslip` `cps` ON ((`cps`.`id` = `cpd`.`refCustPackingSlipID`)))  \n" +
                "        WHERE  \n" +
                "            ((`cps`.`transType` = 'P')  \n" +
                "                AND (`cpd`.`isDeleted` = 0))  \n" +
                "        GROUP BY `cpd`.`refSalesorderDetid`) `sq` ON ((`sq`.`refSalesorderDetid` = `a`.`id`)))  \n" +
                "        LEFT JOIN (SELECT  \n" +
                "            `x`.`salesOrderDetailID` AS `salesOrderDetailID`,  \n" +
                "                IF((COUNT(1) > 0), 1, 0) AS `wosalesOrderDetail`  \n" +
                "        FROM  \n" +
                "            `workorder_salesorder_details` `x`  \n" +
                "        WHERE  \n" +
                "            (`x`.`isDeleted` = 0)  \n" +
                "        GROUP BY `x`.`salesOrderDetailID`) `wsd` ON ((`wsd`.`salesOrderDetailID` = `a`.`id`)))  \n" +
                "        LEFT JOIN (SELECT  \n" +
                "            `ssm`.`sDetID` AS `sDetID`,  \n" +
                "                MIN(IFNULL(`ssm`.`requestedDockDate`, `ssm`.`shippingDate`)) AS `shippingDate`  \n" +
                "        FROM  \n" +
                "            `salesshippingmst` `ssm`  \n" +
                "        WHERE  \n" +
                "            (`ssm`.`isDeleted` = 0)  \n" +
                "        GROUP BY `ssm`.`sDetID`) `sh` ON ((`sh`.`sDetID` = `a`.`id`)))  \n" +
                "        LEFT JOIN (SELECT  \n" +
                "            SUM(`sod`.`qty`) AS `assignQty`,  \n" +
                "                `sod`.`refBlanketPOID` AS `refsalesOrderID`  \n" +
                "        FROM  \n" +
                "            `salesorderdet` `sod`  \n" +
                "        WHERE  \n" +
                "            (`sod`.`isDeleted` = 0)  \n" +
                "        GROUP BY `sod`.`refBlanketPOID`) `soh` ON ((`soh`.`refsalesOrderID` = `a`.`id`)))  \n" +
                "        LEFT JOIN (SELECT  \n" +
                "            `s`.`salesOrderDetID` AS `salesOrderDetID`,  \n" +
                "                `s`.`refAssyId` AS `refAssyId`,  \n" +
                "                GROUP_CONCAT(DISTINCT ' ', `wo`.`woNumber`  \n" +
                "                    SEPARATOR ',') AS `releasedWorkorder`,  \n" +
                "                GROUP_CONCAT(DISTINCT ' ', CONCAT(`wo`.`woID`, '###', `wo`.`woNumber`)  \n" +
                "                    SEPARATOR ',') AS `releasedWorkorderNmberAndId`  \n" +
                "        FROM  \n" +
                "            (`salesorder_plan_detailsmst` `s`  \n" +
                "        LEFT JOIN `workorder` `wo` ON ((`wo`.`woID` = `s`.`woID`)))  \n" +
                "        GROUP BY `s`.`salesOrderDetID`) `k` ON ((`k`.`salesOrderDetID` = `a`.`id`)))  \n" +
                "        WHERE  \n" +
                "            (`sm`.`isDeleted` = 0)) `a`;  \n" +
                /* **************************** Add Script Version ->  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1248,'1.00','V1',' Alter procedure Sproc_GetSalesOrderSummaryList-CC '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1248:
            allDbChangesArray.push(
                /* **************************** New Script -> 24-12-2021  *********************************** */
                "drop procedure if exists `Sproc_SavePackingSlipMaterialReceiveDetStock`;  \n" +
                "CREATE PROCEDURE `Sproc_SavePackingSlipMaterialReceiveDetStock`(  \n" +
                "	IN pRMAStockList JSON,  \n" +
                "	IN pUserID VARCHAR(50),  \n" +
                "	IN pUserRoleID VARCHAR(50)  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "  \n" +
                "	DECLARE i INT DEFAULT 0;  \n" +
                "	DECLARE v_TotalRMAStock INT;  \n" +
                "    DECLARE v_stockId INT;  \n" +
                "	DECLARE v_TransactionAction VARCHAR(10);  \n" +
                "	DECLARE v_RefRMAId INT;  \n" +
                "	DECLARE v_RefRMADetailId INT;  \n" +
                "	DECLARE v_Type VARCHAR(5);  \n" +
                "	DECLARE v_RefSidId INT;  \n" +
                "	DECLARE v_RefPackingSlipId INT;  \n" +
                "	DECLARE v_RefPackingSlipDetId INT;  \n" +
                "	DECLARE v_PartId INT;  \n" +
                "	DECLARE v_PackagingId INT;  \n" +
                "	DECLARE v_BinId INT;  \n" +
                "    DECLARE v_OLDRMAStock DECIMAL(18,8);  \n" +
                "	DECLARE v_Qty DECIMAL(18,8);  \n" +
                "    DECLARE v_availableQtyAtRMA DECIMAL(18,8);  \n" +
                "    DECLARE v_availableUnitAtRMA DECIMAL(18,8);  \n" +
                "	DECLARE v_TransferBinId INT;  \n" +
                "	DECLARE v_TransferWarehouseId INT;  \n" +
                "	DECLARE v_TransferParentWarehouseId INT;  \n" +
                "	DECLARE v_QtyOfLastConsume DECIMAL(18,8);  \n" +
                "    DECLARE v_UnitsOfLastConsume DECIMAL(18,8);  \n" +
                "    DECLARE v_ErorrCode VARCHAR(100) default null;  \n" +
                "    DECLARE v_CurrentStockQty DECIMAL(18,8);  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_RMAStockList;  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_RMAStockList AS  \n" +
                "	SELECT 	*  \n" +
                "	FROM 	JSON_TABLE(  \n" +
                "		pRMAStockList,  \n" +
                "			\"$[*]\" COLUMNS(  \n" +
                "				`stockId` INT PATH \"$.stockId\",  \n" +
                "				`transactionAction` VARCHAR(10) PATH \"$.transactionAction\",  \n" +
                "				`refRMAId` INT PATH \"$.refRMAId\",  \n" +
                "				`refRMADetailId` INT PATH \"$.refRMADetailId\",  \n" +
                "				`type` VARCHAR(5) PATH \"$.type\",  \n" +
                "				`refSidId` INT PATH \"$.refSidId\",  \n" +
                "				`refPackingSlipId` INT PATH \"$.refPackingSlipId\",  \n" +
                "				`refPackingSlipDetId` INT PATH \"$.refPackingSlipDetId\",  \n" +
                "				`partId` INT PATH \"$.partId\",  \n" +
                "				`packagingId` INT PATH \"$.packagingId\",  \n" +
                "				`binId` VARCHAR(20) PATH \"$.binId\",  \n" +
                "				`qty` DECIMAL(18,8) PATH \"$.qty\",  \n" +
                "                `availableQtyAtRMA` DECIMAL(18,8) PATH \"$.availableQtyAtRMA\",  \n" +
                "                `availableUnitAtRMA` DECIMAL(18,8) PATH \"$.availableUnitAtRMA\",  \n" +
                "				`transferBinId` INT path \"$.transferBinId\",  \n" +
                "				`transferWarehouseId` INT path \"$.transferWarehouseId\",  \n" +
                "				`transferParentWarehouseId` INT path \"$.transferParentWarehouseId\"  \n" +
                "			)  \n" +
                "		) AS RMAStockList_JT;  \n" +
                "  \n" +
                "		SELECT COUNT(1) INTO v_TotalRMAStock FROM temp_RMAStockList;  \n" +
                "		SET i = 0;  \n" +
                "		temp_RMAStockListLabel: WHILE i < v_TotalRMAStock DO  \n" +
                "  \n" +
                "            if v_ErorrCode is null or v_ErorrCode = '' then  \n" +
                "  \n" +
                "				SET v_stockId = NULL;  \n" +
                "                SET v_OLDRMAStock = NULL;  \n" +
                "				SET v_TransactionAction = NULL;  \n" +
                "				SET v_RefRMAId = NULL;  \n" +
                "				SET v_RefRMADetailId = NULL;  \n" +
                "				SET v_Type = NULL;  \n" +
                "				SET v_RefSidId = NULL;  \n" +
                "				SET v_RefPackingSlipId = NULL;  \n" +
                "				SET v_RefPackingSlipDetId = NULL;  \n" +
                "				SET v_PartId = NULL;  \n" +
                "				SET v_PackagingId = NULL;  \n" +
                "				SET v_BinId = NULL;  \n" +
                "				SET v_Qty = NULL;  \n" +
                "                SET v_availableQtyAtRMA = NULL;  \n" +
                "                SET v_availableUnitAtRMA = NULL;  \n" +
                "				SET v_QtyOfLastConsume = NULL;  \n" +
                "                SET v_UnitsOfLastConsume = NULL;  \n" +
                "  \n" +
                "				SELECT 	stockId, transactionAction, refRMAId, refRMADetailId, `type`, refSidId, refPackingSlipId, refPackingSlipDetId, partId, packagingId, binId, qty, transferBinId, transferWarehouseId, transferParentWarehouseId, availableQtyAtRMA, availableUnitAtRMA  \n" +
                "				INTO 	v_stockId, v_TransactionAction, v_RefRMAId, v_RefRMADetailId, v_Type, v_RefSidId, v_RefPackingSlipId, v_RefPackingSlipDetId, v_PartId, v_PackagingId, v_BinId, v_Qty, v_TransferBinId, v_TransferWarehouseId, v_TransferParentWarehouseId, v_availableQtyAtRMA, v_availableUnitAtRMA  \n" +
                "				FROM 	temp_RMAStockList  \n" +
                "				LIMIT 	i, 1;  \n" +
                "				IF (v_TransactionAction = 'Add') THEN  \n" +
                "					if v_RefSidId is null then /*non UMID stock*/  \n" +
                "						/*fetching non UMID stock*/  \n" +
                "						SELECT SUM(IFNULL(vu.BalanceQty,0))  \n" +
                "                          into v_CurrentStockQty  \n" +
                "							FROM vu_umid_creation_pending vu  \n" +
                "							WHERE vu.packagingID = v_PackagingId  \n" +
                "							  AND vu.partID = v_PartId  \n" +
                "							  and vu.BinID = v_BinId;  \n" +
                "                    else /*UMID stock*/  \n" +
                "						/*Fetching UMID current stock*/  \n" +
                "                        select availableQty into v_CurrentStockQty  \n" +
                "                          from (SELECT c.pkgQty availableQty  \n" +
                "								  FROM component_sid_stock c  \n" +
                "								 INNER JOIN packing_slip_material_receive_det_stock cp ON cp.refSidId = c.id  \n" +
                "								 WHERE c.id = v_RefSidId  \n" +
                "								   and c.refcompid = v_PartId  \n" +
                "								   AND cp.type = 'U'  \n" +
                "								   AND cp.isDeleted = 0  \n" +
                "								   AND c.isDeleted = 0  \n" +
                "								UNION  \n" +
                "								SELECT c.pkgQty availableQty  \n" +
                "								  FROM component_sid_stock c  \n" +
                "								 INNER JOIN component_sid_stock_packing_detail cp ON cp.refComponentSidStockID = c.id  \n" +
                "								 WHERE c.pkgQty > 0  \n" +
                "								   and c.id = v_RefSidId  \n" +
                "								   and c.refcompid = v_PartId  \n" +
                "								   AND cp.isDeleted = 0  \n" +
                "								   AND c.isDeleted = 0) a;  \n" +
                "                    end if;  \n" +
                "  \n" +
                "                    if (case when v_Type = 'U' then v_availableQtyAtRMA else v_Qty end) > v_CurrentStockQty then  \n" +
                "						set v_ErorrCode = 'AVAILABLE_STOCK_ISSUE';  \n" +
                "					else  \n" +
                "						INSERT INTO packing_slip_material_receive_det_stock (refRMAId, refRMADetailId, `type`, refSidId, refPackingSlipId, refPackingSlipDetId, partId, packagingId, binId, qty, createdBy, createByRoleId, updatedBy, updateByRoleId, availableQtyAtRMA, availableUnitAtRMA)  \n" +
                "						VALUES (v_RefRMAId, v_RefRMADetailId, v_Type, v_RefSidId, v_RefPackingSlipId, v_RefPackingSlipDetId, v_PartId, v_PackagingId, v_BinId, v_Qty, pUserID, pUserRoleID, pUserID, pUserRoleID, v_availableQtyAtRMA, v_availableUnitAtRMA);  \n" +
                "  \n" +
                "                        IF (v_RefSidId IS NOT NULL) THEN /*umid stock*/  \n" +
                "							INSERT INTO component_sid_stock_history  \n" +
                "								(transType, 	actionPerformed, 	refUIDId, 	uid, 	refcompid, 	binID,  \n" +
                "                                warehouseID, 	deptWHID,  \n" +
                "								orgQty, 	orgUnit,  \n" +
                "                                currentQty, 	currentUnit, 		uom, 		consumedQty, 		consumedUnit,  \n" +
                "								refTrans, 	refTransID, 		refTransTable,	createdBy, 		updatedBy,	createByRoleId,		updateByRoleId)  \n" +
                "							SELECT 	'Supplier RMA - Returned', 	'UMID Zero Out',	c.id,		c.uid,		c.refcompid,		-1,  \n" +
                "									-3,				fun_getDepartmentIDByBinID(-1),  \n" +
                "                                    c.orgQty,	c.orgPkgUnit,  \n" +
                "									case when v_Type = 'U' then (c.pkgQty - v_availableQtyAtRMA) else (c.pkgQty - v_Qty) end,  \n" +
                "                                    case when v_Type = 'U' then (c.pkgUnit - v_availableUnitAtRMA) else (c.pkgUnit - (v_Qty * com.unit)) end,  \n" +
                "                                    c.uom,		v_Qty,			(v_Qty * com.unit),  \n" +
                "									fun_getRMANumberById(v_RefRMAId),					v_RefRMAId,	'packing_slip_material_receive',  \n" +
                "									pUserID,			pUserID,				pUserRoleID,	pUserRoleID  \n" +
                "							FROM 		component_sid_stock c  \n" +
                "							INNER JOIN 	component com ON com.id = c.refcompid  \n" +
                "							WHERE 		c.id =  v_RefSidId  \n" +
                "										AND c.isDeleted = 0  \n" +
                "										AND com.isDeleted = 0;  \n" +
                "  \n" +
                "							UPDATE 		component_sid_stock c  \n" +
                "							INNER JOIN 	component com ON com.id = c.refcompid  \n" +
                "								SET c.pkgQty = case when v_Type = 'U' then (c.pkgQty - v_availableQtyAtRMA) else (c.pkgQty - v_Qty) end,  \n" +
                "									c.pkgUnit = case when v_Type = 'U' then (c.pkgUnit - v_availableUnitAtRMA) else (c.pkgUnit - (v_Qty * com.unit)) end,  \n" +
                "                                    c.isinStk = false,  \n" +
                "                                    c.binID =  -1 /*Empty Bin id (system generated bin)*/  \n" +
                "							WHERE	c.id = v_RefSidId AND c.isDeleted = 0;  \n" +
                "						else /*non-umid stock*/  \n" +
                "                            UPDATE 	packing_slip_material_receive_det  \n" +
                "							SET 	umidCreated = ((IFNULL(umidCreatedQty,0) + IFNULL(rmaCreatedQty,0) + v_Qty)=receivedQty),  \n" +
                "									rmaCreatedQty = (IFNULL(rmaCreatedQty,0) + v_Qty)  \n" +
                "							WHERE   id = v_RefPackingSlipDetId;  \n" +
                "						END IF;  \n" +
                "                    end if;  \n" +
                "				ELSEIF (v_TransactionAction = 'Edit' AND v_Type = 'PU') THEN  \n" +
                "						/*fetching non UMID stock*/  \n" +
                "						select sum(stockQty) into v_CurrentStockQty  \n" +
                "						from  \n" +
                "							(SELECT SUM(IFNULL(vu.BalanceQty,0)) stockQty  \n" +
                "								FROM vu_umid_creation_pending vu  \n" +
                "								WHERE vu.packagingID = v_PackagingId  \n" +
                "								  AND vu.partID = v_PartId  \n" +
                "								  and vu.BinID = v_BinId  \n" +
                "								union all  \n" +
                "								select qty stockQty  \n" +
                "								from packing_slip_material_receive_det_stock  \n" +
                "							   where id = v_stockId  \n" +
                "								 and isDeleted = 0) a;  \n" +
                "						if v_Qty > v_CurrentStockQty then  \n" +
                "							set v_ErorrCode = 'AVAILABLE_STOCK_ISSUE';  \n" +
                "						else  \n" +
                "							select qty into v_OLDRMAStock  \n" +
                "                              from packing_slip_material_receive_det_stock  \n" +
                "							 WHERE id = v_stockId AND isDeleted = 0;  \n" +
                "  \n" +
                "                            UPDATE packing_slip_material_receive_det_stock  \n" +
                "							   SET qty = v_Qty,  \n" +
                "									updatedBy = pUserID,  \n" +
                "									updateByRoleId = pUserRoleID,  \n" +
                "									updatedAt = CURRENT_TIMESTAMP  \n" +
                "							 WHERE id = v_stockId AND isDeleted = 0;  \n" +
                "  \n" +
                "                             UPDATE 	packing_slip_material_receive_det  \n" +
                "								SET 	umidCreated = ((IFNULL(umidCreatedQty,0) + IFNULL(rmaCreatedQty,0) - IFNULL(v_OLDRMAStock,0) + IFNULL(v_Qty,0))=receivedQty),  \n" +
                "										rmaCreatedQty = (IFNULL(rmaCreatedQty,0) - IFNULL(v_OLDRMAStock,0) + IFNULL(v_Qty,0))  \n" +
                "								WHERE   id = v_RefPackingSlipDetId;  \n" +
                "                        end if;  \n" +
                "				ELSEIF (v_TransactionAction = 'Delete') THEN  \n" +
                "					IF v_Type = 'PU' then  \n" +
                "						select qty into v_OLDRMAStock  \n" +
                "						  from packing_slip_material_receive_det_stock  \n" +
                "						 WHERE id = v_stockId AND isDeleted = 0;  \n" +
                "  \n" +
                "						 UPDATE 	packing_slip_material_receive_det  \n" +
                "							SET 	umidCreated = ((IFNULL(umidCreatedQty,0) + IFNULL(rmaCreatedQty,0) - IFNULL(v_OLDRMAStock,0))=receivedQty),  \n" +
                "									rmaCreatedQty = (IFNULL(rmaCreatedQty,0) - IFNULL(v_OLDRMAStock,0))  \n" +
                "							WHERE   id = v_RefPackingSlipDetId;  \n" +
                "					END IF;  \n" +
                "  \n" +
                "					UPDATE 	packing_slip_material_receive_det_stock  \n" +
                "					SET 	isDeleted = 1,  \n" +
                "							deletedBy = pUserID,  \n" +
                "							deleteByRoleId = pUserRoleID,  \n" +
                "							deletedAt = CURRENT_TIMESTAMP  \n" +
                "					WHERE 	id = v_stockId AND isDeleted = 0;  \n" +
                "  \n" +
                "					IF (v_Type = 'U' AND v_TransferBinId IS NOT NULL) THEN  \n" +
                "						SELECT ifnull(availableQtyAtRMA,0), ifnull(availableUnitAtRMA,0)  \n" +
                "						  INTO v_QtyOfLastConsume, v_UnitsOfLastConsume  \n" +
                "                          FROM packing_slip_material_receive_det_stock WHERE id = v_stockId;  \n" +
                "  \n" +
                "						INSERT INTO component_sid_stock_history  \n" +
                "							(transType, 	actionPerformed,  \n" +
                "                            refUIDId, 	uid, 	refcompid, 	binID, 		warehouseID, 		deptWHID,  \n" +
                "							orgQty, 	orgUnit, 		currentQty, 	currentUnit,		uom,  \n" +
                "                            consumedQty,  \n" +
                "                            consumedUnit,  \n" +
                "							refTrans, 	refTransID, 		refTransTable,	createdBy, 		updatedBy,	createByRoleId,		updateByRoleId)  \n" +
                "						SELECT 	'Supplier RMA - Corrected', 	'UMID Count Material (Adjust Material: Add/Append Count)',  \n" +
                "								c.id,		c.uid,		c.refcompid, 	v_TransferBinId,	v_TransferWarehouseId,		v_TransferParentWarehouseId,  \n" +
                "								c.orgQty,	c.orgPkgUnit,	v_QtyOfLastConsume,		v_UnitsOfLastConsume,	c.uom,  \n" +
                "                                (IFNULL(c.orgQty,0) - v_QtyOfLastConsume),  \n" +
                "                                (IFNULL(c.orgPkgUnit,0) - v_UnitsOfLastConsume),  \n" +
                "								fun_getRMANumberById(v_RefRMAId),  \n" +
                "								v_RefRMAId,		'packing_slip_material_receive',  \n" +
                "								pUserID,		pUserID,  \n" +
                "								pUserRoleID,		pUserRoleID  \n" +
                "						FROM 	component_sid_stock c  \n" +
                "						WHERE 	c.id =  v_RefSidId  \n" +
                "						AND 	c.isDeleted = 0;  \n" +
                "  \n" +
                "						UPDATE 		component_sid_stock c  \n" +
                "							SET		c.pkgQty = v_QtyOfLastConsume,  \n" +
                "									c.pkgUnit = v_UnitsOfLastConsume,  \n" +
                "									c.binID = v_TransferBinId  \n" +
                "							WHERE  	c.id = v_RefSidId AND c.isDeleted = 0;  \n" +
                "					END IF;  \n" +
                "				END IF;  \n" +
                "  \n" +
                "             end if;  \n" +
                "  \n" +
                "			SET i = i + 1;  \n" +
                "		END WHILE temp_RMAStockListLabel;  \n" +
                "  \n" +
                "		SELECT ifnull(v_ErorrCode,'1') AS 'spStatus';  \n" +
                "  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_RMAStockList;  \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version ->  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1249,'1.00','V1','Bug 39780: [Main Branch] Empty stock should not get transfer while Bin to Bin transfer - Ashish '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1249:
            allDbChangesArray.push(
                /* **************************** New Script -> 27-12-2021  *********************************** */
                "ALTER TABLE `rfq_parttypemst`  \n" +
                "CHANGE COLUMN `partTypeName` `partTypeName` VARCHAR(255) NOT NULL ;  \n" +
                "  \n" +
                "ALTER TABLE `rfq_mountingtypemst`  \n" +
                "CHANGE COLUMN `name` `name` VARCHAR(255) NOT NULL ;  \n" +
                "  \n" +
                "ALTER TABLE `component`  \n" +
                "CHANGE COLUMN `mountingTypeText` `mountingTypeText` VARCHAR(255) NULL DEFAULT NULL ;  \n" +
                /* **************************** Add Script Version -> 27-12-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1250,'1.00','V1',' Bug 39799: [Main Branch | Improvement Point] Need to increase the character length for External Functional/Mounting Type to 100 Char - SHUBHAM '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1250:
            allDbChangesArray.push(
                /* **************************** New Script -> 27-12-2021  *********************************** */
                "ALTER TABLE systemconfigrations MODIFY COLUMN `description` LONGTEXT;  \n" +
                /* **************************** New Script -> 27-12-2021  ***********************************
                /* **************************** Add Script Version ->  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1251,'1.00','V1','Updated Description for DateTime, Date and Time Picker Bug 39790: Data keys : Need to update description for DateTimePickerDateTimeFormat key - VS'," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1251:
            allDbChangesArray.push(
                /* **************************** Add Script Version -> 28-12-2021 **************************** */
                "DROP procedure IF EXISTS `Sproc_GetKitAllocationForElastic`;  \n" +
                "CREATE PROCEDURE `Sproc_GetKitAllocationForElastic`(  \n" +
                "    In pFromdate date,  \n" +
                "    In pTodate date,  \n" +
                "    IN pRequiredCount tinyint(1)  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "    DECLARE pWhereClause VARCHAR(1000);  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "    IF(pRequiredCount)  \n" +
                "	THEN  \n" +
                "		SET @temp_Sproc_GetKitAllocationForElastic = CONCAT(\"  \n" +
                "		SELECT  \n" +
                "			 count(1) totalCount\");  \n" +
                "		SET pWhereClause = ' sd.isDeleted = 0 ' ;  \n" +
                "	ELSE  \n" +
                "		SET @temp_Sproc_GetKitAllocationForElastic = CONCAT(\"  \n" +
                "		SELECT  \n" +
                "			  k.id  \n" +
                "				,k.refSalesOrderDetID  \n" +
                "                ,sd.refSalesOrderID  \n" +
                "				,s.poNumber  \n" +
                "				,s.salesOrderNumber  \n" +
                "				,k.assyId  \n" +
                "                ,assy.mfgcodeID  \n" +
                "                ,assy_mcm.mfgType assyMfgType  \n" +
                "				,assy.PIDCode AssyPIdCode  \n" +
                "				,assy.mfgPN assyMfgPN  \n" +
                "				,k.partId  \n" +
                "                ,c_mcm.mfgType partMfgType  \n" +
                "				,c.PIDCode partCode  \n" +
                "				,assy.mfgPN partMfgPn  \n" +
                "				,c.assyCode part  \n" +
                "				,k.UID  \n" +
                "				,k.refUIDId  \n" +
                "                ,k.allocatedQty  \n" +
                "                ,k.consumeQty  \n" +
                "                ,k.scrapExpiredQty  \n" +
                "                ,CASE WHEN k.STATUS = 'A' THEN 'Allocated'  \n" +
                "					WHEN k.STATUS = 'R' THEN 'Return'  \n" +
                "					WHEN k.STATUS = 'D' THEN 'Deallocated'  \n" +
                "					ELSE 'Consumed' END KitStatus  \n" +
                "                ,k.returnQty  \n" +
                "                ,sd.isDeleted,  \n" +
                "                sd.kitNumber\");  \n" +
                "  \n" +
                "			/*IF(pId IS NULL OR pId = '') THEN  \n" +
                "				SET pWhereClause = ' 1=1 ' ;  \n" +
                "			ELSE */  \n" +
                "				SET pWhereClause = CONCAT(\"k.id IN (select pId from tempKitAllocation)\");  \n" +
                "			/*END IF;*/  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	SET @temp_Sproc_GetKitAllocationForElastic = CONCAT(@temp_Sproc_GetKitAllocationForElastic, \"  \n" +
                "			from kit_allocation k  \n" +
                "			inner join salesorderdet sd on k.refSalesOrderDetID = sd.id and sd.partCategory=3  \n" +
                "			left JOIN salesordermst s ON sd.refSalesOrderID = s.id  \n" +
                "			left join component assy on k.assyId = assy.Id  \n" +
                "			left join component c on k.partId = c.Id  \n" +
                "            left join mfgcodemst assy_mcm on assy.mfgcodeId = assy_mcm.id  \n" +
                "            left join mfgcodemst c_mcm on c.mfgcodeId = c_mcm.id  \n" +
                "            where  \n" +
                "	\");  \n" +
                "  \n" +
                "    IF (pFromdate IS NOT NULL OR pTodate IS NOT NULL) THEN  \n" +
                "		SET pWhereClause =CONCAT(pWhereClause,\"  AND (((DATE(fun_CovnertDateTimeByTimezoneValue(k.createdAt,'\",v_TimeZone,\"'))  \n" +
                "        between '\",pFromdate,\"' and '\",pTodate,\"')  \n" +
                "            or (DATE(fun_CovnertDateTimeByTimezoneValue(k.updatedAt,'\",v_TimeZone,\"')) between '\",pFromdate,\"' and '\",pTodate,\"'))  \n" +
                "        OR ((DATE(fun_CovnertDateTimeByTimezoneValue(sd.createdAt,'\",v_TimeZone,\"'))  \n" +
                "        between '\",pFromdate,\"' and '\",pTodate,\"')  \n" +
                "            or (DATE(fun_CovnertDateTimeByTimezoneValue(sd.updatedAt,'\",v_TimeZone,\"')) between '\",pFromdate,\"' and '\",pTodate,\"')));\");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	SET @SQLStatement1 = CONCAT(@temp_Sproc_GetKitAllocationForElastic, pWhereClause);  \n" +
                "	PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "    DROP TEMPORARY TABLE IF EXISTS tempKitAllocation;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 28-12-2021 **************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1252,'1.00','V1','Bug 39950: [Main Branch] Gives Error log while Allocating too many UMIDs together from Elastic Search for Kit allocation - CP'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1252:
            allDbChangesArray.push(
                /* **************************** New Script -> 03-01-2022  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetWOHeaderDisplayDetails` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetWOHeaderDisplayDetails`(  \n" +
                "	IN pwoID INT,  \n" +
                "	IN pwoOPID INT,  \n" +
                "	IN pwoTransID INT,  \n" +
                "	IN pWaterSolubleCleanType VARCHAR(5),  \n" +
                "	IN pNoCleanCleanType VARCHAR(5),  \n" +
                "	IN pwoAssyID INT ,  \n" +
                "	IN pemployeeIDOfWOOP INT  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "	DECLARE vMfgNameFormat INT;  \n" +
                "    SELECT fun_getMFGCodeNameFormat() INTO vMfgNameFormat;  \n" +
                "	IF(pwoID IS NOT NULL AND  pwoOPID IS NULL ) THEN  \n" +
                "		 SELECT `wo`.`woID`, `wo`.`woNumber`, `wo`.`ECORemark`, `wo`.`woStatus`, `wo`.`woSubStatus`,  \n" +
                "			`wo`.`FCORemark`, `wo`.`buildQty`, `wo`.`woVersion`,  \n" +
                "			`wo`.`isOperationTrackBySerialNo`,  \n" +
                "			(SELECT CONCAT(usr.firstName,' ',usr.lastName) FROM users usr WHERE id = `wo`.`createdBy`) AS fullNameOfWOCreatedUser ,  \n" +
                "			fun_getUserNameByID(`wo`.`createdBy`) AS initialNameOfWOCreatedUser  ,  \n" +
                "			(SELECT profileImg FROM employees WHERE id IN (SELECT employeeID FROM users WHERE id = `wo`.`createdBy`))AS profileImgOfWOCreatedUser ,  \n" +
                "			(SELECT COUNT(1) FROM eco_request a WHERE a.requestType = 1 AND a.isDeleted = 0 AND a.woID = wo.woID) AS ecoRequestCount,  \n" +
                "                        (SELECT COUNT(1) FROM eco_request a WHERE a.requestType = 2 AND a.isDeleted = 0 AND a.woID = wo.woID) AS dfmRequestCount,  \n" +
                "			`wo`.`isNoClean`, `wo`.`isWatersoluble`, `wo`.`isFluxNotApplicable`, `wo`.`isClusterApplied`, `wo`.`isIncludeSubAssembly`, `wo`.`partID`, `wo`.`isRevisedWO`,  \n" +
                "			(SELECT COUNT(1) FROM workorder_trans_empinout woTransEmpinout  \n" +
                "				WHERE woTransEmpinout.isDeleted=0  \n" +
                "				AND woTransEmpinout.woID=pwoID  \n" +
                "				AND woTransEmpinout.checkinTime IS NOT NULL AND woTransEmpinout.checkoutTime IS NULL) AS isProductionRunning,  \n" +
                "			`wocerti`.woAllStandardsWithClass , `wo`.createdAt,  \n" +
                "			(SELECT GROUP_CONCAT(opNumber) opNumber FROM workorder_operation WHERE isDeleted=0  \n" +
                "				AND woID = `wo`.woID AND isNoClean = 1) isNoCleanOpNumbers ,  \n" +
                "			(SELECT GROUP_CONCAT(opNumber) opNumber FROM workorder_operation WHERE isDeleted=0  \n" +
                "				AND woID = `wo`.woID AND isWaterSoluble = 1) isWatersolubleOpNumbers ,  \n" +
                "			(SELECT GROUP_CONCAT(opNumber) opNumber FROM workorder_operation WHERE isDeleted=0  \n" +
                "				AND woID = `wo`.woID AND isFluxNotApplicable = 1) isFluxNotAppOpNumbers ,  \n" +
                "			`ca`.`PIDCode` ,  IFNULL(`vusalesorderdet`.`partDescription`,  `ca`.`mfgPNDescription`) AS partDescription,  \n" +
                "			`ca`.`liveVersion` AS liveVersion,  \n" +
                "			`ca`.`mfgPN`, `ca`.`nickName`, `ca`.`custAssyPN`, `ca`.`rev`, `ca`.`RoHSStatusID` ,  \n" +
                "			`ca`.specialNote, ca.totalSolderPoints, `ca`.isCustom ,  \n" +
                "			`ro`.`rohsIcon`,`ro`.`name` AS `rohsName`,  \n" +
                "			    `ca`.`isFluxNotApplicable` AS `assyFluxNotApplicable`,  \n" +
                "			    `ca`.`isNoClean` AS `assyNoClean`,  \n" +
                "			    `ca`.`isWaterSoluble` AS `assyWaterSoluble`,  \n" +
                "			    `mf`.mfgType,  \n" +
                "			    fun_getSamplePicturesUploadCount(`ca`.id) sampleImageCnt,  \n" +
                "			vusalesorderdet.totalPOQty, vusalesorderdet.POQtyValues soPOQty,  \n" +
                "   			 vusalesorderdet.totalMRPQty, vusalesorderdet.MRPQtyValues soMRPQty,  \n" +
                "   			 CASE WHEN wo.isRevisedWO = 0 THEN  vusalesorderdet.poNumber  ELSE parentSaleDtl.poNumber END poNumber,  \n" +
                "			     CASE WHEN wo.isRevisedWO = 0 THEN  vusalesorderdet.salesOrderNumber ELSE parentSaleDtl.salesOrderNumber END salesOrderNumber,  \n" +
                "			     CASE WHEN wo.isRevisedWO = 0 THEN  vusalesorderdet.soType ELSE parentSaleDtl.soType END soType,  \n" +
                "			     vusalesorderdet.lineID,  \n" +
                "   			 vusalesorderdet.salesOrderMstIDs, vusalesorderdet.SOPOQtyValues,  \n" +
                "   			  (CASE WHEN `wo`.isHotJob IS NOT NULL  \n" +
                "					THEN `wo`.isHotJob  \n" +
                "				ELSE vusalesorderdet.isHotJob  END) AS isHotJob,  \n" +
                "   			 (CASE WHEN `ca`.totalSolderPoints IS NOT NULL  \n" +
                "					THEN fun_calculateDPMOForWO(`wo`.woID)  \n" +
                "				ELSE NULL END) AS DPMO,  \n" +
                "			(SELECT GROUP_CONCAT(CONCAT(wodr.woNumber, \"-\", wodr.woVersion, \"######\", wodr.woID)) FROM workorder wodr WHERE wodr.woID  \n" +
                "				IN (SELECT parentWOID FROM workorder_main_assembly_mapping_details  \n" +
                "				WHERE refWOID = pwoID)  \n" +
                "			) AS parentWorkorders  ,  \n" +
                "			wo.terminateWOID refWOId,  \n" +
                "			fun_getWorkorderNumberWithRevByID(wo.terminateWOID) refWONumber,  \n" +
                "			    fun_getOperationNameByWOOPID(wo.terminateWOOPID) terminatedFromOp ,  \n" +
                "			    wo.customerID,  \n" +
                "			    fun_GetFormattedMfgCode(mf.mfgCode,mf.mfgName,vMfgNameFormat)  formattedCustomerName  \n" +
                "		FROM workorder AS `wo`  \n" +
                "			LEFT OUTER JOIN  \n" +
                "			(SELECT a.woID, GROUP_CONCAT(b.fullName,' ' ,  \n" +
                "				CASE WHEN a.classIDs IS NULL THEN ''  \n" +
                "					ELSE (SELECT GROUP_CONCAT(IFNULL(className,''), '######', IFNULL(colorCode,'')) FROM standard_class WHERE classID = a.classIDs) END  \n" +
                "				ORDER BY b.priority IS NULL,b.priority ASC, b.fullName ASC SEPARATOR '@@@@@@') woAllStandardsWithClass  \n" +
                "			FROM `workorder_certification` a  \n" +
                "			JOIN certificate_standards b ON a.certificateStandardID = b.certificateStandardID  \n" +
                "			 WHERE a.isDeleted=0 AND a.woID = pwoID  \n" +
                "			 GROUP BY a.woID  \n" +
                "			) AS `wocerti`  \n" +
                "			ON `wo`.`woID` = `wocerti`.`woID`  \n" +
                "			LEFT OUTER JOIN `component` AS `ca`  \n" +
                "			ON `wo`.`partID` = `ca`.`id` AND `ca`.`isDeleted`=0  \n" +
                "			LEFT JOIN rfq_rohsmst ro ON wo.RoHSStatusID = ro.id AND IFNULL(ro.isdeleted,0) = 0  \n" +
                "			AND `ro`.`isDeleted`=0  \n" +
                "			LEFT OUTER JOIN vu_workorder_salesorder_details  vusalesorderdet ON vusalesorderdet.woID = pwoID  \n" +
                "			LEFT OUTER JOIN mfgCodeMst mf ON ca.mfgcodeID = mf.id  \n" +
                "			LEFT JOIN vu_workorder_salesorder_details parentSaleDtl ON parentSaleDtl.woID = wo.terminateWOID  \n" +
                "		WHERE `wo`.`isDeleted`=0 AND `wo`.`woID` = pwoID;  \n" +
                "		-- GROUP BY `wo`.`woID` ;  \n" +
                "	ELSEIF(pwoID IS NOT NULL AND  pwoOPID IS NOT NULL ) THEN  \n" +
                "		SELECT  \n" +
                "			`wo`.`woID`, `wo`.`woNumber`, `wo`.`ECORemark`,`wo`.`woStatus`, `wo`.`woSubStatus`, `wo`.`isRevisedWO`,  \n" +
                "			`wo`.`isOperationTrackBySerialNo`,  \n" +
                "			(SELECT CONCAT(usr.firstName,' ',usr.lastName) FROM users usr WHERE id = `wo`.`createdBy`) AS fullNameOfWOCreatedUser ,  \n" +
                "			fun_getUserNameByID(`wo`.`createdBy`) AS initialNameOfWOCreatedUser  ,  \n" +
                "			(SELECT profileImg FROM employees WHERE id IN (SELECT employeeID FROM users WHERE id = `wo`.`createdBy`))AS profileImgOfWOCreatedUser ,  \n" +
                "			(SELECT COUNT(1) FROM workorder_trans_empinout woTransEmpinout  \n" +
                "				WHERE woTransEmpinout.isDeleted=0  \n" +
                "				AND woTransEmpinout.woID=pwoID  \n" +
                "				AND woTransEmpinout.checkinTime IS NOT NULL AND woTransEmpinout.checkoutTime IS NULL) AS isProductionRunning,  \n" +
                "			`wo`.`FCORemark`, `wo`.`buildQty`,`wo`.`woVersion`,  \n" +
                "			(SELECT COUNT(1) FROM eco_request a WHERE a.requestType = 1 AND a.isDeleted = 0 AND a.woID = wo.woID) AS ecoRequestCount,  \n" +
                "                        (SELECT COUNT(1) FROM eco_request a WHERE a.requestType = 2 AND a.isDeleted = 0 AND a.woID = wo.woID) AS dfmRequestCount,  \n" +
                "			`wo`.`isNoClean`, `wo`.`isWatersoluble` ,`wo`.`isFluxNotApplicable` , `wo`.`isClusterApplied`, `wo`.`isIncludeSubAssembly`, `wo`.`partID`,  \n" +
                "			 `wocerti`.woAllStandardsWithClass , `wo`.createdAt,  \n" +
                "			(SELECT GROUP_CONCAT(opNumber) opNumber FROM workorder_operation WHERE isDeleted=0  \n" +
                "				AND woID = `wo`.woID AND isNoClean = 1) isNoCleanOpNumbers ,  \n" +
                "			(SELECT GROUP_CONCAT(opNumber) opNumber FROM workorder_operation WHERE isDeleted=0  \n" +
                "				AND woID = `wo`.woID AND isWaterSoluble = 1) isWatersolubleOpNumbers ,  \n" +
                "			(SELECT GROUP_CONCAT(opNumber) opNumber FROM workorder_operation WHERE isDeleted=0  \n" +
                "				AND woID = `wo`.woID AND isFluxNotApplicable = 1) isFluxNotAppOpNumbers,  \n" +
                "			`woop`.opName , `woop`.opNumber, `woop`.opVersion, `woop`.opStatus,  `woop`.`opID`,  \n" +
                "			`woop`.isTeamOperation , `woop`.isRework, `woop`.isIssueQty,  \n" +
                "			`woop`.qtyControl , `woop`.isStopOperation, `woop`.isPreProgrammingComponent, `woop`.isMoveToStock,  \n" +
                "			`woop`.isPlacementTracking,  \n" +
                "			`woop`.isLoopOperation,  \n" +
                "			`woop`.isAllowFinalSerialMapping,  \n" +
                "			`woop`.isTrackBySerialNo,  `woop`.isEnablePreProgrammingPart ,  \n" +
                "			`woop`.colorCode,  \n" +
                "			`woop`.`isFluxNotApplicable` AS `opFluxNotApplicable`,  \n" +
                "			`woop`.`isNoClean` AS `opNoClean`,  \n" +
                "			`woop`.`isWaterSoluble` AS `opWaterSoluble`,  \n" +
                "			`ca`.`PIDCode`,  IFNULL(`vusalesorderdet`.`partDescription`,  `ca`.`mfgPNDescription`) AS partDescription,  \n" +
                "			`ca`.`liveVersion` AS liveVersion,  \n" +
                "			`ca`.`mfgPN`, `ca`.`nickName`, `ca`.`custAssyPN`, `ca`.`rev`,   `ca`.specialNote ,  \n" +
                "			`ca`.`RoHSStatusID`, `ca`.isCustom ,  \n" +
                "			`ca`.`isFluxNotApplicable` AS `assyFluxNotApplicable`,  \n" +
                "			`ca`.`isNoClean` AS `assyNoClean`,  \n" +
                "			`ca`.`isWaterSoluble` AS `assyWaterSoluble`,  \n" +
                "			`ro`.`rohsIcon`, ca.totalSolderPoints,`ro`.`name` AS `rohsName`,  \n" +
                "			`mf`.mfgType,  \n" +
                "			fun_getSamplePicturesUploadCount(`ca`.id) sampleImageCnt,  \n" +
                "			vusalesorderdet.totalPOQty, vusalesorderdet.POQtyValues soPOQty,/*wo-so-po-qty*/  \n" +
                "   			 vusalesorderdet.totalMRPQty, vusalesorderdet.MRPQtyValues soMRPQty,  \n" +
                "   			 CASE WHEN wo.isRevisedWO = 0 THEN  vusalesorderdet.poNumber  ELSE parentSaleDtl.poNumber END poNumber,  \n" +
                "			CASE WHEN wo.isRevisedWO = 0 THEN  vusalesorderdet.salesOrderNumber ELSE parentSaleDtl.salesOrderNumber END salesOrderNumber,  \n" +
                "			vusalesorderdet.lineID,  \n" +
                "   			 vusalesorderdet.salesOrderMstIDs, vusalesorderdet.SOPOQtyValues, /*so-po-qty*/  \n" +
                "   			  (CASE WHEN `wo`.isHotJob IS NOT NULL  \n" +
                "					THEN `wo`.isHotJob  \n" +
                "				ELSE vusalesorderdet.isHotJob  END) AS isHotJob,  \n" +
                "			 (SELECT wc.isParellelOperation FROM workorder_cluster wc  \n" +
                "				WHERE wc.clusterID  \n" +
                "					IN (SELECT clusterID FROM workorder_operation_cluster woc  \n" +
                "						WHERE woc.woopid=pwoOPID AND `woc`.isDeleted=0)  \n" +
                "				 AND wc.isDeleted=0 AND wc.woID = pwoID  \n" +
                "			) isParellelOperation,  \n" +
                "			(CASE WHEN `ca`.totalSolderPoints IS NOT NULL  \n" +
                "					THEN fun_calculateDPMOForWO(`wo`.woID)  \n" +
                "				ELSE NULL END) AS DPMO,  \n" +
                "			(SELECT GROUP_CONCAT(CONCAT(wodr.woNumber, \"-\", wodr.woVersion, \"######\", wodr.woID)) FROM workorder wodr WHERE wodr.woID  \n" +
                "				IN (SELECT parentWOID FROM workorder_main_assembly_mapping_details  \n" +
                "				WHERE refWOID = pwoID)  \n" +
                "			) AS parentWorkorders  ,  \n" +
                "			wo.terminateWOID refWOId,  \n" +
                "			fun_getWorkorderNumberWithRevByID(wo.terminateWOID) refWONumber,  \n" +
                "			fun_getOperationNameByWOOPID(wo.terminateWOOPID) terminatedFromOp,  \n" +
                "			fun_getRequireMachineVerificationLogicalValue(woop.woOPID,wo.partID) requireMachineVerification ,  \n" +
                "			wo.customerID,  \n" +
                "			fun_GetFormattedMfgCode(mf.mfgCode,mf.mfgName,vMfgNameFormat)  formattedCustomerName  \n" +
                "		FROM workorder AS `wo`  \n" +
                "			LEFT OUTER JOIN  \n" +
                "				(SELECT a.woID, GROUP_CONCAT(b.fullName ,' ' , CASE WHEN a.classIDs IS NULL THEN ''  \n" +
                "								ELSE (SELECT GROUP_CONCAT(IFNULL(className,''), '######', IFNULL(colorCode,'')) FROM standard_class WHERE classID = a.classIDs) END  \n" +
                "								ORDER BY b.priority IS NULL,b.priority ASC, b.fullName ASC SEPARATOR '@@@@@@') woAllStandardsWithClass  \n" +
                "				FROM `workorder_certification` a  \n" +
                "				JOIN certificate_standards b ON a.certificateStandardID = b.certificateStandardID  \n" +
                "				 WHERE a.isDeleted=0 AND a.woID = pwoID  \n" +
                "				GROUP BY a.woID  \n" +
                "				) AS `wocerti`  \n" +
                "			ON `wo`.`woID` = `wocerti`.`woID`  \n" +
                "			LEFT OUTER JOIN `workorder_operation` AS `woop`  \n" +
                "			ON `wo`.`woID` = `woop`.`woID` AND `woop`.isDeleted=0 AND `woop`.`woOPID` = pwoOPID  \n" +
                "			LEFT OUTER JOIN `component` AS `ca`  \n" +
                "			ON `wo`.`partID` = `ca`.`id` AND `ca`.isDeleted=0  \n" +
                "			LEFT JOIN rfq_rohsmst ro ON wo.RoHSStatusID = ro.id AND IFNULL(ro.isdeleted,0) = 0  \n" +
                "			AND `ro`.isDeleted=0  \n" +
                "			LEFT OUTER JOIN vu_workorder_salesorder_details  vusalesorderdet ON vusalesorderdet.woID = pwoID  \n" +
                "			LEFT OUTER JOIN mfgCodeMst mf  ON ca.mfgcodeID = mf.id  \n" +
                "			LEFT JOIN vu_workorder_salesorder_details parentSaleDtl ON parentSaleDtl.woID = wo.terminateWOID  \n" +
                "				WHERE `wo`.isDeleted=0 AND `wo`.`woID` = pwoID ;  \n" +
                "		-- GROUP BY `wo`.`woID` ;  \n" +
                "	END IF ;  \n" +
                "  \n" +
                "	/********************************* 2.current data ****************************************************/  \n" +
                "	CALL Sproc_GetWoOPTimeConsumptionDet (pWOOPID, NULL);  \n" +
                "	/********************************* 2.current data ****************************************************/  \n" +
                "  \n" +
                "	-- IF(IFNULL(pwoTransID,0) > 0) THEN  \n" +
                "		/********************************** 3.current data ***************************************************/  \n" +
                "		CALL Sproc_GetWoOPTimeConsumptionDet (pWOOPID, pwoTransID);  \n" +
                "		/********************************** 3.current data ***************************************************/  \n" +
                "        -- END IF;  \n" +
                "  \n" +
                "	# last ECO request data  \n" +
                "        SELECT * FROM eco_request WHERE requestType = 1 AND isDeleted = 0 AND woID = pwoID ORDER BY ecoReqID DESC LIMIT 1;  \n" +
                "        # last DFM request data  \n" +
                "        SELECT * FROM eco_request WHERE requestType = 2 AND isDeleted = 0 AND woID = pwoID ORDER BY ecoReqID DESC LIMIT 1;  \n" +
                "  \n" +
                "        # is export controlled assembly  \n" +
                "        SELECT (CASE WHEN  \n" +
                "	(SELECT COUNT(1) FROM certificate_standards  \n" +
                "	WHERE isDeleted=0  \n" +
                "	AND isExportControlled = 1  \n" +
                "	AND certificateStandardID IN (	SELECT certificateStandardID FROM component_standard_details  \n" +
                "					WHERE isDeleted=0  \n" +
                "					AND componentID IN (  \n" +
                "								SELECT DISTINCT mfgPNID AS partMasterID FROM rfq_lineitems_alternatepart  \n" +
                "								WHERE isDeleted=0  \n" +
                "								AND partID IN (SELECT prPerPartID FROM part_sub_assy_relationship  \n" +
                "										WHERE isDeleted=0 AND partID = pwoAssyID)  \n" +
                "								UNION  \n" +
                "								SELECT DISTINCT partID AS partMasterID FROM workorder_operation_part  \n" +
                "								WHERE isDeleted=0 AND woID = pwoID  \n" +
                "								UNION  \n" +
                "								SELECT DISTINCT pwoAssyID AS partMasterID  \n" +
                "							   )  \n" +
                "					) > 0) THEN 1  \n" +
                "		ELSE 0 END) AS isExportControlledAssembly  ;  \n" +
                "  \n" +
                "  \n" +
                "	#  7. get wo op empl wise total time consumption details  \n" +
                "	# include both setup and production activity  \n" +
                "	CALL Sproc_GetWOOPEmpWiseTotTimeConsumptionDet(pWOOPID, pemployeeIDOfWOOP);  \n" +
                "  END;  \n" +
                /* **************************** Add Script Version ->  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1253,'1.00','V1','WO Header SP Refactor, Bug 40021: MFR code data key should working properly in work order. - VS '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1253:
            allDbChangesArray.push(
                /* **************************** New Script -> 04-01-2022  *********************************** */
                "alter table customer_packingslip_det add releaseNotes text ;  \n" +
                /* **************************** Add Script Version -> 04-01-2022   *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1254,'1.00','V1','Add releaseNotes field in customer_packingslip_det table- User Story 39013: Add CPS Popup && shipment Summary Details Improvement - Shweta '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1254:
            allDbChangesArray.push(
                /* **************************** New Script -> 04-01-2022  *********************************** */
                "drop function if exists fun_getPOTypeByID;  \n" +
                "CREATE FUNCTION `fun_getPOTypeByID`(  \n" +
                "pSOId INT  \n" +
                ") RETURNS varchar(200) CHARSET utf8mb4  \n" +
                "BEGIN  \n" +
                "	DECLARE vReturn VARCHAR(200);  \n" +
                "	SELECT (CASE WHEN isRmaPo THEN 'RMA PO'  \n" +
                "			WHEN  isBlanketPO THEN 'Blanket PO'  \n" +
                "            WHEN isLegacyPO THEN 'Legacy PO'  \n" +
                "            ELSE '' END) INTO vReturn  \n" +
                "	FROM salesordermst  \n" +
                "    WHERE isDeleted = 0  \n" +
                "    AND id = pSOId;  \n" +
                "RETURN vReturn;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 04-01-2022   *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1255,'1.00','V1','fun_getPOTypeByID -User Story 39013: Add CPS Popup && shipment Summary Details Improvement - Shweta '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1255:
            allDbChangesArray.push(
                /* **************************** New Script -> 04-01-2022  *********************************** */
                "DROP PROCEDURE IF EXISTS Sproc_AddCustomerPackingSlip;  \n" +
                "CREATE PROCEDURE `Sproc_AddCustomerPackingSlip`(  \n" +
                "	IN pCPSData JSON,  \n" +
                "    IN puserID INT,  \n" +
                "	IN puserRoleID INT ,  \n" +
                "	IN pSystemId VARCHAR(20),  \n" +
                "	IN pPackingSlipId INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE vTermsDays INT ;  \n" +
                "	DECLARE v_incrementI INT;  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_customer_packingslip;  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_customer_packingslip AS  \n" +
                "	SELECT 	*  \n" +
                "	FROM 	JSON_TABLE(  \n" +
                "			pCPSData,  \n" +
                "			\"$[*]\" COLUMNS(  \n" +
                "				`transType` VARCHAR(5) PATH \"$.transType\",  \n" +
                "				`packingSlipType` INT PATH \"$.packingSlipType\",  \n" +
                "				`customerID` INT PATH \"$.customerID\" ,  \n" +
                "				`status` INT PATH \"$.status\",  \n" +
                "				`subStatus` INT PATH \"$.subStatus\",  \n" +
                "				`refSalesOrderID` INT PATH \"$.refSalesOrderID\",  \n" +
                "				`poNumber` VARCHAR(50) PATH \"$.poNumber\",  \n" +
                "				`poDate` DATE PATH \"$.poDate\",  \n" +
                "				`soNumber` VARCHAR(50) PATH \"$.soNumber\",  \n" +
                "				`soDate` DATE PATH \"$.soDate\",  \n" +
                "				`sorevision` VARCHAR(50) PATH \"$.sorevision\" ,  \n" +
                "				`packingSlipNumber` VARCHAR(50) PATH \"$.packingSlipNumber\" ,  \n" +
                "				`packingSlipDate` DATE PATH \"$.packingSlipDate\" ,  \n" +
                "				`shippingMethodID` INT PATH \"$.shippingMethodID\",  \n" +
                "				`headerComment` TEXT PATH \"$.headerComment\" ,  \n" +
                "				`packingSlipComment` TEXT PATH \"$.packingSlipComment\" ,  \n" +
                "				`billingAddress` TEXT PATH \"$.billingAddress\" ,  \n" +
                "				`shippingAddress` TEXT PATH \"$.shippingAddress\" ,  \n" +
                "				`intermediateAddress` TEXT PATH \"$.intermediateAddress\" ,  \n" +
                "				`billToId` INT PATH \"$.billToId\" ,  \n" +
                "				`shipToId` INT PATH \"$.shipToId\" ,  \n" +
                "				`intermediateShipmentId` INT PATH \"$.intermediateShipmentId\" ,  \n" +
                "				`totalAmount` DECIMAL(18,6) PATH \"$.totalAmount\" ,  \n" +
                "				`freeOnBoardId` INT PATH \"$.freeOnBoardId\" ,  \n" +
                "				`termsId` INT PATH \"$.termsId\" ,  \n" +
                "				`salesCommissionTo` INT PATH \"$.salesCommissionTo\" ,  \n" +
                "				`contactPersonId` INT PATH \"$.contactPersonId\",  \n" +
                "				`revision` TEXT PATH \"$.revision\",  \n" +
                "				`isZeroValue` TINYINT PATH \"$.isZeroValue\",  \n" +
                "				`isAlreadyPublished` TINYINT PATH \"$.isAlreadyPublished\",  \n" +
                "				`poRevision` VARCHAR(50) PATH \"$.poRevision\" ,  \n" +
                "				`isAskForVersionConfirmation` TINYINT PATH \"$.isAskForVersionConfirmation\"  \n" +
                "			)  \n" +
                "		) AS CustPS_JT;  \n" +
                "  \n" +
                "		INSERT INTO customer_packingslip(customerID,packingSlipType,transType,`status`,refSalesOrderID,  \n" +
                "				poNumber,poDate,soNumber,soDate,packingSlipNumber,  \n" +
                "				packingSlipDate,shippingMethodID,  \n" +
                "				packingSlipComment,headerComment,sorevision,  \n" +
                "				freeOnBoardId,createdBy,updatedBy,createByRoleId, createdAt,updatedAt,  \n" +
                "				updateByRoleId,packingSlipStatus,systemID, termsID,salesCommissionTo,  \n" +
                "				billingAddress,shippingAddress,intermediateAddress ,subStatus,  \n" +
                "				totalAmount,  \n" +
                "				billToId,shipToId ,intermediateShipmentId,  \n" +
                "				contactPersonId, revision, isZeroValue ,isAlreadyPublished, poRevision,isAskForVersionConfirmation)  \n" +
                "		SELECT customerID,packingSlipType,transType,`status`,refSalesOrderID,  \n" +
                "					poNumber,poDate,soNumber,soDate,packingSlipNumber,  \n" +
                "					packingSlipDate,shippingMethodID,  \n" +
                "					packingSlipComment,headerComment,sorevision,freeOnBoardId,  \n" +
                "					puserID,puserID,puserRoleID,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime() ,  \n" +
                "					puserRoleID,'W' , pSystemId, termsID ,salesCommissionTo,  \n" +
                "					billingAddress, shippingAddress, intermediateAddress,subStatus ,  \n" +
                "					totalAmount,  \n" +
                "					billToId,shipToId ,intermediateShipmentId ,  \n" +
                "					contactPersonId,  revision, isZeroValue, isAlreadyPublished, poRevision ,0  \n" +
                "		FROM temp_customer_packingslip ;  \n" +
                "  \n" +
                "		SET pPackingSlipId=LAST_INSERT_ID();  \n" +
                "		--  Response 0  \n" +
                "        SELECT pPackingSlipId packingSlipId;  \n" +
                "  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_customer_packingslip;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 04-01-2022   *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1256,'1.00','V1','Sproc_AddCustomerPackingSlip-User Story 39013: Add CPS Popup && shipment Summary Details Improvement - Shweta '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1256:
            allDbChangesArray.push(
                /* **************************** New Script -> 04-01-2022  *********************************** */
                "DROP PROCEDURE IF EXISTS Sproc_GetCustomerInvoiceDetail;  \n" +
                "CREATE PROCEDURE `Sproc_GetCustomerInvoiceDetail`(  \n" +
                "	IN invoiceID INT      ,  \n" +
                "    IN pTransType VARCHAR(5)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE vDateTimeDisplayFormat VARCHAR(100);  \n" +
                "	DECLARE vTimeZone VARCHAR(50);  \n" +
                "  \n" +
                "		SELECT fun_getTimeZone() INTO vTimeZone;  \n" +
                "		SELECT fun_getDateTimeFormat() INTO vDateTimeDisplayFormat;  \n" +
                "	                 SELECT inv.id,   inv.transType,  \n" +
                "						inv.packingSlipNumber,inv.packingSlipDate,  \n" +
                "                        -- (SELECT packing.id FROM customer_packingSlip packing WHERE packing.refCustInvoiceID = inv.id AND packing.isDeleted = 0) packingSlipID,  \n" +
                "                        cps.id packingSlipID,  \n" +
                "						inv.refSalesOrderId  ,  \n" +
                "                        inv.systemID,  \n" +
                "						fun_getMfgCodeAndNameByID(inv.customerID) customerName,  \n" +
                "                        fun_getMfgNameByID(inv.customerID) customerNameOnly,  \n" +
                "                        inv.customerID,inv.poNumber,inv.poDate, inv.poRevision,  \n" +
                "						inv.soNumber,inv.soDate,  \n" +
                "                        inv.packingSlipType,inv.`status`,  \n" +
                "                        fun_getGenericCategoryCodeNameByID(inv.shippingMethodId) shippingMethod,inv.shippingMethodId,  \n" +
                "						inv.shipToId,inv.contactPersonId,inv.intermediateShipmentId, inv.billToId,  \n" +
                "						inv.invoiceNumber,inv.invoiceDate,  \n" +
                "                        inv.headerComment  ,   inv.packingSlipComment,  \n" +
                "						inv.freeOnBoardId,inv.salesCommissionTo,  \n" +
                "						CONCAT('(',fun_getEmployeeInitialNameByEmpID(inv.salesCommissionTo),') ',fun_getEmployeeNameByEmpID(inv.salesCommissionTo) ) salesCommName,  \n" +
                "						fun_getFOBById(inv.freeOnBoardId) FOBName,  \n" +
                "						fun_getGenericCategoryNameByID(inv.termsId) terms, inv.termsId,  \n" +
                "                        inv.intermediateShipmentId ,  \n" +
                "						inv.billingAddress,  \n" +
                "						inv.shippingAddress,  \n" +
                "						inv.intermediateAddress,  \n" +
                "                        inv.isLocked,  \n" +
                "                        inv.subStatus,  \n" +
                "                        inv.paymentStatus,  \n" +
                "                        inv.packingSlipType,  \n" +
                "                        fun_getUserNameByID(inv.lockedBy) lockedBy ,  \n" +
                "						fun_ApplyCommonDateTimeFormatByParaValue(inv.lockedAt,vTimeZone,vDateTimeDisplayFormat) lockedAt,  \n" +
                "                        inv.creditMemoNumber, inv.creditMemoDate, inv.isMarkForRefund , inv.agreedRefundAmt ,  \n" +
                "						inv.refDebitMemoNumber, inv.refDebitMemoDate,   inv.rmaNumber,  \n" +
                "                        (CASE WHEN inv.packingSlipType = 1 THEN 'MISC' WHEN inv.packingSlipType = 2 THEN 'PO/SO' END) packingSlipTypeText,  \n" +
                "                        (CASE WHEN inv.packingSlipType = 1 OR inv.packingSlipType = 2  THEN 'Invoice' WHEN inv.packingSlipType = 3 THEN 'MISC Invoice' ELSE null END) invoiceTypeText,  \n" +
                "                        inv.isZeroValue,  \n" +
                "                        inv.revision,  \n" +
                "                        cps.subStatus packingSlipSubStatus,  \n" +
                "                        (CASE WHEN cps.subStatus = 5 AND (inv.subStatus = 4 OR inv.subStatus = 5) THEN CONCAT( fun_getCustomerInvoiceSubStatusName(cps.subStatus, 'P'),' - ', fun_getCustomerInvoiceSubStatusName(inv.subStatus, 'I'))  \n" +
                "						ELSE '' END) materialStatus ,  \n" +
                "                        inv.isAlreadyPublished ,  \n" +
                "			fun_getMfgCodeByID(inv.customerID) customerCodeOnly,  \n" +
                "			cps.revision packingSlipVersion,  \n" +
                "			(CASE WHEN inv.transType = 'I' THEN get_totalCustomerInvoiceReceivedAmountById(inv.id)  \n" +
                "					WHEN inv.transType='C' THEN fun_getTotalCustomerCreditMemoAppliedAmountById(inv.id)  \n" +
                "			ELSE NULL END) receivedAmount,  \n" +
                "			(SELECT psip.id FROM packingslip_invoice_payment psip WHERE psip.refCustCreditMemoID=invoiceID AND psip.refPaymentMode = 'CA'  \n" +
                "								AND psip.isDeleted = 0 AND psip.isPaymentVoided = 0) custPaymentMstID,  \n" +
                "			(CASE WHEN inv.transType = 'C' THEN  \n" +
                "					(SELECT SUM(paymentAmount) FROM packingslip_invoice_payment_det WHERE refRefundCustCreditMemoID = inv.id  \n" +
                "							AND isDeleted = 0 AND isPaymentVoided = 0)  \n" +
                "				ELSE NULL END) AS totRefundIssuedAgainstCreditMemo ,  \n" +
                "			(CASE WHEN inv.transType = 'I' THEN  fun_getPaymentStatusByCustPackingSlipSubStatus(inv.subStatus,inv.transType,inv.paymentStatus,'CODE')  \n" +
                "				END) AS paymentStatusCode,  \n" +
                "			inv.refundStatus,  \n" +
                "			(CASE WHEN inv.transType = 'C' THEN fun_getCustCreditMemoRefundStatusTextByValue(inv.refundStatus)  \n" +
                "				ELSE NULL END) AS creditMemoRefundStatusText ,  \n" +
                "				sm.isRmaPO,  \n" +
                "				sm.isLegacyPO,  \n" +
                "			fun_getUserNameByID(inv.updatedBy) updatedByInitial,  \n" +
                "			fun_getEmployeeIDByUserID(inv.updatedBy) updatedByEmp,  \n" +
                "			fun_getUserNameByID(inv.createdBy) createdByInitial,  \n" +
                "			fun_getEmployeeIDByUserID(inv.createdBy) createdByEmp,  \n" +
                "			inv.isAskForVersionConfirmation,  \n" +
                "                        fun_ApplyCommonDateTimeFormatByParaValue(inv.createdAt,vTimeZone,vDateTimeDisplayFormat) createdAt,  \n" +
                "                        fun_ApplyCommonDateTimeFormatByParaValue(inv.updatedAt,vTimeZone,vDateTimeDisplayFormat) updatedAt  ,  \n" +
                "                        fun_getPOTypeByID(inv.refSalesOrderId) poType  \n" +
                "		FROM customer_packingslip inv  \n" +
                "                 LEFT JOIN customer_packingslip cps ON cps.refCustInvoiceID = inv.id AND cps.isDeleted = 0  AND cps.transType = 'P'  \n" +
                "                 LEFT JOIN salesordermst sm ON sm.id=cps.refSalesOrderId AND sm.isdeleted=0  \n" +
                "                 WHERE inv.id = invoiceID  \n" +
                "                 AND inv.transType = pTransType  \n" +
                "                 AND inv.isDeleted = 0;  \n" +
                "  \n" +
                "  \n" +
                "				 SELECT cpd.refSalesorderDetid,  \n" +
                "					cpd.id,  \n" +
                "                    cpd.refCustPackingSlipID,  \n" +
                "					cpd.custPOLineID,  \n" +
                "					cpd.reflineID AS packingSlipSerialNumber,  \n" +
                "                    cpd.lineID,  \n" +
                "                    co.PIDCode,  \n" +
                "                    co.mfgcodeID,  \n" +
                "                    ss.releaseNumber,  \n" +
                "                    fun_getMfgCodeAndNameByID(co.mfgcodeID) mfgName,  \n" +
                "					co.mfgpn,  \n" +
                "                    fun_getRoHSIconByPartID(cpd.partId) rohsIcon,  \n" +
                "					fun_getRoHSNameByPartID(cpd.partId) rohsName,  \n" +
                "                    cpd.partId,  \n" +
                "                    cpd.refChargesTypeID,  \n" +
                "					#(select c.partType from component c where c.isDeleted = 0 and c.id = partId) partType,  \n" +
                "					cpd.shipQty,cpd.unitPrice,cpd.extendedPrice,  \n" +
                "                    fun_getGenericCategoryNameByID(cpd.refChargesTypeID) othercharge,  \n" +
                "                    #(IFNULL(shipQty,0)*IFNULL(unitPrice,0)) extPrice,  \n" +
                "                    CASE WHEN co.partType = 4 THEN FALSE ELSE TRUE END materialType,  \n" +
                "                    othercharges AS lineOtherCharges,  \n" +
                "                    (IFNULL(cpd.otherCharges,0)+ IFNULL(cpd.extendedPrice,0)) totalExtPrice,  \n" +
                "					cpd.shippingNotes,  \n" +
                "                    cpd.internalComment,  \n" +
                "                    cpd.assyDescription,  \n" +
                "					fun_getUserNameByID(cpd.updatedBy) updatedby,  \n" +
                "					fun_getUserNameByID(cpd.createdBy) createdby,  \n" +
                "					fun_getRoleByID(cpd.createByRoleId) createdbyRole,  \n" +
                "					fun_getRoleByID(cpd.updateByRoleId) updatedbyRole ,  \n" +
                "                    fun_ApplyCommonDateTimeFormatByParaValue(cpd.createdAt,vTimeZone,vDateTimeDisplayFormat) createdAt,  \n" +
                "					fun_ApplyCommonDateTimeFormatByParaValue(cpd.updatedAt,vTimeZone,vDateTimeDisplayFormat) updatedAt ,  \n" +
                "                    (SELECT sod.quoteNumber FROM  salesorderdet sod WHERE sod.id = refSalesorderDetid AND sod.isDeleted = 0) quoteNumber,  \n" +
                "                    co.partType,  \n" +
                "                    vu.packingLineID,  \n" +
                "                    (CASE WHEN vu.packingDetID IS NOT NULL THEN 1 ELSE 0 END) isFromPackingSlip,  \n" +
                "                    co.isCustom, co.isCPN , co.nickName ,  \n" +
                "                    (SELECT GROUP_CONCAT(cert.fullName)FROM  certificate_standards cert  \n" +
                "						WHERE cert.certificateStandardID IN (SELECT compstd.certificateStandardID  \n" +
                "							FROM component_standard_details compstd WHERE compstd.componentID = co.id AND compstd.isDeleted= 0) )componentStandardList,  \n" +
                "					quoteFrom,refAssyQtyTurnTimeID,quoteNumber,refRFQGroupID,refRFQQtyTurnTimeID,  \n" +
                "                    (CASE WHEN quoteFrom = 1 THEN 'From RFQ' WHEN quoteFrom = 3 THEN 'N/A' WHEN quoteFrom = 2 THEN 'From Part Master' ELSE '' END) quoteFromText ,  \n" +
                "                    IFNULL(assyQtyTurnTimeText, (SELECT CONCAT( '(',rfqAssyQty.requestQty,')',  rfqAssyTurn.turnTime,' ', CASE WHEN rfqAssyTurn.unitOfTime='B' THEN 'Bussiness Days'  \n" +
                "																		WHEN rfqAssyTurn.unitOfTime='D' THEN 'Week Days'  \n" +
                "                                                                        WHEN rfqAssyTurn.unitOfTime='W' THEN 'Week' END )  \n" +
                "					FROM rfq_assy_quantity_turn_time rfqAssyTurn  \n" +
                "					JOIN rfq_assy_quantity rfqAssyQty ON rfqAssyQty.id = rfqAssyTurn.rfqAssyQtyID AND  rfqAssyQty.isDeleted = 0  \n" +
                "                    WHERE rfqAssyTurn.id = cpd.refRFQQtyTurnTimeID AND rfqAssyTurn.isDeleted = 0)) assyQtyTurnTimeText,  \n" +
                "                    cpd.isZeroValue,  \n" +
                "                    fun_getIntToText(cpd.isZeroValue) isZeroValueConverted  \n" +
                "                    ,cpd.releaseNotes  \n" +
                "				 FROM customer_packingslip_det cpd  \n" +
                "                 LEFT JOIN COMPONENT co ON co.id = cpd.partId AND co.isDeleted = 0  \n" +
                "                 LEFT JOIN salesshippingmst ss ON ss.shippingId=cpd.shippingId AND ss.isdeleted=0  \n" +
                "                 LEFT JOIN vu_inv_ps_so_line_detail vu ON vu.invDetId= cpd.id AND vu.invoiceId = cpd.refCustPackingSlipId  \n" +
                "                 WHERE cpd.refCustPackingSlipID = invoiceID AND cpd.isdeleted=0  \n" +
                "                 ORDER BY cpd.lineID ASC;  \n" +
                "  \n" +
                "                 SELECT cpOther.id,  \n" +
                "						cpOther.refCustomerPackingSlipDetID,  \n" +
                "						cpOther.partID,  \n" +
                "						fun_getMFGPNByID(cpOther.partID) mfgPN,  \n" +
                "                        fun_getRoHSIconByPartID(cpOther.partID) rohsIcon,  \n" +
                "                        fun_getRoHSNameByPartID(cpOther.partID) rohsName,  \n" +
                "                        cpOther.qty,  \n" +
                "                        cpOther.price,  \n" +
                "                        cpOther.lineComment,  \n" +
                "                         cpOther.lineInternalComment,  \n" +
                "                        (IFNULL(cpOther.qty,0)*IFNULL(cpOther.price,0)) extOtherPrice,  \n" +
                "                        cpOther.frequency ,  \n" +
                "						(CASE  	WHEN (cpOther.frequency = 1) THEN 'Every'  \n" +
                "								WHEN (cpOther.frequency = 2) THEN 'First'  \n" +
                "								WHEN (cpOther.frequency = 3) THEN  'Last'  \n" +
                "								ELSE ''  \n" +
                "						END) AS frequencyName,  \n" +
                "			cpOther.frequencyType,  \n" +
                "			  (CASE  	WHEN (cpOther.frequencyType = 1) THEN 'Release'  \n" +
                "								WHEN (cpOther.frequencyType = 2) THEN 'Shipment'  \n" +
                "								ELSE ''  \n" +
                "						END) AS frequencyTypeName  \n" +
                "                 FROM customer_packingslip_otherexpense_details cpOther  \n" +
                "                 JOIN customer_packingslip_det cpd ON cpd.id = cpOther.refCustomerPackingSlipDetId AND cpd.isDeleted = 0  \n" +
                "                 WHERE cpd.refCustPackingSlipId = invoiceID  \n" +
                "                 AND cpOther.isdeleted=0;  \n" +
                "  \n" +
                "                  --  Tracking Number  \n" +
                "                SELECT id,trackNumber  \n" +
                "                FROM customer_packing_slip_track_number  \n" +
                "                WHERE refCustPackingSlipID = invoiceID  \n" +
                "                AND isDeleted = 0;  \n" +
                "  \n" +
                "                -- sales commission attribute  \n" +
                "                SELECT cca.id,  \n" +
                "		    cca.refCustPackingSlipDetID,  \n" +
                "                    cca.unitPrice,  \n" +
                "                    cca.commissionPercentage,  \n" +
                "                    cca.commissionValue,  \n" +
                "                    cca.quoted_commissionPercentage,  \n" +
                "                    cca.quoted_commissionValue,  \n" +
                "                    cca.poQty,  \n" +
                "                    cca.partId,  \n" +
                "                    cca.quotedQty,  \n" +
                "                    cca.type,  \n" +
                "                    cca.rfqAssyID,  \n" +
                "                    cca.commissionCalculateFrom,  \n" +
                "                    cca.salesCommissionNotes,  \n" +
                "                    cca.refComponentSalesPriceBreakID,  \n" +
                "                    cca.quoted_unitPrice  \n" +
                "				FROM customer_packingslip_commission_attribute_mstdet cca  \n" +
                "                 JOIN customer_packingslip_det cpd ON cpd.id = cca.refCustPackingSlipDetID AND cpd.isDeleted = 0  \n" +
                "                 WHERE cpd.refCustPackingSlipId = invoiceID  \n" +
                "                 AND cca.isdeleted=0;  \n" +
                "                 -- sales commission child attribute  \n" +
                "                SELECT cca.id,  \n" +
                "		    cca.refCustPackingSlipDetID,  \n" +
                "		    cca.refcustInvoiceCommissionID,  \n" +
                "                    cca.unitPrice,  \n" +
                "                    cca.refQuoteAttributeId,  \n" +
                "                    cca.commissionPercentage,  \n" +
                "                    cca.commissionValue,  \n" +
                "                    cca.org_commissionPercentage,  \n" +
                "                    cca.org_commissionValue,  \n" +
                "                    cca.category,  \n" +
                "                    cca.partId,  \n" +
                "                    cca.refComponentSalesPriceBreakID,  \n" +
                "                    cca.org_unitPrice,  \n" +
                "                    (cca.commissionValue * cpd.shipQty) extendedCommissionValue,  \n" +
                "                    (cca.org_commissionValue * cpd.shipQty) extendedOrgCommissionValue,  \n" +
                "                    IFNULL(qd.fieldName,'Sales Commission') fieldName  \n" +
                "				FROM customer_packingslip_commission_attribute cca  \n" +
                "                 JOIN customer_packingslip_det cpd ON cpd.id = cca.refCustPackingSlipDetID AND cpd.isDeleted = 0  \n" +
                "                 LEFT JOIN quotecharges_dynamic_fields_mst qd ON cca.refQuoteAttributeId = qd.id  AND qd.isDeleted = 0  \n" +
                "                 WHERE cpd.refCustPackingSlipId = invoiceID  \n" +
                "                 AND cca.isdeleted=0;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 04-01-2022   *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1257,'1.00','V1','Sproc_GetCustomerInvoiceDetail-User Story 39013: Add CPS Popup && shipment Summary Details Improvement - Shweta '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1257:
            allDbChangesArray.push(
                /* **************************** New Script -> 04-01-2022  *********************************** */
                "DROP PROCEDURE IF EXISTS Sproc_GetCustomerInvoiceReportDetails;  \n" +
                "CREATE PROCEDURE `Sproc_GetCustomerInvoiceReportDetails`(  \n" +
                "	IN cpID INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE vReceivedAmt  DECIMAL(18,6);  \n" +
                "    # Customer Invoice Master table details  \n" +
                "    SELECT  cp.id,  \n" +
                "		cp.invoiceNumber,  \n" +
                "        cp.invoiceDate,  \n" +
                "		cp.packingSlipNumber,  \n" +
                "		cp.packingSlipDate,  \n" +
                "		cp.poDate,  \n" +
                "		cp.poNumber,  \n" +
                "        cp.poRevision,  \n" +
                "		mg.customerSystemID,  \n" +
                "		mg.accountRef,  \n" +
                "		cp.packingSlipComment,  \n" +
                "        cp.status,  \n" +
                "		(SELECT GROUP_CONCAT(cpt.trackNumber SEPARATOR '  \n" +
                "') FROM customer_packing_slip_track_number cpt WHERE cpt.isDeleted = 0 AND cpt.refCustPackingSlipID = cpID) AS trackingNumber,  \n" +
                "		fun_getDueDate(cp.invoiceDate,cp.termsID) AS dueDate,  \n" +
                "        cp.billingAddress,  \n" +
                "        cp.shippingAddress,  \n" +
                "        cp.intermediateAddress,  \n" +
                "		IFNULL(FUN_GETEMPLOYEENAMEBYEMPID(cp.salesCommissionTo),'-') AS salesPerson,  \n" +
                "        IFNULL(gcs.gencCategoryName,' - ') AS shippingMethod,  \n" +
                "		IFNULL(gcp.gencCategoryName,' - ') AS paymentMethod,  \n" +
                "        IFNULL(FUN_GETFOBBYID(cp.freeOnBoardId), ' - ') AS freeOnBoard,  \n" +
                "        cp.systemID AS legalnumber,  \n" +
                "        fun_getUserNameByID(cp.updatedBy)AS  preparedBy,  \n" +
                "		us.emailAddress,  \n" +
                "		emp.phExtension,  \n" +
                "        cp.revision invoiceVersion,  \n" +
                "        '1.00' AS docNumber,  \n" +
                "        subStatus  \n" +
                "		FROM customer_packingslip cp  \n" +
                "		JOIN mfgcodemst mg ON mg.id=cp.customerID  \n" +
                "                LEFT JOIN  \n" +
                "    genericcategory gcs ON gcs.gencCategoryID = cp.shippingMethodId  \n" +
                "        AND gcs.isDeleted = 0  \n" +
                "           LEFT JOIN  \n" +
                "	genericcategory gcp ON gcp.gencCategoryID = cp.termsID  \n" +
                "        AND gcp.isDeleted = 0  \n" +
                "     LEFT JOIN users us ON us.id = cp.updatedBy  \n" +
                "	 LEFT JOIN employees emp ON emp.id = us.employeeID  \n" +
                "	WHERE cp.id=cpID AND cp.isDeleted = 0 LIMIT 1;  \n" +
                "  \n" +
                "	# Customer Invoice line level details  \n" +
                "	SELECT  \n" +
                "		cpd.id,  \n" +
                "		cpd.partId,  \n" +
                "		cpd.id AS refDetID,  \n" +
                "		cpd.lineID,  \n" +
                "		IFNULL(ss.releaseNumber,'') releaseNumber,  \n" +
                "		IFNULL(cpd.custPOLineID,'')   custPOLineID,  \n" +
                "        c.iscustom,  \n" +
                "        c.partType,  \n" +
                "        (CASE  WHEN (c.partType IS NULL OR c.partType = '') THEN  \n" +
                "			fun_getGenericCategoryNameByID(cpd.refChargesTypeID)  \n" +
                "		  WHEN (c.iscustom=1) THEN  \n" +
                "			c.custAssyPN  \n" +
                "		  WHEN (c.iscustom = 0 AND (c.partType = 2 OR c.partType = 4)) THEN  \n" +
                "			c.mfgPN  \n" +
                "        ELSE  \n" +
                "			  ''  \n" +
                "			END) AS mfgPN ,  \n" +
                "		 (CASE  WHEN (c.partType IS NULL OR c.partType = '') THEN  \n" +
                "			'Other Charges'  \n" +
                "		ELSE  \n" +
                "			fun_getMfgNameByPartID(cpd.partId)  \n" +
                "			END) AS  mfgName,  \n" +
                "		IFNULL(c.rev, '') AS revision,  \n" +
                "		IFNULL(fun_getUOMAbbreviationByID(c.uom),'') uom,  \n" +
                "		cpd.shipQty AS qty,  \n" +
                "		IFNULL(cpd.unitPrice,0) AS price,  \n" +
                "		IFNULL(cpd.extendedPrice,0) extPrice,  \n" +
                "		CONCAT(  \n" +
                "		IFNULL(replace(cpd.assyDescription,'\n','<br/>'), ''),'<br/>',  \n" +
                "                IFNULL(CONCAT(' ', fun_getRoHSNameByPartID(cpd.partId)), ''),  \n" +
                "                IFNULL(CONCAT(', ',  \n" +
                "                            fun_getCertificationByPartID(cpd.partid)),  \n" +
                "                    ''),  \n" +
                "            IFNULL(CONCAT(', HTS Code: ', c.htsCode), ''),  \n" +
                "            IFNULL(CONCAT(', COO: ', c.countryOfOrigin), ''),  \n" +
                "            CASE WHEN (IFNULL(cpd.shippingNotes,'') <>'') THEN '<br/><br/>' ELSE '' END,  \n" +
                "            IFNULL(replace(cpd.shippingNotes,'\n','<br/>'),'')) AS DESCRIPTION  ,  \n" +
                "		IFNULL(replace(cpd.releaseNotes,'\n','<br/>'),'-') releaseNotes  \n" +
                "	FROM  \n" +
                "		customer_packingslip_det cpd  \n" +
                "		LEFT JOIN salesshippingmst ss ON ss.shippingId=cpd.shippingId AND ss.isdeleted=0  \n" +
                "		LEFT JOIN COMPONENT c ON (c.id = cpd.partId AND c.isDeleted = 0)  \n" +
                "	WHERE  \n" +
                "		cpd.isDeleted = 0 AND cpd.refCustPackingSlipID = cpID;  \n" +
                "  \n" +
                "	# Customer Invoice Total charges details which we will at the end of report  \n" +
                "    SELECT get_totalCustomerInvoiceReceivedAmountById(cpID) INTO @totalRecvAmt;  \n" +
                "	SELECT  \n" +
                "		IFNULL(SUM(cpd.shipQty * cpd.unitPrice),0) AS totalLinePrice,  \n" +
                "		IFNULL(SUM(totalLineMiscPrice),0) AS totalLineMiscPrice,  \n" +
                "        IFNULL(@totalRecvAmt,0) As totalRecvAmt  \n" +
                "	FROM  customer_packingslip_det cpd  \n" +
                "	LEFT JOIN (SELECT refCustomerPackingSlipDetID, SUM(cpod.qty * cpod.price) AS totalLineMiscPrice  \n" +
                "				FROM customer_packingslip_otherexpense_details cpod WHERE cpod.isdeleted = 0  \n" +
                "		GROUP BY cpod.refCustomerPackingSlipDetID) cpod ON cpod.refCustomerPackingSlipDetID = cpd.id  \n" +
                "	WHERE cpd.refCustPackingSlipID = cpID AND  cpd.isdeleted = 0;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 04-01-2022   *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1258,'1.00','V1','Sproc_GetCustomerInvoiceReportDetails-User Story 39013: Add CPS Popup && shipment Summary Details Improvement - Shweta '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1258:
            allDbChangesArray.push(
                /* **************************** New Script -> 04-01-2022  *********************************** */
                "DROP PROCEDURE IF EXISTS Sproc_GetCustomerPackingSlipDetailByPackingSlipNumber;  \n" +
                "CREATE PROCEDURE `Sproc_GetCustomerPackingSlipDetailByPackingSlipNumber`(  \n" +
                "	IN pPackingSlipNumber VARCHAR(100)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE v_CountOfPSRecord INT;  \n" +
                "	DECLARE v_CountOfSIRecord INT;  \n" +
                "	DECLARE v_StringOfMFGCode VARCHAR(255);  \n" +
                "	DECLARE Status_Check TINYINT;  \n" +
                "	DECLARE vPackingSlipId INT;  \n" +
                "	DECLARE vrefSalesOrderID INT;  \n" +
                "	DECLARE vMfgCodeFormat INT;  \n" +
                "  \n" +
                "	select fun_getMFGCodeNameFormat() into vMfgCodeFormat ;  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS  temp_CustomerPackingSlip_Validation_Error;  \n" +
                "	CREATE TEMPORARY TABLE temp_CustomerPackingSlip_Validation_Error  \n" +
                "	(  \n" +
                "		IsSuccess BOOLEAN,  \n" +
                "		Error VARCHAR(1000)  \n" +
                "	);  \n" +
                "  \n" +
                "	SELECT 	COUNT(1) INTO v_CountOfPSRecord  \n" +
                "	FROM 	customer_packingslip  \n" +
                "	WHERE 	packingSlipNumber = pPackingSlipNumber  \n" +
                "			AND transType = 'P'  \n" +
                "			AND deletedAt IS NULL;  \n" +
                "  \n" +
                "	IF (v_CountOfPSRecord = 0) THEN  \n" +
                "		INSERT INTO temp_CustomerPackingSlip_Validation_Error (IsSuccess, Error) VALUES (FALSE, CONCAT('Customer Packing Slip# <b>',pPackingSlipNumber,'</b> not found.'));  \n" +
                "		SELECT IsSuccess, Error FROM temp_CustomerPackingSlip_Validation_Error;  \n" +
                "	ELSE  \n" +
                "  \n" +
                "		SELECT 	a.refCustInvoiceID, GROUP_CONCAT(a.fullCustCode),a.`subStatus` ,a.id ,a.refSalesOrderID  \n" +
                "        INTO v_CountOfSIRecord, v_StringOfMFGCode,Status_Check  ,  vPackingSlipId ,vrefSalesOrderID  \n" +
                "		FROM 	(  \n" +
                "				SELECT 	cp.id, cp.packingSlipNumber,fun_GetFormattedMfgCode(mfg.mfgCode,mfg.mfgName,vMfgCodeFormat) fullCustCode,  \n" +
                "					cp.`subStatus`,cp.refCustInvoiceID,cp.refSalesOrderID  \n" +
                "				FROM 	customer_packingslip  cp  \n" +
                "                left join mfgcodemst mfg on mfg.id= cp.customerID  \n" +
                "				WHERE 	cp.packingSlipNumber = pPackingSlipNumber  \n" +
                "						AND cp.transType = 'P'  \n" +
                "						AND cp.isDeleted =0  \n" +
                "		) a  \n" +
                "        GROUP BY a.refCustInvoiceID,id ,a.refSalesOrderID  ;  \n" +
                "  \n" +
                "			IF(Status_Check=1)THEN      /* status 1-> Draft */  \n" +
                "				INSERT INTO temp_CustomerPackingSlip_Validation_Error (IsSuccess, Error) VALUES (FALSE, CONCAT(\"Customer Packing Slip# <b>\",pPackingSlipNumber,\"</b> is in <b>Draft</b>. So you cannot get any details of packing slip.\"));  \n" +
                "				SELECT IsSuccess, Error FROM temp_CustomerPackingSlip_Validation_Error;  \n" +
                "			ELSEIF(v_CountOfSIRecord IS NOT NULL)THEN  \n" +
                "				INSERT INTO temp_CustomerPackingSlip_Validation_Error (IsSuccess, Error) VALUES (FALSE, CONCAT(\"Customer Packing Slip# <b>\",pPackingSlipNumber,\"'s</b> customer invoice is already created for customer \",v_StringOfMFGCode,\".\"));  \n" +
                "				SELECT IsSuccess, Error FROM temp_CustomerPackingSlip_Validation_Error;  \n" +
                "			ELSE  \n" +
                "				INSERT INTO temp_CustomerPackingSlip_Validation_Error (IsSuccess, Error) VALUES (TRUE, '');  \n" +
                "				SELECT IsSuccess, Error FROM temp_CustomerPackingSlip_Validation_Error;  \n" +
                "  \n" +
                "				SELECT packingSlipNumber,packingSlipDate,  \n" +
                "                fun_getMfgCodeAndNameByID(customerID) customerName,  \n" +
                "                customerID,  \n" +
                "                    id AS packingSlipID,  \n" +
                "                    poNumber, poDate,poRevision,  \n" +
                "					soNumber, soDate, refSalesOrderId,sorevision,  \n" +
                "                    packingSlipType,  \n" +
                "                    (CASE WHEN packingSlipType = 1 THEN 'MISC' WHEN packingSlipType = 2 THEN 'PO' END) packingSlipTypeText,  \n" +
                "					fun_getGenericCategoryCodeNameByID(shippingMethodId) shippingMethod,      shippingMethodId,  \n" +
                "                    fun_getGenericCategoryNameByID(termsId) terms,termsId,  \n" +
                "                    shipToId, billToId ,  \n" +
                "                    freeOnBoardId,salesCommissionTo,  \n" +
                "                    fun_getEmployeeInitialNameByEmpID(salesCommissionTo) salesCommInitial,  \n" +
                "                    CONCAT('(',fun_getEmployeeInitialNameByEmpID(salesCommissionTo),') ',fun_getEmployeeNameByEmpID(salesCommissionTo) ) salesCommName,  \n" +
                "                    fun_getFOBById(freeOnBoardId) FOBName,  \n" +
                "                    contactPersonId,  \n" +
                "                    intermediateShipmentId ,  \n" +
                "                    billingAddress,  \n" +
                "                    shippingAddress,  \n" +
                "                    intermediateAddress,  \n" +
                "                    packingSlipComment,  \n" +
                "                    headerComment,  \n" +
                "                    revision packingSlipVersion  \n" +
                "				 FROM customer_packingslip WHERE packingSlipNumber = pPackingSlipNumber  \n" +
                "						AND transType = 'P'  \n" +
                "						AND isDeleted = 0 ;  \n" +
                "  \n" +
                "				SELECT  cpd.custPOLineID,  \n" +
                "						cpd.refSalesorderDetid,  \n" +
                "						cpd.reflineID AS packingSlipSerialNumber,  \n" +
                "                        fun_getMFGPNByID(cpd.partId) mfgpn,  \n" +
                "                        fun_getRoHSIconByPartID(cpd.partId) rohsIcon,  \n" +
                "                        fun_getRoHSNameByPartID(cpd.partId) rohsName,  \n" +
                "                        cpd.partId,cpd.refChargesTypeID,  \n" +
                "                        cpd.shippingId,  \n" +
                "					(SELECT c.partType FROM component c WHERE c.isDeleted = 0 AND c.id = cpd.partId) partType,  \n" +
                "						cpd.shipQty,  \n" +
                "						IF(cp.packingSlipType = 2 ,sod.price, cpd.unitPrice) unitPrice,  \n" +
                "						cpd.assyDescription,  \n" +
                "						fun_getAssyPIDCodeByID(cpd.partId)	PIDCode,  \n" +
                "						fun_getMfgCodeAndNameByPartID(cpd.partId) mfgName,  \n" +
                "						(SELECT ss.releaseNumber FROM salesshippingmst ss WHERE  ss.shippingId = cpd.shippingId AND ss.isdeleted=0) releaseNumber,  \n" +
                "						fun_getGenericCategoryNameByID(cpd.refChargesTypeID) othercharge,  \n" +
                "						(IFNULL(cpd.shipQty,0)* IF(cp.packingSlipType = 2 ,sod.price,IFNULL(cpd.unitPrice,0))) extPrice,  \n" +
                "						cpd.otherCharges AS lineOtherCharges,  \n" +
                "						0 totalExtPrice ,  \n" +
                "						1 isFromPackingSlip,  \n" +
                "						IF(cp.packingSlipType = 2 ,sod.quoteFrom, cpd.quoteFrom) quoteFrom,  \n" +
                "                        IF(cp.packingSlipType = 2 ,sod.refAssyQtyTurnTimeID, cpd.refAssyQtyTurnTimeID) refAssyQtyTurnTimeID,  \n" +
                "                        IF(cp.packingSlipType = 2 ,sod.assyQtyTurnTimeText, cpd.assyQtyTurnTimeText) assyQtyTurnTimeText,  \n" +
                "						IF(cp.packingSlipType = 2 ,sod.quoteNumber, cpd.quoteNumber) quoteNumber,  \n" +
                "                        IF(cp.packingSlipType = 2 ,sod.refRFQGroupID ,cpd.refRFQGroupID) refRFQGroupID,  \n" +
                "                        IF(cp.packingSlipType = 2 ,sod.refRFQQtyTurnTimeID, cpd.refRFQQtyTurnTimeID) refRFQQtyTurnTimeID,  \n" +
                "						(CASE 	WHEN IF(cp.packingSlipType = 2 ,sod.quoteFrom, cpd.quoteFrom) = 1 THEN 'From RFQ'  \n" +
                "								WHEN IF(cp.packingSlipType = 2 ,sod.quoteFrom, cpd.quoteFrom) = 3 THEN 'N/A'  \n" +
                "                                WHEN IF(cp.packingSlipType = 2 ,sod.quoteFrom, cpd.quoteFrom) = 2 THEN 'From Part Master' ELSE '' END) quoteFromText  ,  \n" +
                "					    cpd.releaseNotes  \n" +
                "				 FROM customer_packingslip_det cpd  \n" +
                "                 LEFT JOIN customer_packingslip cp ON cp.id = cpd.refCustPackingSlipID AND cp.isDeleted = 0  AND cp.transType = 'P'  \n" +
                "                 LEFT JOIN salesorderdet sod ON sod.id = cpd.refSalesorderDetid AND sod.isDeleted = 0  \n" +
                "                 WHERE cpd.isDeleted=0  \n" +
                "                 AND cp.packingSlipNumber = pPackingSlipNumber  \n" +
                "                ORDER BY refSalesorderdetid,shippingId ASC;  \n" +
                "  \n" +
                "                -- get other charges  \n" +
                "                -- 1, Every 2 First 3 Last  \n" +
                "			  SELECT dtl.refCustPackingSlipID ,  \n" +
                "					 dtl.refSalesorderDetid,  \n" +
                "                     dtl.remainingQty,  \n" +
                "                     sother.partID,  \n" +
                "                     fun_getMFGPNByID(sother.partID) mfgPN,  \n" +
                "					 fun_getRoHSIconByPartID(sother.partID) rohsIcon,  \n" +
                "					 fun_getRoHSNameByPartID(sother.partID) rohsName,  \n" +
                "                     sother.price ,  \n" +
                "                     sother.qty,  \n" +
                "                     (IFNULL(sother.qty,0)*IFNULL(sother.price,0)) extOtherPrice,  \n" +
                "                     sother.frequency,  \n" +
                "                      sother.lineComment,  \n" +
                "                       sother.lineInternalComment,  \n" +
                "                       sother.frequencyType,  \n" +
                "                     (CASE  WHEN (sother.frequency = 1) THEN 'Every'  \n" +
                "							WHEN (sother.frequency = 2) THEN 'First'  \n" +
                "							WHEN (sother.frequency = 3) THEN  'Last'  \n" +
                "							ELSE ''  \n" +
                "						END) AS frequencyName ,  \n" +
                "						(CASE  WHEN (sother.frequencyType = 1) THEN 'Release'  \n" +
                "							WHEN (sother.frequencyType = 2) THEN 'Shipment'  \n" +
                "							ELSE ''  \n" +
                "						END) AS frequencyTypeName  \n" +
                "				FROM (  \n" +
                "					SELECT b.refCustPackingSlipID , b.refSalesorderDetid, b.poQty, b.shipQty ,b.remainingQty, b.packingslipIndex ,b.shippingId,b.calcFrequency FROM  \n" +
                "					 	(SELECT  a.refCustPackingSlipID , a.refSalesorderDetid, a.poQty, a.shipQty ,a.remainingQty, a.packingslipIndex ,a.shippingId,  \n" +
                "						CASE WHEN packingslipIndex = 1 AND  remainingQty > 0 THEN '1,2'  \n" +
                "							 WHEN packingslipIndex = 1 AND  remainingQty = 0 THEN '1,2,3'  \n" +
                "							 WHEN packingslipIndex > 1 AND  remainingQty > 0 THEN '1'  \n" +
                "							 WHEN packingslipIndex > 1 AND  remainingQty =  0 THEN '1,3' END AS calcFrequency  \n" +
                "						FROM (  \n" +
                "							SELECT cpd2.refCustPackingSlipID,cpd2.refSalesorderDetid,cpd2.poQty,cpd2.shipQty ,  \n" +
                "								cpd2.remainingQty,cpd2.shippingId,  \n" +
                "                                cpd2.partID,  \n" +
                "								row_number() over(PARTITION BY cpd1.refSalesorderDetid,cpd1.shippingId  ORDER BY cpd2.id ) packingslipIndex  \n" +
                "							FROM customer_packingslip_det cpd1  \n" +
                "							JOIN customer_packingslip_det cpd2 ON cpd2.refSalesOrderDetid = cpd1.refSalesOrderDetid AND cpd2.isDeleted = 0  \n" +
                "							WHERE cpd1.refCustPackingSlipID = vPackingSlipId  \n" +
                "                            AND cpd1.isDeleted = 0  \n" +
                "						) AS a  \n" +
                "						)AS b  GROUP BY b.refCustPackingSlipID,b.refSalesorderDetid,b.poQty, b.shipQty ,b.remainingQty, b.packingslipIndex ,b.shippingId,b.calcFrequency  \n" +
                "				) AS dtl  \n" +
                "				JOIN salesorder_otherexpense_details sother  \n" +
                "                ON sother.refSalesOrderDetID = dtl.refSalesorderDetid AND sother.isDeleted = 0  \n" +
                "				WHERE FIND_IN_SET ( sother.frequency ,dtl.calcFrequency)  \n" +
                "				AND dtl.refCustPackingSlipID = vPackingSlipId;  \n" +
                "  \n" +
                "  \n" +
                "                 --  Tracking Number  \n" +
                "                SELECT trackNumber  \n" +
                "                FROM customer_packing_slip_track_number  \n" +
                "                WHERE refCustPackingSlipID = vPackingSlipId  \n" +
                "                AND isDeleted = 0;  \n" +
                "  \n" +
                "                -- other charges  \n" +
                "                SELECT cpd.partId,cpd.shipQty,cpd.poQty,cpd.refSalesorderDetid,cpd.shippingId  \n" +
                "		FROM customer_packingslip cp JOIN customer_packingslip_det cpd ON cpd.refCustPackingSlipID=cp.id  \n" +
                "			WHERE transType='I' AND cp.refSalesOrderID=vrefSalesOrderID AND cp.isdeleted=0  ;  \n" +
                "			END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 04-01-2022   *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1259,'1.00','V1','Sproc_GetCustomerPackingSlipDetailByPackingSlipNumber-User Story 39013: Add CPS Popup && shipment Summary Details Improvement - Shweta '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1259:
            allDbChangesArray.push(
                /* **************************** New Script -> 04-01-2022  *********************************** */
                "DROP PROCEDURE IF EXISTS Sproc_GetCustomerPackingslipReportDetails;  \n" +
                "CREATE PROCEDURE `Sproc_GetCustomerPackingslipReportDetails`(  \n" +
                "	IN cpid INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "  \n" +
                "	SELECT  \n" +
                "    cp.id,  \n" +
                "    cp.status,  \n" +
                "    cp.packingSlipType,  \n" +
                "    cp.packingSlipNumber AS PackingSlip,  \n" +
                "    cp.packingSlipDate AS PackingSlipDate,  \n" +
                "    cp.poDate AS PODate,  \n" +
                "    cp.soNumber AS SalesOrderNumber,  \n" +
                "    cp.poNumber AS PONumber,  \n" +
                "    cp.packingSlipComment,  \n" +
                "    IFNULL(gc.gencCategoryName,'-') AS ShippingMethod,  \n" +
                "    IFNULL(gcc.gencCategoryName,'-') AS PaymentMethod,  \n" +
                "    IFNULL(FUN_GETFOBBYID(cp.freeOnBoardId), '-') AS FOB,  \n" +
                "    cp.soDate AS SODate,  \n" +
                "    cp.sorevision AS SORevision,  \n" +
                "	cp.billingAddress AS SoldToAddress,  \n" +
                "	cp.shippingAddress AS ShippingAddress,  \n" +
                "	cp.intermediateAddress AS IntermediateAddress,  \n" +
                "    IFNULL(FUN_GETEMPLOYEENAMEBYEMPID(cp.salesCommissionTo), '-') AS SalesOrderPersonName,  \n" +
                "	fun_getUserNameByID(cp.updatedBy) AS  preparedBy, us.emailAddress, emp.phExtension ,  \n" +
                "    cp.revision packingSlipVersion  ,  \n" +
                "    '1.00' docNumber ,  \n" +
                "    cp.systemID AS legalNumber,  \n" +
                "    sm.isBlanketPO,  \n" +
                "	CASE WHEN sm.isBlanketPO=1 THEN 'Yes' ELSE 'No' END blanketPOText  \n" +
                "FROM  \n" +
                "    customer_packingslip cp  \n" +
                "        LEFT JOIN  \n" +
                "    salesordermst sm ON sm.id = cp.refSalesOrderID  \n" +
                "        AND sm.isDeleted = 0  \n" +
                "        LEFT JOIN  \n" +
                "    genericcategory gc ON gc.gencCategoryID = cp.shippingMethodId  \n" +
                "        AND gc.isDeleted = 0  \n" +
                "        AND gc.categoryType = 'Shipping Methods'  \n" +
                "        LEFT JOIN  \n" +
                "    genericcategory gcc ON gcc.gencCategoryID = cp.termsID  \n" +
                "        AND gcc.isDeleted = 0  \n" +
                "        AND gcc.categoryType = 'Payment Terms'  \n" +
                "	LEFT JOIN users us ON us.id = cp.updatedBy  \n" +
                "	LEFT JOIN employees emp ON emp.id = us.employeeID  \n" +
                "WHERE  \n" +
                "    cp.isDeleted = 0 AND cp.id = cpid  \n" +
                "LIMIT 1;  \n" +
                "  \n" +
                "SELECT  \n" +
                "	cpd.lineID AS PSLine,  \n" +
                "    cpd.id AS cpDetID,  \n" +
                "    ss.releaseNumber,  \n" +
                "    cpd.refCustPackingSlipID AS cpID,  \n" +
                "    cpd.partId,  \n" +
                "    IFNULL(cpd.shipQty,0) AS ShippedQty,  \n" +
                "    CASE WHEN c.partType = 4 THEN NULL ELSE  IFNULL(cpd.remainingQty,0) END AS RemainingQty,  \n" +
                "    cpd.custPOLineID AS POLine,  \n" +
                "    cpd.shippingNotes AS ShippingComment,  \n" +
                "    (CASE WHEN (c.partType IS NULL OR c.partType = '') THEN  fun_getGenericCategoryNameByID(cpd.refChargesTypeID)  \n" +
                "		WHEN (c.iscustom = 1) THEN  c.custAssyPN  \n" +
                "		WHEN (c.iscustom = 0 AND (c.partType = 2 OR c.partType = 4)) THEN  c.mfgPN  \n" +
                "		ELSE ''  END) AS PartNumber,  \n" +
                "	 CASE WHEN c.partType = 4 THEN '' ELSE  FUN_GETUOMABBREVIATIONBYID(c.uom) END AS UOM,  \n" +
                "    IFNULL(c.rev, '') AS Revision,  \n" +
                "    c.partType,  \n" +
                "    CONCAT(IFNULL(REPLACE(cpd.assyDescription,'\n','<br/>'), ''), '<br/>',  \n" +
                "            IFNULL(CONCAT(' ', rr.name), ''),  \n" +
                "            IFNULL(CONCAT(', ',  \n" +
                "                            cpd.standrads),  \n" +
                "                    ''),  \n" +
                "            IFNULL(CONCAT(', Quote#', raq.quoteNumber), ''),  \n" +
                "            IFNULL(CONCAT(', HTS Code: ', c.htsCode), ''),  \n" +
                "            IFNULL(CONCAT(', COO: ', c.countryOfOrigin), '')) AS Descripton,  \n" +
                "            CASE WHEN cpd.poReleaseNumber IS NOT NULL THEN CONCAT('PO Release#: ',cpd.poReleaseNumber)  WHEN  cpd.refBlanketPONumber IS NOT NULL THEN CONCAT('Ref. Blanket PO#: ',cpd.refBlanketPONumber)  \n" +
                "            ELSE '' END  refBlanketPONumber  ,  \n" +
                "           ifnull(replace(cpd.releaseNotes,'\n','<br/>'),'-')  AS releaseNotes  \n" +
                "FROM  \n" +
                "    customer_packingslip_det cpd  \n" +
                "        LEFT JOIN  \n" +
                "    customer_packingslip cp ON cpd.refCustPackingSlipID = cp.id  \n" +
                "        AND cp.isDeleted = 0  \n" +
                "        LEFT JOIN  \n" +
                "    component c ON c.id = cpd.partid  \n" +
                "        LEFT JOIN  \n" +
                "    salesorderdet sd ON cpd.refSalesorderDetid = sd.refSalesOrderID  \n" +
                "        AND sd.isDeleted = 0  \n" +
                "        LEFT JOIN  \n" +
                "    rfqforms rf ON rf.id = sd.refRFQGroupID  \n" +
                "        LEFT JOIN  \n" +
                "    rfq_rohsmst rr ON rr.id = c.rohsStatusID  \n" +
                "    LEFT JOIN  \n" +
                "    salesshippingmst ss ON ss.shippingID=cpd.shippingId  \n" +
                "        LEFT JOIN  \n" +
                "    rfq_assemblies ra ON ra.rfqrefID = rf.id  \n" +
                "        AND ra.partID = cpd.partId  \n" +
                "        LEFT JOIN  \n" +
                "    rfq_assemblies_quotation_submitted raq ON raq.rfqAssyID = ra.id  \n" +
                "WHERE  \n" +
                "    cpd.isDeleted = 0 AND cp.id = cpid AND cpd.refChargesTypeID IS NULL ;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 04-01-2022   *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1260,'1.00','V1','Sproc_GetCustomerPackingslipReportDetails-User Story 39013: Add CPS Popup && shipment Summary Details Improvement - Shweta '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1260:
            allDbChangesArray.push(
                /* **************************** New Script -> 04-01-2022  *********************************** */
                "DROP PROCEDURE IF EXISTS Sproc_GetPackingSlipAssemblyDetails;  \n" +
                "CREATE PROCEDURE `Sproc_GetPackingSlipAssemblyDetails`(  \n" +
                "	IN partID INT ,  \n" +
                "	IN cpID INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "  \n" +
                "	# COFC Report Header details  \n" +
                "	SELECT  \n" +
                "    cp.id,  \n" +
                "    cp.packingSlipNumber AS PackingSlip,  \n" +
                "    cp.packingSlipDate AS PackingSlipDate,  \n" +
                "    cp.soNumber AS SalesOrderNumber,  \n" +
                "    cp.poNumber AS PONumber,  \n" +
                "	 cp.soDate AS SODate,  \n" +
                "    cp.sorevision AS SORevision,  \n" +
                "    IFNULL(mfg.mfgName, '') AS Customer,  \n" +
                "    (select initialName from employees emp  \n" +
                "		join department dept on dept.deptMngrId = emp.id  and dept.isDeleted = 0 and dept.deptID = -1) AS DepartmentName,  \n" +
                "    'Paul Khunt' AS ManagerName  \n" +
                "FROM  \n" +
                "    customer_packingslip cp  \n" +
                "        LEFT JOIN  \n" +
                "    mfgcodemst mfg ON mfg.id = cp.customerID  \n" +
                "        AND mfg.isDeleted = 0  \n" +
                "WHERE  \n" +
                "    cp.isDeleted = 0 AND cp.id = cpID  \n" +
                "LIMIT 1;  \n" +
                "  \n" +
                "  # COFC Report Table details  \n" +
                "	SELECT  \n" +
                "		cpd.id AS cpDetID,  \n" +
                "		cpd.custPOLineID AS POLine,  \n" +
                "		ss.releaseNumber,  \n" +
                "		cpd.lineID AS PSLine,  \n" +
                "		sum(CASE WHEN (c.partType = 3 or  (c.partType = 2 and cpd.componentStockType = 1)) THEN sa.shippedqty  \n" +
                "						ELSE cpd.shipQty END) AS ShippedQty,  \n" +
                "		cpd.poQty AS OrderQty,  \n" +
                "		(CASE WHEN (c.partType IS NULL OR c.partType = '') THEN fun_getGenericCategoryNameByID(cpd.refChargesTypeID)  \n" +
                "			WHEN (c.iscustom = 1) THEN c.custAssyPN  \n" +
                "			WHEN (c.iscustom=0 AND (c.partType = 2 OR c.partType = 4)) THEN c.mfgPN  \n" +
                "			ELSE '' END) AS PartNumber,  \n" +
                "		IFNULL(c.rev, '') AS Revision,  \n" +
                "		ifnull(sa.woNumber,'N/A') AS WorkOrderNumber,  \n" +
                "		(CASE	WHEN sa.woNumber IS NOT NULL THEN fun_getCertificationByWoNumber(sa.woNumber)  \n" +
                "				WHEN c.category = 2 and (c.iscpn = 0 and c.iscustom = 0) AND cpd.standrads IS NULL THEN 'N/A'  \n" +
                "				ELSE cpd.standrads END) AS Standards,  \n" +
                "		FUN_GETUOMBYID(c.uom) AS UOM,  \n" +
                "		CONCAT(IFNULL(Replace(cpd.assyDescription,'\n','<br/>'), ''), '<br/>', IFNULL(CONCAT(' ', rr.name), '')) AS Descripton ,  \n" +
                "		c.partType,  \n" +
                "		(case when sa.woNumber is not null then (SELECT ast.datecode FROM assemblyStock ast WHERE ast.woNumber = sa.woNumber AND ast.isDeleted = 0 LIMIT 1)  \n" +
                "			WHEN c.category = 2 and (c.iscpn = 0 and c.iscustom = 0) THEN 'Per Part Label'  \n" +
                "			else 'N/A'end) AS DateCode,  \n" +
                "		(case	when sa.workorderID is not null then wo.dateCodeFormat  \n" +
                "			WHEN c.category = 2 and (c.iscpn = 0 and c.iscustom = 0) THEN ''  \n" +
                "			when sa.stockType = 'OS' then 'WWYY'  \n" +
                "			else '' end) AS DateCodeFormat  ,  \n" +
                "        c.RoHSStatusID   ,  \n" +
                "        ifnull(replace(cpd.releaseNotes,'\n','<br/>'),'-') releaseNotes  \n" +
                "FROM  	customer_packingslip_det cpd  \n" +
                "INNER JOIN  COMPONENT c ON c.id = cpd.partid AND c.isDeleted = 0  \n" +
                "LEFT JOIN  salesshippingmst ss ON ss.shippingID=cpd.shippingId  \n" +
                "LEFT JOIN  shippedassembly sa ON cpd.id = sa.refCustPackingSlipDetID AND sa.isDeleted = 0 AND sa.shippedqty <> 0  \n" +
                "LEFT JOIN workorder wo ON wo.woID = sa.workorderID and sa.isDeleted = 0  \n" +
                "LEFT JOIN  rfq_rohsmst rr ON rr.id = c.rohsStatusID and rr.isDeleted = 0  \n" +
                "WHERE  \n" +
                "    cpd.isDeleted = 0  AND cpd.refCustPackingSlipID = cpID  AND cpd.partId = partID  \n" +
                "		GROUP BY cpd.custPOLineID, cpd.id, cpd.lineID,c.partType, sa.woNumber,cpd.poQty,c.iscustom,  \n" +
                "        cpd.refChargesTypeID,c.rev,c.category,c.iscpn,  \n" +
                "        cpd.standrads,cpd.assyDescription,sa.workorderID,sa.stockType,cpd.releaseNotes ,c.RoHSStatusID ;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 04-01-2022   *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1261,'1.00','V1','Sproc_GetPackingSlipAssemblyDetails-User Story 39013: Add CPS Popup && shipment Summary Details Improvement - Shweta '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1261:
            allDbChangesArray.push(
                /* **************************** New Script -> 04-01-2022  *********************************** */
                "DROP PROCEDURE IF EXISTS Sproc_GetPendingSalesShippingDetails;  \n" +
                "CREATE PROCEDURE `Sproc_GetPendingSalesShippingDetails`(  \n" +
                "	IN psalesorderDetID INT ,  \n" +
                "	IN packingSlipID INT,  \n" +
                "	IN ppackingslipDetID INT  ,  \n" +
                "    IN pSoReleaseID INT  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "	DECLARE vMfgCodeFormat INT;  \n" +
                "    SELECT fun_getMFGCodeNameFormat() INTO vMfgCodeFormat;  \n" +
                "  \n" +
                "      SELECT ss.shippingID,  \n" +
                "        ss.sDetId,  \n" +
                "		IFNULL(sd.custPOLineNumber ,1)  custPOLineNumber,  \n" +
                "        IFNULL(ss.releaseNumber,1) releaseNumber,  \n" +
                "        ss.qty,  \n" +
                "        ss.shippingDate,  \n" +
                "        sd.tentativeBuild,  \n" +
                "        sd.qty AS poQty,  \n" +
                "        sd.partID,  \n" +
                "        sd.price,  \n" +
                "        sd.lineID,  \n" +
                "        sd.internalComment,  \n" +
                "        sd.partDescription,  \n" +
                "        sd.remark,  \n" +
                "        c.iscustom,  \n" +
                "        smp.poNumber,  \n" +
                "        ss.poReleaseNumber,  \n" +
                "		c.mfgpn,  \n" +
                "		c.mfgpndescription,  \n" +
                "		c.pidcode,  \n" +
                "		fun_getUnitNameByID(c.uom) unitMeaser,  \n" +
                "		c.nickName,  \n" +
                "		c.mfgcodeID,  \n" +
                "		sd.originalPOQty,  \n" +
                "		fun_GetFormattedMfgCode(mfgmst.mfgcode,mfgmst.mfgname, vMfgCodeFormat)  mfgName,  \n" +
                "		(CASE WHEN ss.shippingMethodID IS NULL THEN som.shippingMethodID  \n" +
                "			ELSE ss.shippingMethodID END) shippingMethodID ,  \n" +
                "		(CASE WHEN ss.shippingAddressID IS NULL THEN som.shippingAddressID  \n" +
                "			ELSE ss.shippingAddressID END) shippingAddressID ,  \n" +
                "		-- (CASE WHEN ss.shippingAddressID IS NULL THEN som.shippingAddress END) shippingAddress ,  \n" +
                "		fun_getRoHSIconByPartID(sd.partID) rohsIcon,  \n" +
                "		fun_getRoHSNameByPartID(sd.partID) rohsName,  \n" +
                "		fun_getCertificationByPartID(sd.partID)standards,  \n" +
                "		CONCAT(IFNULL(ss.releaseNumber,1),' | ',ss.qty,' | ',DATE_FORMAT((CASE WHEN ss.isAgreeToShip=1 THEN IFNULL(ss.revisedRequestedShipDate,ss.revisedRequestedDockDate) ELSE IFNULL(ss.shippingDate,ss.requestedDockDate) END), '%m-%d-%y')) shipping,  \n" +
                "        cpsDet.shippedQty,  \n" +
                "		-- sum(cpsDet.shippedQty) over(partition by ss.sDetId) shippedQty ,  \n" +
                "		(SELECT SUM(IFNULL(cpdet.shipQty,0))  \n" +
                "			FROM customer_packingslip_det cpdet  \n" +
                "            JOIN customer_packingslip cpsdet ON cpsdet.id = cpdet.refCustPackingSlipID  and cpsdet.isDeleted = 0  \n" +
                "            WHERE cpdet.refsalesorderdetid=ss.sDetId  \n" +
                "			AND cpdet.isdeleted=0 AND cpsdet.transType ='P') lineTotShippedQty ,  \n" +
                "		(CASE WHEN ss.shippingMethodID IS NULL THEN (fun_getGenericCategoryCodeNameByID(som.shippingMethodID))  \n" +
                "				ELSE (fun_getGenericCategoryCodeNameByID(ss.shippingMethodID)) END) shippingMethodText,  \n" +
                "		c.partType,  \n" +
                "		(SELECT mfg.mfgType FROM mfgcodemst mfg WHERE mfg.id = c.mfgcodeid AND mfg.isDeleted = 0 ) mfgType,  \n" +
                "		sd.quoteNumber,sd.quoteFrom, sd.refAssyQtyTurnTimeID,  \n" +
                "        sd.refRFQGroupID,  \n" +
                "        sd.refRFQQtyTurnTimeID  ,  \n" +
                "		IFNULL(sd.assyQtyTurnTimeText, (SELECT CONCAT( '(',rfqAssyQty.requestQty,')',  rfqAssyTurn.turnTime,' ',  \n" +
                "											CASE WHEN rfqAssyTurn.unitOfTime='B' THEN 'Bussiness Days'  \n" +
                "												WHEN rfqAssyTurn.unitOfTime='D' THEN 'Week Days'  \n" +
                "												WHEN rfqAssyTurn.unitOfTime='W' THEN 'Week' END )  \n" +
                "										FROM rfq_assy_quantity_turn_time rfqAssyTurn  \n" +
                "										JOIN rfq_assy_quantity rfqAssyQty ON rfqAssyQty.id = rfqAssyTurn.rfqAssyQtyID AND  rfqAssyQty.isDeleted = 0  \n" +
                "										WHERE rfqAssyTurn.id = sd.refRFQQtyTurnTimeID AND rfqAssyTurn.isDeleted = 0)) assyQtyTurnTimeText,  \n" +
                "		c.category partCategory,  \n" +
                "        ss.releaseNotes,  \n" +
                "        ss.description additionalNotes,  \n" +
                "        ss.customerReleaseLine,  \n" +
                "        sd.salesOrderDetStatus,  \n" +
                "        sd.qty custPOQty,  \n" +
                "        sd.materialTentitiveDocDate  \n" +
                "	FROM salesshippingmst ss  \n" +
                "	JOIN salesorderdet sd ON ss.sDetID=sd.id  \n" +
                "	JOIN salesordermst som ON som.id = sd.refSalesOrderID  \n" +
                "	JOIN COMPONENT c ON c.id=sd.partid  \n" +
                "    LEFT JOIN mfgcodemst mfgmst ON mfgmst.id = c.mfgcodeId  and mfgmst.isDeleted = 0  \n" +
                "	LEFT JOIN salesorderdet sdp ON sd.refBlanketPOID=sdp.id AND sdp.isdeleted=0  \n" +
                "	LEFT JOIN salesordermst smp ON smp.id=sdp.refSalesOrderID AND smp.isdeleted=0  \n" +
                "	LEFT JOIN (select cpd.refsalesorderdetid,cpd.shippingId, sum(shipQty) shippedQty from customer_packingslip_det cpd  \n" +
                "				JOIN customer_packingslip  cps ON cps.id = cpd.refCustPackingSlipID and cps.isDeleted = 0 and cps.transType= 'P'  \n" +
                "				where cpd.isDeleted = 0 Group by cpd.refsalesorderdetid, cpd.shippingId ) cpsDet  \n" +
                "		ON ss.sDetId = cpsDet.refsalesorderdetid  \n" +
                "          and ss.shippingID = cpsDet.shippingId  \n" +
                "	WHERE sd.id=psalesorderDetID  \n" +
                "	AND  sd.isDeleted = 0  \n" +
                "	AND (CASE WHEN ppackingslipDetID IS NULL THEN  ss.qty > ifnull(cpsDet.shippedQty,0)  \n" +
                "		ELSE  ss.qty=ss.qty  END)  \n" +
                "	AND (CASE WHEN pSoReleaseID IS NOT NULL THEN ss.shippingID=pSoReleaseID ELSE 1 = 1 END)  \n" +
                "	AND ss.isdeleted=0  \n" +
                "	ORDER BY ss.releaseNumber,ss.shippingDate;  \n" +
                "  \n" +
                "	SELECT NULL AS shippingID,  \n" +
                "			sDetId,  \n" +
                "			custPOLineNumber,  \n" +
                "			NULL releaseNumber,  \n" +
                "			qty,  \n" +
                "			NULL shippingDate,  \n" +
                "			releaseNotes,  \n" +
                "			tentativeBuild,  \n" +
                "			poQty,  \n" +
                "			partID,  \n" +
                "			price,  \n" +
                "			lineID,  \n" +
                "			partDescription,  \n" +
                "			mfgPN,  \n" +
                "			mfgPNDescription,  \n" +
                "			unitMeaser,  \n" +
                "			nickName,  \n" +
                "			pidcode,  \n" +
                "			NULL shippingMethodID,  \n" +
                "			NULL shippingAddressID,  \n" +
                "			mfgcodeID,  \n" +
                "			mfgName,  \n" +
                "			rohsIcon,  \n" +
                "			rohsName,  \n" +
                "			rohsStatusID,  \n" +
                "			standards,  \n" +
                "			shippedQty   ,  \n" +
                "			remark,  \n" +
                "			internalcomment,  \n" +
                "			mfgPnwihLineId,  \n" +
                "			refSODetID,  \n" +
                "			refSOReleaseLineID,  \n" +
                "			frequency,  \n" +
                "			originalPOQty,  \n" +
                "			frequencyType,  \n" +
                "			poNumber  \n" +
                "    FROM (SELECT  \n" +
                "			NULL AS shippingID,  \n" +
                "			sd.id AS sDetId,  \n" +
                "			sd.custPOLineNumber custPOLineNumber,  \n" +
                "			-- IFNULL(sd.custPOLineNumber,1) custPOLineNumber,  \n" +
                "			NULL releaseNumber,  \n" +
                "			sd.qty,  \n" +
                "			NULL shippingDate,  \n" +
                "			sd.remark releaseNotes,  \n" +
                "			sd.tentativeBuild,  \n" +
                "			sd.qty AS poQty,  \n" +
                "			sd.partID,  \n" +
                "			sd.price,  \n" +
                "			sd.lineID,  \n" +
                "			sd.partDescription,  \n" +
                "			c.mfgPN,  \n" +
                "			c.mfgPNDescription,  \n" +
                "			fun_getUnitNameByID(c.uom) unitMeaser,  \n" +
                "			c.nickName,  \n" +
                "			c.pidcode,  \n" +
                "			sd.refSODetID,  \n" +
                "			sd.refSOReleaseLineID,  \n" +
                "			sd.frequency,  \n" +
                "			CONCAT(c.mfgPN,' | ',IFNULL(sd.custPOLineNumber,1)) mfgPnwihLineId,  \n" +
                "			NULL shippingMethodID,  \n" +
                "			NULL shippingAddressID,  \n" +
                "			c.mfgcodeID,  \n" +
                "			fun_getMfgCodeAndNameByID(c.mfgcodeID) mfgName,  \n" +
                "			fun_getRoHSIconByPartID(sd.partID) rohsIcon,  \n" +
                "			fun_getRoHSNameByPartID(sd.partID) rohsName,  \n" +
                "			c.rohsStatusID,  \n" +
                "			sd.originalPOQty,  \n" +
                "			smp.poNumber,  \n" +
                "			fun_getCertificationByPartID(c.id)standards,  \n" +
                "			sd.frequencyType,  \n" +
                "			 (SELECT SUM(IFNULL(cpd.shipQty,0)) FROM customer_packingslip_det cpd  \n" +
                "				JOIN customer_packingslip cp ON cp.id = cpd.refCustPackingSlipID AND cp.isDeleted = 0 AND cp.transType = 'P'  \n" +
                "				WHERE refsalesorderdetid=sd.id AND cpd.isDeleted=0 ) shippedQty   ,  \n" +
                "			sd.remark,  \n" +
                "			sd.internalcomment  \n" +
                "		FROM salesorderdet sd  \n" +
                "		LEFT JOIN component c ON c.id=sd.partid  \n" +
                "		LEFT JOIN salesorderdet sdp ON sd.refBlanketPOID=sdp.id AND sdp.isdeleted=0  \n" +
                "	        LEFT JOIN salesordermst smp ON smp.id=sdp.refSalesOrderID AND smp.isdeleted=0  \n" +
                "		WHERE sd.refSODetID=psalesorderDetID  \n" +
                "		AND sd.isdeleted=0  \n" +
                "    ) a;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 04-01-2022   *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1262,'1.00','V1','Sproc_GetPendingSalesShippingDetails-User Story 39013: Add CPS Popup && shipment Summary Details Improvement - Shweta '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1262:
            allDbChangesArray.push(
                /* **************************** New Script -> 04-01-2022  *********************************** */
                "DROP PROCEDURE IF EXISTS Sproc_getSalesOrderListAgainstShipment;  \n" +
                "CREATE PROCEDURE `Sproc_getSalesOrderListAgainstShipment`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pCustomerID INT,  \n" +
                "    IN pSearchText VARCHAR(1000) ,  \n" +
                "    IN pSoWorkingStatus TINYINT,  \n" +
                "    IN pAllowToUpdateComment TINYINT ,  \n" +
                "    IN pSortByColumn TINYINT  ,  \n" +
                "    IN pSoStatus TINYINT,  \n" +
                "    IN pSortingOrder TINYINT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE vMfgCodeFormat INT;  \n" +
                "    DECLARE headerWhereClause VARCHAR(3000);  \n" +
                "   -- DECLARE detailWhereClause VARCHAR(1000);  \n" +
                "	DECLARE vOrderBy VARCHAR(200);  \n" +
                "   	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;  \n" +
                "  \n" +
                "	select fun_getMFGCodeNameFormat() into vMfgCodeFormat ;  \n" +
                "  \n" +
                "    IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF pSortByColumn = 1 THEN  \n" +
                "		SET vOrderBy =' order by customerName' ;  \n" +
                "    ELSEIF pSortByColumn = 2 THEN  \n" +
                "		SET vOrderBy =' order by poNumber ' ;  \n" +
                "    ELSEIF pSortByColumn = 3 THEN  \n" +
                "		SET vOrderBy =' order by poDate ' ;  \n" +
                "    ELSEIF pSortByColumn = 4 THEN  \n" +
                "		SET vOrderBy =' order by soDate ' ;  \n" +
                "    ELSE  \n" +
                "		SET vOrderBy =' order by soId Desc ' ;  \n" +
                "    END IF;  \n" +
                "    IF pSortingOrder = 2 THEN  \n" +
                "		SET vOrderBy = concat(vOrderBY , ' Desc');  \n" +
                "    ELSE  \n" +
                "		SET vOrderBy = concat(vOrderBY , ' Asc');  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF pCustomerID IS NOT NULL THEN  \n" +
                "		SET headerWhereClause = concat(\" (salesOrder.customerID=\",pCustomerID,\") \");  \n" +
                "	ELSE  \n" +
                "		SET headerWhereClause = ' 1=1 ';  \n" +
                "    END IF;  \n" +
                "    IF pSoWorkingStatus IS  NULL OR pSoWorkingStatus = 0 THEN  \n" +
                "		SET headerWhereClause = concat(headerWhereClause, ' AND 1=1 ');  \n" +
                "	ELSE  \n" +
                "		SET headerWhereClause = concat(headerWhereClause, ' and salesOrder.workingStatus = ' , pSoWorkingStatus)  ;  \n" +
                "    END IF;  \n" +
                "    IF pSoStatus IS NULL OR pSoStatus <> -1 THEN  \n" +
                "		SET headerWhereClause = concat(headerWhereClause, ' and salesOrder.`status` = ' , pSoStatus)  ;  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF pSearchText IS NOT NULL  THEN  \n" +
                "		SET headerWhereClause = CONCAT(headerWhereClause ,\" AND  (salesOrder.salesOrderNumber like '%\",pSearchText,\"%'  \n" +
                "									or salesOrder.poNumber like '%\",pSearchText,\"%'  \n" +
                "									or salesOrder.customerName like '%\",pSearchText,\"%'  \n" +
                "                                    or salesOrder.lastCPSNumber like '%\",pSearchText,\"%'  \n" +
                "                                    or salesOrder.shippingComment like '%\",pSearchText,\"%' \",  \n" +
                "                                    CASE WHEN  pAllowToUpdateComment > 0 THEN CONCAT(\" OR salesOrder.internalComment like '%\",pSearchText,\"%'\") else ''  END,  \n" +
                "                                    \" or salesOrder.soId in (select refSalesOrderID from salesorderdet  sodet  \n" +
                "														 join component comp on comp.id = sodet.partID and sodet.isDeleted = 0  \n" +
                "                                                         left join (select  salesOrderDetailID,partID,group_concat(woNumber) woList  \n" +
                "																	from vu_salesorder_workorder_list group by salesOrderDetailID,partID) workOrderDet on workOrderDet.salesOrderDetailID =  sodet.id  and workOrderDet.partID = sodet.partId  \n" +
                "														 where sodet.isDeleted = 0	and (comp.PIDCode like '%\",pSearchText,\"%' OR comp.mfgPN like '%\",pSearchText,\"%'  \n" +
                "																OR comp.nickName like '%\",pSearchText,\"%' OR sodet.woComment like '%\",pSearchText,\"%'  \n" +
                "                                                                OR sodet.internalComment like '%\",pSearchText,\"%'\",  \n" +
                "                                                                CASE WHEN  pAllowToUpdateComment > 0 THEN CONCAT(\" OR sodet.remark like '%\",pSearchText,\"%'\") else '' END,  \n" +
                "                                                                CASE WHEN  pAllowToUpdateComment > 0 THEN CONCAT(\" OR sodet.releaseLevelComment like '%\",pSearchText,\"%'\") else ''  END,  \n" +
                "                                                                \" OR workOrderDet.woList like '\",pSearchText,\"%'  )	))\");  \n" +
                "  \n" +
                "    END IF;  \n" +
                "    DROP TEMPORARY TABLE IF EXISTS temp_so_mst;  \n" +
                "	SET @SQLStatement1 = concat(\"CREATE TEMPORARY TABLE temp_so_mst AS  select soId, salesOrderNumber,  \n" +
                "						soDate, poNumber, poDate, poRevision, poRevisionDate,  \n" +
                "						sorevision, ifnull(shippingComment,'-') shippingComment, internalComment, isBlanketPO, isLegacyPO, isRmaPO,  \n" +
                "                        soStatus, soStatusText,  shippingMethodID,termsID,freeOnBoardId, salesCommissionTo,contactPersonId,  \n" +
                "						customerID, mfgCode, mfgName, customerName,  \n" +
                "                        lastCPSId,lastCPSNumber,lastCPSDate,ifnull(lastCPSComment,'-') lastCPSComment,CPSCount,  CPSDraftCnt,  \n" +
                "                        billingAddressID, intermediateShipmentId,  \n" +
                "                        shippingAddressID,defaultAddress, companyName,personName,division,street1,street2, street3,city, state,  \n" +
                "						postcode,countryName,email,contact,phExtension,faxCountryCode, faxNumber , workingStatus,  \n" +
                "                        isLegacyPOText,isBlanketPOText,isRmaPOText,blanketPOOption, isAlreadyPublished  \n" +
                "    from (select som.id as soId, som.salesOrderNumber,  \n" +
                "            som.soDate, som.poNumber, som.poDate, som.poRevision, som.poRevisionDate,  \n" +
                "            som.revision as sorevision , som.shippingComment, som.internalComment,  \n" +
                "            som.isBlanketPO, som.isLegacyPO, som.isRmaPO, som.customerID,  \n" +
                "            som.status as soStatus ,(case when som.`status` = 1 then 'Published' else 'Draft' end) soStatusText,  \n" +
                "            som.shippingMethodID,som.termsID,som.freeOnBoardId, som.salesCommissionTo,som.contactPersonId,  \n" +
                "            som.billingAddressID, som.intermediateShipmentId,  \n" +
                "            cust.mfgCode, cust.mfgName, fun_GetFormattedMfgCode(cust.mfgCode,cust.mfgName,\",vMfgCodeFormat,\") customerName,  \n" +
                "            cpsDetails.lastCPSId,  \n" +
                "            cpsDetails.lastCPSNumber,  \n" +
                "            cpsDetails.lastCPSDate,  \n" +
                "			cpsDetails.lastCPSComment,  \n" +
                "            cpsDetails.CPSCount,  \n" +
                "            ifnull(cpsDetails.CPSDraftCnt,0) CPSDraftCnt,  \n" +
                "            som.shippingAddressID,  \n" +
                "            custAddr.isDefault as defaultAddress,  \n" +
                "            custAddr.companyName,custAddr.personName,custAddr.division,custAddr.street1,custAddr.street2, custAddr.street3,custAddr.city, custAddr.state,  \n" +
                "            custAddr.postcode,country.countryName,custAddr.email,custAddr.contact,custAddr.phExtension,  \n" +
                "            custAddr.faxCountryCode, custAddr.faxNumber ,  \n" +
                "             (case when sodCnt.totalLineCount = sodCnt.completedLineCount  then 2  \n" +
                "				  when sodCnt.totalLineCount = sodCnt.canceledLineCount then -1  \n" +
                "                  else 1 end) workingStatus,  \n" +
                "            (case when som.isLegacyPO = 1 then 'Legacy PO' else '' end) isLegacyPOText,  \n" +
                "            (case when som.isRmaPO = 1 then 'RMA PO' else '' end) isRmaPOText,  \n" +
                "            (case when som.isBlanketPO = 1 then 'Blanket PO' else '' end) isBlanketPOText,  \n" +
                "            som.blanketPOOption,som.`status`,som.isAlreadyPublished  \n" +
                "	from salesordermst som  \n" +
                "    join mfgcodemst cust on cust.id = som.customerID and cust.isDeleted = 0  \n" +
                "	left join customer_addresses custAddr on  custAddr.customerId = som.customerID and custAddr.id = som.shippingAddressID and custAddr.isDeleted = 0  \n" +
                "	left join countrymst country on country.countryID = custAddr.countryID and country.isDeleted = 0  \n" +
                "    left join ( select  a.refSalesOrderID, max(lastCPSId) lastCPSId, max(lastCPSNumber) lastCPSNumber,  \n" +
                "				max(lastCPSDate) lastCPSDate, max(lastCPSComment) lastCPSComment, max(CPSCount) CPSCount, max(CPSDraftCnt) CPSDraftCnt  \n" +
                "				from (select cps.refSalesOrderID, cps.id,cps.packingSlipNumber,cps.packingSlipDate,cps.packingSlipComment ,  \n" +
                "						LAST_VALUE(cps.id) over (partition by cps.refSalesOrderID) lastCPSId ,  \n" +
                "						LAST_VALUE(cps.packingSlipNumber) over (partition by cps.refSalesOrderID) lastCPSNumber,  \n" +
                "						LAST_VALUE(cps.packingSlipDate) over (partition by cps.refSalesOrderID) lastCPSDate,  \n" +
                "						LAST_VALUE(cps.packingSlipComment) over (partition by cps.refSalesOrderID) lastCPSComment,  \n" +
                "						count(1) over (partition by cps.refSalesOrderID) CPSCount,  \n" +
                "						cpd.draftCnt AS CPSDraftCnt  \n" +
                "				from customer_packingslip cps  \n" +
                "                left join (select custp.refSalesOrderID draftRefSoId, count(1) draftCnt from customer_packingslip custp  \n" +
                "						where custp.isDeleted = 0  and custp.substatus = 1 and transType ='P'  \n" +
                "						group by custp.refSalesOrderID) cpd on cpd.draftRefSoId = cps.refSalesOrderID  \n" +
                "                where cps.isDeleted = 0  and cps.transType = 'P' and cps.refsalesorderid is not null) a  \n" +
                "				group by a.refSalesOrderID) cpsDetails on cpsDetails.refSalesOrderID = som.id  \n" +
                "	left join (select sod.refSalesOrderID as soId ,  \n" +
                "				sum((case when sod.salesOrderDetStatus = 2 then 1 else 0 end) ) completedLineCount,  \n" +
                "				count(1) totalLineCount,  \n" +
                "				sum((case when sod.isCancle = 1 then 1 else 0 end)) canceledLineCount  \n" +
                "				From salesorderdet sod where sod.isDeleted = 0  \n" +
                "				Group By sod.refSalesOrderID ) sodCnt on sodCnt.soId = som.id  \n" +
                "    where som.isDeleted = 0  \n" +
                "    ) salesOrder  \n" +
                "    where 1=1 and \", headerWhereClause,    vOrderBy , rowNumWhere) ;  \n" +
                " -- select @SQLStatement1;  \n" +
                "	PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "    DROP TEMPORARY TABLE IF EXISTS temp_so_detail;  \n" +
                "    CREATE TEMPORARY TABLE temp_so_detail AS  \n" +
                "    select soDetId,  \n" +
                "				refSalesOrderID, partID, lineID, custPOQty, tbdComment, internalComment,  \n" +
                "				shippingComment, isCancle,partDescription,salesOrderDetStatus,custPOLineNumber,  \n" +
                "				PIDCode, mfgPN,mfgcodeID,mfrName, rohsName, rohsIcon,  nickName,  partType,  isCustom,custAssyPN,partSpecialNote,  \n" +
                "                po_TBDQty,shippedQty AS shippedQty , woComment  ,  \n" +
                "                cancelStatus, isHotJob,isDetHalt,  \n" +
                "                soWorkingStatus, materialTentitiveDocDate  ,refSODetID,blanketSOId,  \n" +
                "                blanketPONumber  \n" +
                "	from (select  sod.id as soDetId,  \n" +
                "				sod.refSalesOrderID,  \n" +
                "				sod.partID,  \n" +
                "				sod.lineID,  \n" +
                "				sod.qty as custPOQty,  \n" +
                "				sod.releaseLevelComment as tbdComment, -- TBD comments  \n" +
                "				sod.internalComment,  \n" +
                "				sod.remark as shippingComment,  \n" +
                "				sod.isCancle,  \n" +
                "                ifnull(sod.partDescription,'-') partDescription,  \n" +
                "                sod.salesOrderDetStatus,  \n" +
                "                sod.custPOLineNumber,  \n" +
                "				co.PIDCode,  \n" +
                "				co.mfgPN,  \n" +
                "                co.mfgcodeID,  \n" +
                "                fun_GetFormattedMfgCode(partMfg.mfgCode,partMfg.mfgName,vMfgCodeFormat) mfrName,  \n" +
                "				rohs.name AS rohsName,  \n" +
                "				rohs.rohsIcon,  \n" +
                "                co.nickName,  \n" +
                "                co.partType,  \n" +
                "                co.isCustom,  \n" +
                "                co.custAssyPN ,  \n" +
                "                co.specialNote partSpecialNote,  \n" +
                "				(sod.qty - ifnull(soDetQty.relQty,0)) po_TBDQty,  \n" +
                "                cpd.shippedQty,  \n" +
                "                ifnull(sod.woComment, workOrderDet.woList) woComment  ,  \n" +
                "                sod.isCancle cancelStatus,  \n" +
                "                sod.isHotJob,  \n" +
                "                (case when holdTrans.holdCnt > 0 then 1 else 0 end ) isDetHalt,  \n" +
                "                (CASE 	WHEN (sod.isCancle = 1) THEN 'Canceled'  \n" +
                "						WHEN (sod.`salesOrderDetStatus` = 1)   THEN 'In Progress'  \n" +
                "						ELSE 'Completed'  END) soWorkingStatus,  \n" +
                "                materialTentitiveDocDate ,  \n" +
                "                sod.refSODetID,  \n" +
                "                blanketPO.blanketSOId,  \n" +
                "                blanketPO.poNumber AS blanketPONumber  \n" +
                "		from salesorderdet sod  \n" +
                "        JOIN temp_so_mst tempMst ON tempMst.soId = sod.refSalesOrderID  \n" +
                "		left join component co on co.id = sod.partID and co.isDeleted = 0  \n" +
                "        left join (select sDetID, sum(qty) relQty from salesshippingmst where isDeleted = 0  group by sDetID) as soDetQty on  soDetQty.sDetID = sod.id  \n" +
                "        left join (select refSalesorderDetid , sum(cpd.shipQty) shippedQty  \n" +
                "					from customer_packingslip_det  cpd  \n" +
                "					join customer_packingslip cps on cps.id = cpd.refCustPackingSlipID and cps.isDeleted = 0  \n" +
                "                    where cpd.isDeleted = 0 and cps.transType='P' group by refSalesorderDetid) cpd on cpd.refSalesorderDetid = sod.id  \n" +
                "		left join (select  salesOrderDetailID,partID,group_concat(woNumber) woList  \n" +
                "					from vu_salesorder_workorder_list group by salesOrderDetailID,partID) workOrderDet on workOrderDet.salesOrderDetailID =  sod.id  and workOrderDet.partID = sod.partId  \n" +
                "		left join rfq_rohsmst rohs on rohs.id = co.RoHSStatusID and rohs.isDeleted = 0  \n" +
                "        left join mfgcodemst partMfg on partMfg.id = co.mfgcodeID and partMfg.isDeleted = 0  \n" +
                "        left join (select refTransid ,count(1) holdCnt from holdunholdtrans where refType='PO' and isDeleted = 0 and endDate is NUll and `status` = 'H' group by refTransid) holdTrans  \n" +
                "			on holdTrans.refTransid = sod.id  \n" +
                "        left join (select blanketDet.id blanketDetId, blanketSO.id blanketSOId , blanketSO.poNumber from salesorderdet blanketDet  \n" +
                "				join salesordermst blanketSO on blanketSO.id = blanketDet.refSalesOrderID and blanketSO.isDeleted = 0  \n" +
                "                where blanketSO.isDeleted = 0) blanketPO on blanketPO.blanketDetId = sod.refBlanketPOID  \n" +
                "		where sod.isDeleted = 0  \n" +
                "	) a;  \n" +
                "  \n" +
                "    DROP TEMPORARY TABLE IF EXISTS temp_so_rel_detail;  \n" +
                "    CREATE TEMPORARY TABLE temp_so_rel_detail AS  \n" +
                "    select soDetId,  \n" +
                "				packingSlipDate,  \n" +
                "				promisedShipDate,  \n" +
                "                refCustPackingSlipID, packingSlipDetId,  \n" +
                "                  row_number() over (partition by releaseId,soDetId order by packingSlipDate desc) cpsIndex,  \n" +
                "				refSalesOrderID,releaseId, partID, lineID, custPOQty,  internalComment,  releaseLineComment,  \n" +
                "				shippingComment, isCancle, releaseNumber, soReleaseQty,  \n" +
                "                shippedQty AS shippedQty,  \n" +
                "                 cpsDetailCnt,  \n" +
                "                 isReadyToShip  ,cpsDetailShippedQty  ,  \n" +
                "                (case when  (soReleaseQty - cpsDetailShippedQty) <= 0 then 1 else 0 end) relCompletedStatus,  \n" +
                "                cpsSubStatus  ,poReleaseNumber,salesOrderDetStatus, 'completed ' as firstInsert  \n" +
                "	from (select  sod.id as soDetId,  \n" +
                "				sod.refSalesOrderID,  \n" +
                "				sod.partID,  \n" +
                "				sod.lineID,  \n" +
                "				sod.qty as custPOQty,  \n" +
                "				sod.internalComment,  \n" +
                "				sod.remark as shippingComment,  \n" +
                "                soship.releaseNotes releaseLineComment,  \n" +
                "				sod.isCancle,  \n" +
                "                soship.shippingID releaseId,  \n" +
                "				soship.releaseNumber,  \n" +
                "				soship.promisedShipDate,  \n" +
                "				(case when co.partType = 4 then sod.qty else  soship.qty end) soReleaseQty,  \n" +
                "				cpd.refCustPackingSlipID,  \n" +
                "                cpd.id packingSlipDetId,  \n" +
                "				cpd.shipQty AS shippedQty,  \n" +
                "                cp.packingSlipDate ,  \n" +
                "                SUM(cpd.shipQty) over (partition by soship.shippingID,sod.id ) cpsDetailShippedQty,  \n" +
                "                COUNT(refCustPackingSlipID) over (partition by soship.shippingID,sod.id ) cpsDetailCnt,  \n" +
                "--                row_number() over (partition by soship.shippingID,sod.id ) cpsIndex,  \n" +
                "                soship.isReadyToShip,  \n" +
                "                cp.subStatus AS cpsSubStatus,  \n" +
                "                soship.poReleaseNumber,  \n" +
                "                sod.salesOrderDetStatus  \n" +
                "		from salesorderdet sod  \n" +
                "        JOIN temp_so_mst tempMst ON tempMst.soId = sod.refSalesOrderID  \n" +
                "		left join component co on co.id = sod.partID and co.isDeleted = 0  \n" +
                "		left join salesshippingmst soship on soship.sDetID = sod.id and soship.isDeleted = 0  \n" +
                "		left join customer_packingslip_det cpd on cpd.refSalesorderDetid = sod.id and  (case when co.partType <> 4 then cpd.shippingId = soship.shippingID else 1 = 1 end)  and cpd.isDeleted = 0 and cpd.refCustPackingSlipID in (select id from customer_packingslip where isDeleted = 0 and transType='P')  \n" +
                "        left join customer_packingslip cp on cp.id = cpd.refCustPackingSlipID and sod.refSalesOrderID = cp.refSalesOrderID and cp.isDeleted = 0 and cp.transType = 'P'  \n" +
                "		-- left join rfq_rohsmst rohs on rohs.id = co.RoHSStatusID and rohs.isDeleted = 0  \n" +
                "		where sod.isDeleted = 0  \n" +
                "	) a;  \n" +
                "    -- order by a.refSalesOrderID,a.packingSlipDate desc;  \n" +
                "  \n" +
                "    /*  \n" +
                "    /*and ifnull((case when co.partType = 4 then sod.qty else  soship.qty end ),0) <=  \n" +
                "						(select ifnull(sum(cpdTot.shipQty),0) from customer_packingslip_det cpdTot  \n" +
                "						where cpdTot.isDeleted = 0 and cpdTot.refSalesorderDetid =  sod.id )  \n" +
                "    INSERT INTO temp_so_rel_detail  \n" +
                "    select soDetId,  \n" +
                "    packingSlipDate,  \n" +
                "			promisedShipDate,  \n" +
                "            refCustPackingSlipID, packingSlipDetId,  \n" +
                "				row_number() over (partition by releaseId,soDetId order by promisedShipDate desc) cpsIndex,  \n" +
                "				refSalesOrderID,releaseId, partID, lineID, custPOQty,  internalComment,  releaseLineComment,  \n" +
                "				shippingComment, isCancle, releaseNumber, soReleaseQty,  \n" +
                "                shippedQty AS shippedQty,  \n" +
                "                cpsDetailCnt,  \n" +
                "                isReadyToShip  ,cpsDetailShippedQty  ,  \n" +
                "                (case when  (soReleaseQty - cpsDetailShippedQty) <= 0 then 1 else 0 end) relCompletedStatus,  \n" +
                "                cpsSubStatus  ,poReleaseNumber,salesOrderDetStatus,'pending ' as firstInsert  \n" +
                "	from (select  sod.id as soDetId,  \n" +
                "				sod.refSalesOrderID,  \n" +
                "				sod.partID,  \n" +
                "				sod.lineID,  \n" +
                "				sod.qty as custPOQty,  \n" +
                "				sod.internalComment,  \n" +
                "				sod.remark as shippingComment,  \n" +
                "                soship.releaseNotes releaseLineComment,  \n" +
                "				sod.isCancle,  \n" +
                "                soship.shippingID releaseId,  \n" +
                "				soship.releaseNumber,  \n" +
                "				soship.promisedShipDate,  \n" +
                "				(case when co.partType = 4 then sod.qty else  soship.qty end) soReleaseQty,  \n" +
                "				cpd.refCustPackingSlipID,  \n" +
                "                cpd.id packingSlipDetId,  \n" +
                "				cpd.shipQty AS shippedQty,  \n" +
                "                cp.packingSlipDate ,  \n" +
                "                SUM(cpd.shipQty) over (partition by soship.shippingID,sod.id ) cpsDetailShippedQty,  \n" +
                "                COUNT(refCustPackingSlipID) over (partition by soship.shippingID,sod.id ) cpsDetailCnt,  \n" +
                "--                row_number() over (partition by soship.shippingID,sod.id ) cpsIndex,  \n" +
                "                soship.isReadyToShip,  \n" +
                "                cp.subStatus AS cpsSubStatus,  \n" +
                "                soship.poReleaseNumber,  \n" +
                "                sod.salesOrderDetStatus  \n" +
                "		from salesorderdet sod  \n" +
                "        JOIN temp_so_mst tempMst ON tempMst.soId = sod.refSalesOrderID  \n" +
                "		left join component co on co.id = sod.partID and co.isDeleted = 0  \n" +
                "		left join salesshippingmst soship on soship.sDetID = sod.id and soship.isDeleted = 0  \n" +
                "		left join customer_packingslip_det cpd on cpd.refSalesorderDetid = sod.id and  (case when co.partType <> 4 then cpd.shippingId = soship.shippingID else 1 = 1 end)  and cpd.isDeleted = 0 and cpd.refCustPackingSlipID in (select id from customer_packingslip where isDeleted = 0 and transType='P')  \n" +
                "        left join customer_packingslip cp on cp.id = cpd.refCustPackingSlipID and sod.refSalesOrderID = cp.refSalesOrderID and cp.isDeleted = 0 and cp.transType = 'P'  \n" +
                "		-- left join rfq_rohsmst rohs on rohs.id = co.RoHSStatusID and rohs.isDeleted = 0  \n" +
                "		where sod.isDeleted = 0  \n" +
                "        and ifnull((case when co.partType = 4 then sod.qty else soship.qty end),0) >  \n" +
                "						(select ifnull(sum(cpdTot.shipQty),0) from customer_packingslip_det cpdTot  \n" +
                "						where cpdTot.isDeleted = 0 and cpdTot.refSalesorderDetid =  sod.id )  \n" +
                "	) a  \n" +
                "    order by a.refSalesOrderID,a.soDetId,a.promisedShipDate;  \n" +
                "    */  \n" +
                "  \n" +
                "	/*SET @SQLStatement1 = CONCAT (\"SELECT mst.* from temp_so_mst mst  \n" +
                "    LEFT JOIN temp_so_detail det  on det.refSalesOrderID = mst.soId  \n" +
                "    where det.woComment like '%\",pSearchText,\"%'\");  \n" +
                "    PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  */  \n" +
                "	SELECT * from temp_so_mst;  \n" +
                "  \n" +
                "    SET @SQLStatement2 = CONCAT(\"SELECT soDetail.* from temp_so_detail AS soDetail  \n" +
                "								left join temp_so_mst mst on mst.soId = soDetail.refSalesOrderID  \n" +
                "                                order by soDetail.salesOrderDetStatus, soDetail.soDetId\");  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                " 	SELECT * from temp_so_rel_detail  \n" +
                "		order by soDetId,relCompletedStatus,promisedShipDate;  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_so_mst;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_so_detail;  \n" +
                "    DROP TEMPORARY TABLE IF EXISTS temp_so_rel_detail;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 04-01-2022   *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1263,'1.00','V1','Sproc_getSalesOrderListAgainstShipment-User Story 39013: Add CPS Popup && shipment Summary Details Improvement - Shweta '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1263:
            allDbChangesArray.push(
                /* **************************** New Script -> 04-01-2022  *********************************** */
                "DROP PROCEDURE IF EXISTS Sproc_GetShippedPackingSlipDetailBySoDetID;  \n" +
                "CREATE PROCEDURE `Sproc_GetShippedPackingSlipDetailBySoDetID`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "    IN pWhereClause VARCHAR(16383),  \n" +
                "	IN psalesorderDetID INT,  \n" +
                "	IN preleaseLineId INT,  \n" +
                "    IN pSalesOrderID INT ,  \n" +
                "    IN pPackingSlipStatus INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE vMfgNameFormat INT;  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;  \n" +
                "  \n" +
                "  \n" +
                "SELECT FUN_GETMFGCODENAMEFORMAT() INTO vMfgNameFormat;  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "		SET pOrderBy = \"ORDER BY c.packingSlipDate Desc\";  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "	END IF;  \n" +
                "    IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = '1=1' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF preleaseLineId IS NOT NULL THEN  \n" +
                "		SET @temp_Sproc_GetShippedPackingSlipDetailBySoDetID = concat(\"SELECT  cpd.shipQty, cp.id, cp.packingSlipNumber,cp.packingSlipDate,  \n" +
                "				cp.subStatus,cinv.invoiceNumber,cinv.invoiceDate,cp.refCustInvoiceID AS refCustInvoiceID  ,  \n" +
                "				cpd.partId,co.mfgPN,co.PIDCode,co.nickname,co.RoHSStatusID,rr.`name` rohsName , rr.rohsIcon,  \n" +
                "                co.mfgcodeID,fun_GetFormattedMfgCode(mfg.mfgCode,mfg.mfgName,\",vMfgNameFormat,\") mfrName,  \n" +
                "                cpd.shippingNotes , cpd.internalComment ,  \n" +
                "                fun_getCustomerInvoiceSubStatusName(cp.subStatus,'P') statusName  \n" +
                "		FROM 	customer_packingslip_det cpd  \n" +
                "		JOIN 	customer_packingslip cp ON cp.id = cpd.refCustPackingSlipID AND cp.isdeleted = 0  \n" +
                "		LEFT JOIN customer_packingslip cinv ON cinv.id=cp.refCustInvoiceID AND cinv.isdeleted=0  \n" +
                "        JOIN component co ON co.id = cpd.partId and co.isDeleted = 0  \n" +
                "		JOIN rfq_rohsmst rr ON rr.id = co.RoHSStatusID and rr.isDeleted = 0  \n" +
                "        JOIN mfgcodemst mfg ON mfg.id = co.mfgcodeID and mfg.isDeleted = 0  \n" +
                "		WHERE   cpd.refsalesorderdetid= \", psalesorderDetID ,\"  \n" +
                "		AND 	cpd.shippingId= \", preleaseLineId, \"  \n" +
                "        AND  cpd.isdeleted = 0  \n" +
                "		AND     cp.transType = 'P' \");  \n" +
                "    ELSEIF pSalesOrderID IS NOT NULL AND psalesorderDetID IS NULL THEN  \n" +
                "		 SET @temp_Sproc_GetShippedPackingSlipDetailBySoDetID = concat(\"SELECT  cp.id, cp.packingSlipNumber,cp.packingSlipDate,  \n" +
                "				cp.subStatus,cinv.invoiceNumber,cinv.invoiceDate,  \n" +
                "				cp.refCustInvoiceID AS refCustInvoiceID, 	SUM(cpd.shipQty) AS shipQty,  \n" +
                "                cpd.partId ,co.mfgPN,co.PIDCode,co.nickname,co.RoHSStatusID,rr.`name` rohsName , rr.rohsIcon,  \n" +
                "                co.mfgcodeID, fun_GetFormattedMfgCode(mfg.mfgCode,mfg.mfgName,\",vMfgNameFormat,\") mfrName,  \n" +
                "                co.isCustom,co.custAssyPN,  \n" +
                "                cpd.shippingNotes , cpd.internalComment,  \n" +
                "                fun_getCustomerInvoiceSubStatusName(cp.subStatus,'P') statusName  \n" +
                "			FROM customer_packingslip cp  \n" +
                "            LEFT JOIN customer_packingslip_det cpd on cpd.refCustPackingSlipID = cp.id and cpd.isDeleted = 0  \n" +
                "            LEFT JOIN component co ON co.id = cpd.partId and co.isDeleted = 0  \n" +
                "            LEFT JOIN rfq_rohsmst rr ON rr.id = co.RoHSStatusID and rr.isDeleted = 0  \n" +
                "            LEFT JOIN mfgcodemst mfg ON mfg.id = co.mfgcodeID and mfg.isDeleted = 0  \n" +
                "			LEFT JOIN customer_packingslip cinv ON cinv.id=cp.refCustInvoiceID AND cinv.isdeleted=0  \n" +
                "			WHERE   cp.refSalesOrderID= \", pSalesOrderID,\"  \n" +
                "            AND  cp.isdeleted = 0  \n" +
                "			AND     cp.transType = 'P'  \n" +
                "            AND  cp.subStatus = \",ifnull(pPackingSlipStatus,\"cp.subStatus\"),\"  \n" +
                "            group by cp.id, cp.packingSlipNumber,cp.packingSlipDate,cp.subStatus,cinv.invoiceNumber,cinv.invoiceDate,cp.refCustInvoiceID,  \n" +
                "				cpd.partId ,co.mfgPN,co.PIDCode,co.nickname,co.RoHSStatusID,rr.`name`, rr.rohsIcon,co.isCustom,cpd.shippingNotes , cpd.internalComment			\");  \n" +
                "    ELSE  \n" +
                "       SET @temp_Sproc_GetShippedPackingSlipDetailBySoDetID =  concat(\"SELECT  cpd.shipQty, cp.id, cp.packingSlipNumber,cp.packingSlipDate,cp.subStatus,cinv.invoiceNumber,cinv.invoiceDate,cp.refCustInvoiceID AS refCustInvoiceID,  \n" +
                "				cpd.partId ,co.mfgPN,co.PIDCode,co.nickname,co.RoHSStatusID,rr.`name` rohsName , rr.rohsIcon,  \n" +
                "                co.mfgcodeID,fun_GetFormattedMfgCode(mfg.mfgCode,mfg.mfgName,\",vMfgNameFormat,\") mfrName,co.isCustom,  \n" +
                "                cpd.shippingNotes , cpd.internalComment ,  \n" +
                "                fun_getCustomerInvoiceSubStatusName(cp.subStatus,'P') statusName  \n" +
                "		FROM 	customer_packingslip_det cpd  \n" +
                "		JOIN 	customer_packingslip cp ON cp.id = cpd.refCustPackingSlipID AND cp.isdeleted = 0  \n" +
                "		LEFT JOIN customer_packingslip cinv ON cinv.id=cp.refCustInvoiceID AND cinv.isdeleted=0  \n" +
                "        JOIN component co ON co.id = cpd.partId and co.isDeleted = 0  \n" +
                "		JOIN rfq_rohsmst rr ON rr.id = co.RoHSStatusID and rr.isDeleted = 0  \n" +
                "        JOIN mfgcodemst mfg ON mfg.id = co.mfgcodeID and mfg.isDeleted = 0  \n" +
                "		WHERE   cpd.refsalesorderdetid= \",psalesorderDetID,\"  \n" +
                "        AND  cpd.isdeleted = 0  \n" +
                "		AND     cp.transType = 'P' \");  \n" +
                "    END IF;  \n" +
                " -- select @temp_Sproc_GetShippedPackingSlipDetailBySoDetID;  \n" +
                "	 /* to get total count of rows */  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_GetShippedPackingSlipDetailBySoDetID,\" ) c where 1=1 and \", pWhereClause);  \n" +
                "    PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"select c.* from ( \", @temp_Sproc_GetShippedPackingSlipDetailBySoDetID,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "-- select @SQLStatement2;  \n" +
                "    PREPARE query1 FROM @SQLStatement2;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 04-01-2022   *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1264,'1.00','V1','Sproc_GetShippedPackingSlipDetailBySoDetID- User Story 39013: Add CPS Popup && shipment Summary Details Improvement - Shweta '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1264:
            allDbChangesArray.push(
                /* **************************** New Script -> 04-01-2022  *********************************** */
                "DROP PROCEDURE IF EXISTS Sproc_RetrieveCustomerInvoiceDetailsPerLine;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveCustomerInvoiceDetailsPerLine`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pFilterStatus LONGTEXT,  \n" +
                "	IN pDueDate DATE,  \n" +
                "	IN pAdditionalDays INT,  \n" +
                "	IN pTermsAndAboveDays INT,  \n" +
                "	IN pPoNumber VARCHAR(50),  \n" +
                "	IN pIsExactSearchPO TINYINT,  \n" +
                "	IN pMfgCodeIds LONGTEXT ,  \n" +
                "	IN pPaymentTermsIds LONGTEXT ,  \n" +
                "	IN pPartId VARCHAR(5000) ,  \n" +
                "	IN pTransType VARCHAR(5) ,  \n" +
                "	IN pFromDate DATE,  \n" +
                "	IN pToDate DATE,  \n" +
                "	IN pPaymentStatusFilter VARCHAR(50) ,  \n" +
                "	IN pCreditAppliedStatusFilter  VARCHAR(100) ,  \n" +
                "	IN pZeroAmountFilter TINYINT,  \n" +
                "	IN pCreditMemoRefundStatusFilter VARCHAR(100),  \n" +
                "    IN pMarkedForRefund TINYINT,  \n" +
                "    IN pWithCommissionLine TINYINT,  \n" +
                "    IN pWithOtherChargesLine TINYINT,  \n" +
                "    IN pZeroAmountLineFilter TINYINT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;  \n" +
                "	DECLARE vDateTimeDisplayFormat VARCHAR(100);  \n" +
                "	DECLARE vTimeZone VARCHAR(50);  \n" +
                "	DECLARE v_receivedAmtSF VARCHAR(1000);  \n" +
                "	DECLARE v_appliedCMPDJoin VARCHAR(500);  \n" +
                "	DECLARE vMfgCodeFormat INT;  \n" +
                "  \n" +
                "	SELECT fun_getTimeZone() INTO vTimeZone;  \n" +
                "	SELECT fun_getDateTimeFormat() INTO vDateTimeDisplayFormat;  \n" +
                "	SET v_appliedCMPDJoin = '';  \n" +
                "    SELECT fun_getMFGCodeNameFormat() INTO vMfgCodeFormat;  \n" +
                "  \n" +
                "	IF pTransType = 'C' THEN  \n" +
                "		SET v_receivedAmtSF = CONCAT(\" psip.id AS custPaymentMstID, psip.paymentAmount AS receivedAmount ,  \n" +
                "				(SELECT SUM(paymentAmount) FROM packingslip_invoice_payment_det WHERE refRefundCustCreditMemoID = cp.id  \n" +
                "						AND isDeleted = 0 AND isPaymentVoided = 0) AS totRefundIssuedAgainstCreditMemo ,  \n" +
                "				cp.refundStatus, fun_getCustCreditMemoRefundStatusTextByValue(cp.refundStatus) AS creditMemoRefundStatusText , \");  \n" +
                "		SET v_appliedCMPDJoin = CONCAT(\" LEFT JOIN packingslip_invoice_payment psip ON cp.id = psip.refCustCreditMemoID AND psip.refPaymentMode = 'CA'  \n" +
                "						AND psip.isDeleted = 0 AND psip.isPaymentVoided = 0 \");  \n" +
                "	ELSE  \n" +
                "		SET v_receivedAmtSF = CONCAT(' get_totalCustomerInvoiceReceivedAmountById(cp.id) AS receivedAmount , ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "	SET @temp_Sproc_RetrieveCustomerInvoiceDetailsPerLine = CONCAT(\"  \n" +
                "		SELECT  cp.id, cp.transType, cp.poNumber,cp.poDate, cp.poRevision,  \n" +
                "        (CASE WHEN cp.transType = 'I' THEN 'Invoice' WHEN cp.transType = 'C' THEN 'Credit Memo' END) transTypeText,  \n" +
                "        cp.packingSlipNumber,  \n" +
                "        cp.packingslipDate,  \n" +
                "        cp.invoiceNumber,  \n" +
                "        cp.invoiceDate,  \n" +
                "        cp.revision,  \n" +
                "        cp.creditMemoNumber, cp.creditMemoDate,  \n" +
                "        cp.refDebitMemoNumber, cp.refDebitMemoDate,  \n" +
                "        (CASE WHEN cp.packingSlipType = 1 or cp.packingSlipType = 2  THEN 'Invoice'  \n" +
                "				WHEN  cp.packingSlipType =3 THEN 'MISC Invoice' END)invoiceType,  \n" +
                "	(CASE WHEN cp.packingSlipType = 1 or cp.packingSlipType = 2  THEN 1  \n" +
                "				WHEN  cp.packingSlipType =3 THEN 2 END)invoiceTypeCode,  \n" +
                "        cp.soNumber,cp.soDate,  \n" +
                "		cp.sorevision,  \n" +
                "        cp.refSalesOrderID,  \n" +
                "        cpd.shippingNotes , cpd.internalComment,  \n" +
                "		fun_getCustomerInvoiceSubStatusName(cp.subStatus, cp.transType) statusConvertedValue,  \n" +
                "		 cp.status, cp.subStatus,  \n" +
                "         (case when cp.transType = 'I' then  fun_getPaymentStatusByCustPackingSlipSubStatus(cp.subStatus,cp.transType,cp.paymentStatus,'CODE') end) AS paymentStatusCode,  \n" +
                "		 (case when cp.transType = 'I' then  fun_getPaymentStatusByCustPackingSlipSubStatus(cp.subStatus,cp.transType,cp.paymentStatus,'VAL') end) AS paymentStatusValue,  \n" +
                "		(CASE WHEN cp.transType = 'C' THEN fun_getCustCreditAppliedStatusTextByValue(cp.paymentStatus)  \n" +
                "			ELSE '' END) AS creditAppliedStatus ,  \n" +
                "		  cp.paymentStatus,  \n" +
                "          ifnull(packingSlip.subStatus,0) packingSlipStatusID,  \n" +
                "		  fun_getCustomerInvoiceSubStatusName(packingSlip.subStatus, 'P') packingSlipStatus,  \n" +
                "          cp.isMarkForRefund AS isMarkForRefundCM, cp.agreedRefundAmt AS agreedRefundAmtCM,  \n" +
                "		  fun_getIntToText(cp.isMarkForRefund) isMarkRefundConvertedValueCM,  \n" +
                "		 fun_GetFormattedMfgCode(m.mfgcode,m.mfgname,\",vMfgCodeFormat,\") as customerName,  \n" +
                "		 m.mfgcode as customerCode,  \n" +
                "         cp.customerID,  \n" +
                "         cpd.createdBy as createdById,  \n" +
                "		\",v_receivedAmtSF,\"  \n" +
                "		 fun_getUserNameByID(cpd.updatedBy) updatedby,  \n" +
                "		 fun_getUserNameByID(cpd.createdBy) createdby,  \n" +
                "		 fun_getRoleByID(cpd.createByRoleId) createdbyRole,  \n" +
                "		 fun_getRoleByID(cpd.updateByRoleId) updatedbyRole,  \n" +
                "		 fun_ApplyCommonDateTimeFormatByParaValue(cpd.createdAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') createdAt,  \n" +
                "		 fun_ApplyCommonDateTimeFormatByParaValue(cpd.UpdatedAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') updatedAt ,  \n" +
                "         cp.freeOnBoardName,  \n" +
                "         cp.isLocked,  \n" +
                "         fun_getIntToText(cp.isLocked) isLockedConvertedValue,  \n" +
                "         fun_getUserNameByID(cp.lockedBy) lockedBy,  \n" +
                "         fun_getRoleByID(cp.lockedByRole) lockedByRole,  \n" +
                "         fun_ApplyCommonDateTimeFormatByParaValue(cp.lockedAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') lockedAt,  \n" +
                "         fun_getGenericCategoryCodeNameByID(cp.shippingMethodId) shippingMethodName,  \n" +
                "         packingSlip.id packingSlipId,  \n" +
                "         (select group_concat(paymentNumber)  \n" +
                "				from  packingslip_invoice_payment pip join packingslip_invoice_payment_det pipd  \n" +
                "				on pipd.refPayementid = pip.id and pipd.isDeleted = 0  \n" +
                "                where pipd.refCustPackingslipInvoiceID = cp.id) paymentNumber,  \n" +
                "         cp.rmaNumber , cp.systemId,  \n" +
                "         fun_getGenericCategoryCodeNameByID(cp.termsID) paymentTerms ,  \n" +
                "         cpd.isZeroValue,  fun_getIntToText(cpd.isZeroValue) isZeroValueConverted,  \n" +
                "         cp.termsDays termDays,  \n" +
                "         fun_getDueDateEOM(cp.invoiceDate,cp.termsDays,cp.termsId) paymentDueDate,  \n" +
                "         cpd.id detID,  \n" +
                "         cpd.partId,  \n" +
                "         co.mfgpn,  \n" +
                "         cpd.assyDescription ,  \n" +
                "         co.PIDCode,  \n" +
                "         co.RoHSStatusID,  \n" +
                "         co.mfgcodeID,  \n" +
                "         co.nickname,  \n" +
                "         cpd.lineID,  \n" +
                "         cpd.reflineID,  \n" +
                "         cpd.custPOLineID,  \n" +
                "         cpd.shipQty,  \n" +
                "         cpd.unitPrice,  \n" +
                "         cpd.componentStockType,  \n" +
                "         cpd.extendedPrice,  \n" +
                "         othercharges AS lineOtherCharges,  \n" +
                "         (IFNULL(cpd.otherCharges,0)+ IFNULL(cpd.extendedPrice,0)) totalExtPrice,  \n" +
                "		 cpd.quoteNumber,  \n" +
                "		 cpd.quoteFrom,  \n" +
                "         (CASE WHEN quoteFrom = 1 THEN 'From RFQ' WHEN quoteFrom = 3 THEN 'N/A' WHEN quoteFrom = 2 THEN 'From Part Master' ELSE '' END) quoteFromText ,  \n" +
                "		 (case when cpd.quoteFrom = 2 then cpd.refAssyQtyTurnTimeID  \n" +
                "			  when cpd.quoteFrom = 1 then cpd.refRFQQtyTurnTimeID  \n" +
                "              else null end) qtyTurnTimeID,  \n" +
                "		 cpd.assyQtyTurnTimeText,  \n" +
                "		 cpd.refRFQGroupID,  \n" +
                "         rohs.rohsIcon,  \n" +
                "         rohs.name rohsName,  \n" +
                "         fun_GetFormattedMfgCode(partMfr.mfgcode,partMfr.mfgname,\",vMfgCodeFormat,\") as mfrName,  \n" +
                "         (select count(1) from customer_packingslip_commission_attribute_mstdet cpcomm where cpcomm.refCustPackingSlipDetID = cpd.id and cpcomm.isDeleted = 0 ) as commissionCnt,  \n" +
                "         (select count(1) from customer_packingslip_otherexpense_details cpOther where cpOther.refCustomerPackingSlipDetID = cpd.id and cpOther.isDeleted = 0 ) as lineOtherChargesCnt,  \n" +
                "         cp.totalAmount,  \n" +
                "         cp.refCustInvoiceID,  \n" +
                "         co.partType,  \n" +
                "         co.isCustom, co.custAssyPN customPartNumber ,  \n" +
                "         cpd.releaseNotes  \n" +
                "	 FROM customer_packingslip cp  \n" +
                "	JOIN mfgcodemst m on m.id = cp.customerID and m.isDeleted = 0  \n" +
                "	JOIN customer_packingslip_det cpd ON cpd.refCustPackingSlipID = cp.id and cpd.isDeleted = 0  \n" +
                "	JOIN component co on co.id = cpd.partId  and co.isDeleted = 0  \n" +
                "	LEFT JOIN mfgcodemst partMfr on partMfr.id = co.mfgcodeID and partMfr.isDeleted = 0  \n" +
                "	LEFT JOIN rfq_rohsmst rohs ON rohs.id = co.RoHSStatusID and rohs.isDeleted = 0  \n" +
                "	LEFT JOIN customer_packingslip packingSlip on packingSlip.refCustInvoiceID = cp.id and packingSlip.isDeleted = 0  and packingSlip.transType = 'P'  \n" +
                "		\" , v_appliedCMPDJoin ,\"  \n" +
                "	WHERE  cp.isDeleted=0  \n" +
                "        AND cp.transType = '\" , pTransType,\"'\");  \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "		IF pTransType = 'I' THEN  \n" +
                "			SET pOrderBy = \"ORDER BY c.paymentDueDate ASC\";  \n" +
                "        ELSE  \n" +
                "			SET pOrderBy = \"ORDER BY c.id DESC\";  \n" +
                "        END IF;  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "	END IF;  \n" +
                "    IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = '1=1' ;  \n" +
                "	END IF;  \n" +
                "    IF (pMfgCodeIds IS NOT NULL AND pMfgCodeIds != '') THEN  \n" +
                "		SET @temp_Sproc_RetrieveCustomerInvoiceDetailsPerLine= CONCAT(@temp_Sproc_RetrieveCustomerInvoiceDetailsPerLine, ' AND m.id in (', pMfgCodeIds, ' )');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pPaymentTermsIds IS NOT NULL AND pPaymentTermsIds != '') THEN  \n" +
                "		SET @temp_Sproc_RetrieveCustomerInvoiceDetailsPerLine= CONCAT(@temp_Sproc_RetrieveCustomerInvoiceDetailsPerLine, ' AND cp.termsId in (', pPaymentTermsIds, ' )');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF pPartId IS NOT NULL THEN  \n" +
                "		SET @temp_Sproc_RetrieveCustomerInvoiceDetailsPerLine= CONCAT(@temp_Sproc_RetrieveCustomerInvoiceDetailsPerLine, ' AND cpd.partId in (', pPartId , ')');  \n" +
                "    END IF;  \n" +
                "  \n" +
                "	IF(pFilterStatus IS NOT NULL AND pFilterStatus!='')THEN  \n" +
                "		SET @temp_Sproc_RetrieveCustomerInvoiceDetailsPerLine=CONCAT(@temp_Sproc_RetrieveCustomerInvoiceDetailsPerLine, ' and FIND_IN_SET(cp.subStatus,''', pFilterStatus ,''')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF pDueDate IS NOT NULL THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause,\" and c.paymentDueDate <= DATE_ADD('\",pDueDate,\"', INTERVAL \",IFNULL(pAdditionalDays,0),\" DAY) \");  \n" +
                "	ELSEIF (pTermsAndAboveDays IS NOT NULL OR pTermsAndAboveDays = 0) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause,\" and c.paymentDueDate <= DATE_ADD(current_date(), INTERVAL \",IFNULL(pTermsAndAboveDays,0),\" DAY) \");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF pPoNumber IS NOT NULL AND pPoNumber != '' THEN  \n" +
                "		IF pIsExactSearchPO = 1 THEN  \n" +
                "			SET pWhereClause= CONCAT(pWhereClause, \" AND (c.soNumber = '\", pPoNumber, \"'  \n" +
                "										OR 	c.poNumber = '\", pPoNumber, \"'  \n" +
                "										OR 	c.packingSlipNumber = '\", pPoNumber, \"'  \n" +
                "										OR 	c.invoiceNumber = '\", pPoNumber, \"'  \n" +
                "                                        OR 	c.creditMemoNumber = '\", pPoNumber, \"'  \n" +
                "										OR 	c.refCustInvoiceID = '\", pPoNumber, \"')\"  \n" +
                "						);  \n" +
                "		ELSE  \n" +
                "			SET pWhereClause= CONCAT(pWhereClause, \" AND (c.soNumber like '%\", pPoNumber, \"%'  \n" +
                "										OR 	c.poNumber like '%\", pPoNumber, \"%'  \n" +
                "										OR 	c.packingSlipNumber like '%\", pPoNumber, \"%'  \n" +
                "										OR 	c.invoiceNumber like '%\", pPoNumber, \"%'  \n" +
                "                                        OR 	c.creditMemoNumber like '%\", pPoNumber, \"%'  \n" +
                "										OR 	c.refCustInvoiceID like '%\", pPoNumber, \"%')\"  \n" +
                "						);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "   # select @temp_Sproc_RetrieveCustomerInvoiceDetails, pWhereClause;  \n" +
                "  IF pFromDate IS NOT NULL THEN  \n" +
                "        IF pTransType = 'I' THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause,\" and c.invoiceDate >= '\",pFromDate ,\"'\");  \n" +
                "        ELSE  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause,\" and c.creditMemoDate >= '\",pFromDate ,\"'\");  \n" +
                "        END IF;  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF pToDate IS NOT NULL THEN  \n" +
                "        IF pTransType = 'I' THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause,\" and c.invoiceDate <= '\",pToDate ,\"'\");  \n" +
                "        ELSE  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause,\" and c.creditMemoDate <= '\",pToDate ,\"'\");  \n" +
                "        END IF;  \n" +
                "    END IF;  \n" +
                "  \n" +
                "     IF pPaymentStatusFilter IS NOT NULL THEN  \n" +
                "		SET pWhereClause =CONCAT(pWhereClause , ' and FIND_IN_SET(c.paymentStatusCode,''', pPaymentStatusFilter ,''')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	IF pCreditAppliedStatusFilter IS NOT NULL THEN  \n" +
                "		SET pWhereClause =CONCAT(pWhereClause , ' and FIND_IN_SET(c.paymentStatus,''', pCreditAppliedStatusFilter ,''')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF pCreditMemoRefundStatusFilter IS NOT NULL THEN  \n" +
                "		SET pWhereClause =CONCAT(pWhereClause , ' and FIND_IN_SET(c.refundStatus,''', pCreditMemoRefundStatusFilter ,''')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	-- filter zero amount invoice  \n" +
                "	IF pZeroAmountLineFilter IS NOT NULL AND pZeroAmountLineFilter = 1 THEN  \n" +
                "		SET pWhereClause =CONCAT(pWhereClause , ' and c.totalExtPrice = 0');  \n" +
                "	END IF;  \n" +
                "    IF pZeroAmountFilter IS NOT NULL AND pZeroAmountFilter = 1 THEN  \n" +
                "		SET pWhereClause =CONCAT(pWhereClause , ' and c.totalAmount = 0');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF pWithCommissionLine = 1 THEN  \n" +
                "		SET pWhereClause =CONCAT(pWhereClause , ' and c.commissionCnt > 0');  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF pWithOtherChargesLine = 1 THEN  \n" +
                "		SET pWhereClause =CONCAT(pWhereClause , ' and c.lineOtherChargesCnt > 0');  \n" +
                "    END IF;  \n" +
                "   IF pMarkedForRefund = 1 THEN  \n" +
                "		SET pWhereClause =CONCAT(pWhereClause , ' and c.isMarkForRefund = 1');  \n" +
                "    END IF;  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	 /* to get total count of rows */  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_RetrieveCustomerInvoiceDetailsPerLine,\" ) c where 1=1 and \", pWhereClause);  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"select c.*, case when c.paymentDueDate <= current_date() then 1 else 0 end isPaymentDueDatePassed,  \n" +
                "                    (case when packingSlipStatusID = 5 and (c.subStatus = 4 or c.subStatus = 5) then concat(packingSlipStatus,' - ',c.statusConvertedValue)  \n" +
                "						else '' end) materialStatus from ( \",  \n" +
                "			@temp_Sproc_RetrieveCustomerInvoiceDetailsPerLine,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "  \n" +
                "  \n" +
                "	PREPARE query1 FROM @SQLStatement2;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 04-01-2022   *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1265,'1.00','V1','Sproc_RetrieveCustomerInvoiceDetailsPerLine-User Story 39013: Add CPS Popup && shipment Summary Details Improvement - Shweta '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1265:
            allDbChangesArray.push(
                /* **************************** New Script -> 04-01-2022  *********************************** */
                "DROP PROCEDURE IF EXISTS Sproc_RetrieveCustomerPackingShippingDetail;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveCustomerPackingShippingDetail`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN prefCustPackingSlipID INT  \n" +
                "	)  \n" +
                "BEGIN  \n" +
                "  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;  \n" +
                "    DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
                "  \n" +
                "  SET @tempQuerypackingSlip = CONCAT(\"SELECT cpd.id, cpd.refCustPackingSlipID,cpd.refSalesorderDetid,  \n" +
                "			cpd.partId , cpd.custPOLineID, cpd.assyDescription,  \n" +
                "			cpd.poQty,cpd.shipQty,cpd.remainingQty,cpd.shippedQty,cpd.shippingNotes,cpd.shippingId,  \n" +
                "			cpd.internalComment,  \n" +
                "			cpd.binID, cpd.whID,  \n" +
                "			ss.qty as releaseLineQty,  \n" +
                "			cpd.standrads,  \n" +
                "			ss.releaseNumber,  \n" +
                "			cpd.poReleaseNumber,  \n" +
                "			cpd.refBlanketPONumber,  \n" +
                "			fun_getUserNameByID(cpd.updatedBy) updatedby,  \n" +
                "			fun_getUserNameByID(cpd.createdBy) createdby,  \n" +
                "			fun_getRoleByID(cpd.createByRoleId) createdbyRole,  \n" +
                "			fun_getRoleByID(cpd.updateByRoleId) updatedbyRole,  \n" +
                "			fun_ApplyCommonDateTimeFormatByParaValue(cpd.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAt,  \n" +
                "			fun_ApplyCommonDateTimeFormatByParaValue(cpd.UpdatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt,  \n" +
                "			c.mfgpn,c.pidcode PIDCode,c.nickName,c.mfgpndescription,rr.name as rohsName,rr.rohsIcon, c.partType ,  \n" +
                "			fun_getUnitNameByID(c.uom) unitMeaser ,  \n" +
                "			cpd.reflineID as lineID ,  \n" +
                "			     fun_getMfgCodeAndNameByID(c.mfgcodeid) mfgName,  \n" +
                "			     c.mfgcodeid ,  \n" +
                "			cpd.lineID AS lineIDSequenceNum   ,  \n" +
                "			(SELECT GROUP_CONCAT(DISTINCT woNumber SEPARATOR ', ') FROM shippedassembly  \n" +
                "			   WHERE refCustPackingSlipDetID = cpd.id AND isDeleted = 0 AND shippedqty > 0) shippedFromWONumbers ,  \n" +
                "			(SELECT GROUP_CONCAT(DISTINCT css.uid) FROM shippedassembly sa  \n" +
                "					JOIN component_sid_stock css ON sa.refsidid = css.id AND  css.isDeleted = 0  \n" +
                "			  WHERE sa.refCustPackingSlipDetID = cpd.id AND sa.isDeleted = 0 AND sa.shippedqty > 0) shippedFromUMIDs ,  \n" +
                "             cpd.refLineId soLineId ,  \n" +
                "             cpd.refCustPackingSlipDetID,  \n" +
                "             CASE WHEN c.partType = 4 THEN FALSE ELSE TRUE END materialType,  \n" +
                "             (select mfg.mfgType from mfgcodemst mfg where mfg.id = c.mfgcodeID and mfg.isDeleted = 0) mfgType,  \n" +
                "             cpd.componentStockType,  \n" +
                "             if(cp.packingSlipType = 2, sod.price, cpd.unitPrice)  unitPrice,  \n" +
                "             if(cp.packingSlipType = 2, sod.quoteNumber, cpd.quoteNumber)  quoteNumber,  \n" +
                "             if(cp.packingSlipType = 2, sod.quoteFrom, cpd.quoteFrom) quoteFrom,  \n" +
                "             if(cp.packingSlipType = 2, sod.refAssyQtyTurnTimeID, cpd.refAssyQtyTurnTimeID) refAssyQtyTurnTimeID,  \n" +
                "             c.isCustom,c.isCPN,  \n" +
                "             if(cp.packingSlipType = 2, cpd.shipQty * sod.price,  cpd.extendedPrice) extendedPrice,  \n" +
                "             (select group_concat(cert.fullName)from  certificate_standards cert  \n" +
                "						where cert.certificateStandardID in (select compstd.certificateStandardID  \n" +
                "							from component_standard_details compstd where compstd.componentID = c.id and compstd.isDeleted= 0) )componentStandardList,  \n" +
                "            if(cp.packingSlipType = 2, sod.assyQtyTurnTimeText, cpd.assyQtyTurnTimeText) assyQtyTurnTimeText,  \n" +
                "            if(cp.packingSlipType = 2, sod.refRFQGroupID, cpd.refRFQGroupID)  refRFQGroupID,  \n" +
                "            if(cp.packingSlipType = 2, sod.refRFQQtyTurnTimeID, cpd.refRFQQtyTurnTimeID) refRFQQtyTurnTimeID,  \n" +
                "			(case when if(cp.packingSlipType = 2, sod.quoteFrom, cpd.quoteFrom) = 1 then 'From RFQ' when if(cp.packingSlipType = 2, sod.quoteFrom, cpd.quoteFrom) = 3 then 'N/A' when if(cp.packingSlipType = 2, sod.quoteFrom, cpd.quoteFrom) = 2 then 'From Part Master' else '' end) quoteFromText  ,  \n" +
                "            cpd.releaseNotes  \n" +
                "		FROM `customer_packingslip_det` AS cpd  \n" +
                "			left join component c on c.id=cpd.partid  \n" +
                "			left join rfq_rohsmst rr on rr.id=c.rohsStatusID  \n" +
                "			left join salesshippingmst ss on ss.shippingID=cpd.shippingID and ss.isdeleted=0  \n" +
                "            left join salesorderdet sod on sod.id = cpd.refSalesorderDetid and sod.isDeleted = 0  \n" +
                "            left join customer_packingslip cp on cp.id  = cpd.refCustPackingSlipID and cp.isDeleted = 0  \n" +
                "		WHERE cpd.isDeleted=0 and cpd.refCustPackingSlipID=\",IFNULL(prefCustPackingSlipID,0));  \n" +
                "  \n" +
                "		IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY lineIDSequenceNum ASC\") ;  \n" +
                "		ELSE  \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "  \n" +
                "		IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "			SET pWhereClause = '1=1' ;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "  \n" +
                "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "			SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "		ELSE  \n" +
                "			SET rowNumWhere = '';  \n" +
                "		END IF;  \n" +
                "        /* to get total count of rows */  \n" +
                "			SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@tempQuerypackingSlip,\" ) c where 1=1 and \", pWhereClause);  \n" +
                "  \n" +
                "			PREPARE query2 FROM @SQLStatement2;  \n" +
                "			EXECUTE query2;  \n" +
                "			DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "			SET @SQLStatement2 = CONCAT(\"select * from ( \", @tempQuerypackingSlip,\" ) c  \n" +
                "				where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "			PREPARE query1 FROM @SQLStatement2;  \n" +
                "			EXECUTE query1;  \n" +
                "			DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 04-01-2022   *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1266,'1.00','V1','Sproc_RetrieveCustomerPackingShippingDetail-User Story 39013: Add CPS Popup && shipment Summary Details Improvement - Shweta '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1266:
            allDbChangesArray.push(
                /* **************************** New Script -> 04-01-2022  *********************************** */
                "DROP PROCEDURE IF EXISTS Sproc_RetrieveCustomerPackingSlipDetailPerLine;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveCustomerPackingSlipDetailPerLine`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pfilterStatus VARCHAR(1000),  \n" +
                "	IN pmfgCodelist VARCHAR(16000),  \n" +
                "	IN pmfgPartID  VARCHAR(5000) ,  \n" +
                "	IN ppsSearchType VARCHAR(5),  \n" +
                "	IN padvanceSearchPoSoPsInv VARCHAR(100),  \n" +
                "	IN pstatusIds VARCHAR(50),  \n" +
                "	IN pfromDate DATE,  \n" +
                "	IN ptoDate DATE  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;  \n" +
                "	DECLARE vTimeZone VARCHAR(50);  \n" +
                "	DECLARE vDateTimeDisplayFormat VARCHAR(100);  \n" +
                "	SELECT fun_getDateTimeFormat() INTO vDateTimeDisplayFormat;  \n" +
                "	SELECT fun_getTimeZone() INTO vTimeZone;  \n" +
                "  \n" +
                "	SET @temp_Sproc_RetrieveCustomerPackingSlipDetails = CONCAT(\"  \n" +
                "		SELECT cd.id,  \n" +
                "				cd.packingSlipNumber,  \n" +
                "		       cd.packingslipDate,  \n" +
                "		       cd.poNumber,  \n" +
                "		       cd.soNumber,  \n" +
                "		       cd.soDate,  \n" +
                "		       cd.poDate,  \n" +
                "               cd.poRevision,  \n" +
                "		       ss.releaseNumber,  \n" +
                "		       ss.qty as releaseLineQty,  \n" +
                "		       cd.customerID,  \n" +
                "			fun_getMfgCodeAndNameByID(cd.customerID) customerName,  \n" +
                "			cd.systemID,  \n" +
                "			fun_getFOBById(cd.freeOnBoardId) freeOnBoard,  \n" +
                "			cd.packingslipcomment,  \n" +
                "			cd.refCustInvoiceID,  \n" +
                "			cpd.internalComment,  \n" +
                "			cd.headerComment,  \n" +
                "			fun_getGenericCategoryCodeNameByID(cd.shippingmethodid)  shippingMethod,  \n" +
                "			cd.subStatus,  \n" +
                "			cd.sorevision,  \n" +
                "            cpd.poReleaseNumber,  \n" +
                "			cpd.refBlanketPONumber,  \n" +
                "            cpd.partId,  \n" +
                "            fun_getRoHSNameByPartID(cpd.partId) rohsName,  \n" +
                "            `cpd`.assyDescription,  \n" +
                "            fun_getRoHSIconByPartID(cpd.partId) rohsIcon,  \n" +
                "            c.mfgPN as assyName ,  \n" +
                "            c.PIDCode as assyId,  \n" +
                "            c.mfgCodeID,  \n" +
                "            cd.termsID,  \n" +
                "            cd.shippingmethodid,  \n" +
                "            invoice.invoiceNumber,  \n" +
                "            invoice.id as invoiceID,  \n" +
                "            invoice.subStatus as invoiceSubstatus,  \n" +
                "			fun_getMfgCodeAndNameByID(c.mfgCodeID) mfrName,  \n" +
                "			fun_getMfgCodeByID(cd.customerID) custCode,  \n" +
                "			case when som.isBlanketPO=1 then 'Yes' else 'No' end blanketPOText,  \n" +
                "			som.isBlanketPO,  \n" +
                "			ifnull(invoice.paymentStatus,'') paymentStatus,  \n" +
                "			case when cd.transType = 'P' then fun_getPaymentStatusByCustPackingSlipSubStatus(invoice.subStatus,cd.transType,invoice.paymentStatus,'VAL') end paymentStatusValue,  \n" +
                "			case when cd.transType = 'P' then fun_getPaymentStatusByCustPackingSlipSubStatus(invoice.subStatus,cd.transType,invoice.paymentStatus,'CODE') end paymentStatusCode,  \n" +
                "			fun_getCustomerInvoiceSubStatusName(cd.subStatus,'P') statusConvertedValue,  \n" +
                "            cd.refSalesOrderID,  \n" +
                "			cpd.custPOLineID,cpd.poQty,cpd.shipQty,fun_getUnitAbbrivationByID(c.uom) uom,  \n" +
                "			cpd.shippingNotes,cpd.id AS customerSlipDetID, cd.id AS customerslipId,  \n" +
                "			case when cd.packingSlipType=1 then 'MISC' else 'PO/SO' end as packingTypeText,cd.packingSlipType,  \n" +
                "			fun_getCustomerInvoiceSubStatusName(invoice.subStatus,'I') as packingSlipStatusValue,  \n" +
                "			fun_getAddressbyID(cd.intermediateShipmentId) markFor,fun_getAddressbyID(cd.shipToId) shipTo,fun_getAddressbyID(cd.billToId) billTo,  \n" +
                "			concat('(',emp.initialName,')',' ',ifnull(emp.firstName,''),' ',ifnull(emp.lastName,'')) salesCommissionTo,  \n" +
                "		(CASE WHEN cd.termsID IS NULL THEN '' ELSE fun_getGenericCategoryCodeNameByID(cd.termsID) END) AS termsDisplayText ,  \n" +
                "         CASE WHEN cpd.id IS NULL THEN  fun_getUserNameByID(cd.updatedBy) ELSE fun_getUserNameByID(cpd.updatedBy) END  updatedby,  \n" +
                "         CASE WHEN cpd.id IS NULL THEN  fun_getUserNameByID(cd.createdBy) ELSE fun_getUserNameByID(cpd.createdBy) END  createdby,  \n" +
                "         CASE WHEN cpd.id IS NULL THEN  fun_getRoleByID(cd.createByRoleId) ELSE fun_getRoleByID(cpd.createByRoleId) END  createdbyRole,  \n" +
                "         CASE WHEN cpd.id IS NULL THEN  fun_getRoleByID(cd.updateByRoleId) ELSE fun_getRoleByID(cpd.updateByRoleId) END  updatedbyRole,  \n" +
                "         CASE WHEN cpd.id IS NULL THEN fun_ApplyCommonDateTimeFormatByParaValue(cd.createdAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') ELSE fun_ApplyCommonDateTimeFormatByParaValue(cpd.createdAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') END  createdAt,  \n" +
                "         CASE WHEN cpd.id IS NULL THEN fun_ApplyCommonDateTimeFormatByParaValue(cd.UpdatedAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') ELSE fun_ApplyCommonDateTimeFormatByParaValue(cpd.UpdatedAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') END  updatedAt,  \n" +
                "		 cd.isLocked,  \n" +
                "         fun_getIntToText(cd.isLocked) isLockedConvertedValue,  \n" +
                "         fun_getUserNameByID(cd.lockedBy) lockedBy,  \n" +
                "         fun_getRoleByID(cd.lockedByRole) lockedByRole,  \n" +
                "         fun_ApplyCommonDateTimeFormatByParaValue(cd.lockedAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') lockedAt ,  \n" +
                "		if(cd.packingSlipType = 2, sod.price, cpd.unitPrice)  unitPrice,  \n" +
                "        if(cd.packingSlipType = 2, cpd.shipQty * sod.price,  cpd.extendedPrice) extendedPrice,  \n" +
                "        if(cd.packingSlipType = 2, sod.quoteNumber, cpd.quoteNumber)  quoteNumber,  \n" +
                "		if(cd.packingSlipType = 2, sod.quoteFrom, cpd.quoteFrom) quoteFrom,  \n" +
                "        if(cd.packingSlipType = 2, sod.refAssyQtyTurnTimeID, cpd.refAssyQtyTurnTimeID) refAssyQtyTurnTimeID,  \n" +
                "        if(cd.packingSlipType = 2, sod.assyQtyTurnTimeText, cpd.assyQtyTurnTimeText) assyQtyTurnTimeText,  \n" +
                "        if(cd.packingSlipType = 2, sod.refRFQGroupID, cpd.refRFQGroupID)  refRFQGroupID,  \n" +
                "		if(cd.packingSlipType = 2, sod.refRFQQtyTurnTimeID, cpd.refRFQQtyTurnTimeID) refRFQQtyTurnTimeID,  \n" +
                "		(case when if(cd.packingSlipType = 2, sod.quoteFrom, cpd.quoteFrom) = 1 then 'From RFQ' when if(cd.packingSlipType = 2, sod.quoteFrom, cpd.quoteFrom) = 3 then 'N/A' when if(cd.packingSlipType = 2, sod.quoteFrom, cpd.quoteFrom) = 2 then 'From Part Master' else '' end) quoteFromText,  \n" +
                "        (case when cd.subStatus = 5 and (invoice.subStatus = 4 or invoice.subStatus = 5) then concat(fun_getCustomerInvoiceSubStatusName(cd.subStatus,'P'),' - ',fun_getCustomerInvoiceSubStatusName(invoice.subStatus,'I'))  \n" +
                "						else '' end) materialStatus,  \n" +
                "        cd.revision,  \n" +
                "		(select group_concat(cert.fullName)from  certificate_standards cert  \n" +
                "			where cert.certificateStandardID in (select compstd.certificateStandardID  \n" +
                "			from component_standard_details compstd where compstd.componentID = c.id and compstd.isDeleted= 0) )componentStandardList,  \n" +
                "		c.isCustom,   c.custAssyPN customPartNumber  ,        cpd.remainingQty ,  \n" +
                "			som.rmaNumber,som.isRmaPO,  \n" +
                "			(CASE when som.isRmaPO = 1 then 'YES' when som.isRmaPO = 0 then 'NO' else 'NA' end) isRmaPOText,  \n" +
                "			(CASE when som.isRmaPO = 1 then 'Yes' when som.isRmaPO = 0 then 'No' else 'N/A' end) isRmaPOTextDisp  ,  \n" +
                "            cpd.releaseNotes  \n" +
                "		FROM customer_packingslip cd  \n" +
                "		JOIN customer_packingslip_det AS `cpd`  ON cd.id=cpd.refCustPackingSlipID AND cpd.isdeleted=0  \n" +
                "		LEFT JOIN component c ON c.id=cpd.partid  \n" +
                "		LEFT JOIN salesshippingmst ss ON ss.shippingID=cpd.shippingId  \n" +
                "		LEFT JOIN employees emp on emp.id=cd.salesCommissionTo and emp.isdeleted=0  \n" +
                "		LEFT JOIN customer_packingslip invoice on invoice.id=cd.refCustInvoiceID and invoice.isDeleted = 0 and invoice.transType ='I'  \n" +
                "        LEFT JOIN salesorderdet sod on sod.id = cpd.refSalesorderDetid and sod.isDeleted = 0  \n" +
                "        LEFT JOIN salesordermst som on som.id = cd.refSalesOrderID and som.isDeleted = 0  \n" +
                "		WHERE  cd.isDeleted=0 and cd.transType='P'  \n" +
                "	\");  \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "        SET pOrderBy = \"ORDER BY systemID DESC\";  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = '1=1' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  IF(pfilterStatus IS NOT NULL AND pfilterStatus!='')THEN  \n" +
                "    if (pfilterStatus = '0') then  \n" +
                "		SET pWhereClause=CONCAT(pWhereClause, ' and c.invoiceSubStatus is null');  \n" +
                "    else  \n" +
                "		SET pWhereClause=CONCAT(pWhereClause, ' and c.invoiceSubStatus in (', pfilterStatus ,')');  \n" +
                "    end if;  \n" +
                "  END IF;  \n" +
                "  IF(pstatusIds IS NOT NULL AND pstatusIds!='')THEN  \n" +
                "	SET @temp_Sproc_RetrieveCustomerPackingSlipDetails=CONCAT(@temp_Sproc_RetrieveCustomerPackingSlipDetails, ' and cd.subStatus in (',pstatusIds,')');  \n" +
                "  END IF;  \n" +
                "  IF(pmfgCodelist IS NOT NULL AND pmfgCodelist!='')THEN  \n" +
                "	SET @temp_Sproc_RetrieveCustomerPackingSlipDetails=CONCAT(@temp_Sproc_RetrieveCustomerPackingSlipDetails, ' and cd.customerID in (',pmfgCodelist,')');  \n" +
                "  END IF;  \n" +
                "  IF(pmfgPartID IS NOT NULL)THEN  \n" +
                "	SET @temp_Sproc_RetrieveCustomerPackingSlipDetails=CONCAT(@temp_Sproc_RetrieveCustomerPackingSlipDetails, ' and cpd.partId in ( ',pmfgPartID,')');  \n" +
                "  END IF;  \n" +
                "  IF(padvanceSearchPoSoPsInv IS NOT NULL AND padvanceSearchPoSoPsInv!='')THEN  \n" +
                "    IF(ppsSearchType='E')THEN  \n" +
                "      SET @temp_Sproc_RetrieveCustomerPackingSlipDetails=CONCAT(@temp_Sproc_RetrieveCustomerPackingSlipDetails, ' and (cd.poNumber=''',padvanceSearchPoSoPsInv,''' or cd.soNumber=''',padvanceSearchPoSoPsInv,''' or cd.packingSlipNumber=''',  \n" +
                "      padvanceSearchPoSoPsInv,''' or invoice.invoiceNumber=''',padvanceSearchPoSoPsInv,''' or som.rmaNumber=''',padvanceSearchPoSoPsInv,''')');  \n" +
                "   ELSE  \n" +
                "       SET @temp_Sproc_RetrieveCustomerPackingSlipDetails=CONCAT(@temp_Sproc_RetrieveCustomerPackingSlipDetails, ' and (cd.poNumber like''%',padvanceSearchPoSoPsInv,'%'' or cd.soNumber like ''%',  \n" +
                "       padvanceSearchPoSoPsInv,'%'' or cd.packingSlipNumber like ''%',padvanceSearchPoSoPsInv,'%'' or invoice.invoiceNumber like ''%',padvanceSearchPoSoPsInv,'%'' or som.rmaNumber like ''%',padvanceSearchPoSoPsInv,'%'')');  \n" +
                "  END IF;  \n" +
                "  END IF;  \n" +
                "  \n" +
                "  IF(pfromDate IS NOT NULL AND ptoDate IS NOT NULL)THEN  \n" +
                "	 SET @temp_Sproc_RetrieveCustomerPackingSlipDetails=CONCAT(@temp_Sproc_RetrieveCustomerPackingSlipDetails, ' and (cd.packingslipdate>=''',pfromDate,''' and cd.packingslipdate<=''',ptoDate,''')');  \n" +
                "  ELSEIF(pfromDate IS NOT NULL)THEN  \n" +
                "       SET @temp_Sproc_RetrieveCustomerPackingSlipDetails=CONCAT(@temp_Sproc_RetrieveCustomerPackingSlipDetails, ' and (cd.packingslipdate>=''',pfromDate,''')');  \n" +
                "  ELSEIF(ptoDate IS NOT NULL)THEN  \n" +
                "       SET @temp_Sproc_RetrieveCustomerPackingSlipDetails=CONCAT(@temp_Sproc_RetrieveCustomerPackingSlipDetails, ' and (cd.packingslipdate<=''',ptoDate,''')');  \n" +
                "  END IF;  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                " -- select   @temp_Sproc_RetrieveCustomerPackingSlipDetails ,pWhereClause ;  \n" +
                "  \n" +
                "	 /* to get total count of rows */  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_RetrieveCustomerPackingSlipDetails,\" ) c where 1=1 and \", pWhereClause);  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"select * from ( \", @temp_Sproc_RetrieveCustomerPackingSlipDetails,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "	PREPARE query1 FROM @SQLStatement2;  \n" +
                "	-- select @SQLStatement2;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 04-01-2022   *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1267,'1.00','V1','Sproc_RetrieveCustomerPackingSlipDetailPerLine- User Story 39013: Add CPS Popup && shipment Summary Details Improvement - Shweta '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1267:
            allDbChangesArray.push(
                /* **************************** New Script -> 04-01-2022  *********************************** */
                "DROP PROCEDURE IF EXISTS Sproc_SaveCustomerInvoiceDetail;  \n" +
                "CREATE PROCEDURE `Sproc_SaveCustomerInvoiceDetail`(  \n" +
                "	IN pTransType VARCHAR(5),  \n" +
                "	IN pInvoiceType VARCHAR(1),  \n" +
                "	IN pInvoiceID INT,  \n" +
                "	IN pInvData JSON,  \n" +
                "	IN pPackingSlipID INT,  \n" +
                "	IN puserID INT,  \n" +
                "	IN puserRoleID INT ,  \n" +
                "	IN pCustomerInvoiceSystemIDTypeConst VARCHAR(50),  \n" +
                "	IN pSystemId VARCHAR(20)  ,  \n" +
                "	IN pPackingSlipType INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE v_maxCurrSystemIDForInv VARCHAR(20) ;  \n" +
                "	DECLARE v_prefix VARCHAR(20);  \n" +
                "	DECLARE vTermsDays INT ;  \n" +
                "	DECLARE v_incrementI INT;  \n" +
                "	DECLARE v_commissionPercentage DECIMAL(10,2);  \n" +
                "	DECLARE vTotRefundIssuedOfCreditMemo DECIMAL(18,8);  \n" +
                "	DECLARE vIsAgreedRefundLessThanTotIssued TINYINT;  \n" +
                "  \n" +
                "  \n" +
                "	SET vIsAgreedRefundLessThanTotIssued = 0;  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_customerInvoice;  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_customerInvoice AS  \n" +
                "	SELECT 	*  \n" +
                "	FROM 	JSON_TABLE(  \n" +
                "			pInvData,  \n" +
                "			\"$[*]\" COLUMNS(  \n" +
                "				`transType` VARCHAR(5) PATH \"$.transType\",  \n" +
                "				`invoiceID` INT PATH \"$.invoiceID\",  \n" +
                "				`packingSlipID` INT PATH \"$.packingSlipID\",  \n" +
                "				`packingSlipType` INT PATH \"$.packingSlipType\",  \n" +
                "				`customerID` INT PATH \"$.customerID\" ,  \n" +
                "				`status` INT PATH \"$.status\",  \n" +
                "				`subStatus` INT PATH \"$.subStatus\",  \n" +
                "				`refSalesOrderID` INT PATH \"$.refSalesOrderID\",  \n" +
                "				`poNumber` VARCHAR(50) PATH \"$.poNumber\",  \n" +
                "				`poDate` DATE PATH \"$.poDate\",  \n" +
                "				`soNumber` VARCHAR(50) PATH \"$.soNumber\",  \n" +
                "				`soDate` DATE PATH \"$.soDate\",  \n" +
                "				`sorevision` VARCHAR(50) PATH \"$.sorevision\" ,  \n" +
                "				`packingSlipNumber` VARCHAR(50) PATH \"$.packingSlipNumber\" ,  \n" +
                "				`packingSlipDate` DATE PATH \"$.packingSlipDate\" ,  \n" +
                "				`invoiceNumber` VARCHAR(50) PATH \"$.invoiceNumber\" ,  \n" +
                "				`invoiceDate` DATE PATH \"$.invoiceDate\" ,  \n" +
                "				`shippingMethodID` INT PATH \"$.shippingMethodID\",  \n" +
                "				`headerComment` TEXT PATH \"$.headerComment\" ,  \n" +
                "				`packingSlipComment` TEXT PATH \"$.packingSlipComment\" ,  \n" +
                "				`billingAddress` TEXT PATH \"$.billingAddress\" ,  \n" +
                "				`shippingAddress` TEXT PATH \"$.shippingAddress\" ,  \n" +
                "				`intermediateAddress` TEXT PATH \"$.intermediateAddress\" ,  \n" +
                "				`billToId` INT PATH \"$.billToId\" ,  \n" +
                "				`shipToId` INT PATH \"$.shipToId\" ,  \n" +
                "				`intermediateShipmentId` INT PATH \"$.intermediateShipmentId\" ,  \n" +
                "				`totalAmount` DECIMAL(18,6) PATH \"$.totalAmount\" ,  \n" +
                "				`freeOnBoardId` INT PATH \"$.freeOnBoardId\" ,  \n" +
                "				`termsId` INT PATH \"$.termsId\" ,  \n" +
                "				`salesCommissionTo` INT PATH \"$.salesCommissionTo\" ,  \n" +
                "				`creditMemoNumber` VARCHAR(50) PATH \"$.creditMemoNumber\" ,  \n" +
                "				`creditMemoDate` DATE PATH \"$.creditMemoDate\" ,  \n" +
                "				`refDebitMemoNumber` VARCHAR(50) PATH \"$.refDebitMemoNumber\" ,  \n" +
                "				`refDebitMemoDate` DATE PATH \"$.refDebitMemoDate\",  \n" +
                "				`rmaNumber`  VARCHAR(50) PATH \"$.rmaNumber\" ,  \n" +
                "				`contactPersonId` INT PATH \"$.contactPersonId\",  \n" +
                "				`revision` VARCHAR(10) PATH \"$.revision\",  \n" +
                "				`isZeroValue` TINYINT PATH \"$.isZeroValue\",  \n" +
                "				`isAlreadyPublished` TINYINT PATH \"$.isAlreadyPublished\",  \n" +
                "				`poRevision` VARCHAR(50) PATH \"$.poRevision\" ,  \n" +
                "				`isMarkForRefund` TINYINT PATH \"$.isMarkForRefund\",  \n" +
                "				`agreedRefundAmt` DECIMAL(18,8) PATH \"$.agreedRefundAmt\",  \n" +
                "				`isAskForVersionConfirmation` TINYINT PATH \"$.isAskForVersionConfirmation\",  \n" +
                "				`refundStatus` VARCHAR(5) PATH \"$.refundStatus\"  \n" +
                "			)  \n" +
                "		) AS CustInv_JT;  \n" +
                "  \n" +
                "  \n" +
                "	SELECT  termsDays INTO 	vTermsDays  \n" +
                "	FROM genericCategory gc  \n" +
                "	WHERE gc.gencCategoryID IN (SELECT temp.termsId FROM temp_customerInvoice temp)  \n" +
                "	AND categoryType = 'Payment Terms';  \n" +
                "  \n" +
                "	IF (pInvoiceID IS NULL)THEN  \n" +
                "			/* get max identity value of 'CustomerInvoiceSystemID' for systemID */  \n" +
                "			/* SELECT `maxValue`,prefix INTO v_maxCurrSystemIDForInv,v_prefix  \n" +
                "			FROM `identity`  \n" +
                "			WHERE `type` = pCustomerInvoiceSystemIDTypeConst ; */  \n" +
                "  \n" +
                "			INSERT INTO customer_packingslip(customerID,packingSlipType,transType,`status`,refSalesOrderID,  \n" +
                "				poNumber,poDate,soNumber,soDate,packingSlipNumber,  \n" +
                "				packingSlipDate,invoiceNumber,invoiceDate,shippingMethodID,  \n" +
                "				packingSlipComment,headerComment,sorevision,  \n" +
                "				freeOnBoardId,createdBy,updatedBy,createByRoleId, createdAt,updatedAt,  \n" +
                "				updateByRoleId,packingSlipStatus,systemID, termsID,salesCommissionTo,  \n" +
                "				billingAddress,shippingAddress,intermediateAddress ,subStatus, paymentStatus ,  \n" +
                "				totalAmount,termsDays, freeOnBoardName, creditMemoNumber,creditMemoDate ,  \n" +
                "				refDebitMemoNumber,refDebitMemoDate, rmaNumber , billToId,shipToId ,intermediateShipmentId,  \n" +
                "				contactPersonId, revision, isZeroValue ,isAlreadyPublished, poRevision,isAskForVersionConfirmation,  \n" +
                "				refundStatus)  \n" +
                "			SELECT customerID,packingSlipType,transType,`status`,refSalesOrderID,  \n" +
                "					poNumber,poDate,soNumber,soDate,packingSlipNumber,  \n" +
                "					packingSlipDate,invoiceNumber,invoiceDate,shippingMethodID,  \n" +
                "					packingSlipComment,headerComment,sorevision,  \n" +
                "					freeOnBoardId,puserID,puserID,puserRoleID,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime() ,  \n" +
                "					puserRoleID,'W' , pSystemId, termsID ,salesCommissionTo,  \n" +
                "					billingAddress, shippingAddress, intermediateAddress,subStatus , 'PE' ,  \n" +
                "					IFNULL(totalAmount,0),vTermsDays ,   fun_getFOBById(freeOnBoardId) ,creditMemoNumber,creditMemoDate ,  \n" +
                "					refDebitMemoNumber,refDebitMemoDate , rmaNumber  , billToId,shipToId ,intermediateShipmentId ,  \n" +
                "					contactPersonId,  LPAD(IFNULL(revision,0),2,'0'), IFNULL(isZeroValue,0), isAlreadyPublished, poRevision ,0,  \n" +
                "					refundStatus  \n" +
                "			FROM temp_customerInvoice ;  \n" +
                "  \n" +
                "		 SET pInvoiceID=LAST_INSERT_ID();  \n" +
                "  \n" +
                "		 UPDATE customer_packingslip  \n" +
                "		 SET refCustInvoiceID=LAST_INSERT_ID(),packingSlipStatus='A'  \n" +
                "		 WHERE id= pPackingSlipID;  \n" +
                "  \n" +
                "	 IF pPackingSlipID IS NOT NULL THEN  \n" +
                "			-- FOR PO/SO flow quote related data not store in packing slip. retrieve it from sales order  \n" +
                "			 INSERT INTO customer_packingslip_det(refCustPackingSlipID,refSalesorderDetid,partId,custPOLineID,  \n" +
                "					poQty,shipQty,remainingQty,shippedQty,unitPrice,  extendedPrice,  \n" +
                "					shippingNotes,whID,binID,createdBy,updatedBy,createdAt, updatedAt,  \n" +
                "					createByRoleId,updateByRoleId,shippingId,reflineID,otherCharges,  \n" +
                "					assyDescription,lineID, internalComment, quoteNumber,quoteFrom,refAssyQtyTurnTimeID,assyQtyTurnTimeText,  \n" +
                "		    refRFQGroupID,refRFQQtyTurnTimeID, isZeroValue,releaseNotes)  \n" +
                "			  SELECT LAST_INSERT_ID(),cpd.refSalesorderDetid,cpd.partId,cpd.custPOLineID,  \n" +
                "					cpd.poQty,cpd.shipQty,cpd.remainingQty,cpd.shippedQty,  \n" +
                "		    IF(cp.packingSlipType = 2, sod.price,cpd.unitPrice),  \n" +
                "		    (cpd.shipQty * (IF(cp.packingSlipType = 2, sod.price,cpd.unitPrice))),  \n" +
                "					cpd.shippingNotes,cpd.whID,cpd.binID,  \n" +
                "		    puserID,puserID,  fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),  \n" +
                "					puserRoleID,puserRoleID,  \n" +
                "		    cpd.shippingId,cpd.reflineID,cpd.otherCharges,  \n" +
                "					cpd.assyDescription, cpd.lineID, cpd.internalComment ,  \n" +
                "		    IF(cp.packingSlipType = 2 ,sod.quoteNumber,cpd.quoteNumber),  \n" +
                "		    IF(cp.packingSlipType = 2 ,sod.quoteFrom,cpd.quoteFrom),  \n" +
                "		    IF(cp.packingSlipType = 2 ,sod.refAssyQtyTurnTimeID,cpd.refAssyQtyTurnTimeID),  \n" +
                "		    IF(cp.packingSlipType = 2 ,sod.assyQtyTurnTimeText, cpd.assyQtyTurnTimeText),  \n" +
                "		    IF(cp.packingSlipType = 2 ,sod.refRFQGroupID,cpd.refRFQGroupID),  \n" +
                "		    IF(cp.packingSlipType = 2 ,sod.refRFQQtyTurnTimeID, cpd.refRFQQtyTurnTimeID) ,  \n" +
                "		    cpd.isZeroValue, cpd.releaseNotes  \n" +
                "			FROM customer_packingslip_det   cpd  \n" +
                "	    LEFT JOIN customer_packingslip cp ON cp.id = cpd.refCustPackingSlipID AND cp.isDeleted = 0  \n" +
                "	    LEFT JOIN salesorderdet sod ON sod.id = cpd.refSalesorderDetid AND sod.isDeleted = 0  \n" +
                "			WHERE cpd.refCustPackingSlipID= pPackingSlipID  \n" +
                "			AND cpd.isDeleted = 0;  \n" +
                "  \n" +
                "	    IF pPackingSlipType = 2 THEN -- PO/SO INV  \n" +
                "	    INSERT INTO customer_packingslip_commission_attribute_mstdet(refCustPackingSlipDetID,	unitPrice,  \n" +
                "							commissionPercentage, commissionValue, quoted_commissionPercentage,  \n" +
                "							quoted_commissionValue, poQty, partId, refComponentSalesPriceBreakID,  \n" +
                "							quoted_unitPrice, quotedQty,commissionCalculateFrom,`type`, isDeleted,createdBy,createdAt,createByRoleId,salesCommissionNotes)  \n" +
                "				SELECT cpd.id refCustPackingSlipDetID,	sca.unitPrice,  \n" +
                "							sca.commissionPercentage, sca.commissionValue, sca.quoted_commissionPercentage,  \n" +
                "							sca.quoted_commissionValue, cpd.shipQty, sca.partId, sca.refComponentSalesPriceBreakID,  \n" +
                "							sca.quoted_unitPrice,sca.quotedQty,sca.commissionCalculateFrom,sca.type, sca.isDeleted,puserID, fun_DatetimetoUTCDateTime() ,puserRoleID,salesCommissionNotes  \n" +
                "					FROM salesorderdet_commission_attribute_mstdet sca  \n" +
                "					JOIN customer_packingslip_det cpd ON cpd.refSalesorderDetid=sca.refSalesorderDetid AND cpd.isDeleted = 0  \n" +
                "					AND cpd.refCustPackingSlipID =  pInvoiceID;  \n" +
                "					-- child records  \n" +
                "				INSERT INTO customer_packingslip_commission_attribute(refCustPackingSlipDetID,refcustInvoiceCommissionID,unitPrice, refQuoteAttributeId,  \n" +
                "							commissionPercentage, commissionValue, org_commissionPercentage,  \n" +
                "							org_commissionValue, category, partId, refComponentSalesPriceBreakID,  \n" +
                "							org_unitPrice, isDeleted,createdBy,createdAt,createByRoleId)  \n" +
                "				SELECT cpd.id refCustPackingSlipDetID,(SELECT id FROM customer_packingslip_commission_attribute_mstdet WHERE refCustPackingSlipDetID=cpd.id AND `type`=2 AND isdeleted=0 LIMIT 1),sca.unitPrice, sca.refQuoteAttributeId,  \n" +
                "							sca.commissionPercentage, sca.commissionValue, sca.org_commissionPercentage,  \n" +
                "							sca.org_commissionValue, sca.category, sca.partId, sca.refComponentSalesPriceBreakID,  \n" +
                "							sca.org_unitPrice, sca.isDeleted,puserID, fun_DatetimetoUTCDateTime() ,puserRoleID  \n" +
                "					FROM salesorderdet_commission_attribute sca  \n" +
                "					JOIN customer_packingslip_det cpd ON cpd.refSalesorderDetid=sca.refSalesorderDetid AND cpd.isDeleted = 0  \n" +
                "					AND cpd.refCustPackingSlipID =  pInvoiceID;  \n" +
                "  \n" +
                "	     ELSEIF pPackingSlipType = 1 THEN -- MISC packing slip INV  \n" +
                "					-- SP to generate line wise sales commission.  \n" +
                "		    CALL Sproc_GetSalesCommissionDetailsForMultiplePart(pInvoiceID);  \n" +
                "		-- Sales Price details for Part master  \n" +
                "		    INSERT INTO customer_packingslip_commission_attribute_mstdet(refCustPackingSlipDetID,	unitPrice,  \n" +
                "							commissionPercentage, commissionValue, quoted_commissionPercentage,`type`,commissionCalculateFrom,quotedQty,poQty,  \n" +
                "							quoted_commissionValue, salesCommissionNotes, partId, refComponentSalesPriceBreakID,  \n" +
                "							quoted_unitPrice, isDeleted,createdBy,createdAt,createByRoleId)  \n" +
                "					SELECT sca.refCustPackingSlipDetID,	sca.unitPrice,  \n" +
                "							sca.commissionPercentage, sca.commissionValue, sca.org_commissionPercentage,sca.type,sca.commissionCalculateFrom,sca.quotedQty,sca.poQty,  \n" +
                "							sca.org_commissionValue, sca.category, sca.partId, sca.refComponentSalesPriceBreakID,  \n" +
                "							sca.unitPrice,0,puserID, fun_DatetimetoUTCDateTime() ,puserRoleID  \n" +
                "					FROM temp_salesCommission sca  \n" +
                "					JOIN customer_packingslip_det cpd ON cpd.id = sca.refCustPackingSlipDetID AND cpd.isDeleted = 0  \n" +
                "					AND cpd.refCustPackingSlipID =  pInvoiceID AND sca.type=1;  \n" +
                "  \n" +
                "  \n" +
                "					-- save sales commission details for RFQ  \n" +
                "					DROP TEMPORARY TABLE IF EXISTS temp_salescommission_mst;  \n" +
                "			     CREATE TEMPORARY TABLE IF NOT EXISTS temp_salescommission_mst AS  \n" +
                "			       SELECT   sca.refCustPackingSlipDetID FROM temp_salesCommission sca  \n" +
                "			       JOIN customer_packingslip_det cpd ON cpd.id = sca.refCustPackingSlipDetID AND cpd.isDeleted = 0  \n" +
                "					AND cpd.refCustPackingSlipID =  pInvoiceID AND sca.type=2 GROUP BY sca.refCustPackingSlipDetID;  \n" +
                "  \n" +
                "			SELECT COUNT(1) INTO @mstCommissionCount FROM  temp_salescommission_mst;  \n" +
                "			SET v_incrementI=0;  \n" +
                "			temp_commission_Det: WHILE v_incrementI < @mstCommissionCount DO  \n" +
                "				SELECT refCustPackingSlipDetID INTO @refCustPackingSlipDetID FROM temp_salescommission_mst LIMIT v_incrementI,1;  \n" +
                "  \n" +
                "				SELECT unitPrice INTO @totalUnitPrice FROM customer_packingslip_det WHERE id=@refCustPackingSlipDetID;  \n" +
                "  \n" +
                "				SELECT SUM(commissionValue) INTO @totalCommissionValue FROM  \n" +
                "				temp_salesCommission WHERE refCustPackingSlipDetID=@refCustPackingSlipDetID;  \n" +
                "  \n" +
                "				IF(@totalCommissionValue>(@totalUnitPrice/2))THEN  \n" +
                "					SET @totalCommissionValue=(@totalUnitPrice/2);  \n" +
                "				END IF;  \n" +
                "  \n" +
                "				SET v_commissionPercentage=((@totalUnitPrice - (@totalUnitPrice - @totalCommissionValue)) *100/ (@totalUnitPrice - @totalCommissionValue));  \n" +
                "  \n" +
                "				INSERT INTO customer_packingslip_commission_attribute_mstdet(refCustPackingSlipDetID,	unitPrice,  \n" +
                "							commissionPercentage, commissionValue, quoted_commissionPercentage,`type`,commissionCalculateFrom,quotedQty,poQty,  \n" +
                "							quoted_commissionValue, salesCommissionNotes, partId, refComponentSalesPriceBreakID,  \n" +
                "							quoted_unitPrice, isDeleted,createdBy,createdAt,createByRoleId,rfqAssyID)  \n" +
                "					SELECT sca.refCustPackingSlipDetID,	@totalUnitPrice,  \n" +
                "							v_commissionPercentage, @totalCommissionValue, v_commissionPercentage,sca.type,sca.commissionCalculateFrom,sca.quotedQty,sca.poQty,  \n" +
                "							@totalCommissionValue, 'All', sca.partId, sca.refComponentSalesPriceBreakID,  \n" +
                "							@totalUnitPrice,0,puserID, fun_DatetimetoUTCDateTime() ,puserRoleID,sca.rfqAssyID  \n" +
                "					FROM temp_salesCommission sca WHERE sca.type=2 AND sca.refCustPackingSlipDetID=@refCustPackingSlipDetID LIMIT 1;  \n" +
                "					-- sales commission child details  \n" +
                "					SELECT LAST_INSERT_ID() INTO @lstID;  \n" +
                "					INSERT INTO customer_packingslip_commission_attribute(refCustPackingSlipDetID,refcustInvoiceCommissionID,unitPrice, refQuoteAttributeId,  \n" +
                "							commissionPercentage, commissionValue, org_commissionPercentage,  \n" +
                "							org_commissionValue, category, partId, refComponentSalesPriceBreakID,  \n" +
                "							org_unitPrice, isDeleted,createdBy,createdAt,createByRoleId)  \n" +
                "					SELECT sca.refCustPackingSlipDetID,@lstID,sca.unitPrice, sca.refQuoteAttributeId,  \n" +
                "							sca.commissionPercentage, sca.commissionValue, sca.org_commissionPercentage,  \n" +
                "							sca.org_commissionValue, sca.category, sca.partId, sca.refComponentSalesPriceBreakID,  \n" +
                "							sca.unitPrice,0,puserID, fun_DatetimetoUTCDateTime() ,puserRoleID  \n" +
                "					FROM temp_salesCommission sca WHERE sca.type=2 AND sca.refCustPackingSlipDetID=@refCustPackingSlipDetID;  \n" +
                "  \n" +
                "					SET v_incrementI=v_incrementI+1;  \n" +
                "  \n" +
                "			END WHILE temp_commission_Det;  \n" +
                "	     END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	ELSE  \n" +
                "  \n" +
                "  \n" +
                "		IF pInvoiceType = 'I' AND pTransType = 'I' THEN  \n" +
                "			UPDATE customer_packingslip cp  \n" +
                "				JOIN temp_customerInvoice tci ON tci.invoiceID = cp.id  \n" +
                "			SET cp.invoiceDate= tci.invoiceDate,  \n" +
                "				cp.`status`= tci.status,  \n" +
                "				cp.subStatus = tci.subStatus,  \n" +
                "				cp.headerComment= tci.headerComment,  \n" +
                "				cp.packingSlipComment= tci.packingSlipComment,  \n" +
                "				cp.totalAmount = IFNULL(tci.totalAmount,0) ,  \n" +
                "				cp.updatedAt = fun_DatetimetoUTCDateTime(),  \n" +
                "				cp.updatedBy = puserID,  \n" +
                "				cp.updateByRoleId = puserRoleID  ,  \n" +
                "				cp.billingAddress= tci.billingAddress,  \n" +
                "				cp.shippingAddress= tci.shippingAddress,  \n" +
                "				cp.intermediateAddress= tci.intermediateAddress,  \n" +
                "				cp.contactPersonId = tci.contactPersonId,  \n" +
                "				cp.billToId = tci.billToId,  \n" +
                "				cp.shipToId  = tci.shipToId,  \n" +
                "				cp.intermediateShipmentId = tci.intermediateShipmentId,  \n" +
                "				cp.revision = LPAD(tci.revision,2,'0'),  \n" +
                "				cp.isZeroValue = IFNULL(tci.isZeroValue,0)  ,  \n" +
                "				cp.isAlreadyPublished = IFNULL(tci.isAlreadyPublished,0),  \n" +
                "				cp.poRevision = tci.poRevision ,  \n" +
                "				cp.isAskForVersionConfirmation = tci.isAskForVersionConfirmation  \n" +
                "			WHERE cp.id=pInvoiceID  \n" +
                "			AND cp.transType = pTransType;  \n" +
                "  \n" +
                "		ELSE  \n" +
                "  \n" +
                "			IF (pTransType = 'C') THEN  \n" +
                "				/* get total refunded amount till now  */  \n" +
                "				SELECT IFNULL(SUM(paymentAmount),0) INTO vTotRefundIssuedOfCreditMemo  \n" +
                "				FROM packingslip_invoice_payment_det  \n" +
                "				WHERE refRefundCustCreditMemoID = pInvoiceID  \n" +
                "				AND isDeleted = 0 AND isPaymentVoided = 0  \n" +
                "				;  \n" +
                "  \n" +
                "				/* check agreed refund amount is less than total refunded amount , if yes then give error  */  \n" +
                "				IF (IFNULL((SELECT agreedRefundAmt FROM temp_customerInvoice),0) < vTotRefundIssuedOfCreditMemo) THEN  \n" +
                "					SET vIsAgreedRefundLessThanTotIssued = 1;  \n" +
                "				END IF;  \n" +
                "			END IF;  \n" +
                "  \n" +
                "			IF (vIsAgreedRefundLessThanTotIssued = 0) THEN  \n" +
                "				# in case of tariff invoice & credit memo update all other field  \n" +
                "				UPDATE customer_packingslip  cp  \n" +
                "					JOIN temp_customerInvoice tci ON tci.invoiceID = cp.id  \n" +
                "				SET	cp.status= tci.status,  \n" +
                "					cp.subStatus= tci.subStatus,  \n" +
                "					cp.poNumber= tci.poNumber,  \n" +
                "					cp.poDate= tci.poDate,  \n" +
                "					cp.soNumber= tci.soNumber,  \n" +
                "					cp.soDate= tci.soDate,  \n" +
                "					cp.packingSlipNumber= tci.packingSlipNumber,  \n" +
                "					cp.packingSlipDate= tci.packingSlipDate,  \n" +
                "					cp.invoiceDate= tci.invoiceDate,  \n" +
                "					cp.shippingMethodID= tci.shippingMethodID,  \n" +
                "					cp.headerComment= tci.headerComment,  \n" +
                "					cp.packingSlipComment= tci.packingSlipComment,  \n" +
                "					cp.billingAddress= tci.billingAddress,  \n" +
                "					cp.shippingAddress= tci.shippingAddress,  \n" +
                "					cp.intermediateAddress= tci.intermediateAddress,  \n" +
                "					cp.totalAmount= IFNULL(tci.totalAmount,0),  \n" +
                "					cp.freeOnBoardId= tci.freeOnBoardId,  \n" +
                "					cp.termsId= tci.termsId,  \n" +
                "					cp.termsDays = vTermsDays,  \n" +
                "					cp.salesCommissionTo= tci.salesCommissionTo ,  \n" +
                "					cp.refDebitMemoNumber = tci.refDebitMemoNumber,  \n" +
                "					cp.refDebitMemoDate = tci.refDebitMemoDate,  \n" +
                "					cp.updatedAt = fun_DatetimetoUTCDateTime(),  \n" +
                "					cp.updatedBy = puserID,  \n" +
                "					cp.updateByRoleId = puserRoleID,  \n" +
                "					cp.rmaNumber= tci.rmaNumber,  \n" +
                "					cp.billToId = tci.billToId,  \n" +
                "					cp.shipToId  = tci.shipToId,  \n" +
                "					cp.intermediateShipmentId = tci.intermediateShipmentId ,  \n" +
                "					cp.invoiceNumber = tci.invoiceNumber ,  \n" +
                "					cp.contactPersonId = tci.contactPersonId,  \n" +
                "					cp.revision =  LPAD(tci.revision,2,'0'),  \n" +
                "					cp.isZeroValue = IFNULL(tci.isZeroValue,0),  \n" +
                "					cp.isAlreadyPublished = IFNULL(tci.isAlreadyPublished,0),  \n" +
                "					cp.poRevision = tci.poRevision ,  \n" +
                "					cp.isMarkForRefund = tci.isMarkForRefund,  \n" +
                "					cp.agreedRefundAmt = IFNULL(tci.agreedRefundAmt,0),  \n" +
                "					cp.isAskForVersionConfirmation = tci.isAskForVersionConfirmation,  \n" +
                "					cp.refundStatus = (CASE WHEN pTransType = 'C' THEN  \n" +
                "								(CASE WHEN tci.isMarkForRefund = 1 THEN  \n" +
                "									(CASE WHEN vTotRefundIssuedOfCreditMemo = 0 THEN 'PE'  \n" +
                "										WHEN vTotRefundIssuedOfCreditMemo < ABS(IFNULL(tci.totalAmount,0)) THEN 'PR'  \n" +
                "										WHEN vTotRefundIssuedOfCreditMemo = ABS(IFNULL(tci.totalAmount,0)) THEN 'FR'  \n" +
                "									   END)  \n" +
                "								ELSE 'NA' END)  \n" +
                "							ELSE NULL END)  \n" +
                "				 WHERE cp.id = pInvoiceID  \n" +
                "				 AND cp.transType = pTransType;  \n" +
                "  \n" +
                "			 END IF;  \n" +
                "  \n" +
                "		END IF;  \n" +
                "  \n" +
                "	  END IF;  \n" +
                "  \n" +
                "  \n" +
                "	  /* Resp[0] - created invoice/credit memo mst ID  */  \n" +
                "	  SELECT pInvoiceID invoiceID;  \n" +
                "	/* Resp[1] - detail Id  */  \n" +
                "	SELECT id  detId ,refSalesorderDetId , reflineID  \n" +
                "	FROM customer_packingslip_det  \n" +
                "	WHERE  refCustPackingSlipID = pInvoiceID  \n" +
                "	AND isDeleted = 0;  \n" +
                "  \n" +
                "	/* Resp[2] - store procedure status  */  \n" +
                "	  IF (vIsAgreedRefundLessThanTotIssued > 0) THEN  \n" +
                "		SELECT 0 AS 'spStatus' ;  \n" +
                "	  ELSE  \n" +
                "		SELECT 1 AS 'spStatus' ;  \n" +
                "	  END IF;  \n" +
                "  \n" +
                "	  /* Resp[3] -  Agreed Refund Amount Less Than Total Issued Amout */  \n" +
                "	IF (vIsAgreedRefundLessThanTotIssued > 0) THEN  \n" +
                "		SELECT 1 AS isAgreedRefundAmtLessThanTotIssued, vTotRefundIssuedOfCreditMemo AS totRefundIssuedAgainstCreditMemo;  \n" +
                "	ELSE  \n" +
                "		SELECT 0 AS isAgreedRefundAmtLessThanTotIssued, vTotRefundIssuedOfCreditMemo AS totRefundIssuedAgainstCreditMemo;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	  DROP TEMPORARY TABLE IF EXISTS temp_part_data ;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 04-01-2022   *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1268,'1.00','V1','Sproc_SaveCustomerInvoiceDetail- User Story 39013: Add CPS Popup && shipment Summary Details Improvement - Shweta '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1268:
            allDbChangesArray.push(
                /* **************************** New Script -> 04-01-2022  *********************************** */
                "DROP VIEW IF EXISTS vu_inv_ps_so_line_detail;  \n" +
                "CREATE VIEW `vu_inv_ps_so_line_detail` AS  \n" +
                "    SELECT  \n" +
                "        `sm`.`salesOrderNumber` AS `salesOrderNumber`,  \n" +
                "        `sm`.`soDate` AS `soDate`,  \n" +
                "        IFNULL(`sm`.`poNumber`, `invmst`.`poNumber`) AS `poNumber`,  \n" +
                "        IFNULL(`sm`.`poDate`, `invmst`.`poDate`) AS `poDate`,  \n" +
                "        `sd`.`lineID` AS `soLineId`,  \n" +
                "        IFNULL(`sd`.`custPOLineNumber`,  \n" +
                "                `invdet`.`custPOLineID`) AS `custPOLineNumber`,  \n" +
                "        `sm`.`id` AS `soMstId`,  \n" +
                "        `packingmst`.`packingSlipNumber` AS `packingSlipNumber`,  \n" +
                "        `packingmst`.`packingSlipDate` AS `packingSlipDate`,  \n" +
                "        `packingdet`.`lineID` AS `packingLineID`,  \n" +
                "        `packingdet`.`id` AS `packingDetID`,  \n" +
                "        `packingmst`.`id` AS `packingSlipId`,  \n" +
                "        `invmst`.`invoiceNumber` AS `invoiceNumber`,  \n" +
                "        `invmst`.`invoiceDate` AS `invoiceDate`,  \n" +
                "        `invdet`.`lineID` AS `invLineID`,  \n" +
                "        `invmst`.`id` AS `invoiceId`,  \n" +
                "        `invdet`.`id` AS `invDetId`  \n" +
                "    FROM  \n" +
                "        (((((`customer_packingslip` `invmst`  \n" +
                "        JOIN `customer_packingslip_det` `invdet` ON (((`invdet`.`refCustPackingSlipID` = `invmst`.`id`)  \n" +
                "            AND (`invdet`.`isDeleted` = 0))))  \n" +
                "        LEFT JOIN `customer_packingslip` `packingmst` ON (((`packingmst`.`refCustInvoiceID` = `invmst`.`id`)  \n" +
                "            AND (`packingmst`.`isDeleted` = 0)  \n" +
                "            AND (`packingmst`.`transType` = 'P'))))  \n" +
                "        LEFT JOIN `customer_packingslip_det` `packingdet` ON (((`packingdet`.`refCustPackingSlipID` = `packingmst`.`id`)  \n" +
                "            AND (`packingdet`.`isDeleted` = 0)  \n" +
                "            AND (`packingdet`.`reflineID` = `invdet`.`reflineID`)  \n" +
                "            AND (IFNULL(`packingdet`.`shippingId`, 0) = IFNULL(`invdet`.`shippingId`, 0))  \n" +
                "            AND (IFNULL(`packingdet`.`refCustPackingSlipDetID`, 0) = IFNULL(`invdet`.`refCustPackingSlipDetID`, 0)))))  \n" +
                "        LEFT JOIN `salesordermst` `sm` ON (((`sm`.`id` = `packingmst`.`refSalesOrderID`)  \n" +
                "            AND (`sm`.`isDeleted` = 0))))  \n" +
                "        LEFT JOIN `salesorderdet` `sd` ON (((`sd`.`refSalesOrderID` = `sm`.`id`)  \n" +
                "            AND (`sd`.`id` = `packingdet`.`refSalesorderDetid`)  \n" +
                "            AND (`sd`.`isDeleted` = 0))))  \n" +
                "    WHERE  \n" +
                "        ((`invmst`.`transType` = 'I')  \n" +
                "            AND (`invmst`.`isDeleted` = 0))  \n" +
                "    UNION SELECT  \n" +
                "        `sm`.`salesOrderNumber` AS `salesOrderNumber`,  \n" +
                "        `sm`.`soDate` AS `soDate`,  \n" +
                "        IFNULL(`sm`.`poNumber`, `packingmst`.`poNumber`) AS `poNumber`,  \n" +
                "        IFNULL(`sm`.`poDate`, `packingmst`.`poDate`) AS `poDate`,  \n" +
                "        `sd`.`lineID` AS `soLineId`,  \n" +
                "        IFNULL(`sd`.`custPOLineNumber`,  \n" +
                "                `packingdet`.`custPOLineID`) AS `custPOLineNumber`,  \n" +
                "        `sm`.`id` AS `soMstId`,  \n" +
                "        `packingmst`.`packingSlipNumber` AS `packingSlipNumber`,  \n" +
                "        `packingmst`.`packingSlipDate` AS `packingSlipDate`,  \n" +
                "        `packingdet`.`lineID` AS `packingLineID`,  \n" +
                "        `packingdet`.`id` AS `packingDetID`,  \n" +
                "        `packingmst`.`id` AS `packingSlipId`,  \n" +
                "        NULL AS `invoiceNumber`,  \n" +
                "        NULL AS `invoiceDate`,  \n" +
                "        NULL AS `invLineID`,  \n" +
                "        NULL AS `invoiceId`,  \n" +
                "        `packingdet`.`id` AS `invDetId`  \n" +
                "    FROM  \n" +
                "        (((`customer_packingslip` `packingmst`  \n" +
                "        LEFT JOIN `customer_packingslip_det` `packingdet` ON (((`packingdet`.`refCustPackingSlipID` = `packingmst`.`id`)  \n" +
                "            AND (`packingdet`.`isDeleted` = 0))))  \n" +
                "        LEFT JOIN `salesordermst` `sm` ON (((`sm`.`id` = `packingmst`.`refSalesOrderID`)  \n" +
                "            AND (`sm`.`isDeleted` = 0))))  \n" +
                "        LEFT JOIN `salesorderdet` `sd` ON (((`sd`.`refSalesOrderID` = `sm`.`id`)  \n" +
                "            AND (`sd`.`id` = `packingdet`.`refSalesorderDetid`)  \n" +
                "            AND (`sd`.`isDeleted` = 0))))  \n" +
                "    WHERE  \n" +
                "        ((`packingmst`.`transType` = 'P')  \n" +
                "            AND (`packingmst`.`isDeleted` = 0)  \n" +
                "            AND (`packingmst`.`refCustInvoiceID` IS NULL));  \n" +
                /* **************************** Add Script Version -> 04-01-2022   *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1269,'1.00','V1','vu_inv_ps_so_line_detail-User Story 39013: Add CPS Popup && shipment Summary Details Improvement - Shweta '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1269:
            allDbChangesArray.push(
                /* **************************** New Script -> 04-01-2022  *********************************** */
                "DROP TRIGGER IF EXISTS Trg_AU_customer_packingslip_det;  \n" +
                "CREATE TRIGGER `Trg_AU_customer_packingslip_det` AFTER UPDATE ON `customer_packingslip_det` FOR EACH ROW BEGIN  \n" +
                "  \n" +
                "	DECLARE v_trasType VARCHAR(5);  \n" +
                "  DECLARE vNewQuoteFrom VARCHAR(30);  \n" +
                "    DECLARE vOldQuoteFrom VARCHAR(30);  \n" +
                "  DECLARE vBPOQty INT;  \n" +
                "	DECLARE vBPOTotalQty INT;  \n" +
                "  \n" +
                "	SELECT transType INTO v_trasType  \n" +
                "	FROM customer_packingslip  \n" +
                "	WHERE isDeleted = 0 AND id = NEW.refCustPackingSlipID ;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.custPOLineID,0) != IFNULL(NEW.custPOLineID,0) THEN  \n" +
                "       INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "       VALUES(\"CUSTOMER_PACKINGSLIP_DET\",CAST(new.id AS CHAR),'Cust PO Line#',CAST(OLD.custPOLineID AS CHAR),  \n" +
                "       CAST(new.custPOLineID AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.poQty,0) != IFNULL(NEW.poQty,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "       VALUES(\"CUSTOMER_PACKINGSLIP_DET\",CAST(new.id AS CHAR),'Original PO Line Order Qty',CAST(OLD.poQty AS CHAR),  \n" +
                "       CAST(new.poQty AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "        IF IFNULL(OLD.shipQty,0) != IFNULL(NEW.shipQty,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES(\"CUSTOMER_PACKINGSLIP_DET\",CAST(new.id AS CHAR),  \n" +
                "		(CASE WHEN v_trasType='P' THEN 'Shipment Qty' ELSE 'Qty' END),	CAST(OLD.shipQty AS CHAR),  \n" +
                "		CAST(new.shipQty AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "  \n" +
                "  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.remainingQty,0) != IFNULL(NEW.remainingQty,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "       VALUES(\"CUSTOMER_PACKINGSLIP_DET\",CAST(new.id AS CHAR),'Remaining Qty',CAST(OLD.remainingQty AS CHAR),  \n" +
                "       CAST(new.remainingQty AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.shippedQty,0) != IFNULL(NEW.shippedQty,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "       VALUES(\"CUSTOMER_PACKINGSLIP_DET\",CAST(new.id AS CHAR),'Shipped To Date',CAST(OLD.shippedQty AS CHAR),  \n" +
                "       CAST(new.shippedQty AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "     IF IFNULL(OLD.shippingNotes,0) != IFNULL(NEW.shippingNotes,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "       VALUES(\"CUSTOMER_PACKINGSLIP_DET\",CAST(new.id AS CHAR),'Line Shipping Comments',CAST(OLD.shippingNotes AS CHAR),  \n" +
                "       CAST(new.shippingNotes AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.internalComment,0) != IFNULL(NEW.internalComment,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "       VALUES(\"CUSTOMER_PACKINGSLIP_DET\",CAST(new.id AS CHAR),'Line Internal Notes',CAST(OLD.internalComment AS CHAR),  \n" +
                "       CAST(new.internalComment AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.standrads,0) != IFNULL(NEW.standrads,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "       VALUES(\"CUSTOMER_PACKINGSLIP_DET\",CAST(new.id AS CHAR),'Applicable Standards',CAST(OLD.standrads AS CHAR),  \n" +
                "       CAST(new.standrads AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "     IF IFNULL(OLD.refChargesTypeID,0) != IFNULL(NEW.refChargesTypeID,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "       VALUES(\"CUSTOMER_PACKINGSLIP_DET\",CAST(new.id AS CHAR),'Other Charges Type',fun_getGenericCategoryNameByID(OLD.refChargesTypeID),  \n" +
                "       fun_getGenericCategoryNameByID(NEW.refChargesTypeID),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.unitPrice,0) != IFNULL(NEW.unitPrice,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "       VALUES(\"CUSTOMER_PACKINGSLIP_DET\",CAST(new.id AS CHAR),'Unit Price ($)', CAST(OLD.unitPrice AS CHAR), CAST(NEW.unitPrice AS CHAR),  \n" +
                "       fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "      IF IFNULL(OLD.assyDescription,0) != IFNULL(NEW.assyDescription,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "       VALUES(\"CUSTOMER_PACKINGSLIP_DET\",CAST(new.id AS CHAR),'Assy/PID Description',CAST(OLD.assyDescription AS CHAR),  \n" +
                "       CAST(NEW.assyDescription AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	 IF IFNULL(OLD.extendedPrice,0) != IFNULL(NEW.extendedPrice,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "       VALUES(\"CUSTOMER_PACKINGSLIP_DET\",CAST(new.id AS CHAR),'Ext. Price ($)',  \n" +
                "		CASE WHEN v_trasType='C' THEN CONCAT('(',CAST(FORMAT(REPLACE(OLD.extendedPrice,'-',''),2) AS CHAR),')') ELSE CAST(FORMAT(OLD.extendedPrice,2) AS CHAR) END,  \n" +
                "		CASE WHEN v_trasType='C' THEN CONCAT('(',CAST(FORMAT(REPLACE(NEW.extendedPrice,'-',''),2) AS CHAR),')') ELSE CAST(FORMAT(NEW.extendedPrice,2) AS CHAR) END,  \n" +
                "		fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	IF IFNULL(OLD.otherCharges,0) != IFNULL(NEW.otherCharges,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "       VALUES(\"CUSTOMER_PACKINGSLIP_DET\",CAST(new.id AS CHAR),'Total Other Charges Price ($)',CAST(FORMAT(OLD.otherCharges,2) AS CHAR),  \n" +
                "       CAST(FORMAT(new.otherCharges,2) AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	 IF IFNULL(OLD.reflineID,0) != IFNULL(NEW.reflineID,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "       VALUES(\"CUSTOMER_PACKINGSLIP_DET\",CAST(new.id AS CHAR),'SO Line#',CAST(OLD.reflineID AS CHAR),  \n" +
                "       CAST(NEW.reflineID AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  IF(new.refsalesorderdetid IS NOT NULL)THEN  \n" +
                "	SELECT  SUM(cpd.shipQty) INTO @shipQty   FROM customer_packingslip_det cpd JOIN customer_packingslip cp ON cp.id=cpd.refCustPackingSlipID  \n" +
                "		WHERE cpd.isdeleted=0 AND cpd.refsalesorderdetid=new.refsalesorderdetid AND cp.transType='P';  \n" +
                "  \n" +
                "	SELECT SUM(ss.qty),refBlanketPOID INTO @qty,@bpoID FROM salesorderdet ss WHERE ss.id=new.refsalesorderdetid AND ss.isdeleted=0 GROUP BY refBlanketPOID;  \n" +
                "  \n" +
                "		IF(IFNULL(@shipQty,0)>=IFNULL(@qty,0)) THEN  \n" +
                "			UPDATE SalesOrderDet SET salesOrderDetStatus=2,completeStatusReason='AUTO' WHERE id=New.refsalesorderdetid;  \n" +
                "  \n" +
                "		ELSE  \n" +
                "			UPDATE SalesOrderDet SET salesOrderDetStatus=1,completeStatusReason=NULL WHERE id=New.refsalesorderdetid;  \n" +
                "		END IF;  \n" +
                "		SELECT  qty INTO vBPOQty FROM  salesorderdet WHERE id=@bpoID;  \n" +
                "	        SELECT  SUM(qty) INTO vBPOTotalQty FROM  salesorderdet WHERE refBlanketPOID=@bpoID AND isdeleted=0;  \n" +
                "		IF((SELECT COUNT(1) FROM SalesOrderDet WHERE  refBlanketPOID=@bpoID AND isdeleted=0 AND salesOrderDetStatus=1 AND isCancle=0)=0 AND IFNULL(vBPOQty,0)<=IFNULL(vBPOTotalQty,0))THEN  \n" +
                "		        UPDATE SalesOrderDet SET salesOrderDetStatus=2,completeStatusReason='AUTO' WHERE (id=@bpoID OR refSODetID=@bpoID);  \n" +
                "		ELSE  \n" +
                "		      UPDATE SalesOrderDet SET salesOrderDetStatus=1,completeStatusReason=NULL WHERE (id=@bpoID OR refSODetID=@bpoID);  \n" +
                "		END IF;  \n" +
                "  END IF;  \n" +
                "  IF IFNULL(OLD.quoteNumber,0) != IFNULL(NEW.quoteNumber,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "	   VALUES(\"CUSTOMER_PACKINGSLIP_DET\",CAST(new.id AS CHAR),'Quote#',CAST(OLD.quoteNumber AS CHAR),  \n" +
                "	   CAST(NEW.quoteNumber AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "   IF IFNULL(OLD.quoteFrom,0) != IFNULL(NEW.quoteFrom,0) THEN  \n" +
                "		SELECT (CASE WHEN OLD.quoteFrom = 1 THEN 'From RFQ' WHEN OLD.quoteFrom = 2 THEN 'From Part Master' WHEN OLD.quoteFrom = 3 THEN 'N/A' END ) INTO vOldQuoteFrom ;  \n" +
                "        SELECT (CASE WHEN NEW.quoteFrom = 1 THEN 'From RFQ' WHEN NEW.quoteFrom = 2 THEN 'From Part Master' WHEN NEW.quoteFrom = 3 THEN 'N/A' END ) INTO vNewQuoteFrom ;  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "	   VALUES(\"CUSTOMER_PACKINGSLIP_DET\",CAST(new.id AS CHAR),'Quote From',vOldQuoteFrom,  \n" +
                "	   vNewQuoteFrom,fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "     IF IFNULL(OLD.refRFQGroupID,0) != IFNULL(NEW.refRFQGroupID,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "	   VALUES(\"CUSTOMER_PACKINGSLIP_DET\",CAST(new.id AS CHAR),'Quote Group',CAST(OLD.refRFQGroupID AS CHAR),  \n" +
                "	   CAST(NEW.refRFQGroupID AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "     IF IFNULL(OLD.refAssyQtyTurnTimeID,0) != IFNULL(NEW.refAssyQtyTurnTimeID,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "	   VALUES(\"CUSTOMER_PACKINGSLIP_DET\",CAST(new.id AS CHAR),'Quote Group',OLD.assyQtyTurnTimeText,  \n" +
                "	   NEW.assyQtyTurnTimeText,fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "       IF IFNULL(OLD.refRFQQtyTurnTimeID,0) != IFNULL(NEW.refRFQQtyTurnTimeID,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "	   VALUES(\"CUSTOMER_PACKINGSLIP_DET\",CAST(new.id AS CHAR),'Quote Group',OLD.assyQtyTurnTimeText,  \n" +
                "	   NEW.assyQtyTurnTimeText,fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "     IF IFNULL(OLD.isZeroValue,0) != IFNULL(NEW.isZeroValue,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "	   VALUES(\"CUSTOMER_PACKINGSLIP_DET\",CAST(new.id AS CHAR),'Confirming Zero Value Line',(CASE WHEN OLD.isZeroValue =0 THEN 'False' ELSE 'True' END),  \n" +
                "	   (CASE WHEN NEW.isZeroValue =0 THEN 'False' ELSE 'True' END),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "     IF IFNULL(OLD.releaseNotes,0) != IFNULL(NEW.releaseNotes,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "	   VALUES(\"CUSTOMER_PACKINGSLIP_DET\",CAST(new.id AS CHAR),'Release Notes',OLD.releaseNotes,  \n" +
                "	   NEW.releaseNotes,fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "   END;  \n" +
                /* **************************** Add Script Version -> 04-01-2022   *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1270,'1.00','V1','Trg_AU_customer_packingslip_det- User Story 39013: Add CPS Popup && shipment Summary Details Improvement - Shweta '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1270:
            allDbChangesArray.push(
                /* **************************** New Script -> 06-01-2022 *********************************** */
                "DROP PROCEDURE IF EXISTS Sproc_GetSalesOrderSummaryList;  \n" +
                "CREATE PROCEDURE `Sproc_GetSalesOrderSummaryList`(  \n" +
                "	IN ppageIndex INT(11),  \n" +
                "	IN precordPerPage INT(11),  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pfilterStatus VARCHAR(100),  \n" +
                "	IN pcustomerIds VARCHAR(16000),  \n" +
                "	IN pshippingMethodId VARCHAR(16000),  \n" +
                "	IN ptermsIds VARCHAR(16000),  \n" +
                "	IN psearchposotext VARCHAR(1000),  \n" +
                "	IN psearchposotype VARCHAR(10),  \n" +
                "	IN pfromDate DATE,  \n" +
                "	IN ptoDate DATE,  \n" +
                "	IN psearchextPricetext VARCHAR(1000),  \n" +
                "	IN psearchextPricetype VARCHAR(10),  \n" +
                "	IN pfilterPOStatus VARCHAR(20)  ,  \n" +
                "    IN pIsRmaPO TINYINT,  \n" +
                "    IN pfromPODate DATE,  \n" +
                "	IN ptoPODate DATE  \n" +
                "	)  \n" +
                "BEGIN  \n" +
                "  \n" +
                "		DECLARE pOffset INT(11);  \n" +
                "		DECLARE rowNumWhere VARCHAR(255) ;  \n" +
                "		DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
                "		DECLARE v_TimeZone VARCHAR(50);  \n" +
                "  \n" +
                "		SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "		SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
                "  \n" +
                "		SET @tempQuery = CONCAT(\"SELECT s.id,  \n" +
                "       s.salesOrderNumber,  \n" +
                "       s.poNumber,  \n" +
                "       s.poDate,  \n" +
                "       s.customerID,  \n" +
                "       s.contactPersonID,  \n" +
                "       s.billingAddressID,  \n" +
                "       s.shippingAddressID,  \n" +
                "       s.shippingMethodID,  \n" +
                "       s.revision,  \n" +
                "       s.shippingComment,  \n" +
                "       s.termsID,  \n" +
                "       CASE WHEN s.status=0 THEN 'Draft' ELSE 'Published' END statusConvertedValue,  \n" +
                "       CASE WHEN s.blanketPOOption=1 THEN 'Use This Blanket PO# for All Releases' WHEN s.blanketPOOption=2 THEN 'Link Future PO(s) to This Blanket PO' WHEN s.blanketPOOption=3 THEN 'Use Blanket PO# and Release#' ELSE '' END blanketPOOptionText,  \n" +
                "       s.blanketPOOption,  \n" +
                "       s.status,  \n" +
                "       s.soDate,  \n" +
                "       s.revisionChangeNote,  \n" +
                "       s.salesCommissionTo,  \n" +
                "       s.intermediateShipmentId,  \n" +
                "       s.freeOnBoardId,  \n" +
                "       s.internalComment as internalCommentSo,  \n" +
                "       s.serialNumber,  \n" +
                "       s.carrierID,  \n" +
                "       s.carrierAccountNumber,  \n" +
                "       s.originalPODate,  \n" +
                "       s.isLegacyPO,  \n" +
                "       CASE WHEN s.isLegacyPO=0 THEN 'No' ELSE   'Yes' END legacyPOText,  \n" +
                "       s.isRmaPO,  \n" +
                "       CASE WHEN s.isRmaPO=0 THEN 'No' ELSE   'Yes' END rmaPOText,  \n" +
                "       s.poRevision,  \n" +
                "       CASE WHEN isBlanketPO=0 THEN 'No' ELSE 'Yes' END blanketPOText,  \n" +
                "       s.isBlanketPO,  \n" +
                "       CONCAT('(',mg.mfgCode,')',mg.mfgName) AS companyName,  \n" +
                "       mg.mfgName,  \n" +
                "       s.poRevisionDate,  \n" +
                "       fun_getEmployeeNameByEmpID(s.contactPersonID) fullName,  \n" +
                "       fun_getGenericCategoryCodeNameByID(s.termsID) termsDisplayText,  \n" +
                "       fun_getGenericCategoryCodeNameByID(s.carrierID) carrierName,  \n" +
                "       fun_getGenericCategoryCodeNameByID(s.shippingMethodID) genCategoryCode,  \n" +
                "       fb.name freeOnBoardName,  \n" +
                "       s.`rmaNumber` AS `rmaNumber`,  \n" +
                "	   s.`isDebitedByCustomer` AS `isDebitedByCustomer`,  \n" +
                "	   (CASE WHEN (s.`isDebitedByCustomer` = 1) THEN 'Yes' ELSE 'No' END) AS `debitedByCustText`,  \n" +
                "       s.`orgPONumber` AS `rmaOrgPONumber`,  \n" +
                "       s.`orgSalesOrderID` AS `orgSalesOrderID`,  \n" +
                "		s.`isReworkRequired` AS `isReworkRequired`,  \n" +
                "       (CASE  WHEN (s.`isReworkRequired` = 1) THEN 'Yes'  ELSE 'No'  END) AS `reworkReqText`,  \n" +
                "	   s.`reworkPONumber` AS `reworkPONumber`,  \n" +
                "      ifnull(sodCnt.totalLineCount,0)  totalSOLines,  \n" +
                "       ifnull(sodCnt.completedLineCount,0) totalCompletedSOLines,  \n" +
                "       (case when sodCnt.totalLineCount is null then 0 else  Round((sodCnt.completedLineCount * 100/sodCnt.totalLineCount),2) end)soCompletionPercentage,  \n" +
                "      (case when sodCnt.canceledLineCount = ifnull(sodCnt.totalLineCount,0) then 'Canceled'  \n" +
                "			when (sodCnt.canceledLineCount + sodCnt.completedLineCount) = ifnull(sodCnt.totalLineCount,0)  then 'Completed'  \n" +
                "            else 'In Progress' end) salesOrderDetStatusConvertedValues,  \n" +
                "      fun_getTotalSoPrice(s.id) soTotalPrice,  \n" +
                "      fun_getTotalInvoicePrice(s.id) soInvoicePrice,  \n" +
                "			fun_getUserNameByID(s.updatedBy) soModifiedBy,  \n" +
                "			fun_getUserNameByID(s.createdBy) soCreatedBy,  \n" +
                "			fun_getRoleByID(s.createByRoleId) createdbyRole,  \n" +
                "			fun_getRoleByID(s.updateByRoleId) updatedbyRole,  \n" +
                "                       fun_ApplyCommonDateTimeFormatByParaValue(s.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdDate,  \n" +
                "		       fun_ApplyCommonDateTimeFormatByParaValue(s.UpdatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') modifyDate  \n" +
                "		       FROM salesordermst s JOIN mfgcodemst mg ON mg.id=s.customerID AND mg.isdeleted=0  \n" +
                "			LEFT JOIN freeonboardmst fb ON fb.id=s.freeOnBoardId AND fb.isdeleted=0  \n" +
                "    LEFT JOIN ( select sod.refSalesOrderID as soId ,  \n" +
                "							sum((case when sod.salesOrderDetStatus = 2 then 1 else 0 end) ) completedLineCount,  \n" +
                "							count(1) totalLineCount,  \n" +
                "                            sum((case when sod.isCancle = 1 then 1 else 0 end)) canceledLineCount  \n" +
                "                            From salesorderdet sod where sod.isDeleted = 0  \n" +
                "                            Group By sod.refSalesOrderID ) sodCnt on sodCnt.soId = s.id  \n" +
                "			WHERE s.isdeleted=0  \n" +
                "			\");  \n" +
                "  \n" +
                "  \n" +
                "		IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY serialNumber DESC\") ;  \n" +
                "		ELSE  \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF (pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "			SET pWhereClause = '1=1' ;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "                IF(pfilterStatus IS NOT NULL AND pfilterStatus != '') THEN  \n" +
                "  \n" +
                "		      SET pWhereClause = CONCAT(pWhereClause, ' AND  FIND_IN_SET(salesOrderDetStatusConvertedValues,''', pfilterStatus ,''')');  \n" +
                "	        END IF;  \n" +
                "	        IF(pfilterPOStatus IS NOT NULL AND pfilterPOStatus != '') THEN  \n" +
                "  \n" +
                "		      SET pWhereClause = CONCAT(pWhereClause, ' AND  FIND_IN_SET(statusConvertedValue,''', pfilterPOStatus ,''')');  \n" +
                "	        END IF;  \n" +
                "	        IF(pcustomerIds IS NOT NULL AND pcustomerIds != '') THEN  \n" +
                "		      SET pWhereClause = CONCAT(pWhereClause, ' AND customerID in (',pcustomerIds,')');  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "			SET pWhereClause = '1=1' ;  \n" +
                "		END IF;  \n" +
                "                IF(pshippingMethodId IS NOT NULL AND pshippingMethodId != '') THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause, ' AND shippingMethodID in (',pshippingMethodId,')');  \n" +
                "		END IF;  \n" +
                "                IF(ptermsIds IS NOT NULL AND ptermsIds != '') THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause, ' AND termsID in (',ptermsIds,')');  \n" +
                "		END IF;  \n" +
                "		IF(psearchposotype IS NOT NULL AND psearchposotext IS NOT NULL)THEN  \n" +
                "			IF(psearchposotype='C')THEN  \n" +
                "				SET pWhereClause = CONCAT(pWhereClause, ' AND (salesOrderNumber  like ''%',psearchposotext,'%'' OR poNumber  like ''%',psearchposotext,'%'')');  \n" +
                "			ELSE  \n" +
                "				SET pWhereClause= CONCAT(pWhereClause,' and (salesOrderNumber  =''',psearchposotext,''' OR poNumber  =''',psearchposotext,''')');  \n" +
                "			END IF;  \n" +
                "		END IF;  \n" +
                "		IF(psearchextPricetype IS NOT NULL AND psearchextPricetext IS NOT NULL)THEN  \n" +
                "			IF(psearchextPricetype='C')THEN  \n" +
                "				SET pWhereClause = CONCAT(pWhereClause, ' AND (soTotalPrice  like ''%',psearchextPricetext,'%'')');  \n" +
                "			ELSE  \n" +
                "				SET pWhereClause= CONCAT(pWhereClause,' and (soTotalPrice  =''',psearchextPricetext,''')');  \n" +
                "			END IF;  \n" +
                "		END IF;  \n" +
                "		IF(pfromDate IS NOT NULL AND ptoDate IS NOT NULL)THEN  \n" +
                "			SET pWhereClause=CONCAT(pWhereClause, ' and (soDate>=''',pfromDate,''' and soDate<=''',ptoDate,''')');  \n" +
                "		ELSEIF(pfromDate IS NOT NULL)THEN  \n" +
                "			SET pWhereClause=CONCAT(pWhereClause, ' and (soDate>=''',pfromDate,''')');  \n" +
                "		ELSEIF(ptoDate IS NOT NULL)THEN  \n" +
                "			SET pWhereClause=CONCAT(pWhereClause, ' and (soDate<=''',ptoDate,''')');  \n" +
                "		END IF;  \n" +
                "        IF(pfromPODate IS NOT NULL AND ptoPODate IS NOT NULL)THEN  \n" +
                "			SET pWhereClause=CONCAT(pWhereClause, ' and (poDate>=''',pfromPODate,''' and poDate<=''',ptoPODate,''')');  \n" +
                "		ELSEIF(pfromPODate IS NOT NULL)THEN  \n" +
                "		   SET pWhereClause=CONCAT(pWhereClause, ' and (poDate>=''',pfromPODate,''')');  \n" +
                "		ELSEIF(ptoPODate IS NOT NULL)THEN  \n" +
                "		   SET pWhereClause=CONCAT(pWhereClause, ' and (poDate<=''',ptoPODate,''')');  \n" +
                "		END IF;  \n" +
                "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "			SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "		ELSE  \n" +
                "			SET rowNumWhere = '';  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		/* to get total count of rows */  \n" +
                "			SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@tempquery,\" ) c where 1=1 and \", pWhereClause);  \n" +
                "  \n" +
                "			PREPARE query2 FROM @SQLStatement2;  \n" +
                "  \n" +
                "			 EXECUTE query2;  \n" +
                "			 DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "			SET @SQLStatement1 = CONCAT(\"select * from ( \", @tempquery,\" ) c  \n" +
                "				where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "  \n" +
                "			PREPARE query1 FROM @SQLStatement1;  \n" +
                "  \n" +
                "			 EXECUTE query1;  \n" +
                "		       DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 06-01-2022  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1271,'1.00','V1','Bug 40202: [Main Branch] -Shweta '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1271:
            allDbChangesArray.push(
                /* **************************** New Script -> 06-01-2022 *********************************** */
                "DROP PROCEDURE IF EXISTS Sproc_GetSalesorderList;  \n" +
                "CREATE PROCEDURE `Sproc_GetSalesorderList`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pIsKitList TINYINT,  \n" +
                "	IN pPlannedStatus VARCHAR(10),  \n" +
                "	IN pSalesOrderDetailId INT,  \n" +
                "	IN pIsPendingWOCreationList TINYINT,  \n" +
                "	IN pCustomPendingWOCreationWhereClause VARCHAR(255),  \n" +
                "	IN pIsPendingCustPackingSlipList TINYINT,  \n" +
                "	IN pfilterStatus VARCHAR(100),  \n" +
                "	IN pcustomerIds VARCHAR(16000),  \n" +
                "	IN pshippingMethodId VARCHAR(16000),  \n" +
                "	IN ptermsIds VARCHAR(16000),  \n" +
                "	IN psearchposotext VARCHAR(1000),  \n" +
                "	IN psearchposotype VARCHAR(10),  \n" +
                "	IN pfromDate DATE,  \n" +
                "	IN ptoDate DATE,  \n" +
                "	IN prushJob TINYINT,  \n" +
                "	IN ppartIds VARCHAR(16000),  \n" +
                "	IN pworkorders VARCHAR(16000),  \n" +
                "	IN psearchextPricetext VARCHAR(1000),  \n" +
                "	IN psearchextPricetype VARCHAR(10),  \n" +
                "	IN pkitreturnStatus VARCHAR(100),  \n" +
                "	IN pkitReleaseStatus VARCHAR(100),  \n" +
                "    IN pfilterPOStatus VARCHAR(20) ,  \n" +
                "    IN pIsRmaPO TINYINT,  \n" +
                "	IN pfromPODate DATE,  \n" +
                "	IN ptoPODate DATE  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255);  \n" +
                "	DECLARE v_PlannedWhere VARCHAR(1000);  \n" +
                "	DECLARE v_SalesOrderDetailWhere VARCHAR(1000);  \n" +
                "	DECLARE v_DynamicJoin VARCHAR(16383);  \n" +
                "	DECLARE v_DynamicColumns VARCHAR(16383);  \n" +
                "	DECLARE v_PendingWOWhereClause VARCHAR(16383);  \n" +
                "	DECLARE v_PendingCustPackingWhereClause VARCHAR(16383) DEFAULT '';  \n" +
                "    DECLARE vTimeZone VARCHAR(50);  \n" +
                "	DECLARE vDateTimeDisplayFormat VARCHAR(100);  \n" +
                "  \n" +
                "    SELECT fun_getDateTimeFormat() INTO vDateTimeDisplayFormat;  \n" +
                "	SELECT fun_getTimeZone() INTO vTimeZone;  \n" +
                "	SET v_PendingWOWhereClause='';  \n" +
                "  \n" +
                "	IF(pIsKitList=1) THEN  \n" +
                "		SET v_DynamicColumns = CONCAT(\",  \n" +
                "			hu.refType as refTypeKR,  \n" +
                "			hu.status as haltStatusKR,  \n" +
                "			(  \n" +
                "				CASE  \n" +
                "					WHEN hu.status = 'H' THEN  \n" +
                "						CONCAT(hu.reason, ' - Halt by ',fun_getUserNameByEmployeID(hu.holdEmployeeId),' on ', fun_ConvertUTCDatetimeToDataKeyTimeZone(hu.startDate))  \n" +
                "					ELSE ''  \n" +
                "				END  \n" +
                "			) AS reasonKR,  \n" +
                "			hutt.refType as refTypePO,  \n" +
                "			hutt.status as haltStatusPO,  \n" +
                "			(  \n" +
                "				CASE  \n" +
                "					WHEN hutt.status = 'H' THEN  \n" +
                "						CONCAT(hutt.reason, ' - Halt by ',fun_getUserNameByEmployeID(hutt.holdEmployeeId),' on ', fun_ConvertUTCDatetimeToDataKeyTimeZone(hutt.startDate))  \n" +
                "					ELSE ''  \n" +
                "				END  \n" +
                "			) AS reasonPO,  \n" +
                "            kaad.bomInternalVersionString kitAllocationInternalVersion  \n" +
                "		\");  \n" +
                "  \n" +
                "		SET v_DynamicJoin = CONCAT(\"  \n" +
                "			LEFT JOIN holdunholdtrans hu ON vuss.salesOrderDetailId = hu.refTransID and hu.id = (SELECT MAX(htt.id) FROM holdunholdtrans htt WHERE hu.refTransId = htt.refTransID and htt.refType='KR' and htt.isDeleted=0)  \n" +
                "			LEFT JOIN holdunholdtrans hutt ON vuss.salesOrderDetailId = hutt.refTransID and hutt.id = (SELECT MAX(httt.id) FROM holdunholdtrans httt WHERE hutt.refTransId = httt.refTransID and httt.refType='PO' and httt.isDeleted=0)  \n" +
                "            LEFT JOIN kit_allocation_assy_detail kaad ON vuss.salesOrderDetailId  = kaad.refSalesOrderDetID AND vuss.PartID = kaad.partId AND kaad.bomAssyLevel = 0 AND kaad.isDeleted = 0\") ;  \n" +
                "	ELSE  \n" +
                "		SET v_DynamicColumns=CONCAT(\",  \n" +
                "			hut.refType as refTypePO,hut.status as haltStatusPO,  \n" +
                "			(  \n" +
                "				CASE  \n" +
                "					WHEN hut.status = 'H' THEN  \n" +
                "						CONCAT(hut.reason, ' - Halt by ',fun_getUserNameByEmployeID(hut.holdEmployeeId),' on ', fun_ConvertUTCDatetimeToDataKeyTimeZone(hut.startDate))  \n" +
                "					ELSE ''  \n" +
                "				END  \n" +
                "			) AS reasonPO  \n" +
                "		\");  \n" +
                "  \n" +
                "		SET v_DynamicJoin =CONCAT(\"  \n" +
                "			LEFT JOIN holdunholdtrans hut ON vuss.salesOrderDetailId = hut.refTransId and hut.id = (  \n" +
                "				SELECT 	MAX(ht.id)  \n" +
                "				FROM 	holdunholdtrans ht  \n" +
                "				WHERE 	hut.refTransId = ht.refTransId  \n" +
                "						AND ht.refType='PO'  \n" +
                "						AND ht.isdeleted=0  \n" +
                "					)  \n" +
                "				\") ;  \n" +
                "	END IF;  \n" +
                "	IF(pIsPendingWOCreationList = 1) THEN  \n" +
                "		SET v_PendingWOWhereClause = CONCAT(v_PendingWOWhereClause,' AND statusConvertedValue = \"Published\" AND completedStatus != \"Canceled\"');  \n" +
                "		SET v_DynamicColumns = CONCAT(v_DynamicColumns, \", (`vuss`.`PO Qty`-IFNULL(WOCL.totalWO,0)) AS pendingWOCreation, WOCL.woNumber AS woNumber \");  \n" +
                "		SET v_DynamicJoin = CONCAT(v_DynamicJoin, \"LEFT JOIN (  \n" +
                "				SELECT 		co.PIDCODE AS PIDCode,  \n" +
                "						co.mfgPN AS mfgPN,  \n" +
                "						co.nickname AS nickName,  \n" +
                "						SUM(vusalesorderdet.totalPOQty) AS totalWO,  \n" +
                "						GROUP_CONCAT(wod.woNumber separator ', ') AS woNumber,  \n" +
                "						vusalesorderdet.poNumber,  \n" +
                "						vusalesorderdet.salesOrderNumber  \n" +
                "				FROM 		workorder wod  \n" +
                "				LEFT JOIN 	component co ON wod.partID = co.id AND IFNULL(co.isdeleted,0) = 0 AND IFNULL(co.category,0) = 3  \n" +
                "				LEFT JOIN 	vu_workorder_salesorder_details vusalesorderdet ON vusalesorderdet.woID = wod.woID  \n" +
                "				GROUP BY 	vusalesorderdet.salesOrderNumber, vusalesorderdet.poNumber, co.PIDCode, co.mfgPN, co.nickName  \n" +
                "			) AS WOCL ON (`vuss`.`Sales Order` = WOCL.salesOrderNumber AND `vuss`.`Po Number` = WOCL.poNumber AND `vuss`.`Assy ID` = WOCL.PIDCode)  \n" +
                "		\");  \n" +
                "	END IF;  \n" +
                "    IF (pIsPendingCustPackingSlipList = 1) THEN  \n" +
                "		SET v_DynamicJoin = CONCAT (v_DynamicJoin , 'LEFT JOIN vu_customer_packing_slip_qty_by_salesorderdetid vcpsd  \n" +
                "								ON vcpsd.refSalesorderDetId = vuss.salesOrderDetailId ');  \n" +
                "        SET v_DynamicColumns = CONCAT(v_DynamicColumns , ',  vcpsd.totShippedQty custPackingSlipShippedQty , vcpsd.balancePoQty ,  \n" +
                "									(select min(promisedShipDate) from salesshippingmst where sDetID = 	vuss.salesOrderDetailId AND isDeleted = 0) promisedShipDate	');  \n" +
                "		SET v_PendingCustPackingWhereClause = ' AND `status` = 1 AND balancePoQty > 0';  \n" +
                "        IF pOrderBy IS NULL THEN  \n" +
                "			SET pOrderBy = ' promisedShipDate asc ';  \n" +
                "        END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	SET @temp_Sproc_GetSalesorderList = CONCAT(\"  \n" +
                "		SELECT  a.*,  \n" +
                "				fun_getKitReleaseIndication(a.releaseDayDiffwithCurrentDate, a.shortagePer, a.isKitPlanningRequired) AS kitReleaseIndication ,  \n" +
                "                case when kitPlanStatus = 'Unplanned' then 1 else  0 end Unplanned ,  \n" +
                "                case when kitPlanStatus = 'Partially Planned' then 1 else 0 end PartiallyPlanned  \n" +
                "		FROM  \n" +
                "			(SELECT   ro.rohsIcon,ro.name AS `rohsComplientConvertedValue`,  \n" +
                "				(  \n" +
                "					CASE  	WHEN (`vuss`.`isHotJob` = 0) THEN  \n" +
                "							'No'  \n" +
                "						WHEN (`vuss`.`isHotJob` = 1) THEN  \n" +
                "							'Yes'  \n" +
                "						ELSE  \n" +
                "							''  \n" +
                "					END  \n" +
                "				) AS `isHotJobValue`,  \n" +
                "				`vuss`.`isHotJob`,  \n" +
                "				`vuss`.`Sales Order ID` AS id,  \n" +
                "				`vuss`.`salesOrderDetailId` AS salesOrderDetailId,  \n" +
                "				`vuss`.`Balanced Due Qty` as openQty,  \n" +
                "				`vuss`.frequency as frequencyName,  \n" +
                "				vuss.frequencyType as frequencyTypeName,  \n" +
                "				/*case when vuss.refSODetID is not null then fun_getAssyIDBySODetailID(vuss.refSODetID) else '' end  salesAssy,  */  \n" +
                "                 case when vuss.refSODetID is not null then sa.salesAssy else '' end  as salesAssy ,  \n" +
                "				 /*fun_getSalesOrderReleaseDetailLine(vuss.refSOReleaseLineID) salesRelease,*/  \n" +
                "                  sr.salesRelease as salesRelease,  \n" +
                "				`vuss`.`Sales Order` AS salesOrderNumber,  \n" +
                "				`vuss`.`Po Number` AS poNumber,  \n" +
                "				`vuss`.`Po Date` AS poDate,  \n" +
                "				`vuss`.`Customer ID` AS customerID,  \n" +
                "				`vuss`.`ContactPerson ID` AS contactPersonID,  \n" +
                "				`vuss`.`ShippingMethod ID` AS shippingMethodID,  \n" +
                "				`vuss`.`Sales Order Status` AS `status`,  \n" +
                "				`vuss`.`Revision` AS revision,  \n" +
                "				`vuss`.`Shipping Comment` AS shippingComment,  \n" +
                "				`vuss`.`Terms ID` AS termsID,  \n" +
                "				`vuss`.`So Date` AS soDate,  \n" +
                "				`vuss`.`Company Name` AS companyName,  \n" +
                "				`vuss`.`internalPO` AS internalPO,  \n" +
                "				`vuss`.`mfgCode` AS mfgCode,  \n" +
                "				`vuss`.`Full Name` AS fullName,  \n" +
                "				`vuss`.`GencCategory Code` AS genCategoryCode,  \n" +
                "				`vuss`.`PO Qty` AS qty,  \n" +
                "				vuss.assignQty as assignBlanketPOQty,  \n" +
                "				case when vuss.isBlanketPO=1 and vuss.blanketPOOption=2 then (`vuss`.`PO Qty`-ifnull(vuss.assignQty,0)) else null end openBlanketPOQty,  \n" +
                "				ifnull(`vuss`.`PO Qty`,0)*ifnull(`vuss`.`price`,0) as  extPriceDisplayValue,  \n" +
                "				ifnull(fun_getTotalSalesorderOtherCharges(vuss.salesOrderDetailId),0)+(ifnull(`vuss`.`PO Qty`,0)*ifnull(`vuss`.`price`,0)) as totalextPriceDisplayValue,  \n" +
                "				`vuss`.`mrpQty` AS mrpQty,  \n" +
                "				`vuss`.`custPOLineNumber` AS custPOLineNumber,  \n" +
                "				`vuss`.`kitQty` AS kitQty, \",  \n" +
                "				IF(pIsPendingWOCreationList = 1, \"\", \"`vuss`.`price` AS price,\"),  \n" +
                "				\"`vuss`.`materialTentitiveDocDate` AS materialTentitiveDocDate,  \n" +
                "				`vuss`.`materialDueDate` AS materialDueDate,  \n" +
                "				`vuss`.`prcNumberofWeek` AS prcNumberofWeek,  \n" +
                "				`vuss`.`shippingQty` AS shippingQty,  \n" +
                "				`vuss`.`remark` AS remark,  \n" +
                "				`vuss`.`Assy ID` AS PIDCode,  \n" +
                "				`vuss`.`Assy Name` AS mfgPN,  \n" +
                "				 vuss.poRevisionDate  As poRevisionDate,  \n" +
                "				 vuss.releaseLevelComment as releaseLevelComment,  \n" +
                "				`vuss`.`NickName` AS nickName,  \n" +
                "				`vuss`.`liveVersion` AS liveVersion,  \n" +
                "				`vuss`.`partDescription` AS partDescription,  \n" +
                "				`vuss`.`cancleReason` AS cancleReason,  \n" +
                "				vuss.blanketPOOption,  \n" +
                "				vuss.blanketPOOptionText,  \n" +
                "                \",  IF(pIsKitList = 0 AND pIsPendingWOCreationList=0, \"\", \"`vuss`.`Status` AS completedStatus,\"),  \"  \n" +
                "				/*`vuss`.`modifyDate` AS modifyDate,  */  \n" +
                "                 fun_ApplyCommonDateTimeFormatByParaValue(`vuss`.`modifyDate`,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') AS modifyDate,  \n" +
                "				/*`vuss`.`createdDate` AS createdDate,*/  \n" +
                "                 fun_ApplyCommonDateTimeFormatByParaValue(`vuss`.`createdDate`,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') AS createdDate,  \n" +
                "				`vuss`.`soModifiedBy` AS soModifiedBy,  \n" +
                "				`vuss`.`soCreatedBy` AS soCreatedBy,  \n" +
                "				`vuss`.`updatedbyRole` AS updatedbyRole,  \n" +
                "				`vuss`.`createdbyRole` AS createdbyRole,  \n" +
                "				(SELECT (SUM(qty)-`vuss`.`PO Qty`) FROM salesshippingmst ss WHERE sDetID=vuss.salesOrderDetailId AND ss.isdeleted=0) as pendingAssignQty,  \n" +
                "				vuss.isBlanketPO,  \n" +
                "				vuss.blanketPOText,  \n" +
                "				vuss.poRevision,  \n" +
                "				vuss.partType,  \n" +
                "				vuss.isCancle,  \n" +
                "				vuss.mfgcodeID,  \n" +
                "				vuss.manufacturerName,  \n" +
                "				`vuss`.`PartID` AS partID,  \n" +
                "				`vuss`.`isCustomPart` AS isCustomPart,  \n" +
                "				`vuss`.`kitNumber` AS kitNumber,  \n" +
                "				`vuss`.`serialNumber` AS serialNumber,  \n" +
                "				`vuss`.partCategory,  \n" +
                "				vuss.lineID,  \n" +
                "				vuss.internalCommentSo,  \n" +
                "				vuss.internalComment,  \n" +
                "				vuss.originalPODate,  \n" +
                "				vuss.isRmaPO,  \n" +
                "				vuss.rmaPOText,  \n" +
                "				vuss.isLegacyPO,  \n" +
                "				vuss.legacyPOText,  \n" +
                "				vuss.originalPOQty,  \n" +
                "				ifnull(`vuss`.`salesOrderDetStatus`,1) AS salesOrderDetStatus,  \n" +
                "				\",  IF(pIsKitList = 1, \"\", \"`vuss`.`Status` AS salesOrderDetStatusConvertedValues,\"),  \"  \n" +
                "				`vuss`.`isSkipKitCreation` AS isSkipKitCreation,  \n" +
                "				/*fun_getTotalSalesorderOtherCharges(vuss.salesOrderDetailId) otherChargesTotal,  */  \n" +
                "                ifnull(TotalSalesOrderOtherCharges,0) otherChargesTotal,  \n" +
                "				 (ifnull(fun_getTotalSalesorderOtherCharges(vuss.salesOrderDetailId),0) + (ifnull(`vuss`.`PO Qty`,0) * ifnull(`vuss`.`price`,0))) totalextPrice,  \n" +
                "				/*fun_CheckBuildFesibility(vuss.salesOrderDetailId,`vuss`.`PartID`) as isBuildWiseHotJob,*/  \n" +
                "                ifnull(p.ishotjob,0) as isBuildWiseHotJob ,  \n" +
                "				/*fun_getNextPlanShipDate(vuss.salesOrderDetailId) as nextShipDate,*/  \n" +
                "                p.nextShipDate as nextShipDate,  \n" +
                "				/*fun_getWorkorderNumberBySalesOrderID(vuss.salesOrderDetailId) workorders,*/  \n" +
                "                wo.WONumber as workorders,  \n" +
                "				/*fun_getWorkorderIdsBySalesOrderID(vuss.salesOrderDetailId) workorderIds,*/  \n" +
                "                wo.WOIds as workorderIds,  \n" +
                "				`vuss`.`wosalesOrderDetail` AS wosalesOrderDetail,  \n" +
                "				(  \n" +
                "					CASE  	WHEN (`vuss`.`Sales Order Status` = 0) THEN  \n" +
                "							'Draft'  \n" +
                "						WHEN (`vuss`.`Sales Order Status` = 1) THEN  \n" +
                "							'Published'  \n" +
                "						ELSE  \n" +
                "							''  \n" +
                "					END  \n" +
                "				) AS `statusConvertedValue`,  \n" +
                "				hutkit.refType as refTypeKA,  \n" +
                "				hutkit.status as haltStatusKA,  \n" +
                "				(  \n" +
                "					CASE  \n" +
                "						WHEN 	hutkit.status = 'H' THEN  \n" +
                "								CONCAT(hutkit.reason, ' - Halt by ',fun_getUserNameByEmployeID(hutkit.holdEmployeeId),' on ', DATE_FORMAT(hutkit.startDate,'%m/%d/%Y %H:%i:%S'))  \n" +
                "						ELSE 	''  \n" +
                "					END  \n" +
                "				) AS reasonKA,  \n" +
                "				ka.allocPerComponent AS `kitStatusPercentage`,  \n" +
                "				ka.allocPerWithSubAssy AS `subKitStatusPercentage`,  \n" +
                "				(  \n" +
                "				CASE  \n" +
                "					WHEN ((IFNULL(p.totalPlan, 0) = 0) OR (IFNULL(p.totalPlan, 0) > 0 AND (IFNULL(p.totalPOQty, 0) <> `vuss`.`PO Qty` OR IFNULL(p.totalKitQty, 0) <> `vuss`.`kitQty`))) THEN  \n" +
                "						TRUE  \n" +
                "					ELSE  \n" +
                "						FALSE  \n" +
                "				END  \n" +
                "				) as isKitPlanningRequired,  \n" +
                "				(  \n" +
                "					CASE  \n" +
                "						WHEN ifnull(p.totalPlan, 0) = 0 THEN  \n" +
                "							'Unplanned'  \n" +
                "						WHEN ifnull(p.totalPlan, 0) > 0  AND  (IFNULL(p.totalPOQty, 0) <> `vuss`.`PO Qty` OR IFNULL(p.totalKitQty, 0) <> `vuss`.`kitQty`) THEN  \n" +
                "							'Partially Planned'  \n" +
                "						WHEN ifnull(p.totalPlan, 0) > 0 AND  IFNULL(p.totalPOQty, 0) = `vuss`.`PO Qty` AND IFNULL(p.totalKitQty, 0) = `vuss`.`kitQty` THEN  \n" +
                "							'Fully Planned'  \n" +
                "						ELSE  \n" +
                "							NULL  \n" +
                "					END  \n" +
                "				) as kitPlanStatus,  \n" +
                "				/*(  \n" +
                "					CASE  \n" +
                "						WHEN 	ka.kitReturnStatus is null then  \n" +
                "							'N/A'  \n" +
                "						ELSE  \n" +
                "							ka.kitReturnStatus  \n" +
                "					END  \n" +
                "				) as kitReturnStatus,  */  \n" +
                "                fun_getKitReturnStatus(vrr.pendingReleaseCount,vrr.releasedNotReturnedCount,vrr.returnedCount,vrr.readyToreturnCount) as kitReturnStatus,  \n" +
                "				/*(  \n" +
                "					CASE  \n" +
                "						WHEN ka.kitReleaseStatus is null then  \n" +
                "							'Not Released'  \n" +
                "						else  \n" +
                "							ka.kitReleaseStatus  \n" +
                "					END  \n" +
                "				) as kitReleaseStatus,  */  \n" +
                "				fun_getKitReleaseStatus(ka.allocPerWithSubAssy,p.totalKitQty,p.totalPOQty,`vuss`.`kitQty`,`vuss`.`PO Qty`,p.releasedPlanCount,p.pendingCount) as  kitReleaseStatus,  \n" +
                "				`vuss`.`Shipped Qty` AS shippedQty,  \n" +
                "				(CASE WHEN ifnull(salesOrderDetStatus,1) =  2 AND internalPO = 1 THEN 100  \n" +
                "					ELSE ROUND(((`vuss`.`Shipped Qty` * 100) / `vuss`.`PO Qty`),2) END ) AS  soCompletionPercentage,  \n" +
                "				p.nextReleaseDate,  \n" +
                "				CONCAT(ka.shortageLine,'/', ka.totalLine) AS shortageLines,  \n" +
                "				p.releasedPlanCount totalkitRelease,  \n" +
                "				ifnull(p.totalPlan, 0) kitReleasePlanCount ,  \n" +
                "				IFNULL(p.totalPOQty, 0) totalPOQty,  \n" +
                "				IFNULL(p.totalKitQty, 0) totalKitQty,  \n" +
                "				fun_getGenericCategoryNameByID(`vuss`.`Terms ID`) AS termsDisplayText,  \n" +
                "				vuss.releasedWorkorder,  \n" +
                "                ka.shortagePer,  \n" +
                "				DATEDIFF(p.nextReleaseDate, fun_DatetimetoUTCDateTime()) AS releaseDayDiffwithCurrentDate ,  \n" +
                "                 (case when vuss.partCategory = 3 and vuss.isSkipKitCreation = 1 then 0  \n" +
                "					 when vuss.partCategory <> 3 then 0  \n" +
                "                     else 1 end) isKitPlanAllowed,  \n" +
                "				vuss.releasedWorkorderNmberAndId , astk.initialStockCount ,  \n" +
                "				vuss.rmaNumber,vuss.isDebitedByCustomer, vuss.debitedByCustText,  \n" +
                "				vuss.rmaOrgPONumber,vuss.orgSalesOrderID,vuss.isReworkRequired,  \n" +
                "				vuss.reworkReqText, vuss.reworkPONumber,vuss.custOrgPOLineNumber \",v_DynamicColumns,  \n" +
                "		\" FROM   		vu_salesorder_updatedlist_report vuss \",v_DynamicJoin,\"  \n" +
                "		  Left Join (SELECT s.id, CONCAT(c.pidcode,CASE WHEN s.custPOLineNumber IS NOT NULL THEN ' | ' ELSE '' END,s.custPOLineNumber) salesAssy  \n" +
                "					FROM  salesorderdet s inner join component c ON s.partID =c.id  \n" +
                "					WHERE  s.isdeleted=0 and c.parttype in (3,2)) as sa on sa.id = vuss.refSODetID  \n" +
                "	    Left Join (select shippingid,Sdetid, qty,  CONCAT(releaseNumber,' | ',qty,' | ',DATE_FORMAT(IFNULL(requestedDockDate,shippingDate),\",'''%m/%d/%y''',\")) salesRelease  \n" +
                "					FROM salesshippingmst  b where isdeleted = 0 ) as sr on sr.shippingid = vuss.refSOReleaseLineID  \n" +
                "	   Left Join (SELECT refSalesOrderDetID, IFNULL(SUM(qty*price),0) TotalSalesOrderOtherCharges  \n" +
                "					FROM salesorder_otherexpense_details where isdeleted = 0  \n" +
                "					group by refSalesOrderDetID ) as so on so.refSalesOrderDetID = vuss.salesOrderDetailId  \n" +
                "	   Left Join (SELECT wsd.salesOrderDetailID, GROUP_CONCAT(DISTINCT w.woID) WOIds  ,GROUP_CONCAT(DISTINCT w.woNumber) WONumber  \n" +
                "					FROM workorder w JOIN workorder_salesorder_details wsd  \n" +
                "					ON wsd.woID=w.woID WHERE   wsd.isdeleted=0  \n" +
                "					group by wsd.salesOrderDetailID ) as wo on wo.salesOrderDetailID = vuss.salesOrderDetailId  \n" +
                "        LEFT JOIN  	(  \n" +
                "					SELECT  salesOrderDetID,  \n" +
                "							refAssyId,  \n" +
                "                         max(case when DATE(CURRENT_TIMESTAMP)>kitReleaseDate  and  kitStatus!='R' then 1 else 0 end )  as ishotjob,  \n" +
                "                         MIN(case when kitStatus!='R' then kitReleaseDate else null end ) nextShipDate,  \n" +
                "                         MIN(CASE WHEN kitStatus = 'P' THEN kitReleaseDate ELSE null END) nextReleaseDate ,  \n" +
                "						count(1) totalPlan,  \n" +
                "						SUM(poQty) totalPOQty,  \n" +
                "						SUM(kitReleaseQty) totalKitQty,  \n" +
                "						SUM(CASE WHEN kitStatus = 'R' THEN 1 ELSE 0 END) releasedPlanCount,  \n" +
                "						SUM(CASE WHEN kitStatus ='P' THEN 1 ELSE 0 END) pendingCount  \n" +
                "					FROM 	salesorder_plan_detailsmst  \n" +
                "					WHERE 	isDeleted = 0  \n" +
                "					AND 	subAssyID is null  \n" +
                "					GROUP BY salesOrderDetID, refAssyId  \n" +
                "				) AS p on p.salesOrderDetID = `vuss`.`salesOrderDetailId` and p.refAssyId = `vuss`.`PartID`  \n" +
                "		LEFT JOIN (  \n" +
                "				SELECT	salesOrderDetID,  \n" +
                "						refAssyId,  \n" +
                "						SUM(CASE WHEN kitReturnStatus ='NA' THEN 1 ELSE 0 END) pendingReleaseCount,  \n" +
                "						SUM(CASE WHEN kitReturnStatus ='NR' THEN 1 ELSE 0 END) releasedNotReturnedCount,  \n" +
                "						SUM(CASE WHEN kitReturnStatus ='R' THEN 1 ELSE 0 END) returnedCount,  \n" +
                "						SUM(CASE WHEN kitReturnStatus ='RR' THEN 1 ELSE 0 END) readyToreturnCount  \n" +
                "				FROM 	vu_release_plan_release_return_status_det  \n" +
                "                GROUP BY salesOrderDetID, refAssyId  \n" +
                "        ) AS vrr ON  vrr.salesOrderDetID = vuss.salesOrderDetailId and vrr.refAssyId = `vuss`.`PartID`  \n" +
                "		LEFT JOIN 	(  \n" +
                "						SELECT 	`k`.`refSalesOrderDetID` AS `refSalesOrderDetID`,  \n" +
                "						`k`.`assyID` AS `assyID`,  \n" +
                "						(`k`.`totalLine` - `k`.`totalNotRequireLine`) AS `totalLine`,  \n" +
                "						`k`.`shortageLine` AS `shortageLine`,  \n" +
                "						allocPermainAssy allocPerComponent,  \n" +
                "						`k`.`allocPerWithSubAssy` AS `allocPerWithSubAssy`,  \n" +
                "						Round((k.shortageLine/k.totalLine)*100) AS `shortagePer`/*,  \n" +
                "						fun_getKitReleaseStatus(k.refSalesOrderDetID, NULL, k.assyID, k.allocPerWithSubAssy, true) AS `kitReleaseStatus`,  \n" +
                "						fun_getKitReturnStatus(k.refSalesOrderDetID, k.assyID, k.assyID, true) AS `kitReturnStatus`*/  \n" +
                "						FROM (  \n" +
                "							SELECT  `k`.`refSalesOrderDetID` AS `refSalesOrderDetID`,  \n" +
                "								mainAssy AS `assyID`,  \n" +
                "								COUNT(1) AS `totalLine`,  \n" +
                "								SUM(CASE WHEN isNotRequiredKitAllocation = 1 THEN 1 ELSE 0 END) AS `totalNotRequireLine`,  \n" +
                "								 SUM((CASE WHEN (`k`.`shortage` > 0) THEN 1 ELSE 0 END)) AS `shortageLine_old`,  \n" +
                "								sum( k.shortageline) shortageline,  \n" +
                "								ROUND(SUM(CASE WHEN ((k.qpaWithDnp != 0 AND k.allocationPer > 100) OR k.isNotRequiredKitAllocation = 1) THEN 100 ELSE ROUND(IFNULL(k.allocationPer, 0), 2) END) / SUM(CASE WHEN k.qpaWithDnp != 0 THEN 1 ELSE 0 END), 2) AS `allocPerWithSubAssy`,  \n" +
                "								ROUND(SUM(CASE WHEN ((k.qpaWithDnp != 0 AND k.allocatedPercePerLine > 100) OR k.isNotRequiredKitAllocation = 1) THEN 100 ELSE ROUND((CASE WHEN k.qpaWithDnp != 0 THEN IFNULL(k.allocatedPercePerLine, 0) ELSE 0 END), 2) END) / SUM(CASE WHEN k.qpaWithDnp != 0 THEN MainAssyLine ELSE 0 END), 2) AS `allocPermainAssy`  \n" +
                "							  FROM (  \n" +
                "  \n" +
                "									SELECT  vk.`refSalesorderdetid` AS `refSalesOrderDetID`,  \n" +
                "										vk.`assyID` AS `assyID`,   sd.partid mainAssy,   vk.qpaWithDnp,  \n" +
                "										IFNULL(((100 *  (CASE WHEN vk.connecterTypeID = -2 THEN IFNULL(vk.`allocatedpin`, 0) ELSE IFNULL(vk.`allocatedunit`, 0) END)) / (vk.`totalAssyBuildQty` * IFNULL(vk.`qpaWithDnp`, 0))), 0) AS `allocationPer`,  \n" +
                "										(case when vk.assyid = sd.partid then 1 else 0 end) MainAssyLine,  \n" +
                "										(case when vk.assyid = sd.partid then    vk.allocationPercPerLine   else 0 end)  allocatedPercePerLine,  \n" +
                "										(CASE WHEN vk.connecterTypeID = -2 THEN vk.`shortagePins` ELSE vk.`shortage` END)  AS `shortage`,  \n" +
                "										(CASE WHEN vk.connecterTypeID = -2 THEN vk.`shortagelinePins` ELSE vk.`shortageline` END) AS shortageline,  \n" +
                "										vk.`isNotRequiredKitAllocation` AS `isNotRequiredKitAllocation`  \n" +
                "									FROM  	`vu_kit_allocation_detail` vk  \n" +
                "									Inner join    salesorderdet sd on vk.refSalesorderdetid  = sd.id  \n" +
                "									WHERE    vk.`isNotRequiredKitAllocation` != 1  \n" +
                "								) `k`  \n" +
                "							GROUP BY `k`.`refSalesOrderDetID`,mainAssy  \n" +
                "						) `k`  \n" +
                "					) as ka on ka.refSalesOrderDetID = `vuss`.`salesOrderDetailId` and ka.assyID =  `vuss`.`PartID`  \n" +
                "			LEFT JOIN  	rfq_rohsmst ro ON `vuss`.`RoHSStatusID` = ro.id AND ro.isDeleted = 0  \n" +
                "			LEFT JOIN 	holdunholdtrans hutkit ON vuss.salesOrderDetailId = hutkit.refTransId and hutkit.id = (SELECT MAX(htk.id) FROM holdunholdtrans htk WHERE hutkit.refTransId = htk.refTransId and htk.refType='KA' and htk.isDeleted=0)  \n" +
                "            LEFT JOIN (Select ass.refSalesOrderDetID, ass.refSalesOrderID, ass.partID , count(1) as initialStockCount  \n" +
                "							from assemblystock ass where ass.isDeleted =0 and ass.type='OS'  \n" +
                "                            Group by ass.refSalesOrderDetID, ass.refSalesOrderID , ass.partID )  AS astk  \n" +
                "						ON astk.refSalesOrderDetID = vuss.`SalesOrderDetailId` and astk.refSalesOrderID = vuss.`Sales Order ID` and astk.partID = vuss.partID  \n" +
                "		) AS a  \n" +
                "    \");  \n" +
                "    IF(pIsKitList = 1) THEN  \n" +
                "		SET pOrderBy = CONCAT(\"(nextReleaseDate IS NULL),  nextReleaseDate ASC,  \" , pOrderBy);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pOrderBy IS NOT NULL) THEN  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY salesOrderNumber DESC\") ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = '1=1' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pCustomPendingWOCreationWhereClause IS NOT NULL OR pCustomPendingWOCreationWhereClause != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, \" AND \", pCustomPendingWOCreationWhereClause);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pfilterStatus IS NOT NULL AND pfilterStatus != '') THEN  \n" +
                "		IF(pIsKitList = 1 OR pIsPendingWOCreationList=1)THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause, ' AND FIND_IN_SET(completedStatus,''', pfilterStatus ,''')');  \n" +
                "		ELSE  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause, ' AND  FIND_IN_SET(salesOrderDetStatusConvertedValues,''', pfilterStatus ,''')');  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "    IF(pfilterPOStatus IS NOT NULL AND pfilterPOStatus != '') THEN  \n" +
                "          			SET pWhereClause = CONCAT(pWhereClause, ' AND  FIND_IN_SET(statusConvertedValue,''', pfilterPOStatus ,''')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pcustomerIds IS NOT NULL AND pcustomerIds != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND customerID in (',pcustomerIds,')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pshippingMethodId IS NOT NULL AND pshippingMethodId != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND shippingMethodID in (',pshippingMethodId,')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(ptermsIds IS NOT NULL AND ptermsIds != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND termsID in (',ptermsIds,')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(psearchposotype IS NOT NULL AND psearchposotext IS NOT NULL)THEN  \n" +
                "	  IF(psearchposotype='C')THEN  \n" +
                "             SET pWhereClause = CONCAT(pWhereClause, ' AND (salesOrderNumber  like ''%',psearchposotext,'%'' OR poNumber  like ''%',psearchposotext,'%'' OR rmaNumber  like ''%',psearchposotext,'%'')');  \n" +
                "          ELSE  \n" +
                "             SET pWhereClause= CONCAT(pWhereClause,' and (salesOrderNumber  =''',psearchposotext,''' OR poNumber  =''',psearchposotext,''' OR rmaNumber  =''',psearchposotext,''')');  \n" +
                "          END IF;  \n" +
                "	 END IF;  \n" +
                "    IF(psearchextPricetype IS NOT NULL AND psearchextPricetext IS NOT NULL)THEN  \n" +
                "	  IF(psearchextPricetype='C')THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause, ' AND (totalextPrice  like ''%',psearchextPricetext,'%'')');  \n" +
                "		ELSE  \n" +
                "			SET pWhereClause= CONCAT(pWhereClause,' and (totalextPrice  =''',psearchextPricetext,''')');  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(prushJob = 1) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND isHotJob = 1');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pworkorders IS NOT NULL)THEN  \n" +
                "		SET pworkorders=REPLACE(pworkorders,',','|');  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND (releasedWorkorder REGEXP (''',pworkorders,''') OR workOrders REGEXP (''',pworkorders,'''))');  \n" +
                "	END IF;  \n" +
                "	IF(ppartIds IS NOT NULL)THEN  \n" +
                "		SET pWhereClause= CONCAT(pWhereClause,' and (partID in (',ppartIds,'))');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pkitreturnStatus IS NOT NULL)THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND FIND_IN_SET(kitReturnStatus,''', pkitreturnStatus ,''')');  \n" +
                "	END IF;  \n" +
                "	IF(pkitReleaseStatus IS NOT NULL)THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND FIND_IN_SET(kitReleaseStatus,''', pkitReleaseStatus ,''')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pIsRmaPO = 1) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND isRmaPO = 1');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	-- from date to date filter  \n" +
                "	IF(pfromDate IS NOT NULL AND ptoDate IS NOT NULL)THEN  \n" +
                "		SET pWhereClause=CONCAT(pWhereClause, ' and (soDate>=''',pfromDate,''' and soDate<=''',ptoDate,''')');  \n" +
                "	ELSEIF(pfromDate IS NOT NULL)THEN  \n" +
                "       SET pWhereClause=CONCAT(pWhereClause, ' and (soDate>=''',pfromDate,''')');  \n" +
                "       ELSEIF(ptoDate IS NOT NULL)THEN  \n" +
                "       SET pWhereClause=CONCAT(pWhereClause, ' and (soDate<=''',ptoDate,''')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pfromPODate IS NOT NULL AND ptoPODate IS NOT NULL)THEN  \n" +
                "		SET pWhereClause=CONCAT(pWhereClause, ' and (poDate>=''',pfromPODate,''' and poDate<=''',ptoPODate,''')');  \n" +
                "	ELSEIF(pfromPODate IS NOT NULL)THEN  \n" +
                "       SET pWhereClause=CONCAT(pWhereClause, ' and (poDate>=''',pfromPODate,''')');  \n" +
                "	ELSEIF(ptoPODate IS NOT NULL)THEN  \n" +
                "       SET pWhereClause=CONCAT(pWhereClause, ' and (poDate<=''',ptoPODate,''')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF pIsPendingCustPackingSlipList = 1 THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause , v_PendingCustPackingWhereClause);  \n" +
                "    END IF;  \n" +
                "  \n" +
                "  	IF(pIsKitList = 1) THEN  \n" +
                "  		SET pWhereClause = CONCAT(pWhereClause , \" AND  (isSkipKitCreation = 0 OR isSkipKitCreation IS NULL) and kitNumber is not null\");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pPlannedStatus IS NOT NULL OR pPlannedStatus != '') THEN  \n" +
                "		SET v_PlannedWhere = ' AND  (1 = 1 AND';  \n" +
                "		IF (pPlannedStatus LIKE '%U%') THEN  \n" +
                "			SET v_PlannedWhere = CONCAT(v_PlannedWhere, \" (kitReleasePlanCount = 0 )OR \");  \n" +
                "		END IF;  \n" +
                "		IF (pPlannedStatus LIKE '%P%') THEN  \n" +
                "			SET v_PlannedWhere = CONCAT(v_PlannedWhere, \" (kitReleasePlanCount > 0 AND (totalPOQty <> qty OR totalKitQty <> kitQty)) OR \");  \n" +
                "		END IF;  \n" +
                "		IF (pPlannedStatus LIKE '%F%') THEN  \n" +
                "			SET v_PlannedWhere = CONCAT(v_PlannedWhere, \" (kitReleasePlanCount > 0 AND totalPOQty = qty AND totalKitQty = kitQty ) OR \");  \n" +
                "		END IF;  \n" +
                "        SET v_PlannedWhere = CONCAT(v_PlannedWhere, ' 1 = 0)');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pSalesOrderDetailId != 0) THEN  \n" +
                "		SET v_SalesOrderDetailWhere = CONCAT(\" AND salesOrderDetailId = \", pSalesOrderDetailId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/* to get total count of rows */  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord FROM ( \",@temp_Sproc_GetSalesorderList,\" ) c WHERE 1=1 AND \", pWhereClause, v_PendingWOWhereClause, IFNULL(v_PlannedWhere, '') , IFNULL(v_SalesOrderDetailWhere, ''));  \n" +
                "   PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"SELECT * FROM ( \", @temp_Sproc_GetSalesorderList,\" ) c  WHERE \", pWhereClause, v_PendingWOWhereClause, IFNULL(v_PlannedWhere, '') , IFNULL(v_SalesOrderDetailWhere, '') , \" \" , pOrderBy , rowNumWhere);  \n" +
                "    PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "	IF pIsKitList = 1 THEN  \n" +
                "		SET @SQLStatement3 = CONCAT(\" SELECT sum(Unplanned) UnPlannedCount ,sum(PartiallyPlanned) PartiallyPlannedCount  FROM ( \",@temp_Sproc_GetSalesorderList,\" ) c WHERE 1=1  AND \", pWhereClause, v_PendingWOWhereClause);  \n" +
                "		PREPARE query3 FROM @SQLStatement3;  \n" +
                "		EXECUTE query3;  \n" +
                "		DEALLOCATE PREPARE query3;  \n" +
                "    END IF;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 06-01-2022  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1272,'1.00','V1',' - Shweta '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1272:
            allDbChangesArray.push(
                /* **************************** New Script -> 12-01-2022  *********************************** */
                "ALTER TABLE salesordermst ADD COLUMN linkToBlanketPO TINYINT DEFAULT 0;  \n" +
                "ALTER TABLE salesorderdet ADD COLUMN requestedBPOStartDate DATE, ADD COLUMN blanketPOEndDate DATE;  \n" +
                /* **************************** Add Script Version ->  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1273,'1.00','V1',' Blanket PO Detail-CC '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1273:
            allDbChangesArray.push(
                /* **************************** New Script -> 12-01-2022  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_getBlanketPOUsedQty` ;  \n" +
                "CREATE PROCEDURE `Sproc_getBlanketPOUsedQty`(  \n" +
                "pSdetID INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	         SELECT  \n" +
                "	          CASE WHEN sd.qty>sdbp.qty THEN sdbp.qty ELSE sd.qty END qty,  \n" +
                "	          sm.id,  \n" +
                "	          sm.salesOrderNumber,  \n" +
                "	          sm.poNumber,  \n" +
                "	          sm.revision,  \n" +
                "	          sm.poRevision,  \n" +
                "	          sd.custPOLineNumber,  \n" +
                "	          sd.id AS soDetID  \n" +
                "  \n" +
                "	          FROM salesorderdet sd JOIN salesordermst sm ON sm.id= sd.refsalesOrderID  \n" +
                "	          LEFT JOIN salesorderdet sdbp ON sdbp.id=sd.refBlanketPOID AND sdbp.isdeleted=0  \n" +
                "	          WHERE sd.refBlanketPOID=pSdetID AND sd.isdeleted=0;  \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version ->  *********************************** */
                "DROP VIEW IF EXISTS `vu_salesorder_updatedlist_report` ;  \n" +
                "CREATE VIEW `vu_salesorder_updatedlist_report` AS  \n" +
                "    SELECT  \n" +
                "        `a`.`wosalesOrderDetail` AS `wosalesOrderDetail`,  \n" +
                "        `a`.`salesOrderId` AS `Sales Order ID`,  \n" +
                "        `a`.`salesOrderNumber` AS `Sales Order`,  \n" +
                "        `a`.`poNumber` AS `Po Number`,  \n" +
                "        `a`.`poDate` AS `Po Date`,  \n" +
                "        `a`.`customerID` AS `Customer ID`,  \n" +
                "        `a`.`contactPersonID` AS `ContactPerson ID`,  \n" +
                "        `a`.`shippingMethodID` AS `ShippingMethod ID`,  \n" +
                "        `a`.`status` AS `Sales Order Status`,  \n" +
                "        `a`.`revision` AS `Revision`,  \n" +
                "        `a`.`shippingComment` AS `Shipping Comment`,  \n" +
                "        `a`.`termsID` AS `Terms ID`,  \n" +
                "        `a`.`soDate` AS `So Date`,  \n" +
                "        `a`.`partID` AS `PartID`,  \n" +
                "        `a`.`PIDCode` AS `Assy ID`,  \n" +
                "        `a`.`mfgPN` AS `Assy Name`,  \n" +
                "        `a`.`rev` AS `Assy Revision`,  \n" +
                "        `a`.`nickName` AS `NickName`,  \n" +
                "        `a`.`liveVersion` AS `liveVersion`,  \n" +
                "        `a`.`mfgPNDescription` AS `AssyDescr`,  \n" +
                "        `a`.`isCustomPart` AS `isCustomPart`,  \n" +
                "        `a`.`qty` AS `PO Qty`,  \n" +
                "        `a`.`ShippedQty` AS `Shipped Qty`,  \n" +
                "        `a`.`shippingQty` AS `shippingQty`,  \n" +
                "        `a`.`companyName` AS `Company Name`,  \n" +
                "        `a`.`internalPO` AS `internalPO`,  \n" +
                "        `a`.`mfgCode` AS `mfgCode`,  \n" +
                "        `a`.`fullName` AS `Full Name`,  \n" +
                "        `a`.`gencCategoryCode` AS `GencCategory Code`,  \n" +
                "        `a`.`isCancle` AS `isCancle`,  \n" +
                "        `a`.`cancleReason` AS `cancleReason`,  \n" +
                "        `a`.`materialTentitiveDocDate` AS `materialTentitiveDocDate`,  \n" +
                "        `a`.`materialDueDate` AS `materialDueDate`,  \n" +
                "        `a`.`shippingDate` AS `shippingDate`,  \n" +
                "        `a`.`prcNumberofWeek` AS `prcNumberofWeek`,  \n" +
                "        `a`.`remark` AS `remark`,  \n" +
                "        `a`.`price` AS `price`,  \n" +
                "        `a`.`mrpQty` AS `mrpQty`,  \n" +
                "        `a`.`kitQty` AS `kitQty`,  \n" +
                "        `a`.`isHotJob` AS `isHotJob`,  \n" +
                "        `a`.`RoHSStatusID` AS `RoHSStatusID`,  \n" +
                "        `a`.`RoHSName` AS `RoHSName`,  \n" +
                "        `a`.`rohsIcon` AS `RohsIcon`,  \n" +
                "        `a`.`lineID` AS `lineID`,  \n" +
                "        `a`.`mfgcodeID` AS `mfgcodeID`,  \n" +
                "        `a`.`manufacturerName` AS `manufacturerName`,  \n" +
                "        (IFNULL(`a`.`qty`, 0) - IFNULL(`a`.`ShippedQty`, 0)) AS `Balanced Due Qty`,  \n" +
                "        (CASE  \n" +
                "            WHEN (`a`.`isCancle` = 1) THEN 'Canceled'  \n" +
                "            WHEN (`a`.`salesOrderDetStatus` = 2) THEN 'Completed'  \n" +
                "            ELSE 'In Progress'  \n" +
                "        END) AS `Status`,  \n" +
                "        `a`.`modifyDate` AS `modifyDate`,  \n" +
                "        `a`.`createdDate` AS `createdDate`,  \n" +
                "        `a`.`soModifiedBy` AS `soModifiedBy`,  \n" +
                "        `a`.`soCreatedBy` AS `soCreatedBy`,  \n" +
                "        `a`.`updatedbyRole` AS `updatedbyRole`,  \n" +
                "        `a`.`createdbyRole` AS `createdbyRole`,  \n" +
                "        `a`.`deletedbyRole` AS `deletedbyRole`,  \n" +
                "        `a`.`salesOrderDetailId` AS `SalesOrderDetailId`,  \n" +
                "        `a`.`releasedWorkorder` AS `releasedWorkorder`,  \n" +
                "        `a`.`releasedWorkorderNmberAndId` AS `releasedWorkorderNmberAndId`,  \n" +
                "        `a`.`kitnumber` AS `kitnumber`,  \n" +
                "        `a`.`isSkipKitCreation` AS `isSkipKitCreation`,  \n" +
                "        `a`.`partDescription` AS `partDescription`,  \n" +
                "        `a`.`custPOLineNumber` AS `custPOLineNumber`,  \n" +
                "        `a`.`freeOnBoardId` AS `Free On Board`,  \n" +
                "        `a`.`intermediateShipmentId` AS `intermediateShipmentId`,  \n" +
                "        `a`.`billingAddressID` AS `billingAddressID`,  \n" +
                "        `a`.`shippingAddressID` AS `shippingAddressID`,  \n" +
                "        `a`.`internalCommentSo` AS `internalCommentSo`,  \n" +
                "        `a`.`internalComment` AS `internalComment`,  \n" +
                "        `a`.`partCategory` AS `partCategory`,  \n" +
                "        `a`.`serialNumber` AS `serialNumber`,  \n" +
                "        `a`.`isBlanketPO` AS `isBlanketPO`,  \n" +
                "        `a`.`blanketPOText` AS `blanketPOText`,  \n" +
                "        `a`.`rmaNumber` AS `rmaNumber`,  \n" +
                "        `a`.`isDebitedByCustomer` AS `isDebitedByCustomer`,  \n" +
                "        `a`.`debitedByCustText` AS `debitedByCustText`,  \n" +
                "        `a`.`rmaOrgPONumber` AS `rmaOrgPONumber`,  \n" +
                "        `a`.`orgSalesOrderID` AS `orgSalesOrderID`,  \n" +
                "        `a`.`isReworkRequired` AS `isReworkRequired`,  \n" +
                "        `a`.`reworkReqText` AS `reworkReqText`,  \n" +
                "        `a`.`reworkPONumber` AS `reworkPONumber`,  \n" +
                "        `a`.`poRevision` AS `poRevision`,  \n" +
                "        `a`.`partType` AS `partType`,  \n" +
                "        (CASE  \n" +
                "            WHEN (`a`.`isCancle` = 1) THEN -(1)  \n" +
                "            ELSE `a`.`salesOrderDetStatus`  \n" +
                "        END) AS `salesOrderDetStatus`,  \n" +
                "        `a`.`completeStatusReason` AS `completeStatusReason`,  \n" +
                "        `a`.`frequency` AS `frequency`,  \n" +
                "        `a`.`refSODetID` AS `refSODetID`,  \n" +
                "        `a`.`refSOReleaseLineID` AS `refSOReleaseLineID`,  \n" +
                "        `a`.`originalPODate` AS `originalPODate`,  \n" +
                "        `a`.`isRmaPO` AS `isRmaPO`,  \n" +
                "        `a`.`rmaPOText` AS `rmaPOText`,  \n" +
                "        `a`.`isLegacyPO` AS `isLegacyPO`,  \n" +
                "        `a`.`legacyPOText` AS `legacyPOText`,  \n" +
                "        `a`.`originalPOQty` AS `originalPOQty`,  \n" +
                "        `a`.`frequencyType` AS `frequencyType`,  \n" +
                "        `a`.`assignQty` AS `assignQty`,  \n" +
                "        `a`.`poRevisionDate` AS `poRevisionDate`,  \n" +
                "        `a`.`releaseLevelComment` AS `releaseLevelComment`,  \n" +
                "        `a`.`custOrgPOLineNumber` AS `custOrgPOLineNumber`,  \n" +
                "        `a`.`blanketPOOption` AS `blanketPOOption`,  \n" +
                "        `a`.`blanketPOOptionText` AS `blanketPOOptionText`,  \n" +
                "        `a`.`requestedBPOStartDate` AS `requestedBPOStartDate`,  \n" +
                "        `a`.`blanketPOEndDate` AS `blanketPOEndDate`,  \n" +
                "        `a`.`linkToBlanketPO` AS `linkToBlanketPO`,  \n" +
                "        `a`.`linkToBlanketPOText` AS `linkToBlanketPOText`,  \n" +
                "        `a`.`mfgName` AS `mfgName`  \n" +
                "    FROM  \n" +
                "        (SELECT  \n" +
                "            `sm`.`id` AS `salesOrderId`,  \n" +
                "                `sm`.`salesOrderNumber` AS `salesOrderNumber`,  \n" +
                "                `sm`.`poNumber` AS `poNumber`,  \n" +
                "                `sm`.`poDate` AS `poDate`,  \n" +
                "                `sm`.`customerID` AS `customerID`,  \n" +
                "                `sm`.`contactPersonID` AS `contactPersonID`,  \n" +
                "                `sm`.`shippingMethodID` AS `shippingMethodID`,  \n" +
                "                `sm`.`status` AS `status`,  \n" +
                "                `sm`.`revision` AS `revision`,  \n" +
                "                `sm`.`shippingComment` AS `shippingComment`,  \n" +
                "                `sm`.`termsID` AS `termsID`,  \n" +
                "                `sm`.`soDate` AS `soDate`,  \n" +
                "                `sm`.`billingAddressID` AS `billingAddressID`,  \n" +
                "                `sm`.`shippingAddressID` AS `shippingAddressID`,  \n" +
                "                `sm`.`freeOnBoardId` AS `freeOnBoardId`,  \n" +
                "                `sm`.`intermediateShipmentId` AS `intermediateShipmentId`,  \n" +
                "                `sm`.`internalComment` AS `internalCommentSo`,  \n" +
                "                `sm`.`serialNumber` AS `serialNumber`,  \n" +
                "                `sm`.`isBlanketPO` AS `isBlanketPO`,  \n" +
                "                `sm`.`rmaNumber` AS `rmaNumber`,  \n" +
                "                `sm`.`isDebitedByCustomer` AS `isDebitedByCustomer`,  \n" +
                "                (CASE  \n" +
                "                    WHEN (`sm`.`isDebitedByCustomer` = 1) THEN 'Yes'  \n" +
                "                    ELSE 'No'  \n" +
                "                END) AS `debitedByCustText`,  \n" +
                "                `sm`.`orgPONumber` AS `rmaOrgPONumber`,  \n" +
                "                `sm`.`orgSalesOrderID` AS `orgSalesOrderID`,  \n" +
                "                `sm`.`isReworkRequired` AS `isReworkRequired`,  \n" +
                "                (CASE  \n" +
                "                    WHEN (`sm`.`isReworkRequired` = 1) THEN 'Yes'  \n" +
                "                    ELSE 'No'  \n" +
                "                END) AS `reworkReqText`,  \n" +
                "                `sm`.`reworkPONumber` AS `reworkPONumber`,  \n" +
                "                (CASE  \n" +
                "                    WHEN (`sm`.`isBlanketPO` = 1) THEN 'Yes'  \n" +
                "                    ELSE 'No'  \n" +
                "                END) AS `blanketPOText`,  \n" +
                "                `sm`.`poRevision` AS `poRevision`,  \n" +
                "                FUN_GETUSERNAMEBYID(`sm`.`updatedBy`) AS `soModifiedBy`,  \n" +
                "                FUN_GETUSERNAMEBYID(`sm`.`createdBy`) AS `soCreatedBy`,  \n" +
                "                FUN_GETROLEBYID(`sm`.`updateByRoleId`) AS `updatedbyRole`,  \n" +
                "                FUN_GETROLEBYID(`sm`.`createByRoleId`) AS `createdbyRole`,  \n" +
                "                FUN_GETROLEBYID(`sm`.`deleteByRoleId`) AS `deletedbyRole`,  \n" +
                "                `sm`.`createdAt` AS `createdDate`,  \n" +
                "                `sm`.`updatedAt` AS `modifyDate`,  \n" +
                "                `co`.`PIDCode` AS `PIDCode`,  \n" +
                "                `co`.`mfgPN` AS `mfgPN`,  \n" +
                "                `co`.`rev` AS `rev`,  \n" +
                "                `co`.`nickName` AS `nickName`,  \n" +
                "                `co`.`liveVersion` AS `liveVersion`,  \n" +
                "                `co`.`mfgPNDescription` AS `mfgPNDescription`,  \n" +
                "                `co`.`isCustom` AS `isCustomPart`,  \n" +
                "                `co`.`partType` AS `partType`,  \n" +
                "                `co`.`mfgcodeID` AS `mfgcodeID`,  \n" +
                "                CONCAT('(', `cu`.`mfgCode`, ') ', `cu`.`mfgName`) AS `companyName`,  \n" +
                "                `cu`.`mfgCode` AS `mfgCode`,  \n" +
                "                `cu`.`mfgName` AS `mfgName`,  \n" +
                "                `cu`.`isCompany` AS `internalPO`,  \n" +
                "                `mg`.`mfgName` AS `manufacturerName`,  \n" +
                "                CONCAT(`cc`.`firstName`, ' ', `cc`.`lastName`) AS `fullName`,  \n" +
                "                `gc`.`gencCategoryCode` AS `gencCategoryCode`,  \n" +
                "                `co`.`RoHSStatusID` AS `RoHSStatusID`,  \n" +
                "                `roh`.`name` AS `RoHSName`,  \n" +
                "                `roh`.`rohsIcon` AS `rohsIcon`,  \n" +
                "                `a`.`qty` AS `qty`,  \n" +
                "                `a`.`id` AS `salesOrderDetailId`,  \n" +
                "                `a`.`kitNumber` AS `kitnumber`,  \n" +
                "                `a`.`isSkipKitCreation` AS `isSkipKitCreation`,  \n" +
                "                `a`.`partDescription` AS `partDescription`,  \n" +
                "                `a`.`partID` AS `partID`,  \n" +
                "                `a`.`isCancle` AS `isCancle`,  \n" +
                "                `a`.`isHotJob` AS `isHotJob`,  \n" +
                "                `a`.`cancleReason` AS `cancleReason`,  \n" +
                "                `a`.`materialTentitiveDocDate` AS `materialTentitiveDocDate`,  \n" +
                "                `sh`.`shippingDate` AS `shippingDate`,  \n" +
                "                `wsd`.`wosalesOrderDetail` AS `wosalesOrderDetail`,  \n" +
                "                `a`.`materialDueDate` AS `materialDueDate`,  \n" +
                "                `a`.`prcNumberofWeek` AS `prcNumberofWeek`,  \n" +
                "                `a`.`remark` AS `remark`,  \n" +
                "                `a`.`price` AS `price`,  \n" +
                "                `a`.`mrpQty` AS `mrpQty`,  \n" +
                "                `a`.`kitQty` AS `kitQty`,  \n" +
                "                `a`.`shippingQty` AS `shippingQty`,  \n" +
                "                `a`.`custPOLineNumber` AS `custPOLineNumber`,  \n" +
                "                `a`.`salesOrderDetStatus` AS `salesOrderDetStatus`,  \n" +
                "                `a`.`completeStatusReason` AS `completeStatusReason`,  \n" +
                "                `a`.`internalComment` AS `internalComment`,  \n" +
                "                `a`.`partCategory` AS `partCategory`,  \n" +
                "                `a`.`lineID` AS `lineID`,  \n" +
                "                `sm`.`originalPODate` AS `originalPODate`,  \n" +
                "                `a`.`originalPOQty` AS `originalPOQty`,  \n" +
                "                `sm`.`isRmaPO` AS `isRmaPO`,  \n" +
                "                `sm`.`poRevisionDate` AS `poRevisionDate`,  \n" +
                "                `a`.`releaseLevelComment` AS `releaseLevelComment`,  \n" +
                "                `soh`.`assignQty` AS `assignQty`,  \n" +
                "                `a`.`custOrgPOLineNumber` AS `custOrgPOLineNumber`,  \n" +
                "                (CASE  \n" +
                "                    WHEN (`sm`.`isRmaPO` = 1) THEN 'Yes'  \n" +
                "                    ELSE 'NO'  \n" +
                "                END) AS `rmaPOText`,  \n" +
                "                `sm`.`isLegacyPO` AS `isLegacyPO`,  \n" +
                "                (CASE  \n" +
                "                    WHEN (`sm`.`isLegacyPO` = 1) THEN 'Yes'  \n" +
                "                    ELSE 'NO'  \n" +
                "                END) AS `legacyPOText`,  \n" +
                "                (CASE  \n" +
                "                    WHEN (`a`.`frequency` = 1) THEN 'Every'  \n" +
                "                    WHEN (`a`.`frequency` = 2) THEN 'First'  \n" +
                "                    WHEN (`a`.`frequency` = 3) THEN 'Last'  \n" +
                "                    ELSE ''  \n" +
                "                END) AS `frequency`,  \n" +
                "                (CASE  \n" +
                "                    WHEN (`a`.`frequencyType` = 1) THEN 'Release'  \n" +
                "                    WHEN (`a`.`frequencyType` = 2) THEN 'Shipment'  \n" +
                "                    ELSE ''  \n" +
                "                END) AS `frequencyType`,  \n" +
                "                `a`.`refSODetID` AS `refSODetID`,  \n" +
                "                `a`.`refSOReleaseLineID` AS `refSOReleaseLineID`,  \n" +
                "                `a`.`requestedBPOStartDate` AS `requestedBPOStartDate`,  \n" +
                "                `a`.`blanketPOEndDate` AS `blanketPOEndDate`,  \n" +
                "                `sm`.`linkToBlanketPO` AS `linkToBlanketPO`,  \n" +
                "                (CASE  \n" +
                "                    WHEN (`sm`.`linkToBlanketPO` = 1) THEN 'Yes'  \n" +
                "                    ELSE 'No'  \n" +
                "                END) AS `linkToBlanketPOText`,  \n" +
                "                IFNULL((CASE  \n" +
                "                    WHEN (`sm`.`blanketPOOption` = 2) THEN `sqt`.`BPOShippedQty`  \n" +
                "                    ELSE `sq`.`ShippedQty`  \n" +
                "                END), 0) AS `ShippedQty`,  \n" +
                "                `k`.`releasedWorkorder` AS `releasedWorkorder`,  \n" +
                "                `k`.`releasedWorkorderNmberAndId` AS `releasedWorkorderNmberAndId`,  \n" +
                "                `sm`.`blanketPOOption` AS `blanketPOOption`,  \n" +
                "                (CASE  \n" +
                "                    WHEN (`sm`.`blanketPOOption` = 1) THEN 'Use This Blanket PO# for All Releases'  \n" +
                "                    WHEN (`sm`.`blanketPOOption` = 2) THEN 'Link Future PO(s) to This Blanket PO'  \n" +
                "                    WHEN (`sm`.`blanketPOOption` = 3) THEN 'Use Blanket PO# and Release#'  \n" +
                "                    ELSE ''  \n" +
                "                END) AS `blanketPOOptionText`  \n" +
                "        FROM  \n" +
                "            (((((((((((((`salesordermst` `sm`  \n" +
                "        LEFT JOIN `salesorderdet` `a` ON (((`sm`.`id` = `a`.`refSalesOrderID`)  \n" +
                "            AND (`a`.`isDeleted` = 0)  \n" +
                "            AND (`sm`.`isDeleted` = 0))))  \n" +
                "        LEFT JOIN `mfgcodemst` `cu` ON (((`sm`.`customerID` = `cu`.`id`)  \n" +
                "            AND (`cu`.`isDeleted` = 0))))  \n" +
                "        LEFT JOIN `component` `co` ON ((`a`.`partID` = `co`.`id`)))  \n" +
                "        LEFT JOIN `mfgcodemst` `mg` ON (((`mg`.`id` = `co`.`mfgcodeID`)  \n" +
                "            AND (`mg`.`isDeleted` = 0))))  \n" +
                "        LEFT JOIN `rfq_rohsmst` `roh` ON (((`roh`.`id` = `co`.`RoHSStatusID`)  \n" +
                "            AND (`roh`.`isDeleted` = 0))))  \n" +
                "        LEFT JOIN `customer_contactperson` `cc` ON (((`sm`.`contactPersonID` = `cc`.`personId`)  \n" +
                "            AND (`cc`.`isDeleted` = 0))))  \n" +
                "        LEFT JOIN `genericcategory` `gc` ON (((`sm`.`shippingMethodID` = `gc`.`gencCategoryID`)  \n" +
                "            AND (`gc`.`isDeleted` = 0))))  \n" +
                "        LEFT JOIN (SELECT  \n" +
                "            IFNULL(SUM(`sbt`.`ShippedQty`), 0) AS `BPOShippedQty`,  \n" +
                "                `sbt`.`refBlanketPOID` AS `blanketPOSoDetID`  \n" +
                "        FROM  \n" +
                "            (SELECT  \n" +
                "            `cpd`.`refSalesorderDetid` AS `refSalesorderDetid`,  \n" +
                "                `sdd`.`refBlanketPOID` AS `refBlanketPOID`,  \n" +
                "                IFNULL(SUM(`cpd`.`shipQty`), 0) AS `ShippedQty`  \n" +
                "        FROM  \n" +
                "            ((`customer_packingslip_det` `cpd`  \n" +
                "        JOIN `customer_packingslip` `cps` ON ((`cps`.`id` = `cpd`.`refCustPackingSlipID`)))  \n" +
                "        JOIN `salesorderdet` `sdd` ON (((`sdd`.`id` = `cpd`.`refSalesorderDetid`)  \n" +
                "            AND (`sdd`.`isDeleted` = 0))))  \n" +
                "        WHERE  \n" +
                "            ((`cps`.`transType` = 'P')  \n" +
                "                AND (`cpd`.`isDeleted` = 0))  \n" +
                "        GROUP BY `cpd`.`refSalesorderDetid` , `sdd`.`refBlanketPOID`) `sbt`  \n" +
                "        GROUP BY `sbt`.`refBlanketPOID`) `sqt` ON ((`sqt`.`blanketPOSoDetID` = `a`.`id`)))  \n" +
                "        LEFT JOIN (SELECT  \n" +
                "            `cpd`.`refSalesorderDetid` AS `refSalesorderDetid`,  \n" +
                "                IFNULL(SUM(`cpd`.`shipQty`), 0) AS `ShippedQty`  \n" +
                "        FROM  \n" +
                "            (`customer_packingslip_det` `cpd`  \n" +
                "        JOIN `customer_packingslip` `cps` ON ((`cps`.`id` = `cpd`.`refCustPackingSlipID`)))  \n" +
                "        WHERE  \n" +
                "            ((`cps`.`transType` = 'P')  \n" +
                "                AND (`cpd`.`isDeleted` = 0))  \n" +
                "        GROUP BY `cpd`.`refSalesorderDetid`) `sq` ON ((`sq`.`refSalesorderDetid` = `a`.`id`)))  \n" +
                "        LEFT JOIN (SELECT  \n" +
                "            `x`.`salesOrderDetailID` AS `salesOrderDetailID`,  \n" +
                "                IF((COUNT(1) > 0), 1, 0) AS `wosalesOrderDetail`  \n" +
                "        FROM  \n" +
                "            `workorder_salesorder_details` `x`  \n" +
                "        WHERE  \n" +
                "            (`x`.`isDeleted` = 0)  \n" +
                "        GROUP BY `x`.`salesOrderDetailID`) `wsd` ON ((`wsd`.`salesOrderDetailID` = `a`.`id`)))  \n" +
                "        LEFT JOIN (SELECT  \n" +
                "            `ssm`.`sDetID` AS `sDetID`,  \n" +
                "                MIN(IFNULL(`ssm`.`requestedDockDate`, `ssm`.`shippingDate`)) AS `shippingDate`  \n" +
                "        FROM  \n" +
                "            `salesshippingmst` `ssm`  \n" +
                "        WHERE  \n" +
                "            (`ssm`.`isDeleted` = 0)  \n" +
                "        GROUP BY `ssm`.`sDetID`) `sh` ON ((`sh`.`sDetID` = `a`.`id`)))  \n" +
                "        LEFT JOIN (SELECT  \n" +
                "            SUM(`sod`.`qty`) AS `assignQty`,  \n" +
                "                `sod`.`refBlanketPOID` AS `refsalesOrderID`  \n" +
                "        FROM  \n" +
                "            `salesorderdet` `sod`  \n" +
                "        WHERE  \n" +
                "            (`sod`.`isDeleted` = 0)  \n" +
                "        GROUP BY `sod`.`refBlanketPOID`) `soh` ON ((`soh`.`refsalesOrderID` = `a`.`id`)))  \n" +
                "        LEFT JOIN (SELECT  \n" +
                "            `s`.`salesOrderDetID` AS `salesOrderDetID`,  \n" +
                "                `s`.`refAssyId` AS `refAssyId`,  \n" +
                "                GROUP_CONCAT(DISTINCT ' ', `wo`.`woNumber`  \n" +
                "                    SEPARATOR ',') AS `releasedWorkorder`,  \n" +
                "                GROUP_CONCAT(DISTINCT ' ', CONCAT(`wo`.`woID`, '###', `wo`.`woNumber`)  \n" +
                "                    SEPARATOR ',') AS `releasedWorkorderNmberAndId`  \n" +
                "        FROM  \n" +
                "            (`salesorder_plan_detailsmst` `s`  \n" +
                "        LEFT JOIN `workorder` `wo` ON ((`wo`.`woID` = `s`.`woID`)))  \n" +
                "        GROUP BY `s`.`salesOrderDetID`) `k` ON ((`k`.`salesOrderDetID` = `a`.`id`)))  \n" +
                "        WHERE  \n" +
                "            (`sm`.`isDeleted` = 0)) `a`;  \n" +
                /* **************************** Add Script Version ->  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetSalesorderList` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetSalesorderList`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pIsKitList TINYINT,  \n" +
                "	IN pPlannedStatus VARCHAR(10),  \n" +
                "	IN pSalesOrderDetailId INT,  \n" +
                "	IN pIsPendingWOCreationList TINYINT,  \n" +
                "	IN pCustomPendingWOCreationWhereClause VARCHAR(255),  \n" +
                "	IN pIsPendingCustPackingSlipList TINYINT,  \n" +
                "	IN pfilterStatus VARCHAR(100),  \n" +
                "	IN pcustomerIds VARCHAR(16000),  \n" +
                "	IN pshippingMethodId VARCHAR(16000),  \n" +
                "	IN ptermsIds VARCHAR(16000),  \n" +
                "	IN psearchposotext VARCHAR(1000),  \n" +
                "	IN psearchposotype VARCHAR(10),  \n" +
                "	IN pfromDate DATE,  \n" +
                "	IN ptoDate DATE,  \n" +
                "	IN prushJob TINYINT,  \n" +
                "	IN ppartIds VARCHAR(16000),  \n" +
                "	IN pworkorders VARCHAR(16000),  \n" +
                "	IN psearchextPricetext VARCHAR(1000),  \n" +
                "	IN psearchextPricetype VARCHAR(10),  \n" +
                "	IN pkitreturnStatus VARCHAR(100),  \n" +
                "	IN pkitReleaseStatus VARCHAR(100),  \n" +
                "    IN pfilterPOStatus VARCHAR(20) ,  \n" +
                "    IN pIsRmaPO TINYINT,  \n" +
                "	IN pfromPODate DATE,  \n" +
                "	IN ptoPODate DATE  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255);  \n" +
                "	DECLARE v_PlannedWhere VARCHAR(1000);  \n" +
                "	DECLARE v_SalesOrderDetailWhere VARCHAR(1000);  \n" +
                "	DECLARE v_DynamicJoin VARCHAR(16383);  \n" +
                "	DECLARE v_DynamicColumns VARCHAR(16383);  \n" +
                "	DECLARE v_PendingWOWhereClause VARCHAR(16383);  \n" +
                "	DECLARE v_PendingCustPackingWhereClause VARCHAR(16383) DEFAULT '';  \n" +
                "    DECLARE vTimeZone VARCHAR(50);  \n" +
                "	DECLARE vDateTimeDisplayFormat VARCHAR(100);  \n" +
                "          DECLARE v_mfrFormatType INT;  \n" +
                "  \n" +
                "	SELECT fun_getMFGCodeNameFormat() INTO v_mfrFormatType;  \n" +
                "    SELECT fun_getDateTimeFormat() INTO vDateTimeDisplayFormat;  \n" +
                "	SELECT fun_getTimeZone() INTO vTimeZone;  \n" +
                "	SET v_PendingWOWhereClause='';  \n" +
                "  \n" +
                "	IF(pIsKitList=1) THEN  \n" +
                "		SET v_DynamicColumns = CONCAT(\",  \n" +
                "			hu.refType as refTypeKR,  \n" +
                "			hu.status as haltStatusKR,  \n" +
                "			(  \n" +
                "				CASE  \n" +
                "					WHEN hu.status = 'H' THEN  \n" +
                "						CONCAT(hu.reason, ' - Halt by ',fun_getUserNameByEmployeID(hu.holdEmployeeId),' on ', fun_ConvertUTCDatetimeToDataKeyTimeZone(hu.startDate))  \n" +
                "					ELSE ''  \n" +
                "				END  \n" +
                "			) AS reasonKR,  \n" +
                "			hutt.refType as refTypePO,  \n" +
                "			hutt.status as haltStatusPO,  \n" +
                "			(  \n" +
                "				CASE  \n" +
                "					WHEN hutt.status = 'H' THEN  \n" +
                "						CONCAT(hutt.reason, ' - Halt by ',fun_getUserNameByEmployeID(hutt.holdEmployeeId),' on ', fun_ConvertUTCDatetimeToDataKeyTimeZone(hutt.startDate))  \n" +
                "					ELSE ''  \n" +
                "				END  \n" +
                "			) AS reasonPO,  \n" +
                "            kaad.bomInternalVersionString kitAllocationInternalVersion  \n" +
                "		\");  \n" +
                "  \n" +
                "		SET v_DynamicJoin = CONCAT(\"  \n" +
                "			LEFT JOIN holdunholdtrans hu ON vuss.salesOrderDetailId = hu.refTransID and hu.id = (SELECT MAX(htt.id) FROM holdunholdtrans htt WHERE hu.refTransId = htt.refTransID and htt.refType='KR' and htt.isDeleted=0)  \n" +
                "			LEFT JOIN holdunholdtrans hutt ON vuss.salesOrderDetailId = hutt.refTransID and hutt.id = (SELECT MAX(httt.id) FROM holdunholdtrans httt WHERE hutt.refTransId = httt.refTransID and httt.refType='PO' and httt.isDeleted=0)  \n" +
                "            LEFT JOIN kit_allocation_assy_detail kaad ON vuss.salesOrderDetailId  = kaad.refSalesOrderDetID AND vuss.PartID = kaad.partId AND kaad.bomAssyLevel = 0 AND kaad.isDeleted = 0\") ;  \n" +
                "	ELSE  \n" +
                "		SET v_DynamicColumns=CONCAT(\",  \n" +
                "			hut.refType as refTypePO,hut.status as haltStatusPO,  \n" +
                "			(  \n" +
                "				CASE  \n" +
                "					WHEN hut.status = 'H' THEN  \n" +
                "						CONCAT(hut.reason, ' - Halt by ',fun_getUserNameByEmployeID(hut.holdEmployeeId),' on ', fun_ConvertUTCDatetimeToDataKeyTimeZone(hut.startDate))  \n" +
                "					ELSE ''  \n" +
                "				END  \n" +
                "			) AS reasonPO  \n" +
                "		\");  \n" +
                "  \n" +
                "		SET v_DynamicJoin =CONCAT(\"  \n" +
                "			LEFT JOIN holdunholdtrans hut ON vuss.salesOrderDetailId = hut.refTransId and hut.id = (  \n" +
                "				SELECT 	MAX(ht.id)  \n" +
                "				FROM 	holdunholdtrans ht  \n" +
                "				WHERE 	hut.refTransId = ht.refTransId  \n" +
                "						AND ht.refType='PO'  \n" +
                "						AND ht.isdeleted=0  \n" +
                "					)  \n" +
                "				\") ;  \n" +
                "	END IF;  \n" +
                "	IF(pIsPendingWOCreationList = 1) THEN  \n" +
                "		SET v_PendingWOWhereClause = CONCAT(v_PendingWOWhereClause,' AND statusConvertedValue = \"Published\" AND completedStatus != \"Canceled\"');  \n" +
                "		SET v_DynamicColumns = CONCAT(v_DynamicColumns, \", (`vuss`.`PO Qty`-IFNULL(WOCL.totalWO,0)) AS pendingWOCreation, WOCL.woNumber AS woNumber \");  \n" +
                "		SET v_DynamicJoin = CONCAT(v_DynamicJoin, \"LEFT JOIN (  \n" +
                "				SELECT 		co.PIDCODE AS PIDCode,  \n" +
                "						co.mfgPN AS mfgPN,  \n" +
                "						co.nickname AS nickName,  \n" +
                "						SUM(vusalesorderdet.totalPOQty) AS totalWO,  \n" +
                "						GROUP_CONCAT(wod.woNumber separator ', ') AS woNumber,  \n" +
                "						vusalesorderdet.poNumber,  \n" +
                "						vusalesorderdet.salesOrderNumber  \n" +
                "				FROM 		workorder wod  \n" +
                "				LEFT JOIN 	component co ON wod.partID = co.id AND IFNULL(co.isdeleted,0) = 0 AND IFNULL(co.category,0) = 3  \n" +
                "				LEFT JOIN 	vu_workorder_salesorder_details vusalesorderdet ON vusalesorderdet.woID = wod.woID  \n" +
                "				GROUP BY 	vusalesorderdet.salesOrderNumber, vusalesorderdet.poNumber, co.PIDCode, co.mfgPN, co.nickName  \n" +
                "			) AS WOCL ON (`vuss`.`Sales Order` = WOCL.salesOrderNumber AND `vuss`.`Po Number` = WOCL.poNumber AND `vuss`.`Assy ID` = WOCL.PIDCode)  \n" +
                "		\");  \n" +
                "	END IF;  \n" +
                "    IF (pIsPendingCustPackingSlipList = 1) THEN  \n" +
                "		SET v_DynamicJoin = CONCAT (v_DynamicJoin , 'LEFT JOIN vu_customer_packing_slip_qty_by_salesorderdetid vcpsd  \n" +
                "								ON vcpsd.refSalesorderDetId = vuss.salesOrderDetailId ');  \n" +
                "        SET v_DynamicColumns = CONCAT(v_DynamicColumns , ',  vcpsd.totShippedQty custPackingSlipShippedQty , vcpsd.balancePoQty ,  \n" +
                "									(select min(promisedShipDate) from salesshippingmst where sDetID = 	vuss.salesOrderDetailId AND isDeleted = 0) promisedShipDate	');  \n" +
                "		SET v_PendingCustPackingWhereClause = ' AND `status` = 1 AND balancePoQty > 0';  \n" +
                "        IF pOrderBy IS NULL THEN  \n" +
                "			SET pOrderBy = ' promisedShipDate asc ';  \n" +
                "        END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	SET @temp_Sproc_GetSalesorderList = CONCAT(\"  \n" +
                "		SELECT  a.*,  \n" +
                "				fun_getKitReleaseIndication(a.releaseDayDiffwithCurrentDate, a.shortagePer, a.isKitPlanningRequired) AS kitReleaseIndication ,  \n" +
                "                case when kitPlanStatus = 'Unplanned' then 1 else  0 end Unplanned ,  \n" +
                "                case when kitPlanStatus = 'Partially Planned' then 1 else 0 end PartiallyPlanned  \n" +
                "		FROM  \n" +
                "			(SELECT   ro.rohsIcon,ro.name AS `rohsComplientConvertedValue`,  \n" +
                "				(  \n" +
                "					CASE  	WHEN (`vuss`.`isHotJob` = 0) THEN  \n" +
                "							'No'  \n" +
                "						WHEN (`vuss`.`isHotJob` = 1) THEN  \n" +
                "							'Yes'  \n" +
                "						ELSE  \n" +
                "							''  \n" +
                "					END  \n" +
                "				) AS `isHotJobValue`,  \n" +
                "				`vuss`.`isHotJob`,  \n" +
                "				`vuss`.`Sales Order ID` AS id,  \n" +
                "				`vuss`.`salesOrderDetailId` AS salesOrderDetailId,  \n" +
                "				`vuss`.`Balanced Due Qty` as openQty,  \n" +
                "				`vuss`.frequency as frequencyName,  \n" +
                "				vuss.frequencyType as frequencyTypeName,  \n" +
                "				/*case when vuss.refSODetID is not null then fun_getAssyIDBySODetailID(vuss.refSODetID) else '' end  salesAssy,  */  \n" +
                "                 case when vuss.refSODetID is not null then sa.salesAssy else '' end  as salesAssy ,  \n" +
                "				 /*fun_getSalesOrderReleaseDetailLine(vuss.refSOReleaseLineID) salesRelease,*/  \n" +
                "                  sr.salesRelease as salesRelease,  \n" +
                "				`vuss`.`Sales Order` AS salesOrderNumber,  \n" +
                "				`vuss`.`Po Number` AS poNumber,  \n" +
                "				`vuss`.`Po Date` AS poDate,  \n" +
                "				`vuss`.`Customer ID` AS customerID,  \n" +
                "				`vuss`.`ContactPerson ID` AS contactPersonID,  \n" +
                "				`vuss`.`ShippingMethod ID` AS shippingMethodID,  \n" +
                "				`vuss`.`Sales Order Status` AS `status`,  \n" +
                "				`vuss`.`Revision` AS revision,  \n" +
                "				`vuss`.`Shipping Comment` AS shippingComment,  \n" +
                "				`vuss`.`Terms ID` AS termsID,  \n" +
                "				`vuss`.`So Date` AS soDate,  \n" +
                "				fun_GetFormattedMfgCode(vuss.mfgCode,vuss.mfgName,\",v_mfrFormatType,\") AS companyName,  \n" +
                "				`vuss`.`internalPO` AS internalPO,  \n" +
                "				`vuss`.`mfgCode` AS mfgCode,  \n" +
                "				`vuss`.`Full Name` AS fullName,  \n" +
                "				`vuss`.`GencCategory Code` AS genCategoryCode,  \n" +
                "				`vuss`.`PO Qty` AS qty,  \n" +
                "				vuss.assignQty as assignBlanketPOQty,  \n" +
                "				case when vuss.isBlanketPO=1 and vuss.blanketPOOption=2 then (`vuss`.`PO Qty`-ifnull(vuss.assignQty,0)) else null end openBlanketPOQty,  \n" +
                "				ifnull(`vuss`.`PO Qty`,0)*ifnull(`vuss`.`price`,0) as  extPriceDisplayValue,  \n" +
                "				ifnull(fun_getTotalSalesorderOtherCharges(vuss.salesOrderDetailId),0)+(ifnull(`vuss`.`PO Qty`,0)*ifnull(`vuss`.`price`,0)) as totalextPriceDisplayValue,  \n" +
                "				`vuss`.`mrpQty` AS mrpQty,  \n" +
                "				`vuss`.`custPOLineNumber` AS custPOLineNumber,  \n" +
                "				`vuss`.`kitQty` AS kitQty, \",  \n" +
                "				IF(pIsPendingWOCreationList = 1, \"\", \"`vuss`.`price` AS price,\"),  \n" +
                "				\"`vuss`.`materialTentitiveDocDate` AS materialTentitiveDocDate,  \n" +
                "				`vuss`.`materialDueDate` AS materialDueDate,  \n" +
                "				`vuss`.`prcNumberofWeek` AS prcNumberofWeek,  \n" +
                "				`vuss`.`shippingQty` AS shippingQty,  \n" +
                "				`vuss`.`remark` AS remark,  \n" +
                "				`vuss`.`Assy ID` AS PIDCode,  \n" +
                "				`vuss`.`Assy Name` AS mfgPN,  \n" +
                "				 vuss.poRevisionDate  As poRevisionDate,  \n" +
                "				 vuss.releaseLevelComment as releaseLevelComment,  \n" +
                "				`vuss`.`NickName` AS nickName,  \n" +
                "				`vuss`.`liveVersion` AS liveVersion,  \n" +
                "				`vuss`.`partDescription` AS partDescription,  \n" +
                "				`vuss`.`cancleReason` AS cancleReason,  \n" +
                "				vuss.blanketPOOption,  \n" +
                "				vuss.blanketPOOptionText,  \n" +
                "                \",  IF(pIsKitList = 0 AND pIsPendingWOCreationList=0, \"\", \"`vuss`.`Status` AS completedStatus,\"),  \"  \n" +
                "				/*`vuss`.`modifyDate` AS modifyDate,  */  \n" +
                "                 fun_ApplyCommonDateTimeFormatByParaValue(`vuss`.`modifyDate`,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') AS modifyDate,  \n" +
                "				/*`vuss`.`createdDate` AS createdDate,*/  \n" +
                "                 fun_ApplyCommonDateTimeFormatByParaValue(`vuss`.`createdDate`,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') AS createdDate,  \n" +
                "				`vuss`.`soModifiedBy` AS soModifiedBy,  \n" +
                "				`vuss`.`soCreatedBy` AS soCreatedBy,  \n" +
                "				`vuss`.`updatedbyRole` AS updatedbyRole,  \n" +
                "				`vuss`.`createdbyRole` AS createdbyRole,  \n" +
                "				(SELECT (SUM(qty)-`vuss`.`PO Qty`) FROM salesshippingmst ss WHERE sDetID=vuss.salesOrderDetailId AND ss.isdeleted=0) as pendingAssignQty,  \n" +
                "				vuss.isBlanketPO,  \n" +
                "				vuss.blanketPOText,  \n" +
                "				vuss.poRevision,  \n" +
                "				vuss.partType,  \n" +
                "				vuss.isCancle,  \n" +
                "				vuss.mfgcodeID,  \n" +
                "				vuss.manufacturerName,  \n" +
                "				`vuss`.`PartID` AS partID,  \n" +
                "				`vuss`.`isCustomPart` AS isCustomPart,  \n" +
                "				`vuss`.`kitNumber` AS kitNumber,  \n" +
                "				`vuss`.`serialNumber` AS serialNumber,  \n" +
                "				`vuss`.partCategory,  \n" +
                "				vuss.lineID,  \n" +
                "				vuss.internalCommentSo,  \n" +
                "				vuss.internalComment,  \n" +
                "				vuss.originalPODate,  \n" +
                "				vuss.linkToBlanketPO,  \n" +
                "				vuss.linkToBlanketPOText,  \n" +
                "				vuss.isRmaPO,  \n" +
                "				vuss.rmaPOText,  \n" +
                "				vuss.isLegacyPO,  \n" +
                "				vuss.legacyPOText,  \n" +
                "				vuss.originalPOQty,  \n" +
                "				vuss.requestedBPOStartDate,  \n" +
                "				 vuss.blanketPOEndDate,  \n" +
                "				ifnull(`vuss`.`salesOrderDetStatus`,1) AS salesOrderDetStatus,  \n" +
                "				\",  IF(pIsKitList = 1, \"\", \"`vuss`.`Status` AS salesOrderDetStatusConvertedValues,\"),  \"  \n" +
                "				`vuss`.`isSkipKitCreation` AS isSkipKitCreation,  \n" +
                "				/*fun_getTotalSalesorderOtherCharges(vuss.salesOrderDetailId) otherChargesTotal,  */  \n" +
                "                ifnull(TotalSalesOrderOtherCharges,0) otherChargesTotal,  \n" +
                "				 (ifnull(fun_getTotalSalesorderOtherCharges(vuss.salesOrderDetailId),0) + (ifnull(`vuss`.`PO Qty`,0) * ifnull(`vuss`.`price`,0))) totalextPrice,  \n" +
                "				/*fun_CheckBuildFesibility(vuss.salesOrderDetailId,`vuss`.`PartID`) as isBuildWiseHotJob,*/  \n" +
                "                ifnull(p.ishotjob,0) as isBuildWiseHotJob ,  \n" +
                "				/*fun_getNextPlanShipDate(vuss.salesOrderDetailId) as nextShipDate,*/  \n" +
                "                p.nextShipDate as nextShipDate,  \n" +
                "				/*fun_getWorkorderNumberBySalesOrderID(vuss.salesOrderDetailId) workorders,*/  \n" +
                "                wo.WONumber as workorders,  \n" +
                "				/*fun_getWorkorderIdsBySalesOrderID(vuss.salesOrderDetailId) workorderIds,*/  \n" +
                "                wo.WOIds as workorderIds,  \n" +
                "				`vuss`.`wosalesOrderDetail` AS wosalesOrderDetail,  \n" +
                "				(  \n" +
                "					CASE  	WHEN (`vuss`.`Sales Order Status` = 0) THEN  \n" +
                "							'Draft'  \n" +
                "						WHEN (`vuss`.`Sales Order Status` = 1) THEN  \n" +
                "							'Published'  \n" +
                "						ELSE  \n" +
                "							''  \n" +
                "					END  \n" +
                "				) AS `statusConvertedValue`,  \n" +
                "				hutkit.refType as refTypeKA,  \n" +
                "				hutkit.status as haltStatusKA,  \n" +
                "				(  \n" +
                "					CASE  \n" +
                "						WHEN 	hutkit.status = 'H' THEN  \n" +
                "								CONCAT(hutkit.reason, ' - Halt by ',fun_getUserNameByEmployeID(hutkit.holdEmployeeId),' on ', DATE_FORMAT(hutkit.startDate,'%m/%d/%Y %H:%i:%S'))  \n" +
                "						ELSE 	''  \n" +
                "					END  \n" +
                "				) AS reasonKA,  \n" +
                "				ka.allocPerComponent AS `kitStatusPercentage`,  \n" +
                "				ka.allocPerWithSubAssy AS `subKitStatusPercentage`,  \n" +
                "				(  \n" +
                "				CASE  \n" +
                "					WHEN ((IFNULL(p.totalPlan, 0) = 0) OR (IFNULL(p.totalPlan, 0) > 0 AND (IFNULL(p.totalPOQty, 0) <> `vuss`.`PO Qty` OR IFNULL(p.totalKitQty, 0) <> `vuss`.`kitQty`))) THEN  \n" +
                "						TRUE  \n" +
                "					ELSE  \n" +
                "						FALSE  \n" +
                "				END  \n" +
                "				) as isKitPlanningRequired,  \n" +
                "				(  \n" +
                "					CASE  \n" +
                "						WHEN ifnull(p.totalPlan, 0) = 0 THEN  \n" +
                "							'Unplanned'  \n" +
                "						WHEN ifnull(p.totalPlan, 0) > 0  AND  (IFNULL(p.totalPOQty, 0) <> `vuss`.`PO Qty` OR IFNULL(p.totalKitQty, 0) <> `vuss`.`kitQty`) THEN  \n" +
                "							'Partially Planned'  \n" +
                "						WHEN ifnull(p.totalPlan, 0) > 0 AND  IFNULL(p.totalPOQty, 0) = `vuss`.`PO Qty` AND IFNULL(p.totalKitQty, 0) = `vuss`.`kitQty` THEN  \n" +
                "							'Fully Planned'  \n" +
                "						ELSE  \n" +
                "							NULL  \n" +
                "					END  \n" +
                "				) as kitPlanStatus,  \n" +
                "				/*(  \n" +
                "					CASE  \n" +
                "						WHEN 	ka.kitReturnStatus is null then  \n" +
                "							'N/A'  \n" +
                "						ELSE  \n" +
                "							ka.kitReturnStatus  \n" +
                "					END  \n" +
                "				) as kitReturnStatus,  */  \n" +
                "                fun_getKitReturnStatus(vrr.pendingReleaseCount,vrr.releasedNotReturnedCount,vrr.returnedCount,vrr.readyToreturnCount) as kitReturnStatus,  \n" +
                "				/*(  \n" +
                "					CASE  \n" +
                "						WHEN ka.kitReleaseStatus is null then  \n" +
                "							'Not Released'  \n" +
                "						else  \n" +
                "							ka.kitReleaseStatus  \n" +
                "					END  \n" +
                "				) as kitReleaseStatus,  */  \n" +
                "				fun_getKitReleaseStatus(ka.allocPerWithSubAssy,p.totalKitQty,p.totalPOQty,`vuss`.`kitQty`,`vuss`.`PO Qty`,p.releasedPlanCount,p.pendingCount) as  kitReleaseStatus,  \n" +
                "				`vuss`.`Shipped Qty` AS shippedQty,  \n" +
                "				(CASE WHEN ifnull(salesOrderDetStatus,1) =  2 AND internalPO = 1 THEN 100  \n" +
                "					ELSE ROUND(((`vuss`.`Shipped Qty` * 100) / `vuss`.`PO Qty`),2) END ) AS  soCompletionPercentage,  \n" +
                "				p.nextReleaseDate,  \n" +
                "				CONCAT(ka.shortageLine,'/', ka.totalLine) AS shortageLines,  \n" +
                "				p.releasedPlanCount totalkitRelease,  \n" +
                "				ifnull(p.totalPlan, 0) kitReleasePlanCount ,  \n" +
                "				IFNULL(p.totalPOQty, 0) totalPOQty,  \n" +
                "				IFNULL(p.totalKitQty, 0) totalKitQty,  \n" +
                "				fun_getGenericCategoryNameByID(`vuss`.`Terms ID`) AS termsDisplayText,  \n" +
                "				vuss.releasedWorkorder,  \n" +
                "                ka.shortagePer,  \n" +
                "				DATEDIFF(p.nextReleaseDate, fun_DatetimetoUTCDateTime()) AS releaseDayDiffwithCurrentDate ,  \n" +
                "                 (case when vuss.partCategory = 3 and vuss.isSkipKitCreation = 1 then 0  \n" +
                "					 when vuss.partCategory <> 3 then 0  \n" +
                "                     else 1 end) isKitPlanAllowed,  \n" +
                "				vuss.releasedWorkorderNmberAndId , astk.initialStockCount ,  \n" +
                "				vuss.rmaNumber,vuss.isDebitedByCustomer, vuss.debitedByCustText,  \n" +
                "				vuss.rmaOrgPONumber,vuss.orgSalesOrderID,vuss.isReworkRequired,  \n" +
                "				vuss.reworkReqText, vuss.reworkPONumber,vuss.custOrgPOLineNumber \",v_DynamicColumns,  \n" +
                "		\" FROM   		vu_salesorder_updatedlist_report vuss \",v_DynamicJoin,\"  \n" +
                "		  Left Join (SELECT s.id, CONCAT(c.pidcode,CASE WHEN s.custPOLineNumber IS NOT NULL THEN ' | ' ELSE '' END,s.custPOLineNumber) salesAssy  \n" +
                "					FROM  salesorderdet s inner join component c ON s.partID =c.id  \n" +
                "					WHERE  s.isdeleted=0 and c.parttype in (3,2)) as sa on sa.id = vuss.refSODetID  \n" +
                "	    Left Join (select shippingid,Sdetid, qty,  CONCAT(releaseNumber,' | ',qty,' | ',DATE_FORMAT(IFNULL(requestedDockDate,shippingDate),\",'''%m/%d/%y''',\")) salesRelease  \n" +
                "					FROM salesshippingmst  b where isdeleted = 0 ) as sr on sr.shippingid = vuss.refSOReleaseLineID  \n" +
                "	   Left Join (SELECT refSalesOrderDetID, IFNULL(SUM(qty*price),0) TotalSalesOrderOtherCharges  \n" +
                "					FROM salesorder_otherexpense_details where isdeleted = 0  \n" +
                "					group by refSalesOrderDetID ) as so on so.refSalesOrderDetID = vuss.salesOrderDetailId  \n" +
                "	   Left Join (SELECT wsd.salesOrderDetailID, GROUP_CONCAT(DISTINCT w.woID) WOIds  ,GROUP_CONCAT(DISTINCT w.woNumber) WONumber  \n" +
                "					FROM workorder w JOIN workorder_salesorder_details wsd  \n" +
                "					ON wsd.woID=w.woID WHERE   wsd.isdeleted=0  \n" +
                "					group by wsd.salesOrderDetailID ) as wo on wo.salesOrderDetailID = vuss.salesOrderDetailId  \n" +
                "        LEFT JOIN  	(  \n" +
                "					SELECT  salesOrderDetID,  \n" +
                "							refAssyId,  \n" +
                "                         max(case when DATE(CURRENT_TIMESTAMP)>kitReleaseDate  and  kitStatus!='R' then 1 else 0 end )  as ishotjob,  \n" +
                "                         MIN(case when kitStatus!='R' then kitReleaseDate else null end ) nextShipDate,  \n" +
                "                         MIN(CASE WHEN kitStatus = 'P' THEN kitReleaseDate ELSE null END) nextReleaseDate ,  \n" +
                "						count(1) totalPlan,  \n" +
                "						SUM(poQty) totalPOQty,  \n" +
                "						SUM(kitReleaseQty) totalKitQty,  \n" +
                "						SUM(CASE WHEN kitStatus = 'R' THEN 1 ELSE 0 END) releasedPlanCount,  \n" +
                "						SUM(CASE WHEN kitStatus ='P' THEN 1 ELSE 0 END) pendingCount  \n" +
                "					FROM 	salesorder_plan_detailsmst  \n" +
                "					WHERE 	isDeleted = 0  \n" +
                "					AND 	subAssyID is null  \n" +
                "					GROUP BY salesOrderDetID, refAssyId  \n" +
                "				) AS p on p.salesOrderDetID = `vuss`.`salesOrderDetailId` and p.refAssyId = `vuss`.`PartID`  \n" +
                "		LEFT JOIN (  \n" +
                "				SELECT	salesOrderDetID,  \n" +
                "						refAssyId,  \n" +
                "						SUM(CASE WHEN kitReturnStatus ='NA' THEN 1 ELSE 0 END) pendingReleaseCount,  \n" +
                "						SUM(CASE WHEN kitReturnStatus ='NR' THEN 1 ELSE 0 END) releasedNotReturnedCount,  \n" +
                "						SUM(CASE WHEN kitReturnStatus ='R' THEN 1 ELSE 0 END) returnedCount,  \n" +
                "						SUM(CASE WHEN kitReturnStatus ='RR' THEN 1 ELSE 0 END) readyToreturnCount  \n" +
                "				FROM 	vu_release_plan_release_return_status_det  \n" +
                "                GROUP BY salesOrderDetID, refAssyId  \n" +
                "        ) AS vrr ON  vrr.salesOrderDetID = vuss.salesOrderDetailId and vrr.refAssyId = `vuss`.`PartID`  \n" +
                "		LEFT JOIN 	(  \n" +
                "						SELECT 	`k`.`refSalesOrderDetID` AS `refSalesOrderDetID`,  \n" +
                "						`k`.`assyID` AS `assyID`,  \n" +
                "						(`k`.`totalLine` - `k`.`totalNotRequireLine`) AS `totalLine`,  \n" +
                "						`k`.`shortageLine` AS `shortageLine`,  \n" +
                "						allocPermainAssy allocPerComponent,  \n" +
                "						`k`.`allocPerWithSubAssy` AS `allocPerWithSubAssy`,  \n" +
                "						Round((k.shortageLine/k.totalLine)*100) AS `shortagePer`/*,  \n" +
                "						fun_getKitReleaseStatus(k.refSalesOrderDetID, NULL, k.assyID, k.allocPerWithSubAssy, true) AS `kitReleaseStatus`,  \n" +
                "						fun_getKitReturnStatus(k.refSalesOrderDetID, k.assyID, k.assyID, true) AS `kitReturnStatus`*/  \n" +
                "						FROM (  \n" +
                "							SELECT  `k`.`refSalesOrderDetID` AS `refSalesOrderDetID`,  \n" +
                "								mainAssy AS `assyID`,  \n" +
                "								COUNT(1) AS `totalLine`,  \n" +
                "								SUM(CASE WHEN isNotRequiredKitAllocation = 1 THEN 1 ELSE 0 END) AS `totalNotRequireLine`,  \n" +
                "								 SUM((CASE WHEN (`k`.`shortage` > 0) THEN 1 ELSE 0 END)) AS `shortageLine_old`,  \n" +
                "								sum( k.shortageline) shortageline,  \n" +
                "								ROUND(SUM(CASE WHEN ((k.qpaWithDnp != 0 AND k.allocationPer > 100) OR k.isNotRequiredKitAllocation = 1) THEN 100 ELSE ROUND(IFNULL(k.allocationPer, 0), 2) END) / SUM(CASE WHEN k.qpaWithDnp != 0 THEN 1 ELSE 0 END), 2) AS `allocPerWithSubAssy`,  \n" +
                "								ROUND(SUM(CASE WHEN ((k.qpaWithDnp != 0 AND k.allocatedPercePerLine > 100) OR k.isNotRequiredKitAllocation = 1) THEN 100 ELSE ROUND((CASE WHEN k.qpaWithDnp != 0 THEN IFNULL(k.allocatedPercePerLine, 0) ELSE 0 END), 2) END) / SUM(CASE WHEN k.qpaWithDnp != 0 THEN MainAssyLine ELSE 0 END), 2) AS `allocPermainAssy`  \n" +
                "							  FROM (  \n" +
                "  \n" +
                "									SELECT  vk.`refSalesorderdetid` AS `refSalesOrderDetID`,  \n" +
                "										vk.`assyID` AS `assyID`,   sd.partid mainAssy,   vk.qpaWithDnp,  \n" +
                "										IFNULL(((100 *  (CASE WHEN vk.connecterTypeID = -2 THEN IFNULL(vk.`allocatedpin`, 0) ELSE IFNULL(vk.`allocatedunit`, 0) END)) / (vk.`totalAssyBuildQty` * IFNULL(vk.`qpaWithDnp`, 0))), 0) AS `allocationPer`,  \n" +
                "										(case when vk.assyid = sd.partid then 1 else 0 end) MainAssyLine,  \n" +
                "										(case when vk.assyid = sd.partid then    vk.allocationPercPerLine   else 0 end)  allocatedPercePerLine,  \n" +
                "										(CASE WHEN vk.connecterTypeID = -2 THEN vk.`shortagePins` ELSE vk.`shortage` END)  AS `shortage`,  \n" +
                "										(CASE WHEN vk.connecterTypeID = -2 THEN vk.`shortagelinePins` ELSE vk.`shortageline` END) AS shortageline,  \n" +
                "										vk.`isNotRequiredKitAllocation` AS `isNotRequiredKitAllocation`  \n" +
                "									FROM  	`vu_kit_allocation_detail` vk  \n" +
                "									Inner join    salesorderdet sd on vk.refSalesorderdetid  = sd.id  \n" +
                "									WHERE    vk.`isNotRequiredKitAllocation` != 1  \n" +
                "								) `k`  \n" +
                "							GROUP BY `k`.`refSalesOrderDetID`,mainAssy  \n" +
                "						) `k`  \n" +
                "					) as ka on ka.refSalesOrderDetID = `vuss`.`salesOrderDetailId` and ka.assyID =  `vuss`.`PartID`  \n" +
                "			LEFT JOIN  	rfq_rohsmst ro ON `vuss`.`RoHSStatusID` = ro.id AND ro.isDeleted = 0  \n" +
                "			LEFT JOIN 	holdunholdtrans hutkit ON vuss.salesOrderDetailId = hutkit.refTransId and hutkit.id = (SELECT MAX(htk.id) FROM holdunholdtrans htk WHERE hutkit.refTransId = htk.refTransId and htk.refType='KA' and htk.isDeleted=0)  \n" +
                "            LEFT JOIN (Select ass.refSalesOrderDetID, ass.refSalesOrderID, ass.partID , count(1) as initialStockCount  \n" +
                "							from assemblystock ass where ass.isDeleted =0 and ass.type='OS'  \n" +
                "                            Group by ass.refSalesOrderDetID, ass.refSalesOrderID , ass.partID )  AS astk  \n" +
                "						ON astk.refSalesOrderDetID = vuss.`SalesOrderDetailId` and astk.refSalesOrderID = vuss.`Sales Order ID` and astk.partID = vuss.partID  \n" +
                "		) AS a  \n" +
                "    \");  \n" +
                "    IF(pIsKitList = 1) THEN  \n" +
                "		SET pOrderBy = CONCAT(\"(nextReleaseDate IS NULL),  nextReleaseDate ASC,  \" , pOrderBy);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pOrderBy IS NOT NULL) THEN  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY salesOrderNumber DESC\") ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = '1=1' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pCustomPendingWOCreationWhereClause IS NOT NULL OR pCustomPendingWOCreationWhereClause != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, \" AND \", pCustomPendingWOCreationWhereClause);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pfilterStatus IS NOT NULL AND pfilterStatus != '') THEN  \n" +
                "		IF(pIsKitList = 1 OR pIsPendingWOCreationList=1)THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause, ' AND FIND_IN_SET(completedStatus,''', pfilterStatus ,''')');  \n" +
                "		ELSE  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause, ' AND  FIND_IN_SET(salesOrderDetStatusConvertedValues,''', pfilterStatus ,''')');  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "    IF(pfilterPOStatus IS NOT NULL AND pfilterPOStatus != '') THEN  \n" +
                "          			SET pWhereClause = CONCAT(pWhereClause, ' AND  FIND_IN_SET(statusConvertedValue,''', pfilterPOStatus ,''')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pcustomerIds IS NOT NULL AND pcustomerIds != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND customerID in (',pcustomerIds,')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pshippingMethodId IS NOT NULL AND pshippingMethodId != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND shippingMethodID in (',pshippingMethodId,')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(ptermsIds IS NOT NULL AND ptermsIds != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND termsID in (',ptermsIds,')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(psearchposotype IS NOT NULL AND psearchposotext IS NOT NULL)THEN  \n" +
                "	  IF(psearchposotype='C')THEN  \n" +
                "             SET pWhereClause = CONCAT(pWhereClause, ' AND (salesOrderNumber  like ''%',psearchposotext,'%'' OR poNumber  like ''%',psearchposotext,'%'' OR rmaNumber  like ''%',psearchposotext,'%'')');  \n" +
                "          ELSE  \n" +
                "             SET pWhereClause= CONCAT(pWhereClause,' and (salesOrderNumber  =''',psearchposotext,''' OR poNumber  =''',psearchposotext,''' OR rmaNumber  =''',psearchposotext,''')');  \n" +
                "          END IF;  \n" +
                "	 END IF;  \n" +
                "    IF(psearchextPricetype IS NOT NULL AND psearchextPricetext IS NOT NULL)THEN  \n" +
                "	  IF(psearchextPricetype='C')THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause, ' AND (totalextPrice  like ''%',psearchextPricetext,'%'')');  \n" +
                "		ELSE  \n" +
                "			SET pWhereClause= CONCAT(pWhereClause,' and (totalextPrice  =''',psearchextPricetext,''')');  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(prushJob = 1) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND isHotJob = 1');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pworkorders IS NOT NULL)THEN  \n" +
                "		SET pworkorders=REPLACE(pworkorders,',','|');  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND (releasedWorkorder REGEXP (''',pworkorders,''') OR workOrders REGEXP (''',pworkorders,'''))');  \n" +
                "	END IF;  \n" +
                "	IF(ppartIds IS NOT NULL)THEN  \n" +
                "		SET pWhereClause= CONCAT(pWhereClause,' and (partID in (',ppartIds,'))');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pkitreturnStatus IS NOT NULL)THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND FIND_IN_SET(kitReturnStatus,''', pkitreturnStatus ,''')');  \n" +
                "	END IF;  \n" +
                "	IF(pkitReleaseStatus IS NOT NULL)THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND FIND_IN_SET(kitReleaseStatus,''', pkitReleaseStatus ,''')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pIsRmaPO = 1) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND isRmaPO = 1');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	-- from date to date filter  \n" +
                "	IF(pfromDate IS NOT NULL AND ptoDate IS NOT NULL)THEN  \n" +
                "		SET pWhereClause=CONCAT(pWhereClause, ' and (soDate>=''',pfromDate,''' and soDate<=''',ptoDate,''')');  \n" +
                "	ELSEIF(pfromDate IS NOT NULL)THEN  \n" +
                "       SET pWhereClause=CONCAT(pWhereClause, ' and (soDate>=''',pfromDate,''')');  \n" +
                "       ELSEIF(ptoDate IS NOT NULL)THEN  \n" +
                "       SET pWhereClause=CONCAT(pWhereClause, ' and (soDate<=''',ptoDate,''')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pfromPODate IS NOT NULL AND ptoPODate IS NOT NULL)THEN  \n" +
                "		SET pWhereClause=CONCAT(pWhereClause, ' and (poDate>=''',pfromPODate,''' and poDate<=''',ptoPODate,''')');  \n" +
                "	ELSEIF(pfromPODate IS NOT NULL)THEN  \n" +
                "       SET pWhereClause=CONCAT(pWhereClause, ' and (poDate>=''',pfromPODate,''')');  \n" +
                "	ELSEIF(ptoPODate IS NOT NULL)THEN  \n" +
                "       SET pWhereClause=CONCAT(pWhereClause, ' and (poDate<=''',ptoPODate,''')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF pIsPendingCustPackingSlipList = 1 THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause , v_PendingCustPackingWhereClause);  \n" +
                "    END IF;  \n" +
                "  \n" +
                "  	IF(pIsKitList = 1) THEN  \n" +
                "  		SET pWhereClause = CONCAT(pWhereClause , \" AND  (isSkipKitCreation = 0 OR isSkipKitCreation IS NULL) and kitNumber is not null\");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pPlannedStatus IS NOT NULL OR pPlannedStatus != '') THEN  \n" +
                "		SET v_PlannedWhere = ' AND  (1 = 1 AND';  \n" +
                "		IF (pPlannedStatus LIKE '%U%') THEN  \n" +
                "			SET v_PlannedWhere = CONCAT(v_PlannedWhere, \" (kitReleasePlanCount = 0 )OR \");  \n" +
                "		END IF;  \n" +
                "		IF (pPlannedStatus LIKE '%P%') THEN  \n" +
                "			SET v_PlannedWhere = CONCAT(v_PlannedWhere, \" (kitReleasePlanCount > 0 AND (totalPOQty <> qty OR totalKitQty <> kitQty)) OR \");  \n" +
                "		END IF;  \n" +
                "		IF (pPlannedStatus LIKE '%F%') THEN  \n" +
                "			SET v_PlannedWhere = CONCAT(v_PlannedWhere, \" (kitReleasePlanCount > 0 AND totalPOQty = qty AND totalKitQty = kitQty ) OR \");  \n" +
                "		END IF;  \n" +
                "        SET v_PlannedWhere = CONCAT(v_PlannedWhere, ' 1 = 0)');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pSalesOrderDetailId != 0) THEN  \n" +
                "		SET v_SalesOrderDetailWhere = CONCAT(\" AND salesOrderDetailId = \", pSalesOrderDetailId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/* to get total count of rows */  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord FROM ( \",@temp_Sproc_GetSalesorderList,\" ) c WHERE 1=1 AND \", pWhereClause, v_PendingWOWhereClause, IFNULL(v_PlannedWhere, '') , IFNULL(v_SalesOrderDetailWhere, ''));  \n" +
                "   PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"SELECT * FROM ( \", @temp_Sproc_GetSalesorderList,\" ) c  WHERE \", pWhereClause, v_PendingWOWhereClause, IFNULL(v_PlannedWhere, '') , IFNULL(v_SalesOrderDetailWhere, '') , \" \" , pOrderBy , rowNumWhere);  \n" +
                "    PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "	IF pIsKitList = 1 THEN  \n" +
                "		SET @SQLStatement3 = CONCAT(\" SELECT sum(Unplanned) UnPlannedCount ,sum(PartiallyPlanned) PartiallyPlannedCount  FROM ( \",@temp_Sproc_GetSalesorderList,\" ) c WHERE 1=1  AND \", pWhereClause, v_PendingWOWhereClause);  \n" +
                "		PREPARE query3 FROM @SQLStatement3;  \n" +
                "		EXECUTE query3;  \n" +
                "		DEALLOCATE PREPARE query3;  \n" +
                "    END IF;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version ->  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetSalesOrderSummaryList` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetSalesOrderSummaryList`(  \n" +
                "	IN ppageIndex INT(11),  \n" +
                "	IN precordPerPage INT(11),  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pfilterStatus VARCHAR(100),  \n" +
                "	IN pcustomerIds VARCHAR(16000),  \n" +
                "	IN pshippingMethodId VARCHAR(16000),  \n" +
                "	IN ptermsIds VARCHAR(16000),  \n" +
                "	IN psearchposotext VARCHAR(1000),  \n" +
                "	IN psearchposotype VARCHAR(10),  \n" +
                "	IN pfromDate DATE,  \n" +
                "	IN ptoDate DATE,  \n" +
                "	IN psearchextPricetext VARCHAR(1000),  \n" +
                "	IN psearchextPricetype VARCHAR(10),  \n" +
                "	IN pfilterPOStatus VARCHAR(20)  ,  \n" +
                "    IN pIsRmaPO TINYINT,  \n" +
                "    IN pfromPODate DATE,  \n" +
                "	IN ptoPODate DATE  \n" +
                "	)  \n" +
                "BEGIN  \n" +
                "  \n" +
                "		DECLARE pOffset INT(11);  \n" +
                "		DECLARE rowNumWhere VARCHAR(255) ;  \n" +
                "		DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
                "		DECLARE v_TimeZone VARCHAR(50);  \n" +
                "		     DECLARE v_mfrFormat INT;  \n" +
                "  \n" +
                "		SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "		SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
                "		 SELECT fun_getMFGCodeNameFormat() INTO v_mfrFormat;  \n" +
                "  \n" +
                "		SET @tempQuery = CONCAT(\"SELECT s.id,  \n" +
                "       s.salesOrderNumber,  \n" +
                "       s.poNumber,  \n" +
                "       s.poDate,  \n" +
                "       s.customerID,  \n" +
                "       s.contactPersonID,  \n" +
                "       s.billingAddressID,  \n" +
                "       s.shippingAddressID,  \n" +
                "       s.shippingMethodID,  \n" +
                "       s.revision,  \n" +
                "       s.shippingComment,  \n" +
                "       s.termsID,  \n" +
                "       CASE WHEN s.status=0 THEN 'Draft' ELSE 'Published' END statusConvertedValue,  \n" +
                "       CASE WHEN s.blanketPOOption=1 THEN 'Use This Blanket PO# for All Releases' WHEN s.blanketPOOption=2 THEN 'Link Future PO(s) to This Blanket PO' WHEN s.blanketPOOption=3 THEN 'Use Blanket PO# and Release#' ELSE '' END blanketPOOptionText,  \n" +
                "       s.blanketPOOption,  \n" +
                "       s.status,  \n" +
                "       s.soDate,  \n" +
                "       s.revisionChangeNote,  \n" +
                "       s.salesCommissionTo,  \n" +
                "       s.intermediateShipmentId,  \n" +
                "       s.freeOnBoardId,  \n" +
                "       s.internalComment as internalCommentSo,  \n" +
                "       s.serialNumber,  \n" +
                "       s.carrierID,  \n" +
                "       s.carrierAccountNumber,  \n" +
                "       s.originalPODate,  \n" +
                "       s.isLegacyPO,  \n" +
                "       CASE WHEN s.isLegacyPO=0 THEN 'No' ELSE   'Yes' END legacyPOText,  \n" +
                "       s.isRmaPO,  \n" +
                "       CASE WHEN s.isRmaPO=0 THEN 'No' ELSE   'Yes' END rmaPOText,  \n" +
                "       s.poRevision,  \n" +
                "       CASE WHEN isBlanketPO=0 THEN 'No' ELSE 'Yes' END blanketPOText,  \n" +
                "       s.isBlanketPO,  \n" +
                "        fun_GetFormattedMfgCode(mg.mfgCode,mg.mfgName,\",v_mfrFormat,\") companyName,  \n" +
                "       mg.mfgName,  \n" +
                "       s.poRevisionDate,  \n" +
                "       fun_getEmployeeNameByEmpID(s.contactPersonID) fullName,  \n" +
                "        s.linkToBlanketPO,  \n" +
                "        CASE WHEN s.linkToBlanketPO=1 THEN 'Yes' ELSE 'No' END linkToBlanketPOText,  \n" +
                "       fun_getGenericCategoryCodeNameByID(s.termsID) termsDisplayText,  \n" +
                "       fun_getGenericCategoryCodeNameByID(s.carrierID) carrierName,  \n" +
                "       fun_getGenericCategoryCodeNameByID(s.shippingMethodID) genCategoryCode,  \n" +
                "       fb.name freeOnBoardName,  \n" +
                "       s.`rmaNumber` AS `rmaNumber`,  \n" +
                "	   s.`isDebitedByCustomer` AS `isDebitedByCustomer`,  \n" +
                "	   (CASE WHEN (s.`isDebitedByCustomer` = 1) THEN 'Yes' ELSE 'No' END) AS `debitedByCustText`,  \n" +
                "       s.`orgPONumber` AS `rmaOrgPONumber`,  \n" +
                "       s.`orgSalesOrderID` AS `orgSalesOrderID`,  \n" +
                "		s.`isReworkRequired` AS `isReworkRequired`,  \n" +
                "       (CASE  WHEN (s.`isReworkRequired` = 1) THEN 'Yes'  ELSE 'No'  END) AS `reworkReqText`,  \n" +
                "	   s.`reworkPONumber` AS `reworkPONumber`,  \n" +
                "      ifnull(sodCnt.totalLineCount,0)  totalSOLines,  \n" +
                "       ifnull(sodCnt.completedLineCount,0) totalCompletedSOLines,  \n" +
                "       (case when sodCnt.totalLineCount is null then 0 else  Round((sodCnt.completedLineCount * 100/sodCnt.totalLineCount),2) end)soCompletionPercentage,  \n" +
                "      (case when sodCnt.canceledLineCount = ifnull(sodCnt.totalLineCount,0) then 'Canceled'  \n" +
                "			when (sodCnt.canceledLineCount + sodCnt.completedLineCount) = ifnull(sodCnt.totalLineCount,0)  then 'Completed'  \n" +
                "            else 'In Progress' end) salesOrderDetStatusConvertedValues,  \n" +
                "      fun_getTotalSoPrice(s.id) soTotalPrice,  \n" +
                "      fun_getTotalInvoicePrice(s.id) soInvoicePrice,  \n" +
                "			fun_getUserNameByID(s.updatedBy) soModifiedBy,  \n" +
                "			fun_getUserNameByID(s.createdBy) soCreatedBy,  \n" +
                "			fun_getRoleByID(s.createByRoleId) createdbyRole,  \n" +
                "			fun_getRoleByID(s.updateByRoleId) updatedbyRole,  \n" +
                "                       fun_ApplyCommonDateTimeFormatByParaValue(s.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdDate,  \n" +
                "		       fun_ApplyCommonDateTimeFormatByParaValue(s.UpdatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') modifyDate  \n" +
                "		       FROM salesordermst s JOIN mfgcodemst mg ON mg.id=s.customerID AND mg.isdeleted=0  \n" +
                "			LEFT JOIN freeonboardmst fb ON fb.id=s.freeOnBoardId AND fb.isdeleted=0  \n" +
                "    LEFT JOIN ( select sod.refSalesOrderID as soId ,  \n" +
                "							sum((case when sod.salesOrderDetStatus = 2 then 1 else 0 end) ) completedLineCount,  \n" +
                "							count(1) totalLineCount,  \n" +
                "                            sum((case when sod.isCancle = 1 then 1 else 0 end)) canceledLineCount  \n" +
                "                            From salesorderdet sod where sod.isDeleted = 0  \n" +
                "                            Group By sod.refSalesOrderID ) sodCnt on sodCnt.soId = s.id  \n" +
                "			WHERE s.isdeleted=0  \n" +
                "			\");  \n" +
                "  \n" +
                "  \n" +
                "		IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY serialNumber DESC\") ;  \n" +
                "		ELSE  \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF (pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "			SET pWhereClause = '1=1' ;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "                IF(pfilterStatus IS NOT NULL AND pfilterStatus != '') THEN  \n" +
                "  \n" +
                "		      SET pWhereClause = CONCAT(pWhereClause, ' AND  FIND_IN_SET(salesOrderDetStatusConvertedValues,''', pfilterStatus ,''')');  \n" +
                "	        END IF;  \n" +
                "	        IF(pfilterPOStatus IS NOT NULL AND pfilterPOStatus != '') THEN  \n" +
                "  \n" +
                "		      SET pWhereClause = CONCAT(pWhereClause, ' AND  FIND_IN_SET(statusConvertedValue,''', pfilterPOStatus ,''')');  \n" +
                "	        END IF;  \n" +
                "	        IF(pcustomerIds IS NOT NULL AND pcustomerIds != '') THEN  \n" +
                "		      SET pWhereClause = CONCAT(pWhereClause, ' AND customerID in (',pcustomerIds,')');  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "			SET pWhereClause = '1=1' ;  \n" +
                "		END IF;  \n" +
                "                IF(pshippingMethodId IS NOT NULL AND pshippingMethodId != '') THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause, ' AND shippingMethodID in (',pshippingMethodId,')');  \n" +
                "		END IF;  \n" +
                "                IF(ptermsIds IS NOT NULL AND ptermsIds != '') THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause, ' AND termsID in (',ptermsIds,')');  \n" +
                "		END IF;  \n" +
                "		IF(psearchposotype IS NOT NULL AND psearchposotext IS NOT NULL)THEN  \n" +
                "			IF(psearchposotype='C')THEN  \n" +
                "				SET pWhereClause = CONCAT(pWhereClause, ' AND (salesOrderNumber  like ''%',psearchposotext,'%'' OR poNumber  like ''%',psearchposotext,'%'')');  \n" +
                "			ELSE  \n" +
                "				SET pWhereClause= CONCAT(pWhereClause,' and (salesOrderNumber  =''',psearchposotext,''' OR poNumber  =''',psearchposotext,''')');  \n" +
                "			END IF;  \n" +
                "		END IF;  \n" +
                "		IF(psearchextPricetype IS NOT NULL AND psearchextPricetext IS NOT NULL)THEN  \n" +
                "			IF(psearchextPricetype='C')THEN  \n" +
                "				SET pWhereClause = CONCAT(pWhereClause, ' AND (soTotalPrice  like ''%',psearchextPricetext,'%'')');  \n" +
                "			ELSE  \n" +
                "				SET pWhereClause= CONCAT(pWhereClause,' and (soTotalPrice  =''',psearchextPricetext,''')');  \n" +
                "			END IF;  \n" +
                "		END IF;  \n" +
                "		IF(pfromDate IS NOT NULL AND ptoDate IS NOT NULL)THEN  \n" +
                "			SET pWhereClause=CONCAT(pWhereClause, ' and (soDate>=''',pfromDate,''' and soDate<=''',ptoDate,''')');  \n" +
                "		ELSEIF(pfromDate IS NOT NULL)THEN  \n" +
                "			SET pWhereClause=CONCAT(pWhereClause, ' and (soDate>=''',pfromDate,''')');  \n" +
                "		ELSEIF(ptoDate IS NOT NULL)THEN  \n" +
                "			SET pWhereClause=CONCAT(pWhereClause, ' and (soDate<=''',ptoDate,''')');  \n" +
                "		END IF;  \n" +
                "        IF(pfromPODate IS NOT NULL AND ptoPODate IS NOT NULL)THEN  \n" +
                "			SET pWhereClause=CONCAT(pWhereClause, ' and (poDate>=''',pfromPODate,''' and poDate<=''',ptoPODate,''')');  \n" +
                "		ELSEIF(pfromPODate IS NOT NULL)THEN  \n" +
                "		   SET pWhereClause=CONCAT(pWhereClause, ' and (poDate>=''',pfromPODate,''')');  \n" +
                "		ELSEIF(ptoPODate IS NOT NULL)THEN  \n" +
                "		   SET pWhereClause=CONCAT(pWhereClause, ' and (poDate<=''',ptoPODate,''')');  \n" +
                "		END IF;  \n" +
                "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "			SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "		ELSE  \n" +
                "			SET rowNumWhere = '';  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		/* to get total count of rows */  \n" +
                "			SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@tempquery,\" ) c where 1=1 and \", pWhereClause);  \n" +
                "  \n" +
                "			PREPARE query2 FROM @SQLStatement2;  \n" +
                "  \n" +
                "			 EXECUTE query2;  \n" +
                "			 DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "			SET @SQLStatement1 = CONCAT(\"select * from ( \", @tempquery,\" ) c  \n" +
                "				where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "  \n" +
                "			PREPARE query1 FROM @SQLStatement1;  \n" +
                "  \n" +
                "			 EXECUTE query1;  \n" +
                "		       DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version ->  *********************************** */
                "DROP TRIGGER /*!50032 IF EXISTS */ `TRG_BI_salesorderdet` ;  \n" +
                "CREATE TRIGGER `TRG_BI_salesorderdet` BEFORE INSERT ON `salesorderdet`  \n" +
                "    FOR EACH ROW BEGIN  \n" +
                "  \n" +
                "              IF(SELECT COUNT(1) FROM salesorderdet WHERE custPOLineNumber=NEW.custPOLineNumber AND isdeleted=0 AND refSalesOrderID=NEW.refSalesOrderID)THEN  \n" +
                "              SIGNAL  SQLSTATE '45000' SET MESSAGE_TEXT='Duplicate entry';  \n" +
                "  \n" +
                "              END IF;  \n" +
                "              IF(SELECT COUNT(1) FROM salesorderdet WHERE lineID=NEW.lineID AND isdeleted=0 AND refSalesOrderID=NEW.refSalesOrderID)THEN  \n" +
                "              SIGNAL  SQLSTATE '45000' SET MESSAGE_TEXT='Duplicate entry';  \n" +
                "  \n" +
                "              END IF;  \n" +
                "  \n" +
                "		IF( (SELECT COUNT(1)  FROM salesordermst sm WHERE sm.isDeleted = 0  \n" +
                "		AND sm.id = NEW.refSalesOrderID) = 0 )   THEN  \n" +
                "		SIGNAL  SQLSTATE '45001' SET MESSAGE_TEXT='Parent information missing for your record.';  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF( (SELECT COUNT(1)  FROM COMPONENT c WHERE c.isDeleted = 0  \n" +
                "		AND c.id = NEW.partID) = 0 )   THEN  \n" +
                "		SIGNAL  SQLSTATE '45001' SET MESSAGE_TEXT='Parent information missing for your record.';  \n" +
                "		END IF;  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version ->  *********************************** */
                "DROP TRIGGER /*!50032 IF EXISTS */ `Trg_AU_salesordermst` ;  \n" +
                "CREATE TRIGGER `Trg_AU_salesordermst` AFTER UPDATE ON `salesordermst`  \n" +
                "    FOR EACH ROW BEGIN  \n" +
                "    IF (IFNULL(OLD.blanketPOOption,0)=3 AND IFNULL(NEW.blanketPOOption,0)!=3) OR (IFNULL(OLD.blanketPOOption,0)!=3 AND IFNULL(NEW.blanketPOOption,0)=3) THEN  \n" +
                "    CREATE TEMPORARY TABLE IF NOT EXISTS tempsalesDet  \n" +
                "       SELECT sd.id FROM salesorderdet sd WHERE sd.refSalesOrderID=NEW.id AND NEW.isDeleted=0;  \n" +
                "       IF(IFNULL(OLD.blanketPOOption,0)=3 AND IFNULL(NEW.blanketPOOption,0)!=3)THEN  \n" +
                "		UPDATE salesshippingmst ss SET ss.poReleaseNumber=NULL WHERE ss.sDetID IN (SELECT sd.id FROM tempsalesDet sd) AND ss.isdeleted=0;  \n" +
                "		UPDATE salesorderdet sd SET sd.requestedBPOStartDate=NULL,sd.blanketPOEndDate=NULL WHERE sd.refSalesOrderID=NEW.id AND NEW.isDeleted=0;  \n" +
                "       END IF;  \n" +
                "       IF(IFNULL(OLD.blanketPOOption,0)=2 AND IFNULL(NEW.blanketPOOption,0)!=2)THEN  \n" +
                "		UPDATE salesorderdet sd SET sd.requestedBPOStartDate=NULL,sd.blanketPOEndDate=NULL WHERE sd.refSalesOrderID=NEW.id AND NEW.isDeleted=0;  \n" +
                "       END IF;  \n" +
                "       IF(IFNULL(OLD.blanketPOOption,0)!=3 AND IFNULL(NEW.blanketPOOption,0)=3)THEN  \n" +
                "		UPDATE salesshippingmst ss SET ss.poReleaseNumber=CONCAT(new.poNumber,'-',ss.customerReleaseLine) WHERE ss.sDetID IN (SELECT sd.id FROM tempsalesDet sd) AND ss.isdeleted=0;  \n" +
                "       END IF;  \n" +
                "      DROP TEMPORARY TABLE IF EXISTS tempsalesDet;  \n" +
                "    END IF;  \n" +
                "    IF IFNULL(OLD.salesOrderNumber,0) != IFNULL(NEW.salesOrderNumber,0) THEN  \n" +
                "       UPDATE customer_packingslip SET soNumber=NEW.salesOrderNumber,updatedBy=NEW.updatedBy,updatedAt=NEW.updatedAt WHERE refSalesOrderID=NEW.id;  \n" +
                "       INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "       VALUES(\"SALESORDERMST\",CAST(new.id AS CHAR),'SALESORDERNUMBER',CAST(OLD.salesOrderNumber AS CHAR),  \n" +
                "       CAST(new.salesOrderNumber AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.poNumber,0) != IFNULL(NEW.poNumber,0) THEN  \n" +
                "    UPDATE customer_packingslip SET poNumber=NEW.poNumber,updatedBy=NEW.updatedBy,updatedAt=NEW.updatedAt WHERE refSalesOrderID=NEW.id;  \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "    VALUES(\"SALESORDERMST\",CAST(new.id AS CHAR),'PONUMBER',CAST(OLD.poNumber AS CHAR),  \n" +
                "       CAST(new.poNumber AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "    IF IFNULL(OLD.poDate,0) != IFNULL(NEW.poDate,0) THEN  \n" +
                "    UPDATE customer_packingslip SET poDate=NEW.poDate,updatedBy=NEW.updatedBy,updatedAt=NEW.updatedAt WHERE refSalesOrderID=NEW.id;  \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "    VALUES(\"SALESORDERMST\",CAST(new.id AS CHAR),'PODATE',CAST(OLD.poDate AS CHAR),  \n" +
                "       CAST(new.poDate AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "    IF IFNULL(OLD.customerID,0) != IFNULL(NEW.customerID,0) THEN  \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "    VALUES(\"SALESORDERMST\",CAST(new.id AS CHAR),'CUSTOMERID', CAST(OLD.customerID AS CHAR),  \n" +
                "       CAST(new.customerID AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "    IF IFNULL(OLD.contactPersonID,0) != IFNULL(NEW.contactPersonID,0) THEN  \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "    VALUES(\"SALESORDERMST\",CAST(new.id AS CHAR),'CONTACTPERSONID', CAST(OLD.contactPersonID AS CHAR),  \n" +
                "       CAST(new.contactPersonID AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "    IF IFNULL(OLD.billingAddressID,0) != IFNULL(NEW.billingAddressID,0) THEN  \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "    VALUES(\"SALESORDERMST\",CAST(new.id AS CHAR),'BILLINGADDRESSID', CAST(OLD.billingAddressID AS CHAR),  \n" +
                "       CAST(new.billingAddressID AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "    IF IFNULL(OLD.shippingAddressID ,0) != IFNULL(NEW.shippingAddressID ,0) THEN  \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "    VALUES(\"SALESORDERMST\",CAST(new.id AS CHAR),'SHIPPINGADDRESSID', CAST(OLD.shippingAddressID AS CHAR),  \n" +
                "       CAST(new.shippingAddressID AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "    IF IFNULL(OLD.shippingMethodID ,0) != IFNULL(NEW.shippingMethodID ,0) THEN  \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "    VALUES(\"SALESORDERMST\",CAST(new.id AS CHAR),'SHIPPINGMETHODID', CAST(OLD.shippingMethodID AS CHAR),  \n" +
                "       CAST(new.shippingMethodID AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "    IF IFNULL(OLD.revision ,0) != IFNULL(NEW.revision ,0) THEN  \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "    VALUES(\"SALESORDERMST\",CAST(new.id AS CHAR),'REVISION', CAST(OLD.revision AS CHAR),  \n" +
                "       CAST(new.revision AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "    IF IFNULL(OLD.shippingComment ,0) != IFNULL(NEW.shippingComment ,0) THEN  \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "    VALUES(\"SALESORDERMST\",CAST(new.id AS CHAR),'SHIPPINGCOMMENT', CAST(OLD.shippingComment AS CHAR),  \n" +
                "       CAST(new.shippingComment AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "     IF IFNULL(OLD.internalComment ,0) != IFNULL(NEW.internalComment ,0) THEN  \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "    VALUES(\"SALESORDERMST\",CAST(new.id AS CHAR),'INTERNALCOMMENT', CAST(OLD.internalComment AS CHAR),  \n" +
                "       CAST(new.internalComment AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "    IF IFNULL(OLD.termsID ,0) != IFNULL(NEW.termsID ,0) THEN  \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "    VALUES(\"SALESORDERMST\",CAST(new.id AS CHAR),'TERMSID', CAST(OLD.termsID AS CHAR),  \n" +
                "       CAST(new.termsID AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "    IF IFNULL(OLD.status ,0) != IFNULL(NEW.status ,0) THEN  \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "    VALUES(\"SALESORDERMST\",CAST(new.id AS CHAR),'STATUS', CAST(OLD.status AS CHAR),  \n" +
                "       CAST(new.status AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "    IF IFNULL(OLD.soDate ,0) != IFNULL(NEW.soDate ,0) THEN  \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "     VALUES(\"SALESORDERMST\",CAST(new.id AS CHAR),'SODATE', CAST(OLD.soDate AS CHAR),  \n" +
                "       CAST(new.soDate AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "    IF IFNULL(OLD.revisionChangeNote ,0) != IFNULL(NEW.revisionChangeNote ,0) THEN  \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "     VALUES(\"SALESORDERMST\",CAST(new.id AS CHAR),'REVISIONCHANGENOTE', CAST(OLD.revisionChangeNote AS CHAR),  \n" +
                "       CAST(new.revisionChangeNote AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "    IF IFNULL(OLD.isBlanketPO ,0) != IFNULL(NEW.isBlanketPO ,0) THEN  \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "     VALUES(\"SALESORDERMST\",CAST(new.id AS CHAR),'BLANKETPO', CASE WHEN old.isBlanketPO=1 THEN 'Yes' ELSE 'No' END,  \n" +
                "      CASE WHEN new.isBlanketPO=1 THEN 'Yes' ELSE 'No' END, fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "    IF IFNULL(OLD.poRevision ,0) != IFNULL(NEW.poRevision ,0) THEN  \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "     VALUES(\"SALESORDERMST\",CAST(new.id AS CHAR),'POREVISION', CAST(OLD.poRevision AS CHAR),  \n" +
                "      CAST(NEW.poRevision AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "    IF IFNULL(OLD.isDeleted ,0) != IFNULL(NEW.isDeleted ,0) THEN  \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "     VALUES(\"SALESORDERMST\",CAST(new.id AS CHAR),'', CAST(OLD.isDeleted AS CHAR),  \n" +
                "       CAST(new.isDeleted AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "    IF IFNULL(OLD.isRmaPO ,0) != IFNULL(NEW.isRmaPO ,0) THEN  \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "     VALUES(\"SALESORDERMST\",CAST(new.id AS CHAR),'RMAPO', CASE WHEN old.isRmaPO=1 THEN 'Yes' ELSE 'No' END,  \n" +
                "       CASE WHEN new.isRmaPO=1 THEN 'Yes' ELSE 'No' END, fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "    IF IFNULL(OLD.isLegacyPO ,0) != IFNULL(NEW.isLegacyPO ,0) THEN  \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "     VALUES(\"SALESORDERMST\",CAST(new.id AS CHAR),'LEGACYPO', CASE WHEN old.isLegacyPO=1 THEN 'Yes' ELSE 'No' END,  \n" +
                "       CASE WHEN new.isLegacyPO=1 THEN 'Yes' ELSE 'No' END, fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "    IF IFNULL(OLD.originalPODate ,0) != IFNULL(NEW.originalPODate ,0) THEN  \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "     VALUES(\"SALESORDERMST\",CAST(new.id AS CHAR),'ORGPODATE', CAST(DATE_FORMAT(OLD.originalPODate, \"%m/%d/%Y\") AS CHAR),  \n" +
                "       CAST(DATE_FORMAT(new.originalPODate, \"%m/%d/%Y\") AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "    IF IFNULL(OLD.rmaNumber ,0) != IFNULL(NEW.rmaNumber ,0) THEN  \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "     VALUES(\"SALESORDERMST\",CAST(new.id AS CHAR),'RMANUMBER', CAST(OLD.rmaNumber AS CHAR),  \n" +
                "       CAST(new.rmaNumber AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "    IF IFNULL(OLD.isDebitedByCustomer ,0) != IFNULL(NEW.isDebitedByCustomer ,0) THEN  \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "     VALUES(\"SALESORDERMST\",CAST(new.id AS CHAR),'DEBITBYCUST', CASE WHEN OLD.isDebitedByCustomer=1 THEN 'Yes' ELSE 'No' END,  \n" +
                "        CASE WHEN new.isDebitedByCustomer=1 THEN 'Yes' ELSE 'No' END, fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "    IF IFNULL(OLD.orgPONumber ,0) != IFNULL(NEW.orgPONumber ,0) THEN  \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "     VALUES(\"SALESORDERMST\",CAST(new.id AS CHAR),'ORGPONUMBER', CAST(OLD.orgPONumber AS CHAR),  \n" +
                "       CAST(new.orgPONumber AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "    IF IFNULL(OLD.isReworkRequired ,0) != IFNULL(NEW.isReworkRequired ,0) THEN  \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "     VALUES(\"SALESORDERMST\",CAST(new.id AS CHAR),'REWORKREQ', CASE WHEN OLD.isReworkRequired=1 THEN 'Yes' ELSE 'No' END,  \n" +
                "        CASE WHEN new.isReworkRequired=1 THEN 'Yes' ELSE 'No' END, fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "    IF IFNULL(OLD.reworkPONumber ,0) != IFNULL(NEW.reworkPONumber ,0) THEN  \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "     VALUES(\"SALESORDERMST\",CAST(new.id AS CHAR),'REWORKPONUMBER', CAST(OLD.reworkPONumber AS CHAR),  \n" +
                "       CAST(new.reworkPONumber AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "    IF IFNULL(OLD.blanketPOOption ,0) != IFNULL(NEW.blanketPOOption ,0) THEN  \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "     VALUES(\"SALESORDERMST\",CAST(new.id AS CHAR),'BLANKETPOOPTION', CASE WHEN OLD.blanketPOOption=1 THEN 'Use This Blanket PO# for All Releases' WHEN OLD.blanketPOOption=2 THEN 'Link Future PO(s) to This Blanket PO' WHEN OLD.blanketPOOption=3 THEN 'Use Blanket PO# and Release#' ELSE '' END,  \n" +
                "       CASE WHEN NEW.blanketPOOption=1 THEN 'Use This Blanket PO# for All Releases' WHEN NEW.blanketPOOption=2 THEN 'Link Future PO(s) to This Blanket PO' WHEN NEW.blanketPOOption=3 THEN 'Use Blanket PO# and Release#' ELSE '' END, fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "    IF IFNULL(OLD.linkToBlanketPO ,0) != IFNULL(NEW.linkToBlanketPO ,0) THEN  \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "     VALUES(\"SALESORDERMST\",CAST(new.id AS CHAR),'LINKTOBLANKETPO', CASE WHEN old.linkToBlanketPO=1 THEN 'Yes' ELSE 'No' END,  \n" +
                "       CASE WHEN new.linkToBlanketPO=1 THEN 'Yes' ELSE 'No' END, fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version ->  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetAllOtherComponentList` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetAllOtherComponentList`(  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "      DECLARE pmfgCodeID INT;  \n" +
                "      DECLARE vMfgCodeIds VARCHAR(50) DEFAULT '';  \n" +
                "      DECLARE vformatType INT;  \n" +
                "      SELECT id INTO pmfgCodeID FROM mfgcodemst WHERE iscompany=1  AND isdeleted=0;  \n" +
                "  \n" +
                "  \n" +
                "      SELECT fun_getMFGCodeNameFormat()INTO vformatType;  \n" +
                "  \n" +
                "      SELECT GROUP_CONCAT(refMfgCodeMstID) INTO vMfgCodeIds  \n" +
                "      FROM supplier_mapping_mst  \n" +
                "      WHERE supplierID  = pmfgCodeID AND isDeleted =0 AND isCustMapping=0;  \n" +
                "  \n" +
                "      #get component having mfg as iscompany and part type other  \n" +
                "      SELECT c.pidcode,c.id,c.mfgPN,rr.name AS rohsName,rr.rohsIcon,c.frequency,c.mfgPNDescription,c.category,c.partType,  \n" +
                "      cp.name AS packagingName,  \n" +
                "      c.packagingId,u.unitName,c.rohsStatusID,mc.mfgCode,mc.mfgName,c.mfgcodeid , pmfgCodeID   fcaCompId , c.partStatus,  \n" +
                "      c.frequencyType,fun_GetFormattedMfgCode(mc.mfgCode,mc.mfgName,vformatType) AS mfgformatCode  \n" +
                "      FROM COMPONENT c JOIN rfq_rohsmst rr ON rr.id=c.rohsStatusID  \n" +
                "      LEFT JOIN component_packagingmst cp ON cp.id=c.packagingId  \n" +
                "      LEFT JOIN uoms u ON u.id=c.uom  \n" +
                "      JOIN mfgcodemst mc ON  mc.id=c.mfgcodeid  \n" +
                "      WHERE c.partType=4  \n" +
                "      AND c.isdeleted=0  \n" +
                "      AND (c.mfgcodeid=pmfgCodeID OR FIND_IN_SET(c.mfgcodeid ,vMfgCodeIds))  \n" +
                "      AND c.isGoodPart  = 1;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version ->  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_getBlanketPOAssyList` ;  \n" +
                "CREATE PROCEDURE `Sproc_getBlanketPOAssyList`(  \n" +
                "pCustomerID INT,  \n" +
                "pPartID INT,  \n" +
                "pblanketPOID INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	         SELECT  \n" +
                "	          c.mfgPN,  \n" +
                "		  c.PIDCode,  \n" +
                "		  c.id partID,  \n" +
                "		  sd.qty,  \n" +
                "		  IFNULL(bp.assignPOQty,0) assignPOQty,  \n" +
                "		  (sd.qty - IFNULL(bp. assignPOQty,0))AS pendingToAssign,  \n" +
                "		  sm.salesOrderNumber,  \n" +
                "		  sm.poNumber,  \n" +
                "		  sm.id AS soID,  \n" +
                "		  sm.poDate,  \n" +
                "		  sm.poRevision,  \n" +
                "		  sm.revision,  \n" +
                "		  sd.price,  \n" +
                "		  sm.poRevisionDate,  \n" +
                "		  sd. quotefrom,  \n" +
                "		  sd.refRFQQtyTurnTimeID,  \n" +
                "		  sd.refAssyQtyTurnTimeID,  \n" +
                "		  sd.refRFQGroupID,  \n" +
                "		   sd.id,  \n" +
                "		   sd.quoteNumber,  \n" +
                "		   sd.assyQtyTurnTimeText,  \n" +
                "		 CONCAT('(',mg.mfgcode,') ',c.mfgPN,' | ',sm.salesOrderNumber,' | ',sm.poNumber) blanketAssy  \n" +
                "	         FROM salesorderdet sd  \n" +
                "	         JOIN COMPONENT c ON c.id=sd.partID AND c.isdeleted=0  \n" +
                "	         JOIN mfgcodemst mg ON mg.id=c.mfgcodeid AND mg.isdeleted=0  \n" +
                "	         JOIN salesordermst sm ON sm.id=sd.refSalesOrderID AND sm.isdeleted=0  \n" +
                "	         LEFT JOIN (  \n" +
                "	         SELECT  \n" +
                "			SUM(qty) AS assignPOQty,  \n" +
                "			sd.partID compID,sd.refBlanketPOID FROM salesorderdet sd JOIN salesordermst sm ON sm.id=sd.refSalesOrderID AND sm.isdeleted=0  \n" +
                "			WHERE sm.isBlanketPO=0 AND sd.refBlanketPOID IS NOT NULL AND sm.customerID=pCustomerID AND sd.partID=pPartID AND sd.isdeleted=0 GROUP BY sd.partID,sd.refBlanketPOID  \n" +
                "	         ) bp ON bp.refBlanketPOID=sd.id  \n" +
                "	         WHERE sm.customerID=pCustomerID AND sm.status=1 AND sd.partID=pPartID AND sm.blanketPOOption=2 AND sm.isBlanketPO=1 AND refSODetID IS NULL  \n" +
                "	                AND sd.isdeleted=0 AND (sd.id=IFNULL(pblanketPOID,0) OR (sd.qty - IFNULL(bp. assignPOQty,0))>0);  \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version ->  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetNotAssignedFuturePOList` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetNotAssignedFuturePOList`(  \n" +
                "	IN pPartID INT(11),  \n" +
                "	IN pcustomerID INT(11)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "         SELECT sm.salesOrderNumber,sm.poNumber,sm.poDate,sd.qty,sd.price,sd.custPOLineNumber,sm.revision,sm.id,sm.poRevision,sd.id AS soID FROM salesorderdet sd JOIN salesordermst sm ON sm.id=sd.refSalesOrderID AND sm.isdeleted=0  \n" +
                "                LEFT JOIN customer_packingslip_det cpd ON sd.id=cpd.refSalesorderDetid AND cpd.isDeleted=0  \n" +
                "                WHERE sm.customerID=pcustomerID AND sd.partID=pPartID AND sm.status=1 AND salesOrderDetStatus=1  \n" +
                "                AND cpd.refSalesorderDetid IS NULL AND sd.refBlanketPOID IS NULL AND sm.isBlanketPO=0 AND sd.isDeleted=0;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version ->  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_removeBlanketPOLinkFuturePOOption` ;  \n" +
                "CREATE PROCEDURE `Sproc_removeBlanketPOLinkFuturePOOption`(  \n" +
                "		IN pSoDetID INT,  \n" +
                "		IN pBlanketPOID INT,  \n" +
                "		IN pisBPORemove TINYINT,  \n" +
                "		IN pUserID VARCHAR(10),  \n" +
                "		IN pUserRoleID VARCHAR(10),  \n" +
                "		IN punlink TINYINT  \n" +
                "	)  \n" +
                "BEGIN  \n" +
                "  \n" +
                "                IF(pisBPORemove=1)THEN  \n" +
                "  \n" +
                "                 CREATE TEMPORARY TABLE IF NOT EXISTS tempBlanketPOTbl AS  \n" +
                "                  SELECT shippingID FROM salesshippingmst WHERE  sDetID=pSoDetID ;  \n" +
                "  \n" +
                "                    UPDATE salesshippingmst  \n" +
                "                   SET isdeleted=1,  \n" +
                "                   deletedAt=CURRENT_TIMESTAMP,  \n" +
                "                   deletedBy=pUserID,  \n" +
                "                   deleteByRoleId=pUserRoleID  \n" +
                "                   WHERE refShippingLineID IN (SELECT shippingID FROM tempBlanketPOTbl) AND sDetID=pBlanketPOID;  \n" +
                "  \n" +
                "                DROP TEMPORARY TABLE IF EXISTS tempBlanketPOTbl;  \n" +
                "  \n" +
                "                IF(punlink=1)THEN  \n" +
                "                        UPDATE salesorderdet SET refBlanketPOID=(NULL),updatedBy=pUserID, updateByRoleId= pUserRoleID WHERE id=pSoDetID;  \n" +
                "  \n" +
                "                END IF;  \n" +
                "                END IF;  \n" +
                "  \n" +
                "	END;  \n" +
                /* **************************** Add Script Version ->  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1274,'1.00','V1',' Blanket PO Detail-CC '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1274:
            allDbChangesArray.push(
                /* **************************** New Script -> 27-01-2022  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_SaveDuplicateSalesOrder` ;  \n" +
                "CREATE PROCEDURE `Sproc_SaveDuplicateSalesOrder`(  \n" +
                "		IN pSOID INT,  \n" +
                "		IN pSONumber VARCHAR(100),  \n" +
                "		IN pPONumber VARCHAR(100),  \n" +
                "		IN pPODate DATE,  \n" +
                "		IN pSODate DATE,  \n" +
                "		IN puserID VARCHAR(10),  \n" +
                "		IN puserRoleID VARCHAR(10),  \n" +
                "		IN pSerialNumber VARCHAR(50),  \n" +
                "		IN pisKeepPO TINYINT,  \n" +
                "		IN ppoRevision VARCHAR(8),  \n" +
                "		IN ppoRevisionDate DATE  \n" +
                "	)  \n" +
                "BEGIN  \n" +
                "		 DECLARE vNewSOID INT;  \n" +
                "		 DECLARE vIndex INT;  \n" +
                "		 DECLARE vcount INT;  \n" +
                "		 DECLARE vsalesIndex INT;  \n" +
                "		 DECLARE vsalescount INT;  \n" +
                "		 DECLARE vOldSalesOrderDetID INT;  \n" +
                "		 DECLARE vNewSalesOrderDetID INT;  \n" +
                "		 DECLARE vOldSalesCommissionID INT;  \n" +
                "		 DECLARE vNewSalesCommissionID INT;  \n" +
                "		 DECLARE vPartID INT;  \n" +
                "		 DECLARE vOldPODate DATE;  \n" +
                "  \n" +
                "		 -- get old po date  \n" +
                "		 SELECT poDate INTO vOldPODate FROM salesordermst WHERE id=pSOID;  \n" +
                "			-- insert sales order header detail  \n" +
                "		INSERT INTO salesordermst(salesOrderNumber,poNumber,poDate,customerID,contactPersonID,billingAddressID,billingAddress,billingContactPerson,billingContactPersonID,shippingAddressID,shippingAddress,shippingContactPerson,shippingContactPersonID,shippingMethodID,revision,termsID,`status`,createdBy,  \n" +
                "		updatedBy,soDate,revisionChangeNote,documentPath,createByRoleId,updateByRoleId,salesCommissionTo,intermediateShipmentId,intermediateAddress,intermediateContactPerson,intermediateContactPersonID,freeOnBoardId,internalComment,serialNumber,carrierID,carrierAccountNumber,  \n" +
                "		poRevision,isBlanketPO,isLegacyPO,isRmaPO,shippingComment,poRevisionDate)  \n" +
                "		SELECT pSONumber,pPONumber,pPODate,customerID,contactPersonID,billingAddressID,billingAddress,billingContactPerson,billingContactPersonID,shippingAddressID,shippingAddress,shippingContactPerson,shippingContactPersonID,shippingMethodID,'00',termsID,0,puserID,  \n" +
                "		 puserID,pSODate,'',documentPath,puserRoleID,puserRoleID,salesCommissionTo,intermediateShipmentId,intermediateAddress,intermediateContactPerson,intermediateContactPersonID,freeOnBoardId,internalComment,pSerialNumber,carrierID,carrierAccountNumber,  \n" +
                "		 ppoRevision,0,0,0,shippingComment,ppoRevisionDate FROM salesordermst WHERE id=pSOID;  \n" +
                "  \n" +
                "				SELECT LAST_INSERT_ID() INTO vNewSOID;  \n" +
                "  \n" +
                "				CREATE TEMPORARY TABLE IF NOT EXISTS tempSalesOrder AS  \n" +
                "  \n" +
                "				SELECT sod.id,ROW_NUMBER() OVER (PARTITION BY sod.refsalesOrderID) rowNumber,sod.partID FROM salesorderdet sod  \n" +
                "					JOIN COMPONENT c ON c.id = sod.partID AND c.partStatus != -3  \n" +
                "					WHERE sod.refsalesOrderID=pSOID AND sod.isdeleted=0 ORDER BY sod.partCategory DESC;  \n" +
                "  \n" +
                "				SELECT COUNT(1) INTO vcount FROM tempSalesOrder;  \n" +
                "  \n" +
                "				SET vIndex=1;  \n" +
                "  \n" +
                "			  WHILE(vIndex <= vcount) DO  \n" +
                "			   -- get old sales order detail id  \n" +
                "				SELECT id,partID INTO vOldSalesOrderDetID,vPartID FROM tempSalesOrder WHERE rowNumber=(vIndex);  \n" +
                "  \n" +
                "				-- insert new sales order detail  \n" +
                "	  IF(pisKeepPO=1)THEN  \n" +
                "				INSERT INTO salesorderdet(refSalesOrderID,qty,price,shippingQty,remark,createdBy,updatedBy,materialTentitiveDocDate,prcNumberofWeek,isHotJob,materialDueDate,  \n" +
                "				partID,isCancle,tentativeBuild,uom,lineID,createByRoleId,updateByRoleId,refRFQGroupID,refRFQQtyTurnTimeID,salesCommissionTo,custPOLineNumber,partCategory,salesOrderDetStatus,  \n" +
                "				 isSkipKitCreation,partDescription,quoteNumber,internalComment,quoteFrom,refAssyQtyTurnTimeID,assyQtyTurnTimeText,isCustomerConsign,originalPOQty,frequency,frequencyType)  \n" +
                "  \n" +
                "			 SELECT vNewSOID,qty,price,shippingQty,remark,puserID,puserID,DATE_ADD( pPODate, INTERVAL DATEDIFF(materialTentitiveDocDate, vOldPODate) DAY),prcNumberofWeek,isHotJob,DATE_ADD( pPODate, INTERVAL DATEDIFF(materialDueDate, vOldPODate) DAY),  \n" +
                "			  partID,0,tentativeBuild,uom,lineID,puserRoleID,puserRoleID,refRFQGroupID,refRFQQtyTurnTimeID,salesCommissionTo,custPOLineNumber,partCategory,1,  \n" +
                "			  1,partDescription,quoteNumber,internalComment,quoteFrom,refAssyQtyTurnTimeID,assyQtyTurnTimeText,isCustomerConsign,originalPOQty,frequency,frequencyType FROM salesorderdet WHERE id=vOldSalesOrderDetID;  \n" +
                "	  ELSE  \n" +
                "	  INSERT INTO salesorderdet(refSalesOrderID,qty,price,shippingQty,remark,createdBy,updatedBy,materialTentitiveDocDate,prcNumberofWeek,isHotJob,materialDueDate,  \n" +
                "				partID,isCancle,tentativeBuild,uom,lineID,createByRoleId,updateByRoleId,refRFQGroupID,refRFQQtyTurnTimeID,salesCommissionTo,custPOLineNumber,partCategory,salesOrderDetStatus,  \n" +
                "				 isSkipKitCreation,partDescription,quoteNumber,internalComment,quoteFrom,refAssyQtyTurnTimeID,assyQtyTurnTimeText,isCustomerConsign,originalPOQty,frequency,frequencyType)  \n" +
                "  \n" +
                "			 SELECT vNewSOID,sod.qty,sod.price,sod.shippingQty,  \n" +
                "			 (SELECT GROUP_CONCAT(im.requirement SEPARATOR '  \n" +
                "	')  FROM componenet_inspection_requirement_det cid  \n" +
                "			   JOIN inspection_mst im ON cid.inspectionRequirementId=im.id AND cid.isdeleted=0  \n" +
                "			   WHERE cid.partID=sod.partID AND im.requiementType='C' AND cid.category='S' AND im.isdeleted=0),puserID,puserID,DATE_ADD( pPODate, INTERVAL DATEDIFF(sod.materialTentitiveDocDate, vOldPODate) DAY),sod.prcNumberofWeek,sod.isHotJob,DATE_ADD( pPODate, INTERVAL DATEDIFF(sod.materialDueDate, vOldPODate) DAY),  \n" +
                "			   sod.partID,0,sod.tentativeBuild,sod.uom,sod.lineID,puserRoleID,puserRoleID,sod.refRFQGroupID,sod.refRFQQtyTurnTimeID,sod.salesCommissionTo,sod.custPOLineNumber,sod.partCategory,1,  \n" +
                "			   1,c.mfgPNDescription,sod.quoteNumber,(SELECT GROUP_CONCAT(arc.comment SEPARATOR '  \n" +
                "	')  FROM assembly_revision_comments arc  \n" +
                "			   WHERE arc.partID=sod.partID AND arc.isdeleted=0),sod.quoteFrom,sod.refAssyQtyTurnTimeID,sod.assyQtyTurnTimeText,sod.isCustomerConsign,sod.originalPOQty,sod.frequency,sod.frequencyType FROM salesorderdet sod JOIN COMPONENT c ON c.id=sod.partID  \n" +
                "			 WHERE sod.id=vOldSalesOrderDetID;  \n" +
                "			 END IF;  \n" +
                "  \n" +
                "			 -- new purchase order detail id  \n" +
                "			 SELECT LAST_INSERT_ID() INTO vNewSalesOrderDetID;  \n" +
                "  \n" +
                "			  -- to save release details  \n" +
                "				  INSERT INTO salesshippingmst (sDetID,qty,unitMeaser,shippingDate,shippingMethodID,shippingAddressID,shippingContactPersonID,DESCRIPTION,priority,createdBy,updatedBy,  \n" +
                "		 releaseNotes,promisedShipDate,createByRoleId,updateByRoleId,releaseNumber,requestedDockDate,carrierID,carrierAccountNumber,customerReleaseLine,  \n" +
                "		 revisedRequestedDockDate,revisedRequestedShipDate,revisedRequestedPromisedDate,isAgreeToShip)  \n" +
                "  \n" +
                "		SELECT vNewSalesOrderDetID,qty,unitMeaser,DATE_ADD( pPODate, INTERVAL DATEDIFF(shippingDate, vOldPODate) DAY),shippingMethodID,shippingAddressID,shippingContactPersonID,DESCRIPTION,priority,puserID,puserID,  \n" +
                "		releaseNotes, DATE_ADD( pPODate, INTERVAL DATEDIFF(promisedShipDate, vOldPODate) DAY),puserRoleID,puserRoleID,releaseNumber,DATE_ADD( pPODate, INTERVAL DATEDIFF(requestedDockDate, vOldPODate) DAY),carrierID,carrierAccountNumber,customerReleaseLine,  \n" +
                "		  DATE_ADD( pPODate, INTERVAL DATEDIFF(revisedRequestedDockDate, vOldPODate) DAY),DATE_ADD( pPODate, INTERVAL DATEDIFF(revisedRequestedShipDate, vOldPODate) DAY),DATE_ADD( pPODate, INTERVAL DATEDIFF(revisedRequestedPromisedDate, vOldPODate) DAY),isAgreeToShip  \n" +
                "		FROM  \n" +
                "		salesshippingmst  \n" +
                "		WHERE sDetID= vOldSalesOrderDetID AND isdeleted=0;  \n" +
                "  \n" +
                "				-- insert other charges detail for new po date  \n" +
                "				 INSERT INTO salesorder_otherexpense_details(refSalesOrderDetID,partID,qty,price,frequency,lineComment,lineInternalComment,createdBy,updatedBy,createByRoleId,updateByRoleId,frequencyType)  \n" +
                "			 SELECT  vNewSalesOrderDetID,partID,qty,price,frequency,lineComment,lineInternalComment,puserID,puserID,puserRoleID,puserRoleID,frequencyType FROM salesorder_otherexpense_details  \n" +
                "			 WHERE refSalesOrderDetID=vOldSalesOrderDetID AND isdeleted=0;  \n" +
                "			            -- sales commission details  \n" +
                "			            CREATE TEMPORARY TABLE IF NOT EXISTS tempSalesCommissionDetails AS  \n" +
                "  \n" +
                "				SELECT id,ROW_NUMBER() OVER (PARTITION BY refSalesOrderDetID) rowNumber FROM salesorderdet_commission_attribute_mstdet  \n" +
                "					WHERE refSalesOrderDetID=vOldSalesOrderDetID AND isdeleted=0;  \n" +
                "  \n" +
                "				      SELECT COUNT(1) INTO vsalescount FROM tempSalesCommissionDetails;  \n" +
                "  \n" +
                "				      SET vsalesIndex=1;  \n" +
                "  \n" +
                "				      WHILE(vsalesIndex <= vsalescount) DO  \n" +
                "				      SELECT id INTO vOldSalesCommissionID FROM tempSalesCommissionDetails WHERE rowNumber=(vsalesIndex);  \n" +
                "  \n" +
                "				        INSERT INTO salesorderdet_commission_attribute_mstdet(refSalesOrderDetID,unitPrice,commissionPercentage,commissionValue,quoted_commissionPercentage,quoted_commissionValue,quoted_unitPrice,poQty,  \n" +
                "				        quotedQty,`type`,commissionCalculateFrom,refComponentSalesPriceBreakID,partID,salesCommissionNotes,createdBy,updatedBy,createByRoleId,updateByRoleId,rfqAssyID)  \n" +
                "  \n" +
                "				        SELECT vNewSalesOrderDetID,unitPrice,commissionPercentage,commissionValue,quoted_commissionPercentage,quoted_commissionValue,quoted_unitPrice,poQty,  \n" +
                "				        quotedQty,`type`,commissionCalculateFrom,refComponentSalesPriceBreakID,partID,salesCommissionNotes,puserID,puserID,puserRoleID,puserRoleID,rfqAssyID FROM salesorderdet_commission_attribute_mstdet  \n" +
                "				        WHERE id=vOldSalesCommissionID;  \n" +
                "  \n" +
                "				        SELECT LAST_INSERT_ID() INTO vNewSalesCommissionID;  \n" +
                "				        INSERT INTO salesorderdet_commission_attribute(refSalesorderdetID,refSalesCommissionID,unitPrice,refQuoteAttributeId,commissionPercentage,commissionValue,org_commissionPercentage,org_commissionValue,createdBy,updatedBy,  \n" +
                "				        createByRoleId,updateByRoleId,category,partID,refComponentSalesPriceBreakID,org_unitPrice)  \n" +
                "				        SELECT vNewSalesOrderDetID,vNewSalesCommissionID,unitPrice,refQuoteAttributeId,commissionPercentage,commissionValue,org_commissionPercentage,org_commissionValue,puserID,puserID,  \n" +
                "				        puserRoleID,puserRoleID,category,partID,refComponentSalesPriceBreakID,org_unitPrice FROM salesorderdet_commission_attribute  \n" +
                "				        WHERE refSalesCommissionID=vNewSalesCommissionID AND isdeleted=0;  \n" +
                "  \n" +
                "				      SET vsalesIndex  =vsalesIndex+1;  \n" +
                "				      END WHILE;  \n" +
                "                                  -- end sales commission  \n" +
                "				  SET vIndex  =vIndex+1;  \n" +
                "			  END WHILE;  \n" +
                "                       				-- update sales order detail for other charges  \n" +
                "                       		CREATE TEMPORARY TABLE IF NOT EXISTS tempOtherCharges AS  \n" +
                "                       		     SELECT sod.id AS sdetid,sod.refSODetID,sod.lineID FROM salesorderdet sod WHERE sod.refSalesOrderID=pSOID AND sod.isdeleted=0;  \n" +
                "  \n" +
                "                       		     -- update sales order detail for other charges  \n" +
                "                       		CREATE TEMPORARY TABLE IF NOT EXISTS tempNewOtherCharges AS  \n" +
                "                       		     SELECT sod.id AS sdetid,sod.refSODetID,sod.lineID FROM salesorderdet sod WHERE sod.refSalesOrderID=vNewSOID AND sod.isdeleted=0;  \n" +
                "  \n" +
                "                       		   CREATE TEMPORARY TABLE IF NOT EXISTS tempOtherChargesDet AS  \n" +
                "                       		   SELECT * FROM tempOtherCharges;  \n" +
                "  \n" +
                "				UPDATE salesorderdet AS sd ,tempOtherCharges AS b  \n" +
                "				SET sd.refSODetID=(SELECT tno.sdetid FROM tempNewOtherCharges tno WHERE tno.lineID IN (SELECT sdd.lineID FROM tempOtherChargesDet sdd WHERE sdd.sdetid=b.refSODetID))  \n" +
                "				WHERE sd.lineID=b.lineID AND sd.refSalesOrderID=vNewSOID AND sd.isdeleted=0;  \n" +
                "  \n" +
                "				-- update sales order release line  \n" +
                "				UPDATE salesorderdet sd SET sd.refSOReleaseLineID=(SELECT ss.shippingID FROM salesshippingmst ss WHERE ss.sDetID=sd.id LIMIT 1)  \n" +
                "				WHERE sd.frequency=2 AND sd.refSODetID IS NOT NULL AND sd.refSalesOrderID=vNewSOID;  \n" +
                "  \n" +
                "				-- update sales order release line  \n" +
                "				UPDATE salesorder_otherexpense_details sd SET sd.refReleaseLineID=(SELECT ss.shippingID FROM salesshippingmst ss WHERE ss.sDetID=sd.refSalesOrderDetID LIMIT 1)  \n" +
                "				WHERE sd.frequency=2 AND sd.refSalesOrderDetID IN (SELECT sdt.id FROM salesorderdet sdt WHERE sdt.refSalesOrderID=vNewSOID);  \n" +
                "  \n" +
                "				DROP TEMPORARY TABLE IF EXISTS tempOtherCharges;  \n" +
                "				DROP TEMPORARY TABLE IF EXISTS  tempSalesCommissionDetails;  \n" +
                "				DROP TEMPORARY TABLE IF EXISTS   tempSalesOrder;  \n" +
                "				DROP TEMPORARY TABLE IF EXISTS  tempOtherChargesDet;  \n" +
                "				DROP TEMPORARY TABLE IF EXISTS tempNewOtherCharges;  \n" +
                "			  SELECT   vNewSOID;  \n" +
                "  \n" +
                "	END;  \n" +
                /* **************************** Add Script Version ->  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1275,'1.00','V1',' Alter procedure Sproc_SaveDuplicateSalesOrder-CC '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1275:
            allDbChangesArray.push(
                /* **************************** New Script -> 27-01-2022 *********************************** */
                "DROP procedure IF EXISTS `Sproc_RetrieveSupplierQuote`;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveSupplierQuote`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "    IN pIsSummary TINYINT,  \n" +
                "	IN pSupplierIds VARCHAR(16000),  \n" +
                "	IN pQuoteStatus VARCHAR(1000),  \n" +
                "	IN pSearchType VARCHAR(5),  \n" +
                "	IN pAdvanceSearchSQ VARCHAR(100),  \n" +
                "	IN pfromDate DATE,  \n" +
                "	IN ptoDate DATE,  \n" +
                "    IN pPartIds VARCHAR(16000)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;  \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "	DECLARE v_MfgNameFormat VARCHAR(100);  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
                "    SELECT fun_getMFGCodeNameFormat() INTO v_MfgNameFormat;  \n" +
                "  \n" +
                "	IF (pIsSummary = FALSE) THEN  \n" +
                "		SET @temp_Sproc_RetrieveSupplierQuote = CONCAT(\"  \n" +
                "				SELECT  \n" +
                "					s.id,  \n" +
                "					spd.id AS supplierQuotePartDetID,  \n" +
                "					fun_GetFormattedMfgCode(cm.mfgCode, cm.mfgName, \",v_MfgNameFormat,\") mfgName,  \n" +
                "					cm.mfgCode,  \n" +
                "					s.supplierID,  \n" +
                "					spd.partID,  \n" +
                "                    c.custAssyPN,  \n" +
                "					c.mfgPN AS mfgPN,  \n" +
                "                    c.mfgPNDescription,  \n" +
                "					c.mfgcodeID,  \n" +
                "					sc.mfgPN AS supplierPN,  \n" +
                "					spd.supplierPartID,  \n" +
                "					m.mfgName AS supplier,  \n" +
                "					s.quoteNumber,  \n" +
                "					s.quoteDate,  \n" +
                "					s.reference,  \n" +
                "					s.quoteStatus,  \n" +
                "					IF(s.quoteStatus = 'D', 'Draft', 'Published') AS statusConvertedValue,  \n" +
                "					IF(spd.isActive = 0, 'Inactive', 'Active') AS isActiveConvertedValueDetail,  \n" +
                "					spd.isActive,  \n" +
                "					spd.scanLabel,  \n" +
                "                    IF(s.quoteStatus = 'P',true, false) AS isDisabledDelete,  \n" +
                "                    IF(spd.id IS NULL, true, false) AS isDisabledPartPricing,  \n" +
                "                    IF(spd.id IS NULL, true, false) AS isDisabledCopySupplierQuote,  \n" +
                "                    IF(spd.id IS NULL, true, false) AS isDisabledPartPricingHistory,  \n" +
                "                    IF(spd.id IS NULL, false, true) AS isRequirementReference,  \n" +
                "					c.isCustom,  \n" +
                "					sc.isCustom AS isCustomSupplier,  \n" +
                "					rhc.rohsIcon,  \n" +
                "					rhc.name rohsName,  \n" +
                "					rhsc.rohsIcon supplierRohsIcon,  \n" +
                "					rhsc.name supplierRohsName,  \n" +
                "					fun_getPartAttibutesBySupplierQuoteDetailID(spd.id) AS attributesList,  \n" +
                "					fun_getPartPricingCountBySupplierQuoteDetailID(spd.id) AS pricingCount,  \n" +
                "					fun_getUserNameByID(spd.createdBy) createdby,  \n" +
                "					fun_getUserNameByID(spd.updatedBy) updatedby,  \n" +
                "					fun_ApplyCommonDateTimeFormatByParaValue(spd.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAt,  \n" +
                "					fun_ApplyCommonDateTimeFormatByParaValue(spd.UpdatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt,  \n" +
                "					fun_getRoleByID(spd.updateByRoleId) updatedByRole,  \n" +
                "					fun_getRoleByID(spd.createByRoleId) createdByRole  \n" +
                "				FROM  supplier_quote_parts_det spd  \n" +
                "				LEFT JOIN supplier_quote_mst s ON spd.supplierQuoteMstID = s.id AND s.isDeleted = 0  \n" +
                "				LEFT JOIN component c ON spd.partID = c.id AND c.isDeleted = 0  \n" +
                "				LEFT JOIN rfq_rohsmst rhc ON c.RoHSStatusID = rhc.id AND rhc.isDeleted = 0  \n" +
                "				LEFT JOIN component sc ON spd.supplierPartID = sc.id AND sc.isDeleted = 0 AND sc.refSupplierMfgpnComponentID IS NOT NULL  \n" +
                "				LEFT JOIN rfq_rohsmst rhsc ON sc.RoHSStatusID = rhsc.id AND rhsc.isDeleted = 0  \n" +
                "				LEFT JOIN mfgcodemst m ON s.supplierId = m.id AND m.isDeleted = 0  \n" +
                "				LEFT JOIN mfgcodemst cm ON cm.id = c.mfgcodeID  AND cm.isDeleted = 0  \n" +
                "				WHERE spd.isDeleted = 0 \");  \n" +
                "	 ELSE  \n" +
                "		SET @temp_Sproc_RetrieveSupplierQuote = CONCAT(\"  \n" +
                "			SELECT 	s.id,  \n" +
                "					s.supplierID,  \n" +
                "					m.mfgName AS supplier,  \n" +
                "					s.quoteNumber,  \n" +
                "					s.quoteDate,  \n" +
                "					s.reference,  \n" +
                "					s.quoteStatus,  \n" +
                "					IF(s.quoteStatus = 'D', 'Draft', 'Published') AS statusConvertedValue,  \n" +
                "                    IF(s.quoteStatus = 'P', true, false) AS isDisabledDelete,  \n" +
                "                    fun_getAddressbyID(s.billingAddressID) billTo,  \n" +
                "                    fun_getAddressbyID(s.shippingAddressID) shipTo,  \n" +
                "                    fun_GetFormattedContactPerson(cntb.firstName, cntb.middleName, cntb.lastName, cntb.division, cntb.email, cntb.phoneCountryCode, cntb.phone, cntb.phExtension, cntb.mobile, cntb.faxCountryCode, cntb.faxNumber ) billToContactName,  \n" +
                "					fun_GetFormattedContactPerson(cnts.firstName, cnts.middleName, cnts.lastName, cnts.division, cnts.email, cnts.phoneCountryCode, cnts.phone, cnts.phExtension, cnts.mobile, cnts.faxCountryCode, cnts.faxNumber ) shipToContactName,  \n" +
                "                    (SELECT COUNT(0) FROM supplier_quote_parts_det WHERE isDeleted = 0 AND supplierQuoteMstID = s.id) AS noOfSupplierPartLine,  \n" +
                "					fun_getUserNameByID(s.createdBy) createdby,  \n" +
                "					fun_getUserNameByID(s.updatedBy) updatedby,  \n" +
                "					fun_ApplyCommonDateTimeFormatByParaValue(s.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAt,  \n" +
                "					fun_ApplyCommonDateTimeFormatByParaValue(s.UpdatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt,  \n" +
                "					fun_getRoleByID(s.updateByRoleId) updatedByRole,  \n" +
                "					fun_getRoleByID(s.createByRoleId) createdByRole  \n" +
                "			FROM   supplier_quote_mst s  \n" +
                "			LEFT JOIN mfgcodemst m ON s.supplierId = m.id AND m.isDeleted = 0  \n" +
                "			LEFT JOIN contactperson cntb ON s.billingContactPersonID = cntb.personId AND cntb.isDeleted = 0  \n" +
                "			LEFT JOIN contactperson cnts ON s.shippingContactPersonID = cnts.personId AND cnts.isDeleted = 0  \n" +
                "			WHERE  s.isDeleted = 0  AND  \n" +
                "            (CASE WHEN ('\",pPartIds,\"' != '') THEN  \n" +
                "				s.id IN  (SELECT spd.supplierQuoteMstID FROM  \n" +
                "				supplier_quote_parts_det spd  \n" +
                "                LEFT JOIN component c ON spd.partID = c.id AND c.isDeleted = 0  \n" +
                "				LEFT JOIN component sc ON spd.supplierPartID = sc.id AND sc.isDeleted = 0 AND sc.refSupplierMfgpnComponentID IS NOT NULL  \n" +
                "                WHERE spd.isDeleted = 0 AND (FIND_IN_SET(spd.supplierPartID, ('\",pPartIds,\"')) OR FIND_IN_SET(spd.partID, ('\",pPartIds,\"'))))  \n" +
                "				ELSE 1 = 1 END)  \n" +
                "			\");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY id desc\") ;  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = '1=1' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF(pSupplierIds IS NOT NULL OR pSupplierIds != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND supplierID in (\"',pSupplierIds,'\")');  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF(pQuoteStatus IS NOT NULL OR pQuoteStatus != '') THEn  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND quoteStatus in (\"',pQuoteStatus,'\")');  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF(pAdvanceSearchSQ IS NOT NULL OR pAdvanceSearchSQ != '') THEN  \n" +
                "		IF(pSearchType = 'E') THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause, ' AND quoteNumber = \"', pAdvanceSearchSQ , '\" ');  \n" +
                "		ELSE  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause, ' AND quoteNumber LIKE \"%', pAdvanceSearchSQ ,'%\" ');  \n" +
                "		END IF;  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF(pfromDate IS NOT NULL AND ptoDate IS NOT NULL)THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND (quoteDate >= ''',pfromDate,''' and quoteDate <= ''',ptoDate,''')');  \n" +
                "	ELSEIF(pfromDate IS NOT NULL)THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND (quoteDate >= ''',pfromDate,''')');  \n" +
                "	ELSEIF(ptoDate IS NOT NULL)THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND (quoteDate <= ''',ptoDate,''')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF(pPartIds != '' AND (pIsSummary = FALSE)) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND ( supplierPartID in (\"',pPartIds,'\") OR partID in (\"',pPartIds,'\") )');  \n" +
                "    END IF;  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/* to get total count of rows */  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_RetrieveSupplierQuote,\" ) c where 1=1 and \", pWhereClause);  \n" +
                "	PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"select c.*  from ( \", @temp_Sproc_RetrieveSupplierQuote,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "   PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 27-01-2022 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1276,'1.00','V1','Bug 40721: SPLR QTE: While clicking on Save button - Supplier Quotes is created but showing Bill To Ship To Address blank - it should show default address [Hotfix] '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1276:
            allDbChangesArray.push(
                /* **************************** New Script -> 31-01-2022  *********************************** */
                "DROP procedure IF EXISTS `Sproc_RetrivePackingSlipMaterialReceiveList`;  \n" +
                "CREATE PROCEDURE `Sproc_RetrivePackingSlipMaterialReceiveList`(  \n" +
                "	IN pPageIndex INT,  \n" +
                "	IN pRecordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pReceiptType VARCHAR(10),  \n" +
                "	IN pMfgCodeIds VARCHAR(16383),  \n" +
                "	IN pAdvanceSearchPoSoPsInv VARCHAR(50),  \n" +
                "	IN pMfrPnId INT,  \n" +
                "    IN pReceiveStatus VARCHAR(255),  \n" +
                "    IN pPackingSlipFromDate DATE,  \n" +
                "    IN pPackingSlipToDate DATE,  \n" +
                "    IN pExactPaymentNumberSearch TINYINT,  \n" +
                "    IN pPaymentNumber VARCHAR(50),  \n" +
                "    IN pLockStatusFilter VARCHAR(50),  \n" +
                "    IN pPostingStatusFilter VARCHAR(10),  \n" +
                "    IN pPSComments VARCHAR(1000),  \n" +
                "    IN pSelectedDateType VARCHAR(10)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255);  \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "	DECLARE v_advanceFilterWhereClause VARCHAR(16383);  \n" +
                "    DECLARE v_mfgNameFormat VARCHAR(100);  \n" +
                "	SET SESSION group_concat_max_len = 500000;  \n" +
                "	SET v_advanceFilterWhereClause = ' 1 = 1 ';  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
                "    select fun_getMFGCodeNameFormat() into v_mfgNameFormat;  \n" +
                "	IF (pMfgCodeIds IS NOT NULL) THEN  \n" +
                "		SET v_advanceFilterWhereClause = CONCAT(v_advanceFilterWhereClause, ' AND mfgCodeID IN (', pMfgCodeIds ,')');  \n" +
                "	END IF;  \n" +
                "	IF (pAdvanceSearchPoSoPsInv IS NOT NULL) THEN  \n" +
                "		SET v_advanceFilterWhereClause= CONCAT(v_advanceFilterWhereClause, \" AND (  \n" +
                "											supplierSONumber = '\", pAdvanceSearchPoSoPsInv, \"'  \n" +
                "										OR 	poNumber = '\", pAdvanceSearchPoSoPsInv, \"'  \n" +
                "										OR 	packingSlipNumber = '\", pAdvanceSearchPoSoPsInv, \"'  \n" +
                "										OR 	refInvoiceNumber = '\", pAdvanceSearchPoSoPsInv, \"'\"  \n" +
                "									  \" )  \n" +
                "					\");  \n" +
                "	END IF;  \n" +
                "	IF (pMfrPnId IS NOT NULL) THEN  \n" +
                "		SET v_advanceFilterWhereClause = CONCAT(v_advanceFilterWhereClause, \" AND id IN (  \n" +
                "				SELECT 	refPackingSlipMaterialRecID  \n" +
                "				FROM 	packing_slip_material_receive_det  \n" +
                "				WHERE	partID = \", pMfrPnId ,\" AND isDeleted = 0  \n" +
                "			)  \n" +
                "		\");  \n" +
                "	END IF;  \n" +
                "	IF (pReceiveStatus IS NOT NULL AND pReceiveStatus != '') THEN  \n" +
                "		SET v_advanceFilterWhereClause = CONCAT(v_advanceFilterWhereClause, \" AND (\",pReceiveStatus,\")\");  \n" +
                "    END IF;  \n" +
                "    IF pPackingSlipFromDate IS NOT NULL AND pPackingSlipToDate IS NOT NULL THEN  \n" +
                "		IF pSelectedDateType = 'P' THEN  \n" +
                "			SET v_advanceFilterWhereClause = CONCAT(v_advanceFilterWhereClause,\" AND (packingSlipDate BETWEEN '\",pPackingSlipFromDate,\"' AND '\",pPackingSlipToDate,\"')\");  \n" +
                "		ELSEIF pSelectedDateType = 'M' THEN  \n" +
                "			SET v_advanceFilterWhereClause = CONCAT(v_advanceFilterWhereClause,\" AND (receiptDate BETWEEN '\",pPackingSlipFromDate,\"' AND '\",pPackingSlipToDate,\"')\");  \n" +
                "		ELSEIF pSelectedDateType = 'PO' THEN  \n" +
                "			SET v_advanceFilterWhereClause = CONCAT(v_advanceFilterWhereClause,\" AND (poDate BETWEEN '\",pPackingSlipFromDate,\"' AND '\",pPackingSlipToDate,\"')\");  \n" +
                "        END IF;  \n" +
                "	ELSEIF pPackingSlipFromDate IS NOT NULL THEN  \n" +
                "    	IF pSelectedDateType = 'P' THEN  \n" +
                "			SET v_advanceFilterWhereClause = CONCAT(v_advanceFilterWhereClause,\" AND (packingSlipDate = '\",pPackingSlipFromDate,\"')\");  \n" +
                "		ELSEIF pSelectedDateType = 'M' THEN  \n" +
                "			SET v_advanceFilterWhereClause = CONCAT(v_advanceFilterWhereClause,\" AND (receiptDate = '\",pPackingSlipFromDate,\"')\");  \n" +
                "		ELSEIF pSelectedDateType = 'PO' THEN  \n" +
                "			SET v_advanceFilterWhereClause = CONCAT(v_advanceFilterWhereClause,\" AND (poDate = '\",pPackingSlipFromDate,\"')\");  \n" +
                "		END IF;  \n" +
                "    END IF;  \n" +
                "    IF(pLockStatusFilter IS NOT NULL)THEN  \n" +
                "    	SET v_advanceFilterWhereClause = CONCAT(v_advanceFilterWhereClause,\" and lockStatus IN (\", pLockStatusFilter ,\")\");  \n" +
                "	END IF;  \n" +
                "    IF(pPostingStatusFilter IS NOT NULL)THEN  \n" +
                "    	SET v_advanceFilterWhereClause = CONCAT(v_advanceFilterWhereClause,\" and packingSlipModeStatus = '\", pPostingStatusFilter,\"'\");  \n" +
                "	END IF;  \n" +
                "    IF (pPSComments IS NOT NULL AND pPSComments != '') THEN  \n" +
                "		SET v_advanceFilterWhereClause= CONCAT(v_advanceFilterWhereClause, \"  \n" +
                "				AND (internalRemark LIKE '%\",pPSComments,\"%'  \n" +
                "                OR poComment LIKE '%\",pPSComments,\"%'  \n" +
                "                OR shippingComment LIKE '%\",pPSComments,\"%')  \n" +
                "                \");  \n" +
                "    END IF;  \n" +
                "	IF (pPaymentNumber IS NOT NULL AND pPaymentNumber != '') THEN  \n" +
                "		SET v_advanceFilterWhereClause= CONCAT(v_advanceFilterWhereClause, \"  \n" +
                "				and exists (select 1  \n" +
                "							  from packingslip_invoice_payment pm  \n" +
                "							  join packingslip_invoice_payment_det pd ON pd.refPayementid = pm.id  \n" +
                "							 where pm.isPaymentVoided = 0  \n" +
                "							   and pm.refPaymentMode = 'P'  \n" +
                "							   and pd.refPackingslipInvoiceID = refPackingSlipNumberForInvoice  \n" +
                "							   and pm.isDeleted = 0  \n" +
                "                               and pd.isDeleted = 0  \n" +
                "							   and pm.paymentNumber \",  \n" +
                "                               CASE WHEN pExactPaymentNumberSearch = TRUE THEN CONCAT(\" like '%\", pPaymentNumber, \"%' \") ELSE CONCAT(\" = '\", pPaymentNumber ,\"' \") END  \n" +
                "                               ,\") \");  \n" +
                "    END IF;  \n" +
                "	SET @temp_Sproc_RetrivePackingSlipMaterialReceiveList = CONCAT(\"  \n" +
                "			SELECT  *  \n" +
                "			FROM	(  \n" +
                "					SELECT 		p.id,  \n" +
                "							p.systemId,  \n" +
                "							p.poNumber,  \n" +
                "                            p.poDate,  \n" +
                "							p.refPurchaseOrderID poId,  \n" +
                "							p.mfgCodeID,  \n" +
                "							p.supplierSONumber,  \n" +
                "                            p.soDate,  \n" +
                "							p.packingSlipNumber,  \n" +
                "							p.packingSlipDate,  \n" +
                "							p.invoiceNumber,  \n" +
                "							p.invoiceDate,  \n" +
                "							p.creditMemoNumber,  \n" +
                "							p.creditMemoDate,  \n" +
                "							p.debitMemoNumber,  \n" +
                "							p.debitMemoDate,  \n" +
                "							p.receiptDate,  \n" +
                "							p.description,  \n" +
                "							p.billToAddress,  \n" +
                "							p.shipToAddress,  \n" +
                "							p.poVersion,  \n" +
                "							p.isDeleted,  \n" +
                "							p.receiptType,  \n" +
                "							p.`status`,  \n" +
                "							p.packingSlipModeStatus,  \n" +
                "							p.chequeNumber,  \n" +
                "							p.chequeDate,  \n" +
                "							p.chequeAmount,  \n" +
                "							p.applyDate,  \n" +
                "							p.refParentCreditDebitInvoiceno,  \n" +
                "							p.refPackingSlipNumberForInvoice,  \n" +
                "							p.invoiceTotalDue,  \n" +
                "							p.isTariffInvoice,  \n" +
                "							p.bankName,  \n" +
                "							fun_getUserNameByID(p.updatedBy) updatedByName,  \n" +
                "							fun_getUserNameByID(p.createdBy)  createdByName,  \n" +
                "							m.mfgCode supplierCode,  \n" +
                "							fun_GetFormattedMfgCode(m.mfgCode , m.mfgName,\",v_mfgNameFormat,\") supplierCodeName,  \n" +
                "							fun_getRoleByID(p.createByRoleId) createdbyRole,  \n" +
                "							fun_getRoleByID(p.updateByRoleId) updatedbyRole,  \n" +
                "							fun_ApplyCommonDateTimeFormatByParaValue(p.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAt,  \n" +
                "							fun_ApplyCommonDateTimeFormatByParaValue(p.updatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt,  \n" +
                "							(  \n" +
                "								CASE  \n" +
                "									WHEN p.packingSlipModeStatus = 'D' THEN 'Draft'  \n" +
                "									WHEN p.packingSlipModeStatus = 'P' THEN 'Published'  \n" +
                "									ELSE NULL  \n" +
                "								END  \n" +
                "							) packingSlipModeStatusValue,  \n" +
                "							ps.id invoiceId,  \n" +
                "							ps.invoiceNumber refInvoiceNumber,  \n" +
                "                            ps.lockStatus refInvoiceLockStatus,  \n" +
                "							ps.invoiceDate refInvoiceDate,  \n" +
                "							(  \n" +
                "								CASE  \n" +
                "									WHEN p.status = 'I' THEN 'Investigate'  \n" +
                "									WHEN p.status = 'W' THEN 'Waiting for Invoice'  \n" +
                "									WHEN p.status = 'IR' THEN 'Invoice Received'  \n" +
                "									WHEN p.status = 'A' THEN 'Approved to Pay'  \n" +
                "									WHEN p.status = 'P' THEN 'Fully Paid'  \n" +
                "                                    WHEN p.status = 'PP' THEN 'Partially Paid'  \n" +
                "									ELSE NULL  \n" +
                "								END  \n" +
                "							) statusValue,  \n" +
                "							IFNULL(g.cnt,0) packingSlipDocCount,  \n" +
                "							psm.TotalLines,  \n" +
                "							psm.PendingLines,  \n" +
                "                            psm.AcceptedWithDeviationLines,  \n" +
                "                            psm.RejectedLines,  \n" +
                "                            psm.AcceptedLines,  \n" +
                "                            p.lockStatus,  \n" +
                "                            (case when p.lockStatus = 'NA' then 'Not Applicable'  \n" +
                "								when p.lockStatus = 'RL' then 'Ready To Lock'  \n" +
                "                                when p.lockStatus = 'LC' then 'Locked'  \n" +
                "                                else null end  \n" +
                "                            ) lockStatusValue,  \n" +
                "                            fun_getUserNameByID(p.lockedBy) lockByName,  \n" +
                "                            fun_getRoleByID(p.lockedByRoleId) lockedByRoleName,  \n" +
                "                            fun_ApplyCommonDateTimeFormatByParaValue(p.lockedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') lockedAt,  \n" +
                "                            p.isCustConsigned,  \n" +
                "                            CASE WHEN p.isCustConsigned=0 THEN 'No' ELSE 'Yes' END isCustConsignedValue,  \n" +
                "                            p.CustomerID,  \n" +
                "                            fun_GetFormattedMfgCode(mc.mfgcode, mc.mfgName, \",v_mfgNameFormat,\") customerName,  \n" +
                "                            p.isNonUMIDStock,  \n" +
                "                            CASE WHEN p.isNonUMIDStock=0 THEN 'No' ELSE 'Yes' END isNonUMIDStockValue,  \n" +
                "                            p.internalRemark,  \n" +
                "                            pom.poComment,  \n" +
                "                            pom.shippingComment  \n" +
                "					FROM		packing_slip_material_receive p  \n" +
                "					LEFT JOIN	packing_slip_material_receive ps ON p.refPackingSlipNumberForInvoice = ps.id AND ps.isDeleted = 0  \n" +
                "					LEFT JOIN 	(  \n" +
                "								SELECT 	refPackingSlipMaterialRecID,  \n" +
                "										sum(totalLines) as TotalLines,  \n" +
                "                                        sum(pendingLines) as PendingLines,  \n" +
                "                                        sum(acceptedWithDeviationLines) as AcceptedWithDeviationLines,  \n" +
                "                                        sum(rejectedLines) as RejectedLines,  \n" +
                "                                        sum(acceptedLines) as AcceptedLines  \n" +
                "								FROM 		packing_slip_material_receive_det psm  \n" +
                "								WHERE 		isDeleted = 0  \n" +
                "								GROUP BY 	refPackingSlipMaterialRecID  \n" +
                "							) psm ON psm.refPackingSlipMaterialRecID = p.id  \n" +
                "					LEFT JOIN 	vu_genericfilescount g ON g.gencFileOwnerType = 'packing_slip' AND g.refTransID = p.id  \n" +
                "                    join mfgcodemst m ON m.id = p.mfgCodeID  \n" +
                "                    LEFT JOIN mfgcodemst mc ON mc.id = p.CustomerID  \n" +
                "					LEFT JOIN purchase_order_mst pom ON pom.id = p.refPurchaseOrderID AND pom.isDeleted = 0  \n" +
                "					WHERE p.receiptType = 'P' and p.isDeleted = false ) a  \n" +
                "			WHERE \", v_advanceFilterWhereClause  \n" +
                "		);  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY id DESC\") ;  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "	END IF;  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = '1=1' ;  \n" +
                "	END IF;  \n" +
                "	IF(pPageIndex <> 0 AND pRecordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (pPageIndex -1) * pRecordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "    /* to get total count of rows */  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*) as TotalRecord from ( \",@temp_Sproc_RetrivePackingSlipMaterialReceiveList,\" ) c where 1=1 AND \", pWhereClause);  \n" +
                "    PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "    SET @SQLStatement2 = CONCAT(\"select * from ( \", @temp_Sproc_RetrivePackingSlipMaterialReceiveList,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "    PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                " END;  \n" +
                /* **************************** New Script -> 31-01-2022  *********************************** */
                "DROP procedure IF EXISTS `Sproc_RetriveSupplierInvoiceList`;  \n" +
                "CREATE PROCEDURE `Sproc_RetriveSupplierInvoiceList`(  \n" +
                "	IN pPageIndex INT,  \n" +
                "	IN pRecordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pReceiptType VARCHAR(30),  \n" +
                "	IN pMfgCodeIds LONGTEXT,  \n" +
                "	IN pPaymentMethodTypeIds LONGTEXT,  \n" +
                "	IN pDueDate DATE,  \n" +
                "	IN pAdditionalDays INT,  \n" +
                "	IN pTermsAndAboveDays INT,  \n" +
                "	IN pInvoiceNumber VARCHAR(50),  \n" +
                "	IN pIsExactSearch TINYINT,  \n" +
                "	IN pMfrPnId INT,  \n" +
                "    IN pInvoiceIds LONGTEXT,  \n" +
                "    IN pExactPaymentNumberSearch TINYINT,  \n" +
                "    IN pPaymentNumber VARCHAR(50),  \n" +
                "    IN pPaymentTermsIds LONGTEXT,  \n" +
                "    IN pInvPaymentTermsIds LONGTEXT,  \n" +
                "    IN pInvoiceFromDate DATE,  \n" +
                "    IN pInvoiceToDate DATE,  \n" +
                "    IN pMarkedForRefundStatus LONGTEXT,  \n" +
                "    IN pInvoiceComments VARCHAR(1000),  \n" +
                "    IN pLockStatusFilter VARCHAR(50),  \n" +
                "    IN pSelectedDateType VARCHAR(10)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255);  \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "    DECLARE vCurrentDate DATE;  \n" +
                "    DECLARE vMfgCodeFormat INT;  \n" +
                "  \n" +
                "	SELECT FUN_GETTIMEZONE() INTO v_TimeZone;  \n" +
                "	SELECT FUN_GETDATETIMEFORMAT() INTO v_DateTimeDisplayFormat;  \n" +
                "    SELECT fun_getMFGCodeNameFormat() INTO vMfgCodeFormat;  \n" +
                "  \n" +
                "    SELECT CAST(fun_ConvertUTCDatetimeToDataKeyDateTimeZone(UTC_TIMESTAMP()) AS DATE) INTO vCurrentDate;  \n" +
                "  \n" +
                "	SET @temp_Sproc_RetriveSupplierInvoiceList = CONCAT(\"  \n" +
                "			SELECT 		p.id,  \n" +
                "					p.systemId,  \n" +
                "					p.poNumber,  \n" +
                "                    p.poDate,  \n" +
                "                    p.refPurchaseOrderID poId,  \n" +
                "					p.mfgCodeID,  \n" +
                "					p.supplierSONumber,  \n" +
                "                    p.soDate,  \n" +
                "					(CASE WHEN p.receiptType = 'I' THEN psm.packingSlipNumber ELSE p.packingSlipNumber END) packingSlipNumber,  \n" +
                "                    (CASE WHEN p.receiptType = 'I' THEN psm.lockStatus ELSE p.lockStatus END) packingSlipLockStatus,  \n" +
                "					p.packingSlipDate,  \n" +
                "					p.invoiceNumber,  \n" +
                "                    p.lockStatus invoiceLockStatus,  \n" +
                "					p.invoiceDate,  \n" +
                "					ps.invoiceDate refParentCreditDebitInvoiceDate,  \n" +
                "					p.creditMemoNumber,  \n" +
                "                    p.lockStatus creditMemoLockStatus,  \n" +
                "					p.creditMemoDate,  \n" +
                "					p.debitMemoNumber,  \n" +
                "                    p.refSupplierCreditMemoNumber,  \n" +
                "                    p.lockStatus debitMemoLockStatus,  \n" +
                "					p.debitMemoDate,  \n" +
                "					p.receiptDate,  \n" +
                "					p.description,  \n" +
                "					p.billToAddress,  \n" +
                "					p.shipToAddress,  \n" +
                "					p.poVersion,  \n" +
                "					p.isDeleted,  \n" +
                "					p.receiptType,  \n" +
                "					p.`status`,  \n" +
                "					p.applyDate,  \n" +
                "					p.refParentCreditDebitInvoiceno,  \n" +
                "					p.refPackingSlipNumberForInvoice,  \n" +
                "					p.invoiceTotalDue,  \n" +
                "					p.isTariffInvoice,  \n" +
                "					p.creditMemoType,  \n" +
                "                    (  \n" +
                "						CASE 	WHEN p.creditMemoType = 'IC' THEN  \n" +
                "								'Invoice Credit Memo (Auto)'  \n" +
                "							WHEN p.creditMemoType = 'MC' THEN  \n" +
                "								'MISC Credit Memo'  \n" +
                "							WHEN p.creditMemoType = 'RC' THEN  \n" +
                "								'RMA Credit Memo'  \n" +
                "							WHEN p.creditMemoType = 'ID' THEN  \n" +
                "								'Invoice Debit Memo (Auto)'  \n" +
                "							WHEN p.creditMemoType = 'MD' THEN  \n" +
                "								'MISC Debit Memo'  \n" +
                "							WHEN p.receiptType = 'I' and p.isTariffInvoice = '0' THEN  \n" +
                "								'Invoice'  \n" +
                "							WHEN p.receiptType = 'I' and p.isTariffInvoice = '1' THEN  \n" +
                "								'MISC Invoice'  \n" +
                "						END  \n" +
                "					) subTypeValue,  \n" +
                "					fun_getUserNameByID(p.updatedBy) updatedByName,  \n" +
                "					fun_getUserNameByID(p.createdBy)  createdByName,  \n" +
                "					fun_getRoleByID(p.createByRoleId) createdbyRole,  \n" +
                "					fun_getRoleByID(p.updateByRoleId) updatedbyRole,  \n" +
                "					fun_ApplyCommonDateTimeFormatByParaValue(p.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAt,  \n" +
                "					fun_ApplyCommonDateTimeFormatByParaValue(p.updatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt,  \n" +
                "                    m.mfgName supplierName,  \n" +
                "					fun_GetFormattedMfgCode(m.mfgCode, m.mfgName,\",vMfgCodeFormat,\") supplierCode,  \n" +
                "					m.mfgCode supplierCodeName,  \n" +
                "					IFNULL(psDoc.cnt,0) invoiceDocCount,  \n" +
                "					pg.packingSlipDocCount,  \n" +
                "					pd.itemReceived,  \n" +
                "					pd.otherChargesItemReceived,  \n" +
                "					pd.itemDisapproved,  \n" +
                "					fun_getReceiptTypeName(p.`receiptType`) receiptMemoType,  \n" +
                "                    fun_getInvoiceStatusName(p.`status`) invoiceVerificationStatus,  \n" +
                "					ps.status parentInvoiceStatus,  \n" +
                "					ps.invoiceNumber refInvoiceNumber,  \n" +
                "                    ps.lockStatus refInvoiceLockStatus,  \n" +
                "					ps.creditMemoType parentCreditMemoType,  \n" +
                "					pd.totalExtendedAmount,  \n" +
                "                    pd.totalDiscount,  \n" +
                "					pe.totalCreditAmount,  \n" +
                "					pe.totalDebitAmount,  \n" +
                "					(  \n" +
                "						IFNULL(pd.totalExtendedAmount, 0) - IFNULL((pe.totalCreditAmount * -1), 0) - IFNULL((pe.totalDebitAmount * -1), 0)  \n" +
                "					) amountToPay,  \n" +
                "                    pd.totalExtendedReceivedPrice,  \n" +
                "					pd.packingDetailNote,  \n" +
                "					pd.approveLineCount,  \n" +
                "					fun_getDueDateEOM((case WHEN p.receiptType = 'D' THEN  \n" +
                "											p.debitMemoDate  \n" +
                "										WHEN p.receiptType = 'C' THEN  \n" +
                "											p.creditMemoDate  \n" +
                "										ELSE p.invoiceDate  \n" +
                "									end), payTerm.termsDays, p.paymentTermsID) paymentDueDate,  \n" +
                "					g.gencCategoryName paymentTermName,  \n" +
                " 					m.paymentTermsID paymentTermsID,  \n" +
                "                    payTerm.gencCategoryName invPaymentTermName,  \n" +
                "                    p.paymentTermsID invPaymentTermsID,  \n" +
                "					(CASE WHEN p.receiptType = 'I' THEN psm.id ELSE p.id END) packingSlipId,  \n" +
                "					psm.packingSlipModeStatus,  \n" +
                "                    psPay.paymentDate,  \n" +
                "					ifnull(psPay.paidAmount,0) paidAmount,  \n" +
                "					ifnull(psPay.refundAmount,0) refundAmount,  \n" +
                "					ifnull(pe.totalPaidDebitCreditAmount,0) totalPaidDebitCreditAmount,  \n" +
                "                    ifnull(pe.totalRefundDebitCreditAmount,0) totalRefundDebitCreditAmount,  \n" +
                "					p.invoiceRequireManagementApproval,  \n" +
                "					(  \n" +
                "						CASE 	WHEN p.invoiceRequireManagementApproval = 1 THEN  \n" +
                "								'Yes'  \n" +
                "							WHEN p.invoiceRequireManagementApproval = 0 THEN  \n" +
                "								'No'  \n" +
                "						END  \n" +
                "					) invoiceRequireManagementApprovalValue,  \n" +
                "					p.invoiceApprovalStatus,  \n" +
                "					(  \n" +
                "						CASE 	WHEN p.invoiceApprovalStatus = 1 THEN  \n" +
                "								'Approved'  \n" +
                "							WHEN p.invoiceApprovalStatus = 2 THEN  \n" +
                "								'Pending'  \n" +
                "							WHEN p.invoiceApprovalStatus = 3 THEN  \n" +
                "								'N/A'  \n" +
                "						END  \n" +
                "					) invoiceApprovalStatusValue,  \n" +
                "					p.invoiceApprovedBy,  \n" +
                "					fun_getUserNameByID(p.invoiceApprovedBy) invoiceApprovedByName,  \n" +
                "					fun_ApplyCommonDateTimeFormatByParaValue(p.invoiceApprovalDate,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') invoiceApprovalDate,  \n" +
                "					p.invoiceApprovalComment,  \n" +
                "					p.internalRemark,  \n" +
                "                    p.remark,  \n" +
                "					p.lockStatus,  \n" +
                "					(case when p.lockStatus = 'NA' then 'Not Applicable'  \n" +
                "						when p.lockStatus = 'RL' then 'Ready To Lock'  \n" +
                "						when p.lockStatus = 'LC' then 'Locked'  \n" +
                "						else null end  \n" +
                "					) lockStatusValue,  \n" +
                "					fun_getUserNameByID(p.lockedBy) lockByName,  \n" +
                "					fun_getRoleByID(p.lockedByRoleId) lockedByRoleName,  \n" +
                "					fun_ApplyCommonDateTimeFormatByParaValue(p.lockedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') lockedAt,  \n" +
                "                    case when p.receiptType = 'I' then  \n" +
                "							ifnull(p.invoiceTotalDue,0) - ((ifnull(pd.totalExtendedReceivedPrice,0)+ifnull(pd.totalDiscount,0))+((IFNULL((pe.totalCreditAmount), 0) + IFNULL((pe.totalDebitAmount),0))*-1))  \n" +
                "						else ifnull(p.invoiceTotalDue,0)+((ifnull(pd.totalExtendedReceivedPrice,0)+ifnull(pd.totalDiscount,0))) end invoiceVariance,  \n" +
                "					h1.refType as haltRefType,  \n" +
                "                    h1.status as haltStatus,  \n" +
                "                    (CASE WHEN h1.status = 'H' THEN  \n" +
                "								'Halted'  \n" +
                "							ELSE ''  \n" +
                "						END  \n" +
                "					) AS haltStatusText,  \n" +
                "                    (CASE  \n" +
                "							WHEN h1.status = 'H' THEN  \n" +
                "								CONCAT(h1.reason, ' - Halt by ',fun_getUserNameByEmployeID(h1.holdEmployeeId),' on ', fun_ConvertUTCDatetimeToDataKeyTimeZone(h1.startDate))  \n" +
                "							ELSE ''  \n" +
                "						END  \n" +
                "					) AS haltReason,  \n" +
                "                    psh1.refType as haltRefTypeRefInv,  \n" +
                "                    psh1.status as haltStatusRefInv,  \n" +
                "                    (CASE WHEN psh1.status = 'H' THEN  \n" +
                "								'Halted'  \n" +
                "							ELSE ''  \n" +
                "						END  \n" +
                "					) AS haltReasonRefInvText,  \n" +
                "                    (CASE  \n" +
                "							WHEN psh1.status = 'H' THEN  \n" +
                "								CONCAT(psh1.reason, ' - Halt by ',fun_getUserNameByEmployeID(psh1.holdEmployeeId),' on ', fun_ConvertUTCDatetimeToDataKeyTimeZone(psh1.startDate))  \n" +
                "							ELSE ''  \n" +
                "						END  \n" +
                "					) AS haltReasonRefInv,  \n" +
                "                    p.markedForRefund,  \n" +
                "                    (case when p.markedForRefund = 0 then 'N/A'  \n" +
                "						else case when ifnull(psPay.refundAmount,0) = 0 then  \n" +
                "										'Waiting for Refund'  \n" +
                "								when ifnull(psPay.refundAmount,0) <> 0 and ifnull(psPay.refundAmount,0) <> ifnull(p.markedForRefundAmt,0)  then  \n" +
                "										'Partially Refunded'  \n" +
                "								when ifnull(psPay.refundAmount,0) = ifnull(p.markedForRefundAmt,0) then  \n" +
                "										'Fully Refunded'  \n" +
                "								else '' end  \n" +
                "						end  \n" +
                "					) markedForRefundValue,  \n" +
                "                    p.markedForRefundAmt  \n" +
                "			FROM packing_slip_material_receive p force index (IDX_packing_slip_material_receive_receiptType)  \n" +
                "            JOIN mfgcodemst m ON m.id = p.mfgCodeID  \n" +
                "            left join (SELECT COUNT(1) AS `cnt`,  \n" +
                "							gFiles.gencFileOwnerType,  \n" +
                "							gFiles.refTransID,  \n" +
                "							gFiles.entityID  \n" +
                "						FROM genericfiles gFiles  \n" +
                "						WHERE gFiles.isDeleted = 0 AND gFiles.isRecycle = 0  \n" +
                "						and gFiles.entityID in (-13,-15,-16)  \n" +
                "						GROUP BY gFiles.gencFileOwnerType , gFiles.refTransID , gFiles.entityID) psDoc  \n" +
                "				ON  psDoc.entityID = (CASE WHEN p.receiptType = 'C' THEN -15  \n" +
                "																		WHEN p.receiptType = 'D' THEN -16  \n" +
                "																		ELSE -13  \n" +
                "																	END)  \n" +
                "				and psDoc.refTransID = p.id  \n" +
                "            LEFT JOIN holdunholdtrans h1 ON h1.refTransId = p.id  \n" +
                "								and h1.id = p.holdUnholdId /*(select max(h2.id)  \n" +
                " 											 from holdunholdtrans h2  \n" +
                " 											where h2.refTransId = h1.refTransId  \n" +
                " 											  and h2.refType in ('SINV','SCM','SDM')  \n" +
                " 											  and h2.isDeleted = 0)*/  \n" +
                "            left join genericcategory g ON g.gencCategoryID = m.paymentTermsID  \n" +
                "            left join genericcategory payTerm ON payTerm.gencCategoryID = p.paymentTermsID  \n" +
                "			LEFT JOIN packing_slip_material_receive ps ON ps.id = p.refParentCreditDebitInvoiceno AND ps.isDeleted = 0  \n" +
                "            LEFT JOIN holdunholdtrans psh1 ON psh1.refTransId = p.refParentCreditDebitInvoiceno  \n" +
                "								and psh1.id = p.refParentCreditDebitInvoiceHoldUnholdId /*(select max(h2.id)  \n" +
                " 											 from holdunholdtrans h2  \n" +
                " 											where psh1.refTransId = h2.refTransId  \n" +
                " 											  and h2.refType = 'SINV'  \n" +
                " 											  and h2.isDeleted = 0)*/  \n" +
                "			LEFT JOIN packing_slip_material_receive psm on psm.refPackingSlipNumberForInvoice = p.id and psm.receiptType = 'P' AND psm.isDeleted = 0  \n" +
                "            left join (  \n" +
                "				SELECT 	IFNULL(g.cnt,0) packingSlipDocCount, g.refTransID  \n" +
                "				FROM 	vu_genericfilescount g  \n" +
                "				WHERE 	g.entityID = -14  \n" +
                "				AND 	g.gencFileOwnerType = 'packing_slip'  \n" +
                "            ) pg on pg.refTransID = psm.id  \n" +
                "			left join (  \n" +
                "							select 	a.refPackingSlipMaterialRecID,  \n" +
                "								GROUP_CONCAT(a.packingSlipSerialNumber, '###', a.approveNote SEPARATOR '||') packingDetailNote,  \n" +
                "								sum(a.itemReceived) itemReceived,  \n" +
                "								sum(a.otherChargesItemReceived) otherChargesItemReceived,  \n" +
                "								sum(a.itemDisapproved) itemDisapproved,  \n" +
                "								sum(a.approveLineCount) approveLineCount,  \n" +
                "								sum(a.extendedPrice) totalExtendedAmount,  \n" +
                "                                sum(discount) totalDiscount,  \n" +
                "								sum(extendedReceivedPrice) totalExtendedReceivedPrice  \n" +
                "							from 	(  \n" +
                "									SELECT 	psm.refPackingSlipMaterialRecID,  \n" +
                "										psm.packingSlipSerialNumber,  \n" +
                "										ifnull(psm.approveNote,psm.comment) approveNote,  \n" +
                "										/*case when psm.refChargesTypeId IS NULL then 1 else 0 end itemReceived,  \n" +
                "										case when psm.refChargesTypeId IS NOT NULL then 1 else 0 end otherChargesItemReceived,*/  \n" +
                "                                        case when psm.packingSlipSerialNumber not REGEXP '^-?[0-9]+$' or psm.packingSlipSerialNumber <= 1000 then 1 else 0 end itemReceived,  \n" +
                "										case when psm.packingSlipSerialNumber REGEXP '^-?[0-9]+$' and psm.packingSlipSerialNumber > 1000 then 1 else 0 end otherChargesItemReceived,  \n" +
                "										case when psm.status = 'D' then 1 else 0 end itemDisapproved,  \n" +
                "										case when psm.status = 'A' then 1 else 0 end approveLineCount,  \n" +
                "										extendedPrice,  \n" +
                "                                        discount,  \n" +
                "										extendedReceivedPrice  \n" +
                "									FROM 	packing_slip_material_receive_det psm  \n" +
                "									WHERE 	psm.isDeleted = 0  \n" +
                "                                    and exists (select 1 from packing_slip_material_receive p where p.id = psm.refPackingSlipMaterialRecID and p.receiptType in ('I','C','D') and p.isDeleted = 0)  \n" +
                "								) a  \n" +
                "							group by a.refPackingSlipMaterialRecID  \n" +
                "						) pd ON pd.refPackingSlipMaterialRecID = p.id  \n" +
                "				left join (select b.refPackingslipInvoiceID,  \n" +
                "									sum(case when a.refPaymentMode = 'P' then b.paymentAmount else 0 end) paidAmount,  \n" +
                "									sum(case when a.refPaymentMode = 'RR' then b.paymentAmount else 0 end) refundAmount,  \n" +
                "                                    max(case when a.refPaymentMode = 'P' then a.paymentDate else null end) paymentDate  \n" +
                "							  from packingslip_invoice_payment a  \n" +
                "							  join packingslip_invoice_payment_det b ON b.refPayementid = a.id  \n" +
                "							 where a.refPaymentMode IN ('P','RR')  \n" +
                "							   and a.isPaymentVoided = 0  \n" +
                "							   and b.isDeleted = 0  \n" +
                "							 group by b.refPackingslipInvoiceID) psPay ON psPay.refPackingslipInvoiceID = p.id  \n" +
                "				left join (  \n" +
                "							select	 	ps.refParentCreditDebitInvoiceno,  \n" +
                "										sum(case when ps.receiptType = 'C' then pd.extendedPrice else 0 end) totalCreditAmount,  \n" +
                "    									sum(case when ps.receiptType = 'D' then pd.extendedPrice else 0 end) totalDebitAmount,  \n" +
                "    									sum(cmPay.paidAmount) totalPaidDebitCreditAmount,  \n" +
                "                                        sum(cmPay.refundAmount) totalRefundDebitCreditAmount  \n" +
                "							from 		packing_slip_material_receive ps  \n" +
                "							inner join 	packing_slip_material_receive_det pd ON ps.id = pd.refPackingSlipMaterialRecID  \n" +
                "                            left join (select b.refPackingslipInvoiceID,  \n" +
                "												sum(case when a.refPaymentMode = 'P' then b.paymentAmount else 0 end) paidAmount,  \n" +
                "												sum(case when a.refPaymentMode = 'RR' then b.paymentAmount else 0 end) refundAmount  \n" +
                "										  from packingslip_invoice_payment a  \n" +
                "										  join packingslip_invoice_payment_det b ON b.refPayementid = a.id  \n" +
                "										 where a.refPaymentMode IN ('P','RR')  \n" +
                "										   and b.isPaymentVoided = 0  \n" +
                "										   and b.isDeleted = 0  \n" +
                "										 group by b.refPackingslipInvoiceID) cmPay ON ps.id = cmPay.refPackingslipInvoiceID  \n" +
                "								  where ps.receiptType in ('C','D')  \n" +
                "									and ps.isDeleted = 0  \n" +
                "									and pd.isDeleted = 0  \n" +
                "							group by 	ps.refParentCreditDebitInvoiceno  \n" +
                "						) pe ON pe.refParentCreditDebitInvoiceno = p.id  \n" +
                "				WHERE p.`status` in ('PE','I','A','P','PP') and p.isDeleted = 0 \",  \n" +
                "                (CASE WHEN pInvoiceIds IS NOT NULL THEN CONCAT(\" AND p.id in (\", pInvoiceIds ,\") \") ELSE \"\" END),  \n" +
                "                (CASE WHEN pReceiptType IS NOT NULL THEN CONCAT(\"  AND p.receiptType in (\", pReceiptType ,\")\") ELSE \"\" END)  \n" +
                "	);  \n" +
                "  \n" +
                "	IF (pMfgCodeIds IS NOT NULL AND pMfgCodeIds != '') THEN  \n" +
                "		SET @temp_Sproc_RetriveSupplierInvoiceList= CONCAT(@temp_Sproc_RetriveSupplierInvoiceList, ' AND p.mfgCodeID in (', pMfgCodeIds, ' )');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF (pPaymentTermsIds IS NOT NULL AND pPaymentTermsIds != '') THEN  \n" +
                "		SET @temp_Sproc_RetriveSupplierInvoiceList= CONCAT(@temp_Sproc_RetriveSupplierInvoiceList, ' AND m.paymentTermsID in (', pPaymentTermsIds, ' )');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF (pInvPaymentTermsIds IS NOT NULL AND pInvPaymentTermsIds != '') THEN  \n" +
                "		SET @temp_Sproc_RetriveSupplierInvoiceList= CONCAT(@temp_Sproc_RetriveSupplierInvoiceList, ' AND p.paymentTermsID in (', pInvPaymentTermsIds, ' )');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pPaymentMethodTypeIds IS NOT NULL AND pPaymentMethodTypeIds != '') THEN  \n" +
                "		SET @temp_Sproc_RetriveSupplierInvoiceList= CONCAT(@temp_Sproc_RetriveSupplierInvoiceList, ' and exists (select 1 from mfgcodemst m where m.id = p.mfgCodeID AND m.paymentMethodID in (', pPaymentMethodTypeIds, ' ))');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "     IF(pLockStatusFilter IS NOT NULL)THEN  \n" +
                "    	SET @temp_Sproc_RetriveSupplierInvoiceList = CONCAT(@temp_Sproc_RetriveSupplierInvoiceList,\" and p.lockStatus IN (\", pLockStatusFilter ,\")\");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "      IF(pInvoiceComments IS NOT NULL AND pInvoiceComments != '')THEN  \n" +
                "    	SET @temp_Sproc_RetriveSupplierInvoiceList = CONCAT(@temp_Sproc_RetriveSupplierInvoiceList,\" and (p.internalRemark LIKE '%\",pInvoiceComments,\"%' OR p.remark LIKE '%\",pInvoiceComments,\"%')\");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF (pPaymentNumber IS NOT NULL AND pPaymentNumber != '') THEN  \n" +
                "		SET @temp_Sproc_RetriveSupplierInvoiceList= CONCAT(@temp_Sproc_RetriveSupplierInvoiceList, \"  \n" +
                "				and exists (select 1  \n" +
                "							  from packingslip_invoice_payment pm  \n" +
                "							  join packingslip_invoice_payment_det pd ON pd.refPayementid = pm.id  \n" +
                "							 where pm.isPaymentVoided = 0  \n" +
                "							   and pm.refPaymentMode = 'P'  \n" +
                "							   and pd.refPackingslipInvoiceID = p.id  \n" +
                "							   and pm.isDeleted = 0  \n" +
                "                               and pd.isDeleted = 0  \n" +
                "							   and pm.paymentNumber \",  \n" +
                "                               CASE WHEN pExactPaymentNumberSearch = TRUE THEN CONCAT(\" = '\", pPaymentNumber ,\"' \") ELSE CONCAT(\" like '%\", pPaymentNumber, \"%' \") END  \n" +
                "                               ,\") \");  \n" +
                "    END IF;  \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY paymentDueDate, supplierCode\") ;  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = '1=1' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF pMarkedForRefundStatus IS NOT NULL and pMarkedForRefundStatus != '' THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause,\" and c.markedForRefundValue in (\",pMarkedForRefundStatus,\")\");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF pDueDate IS NOT NULL THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause,\" and c.paymentDueDate <= DATE_ADD('\",pDueDate,\"', INTERVAL \",IFNULL(pAdditionalDays,0),\" DAY) \");  \n" +
                "	ELSEIF (pTermsAndAboveDays IS NOT NULL OR pTermsAndAboveDays = 0) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause,\" and c.paymentDueDate <= DATE_ADD('\",vCurrentDate,\"', INTERVAL \",IFNULL(pTermsAndAboveDays,0),\" DAY) \");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF pInvoiceFromDate IS NOT NULL AND pInvoiceToDate IS NOT NULL THEN  \n" +
                "		IF pSelectedDateType = 'I' THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause,\" and (c.invoiceDate between '\",pInvoiceFromDate,\"' and '\",pInvoiceToDate,\"'  \n" +
                "													or c.refParentCreditDebitInvoiceDate between '\",pInvoiceFromDate,\"' and '\",pInvoiceToDate,\"')\");  \n" +
                "		ELSEIF pSelectedDateType = 'M' THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause,\" AND (receiptDate BETWEEN '\",pInvoiceFromDate,\"' AND '\",pInvoiceToDate,\"')\");  \n" +
                "		ELSEIF pSelectedDateType = 'PO' THEN  \n" +
                "        	SET pWhereClause = CONCAT(pWhereClause,\" AND (poDate BETWEEN '\",pInvoiceFromDate,\"' AND '\",pInvoiceToDate,\"')\");  \n" +
                "		ELSEIF pSelectedDateType = 'C' THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause,\" AND (creditMemoDate BETWEEN '\",pInvoiceFromDate,\"' AND '\",pInvoiceToDate,\"')\");  \n" +
                "		ELSEIF pSelectedDateType = 'D' THEN  \n" +
                "        	SET pWhereClause = CONCAT(pWhereClause,\" AND (debitMemoDate BETWEEN '\",pInvoiceFromDate,\"' AND '\",pInvoiceToDate,\"')\");  \n" +
                "		ELSEIF pSelectedDateType = 'P' THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause,\" AND (packingSlipDate BETWEEN '\",pInvoiceFromDate,\"' AND '\",pInvoiceToDate,\"')\");  \n" +
                "		END IF;  \n" +
                "	ELSEIF pInvoiceFromDate IS NOT NULL THEN  \n" +
                "		IF pSelectedDateType = 'I' THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause,\" and (c.invoiceDate = '\",pInvoiceFromDate,\"'  \n" +
                "													   or c.refParentCreditDebitInvoiceDate = '\",pInvoiceFromDate,\"')\");  \n" +
                "		ELSEIF pSelectedDateType = 'M' THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause,\" AND (receiptDate = '\",pInvoiceFromDate,\"')\");  \n" +
                "		ELSEIF pSelectedDateType = 'PO' THEN  \n" +
                "        	SET pWhereClause = CONCAT(pWhereClause,\" AND (poDate = '\",pInvoiceFromDate,\"')\");  \n" +
                "		ELSEIF pSelectedDateType = 'C' THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause,\" AND (creditMemoDate = '\",pInvoiceFromDate,\"')\");  \n" +
                "		ELSEIF pSelectedDateType = 'D' THEN  \n" +
                "        	SET pWhereClause = CONCAT(pWhereClause,\" AND (debitMemoDate = '\",pInvoiceFromDate,\"')\");  \n" +
                "		ELSEIF pSelectedDateType = 'P' THEN  \n" +
                "        	SET pWhereClause = CONCAT(pWhereClause,\" AND (packingSlipDate = '\",pInvoiceFromDate,\"')\");  \n" +
                "		END IF;  \n" +
                "    END IF;  \n" +
                "  \n" +
                "	IF pInvoiceNumber IS NOT NULL AND pInvoiceNumber != '' THEN  \n" +
                "		IF pIsExactSearch = 1 THEN  \n" +
                "			SET pWhereClause= CONCAT(pWhereClause, \"  \n" +
                "									AND (  \n" +
                "											c.supplierSONumber = '\", pInvoiceNumber, \"'  \n" +
                "										OR 	c.poNumber = '\", pInvoiceNumber, \"'  \n" +
                "										OR 	c.packingSlipNumber = '\", pInvoiceNumber, \"'  \n" +
                "										OR 	c.invoiceNumber = '\", pInvoiceNumber, \"'  \n" +
                "										OR 	c.refInvoiceNumber = '\", pInvoiceNumber, \"'  \n" +
                "										OR 	c.creditMemoNumber = '\", pInvoiceNumber, \"'  \n" +
                "										OR 	c.debitMemoNumber = '\", pInvoiceNumber, \"'\"  \n" +
                "									  \" ) \"  \n" +
                "						);  \n" +
                "		ELSE  \n" +
                "			SET pWhereClause= CONCAT(pWhereClause, \"  \n" +
                "									AND (  \n" +
                "											c.supplierSONumber like '%\", pInvoiceNumber, \"%'  \n" +
                "										OR 	c.poNumber like '%\", pInvoiceNumber, \"%'  \n" +
                "										OR 	c.packingSlipNumber like '%\", pInvoiceNumber, \"%'  \n" +
                "										OR 	c.invoiceNumber like '%\", pInvoiceNumber, \"%'  \n" +
                "										OR 	c.refInvoiceNumber like '%\", pInvoiceNumber, \"%'  \n" +
                "										OR 	c.creditMemoNumber like '%\", pInvoiceNumber, \"%'  \n" +
                "										OR 	c.debitMemoNumber like '%\", pInvoiceNumber, \"%'\"  \n" +
                "									  \" ) \"  \n" +
                "						);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pMfrPnId IS NOT NULL) THEN  \n" +
                "		SET pWhereClause= CONCAT(pWhereClause, \" AND exists (  \n" +
                "				SELECT 1  \n" +
                "				  FROM packing_slip_material_receive_det x  \n" +
                "				 WHERE x.refPackingSlipMaterialRecID = c.id and x.partID = \", pMfrPnId ,\" AND x.isDeleted = 0  \n" +
                "			)  \n" +
                "		\");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pPageIndex <> 0 AND pRecordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (pPageIndex -1) * pRecordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/* to get total count of rows */  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*) as TotalRecord FROM (\", @temp_Sproc_RetriveSupplierInvoiceList ,\" ) c where \", pWhereClause );  \n" +
                "    PREPARE query1 FROM @SQLStatement1;  \n" +
                "    EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"  \n" +
                "			SELECT 	c.*,  \n" +
                "					case when round((c.totalExtendedAmount - c.paidAmount + c.refundAmount),2) != 0 and c.paymentDueDate <= '\",vCurrentDate,\"' then 1 else 0 end isPaymentDueDatePassed,  \n" +
                "				round(c.paidAmount,2) totalPaidAmount,  \n" +
                "                round(c.refundAmount,2) totalRefundAmount,  \n" +
                "				round((c.totalExtendedAmount - c.paidAmount + c.refundAmount),2) paymentAmount,  \n" +
                "				round((c.totalExtendedAmount - c.paidAmount + c.refundAmount),2) balanceToPayAmount,  \n" +
                "				round((c.totalPaidDebitCreditAmount+c.totalRefundDebitCreditAmount+c.paidAmount+c.refundAmount),2) totalPaidAmountToDisableDelete  \n" +
                "			FROM 	(\", @temp_Sproc_RetriveSupplierInvoiceList ,\" ) c  \n" +
                "			where 	\", pWhereClause ,\" \", pOrderBy , rowNumWhere);  \n" +
                "  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** New Script -> 31-01-2022  *********************************** */
                "DROP procedure IF EXISTS `Sproc_checkDelete_mfgcodemst`;  \n" +
                "CREATE PROCEDURE `Sproc_checkDelete_mfgcodemst`(  \n" +
                "  IN tableName VARCHAR(255),  \n" +
                "	IN IDs LONGTEXT,  \n" +
                "	IN deletedBy INT,  \n" +
                "	IN entityID VARCHAR(255),  \n" +
                "	IN refrenceIDs LONGTEXT,  \n" +
                "	IN countList INT,  \n" +
                "    IN pRoleID INT  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "DECLARE EXIT HANDLER FOR SQLEXCEPTION  \n" +
                "BEGIN  \n" +
                "	ROLLBACK;  \n" +
                "	RESIGNAL;  \n" +
                "END;  \n" +
                "DECLARE EXIT HANDLER FOR SQLWARNING  \n" +
                "BEGIN  \n" +
                "	ROLLBACK;  \n" +
                "	RESIGNAL;  \n" +
                "END;  \n" +
                "DROP TEMPORARY TABLE IF EXISTS tempMFGCodeMst;  \n" +
                "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempMFGCodeMst as  \n" +
                "			        (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component\" else \"\" end as msg FROM component WHERE deletedAt IS NULL AND mfgcodeID IN(',IDs,') LIMIT 1)  \n" +
                "				UNION ALL  \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"br_label_template\" else \"\" end as msg FROM br_label_template WHERE deletedAt IS NULL AND mfgcodeid IN(',IDs,') LIMIT 1)  \n" +
                "				UNION ALL  \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"equipment\" else \"\" end as msg FROM equipment WHERE deletedAt IS NULL AND customerId IN(',IDs,') LIMIT 1)  \n" +
                "				UNION ALL  \n" +
                "				(SELECT COUNT(1) cnt,CASE WHEN COUNT(1) > 0 THEN \"rfqforms\" ELSE \"\" END AS msg FROM  rfqforms rf WHERE rf.deletedAt IS NULL AND rf.customerId IN(',IDs,') LIMIT 1)  \n" +
                "				UNION ALL  \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"workorder\" else \"\" end as msg FROM workorder WHERE deletedAt IS NULL AND customerID IN(',IDs,') LIMIT 1)  \n" +
                "				UNION ALL  \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"salesordermst\" else \"\" end as msg FROM salesordermst WHERE deletedAt IS NULL AND customerID IN(',IDs,') LIMIT 1)  \n" +
                "				UNION ALL  \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"shippedassembly\" else \"\" end as msg FROM shippedassembly WHERE deletedAt IS NULL AND customerID IN(',IDs,') LIMIT 1)  \n" +
                "				UNION ALL  \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"employees\" else \"\" end as msg FROM employees WHERE deletedAt IS NULL AND supplierID IN(',IDs,') LIMIT 1)  \n" +
                "				UNION ALL  \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"certificate_standards\" else \"\" end as msg FROM certificate_standards WHERE deletedAt IS NULL AND certificateSupplierID IN(',IDs,') LIMIT 1)  \n" +
                "				UNION ALL  \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"who_bought_who\" else \"\" end as msg FROM who_bought_who WHERE deletedAt IS NULL AND (buyTo IN(',IDs,') OR buyBy IN(',IDs,')) LIMIT 1)  \n" +
                "				UNION ALL  \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"supplier_quote_mst\" else \"\" end as msg FROM supplier_quote_mst WHERE deletedAt IS NULL AND supplierID IN(',IDs,') LIMIT 1)  \n" +
                "                UNION ALL  \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"supplier_attribute_template_mst\" else \"\" end as msg FROM supplier_attribute_template_mst WHERE deletedAt IS NULL AND supplierID IN(',IDs,') LIMIT 1)  \n" +
                "				UNION ALL  \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component_approved_supplier_mst\" else \"\" end as msg FROM component_approved_supplier_mst WHERE deletedAt IS NULL AND supplierID IN(',IDs,') LIMIT 1)  \n" +
                "				UNION ALL  \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"supplier_mapping_mst\" else \"\" end as msg FROM supplier_mapping_mst WHERE deletedAt IS NULL AND refMfgCodeMstID IN(',IDs,') LIMIT 1)  \n" +
                "				UNION ALL  \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"component_approved_supplier_priority_detail\" else \"\" end as msg FROM component_approved_supplier_priority_detail WHERE deletedAt IS NULL AND supplierID IN(',IDs,') LIMIT 1)  \n" +
                "                UNION ALL  \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"invalid_mfgmappingmst\" else \"\" end as msg FROM invalid_mfgmappingmst WHERE isdeleted = 0 AND refmfgCodeID IN(',IDs,') LIMIT 1)  \n" +
                "                UNION ALL  \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"rfq_lineitems_alternatepart\" else \"\" end as msg FROM rfq_lineitems_alternatepart WHERE deletedAt IS NULL AND mfgCodeID IN(',IDs,') LIMIT 1)  \n" +
                "                UNION ALL  \n" +
                "                (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"purchase_order_mst\" else \"\" end as msg FROM purchase_order_mst WHERE deletedAt IS NULL AND supplierID IN(',IDs,') LIMIT 1)  \n" +
                "                UNION ALL  \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"purchase_order_mst\" else \"\" end as msg FROM purchase_order_mst WHERE deletedAt IS NULL AND CustomerID IN(',IDs,') LIMIT 1)  \n" +
                "                UNION ALL  \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"purchase_order_mst\" else \"\" end as msg FROM purchase_order_det WHERE deletedAt IS NULL AND lineCustomerID IN(',IDs,') LIMIT 1)  \n" +
                "                UNION ALL  \n" +
                "                (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"packing_slip_material_receive_det_material_receipt\" else \"\" end as msg FROM packing_slip_material_receive WHERE deletedAt IS NULL AND mfgCodeID IN(',IDs,') LIMIT 1)  \n" +
                "                UNION ALL  \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"packing_slip_material_receive_det_material_receipt\" else \"\" end as msg FROM packing_slip_material_receive WHERE deletedAt IS NULL AND CustomerID IN(',IDs,') LIMIT 1)  \n" +
                "                UNION ALL  \n" +
                "				(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"packing_slip_material_receive_det_material_receipt\" else \"\" end as msg FROM packing_slip_material_receive_det WHERE deletedAt IS NULL AND LineCustomerID IN(',IDs,') LIMIT 1)  \n" +
                "		 ');  \n" +
                "                   -- (SELECT COUNT(1) cnt , CASE WHEN COUNT(1) > 0 THEN \"rfq_consolidated_mfgpn_lineitem_alternate\" ELSE \"\" END AS msg FROM rfq_consolidated_mfgpn_lineitem_alternate WHERE mfgCodeID IN(',IDs,')  LIMIT 1)  \n" +
                "		   -- UNION ALL  \n" +
                "		   -- (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"rfq_lineitems_alternatepart\" else \"\" end as msg FROM rfq_lineitems_alternatepart WHERE deletedAt IS NULL AND mfgCodeID IN(',IDs,') LIMIT 1)  \n" +
                "		   -- UNION ALL  \n" +
                "		   -- UNION ALL  \n" +
                "		   -- (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"billing_addresses\" else \"\" end as msg FROM customer_addresses WHERE deletedAt IS NULL AND customerId IN(',IDs,') AND addressType=\"B\"  LIMIT 1)  \n" +
                "		   -- UNION ALL  \n" +
                "	           -- (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"shipping_addresses\" else \"\" end as msg FROM customer_addresses WHERE deletedAt IS NULL AND customerId IN(',IDs,') AND addressType=\"S\" LIMIT 1)  \n" +
                "	           -- UNION ALL  \n" +
                "	           -- (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"contactperson\" else \"\" end as msg FROM contactperson WHERE deletedAt IS NULL AND refTransID IN(',IDs,') AND refTableName = \"mfgcodemst\" LIMIT 1)  \n" +
                "	           -- UNION ALL  \n" +
                "	           -- (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"who_bought_who\" else \"\" end as msg FROM who_bought_who WHERE deletedAt IS NULL AND (buyBy IN(',IDs,') OR buyTo IN(',IDs,')) LIMIT 1)  \n" +
                "		PREPARE stmt FROM @SQL;  \n" +
                "		EXECUTE stmt;  \n" +
                "  \n" +
                "		IF (countList=FALSE) THEN  \n" +
                "			IF (SELECT SUM(t.cnt) FROM tempMFGCodeMst t)=0 THEN  \n" +
                "				START TRANSACTION;  \n" +
                "  \n" +
                "				SET @SQl1 = CONCAT('update mfgcodemst set isDeleted=',1,',deletedBy=',deletedBy,', deleteByRoleId = ',pRoleID,', deletedAt=\"',fun_DatetimetoUTCDateTime(),'\" where id IN(',IDs,') and deletedAt is NULL');  \n" +
                "						PREPARE stmt1 FROM @SQL1;  \n" +
                "						EXECUTE stmt1;  \n" +
                "  \n" +
                "				SET @SQl2 = CONCAT('update mfgcodealias set isDeleted=',1,',deletedBy=',deletedBy,', deleteByRoleId = ',pRoleID,', deletedAt=\"',fun_DatetimetoUTCDateTime(),'\" WHERE mfgcodeId IN(',IDs,') and deletedAt is NULL');  \n" +
                "						PREPARE stmt2 FROM @SQL2;  \n" +
                "						EXECUTE stmt2;  \n" +
                "				SELECT * FROM tempMFGCodeMst WHERE IFNULL(cnt,0) > 0 AND msg IS NOT NULL AND msg != \"\";  \n" +
                "				COMMIT;  \n" +
                "			ELSE  \n" +
                "				SELECT SUM(t.cnt) AS TotalCount, GROUP_CONCAT(t.msg SEPARATOR ',') AS Message FROM tempMFGCodeMst t;  \n" +
                "  \n" +
                "			END IF;  \n" +
                "		ELSE  \n" +
                "			SELECT t1.cnt,t2.display_page_name AS msg  \n" +
                "			   FROM tempMFGCodeMst t1  \n" +
                "				INNER JOIN table_mapping_details t2 ON t1.msg=t2.tabel_name  \n" +
                "				WHERE IFNULL(cnt,0) > 0 AND msg IS NOT NULL AND msg != \"\"  \n" +
                "				ORDER BY t2.display_page_name;  \n" +
                "		END IF;  \n" +
                "  \n" +
                " DROP TEMPORARY TABLE IF EXISTS tempMFGCodeMst;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 31-01-2022 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1277,'1.00','V1',' Bug 40722: Supplier Invoice Issues reported by Charmy on Regression testing - Jay '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1277:
            allDbChangesArray.push(
                /* **************************** New Script -> 31-01-2022  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_updateDefaultAddrByCustAddrType` ;  \n" +
                "CREATE PROCEDURE `Sproc_updateDefaultAddrByCustAddrType`(  \n" +
                "	IN pAddrMstID INT,  \n" +
                "	IN pCustID INT,  \n" +
                "	IN pAddressType VARCHAR(5),  \n" +
                "	IN pUserID INT,  \n" +
                "	IN pUserRoleID INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE vSetNewDefaultAddrMstId INT ;  \n" +
                "	IF ((SELECT COUNT(1) FROM customer_addresses WHERE id != pAddrMstID AND customerId = pCustID  \n" +
                "		AND addressType = pAddressType AND isDefault = 1 AND isDeleted = 0) = 0) THEN  \n" +
                "  \n" +
                "			UPDATE customer_addresses  \n" +
                "			SET isDefault = 0  \n" +
                "			WHERE customerId = pCustID  \n" +
                "			AND addressType = pAddressType  \n" +
                "			AND isDefault = 1 AND isDeleted = 0 ;  \n" +
                "  \n" +
                "			SELECT MIN(id) INTO vSetNewDefaultAddrMstId  \n" +
                "			FROM customer_addresses  \n" +
                "			WHERE customerId = pCustID  \n" +
                "			AND addressType = pAddressType  \n" +
                "			AND isActive = 1  \n" +
                "			AND isDeleted = 0  ;  \n" +
                "  \n" +
                "			IF (vSetNewDefaultAddrMstId IS NOT NULL AND vSetNewDefaultAddrMstId != '') THEN  \n" +
                "				UPDATE customer_addresses  \n" +
                "				SET isDefault = 1 , updatedBy = pUserID,  updateByRoleId = pUserRoleID, updatedAt = fun_DatetimetoUTCDateTime()  \n" +
                "				WHERE id = vSetNewDefaultAddrMstId ;  \n" +
                "			END IF;  \n" +
                "	END IF;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version ->  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1278,'1.00','V1',' Sproc_updateDefaultAddrByCustAddrType - KETAN '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1278:
            allDbChangesArray.push(
                /* **************************** New Script -> 01-02-2022  *********************************** */
                "DROP TRIGGER IF EXISTS `TRG_BU_purchase_order_line_release_det`;  \n" +
                "CREATE TRIGGER `TRG_BU_purchase_order_line_release_det` BEFORE UPDATE ON `purchase_order_line_release_det` FOR EACH ROW BEGIN  \n" +
                "	IF(NEW.isdeleted = 0) THEN  \n" +
                "		IF (SELECT COUNT(1) FROM purchase_order_det WHERE id = NEW.refPurchaseOrderDetID AND isdeleted = true) = 1 THEN  \n" +
                "			SIGNAL SQLSTATE '45001' SET MESSAGE_TEXT= 'Parent Detail does not exists, Please refresh page and try again.';  \n" +
                "		END IF;  \n" +
                "		IF (NEW.qty = NEW.receivedQty AND NEW.poLineWorkingStatus='P') THEN  \n" +
                "			SET NEW.poLineWorkingStatus='C';  \n" +
                "			SET NEW.poLineCompleteType='Auto';  \n" +
                "		ELSEIF ((NEW.qty > NEW.receivedQty AND NEW.poLineCompleteType != 'Manual') OR (NEW.qty != OLD.qty AND New.poLineCompleteType = 'Manual' AND NEW.poLineWorkingStatus='C')) THEN  \n" +
                "			SET NEW.poLineWorkingStatus='P';  \n" +
                "			SET NEW.poLineCompleteType=null;  \n" +
                "		END IF;  \n" +
                "    END IF;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 01-02-2022 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1279,'1.00','V1',' Bug 40825: PO: if update PO Qty = Received Qty from purchase order means fully material is received from packing slip then PO Should be auto completed - Jay '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1279:
            allDbChangesArray.push(
                /* **************************** New Script -> 02-02-2022 *********************************** */
                "INSERT INTO feature_mst(featureName,isactive,createdBy,updatedBy)VALUES('Allow to Delete Contact Person',1,1,1);  \n" +
                /* **************************** Add Script Version -> 02-02-2022 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1280,'1.00','V1',' User Story 40422 - Bhavik '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1280:
            allDbChangesArray.push(
                /* **************************** New Script -> 02-02-2022 *********************************** */
                "DROP procedure IF EXISTS `Sproc_ValiationAndSaveStockAllocation`;  \n" +
                "CREATE PROCEDURE `Sproc_ValiationAndSaveStockAllocation`(  \n" +
                "		IN pStockDetail JSON,  \n" +
                "		IN pRefSalesOrderDetID INT,  \n" +
                "		IN pAssyID INT,  \n" +
                "		IN pPartIds LONGTEXT,  \n" +
                "		IN pUMIDs LONGTEXT,  \n" +
                "		IN pUserId VARCHAR(50),  \n" +
                "		IN pCheckForSameUmid BOOLEAN,  \n" +
                "		IN pToUOM INT,  \n" +
                "		IN pSubAssyID INT  \n" +
                "	)  \n" +
                "BEGIN  \n" +
                "	DECLARE v_CountSameUMIDFind INT;  \n" +
                "	DECLARE v_ConcateUMID LONGTEXT;  \n" +
                "	DECLARE v_KitName LONGTEXT;  \n" +
                "	DECLARE v_UMIDForKitName LONGTEXT;  \n" +
                "	DECLARE v_KitIds LONGTEXT;  \n" +
                "	DECLARE v_CountError INT;  \n" +
                "    DECLARE v_CurrentUMIDUnit DECIMAL(18,8);  \n" +
                "    DECLARE v_CurrentAllocatedUnit DECIMAL(18,8);  \n" +
                "    DECLARE v_SameAllocated TINYINT DEFAULT FALSE;  \n" +
                "    DECLARE v_KitReturnStatus VARCHAR(100);  \n" +
                "	SET v_ConcateUMID = NULL;  \n" +
                "	/* create temp table for response */  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS  temp_Validation_Error;  \n" +
                "	CREATE TEMPORARY TABLE temp_Validation_Error  \n" +
                "	(  \n" +
                "		IsSuccess BOOLEAN,  \n" +
                "		UMID LONGTEXT,  \n" +
                "		TransName LONGTEXT,  \n" +
                "		ErrorCode VARCHAR(150),  \n" +
                "		KitIds LONGTEXT,  \n" +
                "        Reason LONGTEXT,  \n" +
                "        StartDate VARCHAR(150)  \n" +
                "	);  \n" +
                "	# Error/Confirmation Codes:  \n" +
                "	# 1. MOUNTING_TYPE_MISMATCHED  \n" +
                "	# 2. FUNCTIONAL_TYPE_MISMATCHED  \n" +
                "	# 3. PO_HALT_ERROR  \n" +
                "	# 4. KIT_ALLOCATION_HALT_ERROR  \n" +
                "	# 5. SAME_UMID_ALLOCATED - Continue confimration in case of same umid is already allocated?  \n" +
                "	# 6. STOCK_NOT_ALLOCATED - UMID(s) could not be allocated, because other UMID(s) is already allocated in this kit and shared with other kit(s).  \n" +
                "	# 7. SOME_UMID_ALLOCATED - Already same UMID allocation is done by other user or by another transaction on same time.  \n" +
                "	# 8. FULLY_KIT_RETUNRED - Kit is Fully Returned then not allow to Allocate UMID(s).  \n" +
                "    # 9. RESERVED_RESTRICTED_UMID - UMID is restricted/reserved then not allow to Allocate UMID(s).  \n" +
                "	SELECT FUN_GETKITRETURNSTATUS(a.pendingReleaseCount, a.releasedNotReturnedCount, a.returnedCount, a.readyToreturnCount, a.shortageReturnCount) AS kitReturnStatus INTO v_KitReturnStatus  \n" +
                "	FROM (  \n" +
                "			SELECT  SUM(CASE WHEN kitReturnStatus = 'NA' THEN 1 ELSE 0 END) pendingReleaseCount,  \n" +
                "					SUM(CASE WHEN kitReturnStatus = 'NR' THEN 1 ELSE 0 END) releasedNotReturnedCount,  \n" +
                "					SUM(CASE WHEN kitReturnStatus = 'FR' THEN 1 ELSE 0 END) returnedCount,  \n" +
                "					SUM(CASE WHEN kitReturnStatus = 'RR' THEN 1 ELSE 0 END) readyToreturnCount,  \n" +
                "					SUM(CASE WHEN kitReturnStatus = 'RS' THEN 1 ELSE 0 END) shortageReturnCount  \n" +
                "			FROM 	vu_release_plan_release_return_status_det  \n" +
                "			WHERE  salesOrderDetID = pRefSalesOrderDetID AND refAssyId = pAssyID  \n" +
                "			AND (CASE WHEN pSubAssyID IS NOT NULL THEN subAssyID = pSubAssyID ELSE subAssyID IS NULL END)  \n" +
                "		) AS a;  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS  temp_Validation_Hold;  \n" +
                "	CREATE TEMPORARY TABLE temp_Validation_Hold  \n" +
                "	SELECT  hut.id,  \n" +
                "		hut.refTransId,  \n" +
                "        hut.refType,  \n" +
                "        hut.reason,  \n" +
                "		fun_ConvertUTCDatetimeToDataKeyTimeZone(hut.startDate) startDate,  \n" +
                "		fun_getEmployeeInitialNameByEmpID(hut.holdEmployeeId) empInitialName  \n" +
                "		FROM holdunholdtrans hut  \n" +
                "		WHERE hut.isDeleted = 0  \n" +
                "		AND hut.id IN (SELECT max(id) from holdunholdtrans ht where ht.isDeleted = 0 AND ht.refType in ('PO','KA') AND ht.refTransId = pRefSalesOrderDetID AND hut.status='H' GROUP BY ht.refType,ht.refTransId);  \n" +
                "	IF(v_KitReturnStatus = 'Fully Returned') THEN  \n" +
                "		INSERT INTO temp_Validation_Error (IsSuccess, UMID, TransName, ErrorCode, KitIds, Reason, StartDate) VALUES(0, NULL, NULL, 'FULLY_KIT_RETUNRED', NULL, NULL, NULL);  \n" +
                "	ELSEIF((SELECT COUNT(1) FROM component c WHERE c.isDeleted = 0 AND FIND_IN_SET(id, pPartIds) AND c.mountingTypeID = -1) > 0) THEN  \n" +
                "		INSERT INTO temp_Validation_Error (IsSuccess, UMID, TransName, ErrorCode, KitIds, Reason, StartDate) VALUES(0, NULL, NULL, 'MOUNTING_TYPE_MISMATCHED', NULL, NULL, NULL);  \n" +
                "	ELSEIF((SELECT COUNT(1) FROM component c WHERE c.isDeleted = 0 AND FIND_IN_SET(id, pPartIds) AND c.partType = -1) > 0) THEN  \n" +
                "		INSERT INTO temp_Validation_Error (IsSuccess, UMID, TransName, ErrorCode, KitIds, Reason, StartDate) VALUES(0, NULL, NULL, 'FUNCTIONAL_TYPE_MISMATCHED', NULL, NULL, NULL);  \n" +
                "	ELSEIF((SELECT COUNT(1) FROM temp_Validation_Hold) > 0) THEN  \n" +
                "		IF((SELECT COUNT(1) FROM temp_Validation_Hold) > 1) THEN  \n" +
                "			INSERT INTO temp_Validation_Error (IsSuccess, UMID, TransName, ErrorCode, KitIds, Reason, StartDate)  \n" +
                "				SELECT 0, NULL, th.empInitialName,'PO_HALT_ERROR', NULL, th.reason, th.startDate FROM temp_Validation_Hold th WHERE th.refType = 'PO';  \n" +
                "		ELSE  \n" +
                "			INSERT INTO temp_Validation_Error (IsSuccess, UMID, TransName, ErrorCode, KitIds, Reason, StartDate)  \n" +
                "				SELECT 0, NULL, th.empInitialName, IF(th.refType = 'PO','PO_HALT_ERROR','KIT_ALLOCATION_HALT_ERROR'), NULL, th.reason, th.startDate FROM temp_Validation_Hold th;  \n" +
                "        END IF;  \n" +
                "	ELSEIF((SELECT COUNT(1) FROM component_sid_stock cst WHERE FIND_IN_SET(cst.id, pUMIDs) AND (cst.isUMIDRestrict = TRUE OR cst.isReservedStock = TRUE)) > 0) THEN  \n" +
                "		INSERT INTO temp_Validation_Error (IsSuccess, UMID, TransName, ErrorCode, KitIds, Reason, StartDate) VALUES(0, NULL, NULL, 'RESERVED_RESTRICTED_UMID', NULL, NULL, NULL);  \n" +
                "	END IF;  \n" +
                "	IF((SELECT COUNT(1) FROM temp_Validation_Error tmp WHERE tmp.IsSuccess = 0) = 0) THEN  \n" +
                "		/* create temp table for kit allocation details */  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS tempKitAllocationDetail;  \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS tempKitAllocationDetail AS  \n" +
                "		SELECT 	*  FROM  JSON_TABLE(  \n" +
                "			pStockDetail,  \n" +
                "			\"$[*]\" COLUMNS(  \n" +
                "				refSalesOrderDetID INT PATH \"$.refSalesOrderDetID\",  \n" +
                "				assyID INT PATH \"$.assyID\",  \n" +
                "				uid VARCHAR(50) PATH \"$.uid\",  \n" +
                "				refBOMLineID INT PATH \"$.refBOMLineID\",  \n" +
                "				STATUS VARCHAR(50) PATH \"$.status\",  \n" +
                "				refUIDId INT PATH \"$.refUIDId\",  \n" +
                "				partId INT PATH \"$.partId\",  \n" +
                "				allocatedQty DECIMAL(18,8) PATH \"$.allocatedQty\",  \n" +
                "				allocatedUnit DECIMAL(18,8) PATH \"$.allocatedUnit\",  \n" +
                "				allocatedUOM INT PATH \"$.allocatedUOM\",  \n" +
                "				umidUnits INT PATH \"$.umidUnits\",  \n" +
                "				kitAllocationId INT PATH \"$.kitAllocationId\",  \n" +
                "				PIDCode VARCHAR(100) PATH \"$.PIDCode\",  \n" +
                "				restricType VARCHAR(500) PATH \"$.restricType\",  \n" +
                "				transactionType VARCHAR(1000) PATH \"$.transactionType\",  \n" +
                "				refTableName VARCHAR(255) PATH \"$.refTableName\",  \n" +
                "				approveFromPage VARCHAR(255) PATH \"$.approveFromPage\",  \n" +
                "				approvedBy VARCHAR(255) PATH \"$.approvedBy\",  \n" +
                "				approvalReason TEXT PATH \"$.approvalReason\",  \n" +
                "				confirmationType INT PATH \"$.confirmationType\",  \n" +
                "				roHSApprovalReason VARCHAR(1000) PATH \"$.roHSApprovalReason\",  \n" +
                "				allocationRemark VARCHAR(1000) PATH \"$.allocationRemark\"  \n" +
                "				)  \n" +
                "			) AS jt;  \n" +
                "		IF (pCheckForSameUmid = TRUE) THEN  \n" +
                "			SELECT 	COUNT(1), GROUP_CONCAT(uid) INTO v_CountSameUMIDFind, v_ConcateUMID  \n" +
                "			FROM 	kit_allocation  \n" +
                "			WHERE 	refSalesOrderDetID = pRefSalesOrderDetID AND STATUS = 'A' AND assyID = IFNULL(pSubAssyID, pAssyID)  AND partId IN (pPartIds) AND refUIDId IN (pUMIDs);  \n" +
                "		ELSE  \n" +
                "			SET v_CountSameUMIDFind = 0;  \n" +
                "		END IF;  \n" +
                "		IF (v_CountSameUMIDFind = 0) THEN  \n" +
                "			block1: BEGIN  \n" +
                "				DECLARE exit_loop BOOLEAN DEFAULT FALSE;  \n" +
                "				DECLARE v_RefSalesOrderDetID INT;  \n" +
                "				DECLARE v_AssyID INT;  \n" +
                "				DECLARE v_Umid VARCHAR(50);  \n" +
                "				DECLARE v_RefBOMLineID INT;  \n" +
                "				DECLARE v_Status VARCHAR(50);  \n" +
                "				DECLARE v_RefUIDId INT;  \n" +
                "				DECLARE v_PartId INT;  \n" +
                "				DECLARE v_AllocatedQty DECIMAL(18,8);  \n" +
                "				DECLARE v_AllocatedUnit DECIMAL(18,8);  \n" +
                "				DECLARE v_AllocatedUOM INT;  \n" +
                "				DECLARE v_UMIDUnits DECIMAL(18,8);  \n" +
                "				DECLARE v_countKitExist INT;  \n" +
                "				DECLARE v_CountSameUMID INT;  \n" +
                "				DECLARE	v_SameUMID VARCHAR(50);  \n" +
                "				DECLARE v_oldUMIDAllocatedUnit DECIMAL(18,8);  \n" +
                "				DECLARE v_oldUMID VARCHAR(50);  \n" +
                "				DECLARE v_CountSameAllocatedUnit INT;  \n" +
                "				DECLARE v_KitAllocationId INT;  \n" +
                "				DECLARE v_StringSameUMID VARCHAR(10000);  \n" +
                "				DECLARE v_CountUMIDForSame INT;  \n" +
                "				DECLARE v_StringUMIDForKit VARCHAR(10000);  \n" +
                "				DECLARE v_CountSameSalesOrder INT;  \n" +
                "				DECLARE v_PIDCode VARCHAR(100);  \n" +
                "				DECLARE v_RestricType VARCHAR(500);  \n" +
                "				DECLARE v_TransactionType VARCHAR(1000);  \n" +
                "				DECLARE v_RefTableName VARCHAR(255);  \n" +
                "				DECLARE v_ApproveFromPage VARCHAR(255);  \n" +
                "				DECLARE v_ApprovedBy VARCHAR(255);  \n" +
                "				DECLARE v_ConfirmationType INT;  \n" +
                "				DECLARE v_ApprovalReason TEXT;  \n" +
                "				DECLARE v_RefID INT;  \n" +
                "				DECLARE v_RoHSApprovalReason VARCHAR(1000);  \n" +
                "				DECLARE v_AllocationRemark VARCHAR(1000);  \n" +
                "				DECLARE KitAllocationDetail_Cursor CURSOR FOR  \n" +
                "				SELECT 	refSalesOrderDetID, assyID, uid, refBOMLineID, STATUS, refUIDId, partId, allocatedQty, allocatedUnit, allocatedUOM, umidUnits, kitAllocationId,  \n" +
                "						PIDCode, restricType, transactionType, refTableName, approveFromPage, approvedBy, approvalReason, confirmationType, roHSApprovalReason, allocationRemark  \n" +
                "				FROM 	tempKitAllocationDetail;  \n" +
                "				DECLARE CONTINUE HANDLER FOR NOT FOUND SET exit_loop = TRUE;  \n" +
                "				OPEN KitAllocationDetail_Cursor;  \n" +
                "				KitAllocationDetail_Loop:LOOP  \n" +
                "					FETCH 	KitAllocationDetail_Cursor INTO v_RefSalesOrderDetID, v_AssyID, v_Umid, v_RefBOMLineID, v_Status, v_RefUIDId, v_PartId, v_AllocatedQty, v_AllocatedUnit, v_AllocatedUOM, v_UMIDUnits, v_KitAllocationId,  \n" +
                "										v_PIDCode, v_RestricType, v_TransactionType, v_RefTableName, v_ApproveFromPage, v_ApprovedBy, v_ApprovalReason, v_ConfirmationType, v_RoHSApprovalReason, v_AllocationRemark;  \n" +
                "				IF exit_loop THEN  \n" +
                "					LEAVE KitAllocationDetail_Loop;  \n" +
                "				END IF;  \n" +
                "  \n" +
                "				SET v_SameAllocated = FALSE;  \n" +
                "                SELECT round(fun_convertUOM(cst.uom, 19, cst.pkgUnit),5) INTO v_CurrentUMIDUnit FROM component_sid_stock cst WHERE cst.id = v_RefUIDId;  \n" +
                "                SELECT 	SUM(fun_convertUOM(ka.allocatedUOM,pToUOM,IFNULL(ka.allocatedUnit, 0))) INTO v_CurrentAllocatedUnit FROM kit_allocation ka WHERE ka.status = 'A' AND ka.refUIDId = v_RefUIDId;  \n" +
                "                SET v_CurrentAllocatedUnit = IFNULL(v_CurrentAllocatedUnit,0) + IFNULL(v_AllocatedUnit,0);  \n" +
                "			  IF(IFNULL(v_CurrentUMIDUnit,0) >= IFNULL(v_CurrentAllocatedUnit,0)) THEN  \n" +
                "					IF (CAST(IFNULL(v_KitAllocationId, '0') AS SIGNED) != 0) THEN  \n" +
                "						UPDATE 	kit_allocation  \n" +
                "								SET 	allocatedQty = IFNULL(allocatedQty,0) + IFNULL(v_AllocatedQty,0),  \n" +
                "									allocatedUnit = IFNULL(allocatedUnit,0) + IFNULL(v_AllocatedUnit,0)  \n" +
                "								WHERE	id = v_KitAllocationId;  \n" +
                "					ELSE  \n" +
                "						INSERT INTO kit_allocation (refSalesOrderDetID, assyID, uid, refBOMLineID, allocatedQty, transactionDate, STATUS, createdBy, refUIDId, partId, allocatedUnit, allocatedUOM, roHSApprovalReason, roHSApprovedBy, roHSApprovedOn, allocationRemark)  \n" +
                "								VALUES(v_RefSalesOrderDetID, v_AssyID, v_Umid, v_RefBOMLineID, v_AllocatedQty, fun_DatetimetoUTCDateTime(),v_Status, pUserId, v_RefUIDId, v_PartId, v_AllocatedUnit, v_AllocatedUOM,  \n" +
                "								(CASE WHEN (v_RoHSApprovalReason IS NULL OR v_RoHSApprovalReason = '') THEN NULL ELSE v_RoHSApprovalReason END),  \n" +
                "								(CASE WHEN (v_RoHSApprovalReason IS NULL OR v_RoHSApprovalReason = '') THEN NULL ELSE pUserId END),  \n" +
                "								(CASE WHEN (v_RoHSApprovalReason IS NULL OR v_RoHSApprovalReason = '') THEN NULL ELSE fun_DatetimetoUTCDateTime() END),  \n" +
                "								(CASE WHEN (v_AllocationRemark IS NULL OR v_AllocationRemark = '') THEN NULL ELSE v_AllocationRemark END));  \n" +
                "								SET v_RefID = LAST_INSERT_ID();  \n" +
                "						IF(IFNULL(v_RefID, \"\") != \"\") THEN  \n" +
                "							SET v_KitIds = (  \n" +
                "									SELECT 	CASE  \n" +
                "											WHEN ((SELECT IFNULL(v_KitIds, \"\")) = \"\") THEN  \n" +
                "												v_RefID  \n" +
                "											ELSE  \n" +
                "												(SELECT CONCAT(v_KitIds, \",\", v_RefID))  \n" +
                "										END  \n" +
                "									);  \n" +
                "						END IF;  \n" +
                "						IF (v_RestricType IS NOT NULL) THEN  \n" +
                "							INSERT INTO generic_authenticationmst (transactionType, approveFromPage, refID, approvedBy, approvalReason,confirmationType, refTableName, createdBy, updatedBy)  \n" +
                "							VALUES(v_TransactionType, v_ApproveFromPage, v_RefID, v_ApprovedBy, v_ApprovalReason,v_ConfirmationType,v_RefTableName, pUserId, pUserId);  \n" +
                "						END IF;  \n" +
                "				END IF;  \n" +
                "			ELSE  \n" +
                "				SET v_SameAllocated = TRUE;  \n" +
                "				LEAVE KitAllocationDetail_Loop;  \n" +
                "			END IF;  \n" +
                "  \n" +
                "			END LOOP KitAllocationDetail_Loop;  \n" +
                "			CLOSE KitAllocationDetail_Cursor;  \n" +
                "			END block1;  \n" +
                "  \n" +
                "			INSERT INTO temp_Validation_Error (IsSuccess, UMID, TransName, ErrorCode, KitIds, Reason, StartDate)  \n" +
                "				VALUES(IF(v_SameAllocated, 0, 1), NULL, NULL, IF(v_SameAllocated, 'SOME_UMID_ALLOCATED', 'SUCCESS'), NULL, NULL, NULL);  \n" +
                "		ELSE  \n" +
                "			SELECT 	GROUP_CONCAT('(', `Po Number`, ', ', `Sales Order`, ', ', `Assy ID`, ', ', `PO Qty`, ')') INTO v_KitName  \n" +
                "			FROM 	vu_salesorder_shipped_report  \n" +
                "			WHERE 	SalesOrderDetailId IN (  \n" +
                "					SELECT 	refSalesOrderDetID  \n" +
                "					FROM 	kit_allocation  \n" +
                "					WHERE 	FIND_IN_SET(uid, v_UMIDForKitName)  \n" +
                "				);  \n" +
                "			INSERT INTO temp_Validation_Error (IsSuccess, UMID, TransName, ErrorCode, KitIds, Reason, StartDate)  \n" +
                "				VALUES(0, v_ConcateUMID, v_KitName, 'SAME_UMID_ALLOCATED', v_KitIds, NULL, NULL);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "	SELECT IsSuccess, UMID, TransName, ErrorCode, KitIds, Reason, StartDate FROM temp_Validation_Error;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 02-02-2022 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1281,'1.00','V1','Bug 40866: [Main Branch] Shows Error and restrict user to Allocate new stock to Kit if UOM of Line Item is different from part details'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1281:
            allDbChangesArray.push(
                /* **************************** New Script -> 02-02-2022 *********************************** */
                "DROP FUNCTION IF EXISTS fun_getPrimaryPhCountryCodeFromJsonList;  \n" +
                "CREATE FUNCTION `fun_getPrimaryPhCountryCodeFromJsonList`(  \n" +
                "	pJsonPhoneList TEXT  \n" +
                ") RETURNS text CHARSET utf8mb4  \n" +
                "BEGIN  \n" +
                "		DECLARE v_PhCountry VARCHAR(100);  \n" +
                "  \n" +
                "		SELECT jsonTblPhCountry.phoneCountryCode INTO v_PhCountry  \n" +
                "		FROM JSON_TABLE(pJsonPhextList, '$[*]' COLUMNS (phoneCountryCode VARCHAR(50)  PATH '$.phoneCountryCode', isprimary TINYINT  PATH '$.isPrimary')) jsonTblPhCountry  \n" +
                "		WHERE isPrimary = 1;  \n" +
                "  \n" +
                "  \n" +
                "	RETURN v_PhCountry;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 02-02-2022  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1282,'1.00','V1','fun_getPrimaryPhCountryCodeFromJsonList - Shweta '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1282:
            allDbChangesArray.push(
                /* **************************** New Script -> 02-02-2022 *********************************** */
                "DROP PROCEDURE IF EXISTS Sproc_GetPendingSalesorderDetails;  \n" +
                "CREATE PROCEDURE `Sproc_GetPendingSalesorderDetails`(  \n" +
                "	IN psoposearch LONGTEXT,  \n" +
                "	IN salesorderID INT  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "	DECLARE vMfgCodeFormat INT;  \n" +
                "    select fun_getMFGCodeNameFormat() into vMfgCodeFormat ;  \n" +
                "	-- Blanket Po option blanketPOOption 2 for Link BPO to Future PO(s)  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempsalesorder;  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS   tempsalesorder AS  \n" +
                "		   SELECT som.id FROM salesordermst som  \n" +
                "		 WHERE som.id IN  \n" +
                "			  (SELECT sd.refSalesOrderID FROM salesorderdet sd JOIN COMPONENT c ON c.id=sd.partID AND c.isdeleted=0 WHERE  \n" +
                "			   EXISTS (SELECT 1 FROM salesordermst sm WHERE  sm.id=sd.refSalesOrderID AND (sm.isBlanketPO=0 OR (sm.isBlanketPO=1 AND sm.blanketPOOption!=2)) AND sm.isdeleted=0 )  \n" +
                "						AND sd.isdeleted=0  \n" +
                "						AND NOT EXISTS (SELECT 1 FROM customer_packingslip_det cpd  \n" +
                "								JOIN customer_packingslip cp ON cp.id = cpd.refCustPackingSlipID AND cp.isDeleted = 0 AND cp.transType='P'  \n" +
                "								WHERE cpd.refsalesorderDetid=sd.id AND cpd.remainingQty=0 AND cpd.isdeleted=0  \n" +
                "						   )) OR som.id=salesorderID;  \n" +
                "  \n" +
                " SET @pWhereClause=\"1=1\";  \n" +
                "  \n" +
                " SET @temp_Sproc_GetPendingSOPO=CONCAT(\"  \n" +
                "	select so.ID,  \n" +
                "		fun_GetFormattedMfgCode(m.mfgcode,m.mfgName,\",vMfgCodeFormat,\") customerName,  \n" +
                "		so.salesOrderNumber as `SO#`,so.poNumber as `PO#` , so.poRevision, so.customerID,so.billingAddressID,  \n" +
                "		so.termsID , so.shippingAddressID,  \n" +
                "		so.shippingMethodID,so.revision,so.shippingcomment,so.soDate, so.internalComment,  \n" +
                "		so.poDate,  \n" +
                "		(CASE WHEN so.freeOnBoardId IS NULL THEN m.freeOnBoardId ELSE so.freeOnBoardId END) freeOnBoardId ,  \n" +
                "		so.intermediateShipmentId,m.mfgcode,so.contactPersonID,  \n" +
                "		(CASE WHEN so.salesCommissionTo IS NULL THEN m.salesCommissionTo ELSE so.salesCommissionTo END) salesCommissionTo ,  \n" +
                "		concat(fun_GetFormattedMfgCode(m.mfgcode,m.mfgName,\",vMfgCodeFormat,\"), ' | ',so.salesOrderNumber,' | ',so.poNumber) pendingSOPO,  \n" +
                "		m.mfgName,  \n" +
                "		so.status,so.isLegacyPO,so.isRmaPO,so.isBlanketPO,so.blanketPOOption,  \n" +
                "        so.carrierID,so.carrierAccountNumber,  \n" +
                "        so.billingContactPersonID , so.shippingContactPersonID  ,so.intermediateContactPersonID  \n" +
                "	from salesordermst so  \n" +
                "		join mfgcodemst m on m.id=so.customerID  \n" +
                "	where so.id in (select id from tempsalesorder) and so.isDeleted=0\");  \n" +
                "  \n" +
                "IF(salesorderID IS NOT NULL)THEN  \n" +
                "	SET @temp_Sproc_GetPendingSOPO=CONCAT(@temp_Sproc_GetPendingSOPO,' and so.id=',salesorderID);  \n" +
                "END IF;  \n" +
                "IF(psoposearch IS NOT NULL)THEN  \n" +
                "	SET @pWhereClause=CONCAT(\"pendingSOPO like '%\",psoposearch,\"%'\");  \n" +
                "END IF;  \n" +
                "  \n" +
                "	SET @SQLStatement1 = CONCAT(\"select * from ( \", @temp_Sproc_GetPendingSOPO,\" ) c  where \", @pWhereClause);  \n" +
                "  \n" +
                "	PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  DROP TEMPORARY TABLE IF EXISTS tempsalesorder;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 02-02-2022  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1283,'1.00','V1','Sproc_GetPendingSalesorderDetails-Bug 40843: [Main Branch] [Issue#:2]- Shweta '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1283:
            allDbChangesArray.push(
                /* **************************** New Script -> 02-02-2022 *********************************** */
                "Drop procedure if exists `Sproc_GetContactPersonForElastic`;  \n" +
                "CREATE PROCEDURE `Sproc_GetContactPersonForElastic`(  \n" +
                "	IN pId INT,  \n" +
                "    IN pFromdate DATE,  \n" +
                "    IN pTodate DATE,  \n" +
                "    IN pRequiredCount TINYINT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "	DECLARE vMfgCodeFormat INT;  \n" +
                "	DECLARE vEmployeeNameFormat INT;  \n" +
                "	DECLARE vContPersonNameFormat INT;  \n" +
                "  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "	SELECT fun_getMFGCodeNameFormat() INTO vMfgCodeFormat;  \n" +
                "	SELECT fun_getEmployeeDisplayFormat() INTO vEmployeeNameFormat;  \n" +
                "	SELECT fun_getContPersonNameDisplayFormat() INTO vContPersonNameFormat;  \n" +
                "  \n" +
                "    IF(pRequiredCount)  \n" +
                "	THEN  \n" +
                "		SELECT  \n" +
                "			COUNT(1)  \n" +
                "		FROM `contactperson`  \n" +
                "		WHERE `isDeleted` = 0 AND `personId` = IFNULL(pId,`personId`);  \n" +
                "	ELSE  \n" +
                "		SELECT cp.personId, cp.firstName, cp.middleName, cp.lastName, cp.mobile, cp.division, cp.additionalComment, cp.faxNumber, ecp.employeeId AS refTransID, cp.title,  \n" +
                "				fun_GetFormattedContactPersonName(cp.firstName, cp.middleName, cp.lastName,vContPersonNameFormat) fullName, 'Personnel' AS refEntityType,  \n" +
                "				NULL AS refName, fun_GetEmployeeFormattedName(emp.firstName, emp.middleName, emp.lastName, emp.initialName, vEmployeeNameFormat) personnels,  \n" +
                "				fun_convertJsonEmailToCommaSepList(cp.email) email,  \n" +
                "				(SELECT GROUP_CONCAT(jsonTblPhone.phone, ifnull(concat(' Ext.' ,jsonTblPhone.phExtension), '')) FROM JSON_TABLE(cp.phoneNumber, '$[*]' COLUMNS (phone VARCHAR(40)  PATH '$.phone',phExtension VARCHAR(40) PATH '$.phExtension')) jsonTblPhone) phoneNumberList,  \n" +
                "				NULL AS isDefault,  \n" +
                "				NULL AS isPrimary,  \n" +
                "				(CASE WHEN (cp.systemGenerated = 0) THEN 'No'  \n" +
                "					WHEN (cp.systemGenerated = 1) THEN 'Yes' ELSE '' END) AS systemGenerated,  \n" +
                "				(CASE WHEN cp.isActive = '1' THEN 'Active' ELSE 'Inactive' END) STATUS,  \n" +
                "				cp.isDeleted  \n" +
                "			FROM `contactperson` AS cp  \n" +
                "			LEFT JOIN employee_contactperson AS ecp ON  ecp.contactPersonId = cp.personId AND ecp.isDeleted = 0 AND ecp.releasedAt IS NULL  \n" +
                "			LEFT JOIN employees emp ON emp.id = ecp.employeeId AND emp.isDeleted = 0  \n" +
                "				WHERE `personId` = IFNULL(pId,`personId`) AND cp.refTableName ='employees'  \n" +
                "				AND (CASE WHEN (pFromdate IS NOT NULL AND pTodate IS NOT NULL) THEN  \n" +
                "					((DATE(fun_CovnertDateTimeByTimezoneValue(cp.createdAt,v_TimeZone)) BETWEEN pFromdate AND pTodate)  \n" +
                "						OR (DATE(fun_CovnertDateTimeByTimezoneValue(cp.updatedAt,v_TimeZone)) BETWEEN pFromdate AND pTodate))  \n" +
                "					ELSE 1 = 1 END)  \n" +
                "		UNION ALL  \n" +
                "		SELECT cp.personId, cp.firstName, cp.middleName, cp.lastName, cp.mobile, cp.division, cp.additionalComment, cp.faxNumber, cp.refTransID, cp.title,  \n" +
                "				fun_GetFormattedContactPersonName(cp.firstName, cp.middleName, cp.lastName,vContPersonNameFormat) fullName,  \n" +
                "				(CASE WHEN mfg.mfgType = 'MFG' THEN 'Manufacturer' WHEN mfg.mfgType = 'DIST' AND mfg.isCustOrDisty = 1 THEN 'Supplier' ELSE ''  END) AS refEntityType,  \n" +
                "                fun_GetFormattedMfgCode(mfg.mfgCode, mfg.mfgName,vMfgCodeFormat) AS refName,  NULL AS personnels,  \n" +
                "                fun_convertJsonEmailToCommaSepList(cp.email) email,  \n" +
                "                (SELECT GROUP_CONCAT(jsonTblPhone.phone, ifnull(concat(' Ext.' ,jsonTblPhone.phExtension), '')) FROM JSON_TABLE(cp.phoneNumber, '$[*]' COLUMNS (phone VARCHAR(40)  PATH '$.phone',phExtension VARCHAR(40) PATH '$.phExtension')) jsonTblPhone) phoneNumberList,  \n" +
                "				(CASE WHEN (cp.isDefault = 0) THEN 'No'  \n" +
                "					WHEN (cp.isDefault = 1) THEN 'Yes' ELSE '' END) AS isDefault,  \n" +
                "				(CASE WHEN (cp.isPrimary = 0) THEN 'No'  \n" +
                "					WHEN (cp.isPrimary = 1) THEN 'Yes' ELSE '' END) AS isPrimary,  \n" +
                "				(CASE WHEN (cp.systemGenerated = 0) THEN 'No'  \n" +
                "					WHEN (cp.systemGenerated = 1) THEN 'Yes' ELSE '' END) AS systemGenerated,  \n" +
                "				(CASE WHEN cp.isActive = '1' THEN 'Active' ELSE 'Inactive' END) STATUS,  \n" +
                "				cp.isDeleted  \n" +
                "			FROM `contactperson` AS cp  \n" +
                "				INNER JOIN mfgcodemst mfg ON mfg.id = cp.refTransID AND mfg.isDeleted = 0  \n" +
                "			WHERE `personId` = IFNULL(pId,`personId`)  \n" +
                "				AND (CASE WHEN (pFromdate IS NOT NULL AND pTodate IS NOT NULL) THEN  \n" +
                "					((DATE(fun_CovnertDateTimeByTimezoneValue(cp.createdAt,v_TimeZone)) BETWEEN pFromdate AND pTodate)  \n" +
                "						OR (DATE(fun_CovnertDateTimeByTimezoneValue(cp.updatedAt,v_TimeZone)) BETWEEN pFromdate AND pTodate))  \n" +
                "					ELSE 1 = 1 END);  \n" +
                "	END IF;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 02-02-2022 *********************************** */
                "Drop procedure if exists `Sproc_RetrieveContactPersonList`;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveContactPersonList`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN prefEntityType VARCHAR(255),  \n" +
                "	IN pisPrimary TINYINT,  \n" +
                "	IN pisDefault TINYINT,  \n" +
                "	IN prefName VARCHAR(255),  \n" +
                "	IN padditionalComment VARCHAR(2000)  \n" +
                "   )  \n" +
                "BEGIN  \n" +
                "		DECLARE pOffset INT;  \n" +
                "		DECLARE rowNumWhere VARCHAR(255) ;  \n" +
                "        DECLARE mfgcodemstCondition VARCHAR(255) DEFAULT '';  \n" +
                "		DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
                "		DECLARE v_TimeZone VARCHAR(50);  \n" +
                "		DECLARE vMfgCodeFormat INT;  \n" +
                "		DECLARE vEmployeeNameFormat INT;  \n" +
                "		DECLARE vContPersonNameFormat INT;  \n" +
                "  \n" +
                "		SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "		SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
                "		SELECT fun_getMFGCodeNameFormat() INTO vMfgCodeFormat;  \n" +
                "		SELECT fun_getEmployeeDisplayFormat() INTO vEmployeeNameFormat;  \n" +
                "		SELECT fun_getContPersonNameDisplayFormat() INTO vContPersonNameFormat;  \n" +
                "  \n" +
                "  		IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "			SET pWhereClause = ' 1=1 ';  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF(prefEntityType = 'Manufacturer') THEN  \n" +
                "			SET mfgcodemstCondition = CONCAT(\" AND  mfg.mfgType = 'MFG'\");  \n" +
                "		ELSEIF (prefEntityType = 'Supplier') THEN  \n" +
                "			SET mfgcodemstCondition = CONCAT(\" AND  mfg.mfgType = 'DIST' and mfg.isCustOrDisty = 1\");  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF(pisPrimary) THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause,\" AND isPrimary = '\",pisPrimary,\"'\");  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF(pisDefault) THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause,\" AND isDefault = '\",pisDefault,\"'\");  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF(prefName IS NOT NULL AND prefName != '') THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause, \" AND refName LIKE '%\",prefName,\"%' \");  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF(padditionalComment IS NOT NULL AND padditionalComment != '') THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause, \" AND additionalComment LIKE '%\",padditionalComment,\"%' \");  \n" +
                "		END IF;  \n" +
                "  \n" +
                "        # Common Details for Retrive Contact Person.  \n" +
                "        SET @temp_Sproc_RetrieveMasterTemplate_Common = CONCAT(\"  \n" +
                "			fun_GetFormattedContactPersonName(a.firstName, a.middleName, a.lastName, \",vContPersonNameFormat,\") formattedName,  \n" +
                "			fun_getUserNameByID(a.updatedBy) updatedbyValue, fun_getUserNameByID(a.createdBy) createdbyValue,  \n" +
                "			fun_getRoleByID(a.createByRoleId) createdbyRoleValue, fun_getRoleByID(a.updateByRoleId) updatedbyRoleValue,  \n" +
                "			fun_ApplyCommonDateTimeFormatByParaValue(a.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAtValue,  \n" +
                "			fun_ApplyCommonDateTimeFormatByParaValue(a.updatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAtValue,  \n" +
                "			(CASE WHEN (a.systemGenerated = 0) THEN 'No' WHEN (a.systemGenerated = 1) THEN 'Yes' ELSE '' END) AS `syatemGeneratedValue`,  \n" +
                "			(CASE WHEN (a.isDefault = 0) THEN 'No' WHEN (a.isDefault = 1) THEN 'Yes' ELSE '' END) AS `isDefaultValue`,  \n" +
                "			(CASE WHEN (a.isPrimary = 0) THEN 'No' WHEN (a.isPrimary = 1) THEN 'Yes' ELSE '' END) AS `isPrimaryValue`  \n" +
                "		\");  \n" +
                "  \n" +
                "		# Filter: Personnel  \n" +
                "		SET @temp_Sproc_RetrieveMasterTemplate_employees = CONCAT(\"  \n" +
                "			select cp.personId, ecp.employeeId AS refTransID, cp.refTableName, cp.firstName, cp.middleName, cp.lastName, cp.title, cp.email, cp.isDefault, cp.additionalComment, cp.phoneNumber,  \n" +
                "					 cp.mobile, cp.division, cp.faxNumber, cp.isPrimary, cp.systemGenerated, '' As refName, 'Personnel' AS refEntityType,  \n" +
                "                    fun_convertJsonEmailToCommaSepList(cp.email) emailList, (CASE WHEN cp.isActive = '1' THEN 'Active' ELSE 'Inactive' END) isActiveValue, cp.isActive,  \n" +
                "                    fun_GetEmployeeFormattedName(emp.firstName, emp.middleName, emp.lastName, emp.initialName,\",vEmployeeNameFormat,\") personnel,  \n" +
                "                    (SELECT GROUP_CONCAT(jsonTblPhone.phone, ifnull(concat(' Ext.' ,jsonTblPhone.phExtension), '')) from JSON_TABLE(cp.phoneNumber, '$[*]' COLUMNS (phone VARCHAR(40)  PATH '$.phone',phExtension VARCHAR(40)  PATH '$.phExtension')) jsonTblPhone ) phoneNumberList,  \n" +
                "					cp.updatedBy, cp.createdBy, cp.createByRoleId, cp.updateByRoleId, cp.createdAt, cp.updatedAt  \n" +
                "				FROM contactperson cp  \n" +
                "                LEFT JOIN employee_contactperson AS ecp ON  ecp.contactPersonId = cp.personId and ecp.isDeleted = 0 and ecp.releasedAt Is Null  \n" +
                "				LEFT JOIN employees emp ON emp.id = ecp.employeeId and emp.isDeleted = 0  \n" +
                "					WHERE cp.refTableName = 'employees' AND cp.isDeleted = 0  \n" +
                "		\");  \n" +
                "  \n" +
                "        # Filter: Manufacturer AND Supplier  \n" +
                "        SET @temp_Sproc_RetrieveMasterTemplate_mfgcodemst = CONCAT(\"  \n" +
                "			select cp.personId, cp.refTransID, cp.refTableName, cp.firstName, cp.middleName, cp.lastName, cp.title, cp.email, cp.isDefault, cp.additionalComment, cp.phoneNumber,  \n" +
                "					 cp.mobile, cp.division, cp.faxNumber, cp.isPrimary, cp.systemGenerated, fun_GetFormattedMfgCode(mfg.mfgCode, mfg.mfgName, \",vMfgCodeFormat,\") AS refName,  \n" +
                "					(CASE WHEN mfg.mfgType = 'MFG' THEN 'Manufacturer' WHEN mfg.mfgType = 'DIST' and mfg.isCustOrDisty = 1 THEN 'Supplier' ELSE ''  END) AS refEntityType,  \n" +
                "					(SELECT GROUP_CONCAT(jsonTblEmails.emails) from JSON_TABLE(cp.email, '$[*]' COLUMNS (emails VARCHAR(40)  PATH '$.email')) jsonTblEmails) emailList, (CASE WHEN cp.isActive = '1' THEN 'Active' ELSE 'Inactive' END) isActiveValue, cp.isActive, '' AS personnels,  \n" +
                "                    (SELECT GROUP_CONCAT(jsonTblPhone.phone, ifnull(concat(' Ext.' ,jsonTblPhone.phExtension), '')) from JSON_TABLE(cp.phoneNumber, '$[*]' COLUMNS (phone VARCHAR(40)  PATH '$.phone',phExtension VARCHAR(40)  PATH '$.phExtension')) jsonTblPhone ) phoneNumberList,  \n" +
                "                    cp.updatedBy, cp.createdBy, cp.createByRoleId, cp.updateByRoleId, cp.createdAt, cp.updatedAt  \n" +
                "                FROM contactperson cp  \n" +
                "				INNER JOIN mfgcodemst mfg ON mfg.id = cp.refTransID and mfg.isDeleted = 0 \",mfgcodemstCondition,\"  \n" +
                "						WHERE cp.isDeleted = 0  \n" +
                "		\");  \n" +
                "  \n" +
                "        # UNION Records based of Filer : Create Final Query for Fetch Contact Person Records.  \n" +
                "        IF(prefEntityType = 'Supplier' OR prefEntityType = 'Manufacturer') THEN  \n" +
                "			SET @temp_Sproc_RetrieveMasterTemplate = CONCAT(\"select *, \",@temp_Sproc_RetrieveMasterTemplate_Common,\" from  \n" +
                "					(\",@temp_Sproc_RetrieveMasterTemplate_mfgcodemst,\") a \");  \n" +
                "		ELSEIF (prefEntityType = 'Personnel') THEN  \n" +
                "			SET @temp_Sproc_RetrieveMasterTemplate = CONCAT(\"select *, \",@temp_Sproc_RetrieveMasterTemplate_Common,\" from  \n" +
                "					(\",@temp_Sproc_RetrieveMasterTemplate_employees,\") a \");  \n" +
                "        ELSE  \n" +
                "			SET @temp_Sproc_RetrieveMasterTemplate= CONCAT(\"select *,\",@temp_Sproc_RetrieveMasterTemplate_Common,\" from  \n" +
                "					(\",@temp_Sproc_RetrieveMasterTemplate_employees,\" UNION ALL \",@temp_Sproc_RetrieveMasterTemplate_mfgcodemst,\") a \");  \n" +
                "        END IF;  \n" +
                "  \n" +
                "		IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "			SET pOrderBy = \"ORDER BY firstName ASC\" ;  \n" +
                "		ELSE  \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "			SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "		ELSE  \n" +
                "			SET rowNumWhere = '';  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		 /* to get total count of rows */  \n" +
                "		SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_RetrieveMasterTemplate,\" ) c where 1=1 and \", pWhereClause);  \n" +
                "		PREPARE query2 FROM @SQLStatement2;  \n" +
                "		EXECUTE query2;  \n" +
                "		DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "		SET @SQLStatement2 = CONCAT(\"select * from ( \", @temp_Sproc_RetrieveMasterTemplate,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "		PREPARE query1 FROM @SQLStatement2;  \n" +
                "		EXECUTE query1;  \n" +
                "		DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** New Script -> 02-02-2022 *********************************** */
                "DROP TRIGGER IF EXISTS `Trg_AU_contactperson`;  \n" +
                "CREATE TRIGGER `Trg_AU_contactperson` AFTER UPDATE ON `contactperson` FOR EACH ROW BEGIN  \n" +
                "	DECLARE v_createdAt DATETIME DEFAULT fun_DatetimetoUTCDateTime();  \n" +
                "	DECLARE vTableName VARCHAR(50) DEFAULT \"contactperson\";  \n" +
                "  \n" +
                "	IF IFNULL(OLD.firstName,0) != IFNULL(NEW.firstName,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType)  \n" +
                "        VALUES('CONTACT_PERSON',CAST(new.personId AS CHAR),'First Name',CAST(OLD.firstName AS CHAR), CAST(NEW.firstName AS CHAR),v_createdAt,NEW.createdBy,v_createdAt,NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,fun_getDataTypeBasedOnTableAndColumnName(vTableName,'firstName'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.lastName,0) != IFNULL(NEW.lastName,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType)  \n" +
                "        VALUES('CONTACT_PERSON',CAST(new.personId AS CHAR),'Last Name',CAST(OLD.lastName AS CHAR), CAST(NEW.lastName AS CHAR),v_createdAt,NEW.createdBy,v_createdAt,NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,fun_getDataTypeBasedOnTableAndColumnName(vTableName,'lastName'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.email,0) != IFNULL(NEW.email,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType)  \n" +
                "        VALUES('CONTACT_PERSON',CAST(new.personId AS CHAR),'Email',CAST((SELECT GROUP_CONCAT(jsonTblEmails.email1) from JSON_TABLE(OLD.email, '$[*]' COLUMNS (email1 VARCHAR(40)  PATH '$.email')) jsonTblEmails) AS CHAR),  \n" +
                "			CAST(( SELECT GROUP_CONCAT(jsonTblEmails.email1) from JSON_TABLE(NEW.email, '$[*]' COLUMNS (email1 VARCHAR(40)  PATH '$.email')) jsonTblEmails)AS CHAR), v_createdAt,NEW.createdBy,v_createdAt,  \n" +
                "            NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,fun_getDataTypeBasedOnTableAndColumnName(vTableName,'email'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.mobile,0) != IFNULL(NEW.mobile,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType)  \n" +
                "        VALUES('CONTACT_PERSON',CAST(new.personId AS CHAR),'Mobile',CAST(OLD.mobile AS CHAR), CAST(NEW.mobile AS CHAR),v_createdAt,NEW.createdBy,v_createdAt,NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,fun_getDataTypeBasedOnTableAndColumnName(vTableName,'mobile'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.division,0) != IFNULL(NEW.division,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType)  \n" +
                "        VALUES('CONTACT_PERSON',CAST(new.personId AS CHAR),'Department',CAST(OLD.division AS CHAR), CAST(NEW.division AS CHAR),v_createdAt,NEW.createdBy,v_createdAt,NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,fun_getDataTypeBasedOnTableAndColumnName(vTableName,'division'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.faxNumber,0) != IFNULL(NEW.faxNumber,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType)  \n" +
                "        VALUES('CONTACT_PERSON',CAST(new.personId AS CHAR),'Fax',CAST(OLD.faxNumber AS CHAR), CAST(NEW.faxNumber AS CHAR),v_createdAt,NEW.createdBy,v_createdAt,NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,fun_getDataTypeBasedOnTableAndColumnName(vTableName,'faxNumber'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.middleName,0) != IFNULL(NEW.middleName,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType)  \n" +
                "        VALUES('CONTACT_PERSON',CAST(new.personId AS CHAR),'Middle Name',CAST(OLD.middleName AS CHAR), CAST(NEW.middleName AS CHAR),v_createdAt,NEW.createdBy,v_createdAt,NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,fun_getDataTypeBasedOnTableAndColumnName(vTableName,'middleName'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.isDefault,0) != IFNULL(NEW.isDefault,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType)  \n" +
                "        VALUES('CONTACT_PERSON',CAST(new.personId AS CHAR),'Set as Default \"Attention to\"',CAST((CASE WHEN OLD.isDefault = '1' THEN 'Yes' ELSE 'No' END) AS CHAR), CAST((CASE WHEN NEW.isDefault = '1' THEN 'Yes' ELSE 'No' END) AS CHAR),v_createdAt,NEW.createdBy,v_createdAt,NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,fun_getDataTypeBasedOnTableAndColumnName(vTableName,'isDefault'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.additionalComment,0) != IFNULL(NEW.additionalComment,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType)  \n" +
                "        VALUES('CONTACT_PERSON',CAST(new.personId AS CHAR),'Comment',CAST(OLD.additionalComment AS CHAR), CAST(NEW.additionalComment AS CHAR),v_createdAt,NEW.createdBy,v_createdAt,NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,'longtext');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.isPrimary,0) != IFNULL(NEW.isPrimary,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType)  \n" +
                "        VALUES('CONTACT_PERSON',CAST(new.personId AS CHAR),'Primary Person',CAST((CASE WHEN OLD.isPrimary = '1' THEN 'Yes' ELSE 'No' END) AS CHAR), CAST((CASE WHEN NEW.isPrimary = '1' THEN 'Yes' ELSE 'No' END) AS CHAR),v_createdAt,NEW.createdBy,v_createdAt,NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,fun_getDataTypeBasedOnTableAndColumnName(vTableName,'isPrimary'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (IFNULL(OLD.refTableName,0) != IFNULL(NEW.refTableName,0) OR IFNULL(OLD.refTransID,0) != IFNULL(NEW.refTransID,0) ) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType)  \n" +
                "        VALUES('CONTACT_PERSON',CAST(new.personId AS CHAR),'Contact Person Type',CAST((CASE WHEN (OLD.refTableName = 'employees') THEN 'Personnel' WHEN (OLD.refTableName = 'mfgcodemst') THEN (SELECT (CASE  \n" +
                "			WHEN a.mfgType = 'MFG' THEN 'Manufacturer' WHEN a.mfgType = 'DIST' and a.isCustOrDisty = 1 THEN 'Supplier' ELSE ''  END) from (Select mfgType,isCustOrDisty from mfgcodemst where id = OLD.refTransID) a) ELSE '' END) AS CHAR),  \n" +
                "			CAST((CASE WHEN (NEW.refTableName = 'employees') THEN 'Personnel' WHEN (NEW.refTableName = 'mfgcodemst') THEN (SELECT (CASE WHEN a.mfgType = 'MFG' THEN 'Manufacturer' WHEN a.mfgType = 'DIST' and a.isCustOrDisty = 1 THEN 'Supplier' ELSE ''  END) from (Select mfgType,isCustOrDisty from mfgcodemst where id = NEW.refTransID) a) ELSE '' END) AS CHAR),  \n" +
                "             v_createdAt,NEW.createdBy,v_createdAt,NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,fun_getDataTypeBasedOnTableAndColumnName(vTableName,'refTableName'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.title,0) != IFNULL(NEW.title,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType)  \n" +
                "        VALUES('CONTACT_PERSON',CAST(new.personId AS CHAR),'Title',CAST(OLD.title AS CHAR), CAST(NEW.title AS CHAR),v_createdAt,NEW.createdBy,v_createdAt,NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,fun_getDataTypeBasedOnTableAndColumnName(vTableName,'title'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.isActive,0) != IFNULL(NEW.isActive,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType)  \n" +
                "        VALUES('CONTACT_PERSON',CAST(new.personId AS CHAR),'Status',CAST((CASE WHEN OLD.isActive = '1' THEN 'Active' ELSE 'Inactive' END) AS CHAR), CAST((CASE WHEN NEW.isActive = '1' THEN 'Active' ELSE 'Inactive' END) AS CHAR),v_createdAt,NEW.createdBy,v_createdAt,NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,'varchar');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.phoneNumber,0) != IFNULL(NEW.phoneNumber,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType)  \n" +
                "        VALUES('CONTACT_PERSON',CAST(new.personId AS CHAR),'Phone Numbers',  \n" +
                "        CAST((SELECT GROUP_CONCAT(jsonTblPhone.phone, ifnull(concat(' Ext.' ,jsonTblPhone.phExtension), '')) from JSON_TABLE(OLD.phoneNumber, '$[*]' COLUMNS (phone VARCHAR(40)  PATH '$.phone',phExtension VARCHAR(40) PATH '$.phExtension')) jsonTblPhone) AS CHAR),  \n" +
                "		CAST((SELECT GROUP_CONCAT(jsonTblPhone.phone, ifnull(concat(' Ext.' ,jsonTblPhone.phExtension), '')) from JSON_TABLE(NEW.phoneNumber, '$[*]' COLUMNS (phone VARCHAR(40)  PATH '$.phone',phExtension VARCHAR(40) PATH '$.phExtension')) jsonTblPhone) AS CHAR),  \n" +
                "        v_createdAt,NEW.createdBy,v_createdAt, NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,fun_getDataTypeBasedOnTableAndColumnName(vTableName,'phoneNumber'));  \n" +
                "	END IF;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 02-02-2022 *********************************** */
                "Drop function if Exists `fun_getFormattedContactPerson`;  \n" +
                "CREATE FUNCTION `fun_getFormattedContactPerson`(  \n" +
                "	pFirstName VARCHAR(255),  \n" +
                "     pMiddleName VARCHAR(255),  \n" +
                "     pLastName VARCHAR(255),  \n" +
                "     pDivision VARCHAR(100),  \n" +
                "     pEmail LONGTEXT,  \n" +
                "     pPhoneCountryCode VARCHAR(5),  \n" +
                "     pPhone VARCHAR(255),  \n" +
                "     pPhExtension VARCHAR(8)  ,  \n" +
                "     pMobile VARCHAR(255),  \n" +
                "     pFaxCountryCode VARCHAR(5),  \n" +
                "     pFaxNumber VARCHAR(255)  \n" +
                ") RETURNS longtext CHARSET utf8mb4  \n" +
                "BEGIN  \n" +
                "	DECLARE vReturn LONGTEXT;  \n" +
                "	DECLARE vContPersonNameFormat INT;  \n" +
                "  \n" +
                "	SELECT fun_getContPersonNameDisplayFormat() INTO vContPersonNameFormat;  \n" +
                "  \n" +
                "	SELECT  CONCAT(fun_GetFormattedContactPersonName(pFirstName, pMiddleName,pLastName,vContPersonNameFormat),  \n" +
                "		 CASE WHEN pDivision IS NULL THEN '' ELSE pDivision END,  \n" +
                "		 CASE WHEN pEmail IS NULL THEN '' ELSE fun_convertJsonEmailToCommaSepList(pEmail) END,  \n" +
                "         # CASE WHEN pPhoneCountryCode IS NULL THEN '' ELSE CONCAT(pPhoneCountryCode,'-') END,  \n" +
                "		 CASE WHEN pPhone IS NULL THEN '' ELSE pPhone END,  \n" +
                "		 CASE WHEN pPhExtension IS NULL THEN '' ELSE CONCAT('Ext. ',pPhExtension) END,  \n" +
                "		 CASE WHEN pMobile IS NULL THEN '' ELSE pMobile END,  \n" +
                "         CASE WHEN pFaxCountryCode IS NULL THEN '' ELSE CONCAT(pFaxCountryCode,'-') END,  \n" +
                "		 CASE WHEN pFaxNumber IS NULL THEN '' ELSE pFaxNumber END) INTO  vReturn  ;  \n" +
                "	RETURN vReturn;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 02-02-2022 *********************************** */
                "Drop procedure if exists `Sproc_RetrieveSupplierQuote`;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveSupplierQuote`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "    IN pIsSummary TINYINT,  \n" +
                "	IN pSupplierIds VARCHAR(16000),  \n" +
                "	IN pQuoteStatus VARCHAR(1000),  \n" +
                "	IN pSearchType VARCHAR(5),  \n" +
                "	IN pAdvanceSearchSQ VARCHAR(100),  \n" +
                "	IN pfromDate DATE,  \n" +
                "	IN ptoDate DATE,  \n" +
                "    IN pPartIds VARCHAR(16000)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;  \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "	DECLARE v_MfgNameFormat VARCHAR(100);  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
                "    SELECT fun_getMFGCodeNameFormat() INTO v_MfgNameFormat;  \n" +
                "  \n" +
                "	IF (pIsSummary = FALSE) THEN  \n" +
                "		SET @temp_Sproc_RetrieveSupplierQuote = CONCAT(\"  \n" +
                "				SELECT  \n" +
                "					s.id,  \n" +
                "					spd.id AS supplierQuotePartDetID,  \n" +
                "					fun_GetFormattedMfgCode(cm.mfgCode, cm.mfgName, \",v_MfgNameFormat,\") mfgName,  \n" +
                "					cm.mfgCode,  \n" +
                "					s.supplierID,  \n" +
                "					spd.partID,  \n" +
                "                    c.custAssyPN,  \n" +
                "					c.mfgPN AS mfgPN,  \n" +
                "                    c.mfgPNDescription,  \n" +
                "					c.mfgcodeID,  \n" +
                "					sc.mfgPN AS supplierPN,  \n" +
                "					spd.supplierPartID,  \n" +
                "					m.mfgName AS supplier,  \n" +
                "					s.quoteNumber,  \n" +
                "					s.quoteDate,  \n" +
                "					s.reference,  \n" +
                "					s.quoteStatus,  \n" +
                "					IF(s.quoteStatus = 'D', 'Draft', 'Published') AS statusConvertedValue,  \n" +
                "					IF(spd.isActive = 0, 'Inactive', 'Active') AS isActiveConvertedValueDetail,  \n" +
                "					spd.isActive,  \n" +
                "					spd.scanLabel,  \n" +
                "                    IF(s.quoteStatus = 'P',true, false) AS isDisabledDelete,  \n" +
                "                    IF(spd.id IS NULL, true, false) AS isDisabledPartPricing,  \n" +
                "                    IF(spd.id IS NULL, true, false) AS isDisabledCopySupplierQuote,  \n" +
                "                    IF(spd.id IS NULL, true, false) AS isDisabledPartPricingHistory,  \n" +
                "                    IF(spd.id IS NULL, false, true) AS isRequirementReference,  \n" +
                "					c.isCustom,  \n" +
                "					sc.isCustom AS isCustomSupplier,  \n" +
                "					rhc.rohsIcon,  \n" +
                "					rhc.name rohsName,  \n" +
                "					rhsc.rohsIcon supplierRohsIcon,  \n" +
                "					rhsc.name supplierRohsName,  \n" +
                "					fun_getPartAttibutesBySupplierQuoteDetailID(spd.id) AS attributesList,  \n" +
                "					fun_getPartPricingCountBySupplierQuoteDetailID(spd.id) AS pricingCount,  \n" +
                "					fun_getUserNameByID(spd.createdBy) createdby,  \n" +
                "					fun_getUserNameByID(spd.updatedBy) updatedby,  \n" +
                "					fun_ApplyCommonDateTimeFormatByParaValue(spd.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAt,  \n" +
                "					fun_ApplyCommonDateTimeFormatByParaValue(spd.UpdatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt,  \n" +
                "					fun_getRoleByID(spd.updateByRoleId) updatedByRole,  \n" +
                "					fun_getRoleByID(spd.createByRoleId) createdByRole  \n" +
                "				FROM  supplier_quote_parts_det spd  \n" +
                "				LEFT JOIN supplier_quote_mst s ON spd.supplierQuoteMstID = s.id AND s.isDeleted = 0  \n" +
                "				LEFT JOIN component c ON spd.partID = c.id AND c.isDeleted = 0  \n" +
                "				LEFT JOIN rfq_rohsmst rhc ON c.RoHSStatusID = rhc.id AND rhc.isDeleted = 0  \n" +
                "				LEFT JOIN component sc ON spd.supplierPartID = sc.id AND sc.isDeleted = 0 AND sc.refSupplierMfgpnComponentID IS NOT NULL  \n" +
                "				LEFT JOIN rfq_rohsmst rhsc ON sc.RoHSStatusID = rhsc.id AND rhsc.isDeleted = 0  \n" +
                "				LEFT JOIN mfgcodemst m ON s.supplierId = m.id AND m.isDeleted = 0  \n" +
                "				LEFT JOIN mfgcodemst cm ON cm.id = c.mfgcodeID  AND cm.isDeleted = 0  \n" +
                "				WHERE spd.isDeleted = 0 \");  \n" +
                "	 ELSE  \n" +
                "		SET @temp_Sproc_RetrieveSupplierQuote = CONCAT(\"  \n" +
                "			SELECT 	s.id,  \n" +
                "					s.supplierID,  \n" +
                "					m.mfgName AS supplier,  \n" +
                "					s.quoteNumber,  \n" +
                "					s.quoteDate,  \n" +
                "					s.reference,  \n" +
                "					s.quoteStatus,  \n" +
                "					IF(s.quoteStatus = 'D', 'Draft', 'Published') AS statusConvertedValue,  \n" +
                "                    IF(s.quoteStatus = 'P', true, false) AS isDisabledDelete,  \n" +
                "                    fun_getAddressbyID(s.billingAddressID) billTo,  \n" +
                "                    fun_getAddressbyID(s.shippingAddressID) shipTo,  \n" +
                "                    fun_getFormattedContactPerson(cntb.firstName,cntb.middleName,cntb.lastName,cntb.division,cntb.email,cntb.phoneCountryCode, fun_getPrimaryPhoneFromJsonList(cntb.phoneNumber), fun_getPrimaryPhExtensionFromJsonList(cntb.phoneNumber), cntb.mobile, cntb.faxCountryCode, cntb.faxNumber) billToContactName,  \n" +
                "                    fun_getFormattedContactPerson(cnts.firstName,cnts.middleName,cnts.lastName,cnts.division,cnts.email,cnts.phoneCountryCode, fun_getPrimaryPhoneFromJsonList(cnts.phoneNumber),fun_getPrimaryPhExtensionFromJsonList(cnts.phoneNumber), cnts.mobile, cnts.faxCountryCode, cnts.faxNumber) shipToContactName,  \n" +
                "                    (SELECT COUNT(0) FROM supplier_quote_parts_det WHERE isDeleted = 0 AND supplierQuoteMstID = s.id) AS noOfSupplierPartLine,  \n" +
                "					fun_getUserNameByID(s.createdBy) createdby,  \n" +
                "					fun_getUserNameByID(s.updatedBy) updatedby,  \n" +
                "					fun_ApplyCommonDateTimeFormatByParaValue(s.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAt,  \n" +
                "					fun_ApplyCommonDateTimeFormatByParaValue(s.UpdatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt,  \n" +
                "					fun_getRoleByID(s.updateByRoleId) updatedByRole,  \n" +
                "					fun_getRoleByID(s.createByRoleId) createdByRole  \n" +
                "			FROM   supplier_quote_mst s  \n" +
                "			LEFT JOIN mfgcodemst m ON s.supplierId = m.id AND m.isDeleted = 0  \n" +
                "			LEFT JOIN contactperson cntb ON s.billingContactPersonID = cntb.personId AND cntb.isDeleted = 0  \n" +
                "			LEFT JOIN contactperson cnts ON s.shippingContactPersonID = cnts.personId AND cnts.isDeleted = 0  \n" +
                "			WHERE  s.isDeleted = 0  AND  \n" +
                "            (CASE WHEN ('\",pPartIds,\"' != '') THEN  \n" +
                "				s.id IN  (SELECT spd.supplierQuoteMstID FROM  \n" +
                "				supplier_quote_parts_det spd  \n" +
                "                LEFT JOIN component c ON spd.partID = c.id AND c.isDeleted = 0  \n" +
                "				LEFT JOIN component sc ON spd.supplierPartID = sc.id AND sc.isDeleted = 0 AND sc.refSupplierMfgpnComponentID IS NOT NULL  \n" +
                "                WHERE spd.isDeleted = 0 AND (FIND_IN_SET(spd.supplierPartID, ('\",pPartIds,\"')) OR FIND_IN_SET(spd.partID, ('\",pPartIds,\"'))))  \n" +
                "				ELSE 1 = 1 END)  \n" +
                "			\");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY id desc\") ;  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = '1=1' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF(pSupplierIds IS NOT NULL OR pSupplierIds != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND supplierID in (\"',pSupplierIds,'\")');  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF(pQuoteStatus IS NOT NULL OR pQuoteStatus != '') THEn  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND quoteStatus in (\"',pQuoteStatus,'\")');  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF(pAdvanceSearchSQ IS NOT NULL OR pAdvanceSearchSQ != '') THEN  \n" +
                "		IF(pSearchType = 'E') THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause, ' AND quoteNumber = \"', pAdvanceSearchSQ , '\" ');  \n" +
                "		ELSE  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause, ' AND quoteNumber LIKE \"%', pAdvanceSearchSQ ,'%\" ');  \n" +
                "		END IF;  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF(pfromDate IS NOT NULL AND ptoDate IS NOT NULL)THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND (quoteDate >= ''',pfromDate,''' and quoteDate <= ''',ptoDate,''')');  \n" +
                "	ELSEIF(pfromDate IS NOT NULL)THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND (quoteDate >= ''',pfromDate,''')');  \n" +
                "	ELSEIF(ptoDate IS NOT NULL)THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND (quoteDate <= ''',ptoDate,''')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF(pPartIds != '' AND (pIsSummary = FALSE)) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND ( supplierPartID in (\"',pPartIds,'\") OR partID in (\"',pPartIds,'\") )');  \n" +
                "    END IF;  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/* to get total count of rows */  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_RetrieveSupplierQuote,\" ) c where 1=1 and \", pWhereClause);  \n" +
                "	PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"select c.*  from ( \", @temp_Sproc_RetrieveSupplierQuote,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "   PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 02-02-2022 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1284,'1.00','V1',' Remove OLD columns: phone/phExtension. - Bhavik '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1284:
            allDbChangesArray.push(
                /* **************************** New Script -> 02-02-2022 *********************************** */
                "DROP procedure IF EXISTS `Sproc_ValiationAndSaveStockAllocation`;  \n" +
                "CREATE PROCEDURE `Sproc_ValiationAndSaveStockAllocation`(  \n" +
                "		IN pStockDetail JSON,  \n" +
                "		IN pRefSalesOrderDetID INT,  \n" +
                "		IN pAssyID INT,  \n" +
                "		IN pPartIds LONGTEXT,  \n" +
                "		IN pUMIDs LONGTEXT,  \n" +
                "		IN pUserId VARCHAR(50),  \n" +
                "		IN pCheckForSameUmid BOOLEAN,  \n" +
                "		IN pToUOM INT,  \n" +
                "		IN pSubAssyID INT,  \n" +
                "       IN pUnitFilterDecimal INT  \n" +
                "	)  \n" +
                "BEGIN  \n" +
                "	DECLARE v_CountSameUMIDFind INT;  \n" +
                "	DECLARE v_ConcateUMID LONGTEXT;  \n" +
                "	DECLARE v_KitName LONGTEXT;  \n" +
                "	DECLARE v_UMIDForKitName LONGTEXT;  \n" +
                "	DECLARE v_KitIds LONGTEXT;  \n" +
                "	DECLARE v_CountError INT;  \n" +
                "    DECLARE v_CurrentUMIDUnit DECIMAL(18,8);  \n" +
                "    DECLARE v_CurrentAllocatedUnit DECIMAL(18,8);  \n" +
                "    DECLARE v_SameAllocated TINYINT DEFAULT FALSE;  \n" +
                "    DECLARE v_KitReturnStatus VARCHAR(100);  \n" +
                "	SET v_ConcateUMID = NULL;  \n" +
                "	/* create temp table for response */  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS  temp_Validation_Error;  \n" +
                "	CREATE TEMPORARY TABLE temp_Validation_Error  \n" +
                "	(  \n" +
                "		IsSuccess BOOLEAN,  \n" +
                "		UMID LONGTEXT,  \n" +
                "		TransName LONGTEXT,  \n" +
                "		ErrorCode VARCHAR(150),  \n" +
                "		KitIds LONGTEXT,  \n" +
                "        Reason LONGTEXT,  \n" +
                "        StartDate VARCHAR(150)  \n" +
                "	);  \n" +
                "	# Error/Confirmation Codes:  \n" +
                "	# 1. MOUNTING_TYPE_MISMATCHED  \n" +
                "	# 2. FUNCTIONAL_TYPE_MISMATCHED  \n" +
                "	# 3. PO_HALT_ERROR  \n" +
                "	# 4. KIT_ALLOCATION_HALT_ERROR  \n" +
                "	# 5. SAME_UMID_ALLOCATED - Continue confimration in case of same umid is already allocated?  \n" +
                "	# 6. STOCK_NOT_ALLOCATED - UMID(s) could not be allocated, because other UMID(s) is already allocated in this kit and shared with other kit(s).  \n" +
                "	# 7. SOME_UMID_ALLOCATED - Already same UMID allocation is done by other user or by another transaction on same time.  \n" +
                "	# 8. FULLY_KIT_RETUNRED - Kit is Fully Returned then not allow to Allocate UMID(s).  \n" +
                "    # 9. RESERVED_RESTRICTED_UMID - UMID is restricted/reserved then not allow to Allocate UMID(s).  \n" +
                "	SELECT FUN_GETKITRETURNSTATUS(a.pendingReleaseCount, a.releasedNotReturnedCount, a.returnedCount, a.readyToreturnCount, a.shortageReturnCount) AS kitReturnStatus INTO v_KitReturnStatus  \n" +
                "	FROM (  \n" +
                "			SELECT  SUM(CASE WHEN kitReturnStatus = 'NA' THEN 1 ELSE 0 END) pendingReleaseCount,  \n" +
                "					SUM(CASE WHEN kitReturnStatus = 'NR' THEN 1 ELSE 0 END) releasedNotReturnedCount,  \n" +
                "					SUM(CASE WHEN kitReturnStatus = 'FR' THEN 1 ELSE 0 END) returnedCount,  \n" +
                "					SUM(CASE WHEN kitReturnStatus = 'RR' THEN 1 ELSE 0 END) readyToreturnCount,  \n" +
                "					SUM(CASE WHEN kitReturnStatus = 'RS' THEN 1 ELSE 0 END) shortageReturnCount  \n" +
                "			FROM 	vu_release_plan_release_return_status_det  \n" +
                "			WHERE  salesOrderDetID = pRefSalesOrderDetID AND refAssyId = pAssyID  \n" +
                "			AND (CASE WHEN pSubAssyID IS NOT NULL THEN subAssyID = pSubAssyID ELSE subAssyID IS NULL END)  \n" +
                "		) AS a;  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS  temp_Validation_Hold;  \n" +
                "	CREATE TEMPORARY TABLE temp_Validation_Hold  \n" +
                "	SELECT  hut.id,  \n" +
                "		hut.refTransId,  \n" +
                "        hut.refType,  \n" +
                "        hut.reason,  \n" +
                "		fun_ConvertUTCDatetimeToDataKeyTimeZone(hut.startDate) startDate,  \n" +
                "		fun_getEmployeeInitialNameByEmpID(hut.holdEmployeeId) empInitialName  \n" +
                "		FROM holdunholdtrans hut  \n" +
                "		WHERE hut.isDeleted = 0  \n" +
                "		AND hut.id IN (SELECT max(id) from holdunholdtrans ht where ht.isDeleted = 0 AND ht.refType in ('PO','KA') AND ht.refTransId = pRefSalesOrderDetID AND hut.status='H' GROUP BY ht.refType,ht.refTransId);  \n" +
                "	IF(v_KitReturnStatus = 'Fully Returned') THEN  \n" +
                "		INSERT INTO temp_Validation_Error (IsSuccess, UMID, TransName, ErrorCode, KitIds, Reason, StartDate) VALUES(0, NULL, NULL, 'FULLY_KIT_RETUNRED', NULL, NULL, NULL);  \n" +
                "	ELSEIF((SELECT COUNT(1) FROM component c WHERE c.isDeleted = 0 AND FIND_IN_SET(id, pPartIds) AND c.mountingTypeID = -1) > 0) THEN  \n" +
                "		INSERT INTO temp_Validation_Error (IsSuccess, UMID, TransName, ErrorCode, KitIds, Reason, StartDate) VALUES(0, NULL, NULL, 'MOUNTING_TYPE_MISMATCHED', NULL, NULL, NULL);  \n" +
                "	ELSEIF((SELECT COUNT(1) FROM component c WHERE c.isDeleted = 0 AND FIND_IN_SET(id, pPartIds) AND c.partType = -1) > 0) THEN  \n" +
                "		INSERT INTO temp_Validation_Error (IsSuccess, UMID, TransName, ErrorCode, KitIds, Reason, StartDate) VALUES(0, NULL, NULL, 'FUNCTIONAL_TYPE_MISMATCHED', NULL, NULL, NULL);  \n" +
                "	ELSEIF((SELECT COUNT(1) FROM temp_Validation_Hold) > 0) THEN  \n" +
                "		IF((SELECT COUNT(1) FROM temp_Validation_Hold) > 1) THEN  \n" +
                "			INSERT INTO temp_Validation_Error (IsSuccess, UMID, TransName, ErrorCode, KitIds, Reason, StartDate)  \n" +
                "				SELECT 0, NULL, th.empInitialName,'PO_HALT_ERROR', NULL, th.reason, th.startDate FROM temp_Validation_Hold th WHERE th.refType = 'PO';  \n" +
                "		ELSE  \n" +
                "			INSERT INTO temp_Validation_Error (IsSuccess, UMID, TransName, ErrorCode, KitIds, Reason, StartDate)  \n" +
                "				SELECT 0, NULL, th.empInitialName, IF(th.refType = 'PO','PO_HALT_ERROR','KIT_ALLOCATION_HALT_ERROR'), NULL, th.reason, th.startDate FROM temp_Validation_Hold th;  \n" +
                "        END IF;  \n" +
                "	ELSEIF((SELECT COUNT(1) FROM component_sid_stock cst WHERE FIND_IN_SET(cst.id, pUMIDs) AND (cst.isUMIDRestrict = TRUE OR cst.isReservedStock = TRUE)) > 0) THEN  \n" +
                "		INSERT INTO temp_Validation_Error (IsSuccess, UMID, TransName, ErrorCode, KitIds, Reason, StartDate) VALUES(0, NULL, NULL, 'RESERVED_RESTRICTED_UMID', NULL, NULL, NULL);  \n" +
                "	END IF;  \n" +
                "	IF((SELECT COUNT(1) FROM temp_Validation_Error tmp WHERE tmp.IsSuccess = 0) = 0) THEN  \n" +
                "		/* create temp table for kit allocation details */  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS tempKitAllocationDetail;  \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS tempKitAllocationDetail AS  \n" +
                "		SELECT 	*  FROM  JSON_TABLE(  \n" +
                "			pStockDetail,  \n" +
                "			\"$[*]\" COLUMNS(  \n" +
                "				refSalesOrderDetID INT PATH \"$.refSalesOrderDetID\",  \n" +
                "				assyID INT PATH \"$.assyID\",  \n" +
                "				uid VARCHAR(50) PATH \"$.uid\",  \n" +
                "				refBOMLineID INT PATH \"$.refBOMLineID\",  \n" +
                "				STATUS VARCHAR(50) PATH \"$.status\",  \n" +
                "				refUIDId INT PATH \"$.refUIDId\",  \n" +
                "				partId INT PATH \"$.partId\",  \n" +
                "				allocatedQty DECIMAL(18,8) PATH \"$.allocatedQty\",  \n" +
                "				allocatedUnit DECIMAL(18,8) PATH \"$.allocatedUnit\",  \n" +
                "				allocatedUOM INT PATH \"$.allocatedUOM\",  \n" +
                "				umidUnits INT PATH \"$.umidUnits\",  \n" +
                "				kitAllocationId INT PATH \"$.kitAllocationId\",  \n" +
                "				PIDCode VARCHAR(100) PATH \"$.PIDCode\",  \n" +
                "				restricType VARCHAR(500) PATH \"$.restricType\",  \n" +
                "				transactionType VARCHAR(1000) PATH \"$.transactionType\",  \n" +
                "				refTableName VARCHAR(255) PATH \"$.refTableName\",  \n" +
                "				approveFromPage VARCHAR(255) PATH \"$.approveFromPage\",  \n" +
                "				approvedBy VARCHAR(255) PATH \"$.approvedBy\",  \n" +
                "				approvalReason TEXT PATH \"$.approvalReason\",  \n" +
                "				confirmationType INT PATH \"$.confirmationType\",  \n" +
                "				roHSApprovalReason VARCHAR(1000) PATH \"$.roHSApprovalReason\",  \n" +
                "				allocationRemark VARCHAR(1000) PATH \"$.allocationRemark\"  \n" +
                "				)  \n" +
                "			) AS jt;  \n" +
                "		IF (pCheckForSameUmid = TRUE) THEN  \n" +
                "			SELECT 	COUNT(1), GROUP_CONCAT(uid) INTO v_CountSameUMIDFind, v_ConcateUMID  \n" +
                "			FROM 	kit_allocation  \n" +
                "			WHERE 	refSalesOrderDetID = pRefSalesOrderDetID AND STATUS = 'A' AND assyID = IFNULL(pSubAssyID, pAssyID)  AND partId IN (pPartIds) AND refUIDId IN (pUMIDs);  \n" +
                "		ELSE  \n" +
                "			SET v_CountSameUMIDFind = 0;  \n" +
                "		END IF;  \n" +
                "		IF (v_CountSameUMIDFind = 0) THEN  \n" +
                "			block1: BEGIN  \n" +
                "				DECLARE exit_loop BOOLEAN DEFAULT FALSE;  \n" +
                "				DECLARE v_RefSalesOrderDetID INT;  \n" +
                "				DECLARE v_AssyID INT;  \n" +
                "				DECLARE v_Umid VARCHAR(50);  \n" +
                "				DECLARE v_RefBOMLineID INT;  \n" +
                "				DECLARE v_Status VARCHAR(50);  \n" +
                "				DECLARE v_RefUIDId INT;  \n" +
                "				DECLARE v_PartId INT;  \n" +
                "				DECLARE v_AllocatedQty DECIMAL(18,8);  \n" +
                "				DECLARE v_AllocatedUnit DECIMAL(18,8);  \n" +
                "				DECLARE v_AllocatedUOM INT;  \n" +
                "				DECLARE v_UMIDUnits DECIMAL(18,8);  \n" +
                "				DECLARE v_countKitExist INT;  \n" +
                "				DECLARE v_CountSameUMID INT;  \n" +
                "				DECLARE	v_SameUMID VARCHAR(50);  \n" +
                "				DECLARE v_oldUMIDAllocatedUnit DECIMAL(18,8);  \n" +
                "				DECLARE v_oldUMID VARCHAR(50);  \n" +
                "				DECLARE v_CountSameAllocatedUnit INT;  \n" +
                "				DECLARE v_KitAllocationId INT;  \n" +
                "				DECLARE v_StringSameUMID VARCHAR(10000);  \n" +
                "				DECLARE v_CountUMIDForSame INT;  \n" +
                "				DECLARE v_StringUMIDForKit VARCHAR(10000);  \n" +
                "				DECLARE v_CountSameSalesOrder INT;  \n" +
                "				DECLARE v_PIDCode VARCHAR(100);  \n" +
                "				DECLARE v_RestricType VARCHAR(500);  \n" +
                "				DECLARE v_TransactionType VARCHAR(1000);  \n" +
                "				DECLARE v_RefTableName VARCHAR(255);  \n" +
                "				DECLARE v_ApproveFromPage VARCHAR(255);  \n" +
                "				DECLARE v_ApprovedBy VARCHAR(255);  \n" +
                "				DECLARE v_ConfirmationType INT;  \n" +
                "				DECLARE v_ApprovalReason TEXT;  \n" +
                "				DECLARE v_RefID INT;  \n" +
                "				DECLARE v_RoHSApprovalReason VARCHAR(1000);  \n" +
                "				DECLARE v_AllocationRemark VARCHAR(1000);  \n" +
                "				DECLARE KitAllocationDetail_Cursor CURSOR FOR  \n" +
                "				SELECT 	refSalesOrderDetID, assyID, uid, refBOMLineID, STATUS, refUIDId, partId, allocatedQty, allocatedUnit, allocatedUOM, umidUnits, kitAllocationId,  \n" +
                "						PIDCode, restricType, transactionType, refTableName, approveFromPage, approvedBy, approvalReason, confirmationType, roHSApprovalReason, allocationRemark  \n" +
                "				FROM 	tempKitAllocationDetail;  \n" +
                "				DECLARE CONTINUE HANDLER FOR NOT FOUND SET exit_loop = TRUE;  \n" +
                "				OPEN KitAllocationDetail_Cursor;  \n" +
                "				KitAllocationDetail_Loop:LOOP  \n" +
                "					FETCH 	KitAllocationDetail_Cursor INTO v_RefSalesOrderDetID, v_AssyID, v_Umid, v_RefBOMLineID, v_Status, v_RefUIDId, v_PartId, v_AllocatedQty, v_AllocatedUnit, v_AllocatedUOM, v_UMIDUnits, v_KitAllocationId,  \n" +
                "										v_PIDCode, v_RestricType, v_TransactionType, v_RefTableName, v_ApproveFromPage, v_ApprovedBy, v_ApprovalReason, v_ConfirmationType, v_RoHSApprovalReason, v_AllocationRemark;  \n" +
                "				IF exit_loop THEN  \n" +
                "					LEAVE KitAllocationDetail_Loop;  \n" +
                "				END IF;  \n" +
                "  \n" +
                "				SET v_SameAllocated = FALSE;  \n" +
                "                SELECT round(fun_convertUOM(cst.uom, pToUOM, cst.pkgUnit),pUnitFilterDecimal) INTO v_CurrentUMIDUnit FROM component_sid_stock cst WHERE cst.id = v_RefUIDId;  \n" +
                "                SELECT round(SUM(fun_convertUOM(ka.allocatedUOM,pToUOM,IFNULL(ka.allocatedUnit, 0))),pUnitFilterDecimal) INTO v_CurrentAllocatedUnit FROM kit_allocation ka WHERE ka.status = 'A' AND ka.refUIDId = v_RefUIDId;  \n" +
                "                SET v_CurrentAllocatedUnit = IFNULL(v_CurrentAllocatedUnit,0) + IFNULL(v_AllocatedUnit,0);  \n" +
                "			  IF(IFNULL(v_CurrentUMIDUnit,0) >= IFNULL(v_CurrentAllocatedUnit,0)) THEN  \n" +
                "					IF (CAST(IFNULL(v_KitAllocationId, '0') AS SIGNED) != 0) THEN  \n" +
                "						UPDATE 	kit_allocation  \n" +
                "								SET 	allocatedQty = IFNULL(allocatedQty,0) + IFNULL(v_AllocatedQty,0),  \n" +
                "									allocatedUnit = IFNULL(allocatedUnit,0) + IFNULL(v_AllocatedUnit,0)  \n" +
                "								WHERE	id = v_KitAllocationId;  \n" +
                "					ELSE  \n" +
                "						INSERT INTO kit_allocation (refSalesOrderDetID, assyID, uid, refBOMLineID, allocatedQty, transactionDate, STATUS, createdBy, refUIDId, partId, allocatedUnit, allocatedUOM, roHSApprovalReason, roHSApprovedBy, roHSApprovedOn, allocationRemark)  \n" +
                "								VALUES(v_RefSalesOrderDetID, v_AssyID, v_Umid, v_RefBOMLineID, v_AllocatedQty, fun_DatetimetoUTCDateTime(),v_Status, pUserId, v_RefUIDId, v_PartId, v_AllocatedUnit, v_AllocatedUOM,  \n" +
                "								(CASE WHEN (v_RoHSApprovalReason IS NULL OR v_RoHSApprovalReason = '') THEN NULL ELSE v_RoHSApprovalReason END),  \n" +
                "								(CASE WHEN (v_RoHSApprovalReason IS NULL OR v_RoHSApprovalReason = '') THEN NULL ELSE pUserId END),  \n" +
                "								(CASE WHEN (v_RoHSApprovalReason IS NULL OR v_RoHSApprovalReason = '') THEN NULL ELSE fun_DatetimetoUTCDateTime() END),  \n" +
                "								(CASE WHEN (v_AllocationRemark IS NULL OR v_AllocationRemark = '') THEN NULL ELSE v_AllocationRemark END));  \n" +
                "								SET v_RefID = LAST_INSERT_ID();  \n" +
                "						IF(IFNULL(v_RefID, \"\") != \"\") THEN  \n" +
                "							SET v_KitIds = (  \n" +
                "									SELECT 	CASE  \n" +
                "											WHEN ((SELECT IFNULL(v_KitIds, \"\")) = \"\") THEN  \n" +
                "												v_RefID  \n" +
                "											ELSE  \n" +
                "												(SELECT CONCAT(v_KitIds, \",\", v_RefID))  \n" +
                "										END  \n" +
                "									);  \n" +
                "						END IF;  \n" +
                "						IF (v_RestricType IS NOT NULL) THEN  \n" +
                "							INSERT INTO generic_authenticationmst (transactionType, approveFromPage, refID, approvedBy, approvalReason,confirmationType, refTableName, createdBy, updatedBy)  \n" +
                "							VALUES(v_TransactionType, v_ApproveFromPage, v_RefID, v_ApprovedBy, v_ApprovalReason,v_ConfirmationType,v_RefTableName, pUserId, pUserId);  \n" +
                "						END IF;  \n" +
                "				END IF;  \n" +
                "			ELSE  \n" +
                "				SET v_SameAllocated = TRUE;  \n" +
                "				LEAVE KitAllocationDetail_Loop;  \n" +
                "			END IF;  \n" +
                "  \n" +
                "			END LOOP KitAllocationDetail_Loop;  \n" +
                "			CLOSE KitAllocationDetail_Cursor;  \n" +
                "			END block1;  \n" +
                "  \n" +
                "			INSERT INTO temp_Validation_Error (IsSuccess, UMID, TransName, ErrorCode, KitIds, Reason, StartDate)  \n" +
                "				VALUES(IF(v_SameAllocated, 0, 1), NULL, NULL, IF(v_SameAllocated, 'SOME_UMID_ALLOCATED', 'SUCCESS'), NULL, NULL, NULL);  \n" +
                "		ELSE  \n" +
                "			SELECT 	GROUP_CONCAT('(', `Po Number`, ', ', `Sales Order`, ', ', `Assy ID`, ', ', `PO Qty`, ')') INTO v_KitName  \n" +
                "			FROM 	vu_salesorder_shipped_report  \n" +
                "			WHERE 	SalesOrderDetailId IN (  \n" +
                "					SELECT 	refSalesOrderDetID  \n" +
                "					FROM 	kit_allocation  \n" +
                "					WHERE 	FIND_IN_SET(uid, v_UMIDForKitName)  \n" +
                "				);  \n" +
                "			INSERT INTO temp_Validation_Error (IsSuccess, UMID, TransName, ErrorCode, KitIds, Reason, StartDate)  \n" +
                "				VALUES(0, v_ConcateUMID, v_KitName, 'SAME_UMID_ALLOCATED', v_KitIds, NULL, NULL);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "	SELECT IsSuccess, UMID, TransName, ErrorCode, KitIds, Reason, StartDate FROM temp_Validation_Error;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 02-02-2022 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1285,'1.00','V1','Bug 40866: [Main Branch] Shows Error and restrict user to Allocate new stock to Kit if UOM of Line Item is different from part details'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1285:
            allDbChangesArray.push(
                /* **************************** New Script -> 03-02-2022 *********************************** */
                "DROP procedure IF EXISTS `Sproc_GetKitAllocationForElastic`;  \n" +
                "CREATE PROCEDURE `Sproc_GetKitAllocationForElastic`(  \n" +
                "    In pFromdate date,  \n" +
                "    In pTodate date,  \n" +
                "    IN pRequiredCount tinyint(1)  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "    DECLARE pWhereClause VARCHAR(1000);  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "    SET pWhereClause = '1 = 1';  \n" +
                "    IF(pRequiredCount)  \n" +
                "	THEN  \n" +
                "		SET @temp_Sproc_GetKitAllocationForElastic = CONCAT(\"  \n" +
                "		SELECT  \n" +
                "			 count(1) totalCount\");  \n" +
                "		SET pWhereClause = CONCAT('sd.isDeleted = 0');  \n" +
                "	ELSE  \n" +
                "		SET @temp_Sproc_GetKitAllocationForElastic = CONCAT(\"  \n" +
                "		SELECT  \n" +
                "			  k.id  \n" +
                "				,k.refSalesOrderDetID  \n" +
                "                ,sd.refSalesOrderID  \n" +
                "				,s.poNumber  \n" +
                "				,s.salesOrderNumber  \n" +
                "				,k.assyId  \n" +
                "                ,assy.mfgcodeID  \n" +
                "                ,assy_mcm.mfgType assyMfgType  \n" +
                "				,assy.PIDCode AssyPIdCode  \n" +
                "				,assy.mfgPN assyMfgPN  \n" +
                "				,k.partId  \n" +
                "                ,c_mcm.mfgType partMfgType  \n" +
                "				,c.PIDCode partCode  \n" +
                "				,assy.mfgPN partMfgPn  \n" +
                "				,c.assyCode part  \n" +
                "				,k.UID  \n" +
                "				,k.refUIDId  \n" +
                "                ,k.allocatedQty  \n" +
                "                ,k.consumeQty  \n" +
                "                ,k.scrapExpiredQty  \n" +
                "                ,CASE WHEN k.STATUS = 'A' THEN 'Allocated'  \n" +
                "					WHEN k.STATUS = 'R' THEN 'Return'  \n" +
                "					WHEN k.STATUS = 'D' THEN 'Deallocated'  \n" +
                "					ELSE 'Consumed' END KitStatus  \n" +
                "                ,k.returnQty  \n" +
                "                ,sd.isDeleted,  \n" +
                "                sd.kitNumber\");  \n" +
                "			IF((SELECT COUNT(1) from tempKitAllocation) > 0) THEN  \n" +
                "				SET pWhereClause = CONCAT(\"k.id IN (select pId from tempKitAllocation)\");  \n" +
                "			END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	SET @temp_Sproc_GetKitAllocationForElastic = CONCAT(@temp_Sproc_GetKitAllocationForElastic, \"  \n" +
                "			from kit_allocation k  \n" +
                "			inner join salesorderdet sd on k.refSalesOrderDetID = sd.id and sd.partCategory=3  \n" +
                "			left JOIN salesordermst s ON sd.refSalesOrderID = s.id  \n" +
                "			left join component assy on k.assyId = assy.Id  \n" +
                "			left join component c on k.partId = c.Id  \n" +
                "            left join mfgcodemst assy_mcm on assy.mfgcodeId = assy_mcm.id  \n" +
                "            left join mfgcodemst c_mcm on c.mfgcodeId = c_mcm.id  \n" +
                "            where  \n" +
                "	\");  \n" +
                "  \n" +
                "    IF (pFromdate IS NOT NULL OR pTodate IS NOT NULL) THEN  \n" +
                "		SET pWhereClause =CONCAT(pWhereClause,\"  AND (((DATE(fun_CovnertDateTimeByTimezoneValue(k.createdAt,'\",v_TimeZone,\"'))  \n" +
                "        between '\",pFromdate,\"' and '\",pTodate,\"')  \n" +
                "            or (DATE(fun_CovnertDateTimeByTimezoneValue(k.updatedAt,'\",v_TimeZone,\"')) between '\",pFromdate,\"' and '\",pTodate,\"'))  \n" +
                "        OR ((DATE(fun_CovnertDateTimeByTimezoneValue(sd.createdAt,'\",v_TimeZone,\"'))  \n" +
                "        between '\",pFromdate,\"' and '\",pTodate,\"')  \n" +
                "            or (DATE(fun_CovnertDateTimeByTimezoneValue(sd.updatedAt,'\",v_TimeZone,\"')) between '\",pFromdate,\"' and '\",pTodate,\"')));\");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	SET @SQLStatement1 = CONCAT(@temp_Sproc_GetKitAllocationForElastic, pWhereClause);  \n" +
                "	PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "    DROP TEMPORARY TABLE IF EXISTS tempKitAllocation;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 03-02-2022 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1286,'1.00','V1','Bug 39950: [Main Branch] Gives Error log while Allocating too many UMIDs together from Elastic Search for Kit allocation - CP'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1286:
            allDbChangesArray.push(
                /* **************************** New Script -> 03-02-2022  *********************************** */
                "DROP procedure IF EXISTS `Sproc_RetriveReleaseLineFromPO`;  \n" +
                "CREATE PROCEDURE `Sproc_RetriveReleaseLineFromPO`(  \n" +
                "	IN pRefPOId INT,  \n" +
                "	IN pPartID INT,  \n" +
                "	IN pMFGPN VARCHAR(50)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "DECLARE vMfgCodeFormat INT;  \n" +
                "SELECT fun_getMFGCodeNameFormat() INTO vMfgCodeFormat;  \n" +
                "SELECT 	polrd.id,						polrd.qty poReleaseLineQty,			polrd.releaseNumber,  \n" +
                "		polrd.shippingDate,				polrd.promisedShipDate,  \n" +
                "		polrd.poLineWorkingStatus,		pod.id refPurchaseOrderDetID,		pod.lineID,  \n" +
                "		pod.qty poLineQty,  \n" +
                "        (case when polrd.id is null then c.packagingID else pod.packagingID end) packagingID,  \n" +
                "        pod.internalRef,                cpm.name packagingName,  \n" +
                "        mfgcod.mfgCode mfgCode,         c.mfgcodeID,                        c.mfgPN,    c.PIDCode,  \n" +
                "        c.RoHSStatusID,                 fun_GetFormattedMfgCode(mfgcod.mfgCode, mfgcod.mfgName, vMfgCodeFormat) mfgName,  \n" +
                "        fun_getRoHSIconByID(c.RoHSStatusID) rohsIcon,      					fun_getRoHSNameByID(c.RoHSStatusID) rohsName,  \n" +
                "		c.id partId,				polrd.receivedQty,    					pod.partDescription,  \n" +
                "         pod.lineComment,               pod.internalLineComment,            cs.mfgcodeID supplierId,  \n" +
                "        supCode.mfgCode supplierCode,   fun_GetFormattedMfgCode(supCode.mfgCode, supCode.mfgName, vMfgCodeFormat) supplierName,  \n" +
                "        cs.mfgpn supplierPN,            cs.id supplierPNId,                 c.packageQty spq,  \n" +
                "        c.unit,							c.uom,								c.uomText,  \n" +
                "		c.partType,  \n" +
                "        (case when polrd.id is null then c.RoHSStatusID else pod.rohsStatusID end) poLineRoHSID,  \n" +
                "        fun_getRoHSNameByID(case when polrd.id is null then c.RoHSStatusID else pod.rohsStatusID end) poLineRoHSName,  \n" +
                "        c.isCustom,		 c.custAssyPN,				cs.isCustom AS isCustomSupplier,	c.umidSPQ, pom.poWorkingStatus,  \n" +
                "        SUM(polrd.receivedQty) OVER(PARTITION BY pod.lineID) totalReceivedQty, pod.isLineCustConsigned, pod.lineCustomerID,  \n" +
                "        pod.isNonUMIDStock,  \n" +
                "        CASE WHEN pod.isNonUMIDStock=0 THEN 'No' ELSE 'Yes' END isNonUMIDStockValue,  \n" +
                "        CASE WHEN pod.isLineCustConsigned=0 THEN 'No' ELSE 'Yes' END isLineCustConsignedValue,  \n" +
                "        fun_GetFormattedMfgCode(pm.mfgCode, pm.mfgName, vMfgCodeFormat) customerName, fun_getRoHSIconByID(cs.RoHSStatusID) supplierRohsIcon,  \n" +
                "							fun_getRoHSNameByID(cs.RoHSStatusID) supplierRohsName  \n" +
                "    FROM purchase_order_det AS pod  \n" +
                "    INNER JOIN purchase_order_mst AS pom ON pod.refPurchaseOrderID = pom.id AND pom.isDeleted=0  \n" +
                "	INNER JOIN component AS c ON  c.id = pod.mfgPartID AND c.id = IFNULL(pPartID, c.id) AND c.mfgpn = IFNULL(pMFGPN, c.mfgPN) AND c.isDeleted = 0  \n" +
                "	INNER JOIN mfgcodemst mfgcod ON mfgcod.id = c.mfgcodeID AND mfgcod.isDeleted = 0  \n" +
                "	LEFT JOIN purchase_order_line_release_det AS polrd ON  pod.id = polrd.refPurchaseOrderDetID AND polrd.isDeleted = 0  \n" +
                "	LEFT JOIN component_packagingmst AS cpm ON pod.packagingID = cpm.id AND cpm.isDeleted = 0  \n" +
                "	LEFT JOIN component cs ON cs.id = pod.supplierPartID AND cs.isDeleted = 0  \n" +
                "    LEFT JOIN mfgcodemst supCode ON supCode.id = cs.mfgcodeID OR supCode.id = cs.mfgcodeID AND supCode.isDeleted = 0  \n" +
                "    LEFT JOIN mfgcodemst pm ON pm.id=pod.lineCustomerID  \n" +
                "	WHERE pod.refPurchaseOrderID = pRefPOid  \n" +
                "    AND pod.isDeleted = 0;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 03-02-2022  *********************************** */
                "DROP procedure IF EXISTS `Sproc_GetComponentMFGAliasSearchPurchaseOrder`;  \n" +
                "CREATE PROCEDURE `Sproc_GetComponentMFGAliasSearchPurchaseOrder`(  \n" +
                "	IN pGoodPart VARCHAR(100),  \n" +
                "	IN pSearch VARCHAR(500),  \n" +
                "	IN pId INT,  \n" +
                "	IN pMfgType VARCHAR(50),  \n" +
                "	IN pRoHSStatusID VARCHAR(100),  \n" +
                "	IN pMfgCodeId INT,  \n" +
                "	IN pMountingType VARCHAR(50),  \n" +
                "	IN pMountingTypeId INT,  \n" +
                "	IN pCategoryID INT,  \n" +
                "	IN pIsContainCPN TINYINT,  \n" +
                "	IN pRohsMainCategoryID INT,  \n" +
                "	IN pIsRohsMainCategoryInvertMatch TINYINT,  \n" +
                "	IN prefSupplierMfgpnComponentID INT ,  \n" +
                "	IN ppackagingID INT,  \n" +
                "	IN pstrictCustomPart TINYINT,  \n" +
                "	IN psupplierID INT,  \n" +
                "    IN pPartType int,  \n" +
                "    IN pExcludeStatus INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE vRohsMainCategoryID INT;  \n" +
                "	DECLARE v_mfgNameFormat VARCHAR(100);  \n" +
                "    DECLARE v_supplierMFRMappingType varchar(10);  \n" +
                "  \n" +
                "    SELECT fun_getMFGCodeNameFormat() INTO v_mfgNameFormat;  \n" +
                "  \n" +
                "	SET @SQLStatement1=CONCAT(\" SELECT *  \n" +
                "		FROM  \n" +
                "		(  \n" +
                "			SELECT 	c.id,                                   CONCAT('(',m.mfgCode, ') ',c.mfgPN) mfgPN,      c.mfgPN orgMfgPN,  \n" +
                "					c.PIDCode,                              c.RoHSStatusID,                                 c.mfgcodeID,  \n" +
                "					m.mfgCode,                              m.mfgName,                                      fun_GetFormattedMfgCode(m.mfgCode, m.mfgName, '\",v_mfgNameFormat,\"') mfgCodeName,  \n" +
                "					c.imageURL,                             c.documentPath,                                 c.mfgPNDescription,  \n" +
                "					c.functionalCategoryID,                 c.uom,                                          c.unit,  \n" +
                "					c.restrictUsePermanently,               c.restrictUSEwithpermission,                    c.restrictPackagingUsePermanently,  \n" +
                "					c.restrictPackagingUseWithpermission,   u.unitName AS  unitName,                        r.rohsIcon,  \n" +
                "					r.name AS rohsName,                     c.isCPN,                                        c.isCustom,  \n" +
                "					c.minimum,                              c.mult,                                         c.packageQty,  \n" +
                "					c.partType,                             c.pcbPerArray,                                  c.refSupplierMfgpnComponentID,  \n" +
                "					c.packagingID,                          c.internalReference  \n" +
                "			FROM 	component c  \n" +
                "			INNER JOIN mfgCodemst m ON c.mfgcodeID = m.id  \n" +
                "			JOIN 	rfq_rohsmst r ON r.id = c.RoHSStatusID  \n" +
                "			JOIN  	uoms u ON u.id= c.uom AND u.isdeleted = 0  \n" +
                "			WHERE 	c.isdeleted = 0  \");  \n" +
                "	IF  pId IS NOT NULL THEN  \n" +
                "		SET @SQLStatement1=CONCAT(@SQLStatement1,\" 	AND c.id = \" ,pId );  \n" +
                "    END IF;  \n" +
                "	IF  pMfgType IS NOT NULL THEN  \n" +
                "		SET @SQLStatement1=CONCAT(@SQLStatement1,\" 	AND m.mfgType = '\",pMfgType,\"' \");  \n" +
                "    END IF;  \n" +
                "    IF  pRoHSStatusID IS NOT NULL THEN  \n" +
                "		SET @SQLStatement1=CONCAT(@SQLStatement1,\" AND c.RoHSStatusID = \", pRoHSStatusID );  \n" +
                "	END IF;  \n" +
                "	IF  pMfgCodeId IS NOT NULL THEN  \n" +
                "		SET @SQLStatement1=CONCAT(@SQLStatement1,\" AND c.mfgcodeID = \",pMfgCodeId );  \n" +
                "	END IF;  \n" +
                "	IF  pMountingType IS NOT NULL THEN  \n" +
                "		SET @SQLStatement1=CONCAT(@SQLStatement1,\" AND mt.name = '\",pMountingType,\"' \");  \n" +
                "	END IF;  \n" +
                "	IF  pMountingTypeId IS NOT NULL THEN  \n" +
                "		SET @SQLStatement1=CONCAT(@SQLStatement1,\" AND c.mountingTypeID = \",pMountingTypeId );  \n" +
                "	END IF;  \n" +
                "	IF  pCategoryID IS NOT NULL THEN  \n" +
                "		SET @SQLStatement1=CONCAT(@SQLStatement1,\" AND 	c.category = \", pCategoryID  );  \n" +
                "	END IF;  \n" +
                "	IF  IFNULL(pIsContainCPN,FALSE) = FALSE  THEN  \n" +
                "		SET @SQLStatement1=CONCAT(@SQLStatement1,\" AND c.isCPN = FALSE \");  \n" +
                "	END IF;  \n" +
                "	IF  pRohsMainCategoryID IS NOT NULL THEN  \n" +
                "		SET vRohsMainCategoryID = pRohsMainCategoryID;  \n" +
                "		/*===>this logic is added to compare invert rohs category*/  \n" +
                "		IF pIsRohsMainCategoryInvertMatch = FALSE  THEN  \n" +
                "			IF pRohsMainCategoryID = -1 THEN  \n" +
                "				SET vRohsMainCategoryID = -2;  \n" +
                "			ELSEIF pRohsMainCategoryID = -2 THEN  \n" +
                "				SET vRohsMainCategoryID = -1;  \n" +
                "			END IF;  \n" +
                "		END IF;  \n" +
                "        /*<===this logic is added to compare invert rohs category*/  \n" +
                "   		IF vRohsMainCategoryID IS NOT NULL THEN  \n" +
                "			SET @SQLStatement1=CONCAT(@SQLStatement1,\" AND  r.refMainCategoryID  = \",vRohsMainCategoryID );  \n" +
                "        END IF;  \n" +
                "	END IF;  \n" +
                "	IF  prefSupplierMfgpnComponentID IS NOT NULL THEN  \n" +
                "		SET @SQLStatement1=CONCAT(@SQLStatement1,\" AND c.refSupplierMfgpnComponentID <=> IFNULL(\",prefSupplierMfgpnComponentID,\", c.refSupplierMfgpnComponentID)  \");  \n" +
                "	END IF;  \n" +
                "	IF  pPartType IS NOT NULL THEN  \n" +
                "		SET @SQLStatement1=CONCAT(@SQLStatement1,\" AND c.partType = '\",pPartType,\"' \");  \n" +
                "	END IF;  \n" +
                "	IF  ppackagingID IS NOT NULL THEN  \n" +
                "		SET @SQLStatement1=CONCAT(@SQLStatement1,\" AND 	c.packagingID <=> IFNULL(\",ppackagingID,\",c.packagingID) \");  \n" +
                "	END IF;  \n" +
                "	IF  pstrictCustomPart IS NOT NULL THEN  \n" +
                "		SET @SQLStatement1=CONCAT(@SQLStatement1,\" AND c.category != 3  AND c.iscustom = 1 \");  \n" +
                "	END IF;  \n" +
                "	IF  psupplierID IS NOT NULL AND pstrictCustomPart  = 1 THEN  \n" +
                "		SET @SQLStatement1=CONCAT(@SQLStatement1,\"  AND 	( EXISTS (SELECT 1 FROM (/*get mfg which set as company*/  \n" +
                "																		SELECT mc.id  \n" +
                "																				FROM mfgcodemst mc  \n" +
                "																				WHERE mc.iscompany = 1 AND mc.isdeleted = 0  \n" +
                "																		UNION ALL /* get All Customer code */  \n" +
                "																		SELECT '\",psupplierID,\"' AS id FROM DUAL \");  \n" +
                "		IF(SELECT COUNT(1) FROM supplier_mapping_mst smm WHERE smm.isdeleted=0 AND smm.isCustMapping=0 AND smm.supplierID=psupplierID)>0 THEN  \n" +
                "			SET @SQLStatement1=CONCAT(@SQLStatement1,\"  UNION ALL  SELECT smm.refMfgCodeMstID  AS id  \n" +
                "				FROM supplier_mapping_mst smm WHERE smm.isdeleted=0 AND smm.isCustMapping=0 AND smm.supplierID='\",psupplierID,\"' )a   WHERE a.id  = c.mfgcodeid))  \");  \n" +
                "		ELSE  \n" +
                "			SET @SQLStatement1=CONCAT(@SQLStatement1,\"  UNION ALL  SELECT mc.id FROM mfgcodemst mc WHERE mc.mfgType='MFG' AND mc.isCustOrDisty=1 AND mc.isdeleted=0  \n" +
                "			UNION ALL  \n" +
                "			SELECT c.mfgcodeid AS id FROM component c WHERE (c.parttype=4 OR c.iscpn=1) AND c.isdeleted=0 ) a   WHERE a.id  = c.mfgcodeid))   \");  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "	IF psupplierID IS NOT NULL AND pstrictCustomPart  IS NULL THEN  \n" +
                "		SELECT supplierMFRMappingType INTO v_supplierMFRMappingType FROM mfgcodemst WHERE id=psupplierID AND mfgType='dist' AND isDeleted=0;  \n" +
                "        IF(v_supplierMFRMappingType = 'B') THEN  \n" +
                "			SET @SQLStatement1=CONCAT(@SQLStatement1, \" AND c.isCPN=0 AND c.iscustom = 0 \");  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "	IF  pExcludeStatus IS NOT NULL THEN  \n" +
                "		SET @SQLStatement1=CONCAT(@SQLStatement1,\" AND c.partStatus != '\",pExcludeStatus,\"' \");  \n" +
                "	END IF;  \n" +
                "    IF pGoodPart IS NOT NULL THEN  \n" +
                "		SET @SQLStatement1=CONCAT(@SQLStatement1,\" AND c.isGoodPart = '\",pGoodPart,\"' \");  \n" +
                "    END IF;  \n" +
                "	/*Close Inner query section */  \n" +
                "	SET @SQLStatement1=CONCAT(@SQLStatement1,\" ) AS a  WHERE 1= 1 \");  \n" +
                "	IF  pSearch IS NOT NULL THEN  \n" +
                "		SET @SQLStatement1=CONCAT(@SQLStatement1,\" AND  EXISTS ( SELECT 1 FROM ( SELECT a.id, a.mfgpn name, a.pidcode FROM DUAL  \n" +
                "																					UNION ALL  \n" +
                "																					SELECT opn.refcomponentid ,opn.name, null pidcode FROM component_otherpn opn WHERE opn.refcomponentid = a.id  \n" +
                "														 						) x WHERE x.id  = a.id AND ( x.name  LIKE CONCAT('%\", pSearch , \"%') OR x.pidcode  LIKE CONCAT('%\", pSearch , \"%')) ) \");  \n" +
                "	END IF;  \n" +
                "	SET @SQLStatement1=CONCAT(@SQLStatement1,\" ORDER BY mfgPN For update\");  \n" +
                "	-- select @SQLStatement1;  \n" +
                "    PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 03-02-2022 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1287,'1.00','V1',' User Story 41038: Improve performance for part search drop down on Purchase order - Jay '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1287:
            allDbChangesArray.push(
                /* **************************** New Script -> 03-02-2022  *********************************** */
                "DROP procedure IF EXISTS `Sproc_CreateAssemblyRevision`;  \n" +
                "CREATE PROCEDURE `Sproc_CreateAssemblyRevision`(  \n" +
                "	IN pFromPartID INT,  \n" +
                "    IN pNewEpicorType varchar(50),  \n" +
                "    IN pNewAssemblyType INT,  \n" +
                "    IN pNewMfgcodeID INT,  \n" +
                "    IN pNewCustAssyPN varchar(500),  \n" +
                "    IN pNewPartRev varchar(50),  \n" +
                "    IN pNewMfgPN varchar(100),  \n" +
                "    IN pNewAssyCode varchar(50),  \n" +
                "    IN pNewNickName varchar(50),  \n" +
                "    IN pNewPIDCode varchar(109),  \n" +
                "    IN pIsCPN tinyint,  \n" +
                "    IN pIsCustom tinyInt,  \n" +
                "    IN pUserID Int,  \n" +
                "    IN pUserRoleId Int,  \n" +
                "    IN pIsAttribute tinyint,  \n" +
                "    IN pIsSettings tinyint,  \n" +
                "    IN pIsAdditionalAttibute tinyint,  \n" +
                "    IN pIsPackagingDetail tinyint,  \n" +
                "    IN pIsStandards tinyint,  \n" +
                "    IN pIsRequiredFunctionalType tinyint,  \n" +
                "    IN pIsRequiredMountingType tinyint,  \n" +
                "    IN pIsPackagingAliasPart tinyint,  \n" +
                "    IN pIsOtherPartName tinyint,  \n" +
                "    IN pIsAlternatePart tinyint,  \n" +
                "    IN pIsRoHSReplacementPart tinyint,  \n" +
                "    IN pIsDriveTool tinyint,  \n" +
                "    IN pIsProcessMaterial tinyint,  \n" +
                "    IN pIsRequiredMattingParts tinyint,  \n" +
                "    IN pIsPickupPad tinyint,  \n" +
                "    IN pIsFunctionalTesingTool tinyint,  \n" +
                "    IN pIsFinctionalRestingEquipment tinyint,  \n" +
                "    IN pIsBOM tinyint,  \n" +
                "    IN pIsComments tinyInt,  \n" +
                "    IN pIsCopyImages tinyInt,  \n" +
                "    IN pIsCopyDatasheet tinyInt,  \n" +
                "    IN pIsCopyDocument tinyInt,  \n" +
                "    IN pIsOperationalAttirbutes tinyInt,  \n" +
                "    IN pIsAcceptableShippinCountry tinyInt,  \n" +
                "    IN pIsTrackSNumber tinyInt,  \n" +
                "    IN pMfgPNDescription varchar(2000),  \n" +
                "    IN pDetailDescription varchar(2000),  \n" +
                "    IN pInternalReference varchar(50),  \n" +
                "    IN pRoHSStatusID int,  \n" +
                "    IN pIsFluxNotApplicable tinyInt,  \n" +
                "    IN pIsWaterSoluble tinyInt,  \n" +
                "    IN pIsNoClean tinyInt,  \n" +
                "    IN pSpecialNote varchar(2000),  \n" +
                "    IN pRohsDeviation int  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "DECLARE vValidationPassed tinyint;  \n" +
                "DECLARE vFromPartCategory tinyint;  \n" +
                "DECLARE vFromMfgType varchar(5);  \n" +
                "DECLARE vIsCPN tinyint;  \n" +
                "DECLARE vCount INT;  \n" +
                "DECLARE vToPartID INT;  \n" +
                "DECLARE vUserRoleId INT;  \n" +
                "DECLARE vMisMatchFields longtext;  \n" +
                "DECLARE vSerialNumber varchar(20);  \n" +
                "DECLARE vMessage varchar(200);  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempFromComponentDetail;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempToComponentDetail;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempComponentAlternateValidationDetail;  \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE tempFromComponentDetail  \n" +
                "    select * from component where 1 = 2;  \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE tempToComponentDetail  \n" +
                "    select * from component where 1 = 2;  \n" +
                "  \n" +
                "    CREATE TEMPORARY TABLE tempComponentAlternateValidationDetail  \n" +
                "    select * from component_alternatepn_validations where 1 = 2;  \n" +
                "  \n" +
                "	set vValidationPassed = 1; #1 passed, 0 failed  \n" +
                "  	set vCount = 0;  \n" +
                "    select co.category, m.mfgType, count(co.id), co.isCPN  \n" +
                "      into vFromPartCategory, vFromMfgType, vCount, vIsCPN  \n" +
                "	  from component co  \n" +
                "	  join mfgcodemst m on m.id = co.mfgcodeID  \n" +
                "	 where co.id = pFromPartID and co.isDeleted = 0  \n" +
                "     group by co.category, m.mfgType, co.id, co.isCPN  ;  \n" +
                "  \n" +
                "	if vCount = 0 then  \n" +
                "		set vValidationPassed = 0;  \n" +
                "		select 'PART_NOT_FOUND' as message;  \n" +
                "	end if;  \n" +
                "  \n" +
                "	if vFromMfgType = 'DIST' then /*in case of supplier part must follow mfr part attributes*/  \n" +
                "		set pIsAttribute = 1;  \n" +
                "        set pIsAdditionalAttibute = 1;  \n" +
                "    end if;  \n" +
                "  \n" +
                "	set vCount = 0;  \n" +
                "    if (vFromPartCategory = 3) then # check category  \n" +
                "	   select count(1) into vCount  \n" +
                "		 from component co  \n" +
                "		where co.mfgcodeID = pNewMfgcodeID  \n" +
                "          and co.category = 3  \n" +
                "		  and co.custAssyPN = pNewCustAssyPN  \n" +
                "		  and co.rev = pNewPartRev  \n" +
                "          and co.isDeleted = 0  \n" +
                "		  and co.deletedAt is null  \n" +
                "	  group by co.mfgcodeID,co.category,co.custAssyPN,co.rev;  \n" +
                "		if vCount > 0 then  \n" +
                "			set vValidationPassed = 0;  \n" +
                "            select 'DUPLICATE_REV' as message;  \n" +
                "        end if;  \n" +
                "  \n" +
                "         set vCount = 0;  \n" +
                "		 select count(1) into vCount  \n" +
                "			 from component co  \n" +
                "			where co.nickName != pNewNickName  \n" +
                "              and co.category = 3  \n" +
                "              and co.custAssyPN = pNewCustAssyPN  \n" +
                "              and co.mfgcodeID = pNewMfgcodeID  \n" +
                "			  and co.isDeleted = 0  \n" +
                "			  and co.deletedAt is null  \n" +
                "              group by co.category,co.custAssyPN,co.mfgcodeID;  \n" +
                "		  if vCount > 0 then  \n" +
                "			set vValidationPassed = 0;  \n" +
                "				select 'NICKNAME_MISMATCH_VALIDATION' as message,  \n" +
                "						concat('(',m.mfgCode,') ',m.mfgName) mfrName,  \n" +
                "                        co.id, co.mfgPN, co.custAssyPN, co.rev, co.nickName  \n" +
                "				 from component co  \n" +
                "                 join mfgcodemst m ON m.id = co.mfgcodeID  \n" +
                "				where co.nickName != pNewNickName  \n" +
                "				  and co.category = 3  \n" +
                "				  and co.custAssyPN = pNewCustAssyPN  \n" +
                "				  and co.mfgcodeID = pNewMfgcodeID  \n" +
                "				  and co.isDeleted = 0  \n" +
                "				  and co.deletedAt is null ;  \n" +
                "				 -- limit 1;  \n" +
                "		  end if;  \n" +
                "  \n" +
                "		set vCount = 0;  \n" +
                "		 select count(1) into vCount  \n" +
                "			 from component co  \n" +
                "			where co.nickName = pNewNickName  \n" +
                "              and co.category = 3  \n" +
                "              and co.custAssyPN != pNewCustAssyPN  \n" +
                "              and co.mfgcodeID = pNewMfgcodeID  \n" +
                "			  and co.isDeleted = 0  \n" +
                "			  and co.deletedAt is null  \n" +
                "			group by co.nickName,co.category,co.mfgcodeID;  \n" +
                "		 if vCount > 0 then  \n" +
                "			set vValidationPassed = 0;  \n" +
                "				select 'DUPLICATE_NICKNAME' as message,  \n" +
                "                        co.id, co.mfgPN, co.custAssyPN, co.rev, co.nickName  \n" +
                "				 from component co  \n" +
                "				where co.nickName = pNewNickName  \n" +
                "				  and co.category = 3  \n" +
                "				  and co.custAssyPN != pNewCustAssyPN  \n" +
                "				  and co.mfgcodeID = pNewMfgcodeID  \n" +
                "				  and co.isDeleted = 0  \n" +
                "				  and co.deletedAt is null  ;  \n" +
                "		  end if;  \n" +
                "	end if;  \n" +
                "  \n" +
                "    set vCount = 0;  \n" +
                "		select count(1) into vCount  \n" +
                "		 from component co  \n" +
                "		where co.mfgcodeID = pNewMfgcodeID  \n" +
                "		  and co.mfgPN = pNewMfgPN  \n" +
                "          and co.isDeleted = 0  \n" +
                "		  and co.deletedAt is null  \n" +
                "	  group by co.mfgcodeID,co.mfgPN;  \n" +
                "	 if vCount > 0 then  \n" +
                "		set vValidationPassed = 0;  \n" +
                "        select 'DUPLICATE_MFGPN' as message;  \n" +
                "     end if;  \n" +
                "  \n" +
                "    set vCount = 0;  \n" +
                "		select count(1) into vCount  \n" +
                "		 from component co  \n" +
                "		where co.PIDCode = pNewPIDCode  \n" +
                "		  and co.isDeleted = 0  \n" +
                "		  and co.deletedAt is null  \n" +
                "          group by co.PIDCode;  \n" +
                "    if vCount > 0 then  \n" +
                "		set vValidationPassed = 0;  \n" +
                "        select 'DUPLICATE_PID' as message;  \n" +
                "	end if;  \n" +
                "  \n" +
                "    if vValidationPassed = 1 then /*if above validations passed then only generate new serial number*/  \n" +
                "		call Sproc_GenerateIncrementalNumber(case when vFromMfgType = 'MFG' then  \n" +
                "													'MPNSystemID'  \n" +
                "												else 'SPNSystemID' end,  \n" +
                "											 true);  \n" +
                "		  select systemID, message into vSerialNumber, vMessage  \n" +
                "		  from temp_serialNumber;  \n" +
                "        if vMessage is not null and vMessage != '' then  \n" +
                "			set vValidationPassed = 0;  \n" +
                "			select vMessage as message;  \n" +
                "		end if;  \n" +
                "	end if;  \n" +
                "  \n" +
                "	if vValidationPassed = 1 then  #1 passed, 0 failed  \n" +
                "		-- START TRANSACTION;  \n" +
                "		insert into component(  \n" +
                "				isCustom, isCPN, rfqOnly, isGoodPart, partType, category, epicorType, mfgcodeID,  \n" +
                "				custAssyPN, rev, mfgPN, assyCode, nickName, PIDCode, costCategoryID,imageURL, dataSheetLink,  \n" +
                "				mfgPNDescription, specialNote, purchasingComment, uomClassID, uom, unit,  \n" +
                "                functionalCategoryID,  \n" +
                "                mountingTypeID,  \n" +
                "                operatingTemp,				minOperatingTemp,				maxOperatingTemp,  \n" +
                "				temperatureCoefficient,				temperatureCoefficientValue,				temperatureCoefficientUnit,				connecterTypeID,  \n" +
                "				noOfPosition,				noOfRows,  \n" +
                "				pitch,				pitchMating,				sizeDimension,				length,				width,				heightText,				height,  \n" +
                "				partStatus, leadTime, serialNumber, RoHSStatusID,  \n" +
                "				rohsDeviation, mslID, packagingWeight, packagingWeightUom, grossWeight, grossWeightUom,  \n" +
                "				countryOfOrigin, htsCode, createdBy, createByRoleId,  \n" +
                "				updatedBy,updateByRoleId, isDeleted,assemblyType,detailDescription,  \n" +
                "				refMfgPNMfgCodeId, refSupplierMfgpnComponentID, isFluxNotApplicable,isWaterSoluble,isNoClean,isCloudApiUpdateAttribute,restrictPackagingUsePermanently,  \n" +
                "				restrictPackagingUseWithpermission,umidVerificationRequire,isAutoVerificationOfAllAssemblyParts,isHazmatMaterial,trackSerialNumber,requiredTestTime,  \n" +
                "                mountingTypePartRequired,functionalTypePartRequired,driverToolRequired,matingPartRquired,pickupPadRequired,functionalTestingRequired,internalReference, mfgType, isEpoxyMount,  \n" +
                "                scrapValuePerBuild,				scrapRatePercentagePerBuild,				plannedValuePerBuild,				plannedOverRunPercentagePerBuild,				selfLifeDays,  \n" +
                "				shelfLifeAcceptanceDays,				shelfListDaysThresholdPercentage,				maxShelfLifeAcceptanceDays,				maxShelfListDaysThresholdPercentage,  \n" +
                "				shelfLifeDateType,				maxPriceLimit,				maxQtyonHand,				saftyStock,				eau,				businessRisk,				programingRequired,  \n" +
                "                restrictUSEwithpermission,                bomLock,                restrictUsePermanently,  \n" +
                "                tolerance,				voltage,				value,				powerRating,  \n" +
                "				weight,				feature,				color,  \n" +
                "                deviceMarking,				packagingID,  \n" +
                "				minimum,				mult,				packageQty,				umidSPQ,  \n" +
                "                pcbPerArray,                IsReceiveBulkItem)  \n" +
                "		select pIsCustom, pIsCPN, rfqOnly, isGoodPart, partType, category, pNewEpicorType, pNewMfgcodeID,  \n" +
                "				pNewCustAssyPN, pNewPartRev/*rev*/, pNewMfgPN/*mfgPN*/, pNewAssyCode, pNewNickName, pNewPIDCode, costCategoryID,imageURL, dataSheetLink,  \n" +
                "				pMfgPNDescription, pSpecialNote, purchasingComment, uomClassID, uom, unit,  \n" +
                "                functionalCategoryID,  \n" +
                "                mountingTypeID,  \n" +
                "                /* Copy in case Attribute  checked*/  \n" +
                "                (CASE WHEN (pIsAttribute = 1) THEN  operatingTemp ELSE null END),  \n" +
                "                (CASE WHEN (pIsAttribute = 1) THEN  minOperatingTemp ELSE null END),  \n" +
                "                (CASE WHEN (pIsAttribute = 1) THEN  maxOperatingTemp ELSE null END),  \n" +
                "                (CASE WHEN (pIsAttribute = 1) THEN  temperatureCoefficient ELSE null END),  \n" +
                "                (CASE WHEN (pIsAttribute = 1) THEN  temperatureCoefficientValue ELSE null END),  \n" +
                "                (CASE WHEN (pIsAttribute = 1) THEN  temperatureCoefficientUnit ELSE null END),  \n" +
                "                (CASE WHEN (pIsAttribute = 1) THEN  connecterTypeID ELSE null END),  \n" +
                "                (CASE WHEN (pIsAttribute = 1) THEN  noOfPosition ELSE null END),  \n" +
                "                (CASE WHEN (pIsAttribute = 1) THEN  noOfRows ELSE null END),  \n" +
                "                (CASE WHEN (pIsAttribute = 1) THEN  pitch ELSE null END),  \n" +
                "                (CASE WHEN (pIsAttribute = 1) THEN  pitchMating ELSE null END),  \n" +
                "                (CASE WHEN (pIsAttribute = 1) THEN  sizeDimension ELSE null END),  \n" +
                "                (CASE WHEN (pIsAttribute = 1) THEN  length ELSE null END),  \n" +
                "                (CASE WHEN (pIsAttribute = 1) THEN  width ELSE null END),  \n" +
                "                (CASE WHEN (pIsAttribute = 1) THEN  heightText ELSE null END),  \n" +
                "                (CASE WHEN (pIsAttribute = 1) THEN  height ELSE null END),  \n" +
                "  \n" +
                "				partStatus,  leadTime, vSerialNumber/*serialNumber*/, pRoHSStatusID,  \n" +
                "				pRohsDeviation, mslID, packagingWeight, packagingWeightUom, grossWeight, grossWeightUom,  \n" +
                "				countryOfOrigin, htsCode, pUserID/*createdBy*/, pUserRoleId/*createByRoleId*/,  \n" +
                "				pUserID/*updatedBy*/,pUserRoleId/*updateByRoleId*/, false /*isDeleted*/,pNewAssemblyType,pDetailDescription,  \n" +
                "				refMfgPNMfgCodeId, refSupplierMfgpnComponentID,  \n" +
                "                pIsFluxNotApplicable,  \n" +
                "                pIsWaterSoluble,  \n" +
                "                pIsNoClean,  \n" +
                "				(CASE WHEN (pIsCustom = 1) THEN 0 ELSE isCloudApiUpdateAttribute END),restrictPackagingUsePermanently,  \n" +
                "				restrictPackagingUseWithpermission,umidVerificationRequire ,isAutoVerificationOfAllAssemblyParts,isHazmatMaterial,  \n" +
                "                (CASE WHEN (pIsTrackSNumber = 1) THEN trackSerialNumber ELSE 0 END),  \n" +
                "                (CASE WHEN (pIsFunctionalTesingTool = 1  and pIsCPN = 0) THEN requiredTestTime ELSE null END),  \n" +
                "                (CASE WHEN (pIsRequiredMountingType = 1) THEN mountingTypePartRequired ELSE 0 END),  \n" +
                "                (CASE WHEN (pIsRequiredFunctionalType = 1) THEN functionalTypePartRequired ELSE 0 END),  \n" +
                "                (CASE WHEN (pIsDriveTool = 1 and pIsCPN = 0) THEN driverToolRequired ELSE 0 END),  \n" +
                "                (CASE WHEN (pIsRequiredMattingParts = 1  and pIsCPN = 0) THEN matingPartRquired ELSE 0 END),  \n" +
                "                (CASE WHEN (pIsPickupPad = 1  and pIsCPN = 0) THEN pickupPadRequired ELSE 0 END),  \n" +
                "                (CASE WHEN (pIsFunctionalTesingTool = 1  and pIsCPN = 0) THEN functionalTestingRequired ELSE 0 END),  \n" +
                "                pInternalReference,  \n" +
                "                mfgType,isEpoxyMount,  \n" +
                "  \n" +
                "                /* Copy in case Settings checked*/  \n" +
                "                (CASE WHEN (pIsSettings = 1) THEN  scrapValuePerBuild ELSE null END),  \n" +
                "                (CASE WHEN (pIsSettings = 1) THEN  scrapRatePercentagePerBuild ELSE null END),  \n" +
                "                (CASE WHEN (pIsSettings = 1) THEN  plannedValuePerBuild ELSE null END),  \n" +
                "                (CASE WHEN (pIsSettings = 1) THEN  plannedOverRunPercentagePerBuild ELSE null END),  \n" +
                "                (CASE WHEN (pIsSettings = 1) THEN  selfLifeDays ELSE null END),  \n" +
                "                (CASE WHEN (pIsSettings = 1) THEN  shelfLifeAcceptanceDays ELSE null END),  \n" +
                "                (CASE WHEN (pIsSettings = 1) THEN  shelfListDaysThresholdPercentage ELSE null END),  \n" +
                "                (CASE WHEN (pIsSettings = 1) THEN  maxShelfLifeAcceptanceDays ELSE null END),  \n" +
                "                (CASE WHEN (pIsSettings = 1) THEN  maxShelfListDaysThresholdPercentage ELSE null END),  \n" +
                "                (CASE WHEN (pIsSettings = 1) THEN  shelfLifeDateType ELSE null END),  \n" +
                "                (CASE WHEN (pIsSettings = 1) THEN  maxPriceLimit ELSE null END),  \n" +
                "                (CASE WHEN (pIsSettings = 1) THEN  maxQtyonHand ELSE null END),  \n" +
                "                (CASE WHEN (pIsSettings = 1) THEN  saftyStock ELSE null END),  \n" +
                "                (CASE WHEN (pIsSettings = 1) THEN  eau ELSE null END),  \n" +
                "                (CASE WHEN (pIsSettings = 1) THEN  businessRisk ELSE null END),  \n" +
                "                (CASE WHEN (pIsSettings = 1) THEN  programingRequired ELSE 0 END),  \n" +
                "                (CASE WHEN (pIsSettings = 1 and pIsCPN = 0) THEN  restrictUSEwithpermission ELSE 0 END),  \n" +
                "                (CASE WHEN (pIsSettings = 1) THEN  bomLock ELSE 0 END),  \n" +
                "                (CASE WHEN (pIsSettings = 1 and pIsCPN = 0) THEN  restrictUsePermanently ELSE 0 END),  \n" +
                "  \n" +
                "                /* Copy in case Additional Attribute checked*/  \n" +
                "                (CASE WHEN (pIsAdditionalAttibute = 1) THEN  tolerance ELSE null END),  \n" +
                "                (CASE WHEN (pIsAdditionalAttibute = 1) THEN  voltage ELSE null END),  \n" +
                "                (CASE WHEN (pIsAdditionalAttibute = 1) THEN  `value` ELSE null END),  \n" +
                "                (CASE WHEN (pIsAdditionalAttibute = 1) THEN  powerRating ELSE null END),  \n" +
                "                (CASE WHEN (pIsAdditionalAttibute = 1) THEN  weight ELSE null END),  \n" +
                "                (CASE WHEN (pIsAdditionalAttibute = 1) THEN  feature ELSE null END),  \n" +
                "                (CASE WHEN (pIsAdditionalAttibute = 1) THEN  color ELSE null END),  \n" +
                "  \n" +
                "                /* Copy in case Packaging Detail checked*/  \n" +
                "                (CASE WHEN (pIsPackagingDetail = 1) THEN  deviceMarking ELSE null END),  \n" +
                "                (CASE WHEN (pIsPackagingDetail = 1) THEN  packagingID ELSE null END),  \n" +
                "                (CASE WHEN (pIsPackagingDetail = 1) THEN  minimum ELSE null END),  \n" +
                "                (CASE WHEN (pIsPackagingDetail = 1) THEN  mult ELSE null END),  \n" +
                "                (CASE WHEN (pIsPackagingDetail = 1) THEN  packageQty ELSE null END),  \n" +
                "                (CASE WHEN (pIsPackagingDetail = 1) THEN  umidSPQ ELSE null END),  \n" +
                "                (CASE WHEN (pIsPackagingDetail = 1) THEN  pcbPerArray ELSE null END),  \n" +
                "                (CASE WHEN (pIsPackagingDetail = 1) THEN  IsReceiveBulkItem ELSE null END)  \n" +
                "		 from component  \n" +
                "		where id = pFromPartID;  \n" +
                "		set vToPartID = LAST_INSERT_ID();  \n" +
                "  \n" +
                "		IF(vValidationPassed = 1)  \n" +
                "		THEN  \n" +
                "			 set vMessage = '';  \n" +
                "			 CALL Sproc_CopyPartDetailOnCopyAndDuplicatePart(pFromPartID,vToPartID,pUserID,vIsCPN,pIsCPN,vFromPartCategory,pIsStandards,pIsRequiredFunctionalType,pIsRequiredMountingType,pIsPackagingAliasPart,pIsOtherPartName  \n" +
                "				,pIsAlternatePart,pIsRoHSReplacementPart,pIsDriveTool,pIsProcessMaterial,pIsRequiredMattingParts,pIsPickupPad,pIsFunctionalTesingTool,pIsFinctionalRestingEquipment, vMisMatchFields, vMessage);  \n" +
                "  \n" +
                "            IF(vMessage != '')  \n" +
                "			THEN  \n" +
                "				select vMessage as message,vMisMatchFields as misMatchFields;  \n" +
                "			ELSE  \n" +
                "				IF pIsSettings then  \n" +
                "					INSERT INTO `component_temperature_sensitive_data`  \n" +
                "					(`pickTemperatureAbove`,`timeLiquidusSecond`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`)  \n" +
                "					select `pickTemperatureAbove`,`timeLiquidusSecond`, current_timestamp() `createdAt`, pUserID  `createdBy`, current_timestamp() `updatedAt`, pUserID `updatedBy`, vToPartID `refComponentID`  \n" +
                "					from component_temperature_sensitive_data where refComponentID = pFromPartID and isDeleted = 0 and deletedAt is null;  \n" +
                "				end if;  \n" +
                "  \n" +
                "				IF pIsAcceptableShippinCountry then  \n" +
                "					INSERT INTO component_acceptable_shipping_countries  \n" +
                "						(refComponentID,countryID,createdAt,createdBy,createByRoleId)  \n" +
                "					SELECT  \n" +
                "						vToPartID,countryID,current_timestamp(),pUserID,pUserRoleId  \n" +
                "					FROM  \n" +
                "						component_acceptable_shipping_countries where refComponentID= pFromPartID and isDeleted = 0;  \n" +
                "				end if;  \n" +
                "  \n" +
                "				if (vFromPartCategory = 3) then  \n" +
                "					if pIsBOM then  \n" +
                "						CALL Sproc_CopyAssyBOMQuote_WitoutTransaction(pFromPartID, vToPartID, pUserID, true, null, null, null, null, null, null, null, null, pUserRoleId);  \n" +
                "					end if;  \n" +
                "					call Sproc_CreatePartAssyBomRelationship(vToPartID, pUserID);  \n" +
                "				end if;  \n" +
                "				if(pIsComments = 1) THEN  \n" +
                "						INSERT INTO componenet_inspection_requirement_det  \n" +
                "								(`partId`,`inspectionRequirementId`,`createdBy`,`createdAt`,`createByRoleId`,`category`)  \n" +
                "						select vToPartID,inspectionRequirementId,pUserID,current_timestamp(),  \n" +
                "						pUserRoleId,category from componenet_inspection_requirement_det where partId = pFromPartID;  \n" +
                "						INSERT INTO assembly_revision_comments  \n" +
                "							(`commentBy`,`comment`,`createdBy`,`createdAt`,`partID`,`createByRoleId`)  \n" +
                "						select `commentBy`,`comment`,pUserID,current_timestamp(),vToPartID,pUserRoleId from assembly_revision_comments where  \n" +
                "							partID = pFromPartID;  \n" +
                "				END IF;  \n" +
                "  \n" +
                "				CALL Sproc_getRefTransDetailForDocument('component',vToPartID,false);  \n" +
                "				IF pIsCopyImages  then  \n" +
                "					insert into component_images  \n" +
                "							(imageURL, refComponentID, createdBy,createdAt, createByRoleId)  \n" +
                "					select imageURL, vToPartID,pUserID, current_timestamp(), pUserRoleId  \n" +
                "					 from component_images  \n" +
                "					where refComponentID = pFromPartID and isDeleted = false;  \n" +
                "				end if;  \n" +
                "				IF pIsCopyDatasheet  then  \n" +
                "					insert into component_datasheets  \n" +
                "							(datasheetURL, refComponentID, createdBy,createdAt, createByRoleId)  \n" +
                "					select datasheetURL, vToPartID,pUserID ,current_timestamp(), pUserRoleId  \n" +
                "					from component_datasheets  \n" +
                "						where refComponentID = pFromPartID and isDeleted = false;  \n" +
                "				end if;  \n" +
                "				IF pIsOperationalAttirbutes  then  \n" +
                "					INSERT INTO component_dynamic_attribute_mapping_part  \n" +
                "						(mfgPNID,attributeID,attributeValue,createdAt,createdBy,createByRoleId)  \n" +
                "					SELECT  \n" +
                "						vToPartID,attributeID,attributeValue,current_timestamp(),pUserID,pUserRoleId  \n" +
                "					FROM  \n" +
                "					component_dynamic_attribute_mapping_part where mfgPNID= pFromPartID and isDeleted = 0;  \n" +
                "				end if;  \n" +
                "				IF pIsCopyDocument then  \n" +
                "					# [S] - copy document_folder from selected part/assembly level to new part  \n" +
                "					INSERT INTO generic_folder  \n" +
                "							(`gencFolderName`,`refTransID`,`entityID`,`gencFileOwnerType`,`roleId`,`refParentId`,  \n" +
                "							`isDeleted`,`createdAt`,`createdBy`,`copyGencFolderID`,`refCopyTransID`,`refCopyGencFileOwnerType`,`createByRoleId`)  \n" +
                "					SELECT  a.gencFolderName, vToPartID refTransID, '-9' , 'component' gencFileOwnerType, a.roleId, a.refParentId,  \n" +
                "							0 isDeleted, fun_DatetimetoUTCDateTime() createdAt, pUserID createdBy, a.gencFolderID copyGencFolderID ,  \n" +
                "							a.refTransID refCopyTransID, a.gencFileOwnerType refCopyGencFileOwnerType,pUserRoleId  \n" +
                "					FROM generic_folder a  \n" +
                "					WHERE a.refTransID = pFromPartID  \n" +
                "					AND a.gencFileOwnerType = 'component' AND entityID = -9  AND a.isRecycle = 0 AND a.isDeleted = 0;  \n" +
                "  \n" +
                "					UPDATE generic_folder gf1,  \n" +
                "					(   SELECT a.gencFolderID, a.copyGencFolderID  \n" +
                "						FROM generic_folder a WHERE a.refTransID = vToPartID  \n" +
                "						AND a.gencFileOwnerType = 'component' AND entityID = -9 AND a.isRecycle = 0 AND a.isDeleted = 0  \n" +
                "					) gf2  \n" +
                "					SET gf1.refParentId = gf2.gencFolderID  \n" +
                "					WHERE gf1.refParentId = gf2.copyGencFolderID  \n" +
                "					AND gf1.refTransID = vToPartID  \n" +
                "					AND gf1.gencFileOwnerType = 'component' AND entityID = -9 AND gf1.isRecycle = 0 AND gf1.isDeleted = 0;  \n" +
                "					# [E] - copy generic_folder from selected part/assembly level to new part  \n" +
                "  \n" +
                "					INSERT INTO genericfiles  \n" +
                "						(gencFileName,gencOriginalName,gencFileDescription,gencFileExtension,gencFileType,tags,isDefault,refTransID,  \n" +
                "						entityID,gencFileOwnerType,isActive,genFilePath,createdAt,createdBy,isShared,fileGroupBy,refParentId,fileSize,  \n" +
                "						refCopyTransID,refCopyGencFileOwnerType,createByRoleId)  \n" +
                "					select gencFileName,gencOriginalName,gencFileDescription,gencFileExtension,gencFileType,tags,isDefault,vToPartID,  \n" +
                "						entityID,gencFileOwnerType,isActive,genFilePath,current_timestamp(),pUserID,isShared,fileGroupBy,refParentId,fileSize,  \n" +
                "						pFromPartID,refCopyGencFileOwnerType,pUserRoleId  \n" +
                "					from genericfiles where refTransID = pFromPartID and entityID = -9 and isRecycle = 0 and isDeleted = 0;  \n" +
                "  \n" +
                "					UPDATE genericfiles gf1,  \n" +
                "					(   SELECT a.gencFolderID, a.copyGencFolderID  \n" +
                "						FROM generic_folder a WHERE a.refTransID = vToPartID  \n" +
                "						AND a.gencFileOwnerType = 'component' AND entityID = -9 AND a.isRecycle = 0 AND a.isDeleted = 0  \n" +
                "					) gf2  \n" +
                "					SET gf1.refParentId = gf2.gencFolderID  \n" +
                "					WHERE gf1.refParentId = gf2.copyGencFolderID  \n" +
                "					AND gf1.refTransID = vToPartID  \n" +
                "					AND gf1.gencFileOwnerType = 'component' AND entityID = -9 AND gf1.isRecycle = 0 AND gf1.isDeleted = 0;  \n" +
                "				end if;  \n" +
                "  \n" +
                "				set @documentPathOfFromPart = (select documentPath from component where id = pFromPartID);  \n" +
                "				IF(@documentPathOfFromPart is null)  \n" +
                "				THEN  \n" +
                "					CALL Sproc_getRefTransDetailForDocument('component',pFromPartID,false);  \n" +
                "				END IF;  \n" +
                "				select *,(select documentPath from component where id = pFromPartID) documentPathOfFromPart from component where id = vToPartID;  \n" +
                "			END IF;  \n" +
                "		END IF;  \n" +
                "	end if;  \n" +
                "END;  \n" +

                "DROP procedure IF EXISTS `Sproc_CopyPartDetail`;  \n" +
                "CREATE PROCEDURE `Sproc_CopyPartDetail`(  \n" +
                "	IN pFromPartID INT,  \n" +
                "    IN pToPartID INT,  \n" +
                "    IN pUserID Int,  \n" +
                "    IN pIsAttribute tinyint,  \n" +
                "    IN pIsSettings tinyint,  \n" +
                "    IN pIsAdditionalAttibute tinyint,  \n" +
                "    IN pIsPackagingDetail tinyint,  \n" +
                "    IN pIsStandards tinyint,  \n" +
                "    IN pIsRequiredFunctionalType tinyint,  \n" +
                "    IN pIsRequiredMountingType tinyint,  \n" +
                "    IN pIsPackagingAliasPart tinyint,  \n" +
                "    IN pIsOtherPartName tinyint,  \n" +
                "    IN pIsAlternatePart tinyint,  \n" +
                "    IN pIsRoHSReplacementPart tinyint,  \n" +
                "    IN pIsDriveTool tinyint,  \n" +
                "    IN pIsProcessMaterial tinyint,  \n" +
                "    IN pIsRequiredMattingParts tinyint,  \n" +
                "    IN pIsPickupPad tinyint,  \n" +
                "    IN pIsProgram tinyint,  \n" +
                "    IN pIsFunctionalTesingTool tinyint,  \n" +
                "    IN pIsFinctionalRestingEquipment tinyint  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "DECLARE vFromPartCategory tinyint;  \n" +
                "DECLARE vFromMfgType varchar(5);  \n" +
                "DECLARE vIsCPN tinyint;  \n" +
                "DECLARE vToPartIsCPN tinyint;  \n" +
                "DECLARE vValidationPassed tinyint;  \n" +
                "DECLARE vMisMatchFields longtext;  \n" +
                "DECLARE vMessage varchar(200);  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempFromComponentDetail;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempToComponentDetail;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempComponentAlternateValidationDetail;  \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE tempFromComponentDetail  \n" +
                "    select * from component where 1 = 2;  \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE tempToComponentDetail  \n" +
                "    select * from component where 1 = 2;  \n" +
                "  \n" +
                "    CREATE TEMPORARY TABLE tempComponentAlternateValidationDetail  \n" +
                "    select * from component_alternatepn_validations where 1 = 2;  \n" +
                "  \n" +
                "	/* Get From Part Detail For apply Validation */  \n" +
                "	select co.category, co.isCPN  \n" +
                "      into vFromPartCategory, vIsCPN  \n" +
                "	from component co  \n" +
                "	where co.id = pFromPartID and co.isDeleted = 0;  \n" +
                "  \n" +
                "    /* Get To Part Detail For apply Validation */  \n" +
                "    select co.isCPN  \n" +
                "      into  vToPartIsCPN  \n" +
                "	from component co  \n" +
                "	where co.id = pToPartID and co.isDeleted = 0;  \n" +
                "  \n" +
                "	set vValidationPassed = 1; #1 passed, 0 failed  \n" +
                "  \n" +
                "	START TRANSACTION;  \n" +
                "	IF pIsAttribute  then  \n" +
                "		UPDATE `component` toPart,  \n" +
                "		(select `id`,  \n" +
                "        /* Copy IsAttribute */  \n" +
                "        `functionalCategoryID`,`mountingTypeID`,`operatingTemp`,`minOperatingTemp`,  \n" +
                "		`maxOperatingTemp`,`temperatureCoefficient`,`temperatureCoefficientValue`,`temperatureCoefficientUnit`,`connecterTypeID`,  \n" +
                "		`noOfPosition`,`noOfRows`,`pitch`,`pitchMating`,`sizeDimension`,  \n" +
                "		`length`,`width`,`heightText`,`height`,  \n" +
                "        /* Copy IsSetting */  \n" +
                "        `scrapValuePerBuild`,`scrapRatePercentagePerBuild`,`plannedValuePerBuild`,`plannedOverRunPercentagePerBuild`,  \n" +
                "		`selfLifeDays`,`shelfLifeAcceptanceDays`,`shelfListDaysThresholdPercentage`,`maxShelfLifeAcceptanceDays`,`maxShelfListDaysThresholdPercentage`,  \n" +
                "		`shelfLifeDateType`,`maxPriceLimit`,`maxQtyonHand`,`saftyStock`,`eau`,`businessRisk`,`driverToolRequired`,`matingPartRquired`,`pickupPadRequired`,  \n" +
                "        `programingRequired`,`functionalTestingRequired`,`restrictUSEwithpermission`,`bomLock`,`restrictUsePermanently`,  \n" +
                "        /* Copy Additional Attribute */  \n" +
                "        `tolerance`,`voltage`,`value`,`powerRating`,`weight`,`feature`,`color`,`isEpoxyMount`,  \n" +
                "        /* Copy Packaging Detail */  \n" +
                "         `deviceMarking`,`packagingID`,`minimum`,`mult`,`packageQty`,`uomClassID`,`uom`,`unit`,`pcbPerArray`,  \n" +
                "		`grossWeight`,`grossWeightUom`,`packagingWeight`,`packagingWeightUom`,`umidSPQ`,`isReceiveBulkItem`,  \n" +
                "        /* Copy Standard Detail */  \n" +
                "        `countryOfOrigin`,`htsCode`,  \n" +
                "  \n" +
                "		`requiredTestTime`,`mountingTypePartRequired`,`functionalTypePartRequired`  \n" +
                "  \n" +
                "        from component where id = pFromPartID) fromPart  \n" +
                "		SET  \n" +
                "		toPart.`functionalCategoryID` = (CASE WHEN pIsAttribute = 1 THEN fromPart.functionalCategoryID ELSE toPart.`functionalCategoryID` END),  \n" +
                "		toPart.`mountingTypeID` =  (CASE WHEN pIsAttribute = 1 THEN fromPart.mountingTypeID ELSE toPart.`mountingTypeID` END),  \n" +
                "		toPart.`operatingTemp` =  (CASE WHEN pIsAttribute = 1 THEN fromPart.operatingTemp ELSE toPart.`operatingTemp` END),  \n" +
                "		toPart.`minOperatingTemp` =  (CASE WHEN pIsAttribute = 1 THEN fromPart.minOperatingTemp ELSE toPart.`minOperatingTemp` END),  \n" +
                "		toPart.`maxOperatingTemp` =  (CASE WHEN pIsAttribute = 1 THEN fromPart.maxOperatingTemp ELSE toPart.`maxOperatingTemp` END),  \n" +
                "		toPart.`temperatureCoefficient` =  (CASE WHEN pIsAttribute = 1 THEN fromPart.temperatureCoefficient ELSE toPart.`temperatureCoefficient` END),  \n" +
                "		toPart.`temperatureCoefficientValue` =  (CASE WHEN pIsAttribute = 1 THEN fromPart.temperatureCoefficientValue ELSE toPart.`temperatureCoefficientValue` END),  \n" +
                "		toPart.`temperatureCoefficientUnit` =  (CASE WHEN pIsAttribute = 1 THEN fromPart.temperatureCoefficientUnit ELSE toPart.`temperatureCoefficientUnit` END),  \n" +
                "		toPart.`connecterTypeID` =  (CASE WHEN pIsAttribute = 1 THEN fromPart.connecterTypeID ELSE toPart.`connecterTypeID` END),  \n" +
                "		toPart.`noOfPosition` =  (CASE WHEN pIsAttribute = 1 THEN fromPart.noOfPosition ELSE toPart.`noOfPosition` END),  \n" +
                "		toPart.`noOfRows` =  (CASE WHEN pIsAttribute = 1 THEN fromPart.noOfRows ELSE toPart.`noOfRows` END),  \n" +
                "		toPart.`pitch` =  (CASE WHEN pIsAttribute = 1 THEN fromPart.pitch ELSE toPart.`pitch` END),  \n" +
                "		toPart.`pitchMating` =  (CASE WHEN pIsAttribute = 1 THEN fromPart.pitchMating ELSE toPart.`pitchMating` END),  \n" +
                "		toPart.`sizeDimension` =  (CASE WHEN pIsAttribute = 1 THEN fromPart.sizeDimension ELSE toPart.`sizeDimension` END),  \n" +
                "		toPart.`length` =  (CASE WHEN pIsAttribute = 1 THEN fromPart.length ELSE toPart.`length` END),  \n" +
                "		toPart.`width` =  (CASE WHEN pIsAttribute = 1 THEN fromPart.width ELSE toPart.`width` END),  \n" +
                "		toPart.`heightText` =  (CASE WHEN pIsAttribute = 1 THEN fromPart.heightText ELSE toPart.`heightText` END),  \n" +
                "		toPart.`height` =  (CASE WHEN pIsAttribute = 1 THEN fromPart.height ELSE toPart.`height` END),  \n" +
                "        /* Copy IsSetting */  \n" +
                "        toPart.`scrapValuePerBuild` = (CASE WHEN pIsSettings = 1 THEN fromPart.scrapValuePerBuild ELSE toPart.`scrapValuePerBuild` END),  \n" +
                "		toPart.`scrapRatePercentagePerBuild` = (CASE WHEN pIsSettings = 1 THEN fromPart.scrapRatePercentagePerBuild ELSE toPart.`scrapRatePercentagePerBuild` END),  \n" +
                "		toPart.`plannedValuePerBuild` = (CASE WHEN pIsSettings = 1 THEN fromPart.plannedValuePerBuild ELSE toPart.`plannedValuePerBuild` END),  \n" +
                "		toPart.`plannedOverRunPercentagePerBuild` = (CASE WHEN pIsSettings = 1 THEN fromPart.plannedOverRunPercentagePerBuild ELSE toPart.`plannedOverRunPercentagePerBuild` END),  \n" +
                "		toPart.`selfLifeDays` = (CASE WHEN pIsSettings = 1 THEN fromPart.selfLifeDays ELSE toPart.`selfLifeDays` END),  \n" +
                "		toPart.`shelfLifeAcceptanceDays` = (CASE WHEN pIsSettings = 1 THEN fromPart.shelfLifeAcceptanceDays ELSE toPart.`shelfLifeAcceptanceDays` END),  \n" +
                "		toPart.`shelfListDaysThresholdPercentage` =(CASE WHEN pIsSettings = 1 THEN fromPart.shelfListDaysThresholdPercentage ELSE toPart.`shelfListDaysThresholdPercentage` END),  \n" +
                "        toPart.`maxShelfLifeAcceptanceDays` = (CASE WHEN pIsSettings = 1 THEN fromPart.maxShelfLifeAcceptanceDays ELSE toPart.`maxShelfLifeAcceptanceDays` END),  \n" +
                "		toPart.`maxShelfListDaysThresholdPercentage` = (CASE WHEN pIsSettings = 1 THEN fromPart.maxShelfListDaysThresholdPercentage ELSE toPart.`maxShelfListDaysThresholdPercentage` END),  \n" +
                "        toPart.`shelfLifeDateType` = (CASE WHEN pIsSettings = 1 THEN fromPart.shelfLifeDateType ELSE toPart.`shelfLifeDateType` END),  \n" +
                "		toPart.`maxPriceLimit` = (CASE WHEN pIsSettings = 1 THEN fromPart.maxPriceLimit ELSE toPart.`maxPriceLimit` END),  \n" +
                "		toPart.`maxQtyonHand` = (CASE WHEN pIsSettings = 1 THEN fromPart.maxQtyonHand ELSE toPart.`maxQtyonHand` END),  \n" +
                "		toPart.`saftyStock` = (CASE WHEN pIsSettings = 1 THEN fromPart.saftyStock ELSE toPart.`saftyStock` END),  \n" +
                "		toPart.`eau` = (CASE WHEN pIsSettings = 1 THEN fromPart.eau ELSE toPart.`eau` END),  \n" +
                "		toPart.`businessRisk` = (CASE WHEN pIsSettings = 1 THEN fromPart.businessRisk ELSE toPart.`businessRisk` END),  \n" +
                "		toPart.`programingRequired` = (CASE WHEN pIsSettings = 1 THEN fromPart.programingRequired ELSE toPart.`programingRequired` END),  \n" +
                "		toPart.`restrictUSEwithpermission` = (CASE WHEN pIsSettings = 1 THEN fromPart.restrictUSEwithpermission ELSE toPart.`restrictUSEwithpermission` END),  \n" +
                "		toPart.`bomLock` = (CASE WHEN pIsSettings = 1 THEN fromPart.bomLock ELSE toPart.`bomLock` END),  \n" +
                "		toPart.`restrictUsePermanently` = (CASE WHEN pIsSettings = 1 THEN fromPart.restrictUsePermanently ELSE toPart.`restrictUsePermanently` END),  \n" +
                "        /* Copy Additional Attribute */  \n" +
                "        toPart.`tolerance` = (CASE WHEN pIsAdditionalAttibute = 1 THEN fromPart.tolerance ELSE toPart.`tolerance` END),  \n" +
                "		toPart.`voltage` = (CASE WHEN pIsAdditionalAttibute = 1 THEN fromPart.voltage ELSE toPart.`voltage` END),  \n" +
                "		toPart.`value` = (CASE WHEN pIsAdditionalAttibute = 1 THEN fromPart.value ELSE toPart.`value` END),  \n" +
                "		toPart.`powerRating` = (CASE WHEN pIsAdditionalAttibute = 1 THEN fromPart.powerRating ELSE toPart.`powerRating` END),  \n" +
                "		toPart.`weight` = (CASE WHEN pIsAdditionalAttibute = 1 THEN fromPart.weight ELSE toPart.`weight` END),  \n" +
                "		toPart.`feature` = (CASE WHEN pIsAdditionalAttibute = 1 THEN fromPart.feature ELSE toPart.`feature` END),  \n" +
                "		toPart.`isEpoxyMount` = (CASE WHEN pIsAdditionalAttibute = 1 THEN fromPart.isEpoxyMount ELSE toPart.`isEpoxyMount` END),  \n" +
                "		toPart.`color` = (CASE WHEN pIsAdditionalAttibute = 1 THEN fromPart.color ELSE toPart.`color` END),  \n" +
                "        /* Copy Packaging Detail */  \n" +
                "        toPart.`deviceMarking` = (CASE WHEN pIsPackagingDetail = 1 THEN fromPart.deviceMarking ELSE toPart.`deviceMarking` END),  \n" +
                "		toPart.`packagingID` = (CASE WHEN pIsPackagingDetail = 1 THEN fromPart.packagingID ELSE toPart.`packagingID` END),  \n" +
                "		toPart.`minimum` = (CASE WHEN pIsPackagingDetail = 1 THEN fromPart.minimum ELSE toPart.`minimum` END),  \n" +
                "		toPart.`mult` = (CASE WHEN pIsPackagingDetail = 1 THEN fromPart.mult ELSE toPart.`mult` END),  \n" +
                "		toPart.`packageQty` = (CASE WHEN pIsPackagingDetail = 1 THEN fromPart.packageQty ELSE toPart.`packageQty` END),  \n" +
                "        toPart.`umidSPQ` = (CASE WHEN pIsPackagingDetail = 1 THEN fromPart.umidSPQ ELSE toPart.`umidSPQ` END),  \n" +
                "		toPart.`uomClassID` = (CASE WHEN pIsPackagingDetail = 1 THEN fromPart.uomClassID ELSE toPart.`uomClassID` END),  \n" +
                "		toPart.`uom` = (CASE WHEN pIsPackagingDetail = 1 THEN fromPart.uom ELSE toPart.`uom` END),  \n" +
                "		toPart.`unit` =(CASE WHEN pIsPackagingDetail = 1 THEN fromPart.unit ELSE toPart.`unit` END),  \n" +
                "		toPart.`pcbPerArray` =(CASE WHEN pIsPackagingDetail = 1 THEN fromPart.pcbPerArray ELSE toPart.`pcbPerArray` END),  \n" +
                "		toPart.`grossWeight` = (CASE WHEN pIsPackagingDetail = 1 THEN fromPart.grossWeight ELSE toPart.`grossWeight` END),  \n" +
                "		toPart.`grossWeightUom` = (CASE WHEN pIsPackagingDetail = 1 THEN fromPart.grossWeightUom ELSE toPart.`grossWeightUom` END),  \n" +
                "		toPart.`packagingWeight` = (CASE WHEN pIsPackagingDetail = 1 THEN fromPart.packagingWeight ELSE toPart.`packagingWeight` END),  \n" +
                "		toPart.`packagingWeightUom` = (CASE WHEN pIsPackagingDetail = 1 THEN fromPart.packagingWeightUom ELSE toPart.`packagingWeightUom` END),  \n" +
                "        toPart.`isReceiveBulkItem` =  (CASE WHEN pIsPackagingDetail = 1 THEN ((CASE WHEN toPart.partType = 4 THEN fromPart.isReceiveBulkItem ELSE FALSE END))  \n" +
                "        ELSE toPart.`isReceiveBulkItem` END),  \n" +
                "		/* Copy Standard Detail */  \n" +
                "		toPart.`countryOfOrigin` = (CASE WHEN pIsStandards = 1 THEN fromPart.countryOfOrigin ELSE toPart.`countryOfOrigin` END),  \n" +
                "		toPart.`htsCode` = (CASE WHEN pIsStandards = 1 THEN fromPart.packagingWeightUom ELSE toPart.`htsCode` END),  \n" +
                "  \n" +
                "		toPart.`requiredTestTime` = (CASE WHEN (pIsFunctionalTesingTool = 1 and vToPartIsCPN = 0) THEN fromPart.requiredTestTime ELSE toPart.`requiredTestTime` END),  \n" +
                "        toPart.`mountingTypePartRequired`= (CASE WHEN (pIsRequiredMountingType = 1  and vToPartIsCPN = 0) THEN fromPart.mountingTypePartRequired ELSE  toPart.`mountingTypePartRequired` END),  \n" +
                "        toPart.`functionalTypePartRequired` = (CASE WHEN (pIsRequiredFunctionalType = 1  and vToPartIsCPN = 0) THEN fromPart.functionalTypePartRequired ELSE toPart.`functionalTypePartRequired` END),  \n" +
                "        toPart.`driverToolRequired`= (CASE WHEN (pIsDriveTool = 1 and vToPartIsCPN = 0  and vToPartIsCPN = 0) THEN fromPart.driverToolRequired ELSE toPart.`driverToolRequired` END),  \n" +
                "        toPart.`matingPartRquired` = (CASE WHEN (pIsRequiredMattingParts = 1  and vToPartIsCPN = 0  and vToPartIsCPN = 0) THEN fromPart.matingPartRquired ELSE toPart.`matingPartRquired` END),  \n" +
                "        toPart.`pickupPadRequired` = (CASE WHEN (pIsPickupPad = 1  and vToPartIsCPN = 0  and vToPartIsCPN = 0) THEN fromPart.pickupPadRequired ELSE toPart.`pickupPadRequired` END),  \n" +
                "        toPart.`functionalTestingRequired`= (CASE WHEN (pIsFunctionalTesingTool = 1  and vToPartIsCPN = 0) THEN fromPart.functionalTestingRequired ELSE toPart.`functionalTestingRequired` END),  \n" +
                "  \n" +
                "		toPart.`updatedBy` = pUserID,  \n" +
                "		toPart.`updatedAt` = current_timestamp()  \n" +
                "		WHERE toPart.`id` = pToPartID;  \n" +
                "	end if;  \n" +
                "  \n" +
                "    set vMessage = '';  \n" +
                "			CALL Sproc_CopyPartDetailOnCopyAndDuplicatePart(pFromPartID,pToPartID,pUserID,vIsCPN,vToPartIsCPN,vFromPartCategory,pIsStandards,pIsRequiredFunctionalType,pIsRequiredMountingType,pIsPackagingAliasPart,pIsOtherPartName  \n" +
                "				,pIsAlternatePart,pIsRoHSReplacementPart,pIsDriveTool,pIsProcessMaterial,pIsRequiredMattingParts,pIsPickupPad,pIsFunctionalTesingTool,pIsFinctionalRestingEquipment, vMisMatchFields, vMessage);  \n" +
                "  \n" +
                "	IF(vMessage != '')  \n" +
                "	THEN  \n" +
                "		select vMessage as message,vMisMatchFields as misMatchFields;  \n" +
                "	ELSE  \n" +
                "		select * from component where id = pToPartID;  \n" +
                "	END IF;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version ->  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1288,'1.00','V1',' User Story 40861: [Main Branch] - Improvement point for Create Duplicate Part - SHUBHAM '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1288:
            allDbChangesArray.push(
                /* **************************** New Script -> 04-02-2022  *********************************** */
                "DROP procedure IF EXISTS `Sproc_GetUMIDDetailForElastic`;  \n" +
                "CREATE PROCEDURE `Sproc_GetUMIDDetailForElastic`(  \n" +
                "	IN pumID INT,  \n" +
                "    In pFromdate date,  \n" +
                "    In pTodate date,  \n" +
                "    IN pRequiredCount tinyint(1)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "  \n" +
                "     IF(pRequiredCount)  \n" +
                "	THEN  \n" +
                "		SELECT  \n" +
                "			count(1) totalCount  \n" +
                "		FROM component_sid_stock css  \n" +
                "			/*INNER JOIN 	component c ON css.refcompid = c.id  \n" +
                "			LEFT JOIN mfgcodemst m ON m.id = c.mfgcodeID  \n" +
                "			WHERE (css.isdeleted IS NULL OR css.isdeleted = 0) AND css.id = IFNULL(pumID, css.id);  */  \n" +
                "			WHERE css.isdeleted = 0 AND css.id = IFNULL(pumID, css.id);  \n" +
                "	ELSE  \n" +
                "		SELECT css.id,  \n" +
                "				css.uid,  \n" +
                "                parentUIDId,  \n" +
                "                parentUID,  \n" +
                "                fromUIDId,  \n" +
                "                fromUID,  \n" +
                "				css.receiveMaterialType,  \n" +
                "				css.refcompid AS partID,  \n" +
                "				CONCAT('(', m.mfgCode, ')', ' ',  m.mfgName) mfgCode,  \n" +
                "				m.mfgType mfgType,  \n" +
                "				c.mfgPN,  \n" +
                "				c.PIDCode,  \n" +
                "				css.pkgQty,  \n" +
                "				css.pkgUnit,  \n" +
                "                css.orgQty,  \n" +
                "                css.orgPkgUnit,  \n" +
                "				fun_getUnitNameByID(css.uom) uomName,  \n" +
                "				css.dateCode,  \n" +
                "				css.lotCode,  \n" +
                "				fun_getCostCategoryNameByIDForElasticSearch(css.costCategoryID, TRUE) costCategory,  \n" +
                "				fun_getMSLLevelByID(c.mslID, FALSE) mslLevel,  \n" +
                "				fun_getFileCountByTransIDAndType('component_sid_stock', css.id) pictureCount,  \n" +
                "				c.mfgPNDescription,  \n" +
                "				IF(css.customerConsign = 0 , 'No', 'Yes') AS customerConsign,  \n" +
                "                IF(css.isReservedStock = 0 , 'No', 'Yes') AS reservedStock,  \n" +
                "				fun_getPackagingNameByID(css.packaging) packagingName,  \n" +
                "                pd.refPackingSlipMaterialRecID AS packingSlipID,  \n" +
                "				FUN_GETPACKINGSLIPNUMBERBYID(pd.refPackingSlipMaterialRecID) AS packingSlipNumber,  \n" +
                "				css.binID,  \n" +
                "				fun_getBinNameByID(css.binID) location,  \n" +
                "				fun_getWarehouseNameByBinID(css.binID) warehouse,  \n" +
                "				fun_getDepartmentNameByBinID(css.binID) department,  \n" +
                "				css.expiryDate,  \n" +
                "				(CASE WHEN (css.expiryDate < CURRENT_TIMESTAMP ) THEN 'Expired' ELSE NULL END) AS expiredStatus,  \n" +
                "				css.isDeleted  \n" +
                "		FROM component_sid_stock css  \n" +
                "		INNER JOIN component c ON css.refcompid = c.id  \n" +
                "		LEFT JOIN mfgcodemst m ON m.id = c.mfgcodeID  \n" +
                "        LEFT JOIN component_sid_stock_packing_detail cp ON cp.refComponentSidStockID = css.id AND cp.isDeleted = 0  \n" +
                "		LEFT JOIN packing_slip_material_receive_det pd ON pd.id = cp.refPackingSlipDetailID AND pd.isDeleted = 0  \n" +
                "		WHERE css.id = IFNULL(pumID, css.id) AND  \n" +
                "			(CASE WHEN (pFromdate is not null and pTodate is not null) THEN  \n" +
                "						((DATE(fun_CovnertDateTimeByTimezoneValue(css.createdAt,v_TimeZone)) between pFromdate and pTodate)  \n" +
                "							or (DATE(fun_CovnertDateTimeByTimezoneValue(css.updatedAt,v_TimeZone)) between pFromdate and pTodate))  \n" +
                "						ELSE 1 = 1 END);  \n" +
                "	END IF;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version ->  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1289,'1.00','V1',' Remove unnecessary group by into SP - SHUBHAM '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1289:
            allDbChangesArray.push(
                /* **************************** New Script -> 09-09-2021  *********************************** */
                "DROP TRIGGER /*!50032 IF EXISTS */ `Trg_AU_salesshippingmst` ;  \n" +
                "CREATE TRIGGER `Trg_AU_salesshippingmst` AFTER UPDATE ON `salesshippingmst`  \n" +
                "    FOR EACH ROW BEGIN  \n" +
                "   DECLARE vBPOQty INT;  \n" +
                "	DECLARE vBPOTotalQty INT;  \n" +
                "	SELECT  SUM(cpd.shipQty) INTO @shipQty   FROM customer_packingslip_det cpd JOIN customer_packingslip cp ON cp.id=cpd.refCustPackingSlipID  \n" +
                "		WHERE cpd.isdeleted=0 AND cpd.refsalesorderdetid=new.sDetID AND cp.transType='P';  \n" +
                "  \n" +
                "	-- SELECT SUM(ss.qty) INTO @qty FROM salesorderdet ss WHERE ss.sDetID=new.sDetID AND ss.isdeleted=0;  \n" +
                "	SELECT refBlanketPOID,qty INTO @bpoID,@qty FROM salesorderdet  WHERE id=new.sDetID AND isdeleted=0;  \n" +
                "	SELECT  qty INTO vBPOQty FROM  salesorderdet WHERE id=@bpoID;  \n" +
                "	SELECT  SUM(qty) INTO vBPOTotalQty FROM  salesorderdet WHERE refBlanketPOID=@bpoID AND isdeleted=0;  \n" +
                "  \n" +
                "		IF(IFNULL(@shipQty,0)>=IFNULL(@qty,1)) THEN  \n" +
                "			UPDATE SalesOrderDet SET salesOrderDetStatus=2,completeStatusReason='AUTO' WHERE id=New.sDetID;  \n" +
                "		ELSE  \n" +
                "			UPDATE SalesOrderDet SET salesOrderDetStatus=1,completeStatusReason=NULL WHERE id=New.sDetID;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF((SELECT COUNT(1) FROM SalesOrderDet WHERE  refBlanketPOID=@bpoID AND isdeleted=0 AND salesOrderDetStatus=1 AND isCancle=0)=0 AND IFNULL(vBPOQty,0)<=IFNULL(vBPOTotalQty,0))THEN  \n" +
                "		        UPDATE SalesOrderDet SET salesOrderDetStatus=2,completeStatusReason='AUTO' WHERE (id=@bpoID OR  refSODetID=@bpoID);  \n" +
                "		ELSE  \n" +
                "		          UPDATE SalesOrderDet SET salesOrderDetStatus=1,completeStatusReason=NULL WHERE (id=@bpoID OR  refSODetID=@bpoID);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "          SELECT COUNT(1) INTO @shippingQty FROM    salesshippingmst WHERE sDetID=new.sDetID AND isdeleted=0;  \n" +
                "  \n" +
                "          UPDATE SalesOrderDet SET shippingQty=@shippingQty  WHERE id=new.sDetID;  \n" +
                "  \n" +
                "          SELECT COUNT(1) INTO @shippingQty FROM    salesshippingmst WHERE sDetID=@bpoID AND isdeleted=0;  \n" +
                "  \n" +
                "          UPDATE SalesOrderDet SET shippingQty=@shippingQty  WHERE id=@bpoID;  \n" +
                "  \n" +
                "          IF IFNULL(OLD.qty,0) != IFNULL(NEW.qty,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "		VALUES(\"SALESSHIPINGMST\",CAST(new.shippingID AS CHAR),'RELEASEQTY',CAST(OLD.qty AS CHAR),  \n" +
                "		CAST(new.qty AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	  END IF;  \n" +
                "	  IF IFNULL(OLD.shippingDate,0) != IFNULL(NEW.shippingDate,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "		VALUES(\"SALESSHIPINGMST\",CAST(new.shippingID AS CHAR),'REQUESTEDSHIPDATE',CAST(DATE_FORMAT(OLD.shippingDate, \"%m/%d/%y\") AS CHAR),  \n" +
                "		CAST(DATE_FORMAT(NEW.shippingDate, \"%m/%d/%y\") AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	  END IF;  \n" +
                "	  IF IFNULL(OLD.promisedShipDate,0) != IFNULL(NEW.promisedShipDate,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "		VALUES(\"SALESSHIPINGMST\",CAST(new.shippingID AS CHAR),'PROMISEDSHIPDATE',CAST(DATE_FORMAT(OLD.promisedShipDate, \"%m/%d/%y\") AS CHAR),  \n" +
                "		CAST(DATE_FORMAT(NEW.promisedShipDate, \"%m/%d/%y\") AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	  END IF;  \n" +
                "	  IF IFNULL(OLD.requestedDockDate,0) != IFNULL(NEW.requestedDockDate,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "		VALUES(\"SALESSHIPINGMST\",CAST(new.shippingID AS CHAR),'REQUESTEDDOCKDATE',CAST(DATE_FORMAT(OLD.requestedDockDate, \"%m/%d/%y\") AS CHAR),  \n" +
                "		CAST(DATE_FORMAT(NEW.requestedDockDate, \"%m/%d/%y\") AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	  END IF;  \n" +
                "  \n" +
                "	  IF IFNULL(OLD.isAgreeToShip,0) != IFNULL(NEW.isAgreeToShip,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "		VALUES(\"SALESSHIPINGMST\",CAST(new.shippingID AS CHAR),'AGREETOSHIP',CAST(CASE WHEN OLD.isAgreeToShip=1 THEN 'YES' ELSE 'NO' END AS CHAR),  \n" +
                "		CAST(CASE WHEN NEW.isAgreeToShip=1 THEN 'YES' ELSE 'NO' END AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	  END IF;  \n" +
                "  \n" +
                "	  IF IFNULL(OLD.revisedRequestedDockDate,0) != IFNULL(NEW.revisedRequestedDockDate,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "		VALUES(\"SALESSHIPINGMST\",CAST(new.shippingID AS CHAR),'REQUESTEDREVISEDDOCKDATE',CAST(DATE_FORMAT(OLD.revisedRequestedDockDate, \"%m/%d/%y\") AS CHAR),  \n" +
                "		CAST(DATE_FORMAT(NEW.revisedRequestedDockDate, \"%m/%d/%y\") AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	  END IF;  \n" +
                "	  IF IFNULL(OLD.revisedRequestedShipDate,0) != IFNULL(NEW.revisedRequestedShipDate,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "		VALUES(\"SALESSHIPINGMST\",CAST(new.shippingID AS CHAR),'REQUESTEDREVISEDSHIPDATE',CAST(DATE_FORMAT(OLD.revisedRequestedShipDate, \"%m/%d/%y\") AS CHAR),  \n" +
                "		CAST(DATE_FORMAT(NEW.revisedRequestedShipDate, \"%m/%d/%y\") AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	  END IF;  \n" +
                "	  IF IFNULL(OLD.revisedRequestedPromisedDate,0) != IFNULL(NEW.revisedRequestedPromisedDate,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "		VALUES(\"SALESSHIPINGMST\",CAST(new.shippingID AS CHAR),'REVISEDPROMISEDDATE',CAST(DATE_FORMAT(OLD.revisedRequestedPromisedDate, \"%m/%d/%y\") AS CHAR),  \n" +
                "		CAST(DATE_FORMAT(NEW.revisedRequestedPromisedDate, \"%m/%d/%y\") AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	  END IF;  \n" +
                "	  IF IFNULL(OLD.shippingMethodID,0) != IFNULL(NEW.shippingMethodID,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "		VALUES(\"SALESSHIPINGMST\",CAST(new.shippingID AS CHAR),'SHIPPINGMETHODID',CAST( fun_getGenericCategoryNameByID(OLD.shippingMethodID) AS CHAR),  \n" +
                "		CAST(fun_getGenericCategoryNameByID(NEW.shippingMethodID) AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	  END IF;  \n" +
                "	  IF IFNULL(OLD.carrierID,0) != IFNULL(NEW.carrierID,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "		VALUES(\"SALESSHIPINGMST\",CAST(new.shippingID AS CHAR),'CARRIERID',CAST( fun_getGenericCategoryNameByID(OLD.carrierID) AS CHAR),  \n" +
                "		CAST(fun_getGenericCategoryNameByID(NEW.carrierID) AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	  END IF;  \n" +
                "	  IF IFNULL(OLD.carrierAccountNumber,0) != IFNULL(NEW.carrierAccountNumber,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "		VALUES(\"SALESSHIPINGMST\",CAST(new.shippingID AS CHAR),'CARRIERACCOUNTNUMBER',CAST( OLD.carrierAccountNumber AS CHAR),  \n" +
                "		CAST(NEW.carrierAccountNumber AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	  END IF;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version ->  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1290,'1.00','V1',' Trigger Trg_AU_salesshippingmst-CC '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;

        case 1290:
            allDbChangesArray.push(
                /* **************************** New Script -> 07-02-2022  *********************************** */
                "DROP procedure IF EXISTS `Sproc_checkDelete_packing_slip_material_receive_det`;  \n" +
                "CREATE PROCEDURE `Sproc_checkDelete_packing_slip_material_receive_det`(  \n" +
                "	IN tableName VARCHAR(255),  \n" +
                "	IN IDs LONGTEXT,  \n" +
                "	IN deletedBy INT,  \n" +
                "	IN entityID VARCHAR(255),  \n" +
                "	IN refrenceIDs LONGTEXT,  \n" +
                "	IN pRoleID INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "		DECLARE v_StartIndex INT;  \n" +
                "		DECLARE v_EndIndex INT;  \n" +
                "		DECLARE v_Id VARCHAR(10);  \n" +
                "		DECLARE v_InvoiceId INT;  \n" +
                "		DECLARE v_InvoiceDetailId INT;  \n" +
                "		DECLARE v_MainInvoiceId INT;  \n" +
                "		DECLARE v_MemoIds VARCHAR(10000);  \n" +
                "		DECLARE v_UpdatedMemoIds VARCHAR(10000);  \n" +
                "		DECLARE v_InvoiceTotalDue DECIMAL(18,8);  \n" +
                "		DECLARE v_CurrentLineExtendedPrice DECIMAL(18,8);  \n" +
                "		DECLARE v_CountOfMemo INT;  \n" +
                "		DECLARE v_IsMemoForPrice TINYINT;  \n" +
                "		DECLARE v_IsMemoForQty TINYINT;  \n" +
                "		SET v_StartIndex = 0;  \n" +
                "		SET @SQl2 = CONCAT('UPDATE packing_slip_material_receive_part_inspection_det SET isDeleted = 1, deletedBy = ',deletedBy,', deleteByRoleId = ',pRoleID,', deletedAt =\"',fun_DatetimetoUTCDateTime(),'\" WHERE lineId IN(', IDs, ') AND deletedAt IS NULL');  \n" +
                "		PREPARE stmt2 FROM @SQL2;  \n" +
                "        EXECUTE stmt2;  \n" +
                "		DEALLOCATE PREPARE stmt2;  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_Split_Ids_String_Into_Table;  \n" +
                "		CREATE TEMPORARY TABLE temp_Split_Ids_String_Into_Table (id VARCHAR(10));  \n" +
                "		SET @SQL3 = CONCAT(\"INSERT INTO temp_Split_Ids_String_Into_Table (id) values ('\", REPLACE((IDs),',', \"'),('\"),\"');\");  \n" +
                "        PREPARE stmt3 FROM @SQL3;  \n" +
                "		EXECUTE stmt3;  \n" +
                "        DEALLOCATE PREPARE stmt3;  \n" +
                "		SELECT COUNT(1) INTO v_EndIndex FROM temp_Split_Ids_String_Into_Table;  \n" +
                "		WHILE v_StartIndex < v_EndIndex DO  \n" +
                "			SELECT id INTO v_Id FROM temp_Split_Ids_String_Into_Table LIMIT 1 OFFSET v_StartIndex;  \n" +
                "			SELECT refPackingSlipMaterialRecID, refPackingSlipDetId, isMemoForPrice, isMemoForQty INTO v_InvoiceId, v_InvoiceDetailId, v_IsMemoForPrice, v_IsMemoForQty FROM packing_slip_material_receive_det WHERE id = v_Id AND isDeleted = 0;  \n" +
                "            SELECT COUNT(1) INTO v_CountOfMemo FROM packing_slip_material_receive WHERE id = v_InvoiceId AND (receiptType = 'C' OR receiptType = 'D');  \n" +
                "			IF (v_CountOfMemo > 0) THEN  \n" +
                "				SELECT refPackingSlipMaterialRecID, refCreditDebitInvoiceNo INTO v_MainInvoiceId, v_MemoIds FROM packing_slip_material_receive_det WHERE id = v_InvoiceDetailId AND isDeleted = 0;  \n" +
                "				IF (v_MemoIds IS NOT NULL) THEN  \n" +
                "					DROP TEMPORARY TABLE IF EXISTS temp_Split_String_Into_Table;  \n" +
                "					CREATE TEMPORARY TABLE temp_Split_String_Into_Table (lineId VARCHAR(10));  \n" +
                "                    SET @SQL4 = CONCAT(\"INSERT INTO temp_Split_String_Into_Table (lineId) values ('\", REPLACE((v_MemoIds),',', \"'),('\"),\"');\");  \n" +
                "					PREPARE stmt4 FROM @SQL4;  \n" +
                "                    EXECUTE stmt4;  \n" +
                "                    DEALLOCATE PREPARE stmt4;  \n" +
                "					UPDATE 	packing_slip_material_receive SET 	`status` = 'I', invoiceApprovalStatus = (case when (invoiceApprovalStatus = 1 or invoiceRequireManagementApproval = 1) then 2 else invoiceApprovalStatus end)  \n" +
                "					WHERE 	id = v_MainInvoiceId AND receiptType = 'I' AND isDeleted = 0;  \n" +
                "					SELECT IFNULL(invoiceTotalDue, 0) INTO v_InvoiceTotalDue FROM packing_slip_material_receive WHERE id = v_InvoiceId AND isDeleted = 0;  \n" +
                "					SELECT ABS(IFNULL(extendedPrice, 0)) INTO v_CurrentLineExtendedPrice FROM packing_slip_material_receive_det WHERE id = v_Id AND isDeleted = 0;  \n" +
                "					UPDATE 	packing_slip_material_receive SET 	`status` = 'A', invoiceTotalDue = (v_InvoiceTotalDue - v_CurrentLineExtendedPrice)  \n" +
                "					WHERE 	id = v_InvoiceId AND isDeleted = 0;  \n" +
                "					UPDATE 	packing_slip_material_receive ps  \n" +
                "					SET 	ps.`status` = (CASE WHEN ps.packingSlipModeStatus = 'D' THEN 'I' ELSE 'IR' END)  \n" +
                "					WHERE 	ps.refPackingSlipNumberForInvoice = v_MainInvoiceId AND ps.receiptType = 'P' AND ps.isDeleted = 0;  \n" +
                "					UPDATE 	packing_slip_material_receive_det SET 	isDeleted = 1, deletedBy = deletedBy, deleteByRoleId = pRoleID, deletedAt = fun_DatetimetoUTCDateTime()  \n" +
                "                    WHERE 	id = v_Id AND isDeleted = 0;  \n" +
                "					IF ((SELECT COUNT(1) FROM packing_slip_material_receive_det WHERE refPackingSlipMaterialRecID = v_InvoiceId AND refPackingSlipDetId = v_InvoiceDetailId AND isDeleted = 0) = 0) THEN  \n" +
                "						DELETE FROM temp_Split_String_Into_Table WHERE lineId = v_InvoiceId;  \n" +
                "					END IF;  \n" +
                "					SELECT GROUP_CONCAT(lineId) INTO v_UpdatedMemoIds  FROM temp_Split_String_Into_Table;  \n" +
                "					UPDATE 	packing_slip_material_receive_det SET 	`status` = 'D', refCreditDebitInvoiceNo = v_UpdatedMemoIds, isMemoForPrice = (CASE WHEN v_IsMemoForPrice = 1 THEN 0 ELSE isMemoForPrice END),  \n" +
                "					isMemoForQty = (CASE WHEN v_IsMemoForQty = 1 THEN 0 ELSE isMemoForQty END), difference = (CASE WHEN v_IsMemoForPrice = 1 THEN NULL ELSE difference END), differenceQty = (CASE WHEN v_IsMemoForQty = 1 THEN NULL ELSE differenceQty END)  \n" +
                "					WHERE 	id = v_InvoiceDetailId AND isDeleted = 0;  \n" +
                "				ELSE  \n" +
                "					IF ((SELECT receiptType FROM packing_slip_material_receive WHERE refPackingSlipNumberForInvoice = v_InvoiceId AND isDeleted = 0) = 'R') THEN  \n" +
                "						UPDATE 	packing_slip_material_receive SET 	`status` = 'WC', packingSlipModeStatus = 'S'  \n" +
                "						WHERE  	refPackingSlipNumberForInvoice = v_InvoiceId AND isDeleted = 0;  \n" +
                "					END IF;  \n" +
                "  \n" +
                "					UPDATE 	packing_slip_material_receive_det SET 	isDeleted = 1, deletedBy = deletedBy, deleteByRoleId = pRoleID, deletedAt = fun_DatetimetoUTCDateTime()  \n" +
                "					WHERE 	id = v_Id AND isDeleted = 0;  \n" +
                "				END IF;  \n" +
                "			ELSE  \n" +
                "				UPDATE 	packing_slip_material_receive_det SET 	isDeleted = 1, deletedBy = deletedBy, deleteByRoleId = pRoleID, deletedAt = fun_DatetimetoUTCDateTime()  \n" +
                "				WHERE 	id = v_Id AND isDeleted = 0;  \n" +
                "			END IF;  \n" +
                "			SET v_StartIndex = v_StartIndex + 1;  \n" +
                "		END WHILE;  \n" +
                "		/*SET @SQl1 = CONCAT('update packing_slip_material_receive_det set isDeleted = 1, deletedBy = ',deletedBy,', deleteByRoleId = ',pRoleID,', deletedAt =\"',fun_DatetimetoUTCDateTime(),'\" where id IN(', IDs, ') and deletedAt is NULL');  \n" +
                "		PREPARE stmt1 FROM @SQL1;  \n" +
                "		EXECUTE stmt1;  \n" +
                "		DEALLOCATE PREPARE stmt1;   */  \n" +
                "		SELECT COUNT(1) TotalCount FROM packing_slip_material_receive_det WHERE id IN (IDs) AND isDeleted = 0 AND deletedAt IS NULL;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 07-02-2022  *********************************** */
                "DROP function IF EXISTS `fun_getInvoiceStatusName`;  \n" +
                "CREATE FUNCTION `fun_getInvoiceStatusName`(pStatus varchar(2)) RETURNS varchar(50) CHARSET utf8mb4  \n" +
                "BEGIN  \n" +
                "	DECLARE vName varchar(50);  \n" +
                "		if pStatus = 'PE' THEN  \n" +
                "			set vName = 'Pending';  \n" +
                "		elseif pStatus = 'I' THEN  \n" +
                "			set vName = 'Investigate';  \n" +
                "		elseif pStatus = 'A' THEN  \n" +
                "			set vName = 'Approved to Pay';  \n" +
                "		elseif pStatus = 'PP' THEN  \n" +
                "			set vName = 'Partially Paid';  \n" +
                "		elseif pStatus = 'PM' THEN  \n" +
                "			set vName = 'Pending Management Approval';  \n" +
                "		ELSE  \n" +
                "			set vName = 'Fully Paid';  \n" +
                "		END IF;  \n" +
                "    return vName;  \n" +
                "end;  \n" +
                /* **************************** New Script -> 07-02-2022  *********************************** */
                "DROP procedure IF EXISTS `Sproc_RetriveSupplierInvoiceList`;  \n" +
                "CREATE PROCEDURE `Sproc_RetriveSupplierInvoiceList`(  \n" +
                "	IN pPageIndex INT,  \n" +
                "	IN pRecordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pReceiptType VARCHAR(30),  \n" +
                "	IN pMfgCodeIds LONGTEXT,  \n" +
                "	IN pPaymentMethodTypeIds LONGTEXT,  \n" +
                "	IN pDueDate DATE,  \n" +
                "	IN pAdditionalDays INT,  \n" +
                "	IN pTermsAndAboveDays INT,  \n" +
                "	IN pInvoiceNumber VARCHAR(50),  \n" +
                "	IN pIsExactSearch TINYINT,  \n" +
                "	IN pMfrPnId INT,  \n" +
                "    IN pInvoiceIds LONGTEXT,  \n" +
                "    IN pExactPaymentNumberSearch TINYINT,  \n" +
                "    IN pPaymentNumber VARCHAR(50),  \n" +
                "    IN pPaymentTermsIds LONGTEXT,  \n" +
                "    IN pInvPaymentTermsIds LONGTEXT,  \n" +
                "    IN pInvoiceFromDate DATE,  \n" +
                "    IN pInvoiceToDate DATE,  \n" +
                "    IN pMarkedForRefundStatus LONGTEXT,  \n" +
                "    IN pInvoiceComments VARCHAR(1000),  \n" +
                "    IN pLockStatusFilter VARCHAR(50),  \n" +
                "    IN pSelectedDateType VARCHAR(10)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255);  \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "    DECLARE vCurrentDate DATE;  \n" +
                "    DECLARE vMfgCodeFormat INT;  \n" +
                "  \n" +
                "	SELECT FUN_GETTIMEZONE() INTO v_TimeZone;  \n" +
                "	SELECT FUN_GETDATETIMEFORMAT() INTO v_DateTimeDisplayFormat;  \n" +
                "    SELECT fun_getMFGCodeNameFormat() INTO vMfgCodeFormat;  \n" +
                "  \n" +
                "    SELECT CAST(fun_ConvertUTCDatetimeToDataKeyDateTimeZone(UTC_TIMESTAMP()) AS DATE) INTO vCurrentDate;  \n" +
                "  \n" +
                "	SET @temp_Sproc_RetriveSupplierInvoiceList = CONCAT(\"  \n" +
                "			SELECT 		p.id,  \n" +
                "					p.systemId,  \n" +
                "					p.poNumber,  \n" +
                "                    p.poDate,  \n" +
                "                    p.refPurchaseOrderID poId,  \n" +
                "					p.mfgCodeID,  \n" +
                "					p.supplierSONumber,  \n" +
                "                    p.soDate,  \n" +
                "					(CASE WHEN p.receiptType = 'I' THEN psm.packingSlipNumber ELSE p.packingSlipNumber END) packingSlipNumber,  \n" +
                "                    (CASE WHEN p.receiptType = 'I' THEN psm.lockStatus ELSE p.lockStatus END) packingSlipLockStatus,  \n" +
                "					p.packingSlipDate,  \n" +
                "					p.invoiceNumber,  \n" +
                "                    p.lockStatus invoiceLockStatus,  \n" +
                "					p.invoiceDate,  \n" +
                "					ps.invoiceDate refParentCreditDebitInvoiceDate,  \n" +
                "					p.creditMemoNumber,  \n" +
                "                    p.lockStatus creditMemoLockStatus,  \n" +
                "					p.creditMemoDate,  \n" +
                "					p.debitMemoNumber,  \n" +
                "                    p.refSupplierCreditMemoNumber,  \n" +
                "                    p.lockStatus debitMemoLockStatus,  \n" +
                "					p.debitMemoDate,  \n" +
                "					p.receiptDate,  \n" +
                "					p.description,  \n" +
                "					p.billToAddress,  \n" +
                "					p.shipToAddress,  \n" +
                "					p.poVersion,  \n" +
                "					p.isDeleted,  \n" +
                "					p.receiptType,  \n" +
                "					p.`status`,  \n" +
                "					p.applyDate,  \n" +
                "					p.refParentCreditDebitInvoiceno,  \n" +
                "					p.refPackingSlipNumberForInvoice,  \n" +
                "					p.invoiceTotalDue,  \n" +
                "					p.isTariffInvoice,  \n" +
                "					p.creditMemoType,  \n" +
                "                    (  \n" +
                "						CASE 	WHEN p.creditMemoType = 'IC' THEN  \n" +
                "								'Invoice Credit Memo (Auto)'  \n" +
                "							WHEN p.creditMemoType = 'MC' THEN  \n" +
                "								'MISC Credit Memo'  \n" +
                "							WHEN p.creditMemoType = 'RC' THEN  \n" +
                "								'RMA Credit Memo'  \n" +
                "							WHEN p.creditMemoType = 'ID' THEN  \n" +
                "								'Invoice Debit Memo (Auto)'  \n" +
                "							WHEN p.creditMemoType = 'MD' THEN  \n" +
                "								'MISC Debit Memo'  \n" +
                "							WHEN p.receiptType = 'I' and p.isTariffInvoice = '0' THEN  \n" +
                "								'Invoice'  \n" +
                "							WHEN p.receiptType = 'I' and p.isTariffInvoice = '1' THEN  \n" +
                "								'MISC Invoice'  \n" +
                "						END  \n" +
                "					) subTypeValue,  \n" +
                "					fun_getUserNameByID(p.updatedBy) updatedByName,  \n" +
                "					fun_getUserNameByID(p.createdBy)  createdByName,  \n" +
                "					fun_getRoleByID(p.createByRoleId) createdbyRole,  \n" +
                "					fun_getRoleByID(p.updateByRoleId) updatedbyRole,  \n" +
                "					fun_ApplyCommonDateTimeFormatByParaValue(p.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAt,  \n" +
                "					fun_ApplyCommonDateTimeFormatByParaValue(p.updatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt,  \n" +
                "                    m.mfgName supplierName,  \n" +
                "					fun_GetFormattedMfgCode(m.mfgCode, m.mfgName,\",vMfgCodeFormat,\") supplierCode,  \n" +
                "					m.mfgCode supplierCodeName,  \n" +
                "					IFNULL(psDoc.cnt,0) invoiceDocCount,  \n" +
                "					pg.packingSlipDocCount,  \n" +
                "					pd.itemReceived,  \n" +
                "					pd.otherChargesItemReceived,  \n" +
                "					pd.itemDisapproved,  \n" +
                "					fun_getReceiptTypeName(p.`receiptType`) receiptMemoType,  \n" +
                "                    fun_getInvoiceStatusName(p.`status`) invoiceVerificationStatus,  \n" +
                "					ps.status parentInvoiceStatus,  \n" +
                "					ps.invoiceNumber refInvoiceNumber,  \n" +
                "                    ps.lockStatus refInvoiceLockStatus,  \n" +
                "					ps.creditMemoType parentCreditMemoType,  \n" +
                "					pd.totalExtendedAmount,  \n" +
                "                    pd.totalDiscount,  \n" +
                "					pe.totalCreditAmount,  \n" +
                "					pe.totalDebitAmount,  \n" +
                "					(  \n" +
                "						IFNULL(pd.totalExtendedAmount, 0) - IFNULL((pe.totalCreditAmount * -1), 0) - IFNULL((pe.totalDebitAmount * -1), 0)  \n" +
                "					) amountToPay,  \n" +
                "                    pd.totalExtendedReceivedPrice,  \n" +
                "					pd.packingDetailNote,  \n" +
                "					pd.approveLineCount,  \n" +
                "					fun_getDueDateEOM((case WHEN p.receiptType = 'D' THEN  \n" +
                "											p.debitMemoDate  \n" +
                "										WHEN p.receiptType = 'C' THEN  \n" +
                "											p.creditMemoDate  \n" +
                "										ELSE p.invoiceDate  \n" +
                "									end), payTerm.termsDays, p.paymentTermsID) paymentDueDate,  \n" +
                "					g.gencCategoryName paymentTermName,  \n" +
                " 					m.paymentTermsID paymentTermsID,  \n" +
                "                    payTerm.gencCategoryName invPaymentTermName,  \n" +
                "                    p.paymentTermsID invPaymentTermsID,  \n" +
                "					(CASE WHEN p.receiptType = 'I' THEN psm.id ELSE p.id END) packingSlipId,  \n" +
                "					psm.packingSlipModeStatus,  \n" +
                "                    psPay.paymentDate,  \n" +
                "					ifnull(psPay.paidAmount,0) paidAmount,  \n" +
                "					ifnull(psPay.refundAmount,0) refundAmount,  \n" +
                "					ifnull(pe.totalPaidDebitCreditAmount,0) totalPaidDebitCreditAmount,  \n" +
                "                    ifnull(pe.totalRefundDebitCreditAmount,0) totalRefundDebitCreditAmount,  \n" +
                "					p.invoiceRequireManagementApproval,  \n" +
                "					(  \n" +
                "						CASE 	WHEN p.invoiceRequireManagementApproval = 1 THEN  \n" +
                "								'Yes'  \n" +
                "							WHEN p.invoiceRequireManagementApproval = 0 THEN  \n" +
                "								'No'  \n" +
                "						END  \n" +
                "					) invoiceRequireManagementApprovalValue,  \n" +
                "					p.invoiceApprovalStatus,  \n" +
                "					(  \n" +
                "						CASE 	WHEN p.invoiceApprovalStatus = 1 THEN  \n" +
                "								'Approved'  \n" +
                "							WHEN p.invoiceApprovalStatus = 2 THEN  \n" +
                "								'Pending'  \n" +
                "							WHEN p.invoiceApprovalStatus = 3 THEN  \n" +
                "								'N/A'  \n" +
                "						END  \n" +
                "					) invoiceApprovalStatusValue,  \n" +
                "					p.invoiceApprovedBy,  \n" +
                "					fun_getUserNameByID(p.invoiceApprovedBy) invoiceApprovedByName,  \n" +
                "					fun_ApplyCommonDateTimeFormatByParaValue(p.invoiceApprovalDate,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') invoiceApprovalDate,  \n" +
                "					p.invoiceApprovalComment,  \n" +
                "					p.internalRemark,  \n" +
                "                    p.remark,  \n" +
                "					p.lockStatus,  \n" +
                "					(case when p.lockStatus = 'NA' then 'Not Applicable'  \n" +
                "						when p.lockStatus = 'RL' then 'Ready To Lock'  \n" +
                "						when p.lockStatus = 'LC' then 'Locked'  \n" +
                "						else null end  \n" +
                "					) lockStatusValue,  \n" +
                "					fun_getUserNameByID(p.lockedBy) lockByName,  \n" +
                "					fun_getRoleByID(p.lockedByRoleId) lockedByRoleName,  \n" +
                "					fun_ApplyCommonDateTimeFormatByParaValue(p.lockedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') lockedAt,  \n" +
                "                    case when p.receiptType = 'I' then  \n" +
                "							ifnull(p.invoiceTotalDue,0) - ((ifnull(pd.totalExtendedReceivedPrice,0)+ifnull(pd.totalDiscount,0))+((IFNULL((pe.totalCreditAmount), 0) + IFNULL((pe.totalDebitAmount),0))*-1))  \n" +
                "						else ifnull(p.invoiceTotalDue,0)+((ifnull(pd.totalExtendedReceivedPrice,0)+ifnull(pd.totalDiscount,0))) end invoiceVariance,  \n" +
                "					h1.refType as haltRefType,  \n" +
                "                    h1.status as haltStatus,  \n" +
                "                    (CASE WHEN h1.status = 'H' THEN  \n" +
                "								'Halted'  \n" +
                "							ELSE ''  \n" +
                "						END  \n" +
                "					) AS haltStatusText,  \n" +
                "                    (CASE  \n" +
                "							WHEN h1.status = 'H' THEN  \n" +
                "								CONCAT(h1.reason, ' - Halt by ',fun_getUserNameByEmployeID(h1.holdEmployeeId),' on ', fun_ConvertUTCDatetimeToDataKeyTimeZone(h1.startDate))  \n" +
                "							ELSE ''  \n" +
                "						END  \n" +
                "					) AS haltReason,  \n" +
                "                    psh1.refType as haltRefTypeRefInv,  \n" +
                "                    psh1.status as haltStatusRefInv,  \n" +
                "                    (CASE WHEN psh1.status = 'H' THEN  \n" +
                "								'Halted'  \n" +
                "							ELSE ''  \n" +
                "						END  \n" +
                "					) AS haltReasonRefInvText,  \n" +
                "                    (CASE  \n" +
                "							WHEN psh1.status = 'H' THEN  \n" +
                "								CONCAT(psh1.reason, ' - Halt by ',fun_getUserNameByEmployeID(psh1.holdEmployeeId),' on ', fun_ConvertUTCDatetimeToDataKeyTimeZone(psh1.startDate))  \n" +
                "							ELSE ''  \n" +
                "						END  \n" +
                "					) AS haltReasonRefInv,  \n" +
                "                    p.markedForRefund,  \n" +
                "                    (case when p.markedForRefund = 0 then 'N/A'  \n" +
                "						else case when ifnull(psPay.refundAmount,0) = 0 then  \n" +
                "										'Waiting for Refund'  \n" +
                "								when ifnull(psPay.refundAmount,0) <> 0 and ifnull(psPay.refundAmount,0) <> ifnull(p.markedForRefundAmt,0)  then  \n" +
                "										'Partially Refunded'  \n" +
                "								when ifnull(psPay.refundAmount,0) = ifnull(p.markedForRefundAmt,0) then  \n" +
                "										'Fully Refunded'  \n" +
                "								else '' end  \n" +
                "						end  \n" +
                "					) markedForRefundValue,  \n" +
                "                    p.markedForRefundAmt  \n" +
                "			FROM packing_slip_material_receive p force index (IDX_packing_slip_material_receive_receiptType)  \n" +
                "            JOIN mfgcodemst m ON m.id = p.mfgCodeID  \n" +
                "            left join (SELECT COUNT(1) AS `cnt`,  \n" +
                "							gFiles.gencFileOwnerType,  \n" +
                "							gFiles.refTransID,  \n" +
                "							gFiles.entityID  \n" +
                "						FROM genericfiles gFiles  \n" +
                "						WHERE gFiles.isDeleted = 0 AND gFiles.isRecycle = 0  \n" +
                "						and gFiles.entityID in (-13,-15,-16)  \n" +
                "						GROUP BY gFiles.gencFileOwnerType , gFiles.refTransID , gFiles.entityID) psDoc  \n" +
                "				ON  psDoc.entityID = (CASE WHEN p.receiptType = 'C' THEN -15  \n" +
                "																		WHEN p.receiptType = 'D' THEN -16  \n" +
                "																		ELSE -13  \n" +
                "																	END)  \n" +
                "				and psDoc.refTransID = p.id  \n" +
                "            LEFT JOIN holdunholdtrans h1 ON h1.refTransId = p.id  \n" +
                "								and h1.id = p.holdUnholdId /*(select max(h2.id)  \n" +
                " 											 from holdunholdtrans h2  \n" +
                " 											where h2.refTransId = h1.refTransId  \n" +
                " 											  and h2.refType in ('SINV','SCM','SDM')  \n" +
                " 											  and h2.isDeleted = 0)*/  \n" +
                "            left join genericcategory g ON g.gencCategoryID = m.paymentTermsID  \n" +
                "            left join genericcategory payTerm ON payTerm.gencCategoryID = p.paymentTermsID  \n" +
                "			LEFT JOIN packing_slip_material_receive ps ON ps.id = p.refParentCreditDebitInvoiceno AND ps.isDeleted = 0  \n" +
                "            LEFT JOIN holdunholdtrans psh1 ON psh1.refTransId = p.refParentCreditDebitInvoiceno  \n" +
                "								and psh1.id = p.refParentCreditDebitInvoiceHoldUnholdId /*(select max(h2.id)  \n" +
                " 											 from holdunholdtrans h2  \n" +
                " 											where psh1.refTransId = h2.refTransId  \n" +
                " 											  and h2.refType = 'SINV'  \n" +
                " 											  and h2.isDeleted = 0)*/  \n" +
                "			LEFT JOIN packing_slip_material_receive psm on psm.refPackingSlipNumberForInvoice = p.id and psm.receiptType = 'P' AND psm.isDeleted = 0  \n" +
                "            left join (  \n" +
                "				SELECT 	IFNULL(g.cnt,0) packingSlipDocCount, g.refTransID  \n" +
                "				FROM 	vu_genericfilescount g  \n" +
                "				WHERE 	g.entityID = -14  \n" +
                "				AND 	g.gencFileOwnerType = 'packing_slip'  \n" +
                "            ) pg on pg.refTransID = psm.id  \n" +
                "			left join (  \n" +
                "							select 	a.refPackingSlipMaterialRecID,  \n" +
                "								GROUP_CONCAT(a.packingSlipSerialNumber, '###', a.approveNote SEPARATOR '||') packingDetailNote,  \n" +
                "								sum(a.itemReceived) itemReceived,  \n" +
                "								sum(a.otherChargesItemReceived) otherChargesItemReceived,  \n" +
                "								sum(a.itemDisapproved) itemDisapproved,  \n" +
                "								sum(a.approveLineCount) approveLineCount,  \n" +
                "								sum(a.extendedPrice) totalExtendedAmount,  \n" +
                "                                sum(discount) totalDiscount,  \n" +
                "								sum(extendedReceivedPrice) totalExtendedReceivedPrice  \n" +
                "							from 	(  \n" +
                "									SELECT 	psm.refPackingSlipMaterialRecID,  \n" +
                "										psm.packingSlipSerialNumber,  \n" +
                "										ifnull(psm.approveNote,psm.comment) approveNote,  \n" +
                "										/*case when psm.refChargesTypeId IS NULL then 1 else 0 end itemReceived,  \n" +
                "										case when psm.refChargesTypeId IS NOT NULL then 1 else 0 end otherChargesItemReceived,*/  \n" +
                "                                        case when psm.packingSlipSerialNumber not REGEXP '^-?[0-9]+$' or psm.packingSlipSerialNumber <= 1000 then 1 else 0 end itemReceived,  \n" +
                "										case when psm.packingSlipSerialNumber REGEXP '^-?[0-9]+$' and psm.packingSlipSerialNumber > 1000 then 1 else 0 end otherChargesItemReceived,  \n" +
                "										case when psm.status = 'D' then 1 else 0 end itemDisapproved,  \n" +
                "										case when psm.status = 'A' then 1 else 0 end approveLineCount,  \n" +
                "										extendedPrice,  \n" +
                "                                        discount,  \n" +
                "										extendedReceivedPrice  \n" +
                "									FROM 	packing_slip_material_receive_det psm  \n" +
                "									WHERE 	psm.isDeleted = 0  \n" +
                "                                    and exists (select 1 from packing_slip_material_receive p where p.id = psm.refPackingSlipMaterialRecID and p.receiptType in ('I','C','D') and p.isDeleted = 0)  \n" +
                "								) a  \n" +
                "							group by a.refPackingSlipMaterialRecID  \n" +
                "						) pd ON pd.refPackingSlipMaterialRecID = p.id  \n" +
                "				left join (select b.refPackingslipInvoiceID,  \n" +
                "									sum(case when a.refPaymentMode = 'P' then b.paymentAmount else 0 end) paidAmount,  \n" +
                "									sum(case when a.refPaymentMode = 'RR' then b.paymentAmount else 0 end) refundAmount,  \n" +
                "                                    max(case when a.refPaymentMode = 'P' then a.paymentDate else null end) paymentDate  \n" +
                "							  from packingslip_invoice_payment a  \n" +
                "							  join packingslip_invoice_payment_det b ON b.refPayementid = a.id  \n" +
                "							 where a.refPaymentMode IN ('P','RR')  \n" +
                "							   and a.isPaymentVoided = 0  \n" +
                "							   and b.isDeleted = 0  \n" +
                "							 group by b.refPackingslipInvoiceID) psPay ON psPay.refPackingslipInvoiceID = p.id  \n" +
                "				left join (  \n" +
                "							select	 	ps.refParentCreditDebitInvoiceno,  \n" +
                "										sum(case when ps.receiptType = 'C' then pd.extendedPrice else 0 end) totalCreditAmount,  \n" +
                "    									sum(case when ps.receiptType = 'D' then pd.extendedPrice else 0 end) totalDebitAmount,  \n" +
                "    									sum(cmPay.paidAmount) totalPaidDebitCreditAmount,  \n" +
                "                                        sum(cmPay.refundAmount) totalRefundDebitCreditAmount  \n" +
                "							from 		packing_slip_material_receive ps  \n" +
                "							inner join 	packing_slip_material_receive_det pd ON ps.id = pd.refPackingSlipMaterialRecID  \n" +
                "                            left join (select b.refPackingslipInvoiceID,  \n" +
                "												sum(case when a.refPaymentMode = 'P' then b.paymentAmount else 0 end) paidAmount,  \n" +
                "												sum(case when a.refPaymentMode = 'RR' then b.paymentAmount else 0 end) refundAmount  \n" +
                "										  from packingslip_invoice_payment a  \n" +
                "										  join packingslip_invoice_payment_det b ON b.refPayementid = a.id  \n" +
                "										 where a.refPaymentMode IN ('P','RR')  \n" +
                "										   and b.isPaymentVoided = 0  \n" +
                "										   and b.isDeleted = 0  \n" +
                "										 group by b.refPackingslipInvoiceID) cmPay ON ps.id = cmPay.refPackingslipInvoiceID  \n" +
                "								  where ps.receiptType in ('C','D')  \n" +
                "									and ps.isDeleted = 0  \n" +
                "									and pd.isDeleted = 0  \n" +
                "							group by 	ps.refParentCreditDebitInvoiceno  \n" +
                "						) pe ON pe.refParentCreditDebitInvoiceno = p.id  \n" +
                "				WHERE p.`status` in ('PE','I','A','P','PP', 'PM') and p.isDeleted = 0 \",  \n" +
                "                (CASE WHEN pInvoiceIds IS NOT NULL THEN CONCAT(\" AND p.id in (\", pInvoiceIds ,\") \") ELSE \"\" END),  \n" +
                "                (CASE WHEN pReceiptType IS NOT NULL THEN CONCAT(\"  AND p.receiptType in (\", pReceiptType ,\")\") ELSE \"\" END)  \n" +
                "	);  \n" +
                "  \n" +
                "	IF (pMfgCodeIds IS NOT NULL AND pMfgCodeIds != '') THEN  \n" +
                "		SET @temp_Sproc_RetriveSupplierInvoiceList= CONCAT(@temp_Sproc_RetriveSupplierInvoiceList, ' AND p.mfgCodeID in (', pMfgCodeIds, ' )');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF (pPaymentTermsIds IS NOT NULL AND pPaymentTermsIds != '') THEN  \n" +
                "		SET @temp_Sproc_RetriveSupplierInvoiceList= CONCAT(@temp_Sproc_RetriveSupplierInvoiceList, ' AND m.paymentTermsID in (', pPaymentTermsIds, ' )');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF (pInvPaymentTermsIds IS NOT NULL AND pInvPaymentTermsIds != '') THEN  \n" +
                "		SET @temp_Sproc_RetriveSupplierInvoiceList= CONCAT(@temp_Sproc_RetriveSupplierInvoiceList, ' AND p.paymentTermsID in (', pInvPaymentTermsIds, ' )');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pPaymentMethodTypeIds IS NOT NULL AND pPaymentMethodTypeIds != '') THEN  \n" +
                "		SET @temp_Sproc_RetriveSupplierInvoiceList= CONCAT(@temp_Sproc_RetriveSupplierInvoiceList, ' and exists (select 1 from mfgcodemst m where m.id = p.mfgCodeID AND m.paymentMethodID in (', pPaymentMethodTypeIds, ' ))');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "     IF(pLockStatusFilter IS NOT NULL)THEN  \n" +
                "    	SET @temp_Sproc_RetriveSupplierInvoiceList = CONCAT(@temp_Sproc_RetriveSupplierInvoiceList,\" and p.lockStatus IN (\", pLockStatusFilter ,\")\");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "      IF(pInvoiceComments IS NOT NULL AND pInvoiceComments != '')THEN  \n" +
                "    	SET @temp_Sproc_RetriveSupplierInvoiceList = CONCAT(@temp_Sproc_RetriveSupplierInvoiceList,\" and (p.internalRemark LIKE '%\",pInvoiceComments,\"%' OR p.remark LIKE '%\",pInvoiceComments,\"%')\");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF (pPaymentNumber IS NOT NULL AND pPaymentNumber != '') THEN  \n" +
                "		SET @temp_Sproc_RetriveSupplierInvoiceList= CONCAT(@temp_Sproc_RetriveSupplierInvoiceList, \"  \n" +
                "				and exists (select 1  \n" +
                "							  from packingslip_invoice_payment pm  \n" +
                "							  join packingslip_invoice_payment_det pd ON pd.refPayementid = pm.id  \n" +
                "							 where pm.isPaymentVoided = 0  \n" +
                "							   and pm.refPaymentMode = 'P'  \n" +
                "							   and pd.refPackingslipInvoiceID = p.id  \n" +
                "							   and pm.isDeleted = 0  \n" +
                "                               and pd.isDeleted = 0  \n" +
                "							   and pm.paymentNumber \",  \n" +
                "                               CASE WHEN pExactPaymentNumberSearch = TRUE THEN CONCAT(\" = '\", pPaymentNumber ,\"' \") ELSE CONCAT(\" like '%\", pPaymentNumber, \"%' \") END  \n" +
                "                               ,\") \");  \n" +
                "    END IF;  \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY paymentDueDate, supplierCode\") ;  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = '1=1' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF pMarkedForRefundStatus IS NOT NULL and pMarkedForRefundStatus != '' THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause,\" and c.markedForRefundValue in (\",pMarkedForRefundStatus,\")\");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF pDueDate IS NOT NULL THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause,\" and c.paymentDueDate <= DATE_ADD('\",pDueDate,\"', INTERVAL \",IFNULL(pAdditionalDays,0),\" DAY) \");  \n" +
                "	ELSEIF (pTermsAndAboveDays IS NOT NULL OR pTermsAndAboveDays = 0) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause,\" and c.paymentDueDate <= DATE_ADD('\",vCurrentDate,\"', INTERVAL \",IFNULL(pTermsAndAboveDays,0),\" DAY) \");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF pInvoiceFromDate IS NOT NULL AND pInvoiceToDate IS NOT NULL THEN  \n" +
                "		IF pSelectedDateType = 'I' THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause,\" and (c.invoiceDate between '\",pInvoiceFromDate,\"' and '\",pInvoiceToDate,\"'  \n" +
                "													or c.refParentCreditDebitInvoiceDate between '\",pInvoiceFromDate,\"' and '\",pInvoiceToDate,\"')\");  \n" +
                "		ELSEIF pSelectedDateType = 'M' THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause,\" AND (receiptDate BETWEEN '\",pInvoiceFromDate,\"' AND '\",pInvoiceToDate,\"')\");  \n" +
                "		ELSEIF pSelectedDateType = 'PO' THEN  \n" +
                "        	SET pWhereClause = CONCAT(pWhereClause,\" AND (poDate BETWEEN '\",pInvoiceFromDate,\"' AND '\",pInvoiceToDate,\"')\");  \n" +
                "		ELSEIF pSelectedDateType = 'C' THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause,\" AND (creditMemoDate BETWEEN '\",pInvoiceFromDate,\"' AND '\",pInvoiceToDate,\"')\");  \n" +
                "		ELSEIF pSelectedDateType = 'D' THEN  \n" +
                "        	SET pWhereClause = CONCAT(pWhereClause,\" AND (debitMemoDate BETWEEN '\",pInvoiceFromDate,\"' AND '\",pInvoiceToDate,\"')\");  \n" +
                "		ELSEIF pSelectedDateType = 'P' THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause,\" AND (packingSlipDate BETWEEN '\",pInvoiceFromDate,\"' AND '\",pInvoiceToDate,\"')\");  \n" +
                "		END IF;  \n" +
                "	ELSEIF pInvoiceFromDate IS NOT NULL THEN  \n" +
                "		IF pSelectedDateType = 'I' THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause,\" and (c.invoiceDate = '\",pInvoiceFromDate,\"'  \n" +
                "													   or c.refParentCreditDebitInvoiceDate = '\",pInvoiceFromDate,\"')\");  \n" +
                "		ELSEIF pSelectedDateType = 'M' THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause,\" AND (receiptDate = '\",pInvoiceFromDate,\"')\");  \n" +
                "		ELSEIF pSelectedDateType = 'PO' THEN  \n" +
                "        	SET pWhereClause = CONCAT(pWhereClause,\" AND (poDate = '\",pInvoiceFromDate,\"')\");  \n" +
                "		ELSEIF pSelectedDateType = 'C' THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause,\" AND (creditMemoDate = '\",pInvoiceFromDate,\"')\");  \n" +
                "		ELSEIF pSelectedDateType = 'D' THEN  \n" +
                "        	SET pWhereClause = CONCAT(pWhereClause,\" AND (debitMemoDate = '\",pInvoiceFromDate,\"')\");  \n" +
                "		ELSEIF pSelectedDateType = 'P' THEN  \n" +
                "        	SET pWhereClause = CONCAT(pWhereClause,\" AND (packingSlipDate = '\",pInvoiceFromDate,\"')\");  \n" +
                "		END IF;  \n" +
                "    END IF;  \n" +
                "  \n" +
                "	IF pInvoiceNumber IS NOT NULL AND pInvoiceNumber != '' THEN  \n" +
                "		IF pIsExactSearch = 1 THEN  \n" +
                "			SET pWhereClause= CONCAT(pWhereClause, \"  \n" +
                "									AND (  \n" +
                "											c.supplierSONumber = '\", pInvoiceNumber, \"'  \n" +
                "										OR 	c.poNumber = '\", pInvoiceNumber, \"'  \n" +
                "										OR 	c.packingSlipNumber = '\", pInvoiceNumber, \"'  \n" +
                "										OR 	c.invoiceNumber = '\", pInvoiceNumber, \"'  \n" +
                "										OR 	c.refInvoiceNumber = '\", pInvoiceNumber, \"'  \n" +
                "										OR 	c.creditMemoNumber = '\", pInvoiceNumber, \"'  \n" +
                "										OR 	c.debitMemoNumber = '\", pInvoiceNumber, \"'\"  \n" +
                "									  \" ) \"  \n" +
                "						);  \n" +
                "		ELSE  \n" +
                "			SET pWhereClause= CONCAT(pWhereClause, \"  \n" +
                "									AND (  \n" +
                "											c.supplierSONumber like '%\", pInvoiceNumber, \"%'  \n" +
                "										OR 	c.poNumber like '%\", pInvoiceNumber, \"%'  \n" +
                "										OR 	c.packingSlipNumber like '%\", pInvoiceNumber, \"%'  \n" +
                "										OR 	c.invoiceNumber like '%\", pInvoiceNumber, \"%'  \n" +
                "										OR 	c.refInvoiceNumber like '%\", pInvoiceNumber, \"%'  \n" +
                "										OR 	c.creditMemoNumber like '%\", pInvoiceNumber, \"%'  \n" +
                "										OR 	c.debitMemoNumber like '%\", pInvoiceNumber, \"%'\"  \n" +
                "									  \" ) \"  \n" +
                "						);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pMfrPnId IS NOT NULL) THEN  \n" +
                "		SET pWhereClause= CONCAT(pWhereClause, \" AND exists (  \n" +
                "				SELECT 1  \n" +
                "				  FROM packing_slip_material_receive_det x  \n" +
                "				 WHERE x.refPackingSlipMaterialRecID = c.id and x.partID = \", pMfrPnId ,\" AND x.isDeleted = 0  \n" +
                "			)  \n" +
                "		\");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pPageIndex <> 0 AND pRecordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (pPageIndex -1) * pRecordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/* to get total count of rows */  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*) as TotalRecord FROM (\", @temp_Sproc_RetriveSupplierInvoiceList ,\" ) c where \", pWhereClause );  \n" +
                "    PREPARE query1 FROM @SQLStatement1;  \n" +
                "    EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"  \n" +
                "			SELECT 	c.*,  \n" +
                "					case when round((c.totalExtendedAmount - c.paidAmount + c.refundAmount),2) != 0 and c.paymentDueDate <= '\",vCurrentDate,\"' then 1 else 0 end isPaymentDueDatePassed,  \n" +
                "				round(c.paidAmount,2) totalPaidAmount,  \n" +
                "                round(c.refundAmount,2) totalRefundAmount,  \n" +
                "				round((c.totalExtendedAmount - c.paidAmount + c.refundAmount),2) paymentAmount,  \n" +
                "				round((c.totalExtendedAmount - c.paidAmount + c.refundAmount),2) balanceToPayAmount,  \n" +
                "				round((c.totalPaidDebitCreditAmount+c.totalRefundDebitCreditAmount+c.paidAmount+c.refundAmount),2) totalPaidAmountToDisableDelete  \n" +
                "			FROM 	(\", @temp_Sproc_RetriveSupplierInvoiceList ,\" ) c  \n" +
                "			where 	\", pWhereClause ,\" \", pOrderBy , rowNumWhere);  \n" +
                "  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 07-02-2022 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1291,'1.00','V1',' User Story 40715: [Main Branch] Supplier Invoice Management Approval status related changes - Jay '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1291:
            allDbChangesArray.push(
                /* **************************** New Script -> 07-02-2022  *********************************** */
                "DROP TRIGGER IF EXISTS `Trg_AU_packing_slip_material_receive`;  \n" +
                "CREATE TRIGGER `Trg_AU_packing_slip_material_receive` AFTER UPDATE ON `packing_slip_material_receive` FOR EACH ROW BEGIN  \n" +
                "	DECLARE vMfgCodeFormat INT;  \n" +
                "    DECLARE vOldCustomer VARCHAR(100);  \n" +
                "    DECLARE vNewCustomer VARCHAR(100);  \n" +
                "  \n" +
                "    SELECT fun_getMFGCodeNameFormat() INTO vMfgCodeFormat;  \n" +
                "  \n" +
                "	IF OLD.receiptType = \"P\" AND OLD.refPurchaseOrderID IS NULL AND NEW.isCustConsigned != OLD.isCustConsigned THEN  \n" +
                "		UPDATE packing_slip_material_receive_det SET isLineCustConsigned=NEW.isCustConsigned, LineCustomerID=NEW.CustomerID WHERE refPackingSlipMaterialRecID=OLD.id;  \n" +
                "        /* (-14) is Packing Slip Entity Default Entry ID*/  \n" +
                "        insert into pending_elastic_entity_sync_data(entityID,entityParamDet) values(-14,concat('{\"id\":', OLD.id , '}'));  \n" +
                "    END IF;  \n" +
                "	IF IFNULL(OLD.poNumber,0) != IFNULL(NEW.poNumber,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'PO#', CAST(OLD.poNumber AS CHAR), CAST(new.poNumber AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "		fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','poNumber'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.poDate,0) != IFNULL(NEW.poDate,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR),  \n" +
                "		CASE  \n" +
                "			WHEN NEW.receiptType = 'P' THEN 'PO Date'  \n" +
                "			WHEN NEW.receiptType = 'R' THEN 'RMA Date'  \n" +
                "			ELSE 'PO Date'  \n" +
                "		END ,  \n" +
                "		CAST(OLD.poDate AS CHAR), CAST(new.poDate AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "		fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','poDate'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.mfgCodeID,0) != IFNULL(NEW.mfgCodeID,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Supplier', CAST(fun_getMfgCodeAndNameByID(OLD.mfgCodeID) AS CHAR), CAST(fun_getMfgCodeAndNameByID(new.mfgCodeID) AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        'varchar');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.supplierSONumber,0) != IFNULL(NEW.supplierSONumber,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'SO#', CAST(OLD.supplierSONumber AS CHAR), CAST(new.supplierSONumber AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "		fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','supplierSONumber'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.soDate,0) != IFNULL(NEW.soDate,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'SO Date', CAST(OLD.soDate AS CHAR), CAST(new.soDate AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "		fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','soDate'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.packingSlipNumber,0) != IFNULL(NEW.packingSlipNumber,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Packing Slip#', CAST(OLD.packingSlipNumber AS CHAR), CAST(new.packingSlipNumber AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','packingSlipNumber'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.packingSlipDate,0) != IFNULL(NEW.packingSlipDate,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Packing Date', CAST(OLD.packingSlipDate AS CHAR), CAST(new.packingSlipDate AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','packingSlipDate'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.invoiceNumber,0) != IFNULL(NEW.invoiceNumber,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Invoice#', CAST(OLD.invoiceNumber AS CHAR), CAST(new.invoiceNumber AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','invoiceNumber'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.invoiceDate,0) != IFNULL(NEW.invoiceDate,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Invoice Date', CAST(OLD.invoiceDate AS CHAR), CAST(new.invoiceDate AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','invoiceDate'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.creditMemoNumber,0) != IFNULL(NEW.creditMemoNumber,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Credit Memo#', CAST(OLD.creditMemoNumber AS CHAR), CAST(new.creditMemoNumber AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','creditMemoNumber'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.creditMemoDate,0) != IFNULL(NEW.creditMemoDate,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Credit Memo Date', CAST(OLD.creditMemoDate AS CHAR), CAST(new.creditMemoDate AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','creditMemoDate'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.debitMemoNumber,0) != IFNULL(NEW.debitMemoNumber,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Debit Memo#', CAST(OLD.debitMemoNumber AS CHAR), CAST(new.debitMemoNumber AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','debitMemoNumber'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.debitMemoDate,0) != IFNULL(NEW.debitMemoDate,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Debit Memo Date', CAST(OLD.debitMemoDate AS CHAR), CAST(new.debitMemoDate AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','debitMemoDate'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.receiptDate,0) != IFNULL(NEW.receiptDate,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), (CASE WHEN (new.receiptType = 'R' OR (new.receiptType = 'C' AND new.creditMemoType = 'RC')) THEN 'Ship By Date' ELSE 'Material Receipt Date' END),  \n" +
                "		CAST(OLD.receiptDate AS CHAR), CAST(new.receiptDate AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','receiptDate'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.`status`,0) != IFNULL(NEW.`status`,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR),  \n" +
                "		(  \n" +
                "			CASE  \n" +
                "				WHEN NEW.receiptType = 'P' THEN 'Packing Slip Status'  \n" +
                "				WHEN NEW.receiptType = 'R' THEN 'RMA Status'  \n" +
                "				ELSE 'Supplier Invoice Status'  \n" +
                "			END  \n" +
                "		),  \n" +
                "		CAST(  \n" +
                "			(  \n" +
                "				CASE  \n" +
                "					WHEN OLD.`status` = 'I' THEN 'Investigate'  \n" +
                "					WHEN OLD.`status` = 'W' THEN 'Waiting For Invoice'  \n" +
                "					WHEN OLD.`status` = 'IR' THEN 'Invoice Received'  \n" +
                "					WHEN OLD.`status` = 'A' THEN 'Approved To Pay'  \n" +
                "					WHEN OLD.`status` = 'P' THEN 'Paid'  \n" +
                "					WHEN OLD.`status` = 'PE' THEN 'Pending'  \n" +
                "					WHEN OLD.`status` = 'D' THEN 'Draft'  \n" +
                "					WHEN OLD.`status` = 'WS' THEN 'Waiting For Shipment'  \n" +
                "					WHEN OLD.`status` = 'WC' THEN 'Waiting For Credit Memo'  \n" +
                "					WHEN OLD.`status` = 'CR' THEN 'Credit Memo Received'  \n" +
                "                    WHEN OLD.`status` = 'PM' THEN 'Pending Management Approval'  \n" +
                "					ELSE NULL  \n" +
                "				END  \n" +
                "			) AS CHAR  \n" +
                "		),  \n" +
                "		CAST(  \n" +
                "			(  \n" +
                "				CASE  \n" +
                "					WHEN NEW.`status` = 'I' THEN 'Investigate'  \n" +
                "					WHEN NEW.`status` = 'W' THEN 'Waiting For Invoice'  \n" +
                "					WHEN NEW.`status` = 'IR' THEN 'Invoice Received'  \n" +
                "					WHEN NEW.`status` = 'A' THEN 'Approved To Pay'  \n" +
                "					WHEN NEW.`status` = 'P' THEN 'Paid'  \n" +
                "					WHEN NEW.`status` = 'PE' THEN 'Pending'  \n" +
                "					WHEN NEW.`status` = 'D' THEN 'Draft'  \n" +
                "					WHEN NEW.`status` = 'WS' THEN 'Waiting For Shipment'  \n" +
                "					WHEN NEW.`status` = 'WC' THEN 'Waiting For Credit Memo'  \n" +
                "					WHEN NEW.`status` = 'CR' THEN 'Credit Memo Received'  \n" +
                "                    WHEN NEW.`status` = 'PM' THEN 'Pending Management Approval'  \n" +
                "					ELSE NULL  \n" +
                "				END  \n" +
                "			) AS CHAR  \n" +
                "		),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId, 'varchar');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.packingSlipModeStatus,0) != IFNULL(NEW.packingSlipModeStatus,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR),  \n" +
                "		(  \n" +
                "			CASE  \n" +
                "				WHEN NEW.receiptType = 'P' THEN 'Packing Slip Posting Status'  \n" +
                "				WHEN NEW.receiptType = 'R' THEN 'RMA Posting Status'  \n" +
                "				ELSE 'Supplier Invoice Posting Status'  \n" +
                "			END  \n" +
                "		),  \n" +
                "		CAST(  \n" +
                "			(  \n" +
                "				CASE  \n" +
                "					WHEN OLD.packingSlipModeStatus = 'D' THEN 'Draft'  \n" +
                "					WHEN OLD.packingSlipModeStatus = 'P' THEN 'Publish'  \n" +
                "					WHEN OLD.packingSlipModeStatus = 'S' THEN 'Shipped'  \n" +
                "					ELSE NULL  \n" +
                "				END  \n" +
                "			) AS CHAR  \n" +
                "		),  \n" +
                "		CAST(  \n" +
                "			(  \n" +
                "				CASE  \n" +
                "					WHEN NEW.packingSlipModeStatus = 'D' THEN 'Draft'  \n" +
                "					WHEN NEW.packingSlipModeStatus = 'P' THEN 'Publish'  \n" +
                "					WHEN NEW.packingSlipModeStatus = 'S' THEN 'Shipped'  \n" +
                "					ELSE NULL  \n" +
                "				END  \n" +
                "			) AS CHAR  \n" +
                "		),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId, 'varchar');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.applyDate,0) != IFNULL(NEW.applyDate,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Apply Date', CAST(OLD.applyDate AS CHAR), CAST(new.applyDate AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','applyDate'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.invoiceTotalDue,0) != IFNULL(NEW.invoiceTotalDue,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR),  \n" +
                "		(  \n" +
                "			CASE  \n" +
                "				WHEN NEW.receiptType = 'I' THEN 'Invoice Total'  \n" +
                "				WHEN NEW.receiptType = 'C' THEN 'Credit Memo Total'  \n" +
                "				WHEN NEW.receiptType = 'D' THEN 'Debit Memo Total'  \n" +
                "				ELSE NULL  \n" +
                "			END  \n" +
                "		),  \n" +
                "		CAST(OLD.invoiceTotalDue AS CHAR), CAST(new.invoiceTotalDue AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        'amount');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.paymentTermsID,0) != IFNULL(NEW.paymentTermsID,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Payment Term', CAST(fun_getGenericCategoryNameByID(OLD.paymentTermsID) AS CHAR), CAST(fun_getGenericCategoryNameByID(new.paymentTermsID) AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        'varchar');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.remark,0) != IFNULL(NEW.remark,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR),  \n" +
                "		(  \n" +
                "			CASE  \n" +
                "				WHEN NEW.receiptType = 'R' THEN 'RMA Comment'  \n" +
                "				ELSE 'Comment'  \n" +
                "			END  \n" +
                "		), CAST(OLD.remark AS CHAR), CAST(new.remark AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','remark'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.internalRemark,0) != IFNULL(NEW.internalRemark,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR),  \n" +
                "		(  \n" +
                "			CASE  \n" +
                "				WHEN NEW.receiptType = 'R' THEN 'Internal RMA Comment'  \n" +
                "				ELSE 'PS Internal Comment'  \n" +
                "			END  \n" +
                "		), CAST(OLD.internalRemark AS CHAR), CAST(new.internalRemark AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','internalRemark'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.shippingMethodId,0) != IFNULL(NEW.shippingMethodId,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Shipping Method', CAST(fun_getGenericCategoryCodeNameByID(OLD.shippingMethodId) AS CHAR), CAST(fun_getGenericCategoryCodeNameByID(new.shippingMethodId) AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        'varchar');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.carrierID,0) != IFNULL(NEW.carrierID,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Carrier', CAST(fun_getGenericCategoryCodeNameByID(OLD.carrierID) AS CHAR), CAST(fun_getGenericCategoryCodeNameByID(new.carrierID) AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        'varchar');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.carrierAccountNumber,0) != IFNULL(NEW.carrierAccountNumber,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Carrier Account#', CAST(OLD.carrierAccountNumber AS CHAR), CAST(new.carrierAccountNumber AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','carrierAccountNumber'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.shippingInsurance ,0) != IFNULL(NEW.shippingInsurance ,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\",CAST(new.id AS CHAR),'Shipping With Insurance', CAST(CASE WHEN OLD.shippingInsurance = 0 THEN 'No' ELSE 'Yes' END AS CHAR), CAST(CASE WHEN NEW.shippingInsurance = 0 THEN 'No' ELSE 'Yes' END AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,  \n" +
                "		'varchar');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  /*address*/  \n" +
                "  \n" +
                "	IF IFNULL(OLD.billToAddress,0) != IFNULL(NEW.billToAddress,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Bill To', CAST(OLD.billToAddress AS CHAR), CAST(new.billToAddress AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','billToAddress'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.billToConactPerson,0) != IFNULL(NEW.billToConactPerson,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Bill To Contact Person', CAST(OLD.billToConactPerson AS CHAR), CAST(new.billToConactPerson AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','billToConactPerson'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.rmaShippingAddress,0) != IFNULL(NEW.rmaShippingAddress,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'RMA Ship To', CAST(OLD.rmaShippingAddress AS CHAR), CAST(new.rmaShippingAddress AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','rmaShippingAddress'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.rmaShippingContactPerson,0) != IFNULL(NEW.rmaShippingContactPerson,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'RMA Ship To Contact Person', OLD.rmaShippingContactPerson, new.rmaShippingContactPerson,  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','rmaShippingContactPerson'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.rmaMarkForAddress,0) != IFNULL(NEW.rmaMarkForAddress,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Mark For', CAST(OLD.rmaMarkForAddress AS CHAR), CAST(new.rmaMarkForAddress AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','rmaMarkForAddress'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.rmaMarkForContactPerson,0) != IFNULL(NEW.rmaMarkForContactPerson,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Mark For Contact Person', OLD.rmaMarkForContactPerson, new.rmaMarkForContactPerson,  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','rmaMarkForContactPerson'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  /*address*/  \n" +
                "  \n" +
                "    IF IFNULL(OLD.markedForRefund,0) != IFNULL(NEW.markedForRefund,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Marked for Refund',  \n" +
                "			case when OLD.markedForRefund = 1 then 'Yes' else 'No' end,  \n" +
                "            case when new.markedForRefund = 1 then 'Yes' else 'No' end,  \n" +
                "			fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId, 'varchar');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.markedForRefundAmt,0) != IFNULL(NEW.markedForRefundAmt,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Refund Amount ($)', CAST(OLD.markedForRefundAmt AS CHAR), CAST(new.markedForRefundAmt AS CHAR),  \n" +
                "			fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "            'amount');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  IF IFNULL(OLD.isCustConsigned, 0) != IFNULL(NEW.isCustConsigned, 0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES(\"PACKINGSLIPMATERIALRECEIVE\",CAST(new.id AS CHAR),'Packing Slip Customer Consigned (No Charge)',  CAST(CASE WHEN OLD.isCustConsigned=0 THEN 'No' ELSE 'Yes' END AS CHAR), CAST(CASE WHEN NEW.isCustConsigned=0 THEN 'No' ELSE 'Yes' END AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.CustomerID, 0) != IFNULL(NEW.CustomerID,0) THEN  \n" +
                "		SELECT fun_GetFormattedMfgCode(mfgCode, mfgName, vMfgCodeFormat) INTO vOldCustomer FROM mfgcodemst WHERE id=OLD.CustomerID;  \n" +
                "        SELECT fun_GetFormattedMfgCode(mfgCode, mfgName, vMfgCodeFormat) INTO vNewCustomer FROM mfgcodemst WHERE id=NEW.CustomerID;  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES(\"PACKINGSLIPMATERIALRECEIVE\",CAST(new.id AS CHAR),'Packing Slip Customer',  CAST(vOldCustomer AS CHAR), CAST(vNewCustomer AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  IF IFNULL(OLD.isNonUMIDStock, 0) != IFNULL(NEW.isNonUMIDStock, 0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES(\"PACKINGSLIPMATERIALRECEIVE\",CAST(new.id AS CHAR),'Packing Slip Do Not Create UMID Stock',  CAST(CASE WHEN OLD.isNonUMIDStock=0 THEN 'No' ELSE 'Yes' END AS CHAR), CAST(CASE WHEN NEW.isNonUMIDStock=0 THEN 'No' ELSE 'Yes' END AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 07-02-2022 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1292,'1.00','V1',' User Story 40715: [Main Branch] Supplier Invoice Management Approval status related changes - Jay '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1292:
            allDbChangesArray.push(
                /* **************************** New Script -> 07-02-2022  *********************************** */
                "DROP procedure IF EXISTS `Sproc_CreateAssemblyRevision`;  \n" +
                "CREATE PROCEDURE `Sproc_CreateAssemblyRevision`(  \n" +
                "	IN pFromPartID INT,  \n" +
                "    IN pNewEpicorType varchar(50),  \n" +
                "    IN pNewAssemblyType INT,  \n" +
                "    IN pNewMfgcodeID INT,  \n" +
                "    IN pNewCustAssyPN varchar(500),  \n" +
                "    IN pNewPartRev varchar(50),  \n" +
                "    IN pNewMfgPN varchar(100),  \n" +
                "    IN pNewAssyCode varchar(50),  \n" +
                "    IN pNewNickName varchar(50),  \n" +
                "    IN pNewPIDCode varchar(109),  \n" +
                "    IN pIsCPN tinyint,  \n" +
                "    IN pIsCustom tinyInt,  \n" +
                "    IN pUserID Int,  \n" +
                "    IN pUserRoleId Int,  \n" +
                "    IN pIsAttribute tinyint,  \n" +
                "    IN pIsSettings tinyint,  \n" +
                "    IN pIsAdditionalAttibute tinyint,  \n" +
                "    IN pIsPackagingDetail tinyint,  \n" +
                "    IN pIsStandards tinyint,  \n" +
                "    IN pIsRequiredFunctionalType tinyint,  \n" +
                "    IN pIsRequiredMountingType tinyint,  \n" +
                "    IN pIsPackagingAliasPart tinyint,  \n" +
                "    IN pIsOtherPartName tinyint,  \n" +
                "    IN pIsAlternatePart tinyint,  \n" +
                "    IN pIsRoHSReplacementPart tinyint,  \n" +
                "    IN pIsDriveTool tinyint,  \n" +
                "    IN pIsProcessMaterial tinyint,  \n" +
                "    IN pIsRequiredMattingParts tinyint,  \n" +
                "    IN pIsPickupPad tinyint,  \n" +
                "    IN pIsFunctionalTesingTool tinyint,  \n" +
                "    IN pIsFinctionalRestingEquipment tinyint,  \n" +
                "    IN pIsBOM tinyint,  \n" +
                "    IN pIsComments tinyInt,  \n" +
                "    IN pIsCopyImages tinyInt,  \n" +
                "    IN pIsCopyDatasheet tinyInt,  \n" +
                "    IN pIsCopyDocument tinyInt,  \n" +
                "    IN pIsOperationalAttirbutes tinyInt,  \n" +
                "    IN pIsAcceptableShippinCountry tinyInt,  \n" +
                "    IN pIsTrackSNumber tinyInt,  \n" +
                "    IN pMfgPNDescription varchar(2000),  \n" +
                "    IN pDetailDescription varchar(2000),  \n" +
                "    IN pInternalReference varchar(50),  \n" +
                "    IN pRoHSStatusID int,  \n" +
                "    IN pIsFluxNotApplicable tinyInt,  \n" +
                "    IN pIsWaterSoluble tinyInt,  \n" +
                "    IN pIsNoClean tinyInt,  \n" +
                "    IN pSpecialNote varchar(2000),  \n" +
                "    IN pRohsDeviation int,  \n" +
                "    IN pFunctionalTypeID int,  \n" +
                "    IN pMountingTypeID int  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "DECLARE vValidationPassed tinyint;  \n" +
                "DECLARE vFromPartCategory tinyint;  \n" +
                "DECLARE vFromMfgType varchar(5);  \n" +
                "DECLARE vIsCPN tinyint;  \n" +
                "DECLARE vCount INT;  \n" +
                "DECLARE vToPartID INT;  \n" +
                "DECLARE vUserRoleId INT;  \n" +
                "DECLARE vMisMatchFields longtext;  \n" +
                "DECLARE vSerialNumber varchar(20);  \n" +
                "DECLARE vMessage varchar(200);  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempFromComponentDetail;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempToComponentDetail;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempComponentAlternateValidationDetail;  \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE tempFromComponentDetail  \n" +
                "    select * from component where 1 = 2;  \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE tempToComponentDetail  \n" +
                "    select * from component where 1 = 2;  \n" +
                "  \n" +
                "    CREATE TEMPORARY TABLE tempComponentAlternateValidationDetail  \n" +
                "    select * from component_alternatepn_validations where 1 = 2;  \n" +
                "  \n" +
                "	set vValidationPassed = 1; #1 passed, 0 failed  \n" +
                "  	set vCount = 0;  \n" +
                "    select co.category, m.mfgType, count(co.id), co.isCPN  \n" +
                "      into vFromPartCategory, vFromMfgType, vCount, vIsCPN  \n" +
                "	  from component co  \n" +
                "	  join mfgcodemst m on m.id = co.mfgcodeID  \n" +
                "	 where co.id = pFromPartID and co.isDeleted = 0  \n" +
                "     group by co.category, m.mfgType, co.id, co.isCPN  ;  \n" +
                "  \n" +
                "	if vCount = 0 then  \n" +
                "		set vValidationPassed = 0;  \n" +
                "		select 'PART_NOT_FOUND' as message;  \n" +
                "	end if;  \n" +
                "  \n" +
                "	if vFromMfgType = 'DIST' then /*in case of supplier part must follow mfr part attributes*/  \n" +
                "		set pIsAttribute = 1;  \n" +
                "        set pIsAdditionalAttibute = 1;  \n" +
                "    end if;  \n" +
                "  \n" +
                "	set vCount = 0;  \n" +
                "    if (vFromPartCategory = 3) then # check category  \n" +
                "	   select count(1) into vCount  \n" +
                "		 from component co  \n" +
                "		where co.mfgcodeID = pNewMfgcodeID  \n" +
                "          and co.category = 3  \n" +
                "		  and co.custAssyPN = pNewCustAssyPN  \n" +
                "		  and co.rev = pNewPartRev  \n" +
                "          and co.isDeleted = 0  \n" +
                "		  and co.deletedAt is null  \n" +
                "	  group by co.mfgcodeID,co.category,co.custAssyPN,co.rev;  \n" +
                "		if vCount > 0 then  \n" +
                "			set vValidationPassed = 0;  \n" +
                "            select 'DUPLICATE_REV' as message;  \n" +
                "        end if;  \n" +
                "  \n" +
                "         set vCount = 0;  \n" +
                "		 select count(1) into vCount  \n" +
                "			 from component co  \n" +
                "			where co.nickName != pNewNickName  \n" +
                "              and co.category = 3  \n" +
                "              and co.custAssyPN = pNewCustAssyPN  \n" +
                "              and co.mfgcodeID = pNewMfgcodeID  \n" +
                "			  and co.isDeleted = 0  \n" +
                "			  and co.deletedAt is null  \n" +
                "              group by co.category,co.custAssyPN,co.mfgcodeID;  \n" +
                "		  if vCount > 0 then  \n" +
                "			set vValidationPassed = 0;  \n" +
                "				select 'NICKNAME_MISMATCH_VALIDATION' as message,  \n" +
                "						concat('(',m.mfgCode,') ',m.mfgName) mfrName,  \n" +
                "                        co.id, co.mfgPN, co.custAssyPN, co.rev, co.nickName  \n" +
                "				 from component co  \n" +
                "                 join mfgcodemst m ON m.id = co.mfgcodeID  \n" +
                "				where co.nickName != pNewNickName  \n" +
                "				  and co.category = 3  \n" +
                "				  and co.custAssyPN = pNewCustAssyPN  \n" +
                "				  and co.mfgcodeID = pNewMfgcodeID  \n" +
                "				  and co.isDeleted = 0  \n" +
                "				  and co.deletedAt is null ;  \n" +
                "				 -- limit 1;  \n" +
                "		  end if;  \n" +
                "  \n" +
                "		set vCount = 0;  \n" +
                "		 select count(1) into vCount  \n" +
                "			 from component co  \n" +
                "			where co.nickName = pNewNickName  \n" +
                "              and co.category = 3  \n" +
                "              and co.custAssyPN != pNewCustAssyPN  \n" +
                "              and co.mfgcodeID = pNewMfgcodeID  \n" +
                "			  and co.isDeleted = 0  \n" +
                "			  and co.deletedAt is null  \n" +
                "			group by co.nickName,co.category,co.mfgcodeID;  \n" +
                "		 if vCount > 0 then  \n" +
                "			set vValidationPassed = 0;  \n" +
                "				select 'DUPLICATE_NICKNAME' as message,  \n" +
                "                        co.id, co.mfgPN, co.custAssyPN, co.rev, co.nickName  \n" +
                "				 from component co  \n" +
                "				where co.nickName = pNewNickName  \n" +
                "				  and co.category = 3  \n" +
                "				  and co.custAssyPN != pNewCustAssyPN  \n" +
                "				  and co.mfgcodeID = pNewMfgcodeID  \n" +
                "				  and co.isDeleted = 0  \n" +
                "				  and co.deletedAt is null  ;  \n" +
                "		  end if;  \n" +
                "	end if;  \n" +
                "  \n" +
                "    set vCount = 0;  \n" +
                "		select count(1) into vCount  \n" +
                "		 from component co  \n" +
                "		where co.mfgcodeID = pNewMfgcodeID  \n" +
                "		  and co.mfgPN = pNewMfgPN  \n" +
                "          and co.isDeleted = 0  \n" +
                "		  and co.deletedAt is null  \n" +
                "	  group by co.mfgcodeID,co.mfgPN;  \n" +
                "	 if vCount > 0 then  \n" +
                "		set vValidationPassed = 0;  \n" +
                "        select 'DUPLICATE_MFGPN' as message;  \n" +
                "     end if;  \n" +
                "  \n" +
                "    set vCount = 0;  \n" +
                "		select count(1) into vCount  \n" +
                "		 from component co  \n" +
                "		where co.PIDCode = pNewPIDCode  \n" +
                "		  and co.isDeleted = 0  \n" +
                "		  and co.deletedAt is null  \n" +
                "          group by co.PIDCode;  \n" +
                "    if vCount > 0 then  \n" +
                "		set vValidationPassed = 0;  \n" +
                "        select 'DUPLICATE_PID' as message;  \n" +
                "	end if;  \n" +
                "  \n" +
                "    if vValidationPassed = 1 then /*if above validations passed then only generate new serial number*/  \n" +
                "		call Sproc_GenerateIncrementalNumber(case when vFromMfgType = 'MFG' then  \n" +
                "													'MPNSystemID'  \n" +
                "												else 'SPNSystemID' end,  \n" +
                "											 true);  \n" +
                "		  select systemID, message into vSerialNumber, vMessage  \n" +
                "		  from temp_serialNumber;  \n" +
                "        if vMessage is not null and vMessage != '' then  \n" +
                "			set vValidationPassed = 0;  \n" +
                "			select vMessage as message;  \n" +
                "		end if;  \n" +
                "	end if;  \n" +
                "  \n" +
                "	if vValidationPassed = 1 then  #1 passed, 0 failed  \n" +
                "		-- START TRANSACTION;  \n" +
                "		insert into component(  \n" +
                "				isCustom, isCPN, rfqOnly, isGoodPart, partType, category, epicorType, mfgcodeID,  \n" +
                "				custAssyPN, rev, mfgPN, assyCode, nickName, PIDCode, costCategoryID,imageURL, dataSheetLink,  \n" +
                "				mfgPNDescription, specialNote, purchasingComment, uomClassID, uom, unit,  \n" +
                "                functionalCategoryID,  \n" +
                "                mountingTypeID,  \n" +
                "                operatingTemp,				minOperatingTemp,				maxOperatingTemp,  \n" +
                "				temperatureCoefficient,				temperatureCoefficientValue,				temperatureCoefficientUnit,				connecterTypeID,  \n" +
                "				noOfPosition,				noOfRows,  \n" +
                "				pitch,				pitchMating,				sizeDimension,				length,				width,				heightText,				height,  \n" +
                "				partStatus, leadTime, serialNumber, RoHSStatusID,  \n" +
                "				rohsDeviation, mslID, packagingWeight, packagingWeightUom, grossWeight, grossWeightUom,  \n" +
                "				countryOfOrigin, htsCode, createdBy, createByRoleId,  \n" +
                "				updatedBy,updateByRoleId, isDeleted,assemblyType,detailDescription,  \n" +
                "				refMfgPNMfgCodeId, refSupplierMfgpnComponentID, isFluxNotApplicable,isWaterSoluble,isNoClean,isCloudApiUpdateAttribute,restrictPackagingUsePermanently,  \n" +
                "				restrictPackagingUseWithpermission,umidVerificationRequire,isAutoVerificationOfAllAssemblyParts,isHazmatMaterial,trackSerialNumber,requiredTestTime,  \n" +
                "                mountingTypePartRequired,functionalTypePartRequired,driverToolRequired,matingPartRquired,pickupPadRequired,functionalTestingRequired,internalReference, mfgType, isEpoxyMount,  \n" +
                "                scrapValuePerBuild,				scrapRatePercentagePerBuild,				plannedValuePerBuild,				plannedOverRunPercentagePerBuild,				selfLifeDays,  \n" +
                "				shelfLifeAcceptanceDays,				shelfListDaysThresholdPercentage,				maxShelfLifeAcceptanceDays,				maxShelfListDaysThresholdPercentage,  \n" +
                "				shelfLifeDateType,				maxPriceLimit,				maxQtyonHand,				saftyStock,				eau,				businessRisk,				programingRequired,  \n" +
                "                restrictUSEwithpermission,                bomLock,                restrictUsePermanently,  \n" +
                "                tolerance,				voltage,				value,				powerRating,  \n" +
                "				weight,				feature,				color,  \n" +
                "                deviceMarking,				packagingID,  \n" +
                "				minimum,				mult,				packageQty,				umidSPQ,  \n" +
                "                pcbPerArray,                IsReceiveBulkItem)  \n" +
                "		select pIsCustom, pIsCPN, rfqOnly, isGoodPart, partType, category, pNewEpicorType, pNewMfgcodeID,  \n" +
                "				pNewCustAssyPN, pNewPartRev/*rev*/, pNewMfgPN/*mfgPN*/, pNewAssyCode, pNewNickName, pNewPIDCode, costCategoryID,imageURL, dataSheetLink,  \n" +
                "				pMfgPNDescription, pSpecialNote, purchasingComment, uomClassID, uom, unit,  \n" +
                "                pFunctionalTypeID,  \n" +
                "                pMountingTypeID,  \n" +
                "                /* Copy in case Attribute  checked*/  \n" +
                "                (CASE WHEN (pIsAttribute = 1) THEN  operatingTemp ELSE null END),  \n" +
                "                (CASE WHEN (pIsAttribute = 1) THEN  minOperatingTemp ELSE null END),  \n" +
                "                (CASE WHEN (pIsAttribute = 1) THEN  maxOperatingTemp ELSE null END),  \n" +
                "                (CASE WHEN (pIsAttribute = 1) THEN  temperatureCoefficient ELSE null END),  \n" +
                "                (CASE WHEN (pIsAttribute = 1) THEN  temperatureCoefficientValue ELSE null END),  \n" +
                "                (CASE WHEN (pIsAttribute = 1) THEN  temperatureCoefficientUnit ELSE null END),  \n" +
                "                (CASE WHEN (pIsAttribute = 1) THEN  connecterTypeID ELSE null END),  \n" +
                "                (CASE WHEN (pIsAttribute = 1) THEN  noOfPosition ELSE null END),  \n" +
                "                (CASE WHEN (pIsAttribute = 1) THEN  noOfRows ELSE null END),  \n" +
                "                (CASE WHEN (pIsAttribute = 1) THEN  pitch ELSE null END),  \n" +
                "                (CASE WHEN (pIsAttribute = 1) THEN  pitchMating ELSE null END),  \n" +
                "                (CASE WHEN (pIsAttribute = 1) THEN  sizeDimension ELSE null END),  \n" +
                "                (CASE WHEN (pIsAttribute = 1) THEN  length ELSE null END),  \n" +
                "                (CASE WHEN (pIsAttribute = 1) THEN  width ELSE null END),  \n" +
                "                (CASE WHEN (pIsAttribute = 1) THEN  heightText ELSE null END),  \n" +
                "                (CASE WHEN (pIsAttribute = 1) THEN  height ELSE null END),  \n" +
                "  \n" +
                "				partStatus,  leadTime, vSerialNumber/*serialNumber*/, pRoHSStatusID,  \n" +
                "				pRohsDeviation, mslID, packagingWeight, packagingWeightUom, grossWeight, grossWeightUom,  \n" +
                "				countryOfOrigin, htsCode, pUserID/*createdBy*/, pUserRoleId/*createByRoleId*/,  \n" +
                "				pUserID/*updatedBy*/,pUserRoleId/*updateByRoleId*/, false /*isDeleted*/,pNewAssemblyType,pDetailDescription,  \n" +
                "				refMfgPNMfgCodeId, refSupplierMfgpnComponentID,  \n" +
                "                pIsFluxNotApplicable,  \n" +
                "                pIsWaterSoluble,  \n" +
                "                pIsNoClean,  \n" +
                "				(CASE WHEN (pIsCustom = 1) THEN 0 ELSE isCloudApiUpdateAttribute END),restrictPackagingUsePermanently,  \n" +
                "				restrictPackagingUseWithpermission,umidVerificationRequire ,isAutoVerificationOfAllAssemblyParts,isHazmatMaterial,  \n" +
                "                (CASE WHEN (pIsTrackSNumber = 1) THEN trackSerialNumber ELSE 0 END),  \n" +
                "                (CASE WHEN (pIsFunctionalTesingTool = 1  and pIsCPN = 0) THEN requiredTestTime ELSE null END),  \n" +
                "                (CASE WHEN (pIsRequiredMountingType = 1) THEN mountingTypePartRequired ELSE 0 END),  \n" +
                "                (CASE WHEN (pIsRequiredFunctionalType = 1) THEN functionalTypePartRequired ELSE 0 END),  \n" +
                "                (CASE WHEN (pIsDriveTool = 1 and pIsCPN = 0) THEN driverToolRequired ELSE 0 END),  \n" +
                "                (CASE WHEN (pIsRequiredMattingParts = 1  and pIsCPN = 0) THEN matingPartRquired ELSE 0 END),  \n" +
                "                (CASE WHEN (pIsPickupPad = 1  and pIsCPN = 0) THEN pickupPadRequired ELSE 0 END),  \n" +
                "                (CASE WHEN (pIsFunctionalTesingTool = 1  and pIsCPN = 0) THEN functionalTestingRequired ELSE 0 END),  \n" +
                "                pInternalReference,  \n" +
                "                mfgType,isEpoxyMount,  \n" +
                "  \n" +
                "                /* Copy in case Settings checked*/  \n" +
                "                (CASE WHEN (pIsSettings = 1) THEN  scrapValuePerBuild ELSE null END),  \n" +
                "                (CASE WHEN (pIsSettings = 1) THEN  scrapRatePercentagePerBuild ELSE null END),  \n" +
                "                (CASE WHEN (pIsSettings = 1) THEN  plannedValuePerBuild ELSE null END),  \n" +
                "                (CASE WHEN (pIsSettings = 1) THEN  plannedOverRunPercentagePerBuild ELSE null END),  \n" +
                "                (CASE WHEN (pIsSettings = 1) THEN  selfLifeDays ELSE null END),  \n" +
                "                (CASE WHEN (pIsSettings = 1) THEN  shelfLifeAcceptanceDays ELSE null END),  \n" +
                "                (CASE WHEN (pIsSettings = 1) THEN  shelfListDaysThresholdPercentage ELSE null END),  \n" +
                "                (CASE WHEN (pIsSettings = 1) THEN  maxShelfLifeAcceptanceDays ELSE null END),  \n" +
                "                (CASE WHEN (pIsSettings = 1) THEN  maxShelfListDaysThresholdPercentage ELSE null END),  \n" +
                "                (CASE WHEN (pIsSettings = 1) THEN  shelfLifeDateType ELSE null END),  \n" +
                "                (CASE WHEN (pIsSettings = 1) THEN  maxPriceLimit ELSE null END),  \n" +
                "                (CASE WHEN (pIsSettings = 1) THEN  maxQtyonHand ELSE null END),  \n" +
                "                (CASE WHEN (pIsSettings = 1) THEN  saftyStock ELSE null END),  \n" +
                "                (CASE WHEN (pIsSettings = 1) THEN  eau ELSE null END),  \n" +
                "                (CASE WHEN (pIsSettings = 1) THEN  businessRisk ELSE null END),  \n" +
                "                (CASE WHEN (pIsSettings = 1) THEN  programingRequired ELSE 0 END),  \n" +
                "                (CASE WHEN (pIsSettings = 1 and pIsCPN = 0) THEN  restrictUSEwithpermission ELSE 0 END),  \n" +
                "                (CASE WHEN (pIsSettings = 1) THEN  bomLock ELSE 0 END),  \n" +
                "                (CASE WHEN (pIsSettings = 1 and pIsCPN = 0) THEN  restrictUsePermanently ELSE 0 END),  \n" +
                "  \n" +
                "                /* Copy in case Additional Attribute checked*/  \n" +
                "                (CASE WHEN (pIsAdditionalAttibute = 1) THEN  tolerance ELSE null END),  \n" +
                "                (CASE WHEN (pIsAdditionalAttibute = 1) THEN  voltage ELSE null END),  \n" +
                "                (CASE WHEN (pIsAdditionalAttibute = 1) THEN  `value` ELSE null END),  \n" +
                "                (CASE WHEN (pIsAdditionalAttibute = 1) THEN  powerRating ELSE null END),  \n" +
                "                (CASE WHEN (pIsAdditionalAttibute = 1) THEN  weight ELSE null END),  \n" +
                "                (CASE WHEN (pIsAdditionalAttibute = 1) THEN  feature ELSE null END),  \n" +
                "                (CASE WHEN (pIsAdditionalAttibute = 1) THEN  color ELSE null END),  \n" +
                "  \n" +
                "                /* Copy in case Packaging Detail checked*/  \n" +
                "                (CASE WHEN (pIsPackagingDetail = 1) THEN  deviceMarking ELSE null END),  \n" +
                "                (CASE WHEN (pIsPackagingDetail = 1) THEN  packagingID ELSE null END),  \n" +
                "                (CASE WHEN (pIsPackagingDetail = 1) THEN  minimum ELSE null END),  \n" +
                "                (CASE WHEN (pIsPackagingDetail = 1) THEN  mult ELSE null END),  \n" +
                "                (CASE WHEN (pIsPackagingDetail = 1) THEN  packageQty ELSE null END),  \n" +
                "                (CASE WHEN (pIsPackagingDetail = 1) THEN  umidSPQ ELSE null END),  \n" +
                "                (CASE WHEN (pIsPackagingDetail = 1) THEN  pcbPerArray ELSE null END),  \n" +
                "                (CASE WHEN (pIsPackagingDetail = 1) THEN  IsReceiveBulkItem ELSE null END)  \n" +
                "		 from component  \n" +
                "		where id = pFromPartID;  \n" +
                "		set vToPartID = LAST_INSERT_ID();  \n" +
                "  \n" +
                "		IF(vValidationPassed = 1)  \n" +
                "		THEN  \n" +
                "			 set vMessage = '';  \n" +
                "			 CALL Sproc_CopyPartDetailOnCopyAndDuplicatePart(pFromPartID,vToPartID,pUserID,vIsCPN,pIsCPN,vFromPartCategory,pIsStandards,pIsRequiredFunctionalType,pIsRequiredMountingType,pIsPackagingAliasPart,pIsOtherPartName  \n" +
                "				,pIsAlternatePart,pIsRoHSReplacementPart,pIsDriveTool,pIsProcessMaterial,pIsRequiredMattingParts,pIsPickupPad,pIsFunctionalTesingTool,pIsFinctionalRestingEquipment, vMisMatchFields, vMessage);  \n" +
                "  \n" +
                "            IF(vMessage != '')  \n" +
                "			THEN  \n" +
                "				select vMessage as message,vMisMatchFields as misMatchFields;  \n" +
                "			ELSE  \n" +
                "				IF pIsSettings then  \n" +
                "					INSERT INTO `component_temperature_sensitive_data`  \n" +
                "					(`pickTemperatureAbove`,`timeLiquidusSecond`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`)  \n" +
                "					select `pickTemperatureAbove`,`timeLiquidusSecond`, current_timestamp() `createdAt`, pUserID  `createdBy`, current_timestamp() `updatedAt`, pUserID `updatedBy`, vToPartID `refComponentID`  \n" +
                "					from component_temperature_sensitive_data where refComponentID = pFromPartID and isDeleted = 0 and deletedAt is null;  \n" +
                "				end if;  \n" +
                "  \n" +
                "				IF pIsAcceptableShippinCountry then  \n" +
                "					INSERT INTO component_acceptable_shipping_countries  \n" +
                "						(refComponentID,countryID,createdAt,createdBy,createByRoleId)  \n" +
                "					SELECT  \n" +
                "						vToPartID,countryID,current_timestamp(),pUserID,pUserRoleId  \n" +
                "					FROM  \n" +
                "						component_acceptable_shipping_countries where refComponentID= pFromPartID and isDeleted = 0;  \n" +
                "				end if;  \n" +
                "  \n" +
                "				if (vFromPartCategory = 3) then  \n" +
                "					if pIsBOM then  \n" +
                "						CALL Sproc_CopyAssyBOMQuote_WitoutTransaction(pFromPartID, vToPartID, pUserID, true, null, null, null, null, null, null, null, null, pUserRoleId);  \n" +
                "					end if;  \n" +
                "					call Sproc_CreatePartAssyBomRelationship(vToPartID, pUserID);  \n" +
                "				end if;  \n" +
                "				if(pIsComments = 1) THEN  \n" +
                "						INSERT INTO componenet_inspection_requirement_det  \n" +
                "								(`partId`,`inspectionRequirementId`,`createdBy`,`createdAt`,`createByRoleId`,`category`)  \n" +
                "						select vToPartID,inspectionRequirementId,pUserID,current_timestamp(),  \n" +
                "						pUserRoleId,category from componenet_inspection_requirement_det where partId = pFromPartID;  \n" +
                "						INSERT INTO assembly_revision_comments  \n" +
                "							(`commentBy`,`comment`,`createdBy`,`createdAt`,`partID`,`createByRoleId`)  \n" +
                "						select `commentBy`,`comment`,pUserID,current_timestamp(),vToPartID,pUserRoleId from assembly_revision_comments where  \n" +
                "							partID = pFromPartID;  \n" +
                "				END IF;  \n" +
                "  \n" +
                "				CALL Sproc_getRefTransDetailForDocument('component',vToPartID,false);  \n" +
                "				IF pIsCopyImages  then  \n" +
                "					insert into component_images  \n" +
                "							(imageURL, refComponentID, createdBy,createdAt, createByRoleId)  \n" +
                "					select imageURL, vToPartID,pUserID, current_timestamp(), pUserRoleId  \n" +
                "					 from component_images  \n" +
                "					where refComponentID = pFromPartID and isDeleted = false;  \n" +
                "				end if;  \n" +
                "				IF pIsCopyDatasheet  then  \n" +
                "					insert into component_datasheets  \n" +
                "							(datasheetURL, refComponentID, createdBy,createdAt, createByRoleId)  \n" +
                "					select datasheetURL, vToPartID,pUserID ,current_timestamp(), pUserRoleId  \n" +
                "					from component_datasheets  \n" +
                "						where refComponentID = pFromPartID and isDeleted = false;  \n" +
                "				end if;  \n" +
                "				IF pIsOperationalAttirbutes  then  \n" +
                "					INSERT INTO component_dynamic_attribute_mapping_part  \n" +
                "						(mfgPNID,attributeID,attributeValue,createdAt,createdBy,createByRoleId)  \n" +
                "					SELECT  \n" +
                "						vToPartID,attributeID,attributeValue,current_timestamp(),pUserID,pUserRoleId  \n" +
                "					FROM  \n" +
                "					component_dynamic_attribute_mapping_part where mfgPNID= pFromPartID and isDeleted = 0;  \n" +
                "				end if;  \n" +
                "				IF pIsCopyDocument then  \n" +
                "					# [S] - copy document_folder from selected part/assembly level to new part  \n" +
                "					INSERT INTO generic_folder  \n" +
                "							(`gencFolderName`,`refTransID`,`entityID`,`gencFileOwnerType`,`roleId`,`refParentId`,  \n" +
                "							`isDeleted`,`createdAt`,`createdBy`,`copyGencFolderID`,`refCopyTransID`,`refCopyGencFileOwnerType`,`createByRoleId`)  \n" +
                "					SELECT  a.gencFolderName, vToPartID refTransID, '-9' , 'component' gencFileOwnerType, a.roleId, a.refParentId,  \n" +
                "							0 isDeleted, fun_DatetimetoUTCDateTime() createdAt, pUserID createdBy, a.gencFolderID copyGencFolderID ,  \n" +
                "							a.refTransID refCopyTransID, a.gencFileOwnerType refCopyGencFileOwnerType,pUserRoleId  \n" +
                "					FROM generic_folder a  \n" +
                "					WHERE a.refTransID = pFromPartID  \n" +
                "					AND a.gencFileOwnerType = 'component' AND entityID = -9  AND a.isRecycle = 0 AND a.isDeleted = 0;  \n" +
                "  \n" +
                "					UPDATE generic_folder gf1,  \n" +
                "					(   SELECT a.gencFolderID, a.copyGencFolderID  \n" +
                "						FROM generic_folder a WHERE a.refTransID = vToPartID  \n" +
                "						AND a.gencFileOwnerType = 'component' AND entityID = -9 AND a.isRecycle = 0 AND a.isDeleted = 0  \n" +
                "					) gf2  \n" +
                "					SET gf1.refParentId = gf2.gencFolderID  \n" +
                "					WHERE gf1.refParentId = gf2.copyGencFolderID  \n" +
                "					AND gf1.refTransID = vToPartID  \n" +
                "					AND gf1.gencFileOwnerType = 'component' AND entityID = -9 AND gf1.isRecycle = 0 AND gf1.isDeleted = 0;  \n" +
                "					# [E] - copy generic_folder from selected part/assembly level to new part  \n" +
                "  \n" +
                "					INSERT INTO genericfiles  \n" +
                "						(gencFileName,gencOriginalName,gencFileDescription,gencFileExtension,gencFileType,tags,isDefault,refTransID,  \n" +
                "						entityID,gencFileOwnerType,isActive,genFilePath,createdAt,createdBy,isShared,fileGroupBy,refParentId,fileSize,  \n" +
                "						refCopyTransID,refCopyGencFileOwnerType,createByRoleId)  \n" +
                "					select gencFileName,gencOriginalName,gencFileDescription,gencFileExtension,gencFileType,tags,isDefault,vToPartID,  \n" +
                "						entityID,gencFileOwnerType,isActive,genFilePath,current_timestamp(),pUserID,isShared,fileGroupBy,refParentId,fileSize,  \n" +
                "						pFromPartID,refCopyGencFileOwnerType,pUserRoleId  \n" +
                "					from genericfiles where refTransID = pFromPartID and entityID = -9 and isRecycle = 0 and isDeleted = 0;  \n" +
                "  \n" +
                "					UPDATE genericfiles gf1,  \n" +
                "					(   SELECT a.gencFolderID, a.copyGencFolderID  \n" +
                "						FROM generic_folder a WHERE a.refTransID = vToPartID  \n" +
                "						AND a.gencFileOwnerType = 'component' AND entityID = -9 AND a.isRecycle = 0 AND a.isDeleted = 0  \n" +
                "					) gf2  \n" +
                "					SET gf1.refParentId = gf2.gencFolderID  \n" +
                "					WHERE gf1.refParentId = gf2.copyGencFolderID  \n" +
                "					AND gf1.refTransID = vToPartID  \n" +
                "					AND gf1.gencFileOwnerType = 'component' AND entityID = -9 AND gf1.isRecycle = 0 AND gf1.isDeleted = 0;  \n" +
                "				end if;  \n" +
                "  \n" +
                "				set @documentPathOfFromPart = (select documentPath from component where id = pFromPartID);  \n" +
                "				IF(@documentPathOfFromPart is null)  \n" +
                "				THEN  \n" +
                "					CALL Sproc_getRefTransDetailForDocument('component',pFromPartID,false);  \n" +
                "				END IF;  \n" +
                "				select *,(select documentPath from component where id = pFromPartID) documentPathOfFromPart from component where id = vToPartID;  \n" +
                "			END IF;  \n" +
                "		END IF;  \n" +
                "	end if;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version ->  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1293,'1.00','V1',' User Story 40861: [Main Branch] - Improvement point for Create Duplicate Part - SHUBHAM '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1293:
            allDbChangesArray.push(
                /* **************************** New Script -> 07-02-2022  *********************************** */
                "DROP procedure IF EXISTS `Sproc_RetrieveSupplierInvoicePayment`;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveSupplierInvoicePayment`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pSupplierIDs VARCHAR(16383),  \n" +
                "	IN pPaymentMethodIDs VARCHAR(16383),  \n" +
                "	IN pBankAccountCodeIDs VARCHAR(16383),  \n" +
                "    IN pTransactionModeIDs VARCHAR(16383),  \n" +
                "    IN pExactPaymentNumberSearch TINYINT,  \n" +
                "	IN pPaymentNumber VARCHAR(50),  \n" +
                "    IN pInvoiceNumber VARCHAR(50),  \n" +
                "	IN pExactPaymentAmountSearch TINYINT,  \n" +
                "	IN pAmount VARCHAR(50),  \n" +
                "	IN pFromDate DATE,  \n" +
                "	IN pToDate DATE,  \n" +
                "    IN pRefPaymentMode VARCHAR(2),  \n" +
                "    IN pLockStatusFilter VARCHAR(50),  \n" +
                "    IN pSelectedDateType VARCHAR(10),  \n" +
                "    IN pPaymentComments VARCHAR(1000)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;  \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "	DECLARE v_InvoiceNumberWhereClause VARCHAR(500);  \n" +
                "    DECLARE v_mfgNameFormat VARCHAR(100);  \n" +
                "  \n" +
                "    SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
                "    select fun_getMFGCodeNameFormat() into v_mfgNameFormat;  \n" +
                "  \n" +
                "	SET v_InvoiceNumberWhereClause= '';  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "  		SET pWhereClause = '1=1' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pSupplierIDs IS NOT NULL AND pSupplierIDs != '' ) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND mfgcodeID in (',pSupplierIDs,')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pPaymentMethodIDs IS NOT NULL AND pPaymentMethodIDs != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND paymentType in (',pPaymentMethodIDs,')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pBankAccountCodeIDs IS NOT NULL AND pBankAccountCodeIDs != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND bankAccountMasID in (',pBankAccountCodeIDs,')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pTransactionModeIDs IS NOT NULL AND pTransactionModeIDs != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND refGencTransModeID in (',pTransactionModeIDs,')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pPaymentNumber IS NOT NULL) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND paymentNumber ',CASE WHEN pExactPaymentNumberSearch = TRUE THEN CONCAT(\" = '\", pPaymentNumber ,\"' \") ELSE CONCAT(\" like '%\", pPaymentNumber, \"%' \") END,' ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF(pPaymentComments IS NOT NULL AND pPaymentComments != '')THEN  \n" +
                "    	SET pWhereClause = CONCAT(pWhereClause,\" AND remark LIKE '%\",pPaymentComments,\"%'\");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF(pLockStatusFilter IS NOT NULL)THEN  \n" +
                "    	SET pWhereClause = CONCAT(pWhereClause,\" AND lockStatus = '\", pLockStatusFilter ,\"'\");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pInvoiceNumber IS NOT NULL) THEN  \n" +
                "		SET v_InvoiceNumberWhereClause = CONCAT(v_InvoiceNumberWhereClause,' AND  \n" +
                "			EXISTS (select 1  \n" +
                "					   from packing_slip_material_receive psd  \n" +
                "					   join packingslip_invoice_payment_det pdet on pdet.refPackingslipInvoiceID = psd.id  \n" +
                "					  where psd.isDeleted = 0  \n" +
                "						and pdet.refPayementid = inv.id  \n" +
                "						AND (', CASE WHEN pRefPaymentMode = 'P' THEN  CONCAT(\"psd.invoiceNumber = '\",pInvoiceNumber,\"'\") ELSE  CONCAT(\"psd.creditMemoNumber = '\",pInvoiceNumber,\"' or psd.debitMemoNumber= '\",pInvoiceNumber,\"'\") END, ')  \n" +
                "				)'  \n" +
                "		);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pAmount IS NOT NULL) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND paymentAmount ',CASE WHEN pExactPaymentAmountSearch = TRUE THEN CONCAT(\" = '\", pAmount ,\"' \") ELSE CONCAT(\" like '%\", pAmount, \"%' \") END,' ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF pFromDate IS NOT NULL AND pToDate IS NOT NULL THEN  \n" +
                "		IF pSelectedDateType = 'PO' THEN  \n" +
                "			SET v_InvoiceNumberWhereClause = CONCAT(v_InvoiceNumberWhereClause,' AND  \n" +
                "				EXISTS (select 1  \n" +
                "						   from packing_slip_material_receive psd  \n" +
                "						   join packingslip_invoice_payment_det pdet on pdet.refPackingslipInvoiceID = psd.id  \n" +
                "						  where psd.isDeleted = 0  \n" +
                "							and pdet.refPayementid = inv.id  \n" +
                "							and (psd.poDate between \"',pFromDate,'\" and \"',pToDate,'\")  \n" +
                "					)'  \n" +
                "			);  \n" +
                "			-- SET pWhereClause = CONCAT(pWhereClause,\" and (c.invoiceDate between \"',pFromDate,'\" and \"',pToDate,'\")\");  \n" +
                "		ELSEIF pSelectedDateType = 'M' THEN  \n" +
                "			SET v_InvoiceNumberWhereClause = CONCAT(v_InvoiceNumberWhereClause,' AND  \n" +
                "				EXISTS (select 1  \n" +
                "						   from packing_slip_material_receive psd  \n" +
                "						   join packingslip_invoice_payment_det pdet on pdet.refPackingslipInvoiceID = psd.id  \n" +
                "						  where psd.isDeleted = 0  \n" +
                "							and pdet.refPayementid = inv.id  \n" +
                "							and (psd.receiptDate between \"',pFromDate,'\" and \"',pToDate,'\")  \n" +
                "					)'  \n" +
                "			);  \n" +
                "			-- SET pWhereClause = CONCAT(pWhereClause,\" AND (receiptDate BETWEEN '\",pFromDate,\"' AND '\",pToDate,\"')\");  \n" +
                "		ELSEIF pSelectedDateType = 'P' THEN  \n" +
                "			SET v_InvoiceNumberWhereClause = CONCAT(v_InvoiceNumberWhereClause,' AND  \n" +
                "				EXISTS (select 1  \n" +
                "						   from packing_slip_material_receive psd  \n" +
                "						   join packingslip_invoice_payment_det pdet on pdet.refPackingslipInvoiceID = psd.id  \n" +
                "						  where psd.isDeleted = 0  \n" +
                "							and pdet.refPayementid = inv.id  \n" +
                "							and (psd.packingSlipDate between \"',pFromDate,'\" and \"',pToDate,'\")  \n" +
                "					)'  \n" +
                "			);  \n" +
                "        	-- SET pWhereClause = CONCAT(pWhereClause,\" AND (poDate BETWEEN '\",pFromDate,\"' AND '\",pToDate,\"')\");  \n" +
                "		ELSEIF pSelectedDateType = 'I' THEN  \n" +
                "			SET v_InvoiceNumberWhereClause = CONCAT(v_InvoiceNumberWhereClause,' AND  \n" +
                "				EXISTS (select 1  \n" +
                "						   from packing_slip_material_receive psd  \n" +
                "						   join packingslip_invoice_payment_det pdet on pdet.refPackingslipInvoiceID = psd.id  \n" +
                "						  where psd.isDeleted = 0  \n" +
                "							and pdet.refPayementid = inv.id  \n" +
                "							and (psd.invoiceDate between \"',pFromDate,'\" and \"',pToDate,'\")  \n" +
                "					)'  \n" +
                "			);  \n" +
                "			-- SET pWhereClause = CONCAT(pWhereClause,\" AND (creditMemoDate BETWEEN '\",pFromDate,\"' AND '\",pToDate,\"')\");  \n" +
                "		ELSEIF pSelectedDateType = 'PM' THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause,\" AND (paymentDate BETWEEN '\",pFromDate,\"' AND '\",pToDate,\"')\");  \n" +
                "		END IF;  \n" +
                "	ELSEIF pFromDate IS NOT NULL THEN  \n" +
                "		IF pSelectedDateType = 'PO' THEN  \n" +
                "			SET v_InvoiceNumberWhereClause = CONCAT(v_InvoiceNumberWhereClause,' AND  \n" +
                "				EXISTS (select 1  \n" +
                "						   from packing_slip_material_receive psd  \n" +
                "						   join packingslip_invoice_payment_det pdet on pdet.refPackingslipInvoiceID = psd.id  \n" +
                "						  where psd.isDeleted = 0  \n" +
                "							and pdet.refPayementid = inv.id  \n" +
                "							and (psd.poDate = \"',pFromDate,'\")  \n" +
                "					)'  \n" +
                "			);  \n" +
                "			-- SET pWhereClause = CONCAT(pWhereClause,\" and (c.invoiceDate = '\",pFromDate,\"')\");  \n" +
                "		ELSEIF pSelectedDateType = 'M' THEN  \n" +
                "			SET v_InvoiceNumberWhereClause = CONCAT(v_InvoiceNumberWhereClause,' AND  \n" +
                "				EXISTS (select 1  \n" +
                "						   from packing_slip_material_receive psd  \n" +
                "						   join packingslip_invoice_payment_det pdet on pdet.refPackingslipInvoiceID = psd.id  \n" +
                "						  where psd.isDeleted = 0  \n" +
                "							and pdet.refPayementid = inv.id  \n" +
                "							and (psd.receiptDate = \"',pFromDate,'\")  \n" +
                "					)'  \n" +
                "			);  \n" +
                "			-- SET pWhereClause = CONCAT(pWhereClause,\" AND (receiptDate = '\",pFromDate,\"')\");  \n" +
                "		ELSEIF pSelectedDateType = 'P' THEN  \n" +
                "			SET v_InvoiceNumberWhereClause = CONCAT(v_InvoiceNumberWhereClause,' AND  \n" +
                "				EXISTS (select 1  \n" +
                "						   from packing_slip_material_receive psd  \n" +
                "						   join packingslip_invoice_payment_det pdet on pdet.refPackingslipInvoiceID = psd.id  \n" +
                "						  where psd.isDeleted = 0  \n" +
                "							and pdet.refPayementid = inv.id  \n" +
                "							and (psd.packingSlipDate = \"',pFromDate,'\")  \n" +
                "					)'  \n" +
                "			);  \n" +
                "        	-- SET pWhereClause = CONCAT(pWhereClause,\" AND (poDate = '\",pFromDate,\"')\");  \n" +
                "		ELSEIF pSelectedDateType = 'I' THEN  \n" +
                "			SET v_InvoiceNumberWhereClause = CONCAT(v_InvoiceNumberWhereClause,' AND  \n" +
                "				EXISTS (select 1  \n" +
                "						   from packing_slip_material_receive psd  \n" +
                "						   join packingslip_invoice_payment_det pdet on pdet.refPackingslipInvoiceID = psd.id  \n" +
                "						  where psd.isDeleted = 0  \n" +
                "							and pdet.refPayementid = inv.id  \n" +
                "							and (psd.invoiceDate = \"',pFromDate,'\")  \n" +
                "					)'  \n" +
                "			);  \n" +
                "			-- SET pWhereClause = CONCAT(pWhereClause,\" AND (creditMemoDate = '\",pFromDate,\"')\");  \n" +
                "		ELSEIF pSelectedDateType = 'PM' THEN  \n" +
                "        	SET pWhereClause = CONCAT(pWhereClause,\" AND (paymentDate = '\",pFromDate,\"')\");  \n" +
                "		END IF;  \n" +
                "    END IF;  \n" +
                "  \n" +
                "	SET @Sproc_Sproc_RetrieveSupplierInvoicePayment = CONCAT(\"  \n" +
                "		SELECT		inv.id,  \n" +
                "				inv.systemId,  \n" +
                "				inv.mfgcodeID,  \n" +
                "				m.mfgCode supplier,  \n" +
                "				fun_GetFormattedMfgCode(m.mfgCode, m.mfgName, '\",v_mfgNameFormat,\"') supplierCodeName,  \n" +
                "				inv.isPaymentVoided,  \n" +
                "				case 	when inv.isPaymentVoided = 0 then  \n" +
                "						'Paid'  \n" +
                "					else  \n" +
                "						'Voided'  \n" +
                "				end isPaymentVoidedConvertedValue,  \n" +
                "				inv.voidPaymentReason,  \n" +
                "				inv.refVoidedPaymentNumber,  \n" +
                "                inv.refVoidedPaymentId,  \n" +
                "                (select c.lockStatus from packingslip_invoice_payment c  \n" +
                "					where c.id = inv.refVoidedPaymentId) refVoidedPaymentLockStatus,  \n" +
                "				inv.paymentNumber,  \n" +
                "				inv.bankName,  \n" +
                "				inv.bankAccountNo,  \n" +
                "				inv.paymentType,  \n" +
                "				inv.bankAccountMasID,  \n" +
                "				gc.gencCategoryName paymentMethod,  \n" +
                "				gc.systemGenerated systemGeneratedPaymentMethod,  \n" +
                "				inv.paymentDate,  \n" +
                "				invdet.invoiceAmount,  \n" +
                "				inv.paymentAmount,  \n" +
                "				inv.payToName,  \n" +
                "                fun_getAddressbyIDForCheckPrint(inv.payToAddressID, inv.payToContactPersonID) payToAddress,  \n" +
                "                fun_getAddressbyIDForCheckPrint(inv.billToAddressID, inv.billToContactPersonID) billToAddress,  \n" +
                "                inv.refGencTransModeID,  \n" +
                "                gtm.modeName transactionModeName,  \n" +
                "                gtm.systemGenerated systemGeneratedTransactionMode,  \n" +
                "				inv.accountReference,  \n" +
                "				inv.remark,  \n" +
                "                inv.depositBatchNumber,  \n" +
                "                inv.offsetAmount,  \n" +
                "                inv.acctId,  \n" +
                "                fun_getChartOfAccountsCodeNameByID(inv.acctId) coaName,  \n" +
                "				fun_getUserNameByID(inv.createdBy) createdby,  \n" +
                "				fun_getUserNameByID(inv.updatedBy) updatedby,  \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(inv.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAt,  \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(inv.UpdatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt,  \n" +
                "				fun_getRoleByID(inv.updateByRoleId) updatedbyRole,  \n" +
                "				fun_getRoleByID(inv.createByRoleId) createdbyRole,  \n" +
                "				inv.lockStatus,  \n" +
                "				(case when inv.lockStatus = 'NA' then 'Not Applicable'  \n" +
                "					when inv.lockStatus = 'RL' then 'Ready To Lock'  \n" +
                "					when inv.lockStatus = 'LC' then 'Locked'  \n" +
                "					else null end  \n" +
                "				) lockStatusValue,  \n" +
                "				fun_getUserNameByID(inv.lockedBy) lockByName,  \n" +
                "				fun_getRoleByID(inv.lockedByRoleId) lockedByRoleName,  \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(inv.lockedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') lockedAt  \n" +
                "		FROM	packingslip_invoice_payment inv  \n" +
                "        join mfgcodemst m ON m.id = inv.mfgcodeID  \n" +
                "		INNER JOIN 	genericcategory gc ON inv.paymentType = gc.gencCategoryID  \n" +
                "        left join generic_transmode_mst gtm ON gtm.id = inv.refGencTransModeID  \n" +
                "		left JOIN (  \n" +
                "					SELECT 		pid.refPayementid,	SUM(psmd.extendedPrice) invoiceAmount  \n" +
                "					FROM 		packingslip_invoice_payment_det pid  \n" +
                "					LEFT JOIN 	packing_slip_material_receive_det psmd ON psmd.refPackingSlipMaterialRecID = pid.refPackingslipInvoiceID AND psmd.isDeleted = 0  \n" +
                "					WHERE 		pid.isDeleted = 0  \n" +
                "                       and		pid.isPaymentVoided = 0  \n" +
                "					GROUP BY 	pid.refPayementid  \n" +
                "				) invdet ON invdet.refPayementid = inv.id  \n" +
                "		WHERE 		inv.isDeleted = 0  \n" +
                "					AND inv.refPaymentMode = '\",pRefPaymentMode,\"'  \n" +
                "					AND gc.isDeleted = 0 \" ,v_InvoiceNumberWhereClause  \n" +
                "	);  \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "		SET pOrderBy = \" ORDER BY paymentDate desc, isPaymentVoided asc \";  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/* to get total count of rows */  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@Sproc_Sproc_RetrieveSupplierInvoicePayment,\" ) c where 1=1 and \", pWhereClause);  \n" +
                "        PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"select c.*  from ( \", @Sproc_Sproc_RetrieveSupplierInvoicePayment,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "    PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 07-02-2022 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1294,'1.00','V1',' Bug 41135: [Main Branch] On Supplier Refund need to remove Search Invoice# filter and Add CM/DM search filter - Jay '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1294:
            allDbChangesArray.push(
                /* **************************** New Script -> 08-02-2022  *********************************** */
                "DROP procedure IF EXISTS `Sproc_GetComponentMFGAliasSearchPurchaseOrder`;  \n" +
                "CREATE PROCEDURE `Sproc_GetComponentMFGAliasSearchPurchaseOrder`(  \n" +
                "	IN pGoodPart VARCHAR(100),  \n" +
                "	IN pSearch VARCHAR(500),  \n" +
                "	IN pId INT,  \n" +
                "	IN pMfgType VARCHAR(50),  \n" +
                "	IN pRoHSStatusID VARCHAR(100),  \n" +
                "	IN pMfgCodeId INT,  \n" +
                "	IN pMountingType VARCHAR(50),  \n" +
                "	IN pMountingTypeId INT,  \n" +
                "	IN pCategoryID INT,  \n" +
                "	IN pIsContainCPN TINYINT,  \n" +
                "	IN pRohsMainCategoryID INT,  \n" +
                "	IN pIsRohsMainCategoryInvertMatch TINYINT,  \n" +
                "	IN prefSupplierMfgpnComponentID INT ,  \n" +
                "	IN ppackagingID INT,  \n" +
                "	IN pstrictCustomPart TINYINT,  \n" +
                "	IN psupplierID INT,  \n" +
                "    IN pPartType int,  \n" +
                "    IN pExcludeStatus INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE vRohsMainCategoryID INT;  \n" +
                "	DECLARE v_mfgNameFormat VARCHAR(100);  \n" +
                "    DECLARE v_supplierMFRMappingType varchar(10);  \n" +
                "  \n" +
                "    SELECT fun_getMFGCodeNameFormat() INTO v_mfgNameFormat;  \n" +
                "  \n" +
                "	SET @SQLStatement1=CONCAT(\" SELECT *  \n" +
                "		FROM  \n" +
                "		(  \n" +
                "			SELECT 	c.id,                                   CONCAT('(',m.mfgCode, ') ',c.mfgPN) mfgPN,      c.mfgPN orgMfgPN,  \n" +
                "					c.PIDCode,                              c.RoHSStatusID,                                 c.mfgcodeID,  \n" +
                "					m.mfgCode,                              m.mfgName,                                      fun_GetFormattedMfgCode(m.mfgCode, m.mfgName, '\",v_mfgNameFormat,\"') mfgCodeName,  \n" +
                "					c.imageURL,                             c.documentPath,                                 c.mfgPNDescription,  \n" +
                "					c.functionalCategoryID,                 c.uom,                                          c.unit,  \n" +
                "					c.restrictUsePermanently,               c.restrictUSEwithpermission,                    c.restrictPackagingUsePermanently,  \n" +
                "					c.restrictPackagingUseWithpermission,   u.unitName AS  unitName,                        r.rohsIcon,  \n" +
                "					r.name AS rohsName,                     c.isCPN,                                        c.isCustom,  \n" +
                "					c.minimum,                              c.mult,                                         c.packageQty,  \n" +
                "					c.partType,                             c.pcbPerArray,                                  c.refSupplierMfgpnComponentID,  \n" +
                "					c.packagingID,                          c.internalReference,  							c.category  \n" +
                "			FROM 	component c  \n" +
                "			INNER JOIN mfgCodemst m ON c.mfgcodeID = m.id  \n" +
                "			JOIN 	rfq_rohsmst r ON r.id = c.RoHSStatusID  \n" +
                "			JOIN  	uoms u ON u.id= c.uom AND u.isdeleted = 0  \n" +
                "			WHERE 	c.isdeleted = 0  \");  \n" +
                "	IF  pId IS NOT NULL THEN  \n" +
                "		SET @SQLStatement1=CONCAT(@SQLStatement1,\" 	AND c.id = \" ,pId );  \n" +
                "    END IF;  \n" +
                "	IF  pMfgType IS NOT NULL THEN  \n" +
                "		SET @SQLStatement1=CONCAT(@SQLStatement1,\" 	AND m.mfgType = '\",pMfgType,\"' \");  \n" +
                "    END IF;  \n" +
                "    IF  pRoHSStatusID IS NOT NULL THEN  \n" +
                "		SET @SQLStatement1=CONCAT(@SQLStatement1,\" AND c.RoHSStatusID = \", pRoHSStatusID );  \n" +
                "	END IF;  \n" +
                "	IF  pMfgCodeId IS NOT NULL THEN  \n" +
                "		SET @SQLStatement1=CONCAT(@SQLStatement1,\" AND c.mfgcodeID = \",pMfgCodeId );  \n" +
                "	END IF;  \n" +
                "	IF  pMountingType IS NOT NULL THEN  \n" +
                "		SET @SQLStatement1=CONCAT(@SQLStatement1,\" AND mt.name = '\",pMountingType,\"' \");  \n" +
                "	END IF;  \n" +
                "	IF  pMountingTypeId IS NOT NULL THEN  \n" +
                "		SET @SQLStatement1=CONCAT(@SQLStatement1,\" AND c.mountingTypeID = \",pMountingTypeId );  \n" +
                "	END IF;  \n" +
                "	IF  pCategoryID IS NOT NULL THEN  \n" +
                "		SET @SQLStatement1=CONCAT(@SQLStatement1,\" AND 	c.category = \", pCategoryID  );  \n" +
                "	END IF;  \n" +
                "	IF  IFNULL(pIsContainCPN,FALSE) = FALSE  THEN  \n" +
                "		SET @SQLStatement1=CONCAT(@SQLStatement1,\" AND c.isCPN = FALSE \");  \n" +
                "	END IF;  \n" +
                "	IF  pRohsMainCategoryID IS NOT NULL THEN  \n" +
                "		SET vRohsMainCategoryID = pRohsMainCategoryID;  \n" +
                "		/*===>this logic is added to compare invert rohs category*/  \n" +
                "		IF pIsRohsMainCategoryInvertMatch = FALSE  THEN  \n" +
                "			IF pRohsMainCategoryID = -1 THEN  \n" +
                "				SET vRohsMainCategoryID = -2;  \n" +
                "			ELSEIF pRohsMainCategoryID = -2 THEN  \n" +
                "				SET vRohsMainCategoryID = -1;  \n" +
                "			END IF;  \n" +
                "		END IF;  \n" +
                "        /*<===this logic is added to compare invert rohs category*/  \n" +
                "   		IF vRohsMainCategoryID IS NOT NULL THEN  \n" +
                "			SET @SQLStatement1=CONCAT(@SQLStatement1,\" AND  r.refMainCategoryID  = \",vRohsMainCategoryID );  \n" +
                "        END IF;  \n" +
                "	END IF;  \n" +
                "	IF  prefSupplierMfgpnComponentID IS NOT NULL THEN  \n" +
                "		SET @SQLStatement1=CONCAT(@SQLStatement1,\" AND c.refSupplierMfgpnComponentID <=> IFNULL(\",prefSupplierMfgpnComponentID,\", c.refSupplierMfgpnComponentID)  \");  \n" +
                "	END IF;  \n" +
                "	IF  pPartType IS NOT NULL THEN  \n" +
                "		SET @SQLStatement1=CONCAT(@SQLStatement1,\" AND c.partType = '\",pPartType,\"' \");  \n" +
                "	END IF;  \n" +
                "	IF  ppackagingID IS NOT NULL THEN  \n" +
                "		SET @SQLStatement1=CONCAT(@SQLStatement1,\" AND 	c.packagingID <=> IFNULL(\",ppackagingID,\",c.packagingID) \");  \n" +
                "	END IF;  \n" +
                "	IF  pstrictCustomPart IS NOT NULL THEN  \n" +
                "		SET @SQLStatement1=CONCAT(@SQLStatement1,\" AND c.category != 3  AND c.iscustom = 1 \");  \n" +
                "	END IF;  \n" +
                "	IF  psupplierID IS NOT NULL AND pstrictCustomPart  = 1 THEN  \n" +
                "		SET @SQLStatement1=CONCAT(@SQLStatement1,\"  AND 	( EXISTS (SELECT 1 FROM (/*get mfg which set as company*/  \n" +
                "																		SELECT mc.id  \n" +
                "																				FROM mfgcodemst mc  \n" +
                "																				WHERE mc.iscompany = 1 AND mc.isdeleted = 0  \n" +
                "																		UNION ALL /* get All Customer code */  \n" +
                "																		SELECT '\",psupplierID,\"' AS id FROM DUAL \");  \n" +
                "		IF(SELECT COUNT(1) FROM supplier_mapping_mst smm WHERE smm.isdeleted=0 AND smm.isCustMapping=0 AND smm.supplierID=psupplierID)>0 THEN  \n" +
                "			SET @SQLStatement1=CONCAT(@SQLStatement1,\"  UNION ALL  SELECT smm.refMfgCodeMstID  AS id  \n" +
                "				FROM supplier_mapping_mst smm WHERE smm.isdeleted=0 AND smm.isCustMapping=0 AND smm.supplierID='\",psupplierID,\"' )a   WHERE a.id  = c.mfgcodeid))  \");  \n" +
                "		ELSE  \n" +
                "			SET @SQLStatement1=CONCAT(@SQLStatement1,\"  UNION ALL  SELECT mc.id FROM mfgcodemst mc WHERE mc.mfgType='MFG' AND mc.isCustOrDisty=1 AND mc.isdeleted=0  \n" +
                "			UNION ALL  \n" +
                "			SELECT c.mfgcodeid AS id FROM component c WHERE (c.parttype=4 OR c.iscpn=1) AND c.isdeleted=0 ) a   WHERE a.id  = c.mfgcodeid))   \");  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "	IF psupplierID IS NOT NULL AND pstrictCustomPart  IS NULL THEN  \n" +
                "		SELECT supplierMFRMappingType INTO v_supplierMFRMappingType FROM mfgcodemst WHERE id=psupplierID AND mfgType='dist' AND isDeleted=0;  \n" +
                "        IF(v_supplierMFRMappingType = 'B') THEN  \n" +
                "			SET @SQLStatement1=CONCAT(@SQLStatement1, \" AND c.isCPN=0 AND c.iscustom = 0 \");  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "	IF  pExcludeStatus IS NOT NULL THEN  \n" +
                "		SET @SQLStatement1=CONCAT(@SQLStatement1,\" AND c.partStatus != '\",pExcludeStatus,\"' \");  \n" +
                "	END IF;  \n" +
                "    IF pGoodPart IS NOT NULL THEN  \n" +
                "		SET @SQLStatement1=CONCAT(@SQLStatement1,\" AND c.isGoodPart = '\",pGoodPart,\"' \");  \n" +
                "    END IF;  \n" +
                "	/*Close Inner query section */  \n" +
                "	SET @SQLStatement1=CONCAT(@SQLStatement1,\" ) AS a  WHERE 1= 1 \");  \n" +
                "	IF  pSearch IS NOT NULL THEN  \n" +
                "		SET @SQLStatement1=CONCAT(@SQLStatement1,\" AND  EXISTS ( SELECT 1 FROM ( SELECT a.id, a.mfgpn name, a.pidcode FROM DUAL  \n" +
                "																					UNION ALL  \n" +
                "																					SELECT opn.refcomponentid ,opn.name, null pidcode FROM component_otherpn opn WHERE opn.refcomponentid = a.id  \n" +
                "														 						) x WHERE x.id  = a.id AND ( x.name  LIKE CONCAT('%\", pSearch , \"%') OR x.pidcode  LIKE CONCAT('%\", pSearch , \"%')) ) \");  \n" +
                "	END IF;  \n" +
                "	SET @SQLStatement1=CONCAT(@SQLStatement1,\" ORDER BY mfgPN For update\");  \n" +
                "	-- select @SQLStatement1;  \n" +
                "    PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 08-02-2022 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1295,'1.00','V1',' Sproc_GetComponentMFGAliasSearchPurchaseOrder SP - Jay '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1295:
            allDbChangesArray.push(
                /* **************************** New Script -> 10-02-2022  *********************************** */
                "DROP procedure IF EXISTS `Sproc_checkDelete_packing_slip_material_receive_det`;  \n" +
                "CREATE PROCEDURE `Sproc_checkDelete_packing_slip_material_receive_det`(  \n" +
                "	IN tableName VARCHAR(255),  \n" +
                "	IN IDs LONGTEXT,  \n" +
                "	IN deletedBy INT,  \n" +
                "	IN entityID VARCHAR(255),  \n" +
                "	IN refrenceIDs LONGTEXT,  \n" +
                "	IN pRoleID INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "		DECLARE v_StartIndex INT;  \n" +
                "		DECLARE v_EndIndex INT;  \n" +
                "		DECLARE v_Id VARCHAR(10);  \n" +
                "		DECLARE v_InvoiceId INT;  \n" +
                "		DECLARE v_InvoiceDetailId INT;  \n" +
                "		DECLARE v_MainInvoiceId INT;  \n" +
                "		DECLARE v_MemoIds VARCHAR(10000);  \n" +
                "		DECLARE v_UpdatedMemoIds VARCHAR(10000);  \n" +
                "		DECLARE v_InvoiceTotalDue DECIMAL(18,8);  \n" +
                "		DECLARE v_CurrentLineExtendedPrice DECIMAL(18,8);  \n" +
                "		DECLARE v_CountOfMemo INT;  \n" +
                "		DECLARE v_IsMemoForPrice TINYINT;  \n" +
                "		DECLARE v_IsMemoForQty TINYINT;  \n" +
                "		SET v_StartIndex = 0;  \n" +
                "		SET @SQl2 = CONCAT('UPDATE packing_slip_material_receive_part_inspection_det SET isDeleted = 1, deletedBy = ',deletedBy,', deleteByRoleId = ',pRoleID,', deletedAt =\"',fun_DatetimetoUTCDateTime(),'\" WHERE lineId IN(', IDs, ') AND deletedAt IS NULL');  \n" +
                "		PREPARE stmt2 FROM @SQL2;  \n" +
                "        EXECUTE stmt2;  \n" +
                "		DEALLOCATE PREPARE stmt2;  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_Split_Ids_String_Into_Table;  \n" +
                "		CREATE TEMPORARY TABLE temp_Split_Ids_String_Into_Table (id VARCHAR(10));  \n" +
                "		SET @SQL3 = CONCAT(\"INSERT INTO temp_Split_Ids_String_Into_Table (id) values ('\", REPLACE((IDs),',', \"'),('\"),\"');\");  \n" +
                "        PREPARE stmt3 FROM @SQL3;  \n" +
                "		EXECUTE stmt3;  \n" +
                "        DEALLOCATE PREPARE stmt3;  \n" +
                "		SELECT COUNT(1) INTO v_EndIndex FROM temp_Split_Ids_String_Into_Table;  \n" +
                "		WHILE v_StartIndex < v_EndIndex DO  \n" +
                "			SELECT id INTO v_Id FROM temp_Split_Ids_String_Into_Table LIMIT 1 OFFSET v_StartIndex;  \n" +
                "			SELECT refPackingSlipMaterialRecID, refPackingSlipDetId, isMemoForPrice, isMemoForQty INTO v_InvoiceId, v_InvoiceDetailId, v_IsMemoForPrice, v_IsMemoForQty FROM packing_slip_material_receive_det WHERE id = v_Id AND isDeleted = 0;  \n" +
                "            SELECT COUNT(1) INTO v_CountOfMemo FROM packing_slip_material_receive WHERE id = v_InvoiceId AND (receiptType = 'C' OR receiptType = 'D');  \n" +
                "			IF (v_CountOfMemo > 0) THEN  \n" +
                "				SELECT refPackingSlipMaterialRecID, refCreditDebitInvoiceNo INTO v_MainInvoiceId, v_MemoIds FROM packing_slip_material_receive_det WHERE id = v_InvoiceDetailId AND isDeleted = 0;  \n" +
                "				IF (v_MemoIds IS NOT NULL) THEN  \n" +
                "					DROP TEMPORARY TABLE IF EXISTS temp_Split_String_Into_Table;  \n" +
                "					CREATE TEMPORARY TABLE temp_Split_String_Into_Table (lineId VARCHAR(10));  \n" +
                "                    SET @SQL4 = CONCAT(\"INSERT INTO temp_Split_String_Into_Table (lineId) values ('\", REPLACE((v_MemoIds),',', \"'),('\"),\"');\");  \n" +
                "					PREPARE stmt4 FROM @SQL4;  \n" +
                "                    EXECUTE stmt4;  \n" +
                "                    DEALLOCATE PREPARE stmt4;  \n" +
                "					UPDATE 	packing_slip_material_receive SET 	`status` = 'I', invoiceApprovalStatus = (case when (invoiceApprovalStatus = 1 or invoiceRequireManagementApproval = 1) then 2 else invoiceApprovalStatus end),  \n" +
                "                    invoiceApprovalComment = (case when (invoiceApprovalStatus = 1 or invoiceRequireManagementApproval = 1) then null else invoiceApprovalComment end),  \n" +
                "                    invoiceApprovalDate = (case when (invoiceApprovalStatus = 1 or invoiceRequireManagementApproval = 1) then null else invoiceApprovalDate end),  \n" +
                "                    invoiceApprovedBy = (case when (invoiceApprovalStatus = 1 or invoiceRequireManagementApproval = 1) then null else invoiceApprovedBy end)  \n" +
                "					WHERE 	id = v_MainInvoiceId AND receiptType = 'I' AND isDeleted = 0;  \n" +
                "					SELECT IFNULL(invoiceTotalDue, 0) INTO v_InvoiceTotalDue FROM packing_slip_material_receive WHERE id = v_InvoiceId AND isDeleted = 0;  \n" +
                "					SELECT ABS(IFNULL(extendedPrice, 0)) INTO v_CurrentLineExtendedPrice FROM packing_slip_material_receive_det WHERE id = v_Id AND isDeleted = 0;  \n" +
                "					UPDATE 	packing_slip_material_receive SET 	`status` = 'A', invoiceTotalDue = (v_InvoiceTotalDue - v_CurrentLineExtendedPrice)  \n" +
                "					WHERE 	id = v_InvoiceId AND isDeleted = 0;  \n" +
                "					UPDATE 	packing_slip_material_receive ps  \n" +
                "					SET 	ps.`status` = (CASE WHEN ps.packingSlipModeStatus = 'D' THEN 'I' ELSE 'IR' END)  \n" +
                "					WHERE 	ps.refPackingSlipNumberForInvoice = v_MainInvoiceId AND ps.receiptType = 'P' AND ps.isDeleted = 0;  \n" +
                "					UPDATE 	packing_slip_material_receive_det SET 	isDeleted = 1, deletedBy = deletedBy, deleteByRoleId = pRoleID, deletedAt = fun_DatetimetoUTCDateTime()  \n" +
                "                    WHERE 	id = v_Id AND isDeleted = 0;  \n" +
                "					IF ((SELECT COUNT(1) FROM packing_slip_material_receive_det WHERE refPackingSlipMaterialRecID = v_InvoiceId AND refPackingSlipDetId = v_InvoiceDetailId AND isDeleted = 0) = 0) THEN  \n" +
                "						DELETE FROM temp_Split_String_Into_Table WHERE lineId = v_InvoiceId;  \n" +
                "					END IF;  \n" +
                "					SELECT GROUP_CONCAT(lineId) INTO v_UpdatedMemoIds  FROM temp_Split_String_Into_Table;  \n" +
                "					UPDATE 	packing_slip_material_receive_det SET 	`status` = 'D', refCreditDebitInvoiceNo = v_UpdatedMemoIds, isMemoForPrice = (CASE WHEN v_IsMemoForPrice = 1 THEN 0 ELSE isMemoForPrice END),  \n" +
                "					isMemoForQty = (CASE WHEN v_IsMemoForQty = 1 THEN 0 ELSE isMemoForQty END), difference = (CASE WHEN v_IsMemoForPrice = 1 THEN NULL ELSE difference END), differenceQty = (CASE WHEN v_IsMemoForQty = 1 THEN NULL ELSE differenceQty END)  \n" +
                "					WHERE 	id = v_InvoiceDetailId AND isDeleted = 0;  \n" +
                "				ELSE  \n" +
                "					IF ((SELECT receiptType FROM packing_slip_material_receive WHERE refPackingSlipNumberForInvoice = v_InvoiceId AND isDeleted = 0) = 'R') THEN  \n" +
                "						UPDATE 	packing_slip_material_receive SET 	`status` = 'WC', packingSlipModeStatus = 'S'  \n" +
                "						WHERE  	refPackingSlipNumberForInvoice = v_InvoiceId AND isDeleted = 0;  \n" +
                "					END IF;  \n" +
                "  \n" +
                "					UPDATE 	packing_slip_material_receive_det SET 	isDeleted = 1, deletedBy = deletedBy, deleteByRoleId = pRoleID, deletedAt = fun_DatetimetoUTCDateTime()  \n" +
                "					WHERE 	id = v_Id AND isDeleted = 0;  \n" +
                "				END IF;  \n" +
                "			ELSE  \n" +
                "				UPDATE 	packing_slip_material_receive_det SET 	isDeleted = 1, deletedBy = deletedBy, deleteByRoleId = pRoleID, deletedAt = fun_DatetimetoUTCDateTime()  \n" +
                "				WHERE 	id = v_Id AND isDeleted = 0;  \n" +
                "			END IF;  \n" +
                "			SET v_StartIndex = v_StartIndex + 1;  \n" +
                "		END WHILE;  \n" +
                "		/*SET @SQl1 = CONCAT('update packing_slip_material_receive_det set isDeleted = 1, deletedBy = ',deletedBy,', deleteByRoleId = ',pRoleID,', deletedAt =\"',fun_DatetimetoUTCDateTime(),'\" where id IN(', IDs, ') and deletedAt is NULL');  \n" +
                "		PREPARE stmt1 FROM @SQL1;  \n" +
                "		EXECUTE stmt1;  \n" +
                "		DEALLOCATE PREPARE stmt1;   */  \n" +
                "		SELECT COUNT(1) TotalCount FROM packing_slip_material_receive_det WHERE id IN (IDs) AND isDeleted = 0 AND deletedAt IS NULL;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 10-02-2022  *********************************** */
                "DROP TRIGGER IF EXISTS `Trg_AU_packing_slip_material_receive`;  \n" +
                "CREATE TRIGGER `Trg_AU_packing_slip_material_receive` AFTER UPDATE ON `packing_slip_material_receive` FOR EACH ROW BEGIN  \n" +
                "	DECLARE vMfgCodeFormat INT;  \n" +
                "    DECLARE vOldCustomer VARCHAR(100);  \n" +
                "    DECLARE vNewCustomer VARCHAR(100);  \n" +
                "  \n" +
                "    SELECT fun_getMFGCodeNameFormat() INTO vMfgCodeFormat;  \n" +
                "  \n" +
                "	IF OLD.receiptType = \"P\" AND OLD.refPurchaseOrderID IS NULL AND NEW.isCustConsigned != OLD.isCustConsigned THEN  \n" +
                "		UPDATE packing_slip_material_receive_det SET isLineCustConsigned=NEW.isCustConsigned, LineCustomerID=NEW.CustomerID WHERE refPackingSlipMaterialRecID=OLD.id;  \n" +
                "        /* (-14) is Packing Slip Entity Default Entry ID*/  \n" +
                "        insert into pending_elastic_entity_sync_data(entityID,entityParamDet) values(-14,concat('{\"id\":', OLD.id , '}'));  \n" +
                "    END IF;  \n" +
                "	IF IFNULL(OLD.poNumber,0) != IFNULL(NEW.poNumber,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'PO#', CAST(OLD.poNumber AS CHAR), CAST(new.poNumber AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "		fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','poNumber'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.poDate,0) != IFNULL(NEW.poDate,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR),  \n" +
                "		CASE  \n" +
                "			WHEN NEW.receiptType = 'P' THEN 'PO Date'  \n" +
                "			WHEN NEW.receiptType = 'R' THEN 'RMA Date'  \n" +
                "			ELSE 'PO Date'  \n" +
                "		END ,  \n" +
                "		CAST(OLD.poDate AS CHAR), CAST(new.poDate AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "		fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','poDate'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.mfgCodeID,0) != IFNULL(NEW.mfgCodeID,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Supplier', CAST(fun_getMfgCodeAndNameByID(OLD.mfgCodeID) AS CHAR), CAST(fun_getMfgCodeAndNameByID(new.mfgCodeID) AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        'varchar');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.supplierSONumber,0) != IFNULL(NEW.supplierSONumber,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'SO#', CAST(OLD.supplierSONumber AS CHAR), CAST(new.supplierSONumber AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "		fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','supplierSONumber'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.soDate,0) != IFNULL(NEW.soDate,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'SO Date', CAST(OLD.soDate AS CHAR), CAST(new.soDate AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "		fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','soDate'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.packingSlipNumber,0) != IFNULL(NEW.packingSlipNumber,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Packing Slip#', CAST(OLD.packingSlipNumber AS CHAR), CAST(new.packingSlipNumber AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','packingSlipNumber'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.packingSlipDate,0) != IFNULL(NEW.packingSlipDate,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Packing Date', CAST(OLD.packingSlipDate AS CHAR), CAST(new.packingSlipDate AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','packingSlipDate'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.invoiceNumber,0) != IFNULL(NEW.invoiceNumber,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Invoice#', CAST(OLD.invoiceNumber AS CHAR), CAST(new.invoiceNumber AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','invoiceNumber'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.invoiceDate,0) != IFNULL(NEW.invoiceDate,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Invoice Date', CAST(OLD.invoiceDate AS CHAR), CAST(new.invoiceDate AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','invoiceDate'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.creditMemoNumber,0) != IFNULL(NEW.creditMemoNumber,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Credit Memo#', CAST(OLD.creditMemoNumber AS CHAR), CAST(new.creditMemoNumber AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','creditMemoNumber'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.creditMemoDate,0) != IFNULL(NEW.creditMemoDate,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Credit Memo Date', CAST(OLD.creditMemoDate AS CHAR), CAST(new.creditMemoDate AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','creditMemoDate'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.debitMemoNumber,0) != IFNULL(NEW.debitMemoNumber,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Debit Memo#', CAST(OLD.debitMemoNumber AS CHAR), CAST(new.debitMemoNumber AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','debitMemoNumber'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.debitMemoDate,0) != IFNULL(NEW.debitMemoDate,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Debit Memo Date', CAST(OLD.debitMemoDate AS CHAR), CAST(new.debitMemoDate AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','debitMemoDate'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.receiptDate,0) != IFNULL(NEW.receiptDate,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), (CASE WHEN (new.receiptType = 'R' OR (new.receiptType = 'C' AND new.creditMemoType = 'RC')) THEN 'Ship By Date' ELSE 'Material Receipt Date' END),  \n" +
                "		CAST(OLD.receiptDate AS CHAR), CAST(new.receiptDate AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','receiptDate'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.`status`,0) != IFNULL(NEW.`status`,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR),  \n" +
                "		(  \n" +
                "			CASE  \n" +
                "				WHEN NEW.receiptType = 'P' THEN 'Packing Slip Status'  \n" +
                "				WHEN NEW.receiptType = 'R' THEN 'RMA Status'  \n" +
                "				ELSE 'Supplier Invoice Status'  \n" +
                "			END  \n" +
                "		),  \n" +
                "		CAST(  \n" +
                "			(  \n" +
                "				CASE  \n" +
                "					WHEN OLD.`status` = 'I' THEN 'Investigate'  \n" +
                "					WHEN OLD.`status` = 'W' THEN 'Waiting For Invoice'  \n" +
                "					WHEN OLD.`status` = 'IR' THEN 'Invoice Received'  \n" +
                "					WHEN OLD.`status` = 'A' THEN 'Approved To Pay'  \n" +
                "					WHEN OLD.`status` = 'P' THEN 'Paid'  \n" +
                "					WHEN OLD.`status` = 'PE' THEN 'Pending'  \n" +
                "					WHEN OLD.`status` = 'D' THEN 'Draft'  \n" +
                "					WHEN OLD.`status` = 'WS' THEN 'Waiting For Shipment'  \n" +
                "					WHEN OLD.`status` = 'WC' THEN 'Waiting For Credit Memo'  \n" +
                "					WHEN OLD.`status` = 'CR' THEN 'Credit Memo Received'  \n" +
                "                    WHEN OLD.`status` = 'PM' THEN 'Pending Management Approval'  \n" +
                "					ELSE NULL  \n" +
                "				END  \n" +
                "			) AS CHAR  \n" +
                "		),  \n" +
                "		CAST(  \n" +
                "			(  \n" +
                "				CASE  \n" +
                "					WHEN NEW.`status` = 'I' THEN 'Investigate'  \n" +
                "					WHEN NEW.`status` = 'W' THEN 'Waiting For Invoice'  \n" +
                "					WHEN NEW.`status` = 'IR' THEN 'Invoice Received'  \n" +
                "					WHEN NEW.`status` = 'A' THEN 'Approved To Pay'  \n" +
                "					WHEN NEW.`status` = 'P' THEN 'Paid'  \n" +
                "					WHEN NEW.`status` = 'PE' THEN 'Pending'  \n" +
                "					WHEN NEW.`status` = 'D' THEN 'Draft'  \n" +
                "					WHEN NEW.`status` = 'WS' THEN 'Waiting For Shipment'  \n" +
                "					WHEN NEW.`status` = 'WC' THEN 'Waiting For Credit Memo'  \n" +
                "					WHEN NEW.`status` = 'CR' THEN 'Credit Memo Received'  \n" +
                "                    WHEN NEW.`status` = 'PM' THEN 'Pending Management Approval'  \n" +
                "					ELSE NULL  \n" +
                "				END  \n" +
                "			) AS CHAR  \n" +
                "		),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId, 'varchar');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.packingSlipModeStatus,0) != IFNULL(NEW.packingSlipModeStatus,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR),  \n" +
                "		(  \n" +
                "			CASE  \n" +
                "				WHEN NEW.receiptType = 'P' THEN 'Packing Slip Posting Status'  \n" +
                "				WHEN NEW.receiptType = 'R' THEN 'RMA Posting Status'  \n" +
                "				ELSE 'Supplier Invoice Posting Status'  \n" +
                "			END  \n" +
                "		),  \n" +
                "		CAST(  \n" +
                "			(  \n" +
                "				CASE  \n" +
                "					WHEN OLD.packingSlipModeStatus = 'D' THEN 'Draft'  \n" +
                "					WHEN OLD.packingSlipModeStatus = 'P' THEN 'Publish'  \n" +
                "					WHEN OLD.packingSlipModeStatus = 'S' THEN 'Shipped'  \n" +
                "					ELSE NULL  \n" +
                "				END  \n" +
                "			) AS CHAR  \n" +
                "		),  \n" +
                "		CAST(  \n" +
                "			(  \n" +
                "				CASE  \n" +
                "					WHEN NEW.packingSlipModeStatus = 'D' THEN 'Draft'  \n" +
                "					WHEN NEW.packingSlipModeStatus = 'P' THEN 'Publish'  \n" +
                "					WHEN NEW.packingSlipModeStatus = 'S' THEN 'Shipped'  \n" +
                "					ELSE NULL  \n" +
                "				END  \n" +
                "			) AS CHAR  \n" +
                "		),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId, 'varchar');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.applyDate,0) != IFNULL(NEW.applyDate,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Apply Date', CAST(OLD.applyDate AS CHAR), CAST(new.applyDate AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','applyDate'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.invoiceTotalDue,0) != IFNULL(NEW.invoiceTotalDue,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR),  \n" +
                "		(  \n" +
                "			CASE  \n" +
                "				WHEN NEW.receiptType = 'I' THEN 'Invoice Total'  \n" +
                "				WHEN NEW.receiptType = 'C' THEN 'Credit Memo Total'  \n" +
                "				WHEN NEW.receiptType = 'D' THEN 'Debit Memo Total'  \n" +
                "				ELSE NULL  \n" +
                "			END  \n" +
                "		),  \n" +
                "		CAST(OLD.invoiceTotalDue AS CHAR), CAST(new.invoiceTotalDue AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        'amount');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.paymentTermsID,0) != IFNULL(NEW.paymentTermsID,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Payment Term', CAST(fun_getGenericCategoryNameByID(OLD.paymentTermsID) AS CHAR), CAST(fun_getGenericCategoryNameByID(new.paymentTermsID) AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        'varchar');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.remark,0) != IFNULL(NEW.remark,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR),  \n" +
                "		(  \n" +
                "			CASE  \n" +
                "				WHEN NEW.receiptType = 'R' THEN 'RMA Comment'  \n" +
                "				ELSE 'Comment'  \n" +
                "			END  \n" +
                "		), CAST(OLD.remark AS CHAR), CAST(new.remark AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','remark'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.internalRemark,0) != IFNULL(NEW.internalRemark,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR),  \n" +
                "		(  \n" +
                "			CASE  \n" +
                "				WHEN NEW.receiptType = 'R' THEN 'Internal RMA Comment'  \n" +
                "				ELSE 'PS Internal Comment'  \n" +
                "			END  \n" +
                "		), CAST(OLD.internalRemark AS CHAR), CAST(new.internalRemark AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','internalRemark'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.shippingMethodId,0) != IFNULL(NEW.shippingMethodId,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Shipping Method', CAST(fun_getGenericCategoryCodeNameByID(OLD.shippingMethodId) AS CHAR), CAST(fun_getGenericCategoryCodeNameByID(new.shippingMethodId) AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        'varchar');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.carrierID,0) != IFNULL(NEW.carrierID,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Carrier', CAST(fun_getGenericCategoryCodeNameByID(OLD.carrierID) AS CHAR), CAST(fun_getGenericCategoryCodeNameByID(new.carrierID) AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        'varchar');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.carrierAccountNumber,0) != IFNULL(NEW.carrierAccountNumber,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Carrier Account#', CAST(OLD.carrierAccountNumber AS CHAR), CAST(new.carrierAccountNumber AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','carrierAccountNumber'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.shippingInsurance ,0) != IFNULL(NEW.shippingInsurance ,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\",CAST(new.id AS CHAR),'Shipping With Insurance', CAST(CASE WHEN OLD.shippingInsurance = 0 THEN 'No' ELSE 'Yes' END AS CHAR), CAST(CASE WHEN NEW.shippingInsurance = 0 THEN 'No' ELSE 'Yes' END AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,  \n" +
                "		'varchar');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  /*address*/  \n" +
                "  \n" +
                "	IF IFNULL(OLD.billToAddress,0) != IFNULL(NEW.billToAddress,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Bill To', CAST(OLD.billToAddress AS CHAR), CAST(new.billToAddress AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','billToAddress'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.billToConactPerson,0) != IFNULL(NEW.billToConactPerson,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Bill To Contact Person', CAST(OLD.billToConactPerson AS CHAR), CAST(new.billToConactPerson AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','billToConactPerson'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.rmaShippingAddress,0) != IFNULL(NEW.rmaShippingAddress,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'RMA Ship To', CAST(OLD.rmaShippingAddress AS CHAR), CAST(new.rmaShippingAddress AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','rmaShippingAddress'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.rmaShippingContactPerson,0) != IFNULL(NEW.rmaShippingContactPerson,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'RMA Ship To Contact Person', OLD.rmaShippingContactPerson, new.rmaShippingContactPerson,  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','rmaShippingContactPerson'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.rmaMarkForAddress,0) != IFNULL(NEW.rmaMarkForAddress,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Mark For', CAST(OLD.rmaMarkForAddress AS CHAR), CAST(new.rmaMarkForAddress AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','rmaMarkForAddress'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.rmaMarkForContactPerson,0) != IFNULL(NEW.rmaMarkForContactPerson,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Mark For Contact Person', OLD.rmaMarkForContactPerson, new.rmaMarkForContactPerson,  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','rmaMarkForContactPerson'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  /*address*/  \n" +
                "  \n" +
                "    IF IFNULL(OLD.markedForRefund,0) != IFNULL(NEW.markedForRefund,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Marked for Refund',  \n" +
                "			case when OLD.markedForRefund = 1 then 'Yes' else 'No' end,  \n" +
                "            case when new.markedForRefund = 1 then 'Yes' else 'No' end,  \n" +
                "			fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId, 'varchar');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.markedForRefundAmt,0) != IFNULL(NEW.markedForRefundAmt,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Refund Amount ($)', CAST(OLD.markedForRefundAmt AS CHAR), CAST(new.markedForRefundAmt AS CHAR),  \n" +
                "			fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "            'amount');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  IF IFNULL(OLD.isCustConsigned, 0) != IFNULL(NEW.isCustConsigned, 0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES(\"PACKINGSLIPMATERIALRECEIVE\",CAST(new.id AS CHAR),'Packing Slip Customer Consigned (No Charge)',  CAST(CASE WHEN OLD.isCustConsigned=0 THEN 'No' ELSE 'Yes' END AS CHAR), CAST(CASE WHEN NEW.isCustConsigned=0 THEN 'No' ELSE 'Yes' END AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.CustomerID, 0) != IFNULL(NEW.CustomerID,0) THEN  \n" +
                "		SELECT fun_GetFormattedMfgCode(mfgCode, mfgName, vMfgCodeFormat) INTO vOldCustomer FROM mfgcodemst WHERE id=OLD.CustomerID;  \n" +
                "        SELECT fun_GetFormattedMfgCode(mfgCode, mfgName, vMfgCodeFormat) INTO vNewCustomer FROM mfgcodemst WHERE id=NEW.CustomerID;  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES(\"PACKINGSLIPMATERIALRECEIVE\",CAST(new.id AS CHAR),'Packing Slip Customer',  CAST(vOldCustomer AS CHAR), CAST(vNewCustomer AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  IF IFNULL(OLD.isNonUMIDStock, 0) != IFNULL(NEW.isNonUMIDStock, 0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES(\"PACKINGSLIPMATERIALRECEIVE\",CAST(new.id AS CHAR),'Packing Slip Do Not Create UMID Stock',  CAST(CASE WHEN OLD.isNonUMIDStock=0 THEN 'No' ELSE 'Yes' END AS CHAR), CAST(CASE WHEN NEW.isNonUMIDStock=0 THEN 'No' ELSE 'Yes' END AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.invoiceApprovalComment, 0) != IFNULL(NEW.invoiceApprovalComment, 0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES(\"PACKINGSLIPMATERIALRECEIVE\",CAST(new.id AS CHAR),'Approval Comment',  CAST(OLD.invoiceApprovalComment AS CHAR), CAST(NEW.invoiceApprovalComment AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.invoiceApprovalDate, 0) != IFNULL(NEW.invoiceApprovalDate, 0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES(\"PACKINGSLIPMATERIALRECEIVE\",CAST(new.id AS CHAR),'Approved On',  CAST(fun_ApplyCommonDateTimeFormatByParaValue(OLD.invoiceApprovalDate,FUN_GETTIMEZONE(), FUN_GETDATETIMEFORMAT()) AS CHAR), CAST(fun_ApplyCommonDateTimeFormatByParaValue(NEW.invoiceApprovalDate,FUN_GETTIMEZONE(), FUN_GETDATETIMEFORMAT()) AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.invoiceApprovedBy, 0) != IFNULL(NEW.invoiceApprovedBy, 0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES(\"PACKINGSLIPMATERIALRECEIVE\",CAST(new.id AS CHAR),'Approved By',  CAST(fun_getUserNameByID(OLD.invoiceApprovedBy) AS CHAR), CAST(fun_getUserNameByID(NEW.invoiceApprovedBy) AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 10-02-2022 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1296,'1.00','V1',' Bug 41236: [Main Branch] SINV status changes from Partially paid to Approved to paid if made any changes in SINV - Jay '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1296:
            allDbChangesArray.push(
                /* **************************** New Script -> 10-02-2022  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetSalesOrderSummaryList` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetSalesOrderSummaryList`(  \n" +
                "	IN ppageIndex INT(11),  \n" +
                "	IN precordPerPage INT(11),  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pfilterStatus VARCHAR(100),  \n" +
                "	IN pcustomerIds VARCHAR(16000),  \n" +
                "	IN pshippingMethodId VARCHAR(16000),  \n" +
                "	IN ptermsIds VARCHAR(16000),  \n" +
                "	IN psearchposotext VARCHAR(1000),  \n" +
                "	IN psearchposotype VARCHAR(10),  \n" +
                "	IN pfromDate DATE,  \n" +
                "	IN ptoDate DATE,  \n" +
                "	IN psearchextPricetext VARCHAR(1000),  \n" +
                "	IN psearchextPricetype VARCHAR(10),  \n" +
                "	IN pfilterPOStatus VARCHAR(20)  ,  \n" +
                "    IN pIsRmaPO TINYINT,  \n" +
                "    IN pfromPODate DATE,  \n" +
                "	IN ptoPODate DATE  \n" +
                "	)  \n" +
                "BEGIN  \n" +
                "  \n" +
                "		DECLARE pOffset INT(11);  \n" +
                "		DECLARE rowNumWhere VARCHAR(255) ;  \n" +
                "		DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
                "		DECLARE v_TimeZone VARCHAR(50);  \n" +
                "		DECLARE v_mfrFormat INT;  \n" +
                "		DECLARE v_empFormat INT;  \n" +
                "  \n" +
                "		SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "		SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
                "		SELECT fun_getMFGCodeNameFormat() INTO v_mfrFormat;  \n" +
                "		SELECT fun_getEmployeeDisplayFormat() INTO v_empFormat;  \n" +
                "  \n" +
                "		SET @tempQuery = CONCAT(\"SELECT s.id,  \n" +
                "       s.salesOrderNumber,  \n" +
                "       s.poNumber,  \n" +
                "       s.poDate,  \n" +
                "       s.customerID,  \n" +
                "       s.contactPersonID,  \n" +
                "       s.billingAddressID,  \n" +
                "       s.shippingAddressID,  \n" +
                "       s.shippingMethodID,  \n" +
                "       s.revision,  \n" +
                "       s.shippingComment,  \n" +
                "       s.termsID,  \n" +
                "       CASE WHEN s.status=0 THEN 'Draft' ELSE 'Published' END statusConvertedValue,  \n" +
                "       CASE WHEN s.blanketPOOption=1 THEN 'Use This Blanket PO# for All Releases' WHEN s.blanketPOOption=2 THEN 'Link Future PO(s) to This Blanket PO' WHEN s.blanketPOOption=3 THEN 'Use Blanket PO# and Release# for All Releases' ELSE '' END blanketPOOptionText,  \n" +
                "       s.blanketPOOption,  \n" +
                "       s.status,  \n" +
                "       s.soDate,  \n" +
                "       s.revisionChangeNote,  \n" +
                "       s.salesCommissionTo,  \n" +
                "       s.intermediateShipmentId,  \n" +
                "       s.freeOnBoardId,  \n" +
                "       s.internalComment as internalCommentSo,  \n" +
                "       s.serialNumber,  \n" +
                "       s.carrierID,  \n" +
                "       s.carrierAccountNumber,  \n" +
                "       s.originalPODate,  \n" +
                "       s.isLegacyPO,  \n" +
                "       CASE WHEN s.isLegacyPO=0 THEN 'No' ELSE   'Yes' END legacyPOText,  \n" +
                "       s.isRmaPO,  \n" +
                "       CASE WHEN s.isRmaPO=0 THEN 'No' ELSE   'Yes' END rmaPOText,  \n" +
                "       s.poRevision,  \n" +
                "       CASE WHEN isBlanketPO=0 THEN 'No' ELSE 'Yes' END blanketPOText,  \n" +
                "       s.isBlanketPO,  \n" +
                "       fun_GetFormattedMfgCode(mg.mfgCode,mg.mfgName,\",v_mfrFormat,\") companyName,  \n" +
                "       mg.mfgName,  \n" +
                "       mg.mfgCode,  \n" +
                "       s.poRevisionDate,  \n" +
                "       fun_getEmployeeNameByEmpID(s.contactPersonID) fullName,  \n" +
                "        s.linkToBlanketPO,  \n" +
                "        CASE WHEN s.linkToBlanketPO=1 THEN 'Yes' ELSE 'No' END linkToBlanketPOText,  \n" +
                "       fun_getGenericCategoryCodeNameByID(s.termsID) termsDisplayText,  \n" +
                "       fun_getGenericCategoryCodeNameByID(s.carrierID) carrierName,  \n" +
                "       fun_getGenericCategoryCodeNameByID(s.shippingMethodID) genCategoryCode,  \n" +
                "       fb.name freeOnBoardName,  \n" +
                "       s.`rmaNumber` AS `rmaNumber`,  \n" +
                "	   s.`isDebitedByCustomer` AS `isDebitedByCustomer`,  \n" +
                "	   (CASE WHEN (s.`isDebitedByCustomer` = 1) THEN 'Yes' ELSE 'No' END) AS `debitedByCustText`,  \n" +
                "       s.`orgPONumber` AS `rmaOrgPONumber`,  \n" +
                "       s.`orgSalesOrderID` AS `orgSalesOrderID`,  \n" +
                "		s.`isReworkRequired` AS `isReworkRequired`,  \n" +
                "       (CASE  WHEN (s.`isReworkRequired` = 1) THEN 'Yes'  ELSE 'No'  END) AS `reworkReqText`,  \n" +
                "	   s.`reworkPONumber` AS `reworkPONumber`,  \n" +
                "      ifnull(sodCnt.totalLineCount,0)  totalSOLines,  \n" +
                "       ifnull(sodCnt.completedLineCount,0) totalCompletedSOLines,  \n" +
                "       (case when sodCnt.totalLineCount is null then 0 else  Round((sodCnt.completedLineCount * 100/sodCnt.totalLineCount),2) end)soCompletionPercentage,  \n" +
                "      (case when sodCnt.canceledLineCount = ifnull(sodCnt.totalLineCount,0) then 'Canceled'  \n" +
                "			when (sodCnt.canceledLineCount + sodCnt.completedLineCount) = ifnull(sodCnt.totalLineCount,0)  then 'Completed'  \n" +
                "            else 'In Progress' end) salesOrderDetStatusConvertedValues,  \n" +
                "      fun_getTotalSoPrice(s.id) soTotalPrice,  \n" +
                "      fun_getTotalInvoicePrice(s.id) soInvoicePrice,  \n" +
                "			fun_getUserNameByID(s.updatedBy) soModifiedBy,  \n" +
                "			fun_getAddressbyID(s.billingAddressID) billingAddressText,  \n" +
                "			fun_getAddressbyID(s.shippingAddressID) shippingAddressText,  \n" +
                "			fun_getAddressbyID(s.intermediateShipmentId) intermediateText,  \n" +
                "			fun_contactPersonDetailByID(s.billingContactPersonID) billToContactPerson,  \n" +
                "			fun_contactPersonDetailByID(s.shippingContactPersonID) shipToToContactPerson,  \n" +
                "			fun_contactPersonDetailByID(s.intermediateContactPersonID) markToToContactPerson,  \n" +
                "			fun_getUserNameByID(s.createdBy) soCreatedBy,  \n" +
                "			fun_getRoleByID(s.createByRoleId) createdbyRole,  \n" +
                "			fun_getRoleByID(s.updateByRoleId) updatedbyRole,  \n" +
                "                       fun_ApplyCommonDateTimeFormatByParaValue(s.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdDate,  \n" +
                "		       fun_ApplyCommonDateTimeFormatByParaValue(s.UpdatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') modifyDate  ,  \n" +
                "               fun_GetEmployeeFormattedName(salecomm.firstName,salecomm.middleName,salecomm.lastName,salecomm.initialName,\",v_empFormat,\") salesCommName  \n" +
                "			FROM salesordermst s JOIN mfgcodemst mg ON mg.id=s.customerID AND mg.isdeleted=0  \n" +
                "			LEFT JOIN freeonboardmst fb ON fb.id=s.freeOnBoardId AND fb.isdeleted=0  \n" +
                "            LEFT JOIN employees salecomm ON salecomm.id = s.salesCommissionTo and salecomm.isDeleted = 0  \n" +
                "			LEFT JOIN ( select sod.refSalesOrderID as soId ,  \n" +
                "							sum((case when sod.salesOrderDetStatus = 2 then 1 else 0 end) ) completedLineCount,  \n" +
                "							count(1) totalLineCount,  \n" +
                "                            sum((case when sod.isCancle = 1 then 1 else 0 end)) canceledLineCount  \n" +
                "                            From salesorderdet sod where sod.isDeleted = 0  \n" +
                "                            Group By sod.refSalesOrderID ) sodCnt on sodCnt.soId = s.id  \n" +
                "			WHERE s.isdeleted=0  \n" +
                "			\");  \n" +
                "  \n" +
                "  \n" +
                "		IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY serialNumber DESC\") ;  \n" +
                "		ELSE  \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF (pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "			SET pWhereClause = '1=1' ;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "                IF(pfilterStatus IS NOT NULL AND pfilterStatus != '') THEN  \n" +
                "  \n" +
                "		      SET pWhereClause = CONCAT(pWhereClause, ' AND  FIND_IN_SET(salesOrderDetStatusConvertedValues,''', pfilterStatus ,''')');  \n" +
                "	        END IF;  \n" +
                "	        IF(pfilterPOStatus IS NOT NULL AND pfilterPOStatus != '') THEN  \n" +
                "  \n" +
                "		      SET pWhereClause = CONCAT(pWhereClause, ' AND  FIND_IN_SET(statusConvertedValue,''', pfilterPOStatus ,''')');  \n" +
                "	        END IF;  \n" +
                "	        IF(pcustomerIds IS NOT NULL AND pcustomerIds != '') THEN  \n" +
                "		      SET pWhereClause = CONCAT(pWhereClause, ' AND customerID in (',pcustomerIds,')');  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "			SET pWhereClause = '1=1' ;  \n" +
                "		END IF;  \n" +
                "                IF(pshippingMethodId IS NOT NULL AND pshippingMethodId != '') THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause, ' AND shippingMethodID in (',pshippingMethodId,')');  \n" +
                "		END IF;  \n" +
                "                IF(ptermsIds IS NOT NULL AND ptermsIds != '') THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause, ' AND termsID in (',ptermsIds,')');  \n" +
                "		END IF;  \n" +
                "		IF(psearchposotype IS NOT NULL AND psearchposotext IS NOT NULL)THEN  \n" +
                "			IF(psearchposotype='C')THEN  \n" +
                "				SET pWhereClause = CONCAT(pWhereClause, ' AND (salesOrderNumber  like ''%',psearchposotext,'%'' OR poNumber  like ''%',psearchposotext,'%'')');  \n" +
                "			ELSE  \n" +
                "				SET pWhereClause= CONCAT(pWhereClause,' and (salesOrderNumber  =''',psearchposotext,''' OR poNumber  =''',psearchposotext,''')');  \n" +
                "			END IF;  \n" +
                "		END IF;  \n" +
                "		IF(psearchextPricetype IS NOT NULL AND psearchextPricetext IS NOT NULL)THEN  \n" +
                "			IF(psearchextPricetype='C')THEN  \n" +
                "				SET pWhereClause = CONCAT(pWhereClause, ' AND (soTotalPrice  like ''%',psearchextPricetext,'%'')');  \n" +
                "			ELSE  \n" +
                "				SET pWhereClause= CONCAT(pWhereClause,' and (soTotalPrice  =''',psearchextPricetext,''')');  \n" +
                "			END IF;  \n" +
                "		END IF;  \n" +
                "		IF(pfromDate IS NOT NULL AND ptoDate IS NOT NULL)THEN  \n" +
                "			SET pWhereClause=CONCAT(pWhereClause, ' and (soDate>=''',pfromDate,''' and soDate<=''',ptoDate,''')');  \n" +
                "		ELSEIF(pfromDate IS NOT NULL)THEN  \n" +
                "			SET pWhereClause=CONCAT(pWhereClause, ' and (soDate>=''',pfromDate,''')');  \n" +
                "		ELSEIF(ptoDate IS NOT NULL)THEN  \n" +
                "			SET pWhereClause=CONCAT(pWhereClause, ' and (soDate<=''',ptoDate,''')');  \n" +
                "		END IF;  \n" +
                "        IF(pfromPODate IS NOT NULL AND ptoPODate IS NOT NULL)THEN  \n" +
                "			SET pWhereClause=CONCAT(pWhereClause, ' and (poDate>=''',pfromPODate,''' and poDate<=''',ptoPODate,''')');  \n" +
                "		ELSEIF(pfromPODate IS NOT NULL)THEN  \n" +
                "		   SET pWhereClause=CONCAT(pWhereClause, ' and (poDate>=''',pfromPODate,''')');  \n" +
                "		ELSEIF(ptoPODate IS NOT NULL)THEN  \n" +
                "		   SET pWhereClause=CONCAT(pWhereClause, ' and (poDate<=''',ptoPODate,''')');  \n" +
                "		END IF;  \n" +
                "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "			SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "		ELSE  \n" +
                "			SET rowNumWhere = '';  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		/* to get total count of rows */  \n" +
                "			SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@tempquery,\" ) c where 1=1 and \", pWhereClause);  \n" +
                "  \n" +
                "			PREPARE query2 FROM @SQLStatement2;  \n" +
                "  \n" +
                "			 EXECUTE query2;  \n" +
                "			 DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "			SET @SQLStatement1 = CONCAT(\"select * from ( \", @tempquery,\" ) c  \n" +
                "				where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "  \n" +
                "			PREPARE query1 FROM @SQLStatement1;  \n" +
                "  \n" +
                "			 EXECUTE query1;  \n" +
                "		       DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** New Script -> 10-02-2022  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1297,'1.00','V1',' Alter procedure Sproc_GetSalesOrderSummaryList-CC '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1297:
            allDbChangesArray.push(
                /* **************************** New Script -> 10-02-2022  *********************************** */
                "alter table rfq_consolidate_mfgpn_lineitem_quantity add column refSupplierID int;  \n" +
                /* **************************** New Script -> 10-02-2022  *********************************** */
                "ALTER TABLE rfq_consolidate_mfgpn_lineitem_quantity  \n" +
                "ADD CONSTRAINT FK_rfq_consolidate_quantity_refSupplierID  \n" +
                "FOREIGN KEY (refSupplierID) REFERENCES mfgcodemst(id);  \n" +
                /* **************************** New Script -> 10-02-2022  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1298,'1.00','V1',' rfq_consolidate_mfgpn_lineitem_quantity - CC '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1298:
            allDbChangesArray.push(
                /* **************************** New Script -> 10-02-2022  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_UpdateAssyConsolidateQuantity` ;  \n" +
                "CREATE PROCEDURE `Sproc_UpdateAssyConsolidateQuantity`(  \n" +
                "      IN prfqAssyID INT,  \n" +
                "      IN qtyID INT  \n" +
                "  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "IF(qtyID IS NOT NULL) THEN  \n" +
                "         UPDATE rfq_consolidate_mfgpn_lineitem_quantity rq SET rq.finalPrice=(NULL),rq.unitPrice=(NULL),rq.supplier=(NULL),  \n" +
                "         rq.selectedMpn=(NULL),rq.selectionMode=(NULL),rq.min=(NULL),rq.mult=(NULL),rq.currentStock=(NULL),rq.apiLead=(NULL),rq.leadTime=(NULL), rq.isBomUpdate=0,  \n" +
                "         rq.supplierStock=(NULL),rq.grossStock=(NULL),rq.pricingSuppliers=(NULL),rq.selectedPIDCode=(NULL),rq.componentID=(NULL),rq.packaging=(NULL),rq.rfqQtySupplierID=(NULL),rq.quoteQty=(NULL),rq.pricenotselectreason=(NULL),rq.availableInternalStock=(NULL),  \n" +
                "         rq.availableInternalStockTimeStamp=(NULL),rq.isBomUpdate=0,rq.LOAprice=(NULL),rq.supplierEachStcok=(NULL),rq.quoteQtyEach=(NULL),rq.unitEachPrice=(NULL),rq.refSupplierID=(NULL)  \n" +
                "         WHERE rq.qtyID=qtyID  AND  rq.consolidateID IN (SELECT rl.id FROM rfq_consolidated_mfgpn_lineitem rl WHERE rl.rfqAssyID=prfqAssyID AND rl.isdeleted=0);  \n" +
                "         ELSE  \n" +
                "         UPDATE rfq_consolidate_mfgpn_lineitem_quantity rq SET rq.finalPrice=(NULL),rq.unitPrice=(NULL),rq.supplier=(NULL),rq.isBomUpdate=0,  \n" +
                "         rq.selectedMpn=(NULL),rq.selectionMode=(NULL),rq.min=(NULL),rq.mult=(NULL),rq.currentStock=(NULL),rq.apiLead=(NULL),rq.leadTime=(NULL),  \n" +
                "         rq.supplierStock=(NULL),rq.grossStock=(NULL),rq.pricingSuppliers=(NULL),rq.selectedPIDCode=(NULL),rq.componentID=(NULL),rq.packaging=(NULL),rq.rfqQtySupplierID=(NULL),rq.quoteQty=(NULL),rq.pricenotselectreason=(NULL),rq.availableInternalStock=(NULL),  \n" +
                "         rq.availableInternalStockTimeStamp=(NULL),rq.isBomUpdate=0,rq.LOAprice=(NULL),rq.supplierEachStcok=(NULL),rq.quoteQtyEach=(NULL),rq.unitEachPrice=(NULL),rq.refSupplierID=(NULL)  \n" +
                "         WHERE  rq.consolidateID IN (SELECT rl.id FROM rfq_consolidated_mfgpn_lineitem rl WHERE rl.rfqAssyID=prfqAssyID AND rl.isdeleted=0);  \n" +
                "  \n" +
                "END IF;  \n" +
                " IF(SELECT COUNT(1) FROM rfq_consolidate_mfgpn_lineitem_quantity rq WHERE  rq.unitPrice IS NOT NULL AND  rq.consolidateID IN (SELECT rl.id FROM rfq_consolidated_mfgpn_lineitem rl WHERE rl.rfqAssyID=prfqAssyID AND rl.isdeleted=0))=0 THEN  \n" +
                "          UPDATE rfq_assy_autopricingstatus SET `status`=(NULL),errorMsg='',msg='' WHERE rfqAssyID=prfqAssyID AND isPurchaseApi=0;  \n" +
                "          UPDATE rfq_lineitem_autopricingstatus SET `status`=(NULL),errorMsg='',msg='' WHERE rfqAssyID=prfqAssyID AND isPurchaseApi=0;  \n" +
                "          END IF;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 10-02-2022  *********************************** */
                "DROP VIEW vu_getselectedpartdetail;  \n" +
                "CREATE VIEW `vu_getselectedpartdetail` AS  \n" +
                "SELECT  \n" +
                "  `ct`.`rfqAssyID`            AS `rfqAssyID`,  \n" +
                "  IFNULL(`cqty`.`consolidatedQty`,`ra`.`requestQty`) AS `requestQty`,  \n" +
                "  `rq`.`finalPrice`           AS `finalPrice`,  \n" +
                "  `rq`.`unitPrice`            AS `unitPrice`,  \n" +
                "  `m`.`mfgName`               AS `supplier`,  \n" +
                "  `rq`.`min`                  AS `min`,  \n" +
                "  `rq`.`mult`                 AS `mult`,  \n" +
                "  `rq`.`selectedMpn`          AS `selectedMpn`,  \n" +
                "  `rq`.`selectionMode`        AS `selectionMode`,  \n" +
                "  `rq`.`qtyID`                AS `qtyID`,  \n" +
                "  `rq`.`currentStock`         AS `currentStock`,  \n" +
                "  `rq`.`leadTime`             AS `leadTime`,  \n" +
                "  `rq`.`supplierStock`        AS `supplierStock`,  \n" +
                "  `rq`.`grossStock`           AS `grossStock`,  \n" +
                "  `rq`.`componentID`          AS `componentid`,  \n" +
                "  `rq`.`selectedPIDCode`      AS `selectedPIDCode`,  \n" +
                "  `rq`.`pricingSuppliers`     AS `pricingSuppliers`,  \n" +
                "  `rq`.`packaging`            AS `packaging`,  \n" +
                "  `rq`.`rfqQtySupplierID`     AS `rfqQtySupplierID`,  \n" +
                "  `rq`.`unitEachPrice`        AS `unitEachPrice`,  \n" +
                "  `rq`.`quoteQtyEach`         AS `quoteQtyEach`,  \n" +
                "  `rq`.`supplierEachStcok`    AS `supplierEachStcok`,  \n" +
                "  `c`.`noOfPosition`          AS `ApiNoOfPosition`,  \n" +
                "  `ct`.`qpa`                  AS `qpa`,  \n" +
                "  `u`.`abbreviation`          AS `abbreviation`,  \n" +
                "  `rq`.`quoteQty`             AS `quoteQty`,  \n" +
                "  `c`.`connecterTypeID`       AS `connecterTypeID`,  \n" +
                "  `c`.`noOfRows`              AS `noOfRows`,  \n" +
                "  `rq`.`pricenotselectreason` AS `pricenotselectreason`,  \n" +
                "  `rq`.`isBomUpdate`          AS `isBomUpdate`,  \n" +
                "  `rq`.`rfqPriceGroupId`      AS `rfqPriceGroupId`,  \n" +
                "  `pg`.`name`                 AS `priceGroupName`,  \n" +
                "  `cqty`.`consolidatedQty`    AS `consolidatedQty`,  \n" +
                "  `m`.`authorizeType`         AS `authorizeType`,  \n" +
                "  `rq`.`consolidateID`        AS `consolidateID`,  \n" +
                "  `rq`.`refSupplierID`        AS `refSupplierID`  \n" +
                "FROM (((((((`rfq_consolidate_mfgpn_lineitem_quantity` `rq`  \n" +
                "         JOIN `rfq_consolidated_mfgpn_lineitem` `ct`  \n" +
                "           ON ((`rq`.`consolidateID` = `ct`.`id`)))  \n" +
                "        LEFT JOIN `component` `c`  \n" +
                "          ON ((`rq`.`componentID` = `c`.`id`)))  \n" +
                "       LEFT JOIN `rfq_price_group` `pg`  \n" +
                "         ON ((`pg`.`id` = `rq`.`rfqPriceGroupId`)))  \n" +
                "      LEFT JOIN `rfq_consolidate_price_group_mfgpn_lineitem_quantity` `cqty`  \n" +
                "        ON ((`cqty`.`refConsolidateLineitemQtyId` = `rq`.`id`)))  \n" +
                "     LEFT JOIN `uoms` `u`  \n" +
                "       ON (((`u`.`id` = `ct`.`uomID`)  \n" +
                "            AND (`u`.`isDeleted` = 0))))  \n" +
                "    LEFT JOIN `rfq_assy_quantity` `ra`  \n" +
                "      ON (((`ra`.`id` = `rq`.`qtyID`)  \n" +
                "           AND (`ra`.`isDeleted` = 0))))  \n" +
                "   LEFT JOIN `mfgcodemst` `m`  \n" +
                "     ON (((`m`.`id` = `rq`.`refSupplierID`)  \n" +
                "          AND (`m`.`isDeleted` = 0)  \n" +
                "          AND (`m`.`mfgType` = 'DIST'))))  \n" +
                "WHERE ((`ct`.`isDeleted` = 0)  \n" +
                "       AND (`rq`.`isDeleted` = 0)  \n" +
                "       AND (`c`.`isDeleted` = 0));  \n" +
                /* **************************** New Script -> 10-02-2022  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetRFQUnQuotedLineItems` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetRFQUnQuotedLineItems`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN prfqAssyID INT,  \n" +
                "	IN puserID INT,  \n" +
                "	IN ppackageing TINYINT,  \n" +
                "	IN pcustomerID INT  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "  \n" +
                "	    DECLARE pOffset INT;  \n" +
                "	 DECLARE rowNumWhere VARCHAR(255) ;  \n" +
                "	    SET @SQLString = NULL;  \n" +
                "	    SET @HavingClause = NULL;  \n" +
                "	    SET SESSION group_concat_max_len = 150000;  \n" +
                "	    IF (pOrderBy IS NOT NULL) THEN  \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "		ELSE  \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , \"`mfgPn` desc\") ;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "  \n" +
                "		IF(pWhereClause IS NULL OR pWhereClause = '\"\"') THEN  \n" +
                "			SET pWhereClause = '1=1' ;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "			SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "		ELSE  \n" +
                "			SET rowNumWhere = '';  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		SELECT CONCAT(IFNULL(MAX(a.QtyColumn),''), IFNULL(CONCAT(', ',MAX(a.GroupColumn),''),''))  INTO @SQLString  \n" +
                "		FROM (  \n" +
                "			SELECT GROUP_CONCAT(DISTINCT  \n" +
                "					CONCAT(  \n" +
                "						'Max((IF(ra.requestQty = ''',  \n" +
                "							ra.requestQty,  \n" +
                "						''', rq.finalPrice, null))) AS ''',  \n" +
                "							ra.requestQty,''''  \n" +
                "						)  \n" +
                "						) AS QtyColumn,  \n" +
                "				NULL GroupColumn  \n" +
                "				FROM rfq_consolidate_mfgpn_lineitem_quantity rq  \n" +
                "				JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID  \n" +
                "				JOIN rfq_consolidated_mfgpn_lineitem rl ON rq.consolidateID=rl.id  \n" +
                "				WHERE rl.rfqAssyID=prfqAssyID AND rq.isDeleted=0 AND ra.deletedAt IS NULL AND ra.rfqPriceGroupId IS NULL  \n" +
                "			UNION  \n" +
                "			SELECT  NULL QtyColumn,  \n" +
                "				GROUP_CONCAT(DISTINCT  \n" +
                "					CONCAT(  \n" +
                "						'Max((IF(ra.requestQty = ''',  \n" +
                "							ra.requestQty,  \n" +
                "						''', rq.finalPrice, null))) AS ''',  \n" +
                "							pg.name,''''  \n" +
                "						)  \n" +
                "						) AS GroupColumn  \n" +
                "				   FROM rfq_consolidate_mfgpn_lineitem_quantity rq  \n" +
                "				   JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID  \n" +
                "				   JOIN  rfq_price_group pg ON pg.id = rq.rfqPriceGroupId  \n" +
                "				   LEFT JOIN rfq_consolidate_price_group_mfgpn_lineitem_quantity pgq ON pgq.refConsolidateLineitemQtyId = rq.id  \n" +
                "				   JOIN rfq_consolidated_mfgpn_lineitem rl ON rq.consolidateID=rl.id  \n" +
                "				   WHERE rl.rfqAssyID=prfqAssyID AND rq.isDeleted=0 AND ra.deletedAt IS NULL AND rq.rfqPriceGroupId IS NOT NULL  \n" +
                "		)a;  \n" +
                "  \n" +
                "			SELECT GROUP_CONCAT(DISTINCT  \n" +
                "					CONCAT(  \n" +
                "						'Max((IF(ra.requestQty = ''',  \n" +
                "							ra.requestQty,  \n" +
                "						''', rq.finalPrice, null))) IS NULL'  \n" +
                "						) SEPARATOR ' OR '  \n" +
                "						)  \n" +
                "					INTO @HavingClause  \n" +
                "			FROM rfq_consolidate_mfgpn_lineitem_quantity rq  \n" +
                "			JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID  \n" +
                "			JOIN rfq_consolidated_mfgpn_lineitem rl ON rq.consolidateID=rl.id  \n" +
                "			WHERE rl.rfqAssyID=prfqAssyID AND rq.isDeleted=0 AND ra.deletedAt IS NULL;  \n" +
                "  \n" +
                "			SET @SQLStatement_main = CONCAT(\" CREATE TEMPORARY TABLE IF NOT EXISTS consolidatedQtytemp AS  \n" +
                "							SELECT 	rl.id, \",  \n" +
                "							@SQLString,  \n" +
                "							\" FROM rfq_consolidated_mfgpn_lineitem rl  \n" +
                "							JOIN rfq_consolidate_mfgpn_lineitem_quantity rq ON rl.id=rq.consolidateID and rq.deletedAt is NULL  \n" +
                "							JOIN rfq_assy_quantity ra ON rq.qtyID=ra.id and ra.deletedAt is NULL  \n" +
                "							WHERE rl.isdeleted=0 AND  rl.rfqAssyID=\",prfqAssyID,\" GROUP BY rl.id\", ' HAVING ', @HavingClause);  \n" +
                "  \n" +
                "			DROP TEMPORARY TABLE IF EXISTS consolidatedQtytemp;  \n" +
                "			PREPARE stmtMain FROM @SQLStatement_main;  \n" +
                "			EXECUTE stmtMain;  \n" +
                "			DEALLOCATE PREPARE stmtMain;  \n" +
                "  \n" +
                "			SET @SQLStatement = (SELECT fun_getCommonConsolidateLineItems_New(prfqAssyID,pcustomerID,ppackageing));  \n" +
                "  \n" +
                "			DROP TEMPORARY TABLE IF EXISTS consolidatetemp;  \n" +
                "			PREPARE stmt FROM @SQLStatement;  \n" +
                "			-- SELECT @SQLStatement;  \n" +
                "			EXECUTE stmt;  \n" +
                "			DEALLOCATE PREPARE stmt;  \n" +
                "  \n" +
                "			SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1)  FROM consolidatetemp co JOIN consolidatedQtytemp coq ON coq.id = co.id and co.isPurchase = 1 where \", pWhereClause );  \n" +
                "			PREPARE query1 FROM @SQLStatement1;  \n" +
                "			EXECUTE query1;  \n" +
                "			DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "  \n" +
                "			SET @SQLStatement12 = CONCAT(\"SELECT co.*, coq.* FROM  consolidatetemp co JOIN consolidatedQtytemp coq ON coq.id = co.id and co.isPurchase = 1 where \", pWhereClause , \" \" , pOrderBy , rowNumWhere );  \n" +
                "			PREPARE query12 FROM @SQLStatement12;  \n" +
                "			EXECUTE query12;  \n" +
                "			DEALLOCATE PREPARE query12;  \n" +
                "  \n" +
                "			-- To Get Pricing service status data  \n" +
                "			SELECT  id,  \n" +
                "				rfqAssyID,  \n" +
                "				pricingApiName,  \n" +
                "				`status`,  \n" +
                "				msg,  \n" +
                "				errorMsg,  \n" +
                "				userID,  \n" +
                "				consolidateID,  \n" +
                "				isPurchaseApi,  \n" +
                "				pricingSupplierID  \n" +
                "			FROM rfq_lineitem_autopricingstatus  \n" +
                "			WHERE rfqAssyID = prfqAssyID AND isPurchaseApi = 0 AND `status` IS NOT NULL ;  \n" +
                "  \n" +
                "			-- To Get rfq turn time price group details  \n" +
                "			SELECT 	qtyTimeID,  \n" +
                "				turnTime,  \n" +
                "				unitOfTime,  \n" +
                "				rfqAssyQtyID,  \n" +
                "				requestQty,  \n" +
                "				rfqPriceGroupId,  \n" +
                "				priceGroup  \n" +
                "			FROM vu_getrfqqtyturntimepricegroupdetails  \n" +
                "			WHERE rfqAssyID = prfqAssyID;  \n" +
                "  \n" +
                "			-- To Get Selected Part details  \n" +
                "			SELECT 	requestQty,  \n" +
                "				finalPrice,  \n" +
                "				unitPrice,  \n" +
                "				supplier,  \n" +
                "				`min`,  \n" +
                "				mult,  \n" +
                "				selectedMpn,  \n" +
                "				selectionMode,  \n" +
                "				qtyID,  \n" +
                "				currentStock,  \n" +
                "				leadTime,  \n" +
                "				supplierStock,  \n" +
                "				grossStock,  \n" +
                "				componentid,  \n" +
                "				selectedPIDCode,  \n" +
                "				pricingSuppliers,  \n" +
                "				packaging,  \n" +
                "				rfqQtySupplierID,  \n" +
                "				unitEachPrice,  \n" +
                "				quoteQtyEach,  \n" +
                "				supplierEachStcok,  \n" +
                "				ApiNoOfPosition,  \n" +
                "				qpa,  \n" +
                "				abbreviation,  \n" +
                "				quoteQty,  \n" +
                "				connecterTypeID,  \n" +
                "				noOfRows,  \n" +
                "				pricenotselectreason,  \n" +
                "				isBomUpdate,  \n" +
                "				rfqPriceGroupId,  \n" +
                "				priceGroupName,  \n" +
                "				consolidatedQty,  \n" +
                "				authorizeType,  \n" +
                "				consolidateID,  \n" +
                "				refSupplierID  \n" +
                "			FROM vu_getselectedPartDetail  \n" +
                "			WHERE rfqAssyID = prfqAssyID;  \n" +
                "  \n" +
                "			-- To Get total price of consolidated lines  \n" +
                "			SELECT 	qtyID,  \n" +
                "				requestQty,  \n" +
                "				TotalExtendedPrice,  \n" +
                "				TotalUnitPrice,  \n" +
                "				TotalAssemblyPrice,  \n" +
                "				TotalExcessPrice,  \n" +
                "				rfqPriceGroupId,  \n" +
                "				qty,  \n" +
                "				priceGroupName  \n" +
                "			FROM vu_getTotalPrice  \n" +
                "			WHERE rfqAssyid = prfqAssyID;  \n" +
                "  \n" +
                "			-- To Get list of all line with custom or non custom  \n" +
                "			SELECT 	rl.id,  \n" +
                "				MAX(c.iscustom) AS custom  \n" +
                "			FROM rfq_consolidated_mfgpn_lineitem rl  \n" +
                "			INNER JOIN rfq_consolidated_mfgpn_lineitem_alternate ra ON ra.consolidateid=rl.id  \n" +
                "			INNER JOIN COMPONENT c ON ra.mfgpnid=c.id  \n" +
                "			WHERE rl.rfqAssyID = prfqAssyID AND rl.isdeleted=0 AND ra.isdeleted = 0  \n" +
                "			GROUP BY rl.rfqAssyID, rl.id;  \n" +
                "  \n" +
                "			-- To Get result of all line have resticted parts  \n" +
                "			SELECT 	r.mfgPN,  \n" +
                "				r.mfgPNID,  \n" +
                "				r.consolidateID  \n" +
                "			FROM vu_rfq_consolidate_restic_part r  \n" +
                "			WHERE r.rfqAssyID = prfqAssyID;  \n" +
                "  \n" +
                "			DROP TEMPORARY TABLE IF EXISTS consolidatetemp;  \n" +
                "			DROP TEMPORARY TABLE IF EXISTS consolidatedQtytemp;  \n" +
                "    END;  \n" +
                /* **************************** New Script -> 10-02-2022  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetExcessMaterialLineItems` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetExcessMaterialLineItems`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN prfqAssyID INT,  \n" +
                "	IN puserID INT,  \n" +
                "	IN ppackageing TINYINT,  \n" +
                "	IN pcustomerID INT  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "  \n" +
                "	    DECLARE pOffset INT;  \n" +
                "            DECLARE rowNumWhere VARCHAR(255) ;  \n" +
                "	    SET @SQLString = NULL;  \n" +
                "	    SET @HavingClause = NULL;  \n" +
                "	    SET SESSION group_concat_max_len = 150000;  \n" +
                "	    IF (pOrderBy IS NOT NULL) THEN  \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "		ELSE  \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , \"`lineID` asc\") ;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "  \n" +
                "		IF(pWhereClause IS NULL OR pWhereClause = '\"\"') THEN  \n" +
                "			SET pWhereClause = '1=1' ;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "			SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "		ELSE  \n" +
                "			SET rowNumWhere = '';  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		SELECT CONCAT(IFNULL(MAX(a.QtyColumn),''), IFNULL(CONCAT(', ',MAX(a.GroupColumn),''),''))  INTO @SQLString  \n" +
                "		FROM (  \n" +
                "			SELECT GROUP_CONCAT(DISTINCT CONCAT(  \n" +
                "						'Max((IF(ra.requestQty = ''',  \n" +
                "						ra.requestQty,  \n" +
                "						''', (((IFNULL(rq.quoteQty,0))-(IFNULL(ra.requestQty,0) * IFNULL(rl.qpa,0) * (CASE WHEN  \n" +
                "						(SELECT connecterTypeID FROM component WHERE id=rq.componentid)= -2 THEN  \n" +
                "						IFNULL(rl.numOfPosition,1)  \n" +
                "						ELSE 1 END)))* (IFNULL(rq.unitPrice,0))) , null))) AS ''',  \n" +
                "						ra.requestQty,''''  \n" +
                "						)  \n" +
                "						) AS QtyColumn,  \n" +
                "				NULL GroupColumn  \n" +
                "			FROM rfq_consolidate_mfgpn_lineitem_quantity rq  \n" +
                "			JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID  \n" +
                "			JOIN rfq_consolidated_mfgpn_lineitem rl ON rq.consolidateID=rl.id  \n" +
                "			WHERE rl.rfqAssyID= prfqAssyID AND rq.isDeleted=0 AND ra.deletedAt IS NULL AND rq.rfqPriceGroupId IS NULL  \n" +
                "		UNION  \n" +
                "			SELECT NULL QtyColumn,  \n" +
                "				 GROUP_CONCAT(DISTINCT  \n" +
                "					CONCAT(  \n" +
                "						'Max((IF(ra.requestQty = ''',  \n" +
                "							ra.requestQty,  \n" +
                "						''', (((IFNULL(rq.quoteQty,0))-(IFNULL(ra.requestQty,0) * IFNULL(rl.qpa,0) * (CASE WHEN  \n" +
                "						(SELECT connecterTypeID FROM component WHERE id=rq.componentid)= -2 THEN  \n" +
                "						IFNULL(rl.numOfPosition,1)  \n" +
                "						ELSE 1 END)))* (IFNULL(rq.unitPrice,0))) , null))) AS ''',  \n" +
                "							pg.name,''''  \n" +
                "						)  \n" +
                "						) AS GroupColumn  \n" +
                "			   FROM rfq_consolidate_mfgpn_lineitem_quantity rq  \n" +
                "			   JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID  \n" +
                "			   JOIN  rfq_price_group pg ON pg.id = rq.rfqPriceGroupId  \n" +
                "			   LEFT JOIN rfq_consolidate_price_group_mfgpn_lineitem_quantity pgq ON pgq.refConsolidateLineitemQtyId = rq.id  \n" +
                "			   JOIN rfq_consolidated_mfgpn_lineitem rl ON rq.consolidateID=rl.id  \n" +
                "			   WHERE rl.rfqAssyID=prfqAssyID AND rq.isDeleted=0 AND ra.deletedAt IS NULL AND rq.rfqPriceGroupId IS NOT NULL  \n" +
                "		)a;  \n" +
                "  \n" +
                "		SELECT GROUP_CONCAT(DISTINCT CONCAT(  \n" +
                "					'Max((IF(ra.requestQty = ''',  \n" +
                "					ra.requestQty,  \n" +
                "					''', (((IFNULL(rq.quoteQty,0))-(IFNULL(ra.requestQty,0) * IFNULL(rl.qpa,0) * (CASE WHEN  \n" +
                "					(SELECT connecterTypeID FROM component WHERE id=rq.componentid)= -2 THEN  \n" +
                "					IFNULL(rl.numOfPosition,1) ELSE 1 END)))* (IFNULL(rq.unitPrice,0))) , null)))> 0') SEPARATOR ' OR ')  \n" +
                "		INTO @HavingClause  \n" +
                "		FROM rfq_consolidate_mfgpn_lineitem_quantity rq  \n" +
                "		JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID  \n" +
                "		JOIN rfq_consolidated_mfgpn_lineitem rl ON rq.consolidateID=rl.id  \n" +
                "		WHERE rl.rfqAssyID=prfqAssyID AND rq.isDeleted=0 AND ra.deletedAt IS NULL;  \n" +
                "  \n" +
                "		SET @SQLStatement_main = CONCAT(\" CREATE TEMPORARY TABLE IF NOT EXISTS consolidatedQtytemp AS  \n" +
                "							SELECT 	rl.id, \",  \n" +
                "							@SQLString,  \n" +
                "							\" FROM rfq_consolidated_mfgpn_lineitem rl  \n" +
                "							JOIN rfq_consolidate_mfgpn_lineitem_quantity rq ON rl.id=rq.consolidateID and rq.deletedAt is NULL  \n" +
                "							JOIN rfq_assy_quantity ra ON rq.qtyID=ra.id and ra.deletedAt is NULL  \n" +
                "							WHERE rl.isdeleted=0 AND  rl.rfqAssyID=\",prfqAssyID,\" GROUP BY rl.id\", ' HAVING ', @HavingClause);  \n" +
                "  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS consolidatedQtytemp;  \n" +
                "		PREPARE stmtMain FROM @SQLStatement_main;  \n" +
                "		EXECUTE stmtMain;  \n" +
                "		DEALLOCATE PREPARE stmtMain;  \n" +
                "  \n" +
                "		SET @SQLStatement = (SELECT fun_getCommonConsolidateLineItems_New(prfqAssyID,pcustomerID,ppackageing));  \n" +
                "  \n" +
                "  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS consolidatetemp;  \n" +
                "		PREPARE stmt FROM @SQLStatement;  \n" +
                "		EXECUTE stmt;  \n" +
                "		DEALLOCATE PREPARE stmt;  \n" +
                "  \n" +
                "		SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1)  FROM consolidatetemp co JOIN consolidatedQtytemp coq ON coq.id = co.id where \", pWhereClause );  \n" +
                "		PREPARE query1 FROM @SQLStatement1;  \n" +
                "		EXECUTE query1;  \n" +
                "		DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "		SET @SQLStatement12 = CONCAT(\"SELECT co.*, coq.* FROM  consolidatetemp co JOIN consolidatedQtytemp coq ON coq.id = co.id where \", pWhereClause , \" \" , pOrderBy , rowNumWhere );  \n" +
                "		PREPARE query12 FROM @SQLStatement12;  \n" +
                "		EXECUTE query12;  \n" +
                "		DEALLOCATE PREPARE query12;  \n" +
                "  \n" +
                "		-- To Get Pricing service status data  \n" +
                "		SELECT  id,  \n" +
                "			rfqAssyID,  \n" +
                "			pricingApiName,  \n" +
                "			`status`,  \n" +
                "			msg,  \n" +
                "			errorMsg,  \n" +
                "			userID,  \n" +
                "			consolidateID,  \n" +
                "			isPurchaseApi,  \n" +
                "			pricingSupplierID  \n" +
                "		FROM rfq_lineitem_autopricingstatus  \n" +
                "		WHERE rfqAssyID = prfqAssyID AND isPurchaseApi = 0 AND `status` IS NOT NULL ;  \n" +
                "  \n" +
                "		-- To Get rfq turn time price group details  \n" +
                "		SELECT 	qtyTimeID,  \n" +
                "			turnTime,  \n" +
                "			unitOfTime,  \n" +
                "			rfqAssyQtyID,  \n" +
                "			requestQty,  \n" +
                "			rfqPriceGroupId,  \n" +
                "			priceGroup  \n" +
                "		FROM vu_getrfqqtyturntimepricegroupdetails  \n" +
                "		WHERE rfqAssyID = prfqAssyID;  \n" +
                "  \n" +
                "		-- To Get Selected Part details  \n" +
                "		SELECT 	requestQty,  \n" +
                "			finalPrice,  \n" +
                "			unitPrice,  \n" +
                "			supplier,  \n" +
                "			`min`,  \n" +
                "			mult,  \n" +
                "			selectedMpn,  \n" +
                "			selectionMode,  \n" +
                "			qtyID,  \n" +
                "			currentStock,  \n" +
                "			leadTime,  \n" +
                "			supplierStock,  \n" +
                "			grossStock,  \n" +
                "			componentid,  \n" +
                "			selectedPIDCode,  \n" +
                "			pricingSuppliers,  \n" +
                "			packaging,  \n" +
                "			rfqQtySupplierID,  \n" +
                "			unitEachPrice,  \n" +
                "			quoteQtyEach,  \n" +
                "			supplierEachStcok,  \n" +
                "			ApiNoOfPosition,  \n" +
                "			qpa,  \n" +
                "			abbreviation,  \n" +
                "			quoteQty,  \n" +
                "			connecterTypeID,  \n" +
                "			noOfRows,  \n" +
                "			pricenotselectreason,  \n" +
                "			isBomUpdate,  \n" +
                "			rfqPriceGroupId,  \n" +
                "			priceGroupName,  \n" +
                "			consolidatedQty,  \n" +
                "			authorizeType,  \n" +
                "			consolidateID,  \n" +
                "			refSupplierID  \n" +
                "		FROM vu_getselectedPartDetail  \n" +
                "		WHERE rfqAssyID = prfqAssyID;  \n" +
                "  \n" +
                "		-- To Get total price of consolidated lines  \n" +
                "		SELECT 	qtyID,  \n" +
                "			requestQty,  \n" +
                "			TotalExtendedPrice,  \n" +
                "			TotalUnitPrice,  \n" +
                "			TotalAssemblyPrice,  \n" +
                "			TotalExcessPrice,  \n" +
                "			rfqPriceGroupId,  \n" +
                "			qty,  \n" +
                "			priceGroupName  \n" +
                "		FROM vu_getTotalPrice  \n" +
                "		WHERE rfqAssyid = prfqAssyID;  \n" +
                "  \n" +
                "		-- To Get list of all line with custom or non custom  \n" +
                "		SELECT 	rl.id,  \n" +
                "			MAX(c.iscustom) AS custom  \n" +
                "		FROM rfq_consolidated_mfgpn_lineitem rl  \n" +
                "		INNER JOIN rfq_consolidated_mfgpn_lineitem_alternate ra ON ra.consolidateid=rl.id  \n" +
                "		INNER JOIN COMPONENT c ON ra.mfgpnid=c.id  \n" +
                "		WHERE rl.rfqAssyID = prfqAssyID AND rl.isdeleted=0 AND ra.isdeleted = 0  \n" +
                "		GROUP BY rl.id;  \n" +
                "  \n" +
                "		-- To Get result of all line have resticted parts  \n" +
                "		SELECT 	r.mfgPN,  \n" +
                "			r.mfgPNID,  \n" +
                "			r.consolidateID  \n" +
                "		FROM vu_rfq_consolidate_restic_part r  \n" +
                "		WHERE r.rfqAssyID = prfqAssyID;  \n" +
                "  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS consolidatetemp;  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS consolidatedQtytemp;  \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** New Script -> 10-02-2022  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetLeadTimeRiskLineItems` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetLeadTimeRiskLineItems`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN prfqAssyID INT,  \n" +
                "	IN puserID INT,  \n" +
                "	IN pleadTime INT,  \n" +
                "	IN ppackageing TINYINT,  \n" +
                "	IN pcustomerID INT  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "  \n" +
                "	    DECLARE pOffset INT;  \n" +
                "	    DECLARE rowNumWhere VARCHAR(255) ;  \n" +
                "	    SET @SQLString = NULL;  \n" +
                "	    SET @HavingClause = NULL;  \n" +
                "	    IF (pOrderBy IS NOT NULL) THEN  \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "		ELSE  \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , \"`lineId` asc\") ;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "  \n" +
                "		IF(pWhereClause IS NULL OR pWhereClause = '\"\"') THEN  \n" +
                "			SET pWhereClause = '1=1' ;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "			SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "		ELSE  \n" +
                "			SET rowNumWhere = '';  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		SELECT CONCAT(IFNULL(MAX(a.QtyColumn),''), IFNULL(CONCAT(', ',MAX(a.GroupColumn),''),'')) INTO @SQLString  \n" +
                "		FROM (  \n" +
                "			SELECT GROUP_CONCAT(DISTINCT  \n" +
                "					CONCAT(  \n" +
                "						'Max((IF(ra.requestQty = ''',  \n" +
                "							ra.requestQty,  \n" +
                "						''', (IFNULL(rq.leadTime,0)), null))) AS ''',  \n" +
                "							ra.requestQty,''''  \n" +
                "						)  \n" +
                "						) AS QtyColumn,  \n" +
                "					NULL GroupColumn  \n" +
                "			FROM rfq_consolidate_mfgpn_lineitem_quantity rq  \n" +
                "			JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID  \n" +
                "			JOIN rfq_consolidated_mfgpn_lineitem rl ON rq.consolidateID=rl.id  \n" +
                "			WHERE rl.rfqAssyID = prfqAssyID AND rq.isDeleted=0 AND ra.deletedAt IS NULL AND rq.rfqPriceGroupId IS NULL  \n" +
                "		UNION  \n" +
                "			SELECT 	NULL QtyColumn,  \n" +
                "				GROUP_CONCAT(DISTINCT  \n" +
                "					CONCAT(  \n" +
                "						'Max((IF(ra.requestQty = ''',  \n" +
                "							ra.requestQty,  \n" +
                "						''', rq.finalPrice, null))) AS ''',  \n" +
                "							pg.name,''''  \n" +
                "						))AS GroupColumn  \n" +
                "			   FROM rfq_consolidate_mfgpn_lineitem_quantity rq  \n" +
                "			   JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID  \n" +
                "			   JOIN  rfq_price_group pg ON pg.id = rq.rfqPriceGroupId  \n" +
                "			   LEFT JOIN rfq_consolidate_price_group_mfgpn_lineitem_quantity pgq ON pgq.refConsolidateLineitemQtyId = rq.id  \n" +
                "			   JOIN rfq_consolidated_mfgpn_lineitem rl ON rq.consolidateID=rl.id  \n" +
                "			   WHERE rl.rfqAssyID=prfqAssyID AND rq.isDeleted=0 AND ra.deletedAt IS NULL AND rq.rfqPriceGroupId IS NOT NULL  \n" +
                "		)a;  \n" +
                "  \n" +
                "		SELECT GROUP_CONCAT(DISTINCT  \n" +
                "				CONCAT(  \n" +
                "					'((Max((IF(ra.requestQty = ''',  \n" +
                "						ra.requestQty,  \n" +
                "					''', (IFNULL(rq.leadTime,0)), null)))))'  \n" +
                "					) SEPARATOR ' OR '  \n" +
                "					)  \n" +
                "				INTO @HavingClause  \n" +
                "		FROM rfq_consolidate_mfgpn_lineitem_quantity rq  \n" +
                "		JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID  \n" +
                "		JOIN rfq_consolidated_mfgpn_lineitem rl ON rq.consolidateID=rl.id  \n" +
                "		WHERE rl.rfqAssyID=prfqAssyID AND rq.isDeleted=0 AND ra.deletedAt IS NULL;  \n" +
                "  \n" +
                "		SET @SQLStatement_main = CONCAT(\" CREATE TEMPORARY TABLE IF NOT EXISTS consolidatedQtytemp AS  \n" +
                "							SELECT 	rl.id, \",  \n" +
                "							@SQLString,  \n" +
                "							\" FROM rfq_consolidated_mfgpn_lineitem rl  \n" +
                "							JOIN rfq_consolidate_mfgpn_lineitem_quantity rq ON rl.id=rq.consolidateID and rq.deletedAt is NULL  \n" +
                "							JOIN rfq_assy_quantity ra ON rq.qtyID=ra.id and ra.deletedAt is NULL  \n" +
                "							WHERE rl.isdeleted=0 AND  rl.rfqAssyID=\",prfqAssyID,\" GROUP BY rl.id\", ' HAVING ', @HavingClause);  \n" +
                "  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS consolidatedQtytemp;  \n" +
                "		PREPARE stmtMain FROM @SQLStatement_main;  \n" +
                "		EXECUTE stmtMain;  \n" +
                "		DEALLOCATE PREPARE stmtMain;  \n" +
                "  \n" +
                "		SET @SQLStatement = CONCAT('CREATE TEMPORARY TABLE IF NOT EXISTS consolidatetemp AS  \n" +
                "								SELECT  rl.id,  \n" +
                "									rl.isPurchase,  \n" +
                "									rl.numOfPosition,  \n" +
                "									rl.lineID,  \n" +
                "									rl.rfqLineItemID,  \n" +
                "									rl.rfqAssyID,  \n" +
                "									rl.uomID,  \n" +
                "									rl.consolidatedpartlineID,  \n" +
                "									fun_getUnitAbbrivationByID(rl.uomID) unitName,  \n" +
                "									rl.isqpaMismatch,  \n" +
                "                                    custP.PIDCode as CPNPID,  \n" +
                "									rl.custPNID,  \n" +
                "									custp.custAssyPN as cpncustAssyPN,  \n" +
                "									fun_getRoHSIconByID(custp.RoHSStatusID) as CPNRoHSIcon,  \n" +
                "									fun_getRoHSNameByID(custp.RoHSStatusID) as CPNRoHSName,  \n" +
                "									rl.restrictCPNUseInBOMStep,  \n" +
                "									rl.restrictCPNUsePermanentlyStep,  \n" +
                "									rl.restrictCPNUseWithPermissionStep,  \n" +
                "									(SELECT fun_getMountingTypeOfConsolidatePart(rl.id)) AS `name`,  \n" +
                "									(SELECT fun_getPartTypeOfConsolidatePart(rl.id)) AS `partTypeName`,  \n" +
                "									rl.qpa,',  \n" +
                "									(SELECT fun_getCommonConsolidateLineMFGPN_New(ppackageing,prfqAssyID,pcustomerID)),  \n" +
                "								' FROM rfq_consolidated_mfgpn_lineitem rl  \n" +
                "								JOIN rfq_consolidate_mfgpn_lineitem_quantity rq ON rl.id=rq.consolidateID and rq.deletedAt is NULL  \n" +
                "								JOIN rfq_assy_quantity ra ON rq.qtyID=ra.id and ra.deletedAt is NULL  \n" +
                "                                Left Join component custP on custp.id = rl.custPNID  \n" +
                "								WHERE rl.isdeleted=0 and IFNULL(rq.leadTime,0)>',pleadTime,' AND  ( IFNULL(rq.quoteQty,0) > IFNULL(rq.currentStock,0)) AND  rl.rfqAssyID=',prfqAssyID,'');  \n" +
                "			DROP TEMPORARY TABLE IF EXISTS consolidatetemp;  \n" +
                "			PREPARE stmt FROM @SQLStatement;  \n" +
                "			EXECUTE stmt;  \n" +
                "			DEALLOCATE PREPARE stmt;  \n" +
                "  \n" +
                "			SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1)  FROM consolidatetemp  co JOIN consolidatedQtytemp coq ON coq.id = co.id  where \", pWhereClause );  \n" +
                "			PREPARE query1 FROM @SQLStatement1;  \n" +
                "			EXECUTE query1;  \n" +
                "			DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "  \n" +
                "			SET @SQLStatement2 = CONCAT(\"SELECT co.*, coq.* FROM  consolidatetemp co  \n" +
                "										JOIN consolidatedQtytemp coq ON coq.id = co.id  \n" +
                "											where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "			PREPARE query2 FROM @SQLStatement2;  \n" +
                "			EXECUTE query2;  \n" +
                "			DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "			-- To Get Pricing service status data  \n" +
                "			SELECT  id,  \n" +
                "				rfqAssyID,  \n" +
                "				pricingApiName,  \n" +
                "				`status`,  \n" +
                "				msg,  \n" +
                "				errorMsg,  \n" +
                "				userID,  \n" +
                "				consolidateID,  \n" +
                "				isPurchaseApi,  \n" +
                "				pricingSupplierID  \n" +
                "			FROM rfq_lineitem_autopricingstatus  \n" +
                "			WHERE rfqAssyID = prfqAssyID AND isPurchaseApi = 0 AND `status` IS NOT NULL ;  \n" +
                "  \n" +
                "			-- To Get rfq turn time price group details  \n" +
                "			SELECT 	qtyTimeID,  \n" +
                "				turnTime,  \n" +
                "				unitOfTime,  \n" +
                "				rfqAssyQtyID,  \n" +
                "				requestQty,  \n" +
                "				rfqPriceGroupId,  \n" +
                "				priceGroup  \n" +
                "			FROM vu_getrfqqtyturntimepricegroupdetails  \n" +
                "			WHERE rfqAssyID = prfqAssyID;  \n" +
                "			-- To Get Selected Part details  \n" +
                "			SELECT 	requestQty,  \n" +
                "				finalPrice,  \n" +
                "				unitPrice,  \n" +
                "				supplier,  \n" +
                "				`min`,  \n" +
                "				mult,  \n" +
                "				selectedMpn,  \n" +
                "				selectionMode,  \n" +
                "				qtyID,  \n" +
                "				currentStock,  \n" +
                "				leadTime,  \n" +
                "				supplierStock,  \n" +
                "				grossStock,  \n" +
                "				componentid,  \n" +
                "				selectedPIDCode,  \n" +
                "				pricingSuppliers,  \n" +
                "				packaging,  \n" +
                "				rfqQtySupplierID,  \n" +
                "				unitEachPrice,  \n" +
                "				quoteQtyEach,  \n" +
                "				supplierEachStcok,  \n" +
                "				ApiNoOfPosition,  \n" +
                "				qpa,  \n" +
                "				abbreviation,  \n" +
                "				quoteQty,  \n" +
                "				connecterTypeID,  \n" +
                "				noOfRows,  \n" +
                "				pricenotselectreason,  \n" +
                "				isBomUpdate,  \n" +
                "				rfqPriceGroupId,  \n" +
                "				priceGroupName,  \n" +
                "				consolidatedQty,  \n" +
                "				authorizeType,  \n" +
                "				consolidateID ,  \n" +
                "				refSupplierID  \n" +
                "			FROM vu_getselectedPartDetail  \n" +
                "			WHERE rfqAssyID = prfqAssyID;  \n" +
                "  \n" +
                "			-- To Get total price of consolidated lines  \n" +
                "			SELECT 	qtyID,  \n" +
                "				requestQty,  \n" +
                "				TotalExtendedPrice,  \n" +
                "				TotalUnitPrice,  \n" +
                "				TotalAssemblyPrice,  \n" +
                "				TotalExcessPrice,  \n" +
                "				rfqPriceGroupId,  \n" +
                "				qty,  \n" +
                "				priceGroupName  \n" +
                "			FROM vu_getTotalPrice  \n" +
                "			WHERE rfqAssyid = prfqAssyID;  \n" +
                "  \n" +
                "			-- To Get list of all line with custom or non custom  \n" +
                "			SELECT 	rl.id,  \n" +
                "				MAX(c.iscustom) AS custom  \n" +
                "			FROM rfq_consolidated_mfgpn_lineitem rl  \n" +
                "			INNER JOIN rfq_consolidated_mfgpn_lineitem_alternate ra ON ra.consolidateid=rl.id  \n" +
                "			INNER JOIN COMPONENT c ON ra.mfgpnid=c.id  \n" +
                "			WHERE rl.rfqAssyID = prfqAssyID AND rl.isdeleted=0 AND ra.isdeleted = 0  \n" +
                "			GROUP BY rl.id;  \n" +
                "  \n" +
                "			-- To Get result of all line have resticted parts  \n" +
                "			SELECT 	r.mfgPN,  \n" +
                "				r.mfgPNID,  \n" +
                "				r.consolidateID  \n" +
                "			FROM vu_rfq_consolidate_restic_part r  \n" +
                "			WHERE r.rfqAssyID = prfqAssyID;  \n" +
                "  \n" +
                "			DROP TEMPORARY TABLE IF EXISTS consolidatetemp;  \n" +
                "			DROP TEMPORARY TABLE IF EXISTS consolidatedQtytemp;  \n" +
                "    END;  \n" +
                /* **************************** New Script -> 10-02-2022  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetRFQConsolidateRfqLineItem` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetRFQConsolidateRfqLineItem`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN prfqAssyID INT,  \n" +
                "	IN puserID INT,  \n" +
                "	IN ppackageing TINYINT,  \n" +
                "	IN pcustomerID INT  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "	    DECLARE pOffset INT;  \n" +
                "		DECLARE ppartid INT;  \n" +
                "	    DECLARE rowNumWhere VARCHAR(255) ;  \n" +
                "  \n" +
                "	    SET @SQLString = NULL;  \n" +
                "  \n" +
                "		IF (pOrderBy IS NOT NULL) THEN  \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "		ELSE  \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , \"lineid asc\") ;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF(pWhereClause IS NULL OR pWhereClause = '\"\"') THEN  \n" +
                "			SET pWhereClause = '1=1' ;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "			SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "		ELSE  \n" +
                "			SET rowNumWhere = '';  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		SELECT CONCAT(IFNULL(MAX(a.QtyColumn),''), IFNULL(CONCAT(', ',MAX(a.GroupColumn),''),''))  INTO @SQLString  \n" +
                "		FROM (  \n" +
                "			SELECT GROUP_CONCAT(DISTINCT  \n" +
                "					CONCAT(  \n" +
                "						'Max((IF(ra.requestQty = ''',  \n" +
                "							ra.requestQty,  \n" +
                "						''', rq.finalPrice, null))) AS ''',  \n" +
                "							ra.requestQty,''''  \n" +
                "						)  \n" +
                "						) AS QtyColumn,  \n" +
                "				NULL GroupColumn  \n" +
                "				FROM rfq_consolidate_mfgpn_lineitem_quantity rq  \n" +
                "				JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID  \n" +
                "				JOIN rfq_consolidated_mfgpn_lineitem rl ON rq.consolidateID=rl.id  \n" +
                "				WHERE rl.rfqAssyID= prfqAssyID AND rq.isDeleted=0 AND ra.deletedAt IS NULL AND ra.rfqPriceGroupId IS NULL  \n" +
                "			UNION  \n" +
                "			SELECT  NULL QtyColumn,  \n" +
                "				GROUP_CONCAT(DISTINCT  \n" +
                "					CONCAT(  \n" +
                "						'Max((IF(ra.requestQty = ''',  \n" +
                "							ra.requestQty,  \n" +
                "						''', rq.finalPrice, null))) AS ''',  \n" +
                "							pg.name,''''  \n" +
                "						)  \n" +
                "						) AS GroupColumn  \n" +
                "				   FROM rfq_consolidate_mfgpn_lineitem_quantity rq  \n" +
                "				   JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID  \n" +
                "				   JOIN  rfq_price_group pg ON pg.id = rq.rfqPriceGroupId  \n" +
                "				   LEFT JOIN rfq_consolidate_price_group_mfgpn_lineitem_quantity pgq ON pgq.refConsolidateLineitemQtyId = rq.id  \n" +
                "				   JOIN rfq_consolidated_mfgpn_lineitem rl ON rq.consolidateID=rl.id  \n" +
                "				   WHERE rl.rfqAssyID= prfqAssyID AND rq.isDeleted=0 AND ra.deletedAt IS NULL AND rq.rfqPriceGroupId IS NOT NULL  \n" +
                "		)a;  \n" +
                "		SET @SQLStatement_main = CONCAT(\" CREATE TEMPORARY TABLE IF NOT EXISTS consolidatedQtytemp AS  \n" +
                "							SELECT 	rl.id, \",  \n" +
                "							@SQLString,  \n" +
                "							\" FROM rfq_consolidated_mfgpn_lineitem rl  \n" +
                "							JOIN rfq_consolidate_mfgpn_lineitem_quantity rq ON rl.id=rq.consolidateID and rq.deletedAt is NULL  \n" +
                "							JOIN rfq_assy_quantity ra ON rq.qtyID=ra.id and ra.deletedAt is NULL  \n" +
                "							WHERE rl.isdeleted=0 AND  rl.rfqAssyID=\",prfqAssyID,\" GROUP BY rl.id\");  \n" +
                "  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS consolidatedQtytemp;  \n" +
                "		PREPARE stmtMain FROM @SQLStatement_main;  \n" +
                "		EXECUTE stmtMain;  \n" +
                "		DEALLOCATE PREPARE stmtMain;  \n" +
                "  \n" +
                "		SET @SQLStatement = (SELECT fun_getCommonConsolidateLineItems_New(prfqAssyID,pcustomerID,ppackageing));  \n" +
                "  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS consolidatetemp;  \n" +
                "		PREPARE stmt FROM @SQLStatement;  \n" +
                "		-- SELECT @SQLStatement;  \n" +
                "		EXECUTE stmt;  \n" +
                "		DEALLOCATE PREPARE stmt;  \n" +
                "  \n" +
                "		SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1)  FROM consolidatetemp co JOIN consolidatedQtytemp coq ON coq.id = co.id  where \", pWhereClause );  \n" +
                "		PREPARE query1 FROM @SQLStatement1;  \n" +
                "		EXECUTE query1;  \n" +
                "		DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "		SET @SQLStatement12 = CONCAT(\"SELECT co.*, coq.* FROM  consolidatetemp co JOIN consolidatedQtytemp coq ON coq.id = co.id where \", pWhereClause , \" \" , pOrderBy , rowNumWhere );  \n" +
                "		PREPARE query12 FROM @SQLStatement12;  \n" +
                "		EXECUTE query12;  \n" +
                "		DEALLOCATE PREPARE query12;  \n" +
                "  \n" +
                "		-- To Get Pricing service status data  \n" +
                "		SELECT  id,  \n" +
                "			rfqAssyID,  \n" +
                "			pricingApiName,  \n" +
                "			`status`,  \n" +
                "			msg,  \n" +
                "			errorMsg,  \n" +
                "			userID,  \n" +
                "			consolidateID,  \n" +
                "			isPurchaseApi,  \n" +
                "			pricingSupplierID  \n" +
                "		FROM rfq_lineitem_autopricingstatus  \n" +
                "		WHERE rfqAssyID = prfqAssyID AND isPurchaseApi = 0 AND `status` IS NOT NULL ;  \n" +
                "  \n" +
                "		-- To Get rfq turn time price group details  \n" +
                "		SELECT 	qtyTimeID,  \n" +
                "			turnTime,  \n" +
                "			unitOfTime,  \n" +
                "			rfqAssyQtyID,  \n" +
                "			requestQty,  \n" +
                "			rfqPriceGroupId,  \n" +
                "			priceGroup  \n" +
                "		FROM vu_getrfqqtyturntimepricegroupdetails  \n" +
                "		WHERE rfqAssyID = prfqAssyID;  \n" +
                "  \n" +
                "		-- To Get Selected Part details  \n" +
                "		SELECT 	requestQty,  \n" +
                "			finalPrice,  \n" +
                "			unitPrice,  \n" +
                "			supplier,  \n" +
                "			`min`,  \n" +
                "			mult,  \n" +
                "			selectedMpn,  \n" +
                "			selectionMode,  \n" +
                "			qtyID,  \n" +
                "			currentStock,  \n" +
                "			leadTime,  \n" +
                "			supplierStock,  \n" +
                "			grossStock,  \n" +
                "			componentid,  \n" +
                "			selectedPIDCode,  \n" +
                "			pricingSuppliers,  \n" +
                "			packaging,  \n" +
                "			rfqQtySupplierID,  \n" +
                "			unitEachPrice,  \n" +
                "			quoteQtyEach,  \n" +
                "			supplierEachStcok,  \n" +
                "			ApiNoOfPosition,  \n" +
                "			qpa,  \n" +
                "			abbreviation,  \n" +
                "			quoteQty,  \n" +
                "			connecterTypeID,  \n" +
                "			noOfRows,  \n" +
                "			pricenotselectreason,  \n" +
                "			isBomUpdate,  \n" +
                "			rfqPriceGroupId,  \n" +
                "			priceGroupName,  \n" +
                "			consolidatedQty,  \n" +
                "			authorizeType,  \n" +
                "			consolidateID,  \n" +
                "			refSupplierID  \n" +
                "		FROM vu_getselectedPartDetail  \n" +
                "		WHERE rfqAssyID = prfqAssyID;  \n" +
                "  \n" +
                "		-- To Get total price of consolidated lines  \n" +
                "		SELECT 	qtyID,  \n" +
                "			requestQty,  \n" +
                "			TotalExtendedPrice,  \n" +
                "			TotalUnitPrice,  \n" +
                "			TotalAssemblyPrice,  \n" +
                "			TotalExcessPrice,  \n" +
                "			rfqPriceGroupId,  \n" +
                "			qty,  \n" +
                "			priceGroupName  \n" +
                "		FROM vu_getTotalPrice  \n" +
                "		WHERE rfqAssyid = prfqAssyID;  \n" +
                "  \n" +
                "		-- To Get list of all line with custom or non custom  \n" +
                "		SELECT 	rl.id,  \n" +
                "			MAX(c.iscustom) AS custom  \n" +
                "		FROM rfq_consolidated_mfgpn_lineitem rl  \n" +
                "		INNER JOIN rfq_consolidated_mfgpn_lineitem_alternate ra ON ra.consolidateid=rl.id  \n" +
                "		INNER JOIN COMPONENT c ON ra.mfgpnid=c.id  \n" +
                "		WHERE rl.rfqAssyID = prfqAssyID AND rl.isdeleted=0 AND ra.isdeleted = 0  \n" +
                "		GROUP BY rl.rfqAssyID, rl.id;  \n" +
                "  \n" +
                "		-- To Get result of all line have resticted parts  \n" +
                "		SELECT 	r.mfgPN,  \n" +
                "			r.mfgPNID,  \n" +
                "			r.consolidateID  \n" +
                "		FROM vu_rfq_consolidate_restic_part r  \n" +
                "		WHERE r.rfqAssyID = prfqAssyID;  \n" +
                "  \n" +
                "		SET @SQLStatement9= (SELECT fun_getCustomPartData(prfqAssyID));  \n" +
                "		PREPARE query9 FROM @SQLStatement9;  \n" +
                "		EXECUTE query9;  \n" +
                "		DEALLOCATE PREPARE query9;  \n" +
                "  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS consolidatetemp;  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS consolidatedQtytemp;  \n" +
                "    END;  \n" +
                /* **************************** New Script -> 10-02-2022  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetRFQCostingNotRequireLineItem` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetRFQCostingNotRequireLineItem`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN prfqAssyID INT,  \n" +
                "	IN puserID INT,  \n" +
                "	IN ppackageing TINYINT,  \n" +
                "	IN pcustomerID INT  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "  \n" +
                "	    DECLARE pOffset INT;  \n" +
                "	 DECLARE rowNumWhere VARCHAR(255) ;  \n" +
                "	    SET @SQLString = NULL;  \n" +
                "	    SET @HavingClause = NULL;  \n" +
                "	    SET SESSION group_concat_max_len = 150000;  \n" +
                "	    IF (pOrderBy IS NOT NULL) THEN  \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "		ELSE  \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , \"`mfgPn` desc\") ;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "  \n" +
                "		IF(pWhereClause IS NULL OR pWhereClause = '\"\"') THEN  \n" +
                "			SET pWhereClause = '1=1' ;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "			SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "		ELSE  \n" +
                "			SET rowNumWhere = '';  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		SELECT CONCAT(IFNULL(MAX(a.QtyColumn),''), IFNULL(CONCAT(', ',MAX(a.GroupColumn),''),''))  INTO @SQLString  \n" +
                "		FROM (  \n" +
                "			SELECT GROUP_CONCAT(DISTINCT  \n" +
                "					CONCAT(  \n" +
                "						'Max((IF(ra.requestQty = ''',  \n" +
                "							ra.requestQty,  \n" +
                "						''', rq.finalPrice, null))) AS ''',  \n" +
                "							ra.requestQty,''''  \n" +
                "						)  \n" +
                "						) AS QtyColumn,  \n" +
                "				NULL GroupColumn  \n" +
                "				FROM rfq_consolidate_mfgpn_lineitem_quantity rq  \n" +
                "				JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID  \n" +
                "				JOIN rfq_consolidated_mfgpn_lineitem rl ON rq.consolidateID=rl.id  \n" +
                "				WHERE rl.rfqAssyID=prfqAssyID AND rq.isDeleted=0 AND ra.deletedAt IS NULL AND ra.rfqPriceGroupId IS NULL  \n" +
                "			UNION  \n" +
                "			SELECT  NULL QtyColumn,  \n" +
                "				GROUP_CONCAT(DISTINCT  \n" +
                "					CONCAT(  \n" +
                "						'Max((IF(ra.requestQty = ''',  \n" +
                "							ra.requestQty,  \n" +
                "						''', rq.finalPrice, null))) AS ''',  \n" +
                "							pg.name,''''  \n" +
                "						)  \n" +
                "						) AS GroupColumn  \n" +
                "				   FROM rfq_consolidate_mfgpn_lineitem_quantity rq  \n" +
                "				   JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID  \n" +
                "				   JOIN  rfq_price_group pg ON pg.id = rq.rfqPriceGroupId  \n" +
                "				   LEFT JOIN rfq_consolidate_price_group_mfgpn_lineitem_quantity pgq ON pgq.refConsolidateLineitemQtyId = rq.id  \n" +
                "				   JOIN rfq_consolidated_mfgpn_lineitem rl ON rq.consolidateID=rl.id  \n" +
                "				   WHERE rl.rfqAssyID=prfqAssyID AND rq.isDeleted=0 AND ra.deletedAt IS NULL AND rq.rfqPriceGroupId IS NOT NULL  \n" +
                "		)a;  \n" +
                "  \n" +
                "			SELECT GROUP_CONCAT(DISTINCT  \n" +
                "					CONCAT(  \n" +
                "						'Max((IF(ra.requestQty = ''',  \n" +
                "							ra.requestQty,  \n" +
                "						''', rq.finalPrice, null))) IS NULL'  \n" +
                "						) SEPARATOR ' OR '  \n" +
                "						)  \n" +
                "					INTO @HavingClause  \n" +
                "			FROM rfq_consolidate_mfgpn_lineitem_quantity rq  \n" +
                "			JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID  \n" +
                "			JOIN rfq_consolidated_mfgpn_lineitem rl ON rq.consolidateID=rl.id  \n" +
                "			WHERE rl.rfqAssyID=prfqAssyID AND rq.isDeleted=0 AND ra.deletedAt IS NULL;  \n" +
                "  \n" +
                "			SET @SQLStatement_main = CONCAT(\" CREATE TEMPORARY TABLE IF NOT EXISTS consolidatedQtytemp AS  \n" +
                "							SELECT 	rl.id, \",  \n" +
                "							@SQLString,  \n" +
                "							\" FROM rfq_consolidated_mfgpn_lineitem rl  \n" +
                "							JOIN rfq_consolidate_mfgpn_lineitem_quantity rq ON rl.id=rq.consolidateID and rq.deletedAt is NULL  \n" +
                "							JOIN rfq_assy_quantity ra ON rq.qtyID=ra.id and ra.deletedAt is NULL  \n" +
                "							WHERE rl.isdeleted=0 AND  rl.rfqAssyID=\",prfqAssyID,\" GROUP BY rl.id\", ' HAVING ', @HavingClause);  \n" +
                "  \n" +
                "			DROP TEMPORARY TABLE IF EXISTS consolidatedQtytemp;  \n" +
                "			PREPARE stmtMain FROM @SQLStatement_main;  \n" +
                "			EXECUTE stmtMain;  \n" +
                "			DEALLOCATE PREPARE stmtMain;  \n" +
                "  \n" +
                "			SET @SQLStatement = (SELECT fun_getCommonConsolidateLineItems_New(prfqAssyID,pcustomerID,ppackageing));  \n" +
                "  \n" +
                "			DROP TEMPORARY TABLE IF EXISTS consolidatetemp;  \n" +
                "			PREPARE stmt FROM @SQLStatement;  \n" +
                "			-- SELECT @SQLStatement;  \n" +
                "			EXECUTE stmt;  \n" +
                "			DEALLOCATE PREPARE stmt;  \n" +
                "  \n" +
                "			SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1)  FROM consolidatetemp co JOIN consolidatedQtytemp coq ON coq.id = co.id and co.isPurchase = 0 where \", pWhereClause );  \n" +
                "			PREPARE query1 FROM @SQLStatement1;  \n" +
                "			EXECUTE query1;  \n" +
                "			DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "  \n" +
                "			SET @SQLStatement12 = CONCAT(\"SELECT co.*, coq.* FROM  consolidatetemp co JOIN consolidatedQtytemp coq ON coq.id = co.id and co.isPurchase = 0 where \", pWhereClause , \" \" , pOrderBy , rowNumWhere );  \n" +
                "			PREPARE query12 FROM @SQLStatement12;  \n" +
                "			EXECUTE query12;  \n" +
                "			DEALLOCATE PREPARE query12;  \n" +
                "  \n" +
                "			-- To Get Pricing service status data  \n" +
                "			SELECT  id,  \n" +
                "				rfqAssyID,  \n" +
                "				pricingApiName,  \n" +
                "				`status`,  \n" +
                "				msg,  \n" +
                "				errorMsg,  \n" +
                "				userID,  \n" +
                "				consolidateID,  \n" +
                "				isPurchaseApi,  \n" +
                "				pricingSupplierID  \n" +
                "			FROM rfq_lineitem_autopricingstatus  \n" +
                "			WHERE rfqAssyID = prfqAssyID AND isPurchaseApi = 0 AND `status` IS NOT NULL ;  \n" +
                "  \n" +
                "			-- To Get rfq turn time price group details  \n" +
                "			SELECT 	qtyTimeID,  \n" +
                "				turnTime,  \n" +
                "				unitOfTime,  \n" +
                "				rfqAssyQtyID,  \n" +
                "				requestQty,  \n" +
                "				rfqPriceGroupId,  \n" +
                "				priceGroup  \n" +
                "			FROM vu_getrfqqtyturntimepricegroupdetails  \n" +
                "			WHERE rfqAssyID = prfqAssyID;  \n" +
                "  \n" +
                "			-- To Get Selected Part details  \n" +
                "			SELECT 	requestQty,  \n" +
                "				finalPrice,  \n" +
                "				unitPrice,  \n" +
                "				supplier,  \n" +
                "				`min`,  \n" +
                "				mult,  \n" +
                "				selectedMpn,  \n" +
                "				selectionMode,  \n" +
                "				qtyID,  \n" +
                "				currentStock,  \n" +
                "				leadTime,  \n" +
                "				supplierStock,  \n" +
                "				grossStock,  \n" +
                "				componentid,  \n" +
                "				selectedPIDCode,  \n" +
                "				pricingSuppliers,  \n" +
                "				packaging,  \n" +
                "				rfqQtySupplierID,  \n" +
                "				unitEachPrice,  \n" +
                "				quoteQtyEach,  \n" +
                "				supplierEachStcok,  \n" +
                "				ApiNoOfPosition,  \n" +
                "				qpa,  \n" +
                "				abbreviation,  \n" +
                "				quoteQty,  \n" +
                "				connecterTypeID,  \n" +
                "				noOfRows,  \n" +
                "				pricenotselectreason,  \n" +
                "				isBomUpdate,  \n" +
                "				rfqPriceGroupId,  \n" +
                "				priceGroupName,  \n" +
                "				consolidatedQty,  \n" +
                "				authorizeType,  \n" +
                "				consolidateID,  \n" +
                "				refSupplierID  \n" +
                "			FROM vu_getselectedPartDetail  \n" +
                "			WHERE rfqAssyID = prfqAssyID;  \n" +
                "  \n" +
                "			-- To Get total price of consolidated lines  \n" +
                "			SELECT 	qtyID,  \n" +
                "				requestQty,  \n" +
                "				TotalExtendedPrice,  \n" +
                "				TotalUnitPrice,  \n" +
                "				TotalAssemblyPrice,  \n" +
                "				TotalExcessPrice,  \n" +
                "				rfqPriceGroupId,  \n" +
                "				qty,  \n" +
                "				priceGroupName  \n" +
                "			FROM vu_getTotalPrice  \n" +
                "			WHERE rfqAssyid = prfqAssyID;  \n" +
                "  \n" +
                "			-- To Get list of all line with custom or non custom  \n" +
                "			SELECT 	rl.id,  \n" +
                "				MAX(c.iscustom) AS custom  \n" +
                "			FROM rfq_consolidated_mfgpn_lineitem rl  \n" +
                "			INNER JOIN rfq_consolidated_mfgpn_lineitem_alternate ra ON ra.consolidateid=rl.id  \n" +
                "			INNER JOIN COMPONENT c ON ra.mfgpnid=c.id  \n" +
                "			WHERE rl.rfqAssyID = prfqAssyID AND rl.isdeleted=0 AND ra.isdeleted = 0  \n" +
                "			GROUP BY rl.rfqAssyID, rl.id;  \n" +
                "  \n" +
                "			-- To Get result of all line have resticted parts  \n" +
                "			SELECT 	r.mfgPN,  \n" +
                "				r.mfgPNID,  \n" +
                "				r.consolidateID  \n" +
                "			FROM vu_rfq_consolidate_restic_part r  \n" +
                "			WHERE r.rfqAssyID = prfqAssyID;  \n" +
                "  \n" +
                "			DROP TEMPORARY TABLE IF EXISTS consolidatetemp;  \n" +
                "			DROP TEMPORARY TABLE IF EXISTS consolidatedQtytemp;  \n" +
                "    END;  \n" +
                /* **************************** New Script -> 10-02-2022  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetRFQCustomRulesLineItems` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetRFQCustomRulesLineItems`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereColumnName VARCHAR(255),  \n" +
                "	IN pWhereFilterValue VARCHAR(255),  \n" +
                "	IN pCustomWhere INT,  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN prfqAssyID INT,  \n" +
                "	IN puserID INT,  \n" +
                "	IN ppackageing TINYINT,  \n" +
                "	IN pcustomerID INT  \n" +
                "  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "	    DECLARE pOffset INT;  \n" +
                "	    DECLARE ppartid INT;  \n" +
                "	    DECLARE rowNumWhere VARCHAR(255) ;  \n" +
                "	    DECLARE defaultOrder INT;  \n" +
                "	    SET defaultOrder = 0;  \n" +
                "	    SET @PERString = NULL;  \n" +
                "  \n" +
                "	    IF (pOrderBy IS NOT NULL) THEN  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "	    ELSE  \n" +
                "		SELECT ra.requestQty INTO defaultOrder FROM rfq_assy_quantity ra WHERE ra.rfqAssyID = prfqAssyID AND ra.rfqPriceGroupId IS NULL ORDER BY ra.requestQty ASC LIMIT 1;  \n" +
                "		IF(defaultOrder > 0) THEN  \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY `\" , defaultOrder, \"` desc\");  \n" +
                "		ELSE  \n" +
                "			SET pOrderBy = \"`lineID` ASC\";  \n" +
                "		END IF;  \n" +
                "	    END IF;  \n" +
                "  \n" +
                "		IF(pWhereClause IS NULL OR pWhereClause = '\"\"') THEN  \n" +
                "			SET pWhereClause = '1=1' ;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "			SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "		ELSE  \n" +
                "			SET rowNumWhere = '';  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		SELECT CONCAT(IFNULL(MAX(a.QtyColumn),''), IFNULL(CONCAT(', ',MAX(a.GroupColumn),''),'')) INTO @SQLString  \n" +
                "		FROM (  \n" +
                "			SELECT	GROUP_CONCAT(DISTINCT  \n" +
                "				CONCAT(  \n" +
                "					'100*Max((IF(ra.requestQty = ''',  \n" +
                "						ra.requestQty,  \n" +
                "					''', rq.unitPrice * rl.qpa, null)))/Max((IF(ra.requestQty = ''',  \n" +
                "						ra.requestQty,  \n" +
                "					''', fun_getFinalPriceSumByQtyID (ra.id,rl.rfqAssyID), null))) AS ''',  \n" +
                "						ra.requestQty,''''  \n" +
                "					)) AS QtyColumn,  \n" +
                "					NULL GroupColumn  \n" +
                "			FROM rfq_consolidate_mfgpn_lineitem_quantity rq  \n" +
                "			JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID  \n" +
                "			JOIN rfq_consolidated_mfgpn_lineitem rl ON rq.consolidateID=rl.id  \n" +
                "			WHERE rl.rfqAssyID=prfqAssyID AND rq.isDeleted=0 AND ra.deletedAt IS NULL AND ra.rfqPriceGroupId IS NULL  \n" +
                "		UNION  \n" +
                "			SELECT NULL QtyColumn,  \n" +
                "			  GROUP_CONCAT(DISTINCT  \n" +
                "				CONCAT(  \n" +
                "					'100*Max((IF(ra.requestQty = ''',  \n" +
                "						ra.requestQty,  \n" +
                "					''', rq.unitPrice * rl.qpa, null)))/Max((IF(ra.requestQty = ''',  \n" +
                "						ra.requestQty,  \n" +
                "					''', fun_getFinalPriceSumByQtyID (ra.id,rl.rfqAssyID), null))) AS ''',  \n" +
                "						pg.name,''''  \n" +
                "					)  \n" +
                "					) AS GroupColumn  \n" +
                "			   FROM rfq_consolidate_mfgpn_lineitem_quantity rq  \n" +
                "			   JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID  \n" +
                "			   JOIN  rfq_price_group pg ON pg.id = rq.rfqPriceGroupId  \n" +
                "			   LEFT JOIN rfq_consolidate_price_group_mfgpn_lineitem_quantity pgq ON pgq.refConsolidateLineitemQtyId = rq.id  \n" +
                "			   JOIN rfq_consolidated_mfgpn_lineitem rl ON rq.consolidateID=rl.id  \n" +
                "			   WHERE rl.rfqAssyID=prfqAssyID AND rq.isDeleted=0 AND ra.deletedAt IS NULL AND rq.rfqPriceGroupId IS NOT NULL  \n" +
                "		)a;  \n" +
                "  \n" +
                "		SET @SQLStatement_main = CONCAT(\" CREATE TEMPORARY TABLE IF NOT EXISTS consolidatedQtytemp AS  \n" +
                "							SELECT 	rl.id, \",  \n" +
                "							@SQLString,  \n" +
                "							\" FROM rfq_consolidated_mfgpn_lineitem rl  \n" +
                "							JOIN rfq_consolidate_mfgpn_lineitem_quantity rq ON rl.id=rq.consolidateID and rq.deletedAt is NULL  \n" +
                "							JOIN rfq_assy_quantity ra ON rq.qtyID=ra.id and ra.deletedAt is NULL  \n" +
                "							WHERE rl.isdeleted=0 AND  rl.rfqAssyID=\",prfqAssyID,\" GROUP BY rl.id\");  \n" +
                "  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS consolidatedQtytemp;  \n" +
                "		PREPARE stmtMain FROM @SQLStatement_main;  \n" +
                "		EXECUTE stmtMain;  \n" +
                "		DEALLOCATE PREPARE stmtMain;  \n" +
                "  \n" +
                "		SET @SQLStatement = (SELECT fun_getCommonConsolidateLineItems_New(prfqAssyID,pcustomerID,ppackageing));  \n" +
                "  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS consolidatetemp;  \n" +
                "		PREPARE stmt FROM @SQLStatement;  \n" +
                "		-- SELECT @SQLStatement;  \n" +
                "		EXECUTE stmt;  \n" +
                "		DEALLOCATE PREPARE stmt;  \n" +
                "  \n" +
                "		SET @SQLStatement12 = CONCAT(\"CREATE TEMPORARY TABLE IF NOT EXISTS consolidatetempFinal AS SELECT  \n" +
                "														co.isPurchase,  \n" +
                "														co.numOfPosition,  \n" +
                "														co.lineID,  \n" +
                "														co.rfqLineItemID,  \n" +
                "														co.rfqAssyID,  \n" +
                "														co.uomID,  \n" +
                "														co.unitName,  \n" +
                "														co.isqpaMismatch,  \n" +
                "														co.qpa,  \n" +
                "														co.refDesig,  \n" +
                "														co.consolidatedpartlineID,  \n" +
                "														co.consolidateRestrictPartDetail,  \n" +
                "														co.CPNPID,  \n" +
                "														co.custPNID,  \n" +
                "														co.cpncustAssyPN,  \n" +
                "                                                        co.CPNRoHSIcon,  \n" +
                "														co.CPNRoHSName,  \n" +
                "														co.restrictCPNUseInBOMStep,  \n" +
                "														co.restrictCPNUsePermanentlyStep,  \n" +
                "														co.restrictCPNUseWithPermissionStep,  \n" +
                "														co.`name`,  \n" +
                "														co.`partTypeName`,  \n" +
                "														co.mfgPN,  \n" +
                "														coq.* FROM  consolidatetemp co JOIN consolidatedQtytemp coq ON co.id = coq.id;\" );  \n" +
                "		PREPARE query12 FROM @SQLStatement12;  \n" +
                "		EXECUTE query12;  \n" +
                "		DEALLOCATE PREPARE query12;  \n" +
                "			# IF searched with dynamic column than do filter with temporary table logic  \n" +
                "			IF pCustomWhere IS NOT NULL THEN  \n" +
                "		# Create new temporary table for save record with row number with higher price descending details  \n" +
                "				SET @SQLStatement_Temp = CONCAT(\"CREATE TEMPORARY TABLE IF NOT EXISTS consolidate_temp2 AS SELECT @rownum:=(@rownum+1) AS row_id ,a.* FROM consolidatetempFinal a,(SELECT @rownum:=0) r\", \" ORDER BY \", pWhereColumnName, \" DESC \");  \n" +
                "				PREPARE query_Temp FROM @SQLStatement_Temp;  \n" +
                "				EXECUTE query_Temp;  \n" +
                "				DEALLOCATE PREPARE query_Temp;  \n" +
                "  \n" +
                "				# temporary tables not allow to join with same table so create another table  \n" +
                "				# Create new temporary table for save record with row number with higher price descending details  \n" +
                "				SET @SQLStatement_Temp1 = CONCAT(\"CREATE TEMPORARY TABLE IF NOT EXISTS consolidate_temp3 AS SELECT @rownum:=(@rownum+1) AS row_id ,a.* FROM consolidatetempFinal a,(SELECT @rownum:=0) r\", \" ORDER BY \", pWhereColumnName, \" DESC \");  \n" +
                "				PREPARE query_Temp1 FROM @SQLStatement_Temp1;  \n" +
                "				EXECUTE query_Temp1;  \n" +
                "				DEALLOCATE PREPARE query_Temp1;  \n" +
                "				# temporary tables not allow to join with same table so create another table  \n" +
                "				# Create new temporary table for save record with row number with higher price descending details  \n" +
                "				SET @SQLStatement_Temp2 = CONCAT(\"CREATE TEMPORARY TABLE IF NOT EXISTS consolidate_temp4 AS SELECT @rownum:=(@rownum+1) AS row_id ,a.* FROM consolidatetempFinal a,(SELECT @rownum:=0) r\", \" ORDER BY \", pWhereColumnName, \" DESC \");  \n" +
                "				PREPARE query_Temp2 FROM @SQLStatement_Temp2;  \n" +
                "				EXECUTE query_Temp2;  \n" +
                "				DEALLOCATE PREPARE query_Temp2;  \n" +
                "				# Concate  \n" +
                "				SET @SQLStatement1 = CONCAT(\"SELECT COUNT(1) FROM ( SELECT d.*, (SELECT SUM(\",pWhereColumnName,\") FROM consolidate_temp3 k WHERE k.row_id<=d.row_id) AS sum_10, (SELECT SUM(\",pWhereColumnName,\") FROM consolidate_temp4 k WHERE k.row_id<=d.row_id-1) AS agg_10 FROM consolidate_temp2 d) a WHERE IFNULL(a.sum_10,0) <= '\", pWhereFilterValue, \"' OR (IFNULL(a.sum_10,0) >= '\", pWhereFilterValue, \"' AND IFNULL(a.agg_10,0) <= '\", pWhereFilterValue, \"')\");  \n" +
                "				SET @SQLStatement2 = CONCAT(\"SELECT * FROM ( SELECT d.*, (SELECT SUM(\",pWhereColumnName,\") FROM consolidate_temp3 k WHERE k.row_id<=d.row_id) AS sum_10, (SELECT SUM(\",pWhereColumnName,\") FROM consolidate_temp4 k WHERE k.row_id<=d.row_id-1) AS agg_10 FROM consolidate_temp2 d) a WHERE IFNULL(a.sum_10,0) <= '\", pWhereFilterValue, \"' OR (IFNULL(a.sum_10,0) >= '\", pWhereFilterValue, \"' AND IFNULL(a.agg_10,0) <= '\", pWhereFilterValue, \"')\", rowNumWhere);  \n" +
                "			ELSE  \n" +
                "				SET @SQLStatement1 = CONCAT(\"SELECT COUNT(1) FROM consolidatetempFinal where \", pWhereClause );  \n" +
                "				SET @SQLStatement2 = CONCAT(\"SELECT * FROM  consolidatetempFinal where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "			END IF;  \n" +
                "			PREPARE query1 FROM @SQLStatement1;  \n" +
                "			EXECUTE query1;  \n" +
                "			DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "			PREPARE query2 FROM @SQLStatement2;  \n" +
                "			EXECUTE query2;  \n" +
                "			DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "			-- To Get Pricing service status data  \n" +
                "			SELECT  id,  \n" +
                "				rfqAssyID,  \n" +
                "				pricingApiName,  \n" +
                "				`status`,  \n" +
                "				msg,  \n" +
                "				errorMsg,  \n" +
                "				userID,  \n" +
                "				consolidateID,  \n" +
                "				isPurchaseApi,  \n" +
                "				pricingSupplierID  \n" +
                "			FROM rfq_lineitem_autopricingstatus  \n" +
                "			WHERE rfqAssyID = prfqAssyID AND isPurchaseApi = 0 AND `status` IS NOT NULL ;  \n" +
                "  \n" +
                "			SELECT 	qtyTimeID,  \n" +
                "				turnTime,  \n" +
                "				unitOfTime,  \n" +
                "				rfqAssyQtyID,  \n" +
                "				requestQty,  \n" +
                "				rfqPriceGroupId,  \n" +
                "				priceGroup  \n" +
                "			FROM vu_getrfqqtyturntimepricegroupdetails  \n" +
                "			WHERE rfqAssyID = rfqAssyID;  \n" +
                "  \n" +
                "			-- To Get Selected Part details  \n" +
                "			SELECT 	requestQty,  \n" +
                "				finalPrice,  \n" +
                "				unitPrice,  \n" +
                "				supplier,  \n" +
                "				`min`,  \n" +
                "				mult,  \n" +
                "				selectedMpn,  \n" +
                "				selectionMode,  \n" +
                "				qtyID,  \n" +
                "				currentStock,  \n" +
                "				leadTime,  \n" +
                "				supplierStock,  \n" +
                "				grossStock,  \n" +
                "				componentid,  \n" +
                "				selectedPIDCode,  \n" +
                "				pricingSuppliers,  \n" +
                "				packaging,  \n" +
                "				rfqQtySupplierID,  \n" +
                "				unitEachPrice,  \n" +
                "				quoteQtyEach,  \n" +
                "				supplierEachStcok,  \n" +
                "				ApiNoOfPosition,  \n" +
                "				qpa,  \n" +
                "				abbreviation,  \n" +
                "				quoteQty,  \n" +
                "				connecterTypeID,  \n" +
                "				noOfRows,  \n" +
                "				pricenotselectreason,  \n" +
                "				isBomUpdate,  \n" +
                "				rfqPriceGroupId,  \n" +
                "				priceGroupName,  \n" +
                "				consolidatedQty,  \n" +
                "				authorizeType,  \n" +
                "				consolidateID,  \n" +
                "				refSupplierID  \n" +
                "			FROM vu_getselectedPartDetail  \n" +
                "			WHERE rfqAssyID = prfqAssyID;  \n" +
                "  \n" +
                "			-- To Get total price of consolidated lines  \n" +
                "			SELECT 	qtyID,  \n" +
                "				requestQty,  \n" +
                "				TotalExtendedPrice,  \n" +
                "				TotalUnitPrice,  \n" +
                "				TotalAssemblyPrice,  \n" +
                "				TotalExcessPrice,  \n" +
                "				rfqPriceGroupId,  \n" +
                "				qty,  \n" +
                "				priceGroupName  \n" +
                "			FROM vu_getTotalPrice  \n" +
                "			WHERE rfqAssyid = prfqAssyID;  \n" +
                "  \n" +
                "			-- To Get list of all line with custom or non custom  \n" +
                "			SELECT 	rl.id,  \n" +
                "				MAX(c.iscustom) AS custom  \n" +
                "			FROM rfq_consolidated_mfgpn_lineitem rl  \n" +
                "			INNER JOIN rfq_consolidated_mfgpn_lineitem_alternate ra ON ra.consolidateid=rl.id  \n" +
                "			INNER JOIN COMPONENT c ON ra.mfgpnid=c.id  \n" +
                "			WHERE rl.rfqAssyID = prfqAssyID AND rl.isdeleted=0 AND ra.isdeleted = 0  \n" +
                "			GROUP BY rl.rfqAssyID, rl.id;  \n" +
                "  \n" +
                "			-- To Get result of all line have resticted parts  \n" +
                "			SELECT 	r.mfgPN,  \n" +
                "				r.mfgPNID,  \n" +
                "				r.consolidateID  \n" +
                "			FROM vu_rfq_consolidate_restic_part r  \n" +
                "			WHERE r.rfqAssyID = prfqAssyID;  \n" +
                "  \n" +
                "			DROP TEMPORARY TABLE IF EXISTS consolidate_temp2;  \n" +
                "			DROP TEMPORARY TABLE IF EXISTS consolidate_temp3;  \n" +
                "			DROP TEMPORARY TABLE IF EXISTS consolidate_temp4;  \n" +
                "			DROP TEMPORARY TABLE IF EXISTS consolidatetemp;  \n" +
                "			DROP TEMPORARY TABLE IF EXISTS consolidatetempFinal;  \n" +
                "			DROP TEMPORARY TABLE IF EXISTS consolidatedQtytemp;  \n" +
                "    END;  \n" +
                /* **************************** New Script -> 10-02-2022  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetRFQManualSelectPrice` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetRFQManualSelectPrice`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN prfqAssyID INT,  \n" +
                "	IN puserID INT,  \n" +
                "	IN ppackageing TINYINT,  \n" +
                "	IN pcustomerID INT  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "  \n" +
                "	    DECLARE pOffset INT;  \n" +
                "            DECLARE rowNumWhere VARCHAR(255) ;  \n" +
                "	    SET @SQLString = NULL;  \n" +
                "	    SET @HavingClause = NULL;  \n" +
                "	    SET SESSION group_concat_max_len = 150000;  \n" +
                "	    IF (pOrderBy IS NOT NULL) THEN  \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "		ELSE  \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , \"`mfgPn` desc\") ;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "  \n" +
                "		IF(pWhereClause IS NULL OR pWhereClause = '\"\"') THEN  \n" +
                "			SET pWhereClause = '1=1' ;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "			SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "		ELSE  \n" +
                "			SET rowNumWhere = '';  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		SELECT CONCAT(IFNULL(MAX(a.QtyColumn),''), IFNULL(CONCAT(', ',MAX(a.GroupColumn),''),''))  INTO @SQLString  \n" +
                "		FROM (  \n" +
                "			SELECT GROUP_CONCAT(DISTINCT  \n" +
                "					CONCAT(  \n" +
                "						'Max((IF(ra.requestQty = ''',  \n" +
                "							ra.requestQty,  \n" +
                "						''', rq.finalPrice, null))) AS ''',  \n" +
                "							ra.requestQty,''''  \n" +
                "						)  \n" +
                "						) AS QtyColumn,  \n" +
                "				NULL GroupColumn  \n" +
                "				FROM rfq_consolidate_mfgpn_lineitem_quantity rq  \n" +
                "				JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID  \n" +
                "				JOIN rfq_consolidated_mfgpn_lineitem rl ON rq.consolidateID=rl.id  \n" +
                "				WHERE rl.rfqAssyID=prfqAssyID AND rq.isDeleted=0 AND ra.deletedAt IS NULL AND ra.rfqPriceGroupId IS NULL  \n" +
                "			UNION  \n" +
                "			SELECT  NULL QtyColumn,  \n" +
                "				GROUP_CONCAT(DISTINCT  \n" +
                "					CONCAT(  \n" +
                "						'Max((IF(ra.requestQty = ''',  \n" +
                "							ra.requestQty,  \n" +
                "						''', rq.finalPrice, null))) AS ''',  \n" +
                "							pg.name,''''  \n" +
                "						)  \n" +
                "						) AS GroupColumn  \n" +
                "				   FROM rfq_consolidate_mfgpn_lineitem_quantity rq  \n" +
                "				   JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID  \n" +
                "				   JOIN  rfq_price_group pg ON pg.id = rq.rfqPriceGroupId  \n" +
                "				   LEFT JOIN rfq_consolidate_price_group_mfgpn_lineitem_quantity pgq ON pgq.refConsolidateLineitemQtyId = rq.id  \n" +
                "				   JOIN rfq_consolidated_mfgpn_lineitem rl ON rq.consolidateID=rl.id  \n" +
                "				   WHERE rl.rfqAssyID=prfqAssyID AND rq.isDeleted=0 AND ra.deletedAt IS NULL AND rq.rfqPriceGroupId IS NOT NULL  \n" +
                "		)a;  \n" +
                "  \n" +
                "		SELECT GROUP_CONCAT(DISTINCT  \n" +
                "				CONCAT(  \n" +
                "					'Max((IF(rq.selectionMode = ''',  \n" +
                "						IFNULL(rq.selectionMode,'Both'),  \n" +
                "					''', rq.selectionMode, ''Both''))) AS ''',  \n" +
                "						IFNULL(rq.selectionMode,'Both'),''''  \n" +
                "					)  \n" +
                "					),  \n" +
                "			GROUP_CONCAT(DISTINCT  \n" +
                "				CONCAT(  \n" +
                "					'Max((IF(rq.selectionMode = ''',  \n" +
                "						IFNULL(rq.selectionMode,'Both'),  \n" +
                "					''', rq.selectionMode, ''Both''))) =\"Manual\"'  \n" +
                "					) SEPARATOR ' OR '  \n" +
                "					)  \n" +
                "		INTO @SQLString1,@HavingClause  \n" +
                "		FROM rfq_consolidate_mfgpn_lineitem_quantity rq  \n" +
                "		LEFT JOIN rfq_consolidated_mfgpn_lineitem rl ON rq.consolidateID=rl.id  \n" +
                "		WHERE rl.rfqAssyID=prfqAssyID AND rq.isDeleted=0;  \n" +
                "  \n" +
                "		SET @SQLString=CONCAT(@SQLString,',',@SQLString1 );  \n" +
                "  \n" +
                "		SET @SQLStatement_main = CONCAT(\" CREATE TEMPORARY TABLE IF NOT EXISTS consolidatedQtytemp AS  \n" +
                "							SELECT 	rl.id, \",  \n" +
                "							@SQLString,  \n" +
                "							\" FROM rfq_consolidated_mfgpn_lineitem rl  \n" +
                "							JOIN rfq_consolidate_mfgpn_lineitem_quantity rq ON rl.id=rq.consolidateID and rq.deletedAt is NULL  \n" +
                "							JOIN rfq_assy_quantity ra ON rq.qtyID=ra.id and ra.deletedAt is NULL  \n" +
                "							WHERE rl.isdeleted=0 AND  rl.rfqAssyID=\",prfqAssyID,\" GROUP BY rl.id\", ' HAVING ', @HavingClause);  \n" +
                "  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS consolidatedQtytemp;  \n" +
                "		PREPARE stmtMain FROM @SQLStatement_main;  \n" +
                "		EXECUTE stmtMain;  \n" +
                "		DEALLOCATE PREPARE stmtMain;  \n" +
                "  \n" +
                "		SET @SQLStatement = (SELECT fun_getCommonConsolidateLineItems_New(prfqAssyID,pcustomerID,ppackageing));  \n" +
                "  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS consolidatetemp;  \n" +
                "		PREPARE stmt FROM @SQLStatement;  \n" +
                "		-- SELECT @SQLStatement;  \n" +
                "		EXECUTE stmt;  \n" +
                "		DEALLOCATE PREPARE stmt;  \n" +
                "  \n" +
                "		SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1)  FROM consolidatetemp co JOIN consolidatedQtytemp coq ON coq.id = co.id where \", pWhereClause );  \n" +
                "		PREPARE query1 FROM @SQLStatement1;  \n" +
                "		EXECUTE query1;  \n" +
                "		DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "  \n" +
                "		SET @SQLStatement12 = CONCAT(\"SELECT co.*, coq.* FROM  consolidatetemp co JOIN consolidatedQtytemp coq ON coq.id = co.id where \", pWhereClause , \" \" , pOrderBy , rowNumWhere );  \n" +
                "		PREPARE query12 FROM @SQLStatement12;  \n" +
                "		EXECUTE query12;  \n" +
                "		DEALLOCATE PREPARE query12;  \n" +
                "  \n" +
                "		-- To Get Pricing service status data  \n" +
                "		SELECT  id,  \n" +
                "			rfqAssyID,  \n" +
                "			pricingApiName,  \n" +
                "			`status`,  \n" +
                "			msg,  \n" +
                "			errorMsg,  \n" +
                "			userID,  \n" +
                "			consolidateID,  \n" +
                "			isPurchaseApi,  \n" +
                "			pricingSupplierID  \n" +
                "		FROM rfq_lineitem_autopricingstatus  \n" +
                "		WHERE rfqAssyID = prfqAssyID AND isPurchaseApi = 0 AND `status` IS NOT NULL ;  \n" +
                "  \n" +
                "		-- To Get rfq turn time price group details  \n" +
                "		SELECT 	qtyTimeID,  \n" +
                "			turnTime,  \n" +
                "			unitOfTime,  \n" +
                "			rfqAssyQtyID,  \n" +
                "			requestQty,  \n" +
                "			rfqPriceGroupId,  \n" +
                "			priceGroup  \n" +
                "		FROM vu_getrfqqtyturntimepricegroupdetails  \n" +
                "		WHERE rfqAssyID = prfqAssyID;  \n" +
                "  \n" +
                "		-- To Get Selected Part details  \n" +
                "		SELECT 	requestQty,  \n" +
                "			finalPrice,  \n" +
                "			unitPrice,  \n" +
                "			supplier,  \n" +
                "			`min`,  \n" +
                "			mult,  \n" +
                "			selectedMpn,  \n" +
                "			selectionMode,  \n" +
                "			qtyID,  \n" +
                "			currentStock,  \n" +
                "			leadTime,  \n" +
                "			supplierStock,  \n" +
                "			grossStock,  \n" +
                "			componentid,  \n" +
                "			selectedPIDCode,  \n" +
                "			pricingSuppliers,  \n" +
                "			packaging,  \n" +
                "			rfqQtySupplierID,  \n" +
                "			unitEachPrice,  \n" +
                "			quoteQtyEach,  \n" +
                "			supplierEachStcok,  \n" +
                "			ApiNoOfPosition,  \n" +
                "			qpa,  \n" +
                "			abbreviation,  \n" +
                "			quoteQty,  \n" +
                "			connecterTypeID,  \n" +
                "			noOfRows,  \n" +
                "			pricenotselectreason,  \n" +
                "			isBomUpdate,  \n" +
                "			rfqPriceGroupId,  \n" +
                "			priceGroupName,  \n" +
                "			consolidatedQty,  \n" +
                "			authorizeType,  \n" +
                "			consolidateID,  \n" +
                "			refSupplierID  \n" +
                "		FROM vu_getselectedPartDetail  \n" +
                "		WHERE rfqAssyID = prfqAssyID;  \n" +
                "  \n" +
                "		-- To Get total price of consolidated lines  \n" +
                "		SELECT 	qtyID,  \n" +
                "			requestQty,  \n" +
                "			TotalExtendedPrice,  \n" +
                "			TotalUnitPrice,  \n" +
                "			TotalAssemblyPrice,  \n" +
                "			TotalExcessPrice,  \n" +
                "			rfqPriceGroupId,  \n" +
                "			qty,  \n" +
                "			priceGroupName  \n" +
                "		FROM vu_getTotalPrice  \n" +
                "		WHERE rfqAssyid = prfqAssyID;  \n" +
                "  \n" +
                "		-- To Get list of all line with custom or non custom  \n" +
                "		SELECT 	rl.id,  \n" +
                "			MAX(c.iscustom) AS custom  \n" +
                "		FROM rfq_consolidated_mfgpn_lineitem rl  \n" +
                "		INNER JOIN rfq_consolidated_mfgpn_lineitem_alternate ra ON ra.consolidateid=rl.id  \n" +
                "		INNER JOIN COMPONENT c ON ra.mfgpnid=c.id  \n" +
                "		WHERE rl.rfqAssyID = prfqAssyID AND rl.isdeleted=0 AND ra.isdeleted = 0  \n" +
                "		GROUP BY rl.rfqAssyID, rl.id;  \n" +
                "  \n" +
                "		-- To Get result of all line have resticted parts  \n" +
                "		SELECT 	r.mfgPN,  \n" +
                "			r.mfgPNID,  \n" +
                "			r.consolidateID  \n" +
                "		FROM vu_rfq_consolidate_restic_part r  \n" +
                "		WHERE r.rfqAssyID = prfqAssyID;  \n" +
                "  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS consolidatetemp;  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS consolidatedQtytemp;  \n" +
                "    END;  \n" +
                /* **************************** New Script -> 10-02-2022  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetRFQMaterialAtRiskLineItems` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetRFQMaterialAtRiskLineItems`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN prfqAssyID INT,  \n" +
                "	IN puserID INT,  \n" +
                "	IN ppackageing TINYINT,  \n" +
                "	IN pcustomerID INT  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "  \n" +
                "	    DECLARE pOffset INT;  \n" +
                "	    DECLARE rowNumWhere VARCHAR(255) ;  \n" +
                "	    SET @SQLString = NULL;  \n" +
                "	    IF (pOrderBy IS NOT NULL) THEN  \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "		ELSE  \n" +
                "			SET pOrderBy = \"ORDER BY `lineId` asc\";  \n" +
                "		END IF;  \n" +
                "  \n" +
                "  \n" +
                "		IF(pWhereClause IS NULL OR pWhereClause = '\"\"') THEN  \n" +
                "			SET pWhereClause = '1=1' ;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "			SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "		ELSE  \n" +
                "			SET rowNumWhere = '';  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		SELECT CONCAT(IFNULL(MAX(a.QtyColumn),''), IFNULL(CONCAT(', ',MAX(a.GroupColumn),''),'')) INTO @SQLString  \n" +
                "		FROM (  \n" +
                "		SELECT  \n" +
                "                     GROUP_CONCAT(DISTINCT  \n" +
                "				CONCAT(  \n" +
                "					'Max((IF(ra.requestQty = ''',  \n" +
                "						ra.requestQty,  \n" +
                "					''', rq.finalPrice, null))) AS ''',  \n" +
                "						ra.requestQty,''''  \n" +
                "					)  \n" +
                "					) AS QtyColumn,  \n" +
                "					NULL GroupColumn  \n" +
                "		FROM rfq_consolidate_mfgpn_lineitem_quantity rq  \n" +
                "		   JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID  \n" +
                "		   JOIN rfq_consolidated_mfgpn_lineitem rl ON rq.consolidateID=rl.id  \n" +
                "		WHERE rl.rfqAssyID=prfqAssyID AND rq.isDeleted=0 AND ra.deletedAt IS NULL AND rq.rfqPriceGroupId IS NULL  \n" +
                "	UNION  \n" +
                "            SELECT NULL QtyColumn,  \n" +
                "			GROUP_CONCAT(DISTINCT  \n" +
                "				CONCAT(  \n" +
                "					'Max((IF(ra.requestQty = ''',  \n" +
                "						ra.requestQty,  \n" +
                "					''', rq.finalPrice, null))) AS ''',  \n" +
                "						pg.name,''''  \n" +
                "					)) AS  GroupColumn  \n" +
                "		   FROM rfq_consolidate_mfgpn_lineitem_quantity rq  \n" +
                "		   JOIN rfq_assy_quantity ra ON ra.id=rq.qtyID  \n" +
                "		   JOIN  rfq_price_group pg ON pg.id = rq.rfqPriceGroupId  \n" +
                "		   LEFT JOIN rfq_consolidate_price_group_mfgpn_lineitem_quantity pgq ON pgq.refConsolidateLineitemQtyId = rq.id  \n" +
                "		   JOIN rfq_consolidated_mfgpn_lineitem rl ON rq.consolidateID=rl.id  \n" +
                "		   WHERE rl.rfqAssyID=prfqAssyID AND rq.isDeleted=0 AND ra.deletedAt IS NULL AND rq.rfqPriceGroupId IS NOT NULL  \n" +
                "	   )a;  \n" +
                "  \n" +
                "		SET @SQLStatement_main = CONCAT(\" CREATE TEMPORARY TABLE IF NOT EXISTS consolidatedQtytemp AS  \n" +
                "							SELECT 	rl.id, \",  \n" +
                "							@SQLString,  \n" +
                "							\" FROM rfq_consolidated_mfgpn_lineitem rl  \n" +
                "							JOIN rfq_consolidate_mfgpn_lineitem_quantity rq ON rl.id=rq.consolidateID and rq.deletedAt is NULL  \n" +
                "							JOIN rfq_assy_quantity ra ON rq.qtyID=ra.id and ra.deletedAt is NULL  \n" +
                "							WHERE rl.isdeleted=0 AND  rl.rfqAssyID=\",prfqAssyID,\" GROUP BY rl.id\");  \n" +
                "  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS consolidatedQtytemp;  \n" +
                "		PREPARE stmtMain FROM @SQLStatement_main;  \n" +
                "		EXECUTE stmtMain;  \n" +
                "		DEALLOCATE PREPARE stmtMain;  \n" +
                "  \n" +
                "		SET @SQLStatement = CONCAT('CREATE TEMPORARY TABLE IF NOT EXISTS consolidatetemp AS  \n" +
                "						SELECT  \n" +
                "						rl.id,rl.isPurchase,  \n" +
                "						rl.numOfPosition,  \n" +
                "						rl.lineID,  \n" +
                "						rl.rfqLineItemID,  \n" +
                "						rl.rfqAssyID,  \n" +
                "						rl.uomID,  \n" +
                "                        fun_getUnitAbbrivationByID(rl.uomID) unitName,  \n" +
                "						rl.isqpaMismatch,  \n" +
                "						custP.PIDCode as CPNPID,  \n" +
                "						rl.custPNID,  \n" +
                "                        custp.custAssyPN as cpncustAssyPN,  \n" +
                "                        fun_getRoHSIconByID(custp.RoHSStatusID) as CPNRoHSIcon,  \n" +
                "						fun_getRoHSNameByID(custp.RoHSStatusID) as CPNRoHSName,  \n" +
                "                        rl.restrictCPNUseInBOMStep,  \n" +
                "						rl.restrictCPNUsePermanentlyStep,  \n" +
                "						rl.restrictCPNUseWithPermissionStep,  \n" +
                "						(select partTypeName from rfq_parttypemst where id=co.functionalcategoryid) partTypeName,  \n" +
                "						rm.name,  \n" +
                "						rl.refDesig,  \n" +
                "						rl.qpa,rl.consolidatedpartlineID,  \n" +
                "						fun_getPartStatusNameByID(co.PartStatus) as PartStatus ,  \n" +
                "						co.ltbDate AS LTBDate,  \n" +
                "						co.eolDate AS EOLDate,',  \n" +
                "						(SELECT fun_getCommonConsolidateLineMFGPN_New(ppackageing,prfqAssyID,pcustomerID)),  \n" +
                "						' FROM rfq_consolidated_mfgpn_lineitem rl  \n" +
                "						JOIN rfq_consolidate_mfgpn_lineitem_quantity rq ON rl.id=rq.consolidateID and rq.deletedAt is NULL  \n" +
                "						JOIN rfq_assy_quantity ra ON rq.qtyID=ra.id  and ra.deletedAt is NULL  \n" +
                "						left Join component custP on custp.id = rl.custPNID  \n" +
                "						LEFT JOIN component co ON co.id=rq.componentid  \n" +
                "						LEFT JOIN rfq_mountingtypemst rm ON co.mountingTypeID=rm.id  \n" +
                "						WHERE rl.isdeleted=0 AND  rl.rfqAssyID=',prfqAssyID,'  \n" +
                "						AND ((co.eolDate IS NOT NULL AND co.eolDate < fun_DatetimetoUTCDateTime()) OR co.partstatus NOT IN (1))  \n" +
                "						GROUP BY rl.id,rl.isPurchase,rl.numOfPosition,rl.lineID,rl.rfqLineItemID,rl.rfqAssyID,rl.uomID,  \n" +
                "						       rl.isqpaMismatch,rl.restrictCPNUseInBOMStep,rl.restrictCPNUsePermanentlyStep,rl.restrictCPNUseWithPermissionStep,  \n" +
                "						       co.functionalcategoryid,rm.name,rl.refDesig,rl.qpa,rl.consolidatedpartlineID,co.PartStatus,co.ltbDate,co.eolDate');  \n" +
                "  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS consolidatetemp;  \n" +
                "		PREPARE stmt FROM @SQLStatement;  \n" +
                "		EXECUTE stmt;  \n" +
                "		DEALLOCATE PREPARE stmt;  \n" +
                "  \n" +
                "		SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1)  FROM consolidatetemp co JOIN consolidatedQtytemp coq ON coq.id = co.id where \", pWhereClause );  \n" +
                "		PREPARE query1 FROM @SQLStatement1;  \n" +
                "		EXECUTE query1;  \n" +
                "		DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "  \n" +
                "		SET @SQLStatement2 = CONCAT(\" SELECT co.*, coq.* FROM  consolidatetemp co  \n" +
                "										JOIN consolidatedQtytemp coq ON coq.id = co.id  \n" +
                "										where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "		PREPARE query2 FROM @SQLStatement2;  \n" +
                "		EXECUTE query2;  \n" +
                "		DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "				-- To Get Pricing service status data  \n" +
                "		SELECT  id,  \n" +
                "			rfqAssyID,  \n" +
                "			pricingApiName,  \n" +
                "			`status`,  \n" +
                "			msg,  \n" +
                "			errorMsg,  \n" +
                "			userID,  \n" +
                "			consolidateID,  \n" +
                "			isPurchaseApi,  \n" +
                "			pricingSupplierID  \n" +
                "		FROM rfq_lineitem_autopricingstatus  \n" +
                "		WHERE rfqAssyID = prfqAssyID AND isPurchaseApi = 0 AND `status` IS NOT NULL ;  \n" +
                "  \n" +
                "		-- To Get rfq turn time price group details  \n" +
                "		SELECT 	qtyTimeID,  \n" +
                "			turnTime,  \n" +
                "			unitOfTime,  \n" +
                "			rfqAssyQtyID,  \n" +
                "			requestQty,  \n" +
                "			rfqPriceGroupId,  \n" +
                "			priceGroup  \n" +
                "		FROM vu_getrfqqtyturntimepricegroupdetails  \n" +
                "		WHERE rfqAssyID = prfqAssyID;  \n" +
                "  \n" +
                "		-- To Get Selected Part details  \n" +
                "		SELECT 	requestQty,  \n" +
                "			finalPrice,  \n" +
                "			unitPrice,  \n" +
                "			supplier,  \n" +
                "			`min`,  \n" +
                "			mult,  \n" +
                "			selectedMpn,  \n" +
                "			selectionMode,  \n" +
                "			qtyID,  \n" +
                "			currentStock,  \n" +
                "			leadTime,  \n" +
                "			supplierStock,  \n" +
                "			grossStock,  \n" +
                "			componentid,  \n" +
                "			selectedPIDCode,  \n" +
                "			pricingSuppliers,  \n" +
                "			packaging,  \n" +
                "			rfqQtySupplierID,  \n" +
                "			unitEachPrice,  \n" +
                "			quoteQtyEach,  \n" +
                "			supplierEachStcok,  \n" +
                "			ApiNoOfPosition,  \n" +
                "			qpa,  \n" +
                "			abbreviation,  \n" +
                "			quoteQty,  \n" +
                "			connecterTypeID,  \n" +
                "			noOfRows,  \n" +
                "			pricenotselectreason,  \n" +
                "			isBomUpdate,  \n" +
                "			rfqPriceGroupId,  \n" +
                "			priceGroupName,  \n" +
                "			consolidatedQty,  \n" +
                "			authorizeType,  \n" +
                "			consolidateID,  \n" +
                "			refSupplierID  \n" +
                "		FROM vu_getselectedPartDetail  \n" +
                "		WHERE rfqAssyID = prfqAssyID;  \n" +
                "  \n" +
                "		-- To Get total price of consolidated lines  \n" +
                "		SELECT 	qtyID,  \n" +
                "			requestQty,  \n" +
                "			TotalExtendedPrice,  \n" +
                "			TotalUnitPrice,  \n" +
                "			TotalAssemblyPrice,  \n" +
                "			TotalExcessPrice,  \n" +
                "			rfqPriceGroupId,  \n" +
                "			qty,  \n" +
                "			priceGroupName  \n" +
                "		FROM vu_getTotalPrice  \n" +
                "		WHERE rfqAssyid = prfqAssyID;  \n" +
                "  \n" +
                "		-- To Get list of all line with custom or non custom  \n" +
                "		SELECT 	rl.id,  \n" +
                "			MAX(c.iscustom) AS custom  \n" +
                "		FROM rfq_consolidated_mfgpn_lineitem rl  \n" +
                "		INNER JOIN rfq_consolidated_mfgpn_lineitem_alternate ra ON ra.consolidateid=rl.id  \n" +
                "		INNER JOIN COMPONENT c ON ra.mfgpnid=c.id  \n" +
                "		WHERE rl.rfqAssyID = prfqAssyID AND rl.isdeleted=0 AND ra.isdeleted = 0  \n" +
                "		GROUP BY rl.rfqAssyID, rl.id;  \n" +
                "  \n" +
                "		-- To Get result of all line have resticted parts  \n" +
                "		SELECT 	r.mfgPN,  \n" +
                "			r.mfgPNID,  \n" +
                "			r.consolidateID  \n" +
                "		FROM vu_rfq_consolidate_restic_part r  \n" +
                "		WHERE r.rfqAssyID = prfqAssyID;  \n" +
                "  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS consolidatetemp;  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS consolidatedQtytemp;  \n" +
                "    END;  \n" +
                /* **************************** New Script -> 10-02-2022  *********************************** */
                /* **************************** New Script -> 10-02-2022  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1299,'1.00','V1',' rfq_consolidate_mfgpn_lineitem_quantity - CC '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1299:
            allDbChangesArray.push(
                /* **************************** New Script -> 11-02-2022  *********************************** */
                "DROP TRIGGER IF EXISTS `Trg_AU_packing_slip_material_receive`;  \n" +
                "CREATE TRIGGER `Trg_AU_packing_slip_material_receive` AFTER UPDATE ON `packing_slip_material_receive` FOR EACH ROW BEGIN  \n" +
                "	DECLARE vMfgCodeFormat INT;  \n" +
                "    DECLARE vOldCustomer VARCHAR(100);  \n" +
                "    DECLARE vNewCustomer VARCHAR(100);  \n" +
                "  \n" +
                "	SELECT fun_getMFGCodeNameFormat() INTO vMfgCodeFormat;  \n" +
                "	IF OLD.receiptType = \"P\" AND OLD.refPurchaseOrderID IS NULL AND NEW.isCustConsigned != OLD.isCustConsigned THEN  \n" +
                "		UPDATE packing_slip_material_receive_det SET isLineCustConsigned=NEW.isCustConsigned, LineCustomerID=NEW.CustomerID,updatedBy=NEW.updatedBy, updateByRoleId=NEW.updateByRoleId ,updatedAt=fun_DatetimetoUTCDateTime()  WHERE refPackingSlipMaterialRecID=OLD.id;  \n" +
                "        /* (-14) is Packing Slip Entity Default Entry ID*/  \n" +
                "        insert into pending_elastic_entity_sync_data(entityID,entityParamDet) values(-14,concat('{\"id\":', OLD.id , '}'));  \n" +
                "    END IF;  \n" +
                "	IF IFNULL(OLD.poNumber,0) != IFNULL(NEW.poNumber,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'PO#', CAST(OLD.poNumber AS CHAR), CAST(new.poNumber AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "		fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','poNumber'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.poDate,0) != IFNULL(NEW.poDate,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR),  \n" +
                "		CASE  \n" +
                "			WHEN NEW.receiptType = 'P' THEN 'PO Date'  \n" +
                "			WHEN NEW.receiptType = 'R' THEN 'RMA Date'  \n" +
                "			ELSE 'PO Date'  \n" +
                "		END ,  \n" +
                "		CAST(OLD.poDate AS CHAR), CAST(NEW.poDate AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "		fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','poDate'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.mfgCodeID,0) != IFNULL(NEW.mfgCodeID,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Supplier', CAST(fun_getMfgCodeAndNameByID(OLD.mfgCodeID) AS CHAR), CAST(fun_getMfgCodeAndNameByID(new.mfgCodeID) AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        'varchar');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.supplierSONumber,0) != IFNULL(NEW.supplierSONumber,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'SO#', CAST(OLD.supplierSONumber AS CHAR), CAST(new.supplierSONumber AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "		fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','supplierSONumber'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.soDate,0) != IFNULL(NEW.soDate,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'SO Date', CAST(OLD.soDate AS CHAR), CAST(NEW.soDate AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "		fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','soDate'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.packingSlipNumber,0) != IFNULL(NEW.packingSlipNumber,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Packing Slip#', CAST(OLD.packingSlipNumber AS CHAR), CAST(new.packingSlipNumber AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','packingSlipNumber'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.packingSlipDate,0) != IFNULL(NEW.packingSlipDate,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Packing Slip Date', CAST(OLD.packingSlipDate AS CHAR), CAST(NEW.packingSlipDate AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','packingSlipDate'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.invoiceNumber,0) != IFNULL(NEW.invoiceNumber,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Invoice#', CAST(OLD.invoiceNumber AS CHAR), CAST(new.invoiceNumber AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','invoiceNumber'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.invoiceDate,0) != IFNULL(NEW.invoiceDate,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Invoice Date', CAST(OLD.invoiceDate AS CHAR), CAST(NEW.invoiceDate AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','invoiceDate'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.creditMemoNumber,0) != IFNULL(NEW.creditMemoNumber,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Credit Memo#', CAST(OLD.creditMemoNumber AS CHAR), CAST(new.creditMemoNumber AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','creditMemoNumber'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.creditMemoDate,0) != IFNULL(NEW.creditMemoDate,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Credit Memo Date', CAST(OLD.creditMemoDate AS CHAR), CAST(NEW.creditMemoDate AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','creditMemoDate'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.debitMemoNumber,0) != IFNULL(NEW.debitMemoNumber,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Debit Memo#', CAST(OLD.debitMemoNumber AS CHAR), CAST(new.debitMemoNumber AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','debitMemoNumber'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.debitMemoDate,0) != IFNULL(NEW.debitMemoDate,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Debit Memo Date', CAST(OLD.debitMemoDate AS CHAR), CAST(NEW.debitMemoDate AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','debitMemoDate'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.receiptDate,0) != IFNULL(NEW.receiptDate,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), (CASE WHEN (new.receiptType = 'R' OR (new.receiptType = 'C' AND new.creditMemoType = 'RC')) THEN 'Ship By Date' ELSE 'Material Receipt Date' END),  \n" +
                "		CAST(OLD.receiptDate AS CHAR), CAST(NEW.receiptDate AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','receiptDate'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.`status`,0) != IFNULL(NEW.`status`,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR),  \n" +
                "		(  \n" +
                "			CASE  \n" +
                "				WHEN NEW.receiptType = 'P' THEN 'Packing Slip Status'  \n" +
                "				WHEN NEW.receiptType = 'R' THEN 'RMA Status'  \n" +
                "				ELSE 'Supplier Invoice Status'  \n" +
                "			END  \n" +
                "		),  \n" +
                "		CAST(  \n" +
                "			(  \n" +
                "				CASE  \n" +
                "					WHEN OLD.`status` = 'I' THEN 'Investigate'  \n" +
                "					WHEN OLD.`status` = 'W' THEN 'Waiting For Invoice'  \n" +
                "					WHEN OLD.`status` = 'IR' THEN 'Invoice Received'  \n" +
                "					WHEN OLD.`status` = 'A' THEN 'Approved To Pay'  \n" +
                "					WHEN OLD.`status` = 'P' THEN 'Paid'  \n" +
                "					WHEN OLD.`status` = 'PE' THEN 'Pending'  \n" +
                "					WHEN OLD.`status` = 'D' THEN 'Draft'  \n" +
                "					WHEN OLD.`status` = 'WS' THEN 'Waiting For Shipment'  \n" +
                "					WHEN OLD.`status` = 'WC' THEN 'Waiting For Credit Memo'  \n" +
                "					WHEN OLD.`status` = 'CR' THEN 'Credit Memo Received'  \n" +
                "                    WHEN OLD.`status` = 'PM' THEN 'Pending Management Approval'  \n" +
                "					ELSE NULL  \n" +
                "				END  \n" +
                "			) AS CHAR  \n" +
                "		),  \n" +
                "		CAST(  \n" +
                "			(  \n" +
                "				CASE  \n" +
                "					WHEN NEW.`status` = 'I' THEN 'Investigate'  \n" +
                "					WHEN NEW.`status` = 'W' THEN 'Waiting For Invoice'  \n" +
                "					WHEN NEW.`status` = 'IR' THEN 'Invoice Received'  \n" +
                "					WHEN NEW.`status` = 'A' THEN 'Approved To Pay'  \n" +
                "					WHEN NEW.`status` = 'P' THEN 'Paid'  \n" +
                "					WHEN NEW.`status` = 'PE' THEN 'Pending'  \n" +
                "					WHEN NEW.`status` = 'D' THEN 'Draft'  \n" +
                "					WHEN NEW.`status` = 'WS' THEN 'Waiting For Shipment'  \n" +
                "					WHEN NEW.`status` = 'WC' THEN 'Waiting For Credit Memo'  \n" +
                "					WHEN NEW.`status` = 'CR' THEN 'Credit Memo Received'  \n" +
                "                    WHEN NEW.`status` = 'PM' THEN 'Pending Management Approval'  \n" +
                "					ELSE NULL  \n" +
                "				END  \n" +
                "			) AS CHAR  \n" +
                "		),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId, 'varchar');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.packingSlipModeStatus,0) != IFNULL(NEW.packingSlipModeStatus,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR),  \n" +
                "		(  \n" +
                "			CASE  \n" +
                "				WHEN NEW.receiptType = 'P' THEN 'Packing Slip Posting Status'  \n" +
                "				WHEN NEW.receiptType = 'R' THEN 'RMA Posting Status'  \n" +
                "				ELSE 'Supplier Invoice Posting Status'  \n" +
                "			END  \n" +
                "		),  \n" +
                "		CAST(  \n" +
                "			(  \n" +
                "				CASE  \n" +
                "					WHEN OLD.packingSlipModeStatus = 'D' THEN 'Draft'  \n" +
                "					WHEN OLD.packingSlipModeStatus = 'P' THEN 'Publish'  \n" +
                "					WHEN OLD.packingSlipModeStatus = 'S' THEN 'Shipped'  \n" +
                "					ELSE NULL  \n" +
                "				END  \n" +
                "			) AS CHAR  \n" +
                "		),  \n" +
                "		CAST(  \n" +
                "			(  \n" +
                "				CASE  \n" +
                "					WHEN NEW.packingSlipModeStatus = 'D' THEN 'Draft'  \n" +
                "					WHEN NEW.packingSlipModeStatus = 'P' THEN 'Publish'  \n" +
                "					WHEN NEW.packingSlipModeStatus = 'S' THEN 'Shipped'  \n" +
                "					ELSE NULL  \n" +
                "				END  \n" +
                "			) AS CHAR  \n" +
                "		),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId, 'varchar');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.applyDate,0) != IFNULL(NEW.applyDate,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Apply Date', CAST(OLD.applyDate AS CHAR), CAST(NEW.applyDate AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','applyDate'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.invoiceTotalDue,0) != IFNULL(NEW.invoiceTotalDue,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR),  \n" +
                "		(  \n" +
                "			CASE  \n" +
                "				WHEN NEW.receiptType = 'I' THEN 'Invoice Total'  \n" +
                "				WHEN NEW.receiptType = 'C' THEN 'Credit Memo Total'  \n" +
                "				WHEN NEW.receiptType = 'D' THEN 'Debit Memo Total'  \n" +
                "				ELSE NULL  \n" +
                "			END  \n" +
                "		),  \n" +
                "		CAST(OLD.invoiceTotalDue AS CHAR), CAST(new.invoiceTotalDue AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        'amount');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.paymentTermsID,0) != IFNULL(NEW.paymentTermsID,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Payment Term', CAST(fun_getGenericCategoryNameByID(OLD.paymentTermsID) AS CHAR), CAST(fun_getGenericCategoryNameByID(new.paymentTermsID) AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        'varchar');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.remark,0) != IFNULL(NEW.remark,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR),  \n" +
                "		(  \n" +
                "			CASE  \n" +
                "				WHEN NEW.receiptType = 'R' THEN 'RMA Comment'  \n" +
                "				ELSE 'Comment'  \n" +
                "			END  \n" +
                "		), CAST(OLD.remark AS CHAR), CAST(new.remark AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','remark'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.internalRemark,0) != IFNULL(NEW.internalRemark,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR),  \n" +
                "		(  \n" +
                "			CASE  \n" +
                "				WHEN NEW.receiptType = 'R' THEN 'Internal RMA Comment'  \n" +
                "				ELSE 'PS Internal Comment'  \n" +
                "			END  \n" +
                "		), CAST(OLD.internalRemark AS CHAR), CAST(new.internalRemark AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','internalRemark'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.shippingMethodId,0) != IFNULL(NEW.shippingMethodId,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Shipping Method', CAST(fun_getGenericCategoryCodeNameByID(OLD.shippingMethodId) AS CHAR), CAST(fun_getGenericCategoryCodeNameByID(new.shippingMethodId) AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        'varchar');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.carrierID,0) != IFNULL(NEW.carrierID,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Carrier', CAST(fun_getGenericCategoryCodeNameByID(OLD.carrierID) AS CHAR), CAST(fun_getGenericCategoryCodeNameByID(new.carrierID) AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        'varchar');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.carrierAccountNumber,0) != IFNULL(NEW.carrierAccountNumber,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Carrier Account#', CAST(OLD.carrierAccountNumber AS CHAR), CAST(new.carrierAccountNumber AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','carrierAccountNumber'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.shippingInsurance ,0) != IFNULL(NEW.shippingInsurance ,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\",CAST(new.id AS CHAR),'Shipping With Insurance', CAST(CASE WHEN OLD.shippingInsurance = 0 THEN 'No' ELSE 'Yes' END AS CHAR), CAST(CASE WHEN NEW.shippingInsurance = 0 THEN 'No' ELSE 'Yes' END AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,  \n" +
                "		'varchar');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  /*address*/  \n" +
                "  \n" +
                "	IF IFNULL(OLD.billToAddress,0) != IFNULL(NEW.billToAddress,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Bill To', CAST(OLD.billToAddress AS CHAR), CAST(new.billToAddress AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','billToAddress'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.billToConactPerson,0) != IFNULL(NEW.billToConactPerson,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Bill To Contact Person', CAST(OLD.billToConactPerson AS CHAR), CAST(new.billToConactPerson AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','billToConactPerson'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.rmaShippingAddress,0) != IFNULL(NEW.rmaShippingAddress,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'RMA Ship To', CAST(OLD.rmaShippingAddress AS CHAR), CAST(new.rmaShippingAddress AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','rmaShippingAddress'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.rmaShippingContactPerson,0) != IFNULL(NEW.rmaShippingContactPerson,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'RMA Ship To Contact Person', OLD.rmaShippingContactPerson, new.rmaShippingContactPerson,  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','rmaShippingContactPerson'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.rmaMarkForAddress,0) != IFNULL(NEW.rmaMarkForAddress,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Mark For', CAST(OLD.rmaMarkForAddress AS CHAR), CAST(new.rmaMarkForAddress AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','rmaMarkForAddress'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.rmaMarkForContactPerson,0) != IFNULL(NEW.rmaMarkForContactPerson,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Mark For Contact Person', OLD.rmaMarkForContactPerson, new.rmaMarkForContactPerson,  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','rmaMarkForContactPerson'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  /*address*/  \n" +
                "  \n" +
                "    IF IFNULL(OLD.markedForRefund,0) != IFNULL(NEW.markedForRefund,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Marked for Refund',  \n" +
                "			case when OLD.markedForRefund = 1 then 'Yes' else 'No' end,  \n" +
                "            case when new.markedForRefund = 1 then 'Yes' else 'No' end,  \n" +
                "			fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId, 'varchar');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.markedForRefundAmt,0) != IFNULL(NEW.markedForRefundAmt,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Refund Amount ($)', CAST(OLD.markedForRefundAmt AS CHAR), CAST(new.markedForRefundAmt AS CHAR),  \n" +
                "			fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "            'amount');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  IF IFNULL(OLD.isCustConsigned, 0) != IFNULL(NEW.isCustConsigned, 0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES(\"PACKINGSLIPMATERIALRECEIVE\",CAST(new.id AS CHAR),'Packing Slip Customer Consigned (No Charge)',  CAST(CASE WHEN OLD.isCustConsigned=0 THEN 'No' ELSE 'Yes' END AS CHAR), CAST(CASE WHEN NEW.isCustConsigned=0 THEN 'No' ELSE 'Yes' END AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.CustomerID, 0) != IFNULL(NEW.CustomerID,0) THEN  \n" +
                "		SELECT fun_GetFormattedMfgCode(mfgCode, mfgName, vMfgCodeFormat) INTO vOldCustomer FROM mfgcodemst WHERE id=OLD.CustomerID;  \n" +
                "        SELECT fun_GetFormattedMfgCode(mfgCode, mfgName, vMfgCodeFormat) INTO vNewCustomer FROM mfgcodemst WHERE id=NEW.CustomerID;  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES(\"PACKINGSLIPMATERIALRECEIVE\",CAST(new.id AS CHAR),'Packing Slip Customer',  CAST(vOldCustomer AS CHAR), CAST(vNewCustomer AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  IF IFNULL(OLD.isNonUMIDStock, 0) != IFNULL(NEW.isNonUMIDStock, 0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES(\"PACKINGSLIPMATERIALRECEIVE\",CAST(new.id AS CHAR),'Packing Slip Do Not Create UMID Stock',  CAST(CASE WHEN OLD.isNonUMIDStock=0 THEN 'No' ELSE 'Yes' END AS CHAR), CAST(CASE WHEN NEW.isNonUMIDStock=0 THEN 'No' ELSE 'Yes' END AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.invoiceApprovalComment, 0) != IFNULL(NEW.invoiceApprovalComment, 0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES(\"PACKINGSLIPMATERIALRECEIVE\",CAST(new.id AS CHAR),'Approval Comment',  CAST(OLD.invoiceApprovalComment AS CHAR), CAST(NEW.invoiceApprovalComment AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.invoiceApprovalDate, 0) != IFNULL(NEW.invoiceApprovalDate, 0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES(\"PACKINGSLIPMATERIALRECEIVE\",CAST(new.id AS CHAR),'Approved On',  CAST(fun_ApplyCommonDateTimeFormatByParaValue(OLD.invoiceApprovalDate,FUN_GETTIMEZONE(), FUN_GETDATETIMEFORMAT()) AS CHAR), CAST(fun_ApplyCommonDateTimeFormatByParaValue(NEW.invoiceApprovalDate,FUN_GETTIMEZONE(), FUN_GETDATETIMEFORMAT()) AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.invoiceApprovedBy, 0) != IFNULL(NEW.invoiceApprovedBy, 0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES(\"PACKINGSLIPMATERIALRECEIVE\",CAST(new.id AS CHAR),'Approved By',  CAST(fun_getUserNameByID(OLD.invoiceApprovedBy) AS CHAR), CAST(fun_getUserNameByID(NEW.invoiceApprovedBy) AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "      IF IFNULL(OLD.invoiceRequireManagementApproval, 0) != IFNULL(NEW.invoiceRequireManagementApproval, 0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES(\"PACKINGSLIPMATERIALRECEIVE\",CAST(new.id AS CHAR),'Invoice Require Management Approval',  CAST(CASE WHEN OLD.invoiceRequireManagementApproval=0 THEN 'No' ELSE 'Yes' END AS CHAR), CAST(CASE WHEN NEW.invoiceRequireManagementApproval=0 THEN 'No' ELSE 'Yes' END AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  END;  \n" +
                /* **************************** New Script -> 11-02-2022  *********************************** */
                "DROP TRIGGER IF EXISTS `Trg_AU_packing_slip_material_receive_det`;  \n" +
                "CREATE TRIGGER `Trg_AU_packing_slip_material_receive_det` AFTER UPDATE ON `packing_slip_material_receive_det` FOR EACH ROW BEGIN  \n" +
                "	DECLARE v_PackingSlipReceiptType VARCHAR(5);  \n" +
                "	DECLARE v_CreditMemoType VARCHAR(5);  \n" +
                "	DECLARE v_oldRefRMAPackingSlipNumber VARCHAR(100);  \n" +
                "	DECLARE v_newRefRMAPackingSlipNumber VARCHAR(100);  \n" +
                "	DECLARE v_oldRefRMAInvoiceNumber VARCHAR(100);  \n" +
                "	DECLARE v_newRefRMAInvoiceNumber VARCHAR(100);  \n" +
                "	DECLARE PORLINE_OTY INT;  \n" +
                "	DECLARE vTotalQty INT;  \n" +
                "    DECLARE vPOID INT;  \n" +
                "	DECLARE vMfgCodeFormat INT;  \n" +
                "    DECLARE vOldCustomer VARCHAR(100);  \n" +
                "    DECLARE vNewCustomer VARCHAR(100);  \n" +
                "  \n" +
                "    SELECT fun_getMFGCodeNameFormat() INTO vMfgCodeFormat;  \n" +
                "  \n" +
                "    SELECT `qty` INTO PORLINE_OTY FROM purchase_order_line_release_det WHERE id = New.refPOReleaseLineID;  \n" +
                "	SELECT SUM(IFNULL(packingSlipQty,0)) INTO vTotalQty FROM packing_slip_material_receive_det WHERE refPOReleaseLineID=New.refPOReleaseLineID AND IFNULL(isReceivedWrongPart,0)=0 AND isdeleted=0;  \n" +
                "    select refPurchaseOrderID into vPOID from purchase_order_det where id = NEW.refPurchaseOrderDetID;  \n" +
                "  \n" +
                "	IF (NEW.refPurchaseOrderDetID IS NOT NULL AND New.refPOReleaseLineID IS NOT NULL AND NEW.refPOLineID IS NOT NULL AND PORLINE_OTY <= vTotalQty) THEN  \n" +
                "		UPDATE purchase_order_line_release_det SET poLineWorkingStatus='C',poLineCompleteType='Auto',receivedQty=vTotalQty WHERE id = NEW.refPOReleaseLineID;  \n" +
                "	ELSE  \n" +
                "		UPDATE purchase_order_line_release_det SET poLineWorkingStatus='P',receivedQty=vTotalQty,poLineCompleteType=(NULL),poLineCompleteReason=(NULL) WHERE id = NEW.refPOReleaseLineID;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(vPOID IS NOT NULL) THEN  \n" +
                "		CALL Sproc_UpdatePoWorkingLineStatus(vPOID);  \n" +
                "        /* (-20) is Purchase Order Entity Default Entry ID*/  \n" +
                "        insert into pending_elastic_entity_sync_data(entityID,entityParamDet) values(-20,concat('{\"id\":', vPOID , '}'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	SELECT receiptType, creditMemoType INTO v_PackingSlipReceiptType, v_CreditMemoType FROM packing_slip_material_receive WHERE id = NEW.refPackingSlipMaterialRecID;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.packingSlipSerialNumber,0) != IFNULL(NEW.packingSlipSerialNumber,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "        valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR),  \n" +
                "		(  \n" +
                "			CASE  \n" +
                "				WHEN v_PackingSlipReceiptType = 'P' THEN 'Packing Slip Line#'  \n" +
                "				WHEN v_PackingSlipReceiptType = 'R' THEN 'RMA Line#'  \n" +
                "				WHEN v_PackingSlipReceiptType = 'I' THEN 'Supplier Invoice Line#'  \n" +
                "				WHEN v_PackingSlipReceiptType = 'C' THEN 'Credit Memo Line#'  \n" +
                "				WHEN v_PackingSlipReceiptType = 'D' THEN 'Debit Memo Line#'  \n" +
                "				ELSE NULL  \n" +
                "			END  \n" +
                "		),  \n" +
                "		CAST(OLD.packingSlipSerialNumber AS CHAR), CAST(new.packingSlipSerialNumber AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive_det','packingSlipSerialNumber'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.poReleaseNumber,0) != IFNULL(NEW.poReleaseNumber,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "        valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'PO Release#', CAST(OLD.poReleaseNumber AS CHAR), CAST(new.poReleaseNumber AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive_det','poReleaseNumber'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.internalRef,0) != IFNULL(NEW.internalRef,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "        valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Internal Ref#', CAST(OLD.internalRef AS CHAR), CAST(new.internalRef AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive_det','internalRef'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.nickname,0) != IFNULL(NEW.nickname,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "        valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Nickname', CAST(OLD.nickname AS CHAR), CAST(new.nickname AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive_det','nickname'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.rohsstatus,0) != IFNULL(NEW.rohsstatus,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "        valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'RoHS Requirement', CAST(fun_getRoHSNameByID(OLD.rohsstatus) AS CHAR), CAST(fun_getRoHSNameByID(new.rohsstatus) AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        'varchar');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.partID,0) != IFNULL(NEW.partID,0) THEN  \n" +
                "		IF (v_PackingSlipReceiptType = 'P' OR v_PackingSlipReceiptType = 'R') THEN  \n" +
                "			INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "			valueDataType)  \n" +
                "			VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'MFR', CAST(fun_getMfgCodeAndNameByPartID(OLD.partID) AS CHAR), CAST(fun_getMfgCodeAndNameByPartID(new.partID) AS CHAR),  \n" +
                "			fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "            'varchar');  \n" +
                "		END IF;  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'MPN', CAST(fun_getComponentNameByID(OLD.partID) AS CHAR), CAST(fun_getComponentNameByID(new.partID) AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        'varchar');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.refSupplierPartId,0) != IFNULL(NEW.refSupplierPartId,0) THEN  \n" +
                "		IF (v_PackingSlipReceiptType = 'P' OR v_PackingSlipReceiptType = 'R') THEN  \n" +
                "			INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "			valueDataType)  \n" +
                "			VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Supplier', CAST(fun_getMfgCodeAndNameByPartID(OLD.refSupplierPartId) AS CHAR), CAST(fun_getMfgCodeAndNameByPartID(new.refSupplierPartId) AS CHAR),  \n" +
                "			fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "            'varchar');  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'SPN', CAST(fun_getComponentNameByID(OLD.refSupplierPartId) AS CHAR), CAST(fun_getComponentNameByID(new.refSupplierPartId) AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        'varchar');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.orderedQty,0) != IFNULL(NEW.orderedQty,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Order Qty', CAST(CAST(OLD.orderedQty AS SIGNED) AS CHAR), CAST(CAST(new.orderedQty AS SIGNED) AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        'qty');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.receivedQty,0) != IFNULL(NEW.receivedQty,0) THEN  \n" +
                "		IF (IFNULL(v_CreditMemoType,0) != 'MC' AND IFNULL(v_CreditMemoType,0) != 'MD') THEN  \n" +
                "			INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "			valueDataType)  \n" +
                "			VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), (CASE WHEN (v_CreditMemoType = 'RC' OR v_PackingSlipReceiptType = 'R') THEN 'Shipped Qty' ELSE 'Received Qty' END),  \n" +
                "			CAST(CAST(OLD.receivedQty AS SIGNED) AS CHAR), CAST(CAST(new.receivedQty AS SIGNED) AS CHAR),  \n" +
                "			fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "            'qty');  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.packingSlipQty,0) != IFNULL(NEW.packingSlipQty,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), (CASE WHEN v_CreditMemoType = 'RC' THEN 'Credit Memo Qty' WHEN v_PackingSlipReceiptType = 'R' THEN 'RMA Qty' ELSE 'Packing Slip Qty' END),  \n" +
                "		CAST(CAST(OLD.packingSlipQty AS SIGNED) AS CHAR), CAST(CAST(new.packingSlipQty AS SIGNED) AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        'qty');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.binID,0) != IFNULL(NEW.binID,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Location/Bin', CAST(fun_getBinNameByID(OLD.binID) AS CHAR), CAST(fun_getBinNameByID(new.binID) AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        'varchar');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.warehouseID,0) != IFNULL(NEW.warehouseID,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Warehouse', CAST(fun_getWarehouseNameByID(OLD.warehouseID) AS CHAR), CAST(fun_getWarehouseNameByID(new.warehouseID) AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        'varchar');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.parentWarehouseID,0) != IFNULL(NEW.parentWarehouseID,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Parent Warehouse', CAST(fun_getWarehouseNameByID(OLD.parentWarehouseID) AS CHAR), CAST(fun_getWarehouseNameByID(new.parentWarehouseID) AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        'varchar');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.invoicePrice,0) != IFNULL(NEW.invoicePrice,0) THEN  \n" +
                "		IF (IFNULL(v_PackingSlipReceiptType,0) != 'R') THEN  \n" +
                "			INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "			valueDataType)  \n" +
                "			VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), (CASE WHEN v_CreditMemoType = 'RC' THEN 'Credit Memo Unit Price' ELSE 'Invoice Price' END), CAST(OLD.invoicePrice AS CHAR), CAST(new.invoicePrice AS CHAR),  \n" +
                "			fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "            'unitprice');  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.purchasePrice,0) != IFNULL(NEW.purchasePrice,0) THEN  \n" +
                "		IF (IFNULL(v_CreditMemoType,0) != 'MC' AND IFNULL(v_CreditMemoType,0) != 'MD') THEN  \n" +
                "			INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "			valueDataType)  \n" +
                "			VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'PO Unit Price', CAST(OLD.purchasePrice AS CHAR), CAST(new.purchasePrice AS CHAR),  \n" +
                "			fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "            'unitprice');  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.approveNote,0) != IFNULL(NEW.approveNote,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "			valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Approve Note', CAST(OLD.approveNote AS CHAR), CAST(new.approveNote AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive_det','approveNote'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.`status`,0) != IFNULL(NEW.`status`,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "			valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Charged Status',  \n" +
                "		CAST(  \n" +
                "			(  \n" +
                "				CASE  \n" +
                "					WHEN old.`status` = 'P' THEN 'Pending'  \n" +
                "					WHEN old.`status` = 'A' THEN 'Approved'  \n" +
                "					WHEN old.`status` = 'D' THEN 'Disapproved'  \n" +
                "				END  \n" +
                "			)  \n" +
                "		AS CHAR),  \n" +
                "		CAST(  \n" +
                "			(  \n" +
                "				CASE  \n" +
                "					WHEN new.`status` = 'P' THEN 'Pending'  \n" +
                "					WHEN new.`status` = 'A' THEN 'Approved'  \n" +
                "					WHEN new.`status` = 'D' THEN 'Disapproved'  \n" +
                "				END  \n" +
                "			)  \n" +
                "		AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        'varchar');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.extendedPrice,0) != IFNULL(NEW.extendedPrice,0) THEN  \n" +
                "		IF (IFNULL(v_CreditMemoType,0) != 'MC' AND IFNULL(v_CreditMemoType,0) != 'MD') THEN  \n" +
                "			INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "			valueDataType)  \n" +
                "			VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), (CASE WHEN v_CreditMemoType = 'RC' THEN 'Extended Credit Memo Price' WHEN v_PackingSlipReceiptType = 'R' THEN 'Extended RMA Price' ELSE 'Extended Invoice Price' END),  \n" +
                "			OLD.extendedPrice, new.extendedPrice, fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "            'amount');  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.extendedReceivedPrice,0) != IFNULL(NEW.extendedReceivedPrice,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "			valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Extended PO Price',  \n" +
                "		OLD.extendedReceivedPrice, new.extendedReceivedPrice,  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        'amount');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.difference,0) != IFNULL(NEW.difference,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "			valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Difference Amount', CAST(OLD.difference AS CHAR), CAST(new.difference AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        'unitprice');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.differenceQty,0) != IFNULL(NEW.differenceQty,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "        valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Diffrence Qty', CAST(OLD.differenceQty AS CHAR), CAST(new.differenceQty AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        'qty');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.packagingID,0) != IFNULL(NEW.packagingID,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "        valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Packaging', CAST(fun_getPackagingNameByID(OLD.packagingID) AS CHAR), CAST(fun_getPackagingNameByID(new.packagingID) AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        'varchar');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.receivedStatus,0) != IFNULL(NEW.receivedStatus,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "        valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Received Status',  \n" +
                "		CAST(  \n" +
                "			(  \n" +
                "				CASE  \n" +
                "					WHEN old.receivedStatus = 'P' THEN 'Pending'  \n" +
                "					WHEN old.receivedStatus = 'A' THEN 'Accepted'  \n" +
                "					WHEN old.receivedStatus = 'R' THEN 'Rejected'  \n" +
                "				END  \n" +
                "			)  \n" +
                "		AS CHAR),  \n" +
                "		CAST(  \n" +
                "			(  \n" +
                "				CASE  \n" +
                "					WHEN new.receivedStatus = 'P' THEN 'Pending'  \n" +
                "					WHEN new.receivedStatus = 'A' THEN 'Accepted'  \n" +
                "					WHEN new.receivedStatus = 'R' THEN 'Rejected'  \n" +
                "				END  \n" +
                "			)  \n" +
                "		AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        'varchar');  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.`comment`,0) != IFNULL(NEW.`comment`,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "        valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Line Comment', CAST(OLD.`comment` AS CHAR), CAST(new.`comment` AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive_det','comment'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.remark,0) != IFNULL(NEW.remark,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "        valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Line Comment', CAST(OLD.remark AS CHAR), CAST(new.remark AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive_det','remark'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.internalRemark,0) != IFNULL(NEW.internalRemark,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "        valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Internal Line Comment', CAST(OLD.internalRemark AS CHAR), CAST(new.internalRemark AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive_det','internalRemark'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF v_PackingSlipReceiptType = 'R' THEN  \n" +
                "		IF (old.refPackingSlipIdForRma IS NOT NULL) THEN  \n" +
                "			SELECT fun_getPackingSlipNumberById(old.refPackingSlipIdForRma) INTO v_oldRefRMAPackingSlipNumber;  \n" +
                "		ELSE  \n" +
                "			SET v_oldRefRMAPackingSlipNumber = old.refPackingSlipForRma;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF (new.refPackingSlipIdForRma IS NOT NULL) THEN  \n" +
                "			SELECT fun_getPackingSlipNumberById(new.refPackingSlipIdForRma) INTO v_newRefRMAPackingSlipNumber;  \n" +
                "		ELSE  \n" +
                "			SET v_newRefRMAPackingSlipNumber = new.refPackingSlipForRma;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF (old.refInvoiceIdForRma IS NOT NULL) THEN  \n" +
                "			SELECT fun_getSupplierInvoiceNumberByID(old.refInvoiceIdForRma) INTO v_oldRefRMAInvoiceNumber;  \n" +
                "		ELSE  \n" +
                "			SET v_oldRefRMAInvoiceNumber = old.refInvoiceForRma;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF (new.refInvoiceIdForRma IS NOT NULL) THEN  \n" +
                "			SELECT fun_getSupplierInvoiceNumberByID(new.refInvoiceIdForRma) INTO v_newRefRMAInvoiceNumber;  \n" +
                "		ELSE  \n" +
                "			SET v_newRefRMAInvoiceNumber = new.refInvoiceForRma;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF IFNULL(v_oldRefRMAPackingSlipNumber,0) != IFNULL(v_newRefRMAPackingSlipNumber,0) THEN  \n" +
                "			INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "			valueDataType)  \n" +
                "			VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Packing Slip#', CAST(v_oldRefRMAPackingSlipNumber AS CHAR), CAST(v_newRefRMAPackingSlipNumber AS CHAR),  \n" +
                "			fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "            'varchar');  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF IFNULL(v_oldRefRMAInvoiceNumber,0) != IFNULL(v_newRefRMAInvoiceNumber,0) THEN  \n" +
                "			INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "			valueDataType)  \n" +
                "			VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Supplier Invoice#', CAST(v_oldRefRMAInvoiceNumber AS CHAR), CAST(v_newRefRMAInvoiceNumber AS CHAR),  \n" +
                "			fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "            'varchar');  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.isDeleted,0) != IFNULL(NEW.isDeleted,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "			valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Deleted', NULL,  \n" +
                "		CONCAT(  \n" +
                "			(  \n" +
                "				CASE  \n" +
                "					WHEN v_PackingSlipReceiptType = 'P' THEN 'Packing Slip Line# '  \n" +
                "					WHEN v_PackingSlipReceiptType = 'R' THEN 'RMA Line# '  \n" +
                "					WHEN v_PackingSlipReceiptType = 'I' THEN 'Invoice Line# '  \n" +
                "					WHEN v_PackingSlipReceiptType = 'C' THEN 'Credit Memo Line# '  \n" +
                "					WHEN v_PackingSlipReceiptType = 'D' THEN 'Debit Memo Line# '  \n" +
                "					ELSE 'Line# '  \n" +
                "				END  \n" +
                "			), CAST(OLD.packingSlipSerialNumber AS CHAR), ' is Deleted'  \n" +
                "		),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        'varchar');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.updateByRoleId,0) != IFNULL(NEW.updateByRoleId,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "			valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Last Modified By Role', CAST(fun_getRoleByID(OLD.updateByRoleId) AS CHAR), CAST(fun_getRoleByID(new.updateByRoleId) AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        'varchar');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  IF IFNULL(OLD.isLineCustConsigned,0) != IFNULL(NEW.isLineCustConsigned,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\",CAST(new.id AS CHAR),'Packing Slip Line Customer Consigned (No Charge)',CAST(CASE WHEN OLD.isLineCustConsigned=0 THEN 'No' ELSE 'Yes' END AS CHAR),  \n" +
                "		CAST(CASE WHEN NEW.isLineCustConsigned=0 THEN 'No' ELSE 'Yes' END AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.LineCustomerID,0) != IFNULL(NEW.LineCustomerID,0) THEN  \n" +
                "		SELECT fun_GetFormattedMfgCode(mfgCode, mfgName, vMfgCodeFormat) INTO vOldCustomer FROM mfgcodemst WHERE id=OLD.LineCustomerID;  \n" +
                "        SELECT fun_GetFormattedMfgCode(mfgCode, mfgName, vMfgCodeFormat) INTO vNewCustomer FROM mfgcodemst WHERE id=NEW.LineCustomerID;  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\",CAST(new.id AS CHAR),'Packing Slip Line Customer',CAST(vOldCustomer AS CHAR),  \n" +
                "		CAST(vNewCustomer AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  IF IFNULL(OLD.isNonUMIDStock,0) != IFNULL(NEW.isNonUMIDStock,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\",CAST(new.id AS CHAR),'Packing Slip Line Do Not Create UMID',CAST(CASE WHEN OLD.isNonUMIDStock=0 THEN 'No' ELSE 'Yes' END AS CHAR),  \n" +
                "		CAST(CASE WHEN NEW.isNonUMIDStock=0 THEN 'No' ELSE 'Yes' END AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 11-02-2022 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1300,'1.00','V1',' Bug 41299: [Main Branch] Showing incorrect user name in Modified By for Packing Slip History - Jay '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1300:
            allDbChangesArray.push(
                /* **************************** New Script -> 14-02-2022 *********************************** */
                "DROP PROCEDURE IF EXISTS Sproc_GetAssemblyWOStockDetails;  \n" +
                "CREATE PROCEDURE `Sproc_GetAssemblyWOStockDetails`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN pRecordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pPartID INT,  \n" +
                "	IN pWoID INT ,  \n" +
                "    IN pPONumber VARCHAR(255),  \n" +
                "    IN pIsShowAllWO TINYINT,  \n" +
                "    IN pSONumber VARCHAR(255))  \n" +
                "BEGIN  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;  \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "	DECLARE whereClause1 VARCHAR(500);  \n" +
                "	SET whereClause1 = \"where 1=1\";  \n" +
                "  \n" +
                "    IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = '1=1' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
                "  \n" +
                "    IF pPartID IS NOT NULL THEN  \n" +
                "		SET whereClause1 = CONCAT(whereClause1,\" AND PartID = \", pPartID);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF pWoID IS NOT NULL THEN  \n" +
                "		SET whereClause1 = CONCAT(whereClause1,\" AND vu_wss.woID = \", pWoID);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF (pPONumber IS NOT NULL) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND c.poNumber like \"%' ,pPONumber,'%\" and c.soNumbers like \"%' ,pSONumber,'%\" ' );  \n" +
                "	END IF;  \n" +
                "  \n" +
                "     IF (pIsShowAllWO = FALSE)  THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND remaningtotalQty > 0 ');  \n" +
                "    END IF;  \n" +
                "  \n" +
                "	SET @Sproc_GetAssemblyWOStockDetails = CONCAT(\"SELECT vu_wss.* ,  \n" +
                "						(vu_wss.readytoShipQty + vu_wss.shippedQty) AS movedToStockQty ,  \n" +
                "						vu_wosod.totalPOQty, vu_wosod.POQtyValues soPOQty,  \n" +
                "						 vu_wosod.totalMRPQty, vu_wosod.MRPQtyValues soMRPQty,  \n" +
                "                         (CASE WHEN vu_wss.woid IS NULL THEN vu_wss.initialStockPoQty ELSE vu_wss.poQty END) AS initialWOStockPOQty ,  \n" +
                "						 (CASE WHEN vu_wss.woid IS NULL THEN  \n" +
                "							(select group_concat(poNumberList SEPARATOR ',') FROM (  \n" +
                "								SELECT (case when refSalesOrderID is Null then GROUP_CONCAT(DISTINCT poNumber SEPARATOR ', ')  \n" +
                "								else GROUP_CONCAT(DISTINCT poNumber,'#####',refSalesOrderID  SEPARATOR '@@@@@') end	) poNumberList  \n" +
                "								 FROM `assemblystock`  \n" +
                "								 WHERE woNumber = vu_wss.woNumber AND isDeleted = 0 AND `type` = 'OS' and partID = vu_wss.partID  \n" +
                "								 GROUP BY refSalesOrderID, poNumber) a)  \n" +
                "							ELSE (CASE WHEN wo.isRevisedWO = 0 THEN  vu_wosod.poNumber ELSE parentSaleDtl.poNumber END)  \n" +
                "						   END) poNumber,  \n" +
                "						 (CASE WHEN vu_wss.woid IS NULL THEN  \n" +
                "							(select group_concat(if(soNumberList='',null,soNumberList) SEPARATOR ',') FROM (  \n" +
                "								SELECT (case when refSalesOrderID is Null then GROUP_CONCAT(DISTINCT soNumber SEPARATOR ', ')  \n" +
                "									 else GROUP_CONCAT(DISTINCT soNumber,'#####',refSalesOrderID  SEPARATOR '@@@@@') end)  soNumberList  \n" +
                "									FROM `assemblystock`  \n" +
                "									WHERE woNumber = vu_wss.woNumber AND isDeleted = 0 AND `type` = 'OS' and partID = vu_wss.partID  \n" +
                "								 GROUP BY refSalesOrderID, soNumber) a)  \n" +
                "							ELSE (CASE WHEN wo.isRevisedWO = 0 THEN  vu_wosod.salesOrderNumber ELSE parentSaleDtl.salesOrderNumber END)  \n" +
                "                            END) soNumbers,  \n" +
                "						vu_wosod.lineID, vu_wosod.salesOrderMstIDs, vu_wosod.SOPOQtyValues ,  \n" +
                "						(CASE WHEN vu_wss.woid IS NULL THEN 'Initial Stock' ELSE 'Work Order Stock' END) AS stockTypeName ,  \n" +
                "                        (CASE WHEN vu_wss.woid IS NULL THEN vu_wss.stockAdjustmentQty ELSE ((vu_wss.buildQty - vu_wss.scrapQty - vu_wss.poQty) + vu_wss.stockAdjustmentQty) END) AS excessFreetoUseQty,  \n" +
                "                        (CASE WHEN vu_wss.woid IS NULL THEN ((vu_wss.readytoShipQty + vu_wss.shippedQty + vu_wss.stockAdjustmentQty) - (vu_wss.shippedQty)) ELSE ((vu_wss.buildQty) - (vu_wss.scrapQty + vu_wss.shippedQty + vu_wss.readytoShipQty)) END) AS remaningtotalQty  \n" +
                "					FROM vu_workorder_summary_stk vu_wss  \n" +
                "						LEFT JOIN (SELECT woID AS woMstID, terminateWOID, isRevisedWO FROM workorder WHERE deletedAt IS NULL) AS wo  \n" +
                "								ON vu_wss.woid = wo.woMstID  \n" +
                "						LEFT JOIN vu_workorder_salesorder_details vu_wosod ON vu_wss.woid =  vu_wosod.woID  \n" +
                "						LEFT JOIN vu_workorder_salesorder_details parentSaleDtl ON wo.terminateWOID = parentSaleDtl.woID  \n" +
                "					\", whereClause1);  \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY woid ASC\");  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND pRecordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (ppageIndex -1) * pRecordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@Sproc_GetAssemblyWOStockDetails,\" ) c where 1=1 and \", pWhereClause);  \n" +
                "	PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"select c.*  from ( \", @Sproc_GetAssemblyWOStockDetails,\" ) c where \" , pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "-- select @SQLStatement2;  \n" +
                "    PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 14-02-2022  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1301,'1.00','V1','Bug 41337: [Main Branch] - While adding duplicate WO in initial stock and refresh View Assembly Stock List popup that time error should not be displayed on screen. - Shweta '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1301:
            allDbChangesArray.push(
                /* **************************** New Script -> 14-02-2022 *********************************** */
                "DROP TRIGGER IF EXISTS Trg_AU_customer_packingslip;  \n" +
                "CREATE TRIGGER `Trg_AU_customer_packingslip` AFTER UPDATE ON `customer_packingslip` FOR EACH ROW BEGIN  \n" +
                "	DECLARE vTransTypeText VARCHAR(20);  \n" +
                "	SET vTransTypeText= IF(NEW.transType='I','Invoice','Credit Memo');  \n" +
                "  \n" +
                "    IF IFNULL(OLD.soNumber,0) != IFNULL(NEW.soNumber,0) THEN  \n" +
                "       INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "       VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'SO#',CAST(OLD.soNumber AS CHAR),  \n" +
                "       CAST(NEW.soNumber AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.poNumber,0) != IFNULL(NEW.poNumber,0) THEN  \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "    VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'PO#',CAST(OLD.poNumber AS CHAR),  \n" +
                "       CAST(NEW.poNumber AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.poDate,0) != IFNULL(NEW.poDate,0) THEN  \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "    VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'PO Date',CAST(DATE_FORMAT(OLD.poDate, '%m/%d/%y') AS CHAR),  \n" +
                "       CAST(DATE_FORMAT(NEW.poDate, '%m/%d/%y') AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.soDate,0) != IFNULL(NEW.soDate,0) THEN  \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "    VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'SO Date', CAST(DATE_FORMAT(OLD.soDate, '%m/%d/%y') AS CHAR),  \n" +
                "       CAST(DATE_FORMAT(NEW.soDate, '%m/%d/%y') AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.contactPersonID,0) != IFNULL(NEW.contactPersonID,0) THEN  \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "    VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'Contact Person',(SELECT CONCAT(firstName,' ',lastName) FROM contactperson WHERE personId=OLD.contactPersonId),  \n" +
                "      (SELECT CONCAT(firstName,' ',lastName) FROM contactperson WHERE personId=NEW.contactPersonId), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.packingSlipComment,0) != IFNULL(NEW.packingSlipComment,0) THEN  \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "    VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'Header Shipping Comments', OLD.packingSlipComment,  \n" +
                "       NEW.packingSlipComment, fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.substatus ,0) != IFNULL(NEW.substatus ,0) THEN  \n" +
                "	IF(NEW.transType='P')THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "		VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'Status', (CASE WHEN OLD.substatus=1 THEN 'Draft'WHEN OLD.substatus=2 THEN 'Ready To Ship'WHEN OLD.substatus=3 THEN 'Waiting For Shipping Label'WHEN OLD.substatus=4 THEN 'Waiting For Pickup' WHEN OLD.substatus= 6 THEN 'Published' WHEN OLD.substatus= 5 THEN 'Shipped'  ELSE '' END),  \n" +
                "		(CASE WHEN NEW.substatus=1 THEN 'Draft'WHEN NEW.substatus=2 THEN 'Ready To Ship'WHEN NEW.substatus=3 THEN 'Waiting For Shipping Label'WHEN NEW.substatus=4 THEN 'Waiting For Pickup' WHEN NEW.substatus=6 THEN 'Published'  ELSE 'Shipped' END), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	ELSEIF (NEW.transType='I')THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "		VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'Status', (CASE WHEN OLD.substatus=1 THEN 'Shipped - Not Invoiced' WHEN OLD.substatus=2 THEN 'Invoiced' WHEN Old.subStatus=3 THEN 'Corrected and Invoiced'  WHEN Old.subStatus=4 THEN 'Draft' WHEN Old.subStatus=5 THEN 'Published' END),  \n" +
                "		(CASE WHEN NEW.substatus=1 THEN 'Shipped - Not Invoiced' WHEN NEW.substatus=2 THEN 'Invoiced' WHEN NEW.subStatus=3 THEN 'Corrected and Invoiced'  WHEN NEW.subStatus=4 THEN 'Draft' WHEN NEW.subStatus=5 THEN 'Published' END), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	ELSEIF (NEW.transType='C')THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "		VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'Status', (CASE WHEN OLD.substatus=1 THEN 'Draft' WHEN OLD.substatus=2 THEN 'Published' ELSE '' END),  \n" +
                "		(CASE WHEN NEW.substatus=1 THEN 'Draft' WHEN NEW.substatus=2 THEN 'Published' ELSE '' END), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.shippingMethodId ,0) != IFNULL(NEW.shippingMethodId ,0) THEN  \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "    VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'Shipping Method', fun_getGenericCategoryNameByID(OLD.shippingMethodId),  \n" +
                "       fun_getGenericCategoryNameByID(NEW.shippingMethodId), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.sorevision ,0) != IFNULL(NEW.sorevision ,0) THEN  \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "    VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'SO Version', CAST(OLD.sorevision AS CHAR),  \n" +
                "       CAST(NEW.sorevision AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.freeOnBoardId ,0) != IFNULL(NEW.freeOnBoardId ,0) THEN  \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "    VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'FOB',(SELECT `name` FROM freeonboardmst WHERE id=OLD.freeOnBoardId) ,  \n" +
                "     (SELECT `name` FROM freeonboardmst WHERE id=NEW.freeOnBoardId), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.invoiceNumber ,0) != IFNULL(NEW.invoiceNumber ,0) THEN  \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "    VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'Invoice#',CAST(OLD.invoiceNumber AS CHAR) ,  \n" +
                "     CAST(NEW.invoiceNumber AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.invoiceDate ,0) != IFNULL(NEW.invoiceDate,0) THEN  \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "    VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'Invoice Date',CAST(DATE_FORMAT(OLD.invoiceDate, '%m/%d/%y') AS CHAR) ,  \n" +
                "     CAST(DATE_FORMAT(NEW.invoiceDate, '%m/%d/%y') AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.headerComment ,0) != IFNULL(NEW.headerComment,0) THEN  \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "    VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'Header Internal Notes',CAST(OLD.headerComment AS CHAR),  \n" +
                "     CAST(NEW.headerComment AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.packingSlipDate,0) != IFNULL(NEW.packingSlipDate,0) THEN  \n" +
                "	INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "	VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'Packing Slip Date',CAST(DATE_FORMAT(OLD.packingSlipDate, '%m/%d/%y') AS CHAR),  \n" +
                "		CAST(DATE_FORMAT(NEW.packingSlipDate, '%m/%d/%y') AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.packingSlipNumber,0) != IFNULL(NEW.packingSlipNumber,0) THEN  \n" +
                "       INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "       VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'Packing Slip#',CAST(OLD.packingSlipNumber AS CHAR),  \n" +
                "		CAST(NEW.packingSlipNumber AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.termsID,0) != IFNULL(NEW.termsID,0) THEN  \n" +
                "	INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "	VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'Terms',  \n" +
                "		(SELECT (CASE WHEN gencCategoryCode IS NOT NULL THEN CONCAT('(', gencCategoryCode, ') ', gencCategoryName) ELSE gencCategoryName    END)  \n" +
                "			FROM genericcategory  WHERE gencCategoryID = OLD.termsID) ,  \n" +
                "		(SELECT (CASE WHEN gencCategoryCode IS NOT NULL THEN CONCAT('(', gencCategoryCode, ') ', gencCategoryName) ELSE gencCategoryName    END)  \n" +
                "			FROM genericcategory  WHERE gencCategoryID = NEW.termsID) ,  \n" +
                "	fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.salesCommissionTo,0) != IFNULL(NEW.salesCommissionTo,0) THEN  \n" +
                "	INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "	VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'Sales Commission To',  \n" +
                "		(SELECT CONCAT('(',initialName,')',' ',IFNULL(firstName,''),' ',IFNULL(lastName,'')) FROM employees WHERE id = OLD.salesCommissionTo),  \n" +
                "		(SELECT CONCAT('(',initialName,')',' ',IFNULL(firstName,''),' ',IFNULL(lastName,'')) FROM employees WHERE id = NEW.salesCommissionTo),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.totalAmount ,0) != IFNULL(NEW.totalAmount ,0) THEN  \n" +
                "	INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "	VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'Total Amount ($)',  \n" +
                "		CASE WHEN NEW.transType='C' THEN CONCAT('(',CAST(FORMAT(REPLACE(OLD.totalAmount,'-',''),2) AS CHAR),')') ELSE CAST(FORMAT(OLD.totalAmount,2) AS CHAR) END,  \n" +
                "		CASE WHEN NEW.transType='C' THEN CONCAT('(',CAST(FORMAT(REPLACE(NEW.totalAmount,'-',''),2) AS CHAR),')') ELSE CAST(FORMAT(NEW.totalAmount,2) AS CHAR) END,  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.isLocked,0) != IFNULL(NEW.isLocked,0) THEN  \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "    VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'Locked',(CASE WHEN OLD.isLocked=0 THEN 'No' WHEN OLD.isLocked=1 THEN 'Yes' ELSE '' END),  \n" +
                "      (CASE WHEN NEW.isLocked=0 THEN 'No' WHEN NEW.isLocked=1 THEN 'Yes' ELSE '' END), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.lockedAt ,0) != IFNULL(NEW.lockedAt ,0) THEN  \n" +
                "	INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType)  \n" +
                "	VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),(CASE WHEN OLD.isLocked = 1 THEN 'Unlocked Date' ELSE 'Locked Date' END),'',  \n" +
                "		(CASE WHEN OLD.isLocked = 1 THEN fun_DatetimetoUTCDateTime() ELSE NEW.lockedAt END),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,  \n" +
                "		fun_getDataTypeBasedOnTableAndColumnName(\"CUSTOMER_PACKINGSLIP\",'lockedAt'));  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.lockedBy ,0) != IFNULL(NEW.lockedBy ,0) THEN  \n" +
                "	INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "	VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),(CASE WHEN OLD.isLocked = 1 THEN 'Unlocked By' ELSE 'Locked By' END),'',  \n" +
                "		(CASE WHEN OLD.isLocked = 1 THEN fun_getUserNameByID(NEW.updatedBy) ELSE fun_getUserNameByID(NEW.lockedBy) END) ,  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "  \n" +
                "   IF IFNULL(OLD.billingAddress ,0) != IFNULL(NEW.billingAddress ,0) THEN  \n" +
                "	INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "	VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'Bill To',CAST(OLD.billingAddress AS CHAR),  \n" +
                "		CAST(NEW.billingAddress AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.shippingAddress ,0) != IFNULL(NEW.shippingAddress ,0) THEN  \n" +
                "	INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "	VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'Ship To',CAST(OLD.shippingAddress AS CHAR),  \n" +
                "		CAST(NEW.shippingAddress AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.intermediateAddress ,0) != IFNULL(NEW.intermediateAddress ,0) THEN  \n" +
                "	INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "	VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'Mark For',CAST(OLD.intermediateAddress AS CHAR) ,  \n" +
                "		CAST(NEW.intermediateAddress AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.creditMemoNumber ,0) != IFNULL(NEW.creditMemoNumber ,0) THEN  \n" +
                "	INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "	VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'Credit Memo Number',CAST(OLD.creditMemoNumber AS CHAR),  \n" +
                "		CAST(NEW.creditMemoNumber AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.creditMemoDate,0) != IFNULL(NEW.creditMemoDate,0) THEN  \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "    VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'Credit Memo Date',CAST(DATE_FORMAT(OLD.creditMemoDate, '%m/%d/%y') AS CHAR),  \n" +
                "       CAST(DATE_FORMAT(NEW.creditMemoDate, '%m/%d/%y') AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.refDebitMemoNumber ,0) != IFNULL(NEW.refDebitMemoNumber ,0) THEN  \n" +
                "	INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "	VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'Ref. Debit Memo#',CAST(OLD.refDebitMemoNumber AS CHAR) ,  \n" +
                "		CAST(NEW.refDebitMemoNumber AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.refDebitMemoDate,0) != IFNULL(NEW.refDebitMemoDate,0) THEN  \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "    VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'Ref. Debit Memo Date',CAST(DATE_FORMAT(OLD.refDebitMemoDate, '%m/%d/%y') AS CHAR),  \n" +
                "       CAST(DATE_FORMAT(NEW.refDebitMemoDate, '%m/%d/%y') AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "  \n" +
                "  \n" +
                "    IF IFNULL(OLD.rmaNumber ,0) != IFNULL(NEW.rmaNumber ,0) THEN  \n" +
                "	INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "	VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'RMA#',CAST(OLD.rmaNumber AS CHAR) ,  \n" +
                "		CAST(NEW.rmaNumber AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "  \n" +
                "   IF IFNULL(OLD.revision ,0) != IFNULL(NEW.revision,0) THEN  \n" +
                "	INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "	VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'Revision',OLD.revision  ,  \n" +
                "		NEW.revision , fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "  \n" +
                "     IF IFNULL(OLD.isZeroValue,0) != IFNULL(NEW.isZeroValue,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "	   VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(new.id AS CHAR),CONCAT('Confirming Zero Value',vTransTypeText),(CASE WHEN OLD.isZeroValue =0 THEN 'False' ELSE 'True' END),  \n" +
                "	   (CASE WHEN NEW.isZeroValue =0 THEN 'False' ELSE 'True' END),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "     IF IFNULL(OLD.poRevision,0) != IFNULL(NEW.poRevision,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "	   VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(new.id AS CHAR),'PO Revision',OLD.poRevision,NEW.poRevision,  \n" +
                "       fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "     IF IFNULL(OLD.isMarkForRefund,0) != IFNULL(NEW.isMarkForRefund,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "	   VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(new.id AS CHAR),'Mark For Refund',OLD.isMarkForRefund,NEW.isMarkForRefund,  \n" +
                "       fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.agreedRefundAmt,0) != IFNULL(NEW.agreedRefundAmt,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "	   VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(new.id AS CHAR),'Agreed Refund Amt',OLD.agreedRefundAmt,NEW.agreedRefundAmt,  \n" +
                "       fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "      IF IFNULL(OLD.carrierID ,0) != IFNULL(NEW.carrierID ,0) THEN  \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "    VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'Carrier', fun_getGenericCategoryNameByID(OLD.carrierID),  \n" +
                "       fun_getGenericCategoryNameByID(NEW.carrierID), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "    IF IFNULL(OLD.carrierAccountNumber ,0) != IFNULL(NEW.carrierAccountNumber ,0) THEN  \n" +
                "		 INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "		VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'Carrier Account# ', CAST(OLD.carrierAccountNumber AS CHAR),  \n" +
                "		   CAST(NEW.carrierAccountNumber AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "    IF IFNULL(OLD.billingContactPersonID,0) != IFNULL(NEW.billingContactPersonID,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "		VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(new.id AS CHAR),'BillTo Contact Person',  \n" +
                "        fun_contactPersonDetailByID(OLD.billingContactPersonID),fun_contactPersonDetailByID(NEW.billingContactPersonID),  \n" +
                "		fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.shippingContactPersonID,0) != IFNULL(NEW.shippingContactPersonID,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "		VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(new.id AS CHAR),'ShipTo Contact Person',  \n" +
                "        fun_contactPersonDetailByID(OLD.shippingContactPersonID),fun_contactPersonDetailByID(NEW.shippingContactPersonID),  \n" +
                "		fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.intermediateContactPersonID,0) != IFNULL(NEW.intermediateContactPersonID,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "		VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(new.id AS CHAR),'Mark For Contact Person',  \n" +
                "        fun_contactPersonDetailByID(OLD.intermediateContactPersonID),fun_contactPersonDetailByID(NEW.intermediateContactPersonID),  \n" +
                "		fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "   END;  \n" +
                /* **************************** Add Script Version -> 14-02-2022  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1302,'1.00','V1','Bug 41300: [Main Branch]: CPS/CIN history should not mismatch. - Shweta '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1302:
            allDbChangesArray.push(
                /* **************************** New Script -> 14-02-2022 *********************************** */
                "DROP PROCEDURE IF EXISTS Sproc_AddCustomerPackingSlip;  \n" +
                "CREATE PROCEDURE `Sproc_AddCustomerPackingSlip`(  \n" +
                "	IN pCPSData JSON,  \n" +
                "    IN puserID INT,  \n" +
                "	IN puserRoleID INT ,  \n" +
                "	IN pSystemId VARCHAR(20),  \n" +
                "	IN pPackingSlipId INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE vTermsDays INT ;  \n" +
                "	DECLARE v_incrementI INT;  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_customer_packingslip;  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_customer_packingslip AS  \n" +
                "	SELECT 	*  \n" +
                "	FROM 	JSON_TABLE(  \n" +
                "			pCPSData,  \n" +
                "			\"$[*]\" COLUMNS(  \n" +
                "				`transType` VARCHAR(5) PATH \"$.transType\",  \n" +
                "				`packingSlipType` INT PATH \"$.packingSlipType\",  \n" +
                "				`customerID` INT PATH \"$.customerID\" ,  \n" +
                "				`status` INT PATH \"$.status\",  \n" +
                "				`subStatus` INT PATH \"$.subStatus\",  \n" +
                "				`refSalesOrderID` INT PATH \"$.refSalesOrderID\",  \n" +
                "				`poNumber` VARCHAR(50) PATH \"$.poNumber\",  \n" +
                "				`poDate` DATE PATH \"$.poDate\",  \n" +
                "				`soNumber` VARCHAR(50) PATH \"$.soNumber\",  \n" +
                "				`soDate` DATE PATH \"$.soDate\",  \n" +
                "				`sorevision` VARCHAR(50) PATH \"$.sorevision\" ,  \n" +
                "				`packingSlipNumber` VARCHAR(50) PATH \"$.packingSlipNumber\" ,  \n" +
                "				`packingSlipDate` DATE PATH \"$.packingSlipDate\" ,  \n" +
                "				`shippingMethodID` INT PATH \"$.shippingMethodID\",  \n" +
                "				`headerComment` TEXT PATH \"$.headerComment\" ,  \n" +
                "				`packingSlipComment` TEXT PATH \"$.packingSlipComment\" ,  \n" +
                "				`billingAddress` TEXT PATH \"$.billingAddress\" ,  \n" +
                "				`shippingAddress` TEXT PATH \"$.shippingAddress\" ,  \n" +
                "				`intermediateAddress` TEXT PATH \"$.intermediateAddress\" ,  \n" +
                "				`billToId` INT PATH \"$.billToId\" ,  \n" +
                "				`shipToId` INT PATH \"$.shipToId\" ,  \n" +
                "				`intermediateShipmentId` INT PATH \"$.intermediateShipmentId\" ,  \n" +
                "				`totalAmount` DECIMAL(18,6) PATH \"$.totalAmount\" ,  \n" +
                "				`freeOnBoardId` INT PATH \"$.freeOnBoardId\" ,  \n" +
                "				`termsId` INT PATH \"$.termsId\" ,  \n" +
                "				`salesCommissionTo` INT PATH \"$.salesCommissionTo\" ,  \n" +
                "				`contactPersonId` INT PATH \"$.contactPersonId\",  \n" +
                "				`revision` TEXT PATH \"$.revision\",  \n" +
                "				`isZeroValue` TINYINT PATH \"$.isZeroValue\",  \n" +
                "				`isAlreadyPublished` TINYINT PATH \"$.isAlreadyPublished\",  \n" +
                "				`poRevision` VARCHAR(50) PATH \"$.poRevision\" ,  \n" +
                "				`isAskForVersionConfirmation` TINYINT PATH \"$.isAskForVersionConfirmation\" ,  \n" +
                "                `carrierID` INT PATH \"$.carrierID\",  \n" +
                "                `carrierAccountNumber` VARCHAR(50) PATH \"$.carrierAccountNumber\",  \n" +
                "                `billingContactPersonID` INT PATH \"$.billingContactPersonID\",  \n" +
                "                `shippingContactPersonID` INT PATH \"$.shippingContactPersonID\",  \n" +
                "                `intermediateContactPersonID` INT PATH \"$.intermediateContactPersonID\",  \n" +
                "                `billingContactPerson` INT PATH \"$.billingContactPerson\",  \n" +
                "                `shippingContactPerson` INT PATH \"$.shippingContactPerson\",  \n" +
                "                `intermediateContactPerson` INT PATH \"$.intermediateContactPerson\"  \n" +
                "			)  \n" +
                "		) AS CustPS_JT;  \n" +
                "  \n" +
                "		INSERT INTO customer_packingslip(customerID,packingSlipType,transType,`status`,refSalesOrderID,  \n" +
                "				poNumber,poDate,soNumber,soDate,packingSlipNumber,  \n" +
                "				packingSlipDate,shippingMethodID,  \n" +
                "				packingSlipComment,headerComment,sorevision,  \n" +
                "				freeOnBoardId,createdBy,updatedBy,createByRoleId, createdAt,updatedAt,  \n" +
                "				updateByRoleId,packingSlipStatus,systemID, termsID,salesCommissionTo,  \n" +
                "				billingAddress,shippingAddress,intermediateAddress ,subStatus,  \n" +
                "				totalAmount, billToId,shipToId ,intermediateShipmentId,  \n" +
                "				contactPersonId, revision, isZeroValue ,isAlreadyPublished, poRevision,  \n" +
                "                isAskForVersionConfirmation, carrierID, carrierAccountNumber,  \n" +
                "                billingContactPersonID,shippingContactPersonID,intermediateContactPersonID)  \n" +
                "		SELECT customerID,packingSlipType,transType,`status`,refSalesOrderID,  \n" +
                "					poNumber,poDate,soNumber,soDate,packingSlipNumber,  \n" +
                "					packingSlipDate,shippingMethodID,  \n" +
                "					packingSlipComment,headerComment,sorevision,freeOnBoardId,  \n" +
                "					puserID,puserID,puserRoleID,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime() ,  \n" +
                "					puserRoleID,'W' , pSystemId, termsID ,salesCommissionTo,  \n" +
                "					billingAddress, shippingAddress, intermediateAddress,subStatus ,  \n" +
                "					totalAmount, billToId,shipToId ,intermediateShipmentId ,  \n" +
                "					contactPersonId,  revision, isZeroValue, isAlreadyPublished, poRevision ,  \n" +
                "                    0, carrierID, carrierAccountNumber ,  \n" +
                "                    billingContactPersonID,shippingContactPersonID,intermediateContactPersonID  \n" +
                "		FROM temp_customer_packingslip ;  \n" +
                "  \n" +
                "		SET pPackingSlipId=LAST_INSERT_ID();  \n" +
                "		--  Response 0  \n" +
                "        SELECT pPackingSlipId packingSlipId;  \n" +
                "  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_customer_packingslip;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 14-02-2022  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1303,'1.00','V1','User Story 40771: Shipment Summary Improvement Points Suggested By Client[Main Branch] - Shweta '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1303:
            allDbChangesArray.push(
                /* **************************** New Script -> 14-02-2022 *********************************** */
                "DROP PROCEDURE IF EXISTS Sproc_GetPendingSalesShippingDetails;  \n" +
                "CREATE PROCEDURE `Sproc_GetPendingSalesShippingDetails`(  \n" +
                "	IN psalesorderDetID INT ,  \n" +
                "	IN packingSlipID INT,  \n" +
                "	IN ppackingslipDetID INT  ,  \n" +
                "    IN pSoReleaseID INT  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "	DECLARE vMfgCodeFormat INT;  \n" +
                "    SELECT fun_getMFGCodeNameFormat() INTO vMfgCodeFormat;  \n" +
                "  \n" +
                "      SELECT ss.shippingID,  \n" +
                "        ss.sDetId,  \n" +
                "		IFNULL(sd.custPOLineNumber ,1)  custPOLineNumber,  \n" +
                "        IFNULL(ss.releaseNumber,1) releaseNumber,  \n" +
                "        ss.qty,  \n" +
                "        ss.shippingDate,  \n" +
                "        sd.tentativeBuild,  \n" +
                "        sd.qty AS poQty,  \n" +
                "        sd.partID,  \n" +
                "        sd.price,  \n" +
                "        sd.lineID,  \n" +
                "        sd.internalComment,  \n" +
                "        sd.partDescription,  \n" +
                "        sd.remark,  \n" +
                "        c.iscustom,  \n" +
                "        smp.poNumber,  \n" +
                "        ss.poReleaseNumber,  \n" +
                "		c.mfgpn,  \n" +
                "		c.mfgpndescription,  \n" +
                "		c.pidcode,  \n" +
                "		fun_getUnitNameByID(c.uom) unitMeaser,  \n" +
                "		c.nickName,  \n" +
                "		c.mfgcodeID,  \n" +
                "        c.custAssyPN,  \n" +
                "        c.isCPN,  \n" +
                "		sd.originalPOQty,  \n" +
                "		fun_GetFormattedMfgCode(mfgmst.mfgcode,mfgmst.mfgname, vMfgCodeFormat)  mfgName,  \n" +
                "		(CASE WHEN ss.shippingMethodID IS NULL THEN som.shippingMethodID  \n" +
                "			ELSE ss.shippingMethodID END) shippingMethodID ,  \n" +
                "		(CASE WHEN ss.shippingAddressID IS NULL THEN som.shippingAddressID  \n" +
                "			ELSE ss.shippingAddressID END) shippingAddressID ,  \n" +
                "		-- (CASE WHEN ss.shippingAddressID IS NULL THEN som.shippingAddress END) shippingAddress ,  \n" +
                "		fun_getRoHSIconByPartID(sd.partID) rohsIcon,  \n" +
                "		fun_getRoHSNameByPartID(sd.partID) rohsName,  \n" +
                "		fun_getCertificationByPartID(sd.partID)standards,  \n" +
                "		CONCAT(IFNULL(ss.releaseNumber,1),' | ',ss.qty,' | ',DATE_FORMAT((CASE WHEN ss.isAgreeToShip=1 THEN IFNULL(ss.revisedRequestedShipDate,ss.revisedRequestedDockDate) ELSE IFNULL(ss.shippingDate,ss.requestedDockDate) END), '%m-%d-%y')) shipping,  \n" +
                "        cpsDet.shippedQty,  \n" +
                "		-- sum(cpsDet.shippedQty) over(partition by ss.sDetId) shippedQty ,  \n" +
                "		(SELECT SUM(IFNULL(cpdet.shipQty,0))  \n" +
                "			FROM customer_packingslip_det cpdet  \n" +
                "            JOIN customer_packingslip cpsdet ON cpsdet.id = cpdet.refCustPackingSlipID  and cpsdet.isDeleted = 0  \n" +
                "            WHERE cpdet.refsalesorderdetid=ss.sDetId  \n" +
                "			AND cpdet.isdeleted=0 AND cpsdet.transType ='P') lineTotShippedQty ,  \n" +
                "		(CASE WHEN ss.shippingMethodID IS NULL THEN (fun_getGenericCategoryCodeNameByID(som.shippingMethodID))  \n" +
                "				ELSE (fun_getGenericCategoryCodeNameByID(ss.shippingMethodID)) END) shippingMethodText,  \n" +
                "		c.partType,  \n" +
                "		(SELECT mfg.mfgType FROM mfgcodemst mfg WHERE mfg.id = c.mfgcodeid AND mfg.isDeleted = 0 ) mfgType,  \n" +
                "		sd.quoteNumber,sd.quoteFrom, sd.refAssyQtyTurnTimeID,  \n" +
                "        sd.refRFQGroupID,  \n" +
                "        sd.refRFQQtyTurnTimeID  ,  \n" +
                "		IFNULL(sd.assyQtyTurnTimeText, (SELECT CONCAT( '(',rfqAssyQty.requestQty,')',  rfqAssyTurn.turnTime,' ',  \n" +
                "											CASE WHEN rfqAssyTurn.unitOfTime='B' THEN 'Bussiness Days'  \n" +
                "												WHEN rfqAssyTurn.unitOfTime='D' THEN 'Week Days'  \n" +
                "												WHEN rfqAssyTurn.unitOfTime='W' THEN 'Week' END )  \n" +
                "										FROM rfq_assy_quantity_turn_time rfqAssyTurn  \n" +
                "										JOIN rfq_assy_quantity rfqAssyQty ON rfqAssyQty.id = rfqAssyTurn.rfqAssyQtyID AND  rfqAssyQty.isDeleted = 0  \n" +
                "										WHERE rfqAssyTurn.id = sd.refRFQQtyTurnTimeID AND rfqAssyTurn.isDeleted = 0)) assyQtyTurnTimeText,  \n" +
                "		c.category partCategory,  \n" +
                "        ss.releaseNotes,  \n" +
                "        ss.description additionalNotes,  \n" +
                "        ss.customerReleaseLine,  \n" +
                "        sd.salesOrderDetStatus,  \n" +
                "        sd.qty custPOQty,  \n" +
                "        sd.materialTentitiveDocDate  ,  \n" +
                "		(case when ss.carrierID is null then  som.carrierID else ss.carrierID end) carrierID,  \n" +
                "		(CASE WHEN ss.carrierID IS NULL THEN (fun_getGenericCategoryCodeNameByID(som.carrierID))  \n" +
                "			ELSE (fun_getGenericCategoryCodeNameByID(ss.carrierID)) END) carrierText,  \n" +
                "		(CASE WHEN ss.carrierID IS NULL THEN som.carrierAccountNumber ELSE ss.carrierAccountNumber END) carrierAccountNumber ,  \n" +
                "        (CASE WHEN ss.shippingContactPersonID IS NULL THEN som.shippingContactPersonID  \n" +
                "			ELSE ss.shippingContactPersonID END) shippingContactPersonID  \n" +
                "	FROM salesshippingmst ss  \n" +
                "	JOIN salesorderdet sd ON ss.sDetID=sd.id  \n" +
                "	JOIN salesordermst som ON som.id = sd.refSalesOrderID  \n" +
                "	JOIN COMPONENT c ON c.id=sd.partid  \n" +
                "    LEFT JOIN mfgcodemst mfgmst ON mfgmst.id = c.mfgcodeId  and mfgmst.isDeleted = 0  \n" +
                "	LEFT JOIN salesorderdet sdp ON sd.refBlanketPOID=sdp.id AND sdp.isdeleted=0  \n" +
                "	LEFT JOIN salesordermst smp ON smp.id=sdp.refSalesOrderID AND smp.isdeleted=0  \n" +
                "	LEFT JOIN (select cpd.refsalesorderdetid,cpd.shippingId, sum(shipQty) shippedQty from customer_packingslip_det cpd  \n" +
                "				JOIN customer_packingslip  cps ON cps.id = cpd.refCustPackingSlipID and cps.isDeleted = 0 and cps.transType= 'P'  \n" +
                "				where cpd.isDeleted = 0 Group by cpd.refsalesorderdetid, cpd.shippingId ) cpsDet  \n" +
                "		ON ss.sDetId = cpsDet.refsalesorderdetid  \n" +
                "          and ss.shippingID = cpsDet.shippingId  \n" +
                "	WHERE sd.id=psalesorderDetID  \n" +
                "	AND  sd.isDeleted = 0  \n" +
                "	AND (CASE WHEN ppackingslipDetID IS NULL THEN  ss.qty > ifnull(cpsDet.shippedQty,0)  \n" +
                "		ELSE  ss.qty=ss.qty  END)  \n" +
                "	AND (CASE WHEN pSoReleaseID IS NOT NULL THEN ss.shippingID=pSoReleaseID ELSE 1 = 1 END)  \n" +
                "	AND ss.isdeleted=0  \n" +
                "	ORDER BY ss.releaseNumber,ss.shippingDate;  \n" +
                "  \n" +
                "	SELECT NULL AS shippingID,  \n" +
                "			sDetId,  \n" +
                "			custPOLineNumber,  \n" +
                "			NULL releaseNumber,  \n" +
                "			qty,  \n" +
                "			NULL shippingDate,  \n" +
                "			releaseNotes,  \n" +
                "			tentativeBuild,  \n" +
                "			poQty,  \n" +
                "			partID,  \n" +
                "			price,  \n" +
                "			lineID,  \n" +
                "			partDescription,  \n" +
                "			mfgPN,  \n" +
                "			mfgPNDescription,  \n" +
                "			unitMeaser,  \n" +
                "			nickName,  \n" +
                "			pidcode,  \n" +
                "			NULL shippingMethodID,  \n" +
                "			NULL shippingAddressID,  \n" +
                "			mfgcodeID,  \n" +
                "			mfgName,  \n" +
                "			rohsIcon,  \n" +
                "			rohsName,  \n" +
                "			rohsStatusID,  \n" +
                "			standards,  \n" +
                "			shippedQty   ,  \n" +
                "			remark,  \n" +
                "			internalcomment,  \n" +
                "			mfgPnwihLineId,  \n" +
                "			refSODetID,  \n" +
                "			refSOReleaseLineID,  \n" +
                "			frequency,  \n" +
                "			originalPOQty,  \n" +
                "			frequencyType,  \n" +
                "			poNumber  \n" +
                "    FROM (SELECT  \n" +
                "			NULL AS shippingID,  \n" +
                "			sd.id AS sDetId,  \n" +
                "			sd.custPOLineNumber custPOLineNumber,  \n" +
                "			-- IFNULL(sd.custPOLineNumber,1) custPOLineNumber,  \n" +
                "			NULL releaseNumber,  \n" +
                "			sd.qty,  \n" +
                "			NULL shippingDate,  \n" +
                "			sd.remark releaseNotes,  \n" +
                "			sd.tentativeBuild,  \n" +
                "			sd.qty AS poQty,  \n" +
                "			sd.partID,  \n" +
                "			sd.price,  \n" +
                "			sd.lineID,  \n" +
                "			sd.partDescription,  \n" +
                "			c.mfgPN,  \n" +
                "			c.mfgPNDescription,  \n" +
                "			fun_getUnitNameByID(c.uom) unitMeaser,  \n" +
                "			c.nickName,  \n" +
                "			c.pidcode,  \n" +
                "			sd.refSODetID,  \n" +
                "			sd.refSOReleaseLineID,  \n" +
                "			sd.frequency,  \n" +
                "			CONCAT(c.mfgPN,' | ',IFNULL(sd.custPOLineNumber,1)) mfgPnwihLineId,  \n" +
                "			NULL shippingMethodID,  \n" +
                "			NULL shippingAddressID,  \n" +
                "			c.mfgcodeID,  \n" +
                "			fun_getMfgCodeAndNameByID(c.mfgcodeID) mfgName,  \n" +
                "			fun_getRoHSIconByPartID(sd.partID) rohsIcon,  \n" +
                "			fun_getRoHSNameByPartID(sd.partID) rohsName,  \n" +
                "			c.rohsStatusID,  \n" +
                "			sd.originalPOQty,  \n" +
                "			smp.poNumber,  \n" +
                "			fun_getCertificationByPartID(c.id)standards,  \n" +
                "			sd.frequencyType,  \n" +
                "			 (SELECT SUM(IFNULL(cpd.shipQty,0)) FROM customer_packingslip_det cpd  \n" +
                "				JOIN customer_packingslip cp ON cp.id = cpd.refCustPackingSlipID AND cp.isDeleted = 0 AND cp.transType = 'P'  \n" +
                "				WHERE refsalesorderdetid=sd.id AND cpd.isDeleted=0 ) shippedQty   ,  \n" +
                "			sd.remark,  \n" +
                "			sd.internalcomment  \n" +
                "		FROM salesorderdet sd  \n" +
                "		LEFT JOIN component c ON c.id=sd.partid  \n" +
                "		LEFT JOIN salesorderdet sdp ON sd.refBlanketPOID=sdp.id AND sdp.isdeleted=0  \n" +
                "	        LEFT JOIN salesordermst smp ON smp.id=sdp.refSalesOrderID AND smp.isdeleted=0  \n" +
                "		WHERE sd.refSODetID=psalesorderDetID  \n" +
                "		AND sd.isdeleted=0  \n" +
                "    ) a;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 14-02-2022  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1304,'1.00','V1','User Story 40771: Shipment Summary Improvement Points Suggested By Client[Main Branch] - Shweta '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1304:
            allDbChangesArray.push(
                /* **************************** New Script -> 14-02-2022 *********************************** */
                "DROP PROCEDURE IF EXISTS Sproc_getSalesOrderListAgainstShipment;  \n" +
                "CREATE PROCEDURE `Sproc_getSalesOrderListAgainstShipment`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pCustomerID INT,  \n" +
                "    IN pSearchText VARCHAR(1000) ,  \n" +
                "    IN pSoWorkingStatus TINYINT,  \n" +
                "    IN pAllowToUpdateComment TINYINT ,  \n" +
                "    IN pSortByColumn TINYINT  ,  \n" +
                "    IN pSoStatus TINYINT,  \n" +
                "    IN pSortingOrder TINYINT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE vMfgCodeFormat INT;  \n" +
                "    DECLARE headerWhereClause VARCHAR(3000);  \n" +
                "   -- DECLARE detailWhereClause VARCHAR(1000);  \n" +
                "	DECLARE vOrderBy VARCHAR(200);  \n" +
                "   	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;  \n" +
                "	DECLARE vContactPersonFormat INT;  \n" +
                "  \n" +
                "    SELECT fun_getContPersonNameDisplayFormat() INTO vContactPersonFormat;  \n" +
                "	select fun_getMFGCodeNameFormat() into vMfgCodeFormat ;  \n" +
                "  \n" +
                "    IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF pSortByColumn = 1 THEN  \n" +
                "		SET vOrderBy =' order by customerName' ;  \n" +
                "    ELSEIF pSortByColumn = 2 THEN  \n" +
                "		SET vOrderBy =' order by poNumber ' ;  \n" +
                "    ELSEIF pSortByColumn = 3 THEN  \n" +
                "		SET vOrderBy =' order by poDate ' ;  \n" +
                "    ELSEIF pSortByColumn = 4 THEN  \n" +
                "		SET vOrderBy =' order by soDate ' ;  \n" +
                "    ELSE  \n" +
                "		SET vOrderBy =' order by soId Desc ' ;  \n" +
                "    END IF;  \n" +
                "    IF pSortingOrder = 2 THEN  \n" +
                "		SET vOrderBy = concat(vOrderBY , ' Desc');  \n" +
                "    ELSE  \n" +
                "		SET vOrderBy = concat(vOrderBY , ' Asc');  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF pCustomerID IS NOT NULL THEN  \n" +
                "		SET headerWhereClause = concat(\" (salesOrder.customerID=\",pCustomerID,\") \");  \n" +
                "	ELSE  \n" +
                "		SET headerWhereClause = ' 1=1 ';  \n" +
                "    END IF;  \n" +
                "    IF pSoWorkingStatus IS  NULL OR pSoWorkingStatus = 0 THEN  \n" +
                "		SET headerWhereClause = concat(headerWhereClause, ' AND 1=1 ');  \n" +
                "	ELSE  \n" +
                "		SET headerWhereClause = concat(headerWhereClause, ' and salesOrder.workingStatus = ' , pSoWorkingStatus)  ;  \n" +
                "    END IF;  \n" +
                "    IF pSoStatus IS NULL OR pSoStatus <> -1 THEN  \n" +
                "		SET headerWhereClause = concat(headerWhereClause, ' and salesOrder.`status` = ' , pSoStatus)  ;  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF pSearchText IS NOT NULL  THEN  \n" +
                "		SET headerWhereClause = CONCAT(headerWhereClause ,\" AND  (salesOrder.salesOrderNumber like '%\",pSearchText,\"%'  \n" +
                "									or salesOrder.poNumber like '%\",pSearchText,\"%'  \n" +
                "									or salesOrder.customerName like '%\",pSearchText,\"%'  \n" +
                "                                    or salesOrder.lastCPSNumber like '%\",pSearchText,\"%'  \n" +
                "                                    or salesOrder.shippingComment like '%\",pSearchText,\"%' \",  \n" +
                "                                    CASE WHEN  pAllowToUpdateComment > 0 THEN CONCAT(\" OR salesOrder.internalComment like '%\",pSearchText,\"%'\") else ''  END,  \n" +
                "                                    \" or salesOrder.soId in (select refSalesOrderID from salesorderdet  sodet  \n" +
                "														 join component comp on comp.id = sodet.partID and sodet.isDeleted = 0  \n" +
                "                                                         left join (select  salesOrderDetailID,partID,group_concat(woNumber) woList  \n" +
                "																	from vu_salesorder_workorder_list group by salesOrderDetailID,partID) workOrderDet on workOrderDet.salesOrderDetailID =  sodet.id  and workOrderDet.partID = sodet.partId  \n" +
                "														 where sodet.isDeleted = 0	and (comp.PIDCode like '%\",pSearchText,\"%' OR comp.mfgPN like '%\",pSearchText,\"%'  \n" +
                "																OR comp.nickName like '%\",pSearchText,\"%' OR sodet.woComment like '%\",pSearchText,\"%'  \n" +
                "                                                                OR sodet.internalComment like '%\",pSearchText,\"%'\",  \n" +
                "                                                                CASE WHEN  pAllowToUpdateComment > 0 THEN CONCAT(\" OR sodet.remark like '%\",pSearchText,\"%'\") else '' END,  \n" +
                "                                                                CASE WHEN  pAllowToUpdateComment > 0 THEN CONCAT(\" OR sodet.releaseLevelComment like '%\",pSearchText,\"%'\") else ''  END,  \n" +
                "                                                                \" OR workOrderDet.woList like '\",pSearchText,\"%'  )	))\");  \n" +
                "  \n" +
                "    END IF;  \n" +
                "    DROP TEMPORARY TABLE IF EXISTS temp_so_mst;  \n" +
                "	SET @SQLStatement1 = concat(\"CREATE TEMPORARY TABLE temp_so_mst AS  select soId, salesOrderNumber,  \n" +
                "						soDate, poNumber, poDate, poRevision, poRevisionDate,  \n" +
                "						sorevision, ifnull(shippingComment,'-') shippingComment, internalComment, isBlanketPO, isLegacyPO, isRmaPO,  \n" +
                "                        soStatus, soStatusText,  shippingMethodID,termsID,freeOnBoardId, salesCommissionTo,contactPersonId,  \n" +
                "						customerID, mfgCode, mfgName, customerName,  \n" +
                "                        lastCPSId,lastCPSNumber,lastCPSDate,ifnull(lastCPSComment,'-') lastCPSComment,CPSCount,  CPSDraftCnt,  \n" +
                "                        billingAddressID, intermediateShipmentId,  \n" +
                "                        shippingAddressID,defaultAddress,  \n" +
                "                        companyName,street1,street2, street3,city, state,  \n" +
                "						postcode,countryName, isAddrDefault, isAddrActive,  \n" +
                "						firstName,lastName,middleName,personName,  \n" +
                "						mobile,mobileCountryCode,faxNumber,faxCountryCode,title,isContactDefault, isContactActive,  \n" +
                "						phoneNumber,email,division,emailList,phoneList,  \n" +
                "                        workingStatus, isLegacyPOText,isBlanketPOText,isRmaPOText,blanketPOOption, isAlreadyPublished  ,  \n" +
                "                        carrierID,carrierAccountNumber ,  \n" +
                "                        billingContactPersonID, intermediateContactPersonID, shippingContactPersonID,  \n" +
                "                        linkToBlanketPOText,shippingMethodText,carrierText  \n" +
                "    from (select som.id as soId, som.salesOrderNumber,  \n" +
                "            som.soDate, som.poNumber, som.poDate, som.poRevision, som.poRevisionDate,  \n" +
                "            som.revision as sorevision , som.shippingComment, som.internalComment,  \n" +
                "            som.isBlanketPO, som.isLegacyPO, som.isRmaPO, som.customerID,  \n" +
                "            som.status as soStatus ,(case when som.`status` = 1 then 'Published' else 'Draft' end) soStatusText,  \n" +
                "            som.shippingMethodID,som.termsID,som.freeOnBoardId, som.salesCommissionTo,som.contactPersonId,  \n" +
                "            som.billingAddressID, som.intermediateShipmentId,  \n" +
                "            cust.mfgCode, cust.mfgName, fun_GetFormattedMfgCode(cust.mfgCode,cust.mfgName,\",vMfgCodeFormat,\") customerName,  \n" +
                "            cpsDetails.lastCPSId,  \n" +
                "            cpsDetails.lastCPSNumber,  \n" +
                "            cpsDetails.lastCPSDate,  \n" +
                "			cpsDetails.lastCPSComment,  \n" +
                "            cpsDetails.CPSCount,  \n" +
                "            ifnull(cpsDetails.CPSDraftCnt,0) CPSDraftCnt,  \n" +
                "            som.shippingAddressID,  \n" +
                "            custAddr.isDefault as defaultAddress,  \n" +
                "            custAddr.companyName,custAddr.street1,custAddr.street2, custAddr.street3,custAddr.city, custAddr.state,  \n" +
                "            custAddr.postcode,country.countryName, custAddr.isDefault isAddrDefault, custAddr.isActive isAddrActive,  \n" +
                "            fun_GetFormattedContactPersonName(contactP.firstName, contactP.middleName,contactP.lastName,\",vContactPersonFormat,\") personName,  \n" +
                "            contactP.firstName,contactP.lastName,contactP.middleName,  \n" +
                "            contactP.mobile,contactP.mobileCountryCode,contactP.faxNumber,contactP.faxCountryCode,  \n" +
                "            contactP.title,contactP.isDefault isContactDefault, contactP.isActive isContactActive,  \n" +
                "            contactP.phoneNumber,contactP.email,contactP.division,  \n" +
                "            fun_convertJsonEmailToCommaSepList(contactP.email) emailList,  \n" +
                "            fun_convertJsonPhoneToCommaSepList(contactP.phoneNumber) phoneList,  \n" +
                "             (case when sodCnt.totalLineCount = sodCnt.completedLineCount  then 2  \n" +
                "				  when sodCnt.totalLineCount = sodCnt.canceledLineCount then -1  \n" +
                "                  else 1 end) workingStatus,  \n" +
                "            (case when som.isLegacyPO = 1 then 'Legacy PO' else '' end) isLegacyPOText,  \n" +
                "            (case when som.isRmaPO = 1 then 'RMA PO' else '' end) isRmaPOText,  \n" +
                "            (case when som.isBlanketPO = 1 then 'Blanket PO' else '' end) isBlanketPOText,  \n" +
                "            som.blanketPOOption,som.`status`,som.isAlreadyPublished ,  \n" +
                "            som.carrierID, som.carrierAccountNumber  ,  \n" +
                "            som.billingContactPersonID, som.intermediateContactPersonID, som.shippingContactPersonID,  \n" +
                "            (case when som.linkToBlanketPO = 1 then 'Linked to Blanket PO' else '' end) linkToBlanketPOText,  \n" +
                "             shippingMethod.gencCategoryName shippingMethodText, carrier.gencCategoryName carrierText  \n" +
                "	from salesordermst som  \n" +
                "    join mfgcodemst cust on cust.id = som.customerID and cust.isDeleted = 0  \n" +
                "	left join customer_addresses custAddr on  custAddr.customerId = som.customerID and custAddr.id = som.shippingAddressID and custAddr.isDeleted = 0  \n" +
                "	left join countrymst country on country.countryID = custAddr.countryID and country.isDeleted = 0  \n" +
                "    left join contactperson contactP on contactP.personId = som.shippingContactPersonID and contactP.isDeleted = 0  \n" +
                "    left join genericcategory  shippingMethod on shippingMethod.gencCategoryID = som.shippingMethodID and shippingMethod.categoryType ='Shipping Methods' and shippingMethod.isDeleted = 0  \n" +
                "	left join genericcategory  carrier on carrier.gencCategoryID = som.termsID and carrier.categoryType ='Carrier' and shippingMethod.isDeleted = 0  \n" +
                "    left join ( select  a.refSalesOrderID, max(lastCPSId) lastCPSId, max(lastCPSNumber) lastCPSNumber,  \n" +
                "				max(lastCPSDate) lastCPSDate, max(lastCPSComment) lastCPSComment, max(CPSCount) CPSCount, max(CPSDraftCnt) CPSDraftCnt  \n" +
                "				from (select cps.refSalesOrderID, cps.id,cps.packingSlipNumber,cps.packingSlipDate,cps.packingSlipComment ,  \n" +
                "						LAST_VALUE(cps.id) over (partition by cps.refSalesOrderID) lastCPSId ,  \n" +
                "						LAST_VALUE(cps.packingSlipNumber) over (partition by cps.refSalesOrderID) lastCPSNumber,  \n" +
                "						LAST_VALUE(cps.packingSlipDate) over (partition by cps.refSalesOrderID) lastCPSDate,  \n" +
                "						LAST_VALUE(cps.packingSlipComment) over (partition by cps.refSalesOrderID) lastCPSComment,  \n" +
                "						count(1) over (partition by cps.refSalesOrderID) CPSCount,  \n" +
                "						cpd.draftCnt AS CPSDraftCnt  \n" +
                "				from customer_packingslip cps  \n" +
                "                left join (select custp.refSalesOrderID draftRefSoId, count(1) draftCnt from customer_packingslip custp  \n" +
                "						where custp.isDeleted = 0  and custp.substatus = 1 and transType ='P'  \n" +
                "						group by custp.refSalesOrderID) cpd on cpd.draftRefSoId = cps.refSalesOrderID  \n" +
                "                where cps.isDeleted = 0  and cps.transType = 'P' and cps.refsalesorderid is not null) a  \n" +
                "				group by a.refSalesOrderID) cpsDetails on cpsDetails.refSalesOrderID = som.id  \n" +
                "	left join (select sod.refSalesOrderID as soId ,  \n" +
                "				sum((case when sod.salesOrderDetStatus = 2 then 1 else 0 end) ) completedLineCount,  \n" +
                "				count(1) totalLineCount,  \n" +
                "				sum((case when sod.isCancle = 1 then 1 else 0 end)) canceledLineCount  \n" +
                "				From salesorderdet sod where sod.isDeleted = 0  \n" +
                "				Group By sod.refSalesOrderID ) sodCnt on sodCnt.soId = som.id  \n" +
                "    where som.isDeleted = 0  \n" +
                "    ) salesOrder  \n" +
                "    where 1=1 and \", headerWhereClause,    vOrderBy , rowNumWhere) ;  \n" +
                "  \n" +
                "	PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "    DROP TEMPORARY TABLE IF EXISTS temp_so_detail;  \n" +
                "    CREATE TEMPORARY TABLE temp_so_detail AS  \n" +
                "    select soDetId,  \n" +
                "				refSalesOrderID, partID, lineID, custPOQty, tbdComment, internalComment,  \n" +
                "				shippingComment, isCancle,partDescription,salesOrderDetStatus,custPOLineNumber,  \n" +
                "				PIDCode, mfgPN,mfgcodeID,mfrName, rohsName, rohsIcon,  nickName,  partType,  isCustom,custAssyPN,partSpecialNote,  \n" +
                "                po_TBDQty,shippedQty AS shippedQty , woComment  ,  \n" +
                "                cancelStatus, isHotJob,isDetHalt,  \n" +
                "                soWorkingStatus, materialTentitiveDocDate  ,refSODetID,blanketSOId,  \n" +
                "                blanketPONumber  ,parentReleaseNumber,linkdPOCnt  \n" +
                "	from (select  sod.id as soDetId,  \n" +
                "				sod.refSalesOrderID,  \n" +
                "				sod.partID,  \n" +
                "				sod.lineID,  \n" +
                "				sod.qty as custPOQty,  \n" +
                "				sod.releaseLevelComment as tbdComment, -- TBD comments  \n" +
                "				sod.internalComment,  \n" +
                "				sod.remark as shippingComment,  \n" +
                "				sod.isCancle,  \n" +
                "                ifnull(sod.partDescription,'-') partDescription,  \n" +
                "                sod.salesOrderDetStatus,  \n" +
                "                sod.custPOLineNumber,  \n" +
                "				co.PIDCode,  \n" +
                "				co.mfgPN,  \n" +
                "                co.mfgcodeID,  \n" +
                "                fun_GetFormattedMfgCode(partMfg.mfgCode,partMfg.mfgName,vMfgCodeFormat) mfrName,  \n" +
                "				rohs.name AS rohsName,  \n" +
                "				rohs.rohsIcon,  \n" +
                "                co.nickName,  \n" +
                "                co.partType,  \n" +
                "                co.isCustom,  \n" +
                "                co.custAssyPN ,  \n" +
                "                co.specialNote partSpecialNote,  \n" +
                "				(sod.qty - ifnull(soDetQty.relQty,0)) po_TBDQty,  \n" +
                "                cpd.shippedQty,  \n" +
                "                ifnull(sod.woComment, workOrderDet.woList) woComment  ,  \n" +
                "                sod.isCancle cancelStatus,  \n" +
                "                sod.isHotJob,  \n" +
                "                (case when holdTrans.holdCnt > 0 then 1 else 0 end ) isDetHalt,  \n" +
                "                (CASE 	WHEN (sod.isCancle = 1) THEN 'Canceled'  \n" +
                "						WHEN (sod.`salesOrderDetStatus` = 1)   THEN 'In Progress'  \n" +
                "						ELSE 'Completed'  END) soWorkingStatus,  \n" +
                "                materialTentitiveDocDate ,  \n" +
                "                sod.refSODetID,  \n" +
                "                blanketPO.blanketSOId,  \n" +
                "                blanketPO.poNumber AS blanketPONumber  ,  \n" +
                "                soDetQty.parentReleaseNumber,  \n" +
                "                linkedPO.linkdPOCnt  \n" +
                "		from salesorderdet sod  \n" +
                "        JOIN temp_so_mst tempMst ON tempMst.soId = sod.refSalesOrderID  \n" +
                "		left join component co on co.id = sod.partID and co.isDeleted = 0  \n" +
                "        left join (select shipChild.sDetID, sum(shipChild.qty) relQty, GROUP_CONCAT(shipParent.releaseNumber) parentReleaseNumber from salesshippingmst shipChild  \n" +
                "					LEFT JOIN salesshippingmst shipParent ON shipParent.refShippingLineID = shipChild.shippingID   AND shipParent.isDeleted = 0  \n" +
                "					where shipChild.isDeleted = 0  group by shipChild.sDetID) as soDetQty on  soDetQty.sDetID = sod.id  \n" +
                "        left join (select refSalesorderDetid , sum(cpd.shipQty) shippedQty  \n" +
                "					from customer_packingslip_det  cpd  \n" +
                "					join customer_packingslip cps on cps.id = cpd.refCustPackingSlipID and cps.isDeleted = 0  \n" +
                "                    where cpd.isDeleted = 0 and cps.transType='P' group by refSalesorderDetid) cpd on cpd.refSalesorderDetid = sod.id  \n" +
                "		left join (select  salesOrderDetailID,partID,group_concat(woNumber) woList  \n" +
                "					from vu_salesorder_workorder_list group by salesOrderDetailID,partID) workOrderDet on workOrderDet.salesOrderDetailID =  sod.id  and workOrderDet.partID = sod.partId  \n" +
                "		left join rfq_rohsmst rohs on rohs.id = co.RoHSStatusID and rohs.isDeleted = 0  \n" +
                "        left join mfgcodemst partMfg on partMfg.id = co.mfgcodeID and partMfg.isDeleted = 0  \n" +
                "        left join (select refTransid ,count(1) holdCnt from holdunholdtrans where refType='PO' and isDeleted = 0 and endDate is NUll and `status` = 'H' group by refTransid) holdTrans  \n" +
                "			on holdTrans.refTransid = sod.id  \n" +
                "        left join (select blanketDet.id blanketDetId, blanketSO.id blanketSOId , blanketSO.poNumber from salesorderdet blanketDet  \n" +
                "				join salesordermst blanketSO on blanketSO.id = blanketDet.refSalesOrderID and blanketSO.isDeleted = 0  \n" +
                "                where blanketSO.isDeleted = 0) blanketPO on blanketPO.blanketDetId = sod.refBlanketPOID  \n" +
                "        left join (select childPO.refBlanketPOID , count(1) linkdPOCnt from salesorderdet childPO where childPO.isDeleted = 0 group by childPO.refBlanketPOID) linkedPO on linkedPO.refBlanketPOID = sod.id  \n" +
                "		where sod.isDeleted = 0  \n" +
                "	) a;  \n" +
                "  \n" +
                "    DROP TEMPORARY TABLE IF EXISTS temp_so_rel_detail;  \n" +
                "    CREATE TEMPORARY TABLE temp_so_rel_detail AS  \n" +
                "    select soDetId,  \n" +
                "				packingSlipDate,  \n" +
                "				promisedShipDate,  \n" +
                "                refCustPackingSlipID, packingSlipDetId,  \n" +
                "                  row_number() over (partition by releaseId,soDetId order by packingSlipDate desc) cpsIndex,  \n" +
                "				refSalesOrderID,releaseId, partID, lineID, custPOQty,  internalComment,  releaseLineComment,  \n" +
                "				shippingComment, isCancle, releaseNumber, soReleaseQty,  \n" +
                "                shippedQty AS shippedQty,  \n" +
                "                 cpsDetailCnt,  \n" +
                "                 isReadyToShip  ,cpsDetailShippedQty  ,  \n" +
                "                (case when  (soReleaseQty - cpsDetailShippedQty) <= 0 then 1 else 0 end) relCompletedStatus,  \n" +
                "                cpsSubStatus  ,poReleaseNumber,salesOrderDetStatus,'completed ' as firstInsert  \n" +
                "	from (select  sod.id as soDetId,  \n" +
                "				sod.refSalesOrderID,  \n" +
                "				sod.partID,  \n" +
                "				sod.lineID,  \n" +
                "				sod.qty as custPOQty,  \n" +
                "				sod.internalComment,  \n" +
                "				sod.remark as shippingComment,  \n" +
                "                soship.releaseNotes releaseLineComment,  \n" +
                "				sod.isCancle,  \n" +
                "                soship.shippingID releaseId,  \n" +
                "				soship.releaseNumber,  \n" +
                "				soship.promisedShipDate,  \n" +
                "				(case when co.partType = 4 then sod.qty else  soship.qty end) soReleaseQty,  \n" +
                "				cpd.refCustPackingSlipID,  \n" +
                "                cpd.id packingSlipDetId,  \n" +
                "				cpd.shipQty AS shippedQty,  \n" +
                "                cp.packingSlipDate ,  \n" +
                "                SUM(cpd.shipQty) over (partition by soship.shippingID,sod.id ) cpsDetailShippedQty,  \n" +
                "                COUNT(refCustPackingSlipID) over (partition by soship.shippingID,sod.id ) cpsDetailCnt,  \n" +
                "--                row_number() over (partition by soship.shippingID,sod.id ) cpsIndex,  \n" +
                "                soship.isReadyToShip,  \n" +
                "                cp.subStatus AS cpsSubStatus,  \n" +
                "                soship.poReleaseNumber,  \n" +
                "                sod.salesOrderDetStatus  \n" +
                "		from salesorderdet sod  \n" +
                "        JOIN temp_so_mst tempMst ON tempMst.soId = sod.refSalesOrderID  \n" +
                "		left join component co on co.id = sod.partID and co.isDeleted = 0  \n" +
                "		left join salesshippingmst soship on soship.sDetID = sod.id and soship.isDeleted = 0  \n" +
                "		left join customer_packingslip_det cpd on cpd.refSalesorderDetid = sod.id and  (case when co.partType <> 4 then cpd.shippingId = soship.shippingID else 1 = 1 end)  and cpd.isDeleted = 0 and cpd.refCustPackingSlipID in (select id from customer_packingslip where isDeleted = 0 and transType='P')  \n" +
                "        left join customer_packingslip cp on cp.id = cpd.refCustPackingSlipID and sod.refSalesOrderID = cp.refSalesOrderID and cp.isDeleted = 0 and cp.transType = 'P'  \n" +
                "		-- left join rfq_rohsmst rohs on rohs.id = co.RoHSStatusID and rohs.isDeleted = 0  \n" +
                "		where sod.isDeleted = 0  \n" +
                "	) a;  \n" +
                "    -- order by a.refSalesOrderID,a.packingSlipDate desc;  \n" +
                "  \n" +
                "    /*  \n" +
                "    /*and ifnull((case when co.partType = 4 then sod.qty else  soship.qty end ),0) <=  \n" +
                "						(select ifnull(sum(cpdTot.shipQty),0) from customer_packingslip_det cpdTot  \n" +
                "						where cpdTot.isDeleted = 0 and cpdTot.refSalesorderDetid =  sod.id )  \n" +
                "    INSERT INTO temp_so_rel_detail  \n" +
                "    select soDetId,  \n" +
                "    packingSlipDate,  \n" +
                "			promisedShipDate,  \n" +
                "            refCustPackingSlipID, packingSlipDetId,  \n" +
                "				row_number() over (partition by releaseId,soDetId order by promisedShipDate desc) cpsIndex,  \n" +
                "				refSalesOrderID,releaseId, partID, lineID, custPOQty,  internalComment,  releaseLineComment,  \n" +
                "				shippingComment, isCancle, releaseNumber, soReleaseQty,  \n" +
                "                shippedQty AS shippedQty,  \n" +
                "                cpsDetailCnt,  \n" +
                "                isReadyToShip  ,cpsDetailShippedQty  ,  \n" +
                "                (case when  (soReleaseQty - cpsDetailShippedQty) <= 0 then 1 else 0 end) relCompletedStatus,  \n" +
                "                cpsSubStatus  ,poReleaseNumber,salesOrderDetStatus,'pending ' as firstInsert  \n" +
                "	from (select  sod.id as soDetId,  \n" +
                "				sod.refSalesOrderID,  \n" +
                "				sod.partID,  \n" +
                "				sod.lineID,  \n" +
                "				sod.qty as custPOQty,  \n" +
                "				sod.internalComment,  \n" +
                "				sod.remark as shippingComment,  \n" +
                "                soship.releaseNotes releaseLineComment,  \n" +
                "				sod.isCancle,  \n" +
                "                soship.shippingID releaseId,  \n" +
                "				soship.releaseNumber,  \n" +
                "				soship.promisedShipDate,  \n" +
                "				(case when co.partType = 4 then sod.qty else  soship.qty end) soReleaseQty,  \n" +
                "				cpd.refCustPackingSlipID,  \n" +
                "                cpd.id packingSlipDetId,  \n" +
                "				cpd.shipQty AS shippedQty,  \n" +
                "                cp.packingSlipDate ,  \n" +
                "                SUM(cpd.shipQty) over (partition by soship.shippingID,sod.id ) cpsDetailShippedQty,  \n" +
                "                COUNT(refCustPackingSlipID) over (partition by soship.shippingID,sod.id ) cpsDetailCnt,  \n" +
                "--                row_number() over (partition by soship.shippingID,sod.id ) cpsIndex,  \n" +
                "                soship.isReadyToShip,  \n" +
                "                cp.subStatus AS cpsSubStatus,  \n" +
                "                soship.poReleaseNumber,  \n" +
                "                sod.salesOrderDetStatus  \n" +
                "		from salesorderdet sod  \n" +
                "        JOIN temp_so_mst tempMst ON tempMst.soId = sod.refSalesOrderID  \n" +
                "		left join component co on co.id = sod.partID and co.isDeleted = 0  \n" +
                "		left join salesshippingmst soship on soship.sDetID = sod.id and soship.isDeleted = 0  \n" +
                "		left join customer_packingslip_det cpd on cpd.refSalesorderDetid = sod.id and  (case when co.partType <> 4 then cpd.shippingId = soship.shippingID else 1 = 1 end)  and cpd.isDeleted = 0 and cpd.refCustPackingSlipID in (select id from customer_packingslip where isDeleted = 0 and transType='P')  \n" +
                "        left join customer_packingslip cp on cp.id = cpd.refCustPackingSlipID and sod.refSalesOrderID = cp.refSalesOrderID and cp.isDeleted = 0 and cp.transType = 'P'  \n" +
                "		-- left join rfq_rohsmst rohs on rohs.id = co.RoHSStatusID and rohs.isDeleted = 0  \n" +
                "		where sod.isDeleted = 0  \n" +
                "        and ifnull((case when co.partType = 4 then sod.qty else soship.qty end),0) >  \n" +
                "						(select ifnull(sum(cpdTot.shipQty),0) from customer_packingslip_det cpdTot  \n" +
                "						where cpdTot.isDeleted = 0 and cpdTot.refSalesorderDetid =  sod.id )  \n" +
                "	) a  \n" +
                "    order by a.refSalesOrderID,a.soDetId,a.promisedShipDate;  \n" +
                "    */  \n" +
                "  \n" +
                "	/*SET @SQLStatement1 = CONCAT (\"SELECT mst.* from temp_so_mst mst  \n" +
                "    LEFT JOIN temp_so_detail det  on det.refSalesOrderID = mst.soId  \n" +
                "    where det.woComment like '%\",pSearchText,\"%'\");  \n" +
                "    PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  */  \n" +
                "	SELECT * from temp_so_mst;  \n" +
                "  \n" +
                "    SET @SQLStatement2 = CONCAT(\"SELECT soDetail.* from temp_so_detail AS soDetail  \n" +
                "								left join temp_so_mst mst on mst.soId = soDetail.refSalesOrderID  \n" +
                "                                order by soDetail.salesOrderDetStatus, soDetail.soDetId\");  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                " 	SELECT * from temp_so_rel_detail order by relCompletedStatus;  \n" +
                "		-- order by soDetId,relCompletedStatus,promisedShipDate;  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_so_mst;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_so_detail;  \n" +
                "    DROP TEMPORARY TABLE IF EXISTS temp_so_rel_detail;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 14-02-2022  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1305,'1.00','V1','User Story 40771: Shipment Summary Improvement Points Suggested By Client[Main Branch] - Shweta '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1305:
            allDbChangesArray.push(
                /* **************************** New Script -> 14-02-2022 *********************************** */
                "DROP PROCEDURE IF EXISTS Sproc_RetrieveCustomerPackingShippingDetail;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveCustomerPackingShippingDetail`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN prefCustPackingSlipID INT  \n" +
                "	)  \n" +
                "BEGIN  \n" +
                "  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;  \n" +
                "    DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "  	DECLARE vMfgCodeFormat INT;  \n" +
                "  \n" +
                "	SELECT fun_getMFGCodeNameFormat() INTO vMfgCodeFormat;  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
                "  \n" +
                "  SET @tempQuerypackingSlip = CONCAT(\"SELECT cpd.id, cpd.refCustPackingSlipID,cpd.refSalesorderDetid,  \n" +
                "			cpd.partId , cpd.custPOLineID, cpd.assyDescription,  \n" +
                "			cpd.poQty,cpd.shipQty,cpd.remainingQty,cpd.shippedQty,cpd.shippingNotes,cpd.shippingId,  \n" +
                "			cpd.internalComment,  \n" +
                "			cpd.binID, cpd.whID,  \n" +
                "			ss.qty as releaseLineQty,  \n" +
                "			cpd.standrads,  \n" +
                "			ss.releaseNumber,  \n" +
                "			cpd.poReleaseNumber,  \n" +
                "			cpd.refBlanketPONumber,  \n" +
                "			fun_getUserNameByID(cpd.updatedBy) updatedby,  \n" +
                "			fun_getUserNameByID(cpd.createdBy) createdby,  \n" +
                "			fun_getRoleByID(cpd.createByRoleId) createdbyRole,  \n" +
                "			fun_getRoleByID(cpd.updateByRoleId) updatedbyRole,  \n" +
                "			fun_ApplyCommonDateTimeFormatByParaValue(cpd.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAt,  \n" +
                "			fun_ApplyCommonDateTimeFormatByParaValue(cpd.UpdatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt,  \n" +
                "			c.mfgpn,c.pidcode PIDCode,c.nickName,c.mfgpndescription,rr.name as rohsName,rr.rohsIcon, c.partType ,  \n" +
                "			fun_getUnitNameByID(c.uom) unitMeaser ,  c.custAssyPN,  \n" +
                "			cpd.reflineID as lineID ,  \n" +
                "			fun_GetFormattedMfgCode(mfgmst.mfgcode,mfgmst.mfgname,\", vMfgCodeFormat,\") mfgName,  \n" +
                "			c.mfgcodeid ,  \n" +
                "			cpd.lineID AS lineIDSequenceNum   ,  \n" +
                "			(SELECT GROUP_CONCAT(DISTINCT woNumber SEPARATOR ', ') FROM shippedassembly  \n" +
                "			   WHERE refCustPackingSlipDetID = cpd.id AND isDeleted = 0 AND shippedqty > 0) shippedFromWONumbers ,  \n" +
                "			(SELECT GROUP_CONCAT(DISTINCT css.uid) FROM shippedassembly sa  \n" +
                "					JOIN component_sid_stock css ON sa.refsidid = css.id AND  css.isDeleted = 0  \n" +
                "			  WHERE sa.refCustPackingSlipDetID = cpd.id AND sa.isDeleted = 0 AND sa.shippedqty > 0) shippedFromUMIDs ,  \n" +
                "             cpd.refLineId soLineId ,  \n" +
                "             cpd.refCustPackingSlipDetID,  \n" +
                "             CASE WHEN c.partType = 4 THEN FALSE ELSE TRUE END materialType,  \n" +
                "             (select mfg.mfgType from mfgcodemst mfg where mfg.id = c.mfgcodeID and mfg.isDeleted = 0) mfgType,  \n" +
                "             cpd.componentStockType,  \n" +
                "             if(cp.packingSlipType = 2, sod.price, cpd.unitPrice)  unitPrice,  \n" +
                "             if(cp.packingSlipType = 2, sod.quoteNumber, cpd.quoteNumber)  quoteNumber,  \n" +
                "             if(cp.packingSlipType = 2, sod.quoteFrom, cpd.quoteFrom) quoteFrom,  \n" +
                "             if(cp.packingSlipType = 2, sod.refAssyQtyTurnTimeID, cpd.refAssyQtyTurnTimeID) refAssyQtyTurnTimeID,  \n" +
                "             c.iscustom,c.isCPN,  \n" +
                "             if(cp.packingSlipType = 2, cpd.shipQty * sod.price,  cpd.extendedPrice) extendedPrice,  \n" +
                "             (select group_concat(cert.fullName)from  certificate_standards cert  \n" +
                "						where cert.certificateStandardID in (select compstd.certificateStandardID  \n" +
                "							from component_standard_details compstd where compstd.componentID = c.id and compstd.isDeleted= 0) )componentStandardList,  \n" +
                "            if(cp.packingSlipType = 2, sod.assyQtyTurnTimeText, cpd.assyQtyTurnTimeText) assyQtyTurnTimeText,  \n" +
                "            if(cp.packingSlipType = 2, sod.refRFQGroupID, cpd.refRFQGroupID)  refRFQGroupID,  \n" +
                "            if(cp.packingSlipType = 2, sod.refRFQQtyTurnTimeID, cpd.refRFQQtyTurnTimeID) refRFQQtyTurnTimeID,  \n" +
                "			(case when if(cp.packingSlipType = 2, sod.quoteFrom, cpd.quoteFrom) = 1 then 'From RFQ' when if(cp.packingSlipType = 2, sod.quoteFrom, cpd.quoteFrom) = 3 then 'N/A' when if(cp.packingSlipType = 2, sod.quoteFrom, cpd.quoteFrom) = 2 then 'From Part Master' else '' end) quoteFromText  ,  \n" +
                "            cpd.releaseNotes  \n" +
                "		FROM `customer_packingslip_det` AS cpd  \n" +
                "			left join component c on c.id=cpd.partid  \n" +
                "			left join mfgcodemst mfgmst on mfgmst.id = c.mfgCodeId and mfgmst.isDeleted = 0  \n" +
                "			left join rfq_rohsmst rr on rr.id=c.rohsStatusID  \n" +
                "			left join salesshippingmst ss on ss.shippingID=cpd.shippingID and ss.isdeleted=0  \n" +
                "            left join salesorderdet sod on sod.id = cpd.refSalesorderDetid and sod.isDeleted = 0  \n" +
                "            left join customer_packingslip cp on cp.id  = cpd.refCustPackingSlipID and cp.isDeleted = 0  \n" +
                "		WHERE cpd.isDeleted=0 and cpd.refCustPackingSlipID=\",IFNULL(prefCustPackingSlipID,0));  \n" +
                "  \n" +
                "		IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY lineIDSequenceNum ASC\") ;  \n" +
                "		ELSE  \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "  \n" +
                "		IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "			SET pWhereClause = '1=1' ;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "  \n" +
                "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "			SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "		ELSE  \n" +
                "			SET rowNumWhere = '';  \n" +
                "		END IF;  \n" +
                "        /* to get total count of rows */  \n" +
                "			SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@tempQuerypackingSlip,\" ) c where 1=1 and \", pWhereClause);  \n" +
                "  \n" +
                "			PREPARE query2 FROM @SQLStatement2;  \n" +
                "			EXECUTE query2;  \n" +
                "			DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "			SET @SQLStatement2 = CONCAT(\"select * from ( \", @tempQuerypackingSlip,\" ) c  \n" +
                "				where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "			PREPARE query1 FROM @SQLStatement2;  \n" +
                "			EXECUTE query1;  \n" +
                "			DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 14-02-2022  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1306,'1.00','V1','User Story 40771: Shipment Summary Improvement Points Suggested By Client[Main Branch] - Shweta '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1306:
            allDbChangesArray.push(
                /* **************************** New Script -> 14-02-2022  *********************************** */
                "DROP procedure IF EXISTS `Sproc_RetrieveSupplierInvoicePaymentLines`;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveSupplierInvoicePaymentLines`(  \n" +
                "	IN pPaymentID INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	SELECT a.*,  \n" +
                "			(IFNULL(totalExtendedAmount,0) - IFNULL(totalPaidAmount,0) + markedForRefundAmt) balanceToPayAmount  \n" +
                "	FROM ( SELECT ps.id,  \n" +
                "						ps.systemId,  \n" +
                "						psd.totalExtendedAmount,  \n" +
                "                        psd.totalDiscount,  \n" +
                "						ps.receiptType,  \n" +
                "						ps.invoiceNumber,  \n" +
                "						ps.invoiceDate,  \n" +
                "						ps.creditMemoNumber,  \n" +
                "						ps.creditMemoDate,  \n" +
                "						ps.debitMemoNumber,  \n" +
                "						ps.debitMemoDate,  \n" +
                "						psr.invoiceNumber refInvoiceNumber,  \n" +
                "						ps.refParentCreditDebitInvoiceno,  \n" +
                "						get_totalSupplierInvoicePaidAmountById(ps.id) totalPaidAmount,  \n" +
                "						IFNULL(pid.paymentAmount,0) paymentAmount,  \n" +
                "                        ifnull(ps.markedForRefundAmt, 0) markedForRefundAmt,  \n" +
                "						ps.isDeleted  \n" +
                "				FROM 		packing_slip_material_receive ps  \n" +
                "				LEFT JOIN 	packing_slip_material_receive psr ON psr.id = ps.refParentCreditDebitInvoiceno /*AND psr.isDeleted = 0*/  \n" +
                "				JOIN 		packingslip_invoice_payment_det pid ON pid.refPackingslipInvoiceID = ps.id  \n" +
                "                LEFT JOIN (SELECT 	psd.refPackingSlipMaterialRecID, psd.isDeleted,  \n" +
                "								SUM(psd.extendedPrice) totalExtendedAmount,  \n" +
                "								sum(psd.discount) totalDiscount  \n" +
                "							FROM 	packing_slip_material_receive_det psd  \n" +
                "						 GROUP BY psd.refPackingSlipMaterialRecID, psd.isDeleted) psd ON psd.refPackingSlipMaterialRecID = ps.id AND psd.isDeleted = CASE WHEN ps.isDeleted = 0 THEN 0 ELSE psd.isDeleted END  \n" +
                "				WHERE 		pid.refPayementid = pPaymentID AND  \n" +
                "							(SELECT 1 FROM packingslip_invoice_payment X WHERE x.id = pid.refPayementid AND x.refPaymentMode = 'P')  \n" +
                "			) a;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 14-02-2022 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1307,'1.00','V1',' Bug 41266: [Main Branch] Price Issue check-box must get unchecked if Price corrected on Line Variance Approvals pop-up - Jay '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1307:
            allDbChangesArray.push(
                /* **************************** New Script -> 09-09-2021  *********************************** */
                "DROP TRIGGER IF EXISTS `Trg_AU_Component_Standard_Details_History`;  \n" +
                "CREATE TRIGGER `Trg_AU_Component_Standard_Details_History` AFTER UPDATE ON `component_standard_details` FOR EACH ROW BEGIN  \n" +
                "	DECLARE pOldValue TEXT;  \n" +
                "	DECLARE pNewValue TEXT;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.isDeleted,0) != IFNULL(NEW.isDeleted,0) THEN  \n" +
                "		IF OLD.ClassID IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`className`, '') INTO `pOldValue`  \n" +
                "			FROM standard_class  \n" +
                "			WHERE classID =OLD.ClassID  \n" +
                "			ORDER BY classID DESC LIMIT 1;  \n" +
                "		ELSEIF OLD.certificateStandardID IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`fullName`, '') INTO `pOldValue`  \n" +
                "			FROM certificate_standards  \n" +
                "			WHERE certificateStandardID =OLD.certificateStandardID  \n" +
                "			ORDER BY certificateStandardID DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "		INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby)  \n" +
                "	       VALUES(NEW.componentID,			'component_standard_details',	'Parts > Standards > Deleted',  \n" +
                "			pOldValue,			 NULL,				OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			NEW.Updatedby);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.certificateStandardID,0) != IFNULL(NEW.certificateStandardID,0) THEN  \n" +
                "		IF OLD.certificateStandardID IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`fullName`, '') INTO `pOldValue`  \n" +
                "			FROM certificate_standards  \n" +
                "			WHERE certificateStandardID =OLD.certificateStandardID  \n" +
                "			ORDER BY certificateStandardID DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "		IF NEW.certificateStandardID IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`fullName`, '') INTO `pNewValue`  \n" +
                "			FROM certificate_standards  \n" +
                "			WHERE certificateStandardID =NEW.certificateStandardID  \n" +
                "			ORDER BY certificateStandardID DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "		   INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby)  \n" +
                "	       VALUES(NEW.componentID,			'component_standard_details',	'Parts > Standards > Certificate Standard',  \n" +
                "			pOldValue, 			pNewValue,	 		OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.ClassID,0) != IFNULL(NEW.ClassID,0) THEN  \n" +
                "		IF OLD.ClassID IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`className`, '') INTO `pOldValue`  \n" +
                "			FROM standard_class  \n" +
                "			WHERE classID =OLD.ClassID  \n" +
                "			ORDER BY classID DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "		IF NEW.ClassID IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`className`, '') INTO `pNewValue`  \n" +
                "			FROM standard_class  \n" +
                "			WHERE classID =NEW.ClassID  \n" +
                "			ORDER BY classID DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "		   INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby)  \n" +
                "	       VALUES(NEW.componentID,			'component_standard_details',	'Parts > Standards > Class',  \n" +
                "			pOldValue, 			pNewValue,	 		OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			NEW.Updatedby);  \n" +
                "	END IF;  \n" +
                "END;  \n" +

                "DROP TRIGGER IF EXISTS `Trg_AU_Component_Operational_Attribute_Details_History`;  \n" +
                "CREATE TRIGGER `Trg_AU_Component_Operational_Attribute_Details_History` AFTER UPDATE ON `component_dynamic_attribute_mapping_part` FOR EACH ROW BEGIN  \n" +
                "	DECLARE pAttributeName TEXT;  \n" +
                "    DECLARE pAttributefieldType TEXT;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.isDeleted,0) != IFNULL(NEW.isDeleted,0) THEN  \n" +
                "        select IFNULL(`attributeName`, '') as Attname , IFNULL(`fieldType`, '') fieldType  INTO pAttributeName, pAttributefieldType from component_dynamic_attribute as cda where cda.id = NEW.attributeID;  \n" +
                "  \n" +
                "		INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,		valueDataType)  \n" +
                "	       VALUES(NEW.mfgPNID,			'component_dynamic_attribute_mapping_part',	CONCAT('Parts > Operational Attributes > ', pAttributeName ,' > Deleted'),  \n" +
                "			NEW.attributeValue, 				NULL,	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.deletedAt,			 NEW.deletedBy, 		pAttributefieldType);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.attributeValue,0) != IFNULL(NEW.attributeValue,0) THEN  \n" +
                "		select IFNULL(`attributeName`, '') as Attname , IFNULL(`fieldType`, '') fieldType  INTO pAttributeName, pAttributefieldType from component_dynamic_attribute as cda where cda.id = NEW.attributeID;  \n" +
                "  \n" +
                "		   INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,		valueDataType)  \n" +
                "	       VALUES(NEW.mfgPNID,			'component_dynamic_attribute_mapping_part',	CONCAT('Parts > Operational Attributes > ', pAttributeName),  \n" +
                "			OLD.attributeValue, 			NEW.attributeValue,	 		OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,		pAttributefieldType);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "END;  \n" +

                "DROP TRIGGER IF EXISTS `Trg_AU_Component_Shipping_Country_Details_History`;  \n" +
                "CREATE TRIGGER `Trg_AU_Component_Shipping_Country_Details_History` AFTER UPDATE ON `component_acceptable_shipping_countries` FOR EACH ROW BEGIN  \n" +
                "	DECLARE pCountryName TEXT;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.isDeleted,0) != IFNULL(NEW.isDeleted,0) THEN  \n" +
                "       select IFNULL(`countryName`, '') INTO `pCountryName` from countrymst as c where c.countryID = NEW.countryID;  \n" +
                "  \n" +
                "		INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,		valueDataType)  \n" +
                "	       VALUES(NEW.refComponentID,			'component_acceptable_shipping_countries',	'Parts > Acceptable Shipping Countries >Deleted',  \n" +
                "			pCountryName, 				NULL,	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.deletedAt,			NEW.Updatedby, 		'varchar');  \n" +
                "	END IF;  \n" +
                "END;  \n" +

                "DROP TRIGGER IF EXISTS `Trg_AU_Component_Datasheet_Details_History`;  \n" +
                "CREATE TRIGGER `Trg_AU_Component_Datasheet_Details_History` AFTER UPDATE ON `component_datasheets` FOR EACH ROW BEGIN  \n" +
                "  \n" +
                "	IF IFNULL(OLD.isDeleted,0) != IFNULL(NEW.isDeleted,0) THEN  \n" +
                "		INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,		valueDataType)  \n" +
                "	       VALUES(NEW.refComponentID,			'component_datasheets',	'Parts > Data Sheet Link > Deleted',  \n" +
                "			NEW.datasheetName, 				NULL,	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.deletedAt,			NEW.Updatedby, 		'varchar');  \n" +
                "	END IF;  \n" +
                "END;  \n" +


                "DROP TRIGGER IF EXISTS `Trg_AU_Component_PackagingAlias_History`;  \n" +
                "CREATE TRIGGER `Trg_AU_Component_PackagingAlias_History` AFTER UPDATE ON `component_packagingalias` FOR EACH ROW BEGIN  \n" +
                "	DECLARE pOldValue TEXT;  \n" +
                "	DECLARE pNewValue TEXT;  \n" +
                "	IF IFNULL(OLD.aliasgroupID,0) != IFNULL(NEW.aliasgroupID,0) THEN  \n" +
                "		   INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby)  \n" +
                "	       VALUES(NEW.componentID,				'component_packagingalias',	'Part > Packaging Alias > Alias Group Id',  \n" +
                "			CAST(OLD.aliasgroupID AS CHAR), 	CAST(NEW.aliasgroupID AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.componentID,0) != IFNULL(NEW.componentID,0) THEN  \n" +
                "		IF OLD.componentID IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`mfgPN`, '') INTO `pOldValue`  \n" +
                "			FROM component  \n" +
                "			WHERE id =OLD.componentID  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "		IF NEW.componentID IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`mfgPN`, '') INTO `pNewValue`  \n" +
                "			FROM component  \n" +
                "			WHERE id =NEW.componentID  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "		   INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby)  \n" +
                "	       VALUES(NEW.componentID,			'component_packagingalias',	'Part > Packaging Alias > MFG PN',  \n" +
                "			pOldValue, 			pNewValue,			OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			NEW.Updatedby);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.isDeleted,0) != IFNULL(NEW.isDeleted,0) THEN  \n" +
                "		IF OLD.componentID IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`mfgPN`, '') INTO `pOldValue`  \n" +
                "			FROM component  \n" +
                "			WHERE id =OLD.componentID  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "		   INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,		createByRoleId)  \n" +
                "	       VALUES(NEW.componentID,			'component_packagingalias',	'Part > Packaging Alias > Deleted',  \n" +
                "			pOldValue,			NULL, 					OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.deletedAt,			NEW.deletedBy, 	NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "END;  \n" +

                "DROP TRIGGER IF EXISTS `Trg_AU_Component_Alternatepn_History`;  \n" +
                "CREATE TRIGGER `Trg_AU_Component_Alternatepn_History` AFTER UPDATE ON `component_alternatepn` FOR EACH ROW BEGIN  \n" +
                "	DECLARE pOldValue TEXT;  \n" +
                "	DECLARE pNewValue TEXT;  \n" +
                "	DECLARE pTableDisplayName TEXT;  \n" +
                "	IF old.type=1 THEN  \n" +
                "		SET pTableDisplayName = 'Alternate Parts';  \n" +
                "	ELSEIF old.type=2 THEN  \n" +
                "		SET pTableDisplayName = 'Pickup Pad';  \n" +
                "	ELSEIF old.type=3 THEN  \n" +
                "		SET pTableDisplayName = 'Program';  \n" +
                "	ELSEIF old.type=4 THEN  \n" +
                "		SET pTableDisplayName = 'Functional Testing Tools';  \n" +
                "	ELSEIF old.type=5 THEN  \n" +
                "		SET pTableDisplayName = 'Require Mating Parts';  \n" +
                "    ELSEIF old.type=6 THEN  \n" +
                "		SET pTableDisplayName = 'RoHS Replacement Part';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF OLD.componentID IS NOT NULL THEN  \n" +
                "		SELECT IFNULL(`mfgPN`, '') INTO `pOldValue`  \n" +
                "		FROM component  \n" +
                "		WHERE id =OLD.componentID  \n" +
                "		ORDER BY id DESC LIMIT 1;  \n" +
                "	END IF;  \n" +
                "	IF NEW.componentID IS NOT NULL THEN  \n" +
                "		SELECT IFNULL(`mfgPN`, '') INTO `pNewValue`  \n" +
                "		FROM component  \n" +
                "		WHERE id =NEW.componentID  \n" +
                "		ORDER BY id DESC LIMIT 1;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.componentID,0) != IFNULL(NEW.componentID,0) THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby)  \n" +
                "	       VALUES(NEW.refComponentID,		'component_alternatepn',	CONCAT(pTableDisplayName,' > MFG PN'),  \n" +
                "			pOldValue, 			pNewValue,	 		OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.isDeleted,0) != IFNULL(NEW.isDeleted,0) THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,	createByRoleId)  \n" +
                "	       VALUES(NEW.refComponentID,		'component_alternatepn',	CONCAT('Part > ',pTableDisplayName,' > Deleted'),  \n" +
                "			pOldValue,			NULL, 					 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.deletedAt,			NEW.deletedBy,	NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "END;  \n" +


                "DROP TRIGGER IF EXISTS `Trg_AU_Component_Drivetools_History`;  \n" +
                "CREATE TRIGGER `Trg_AU_Component_Drivetools_History` AFTER UPDATE ON `component_drivetools` FOR EACH ROW BEGIN  \n" +
                "	DECLARE pOldValue TEXT;  \n" +
                "	DECLARE pNewValue TEXT;  \n" +
                "	IF IFNULL(OLD.isDeleted,0) != IFNULL(NEW.isDeleted,0) THEN  \n" +
                "		IF OLD.componentID IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`mfgPN`, '') INTO `pOldValue`  \n" +
                "			FROM component  \n" +
                "			WHERE id =OLD.componentID  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "		INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,			createByRoleId)  \n" +
                "	       VALUES(NEW.refComponentID,		'component_drivetools',		'Part > Drive Tools > Deleted',  \n" +
                "			pOldValue, 			NULL, 				OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.deletedAt,			NEW.deletedBy, 	NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.componentID,0) != IFNULL(NEW.componentID,0) THEN  \n" +
                "		IF OLD.componentID IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`mfgPN`, '') INTO `pOldValue`  \n" +
                "			FROM component  \n" +
                "			WHERE id =OLD.componentID  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "		IF NEW.componentID IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`mfgPN`, '') INTO `pNewValue`  \n" +
                "			FROM component  \n" +
                "			WHERE id =NEW.componentID  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "		   INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby)  \n" +
                "		VALUES(NEW.refComponentID,		'component_drivetools',		'Part > Drive Tools',  \n" +
                "			pOldValue, 			pNewValue,	 		OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby);  \n" +
                "	END IF;  \n" +
                "END;  \n" +

                "DROP TRIGGER IF EXISTS `Trg_AU_Component_ProcessMaterial_History`;  \n" +
                "CREATE TRIGGER `Trg_AU_Component_ProcessMaterial_History` AFTER UPDATE ON `component_processmaterial` FOR EACH ROW BEGIN  \n" +
                "	DECLARE pOldValue TEXT;  \n" +
                "	DECLARE pNewValue TEXT;  \n" +
                "	IF IFNULL(OLD.isDeleted,0) != IFNULL(NEW.isDeleted,0) THEN  \n" +
                "		IF OLD.componentID IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`mfgPN`, '') INTO `pOldValue`  \n" +
                "			FROM component  \n" +
                "			WHERE id =OLD.componentID  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "		   INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,			createByRoleId)  \n" +
                "	       VALUES(NEW.refComponentID,		'component_processmaterial',	'Part > Process Material > Deleted',  \n" +
                "			pOldValue, 			NULL, 					OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.deletedAt,			NEW.deletedBy, 	NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.componentID,0) != IFNULL(NEW.componentID,0) THEN  \n" +
                "		IF OLD.componentID IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`mfgPN`, '') INTO `pOldValue`  \n" +
                "			FROM component  \n" +
                "			WHERE id =OLD.componentID  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "		IF NEW.componentID IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`mfgPN`, '') INTO `pNewValue`  \n" +
                "			FROM component  \n" +
                "			WHERE id =NEW.componentID  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "		   INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby)  \n" +
                "	       VALUES(NEW.refComponentID,		'component_processmaterial',	'Part > Process Material',  \n" +
                "			pOldValue, 			pNewValue,	 		OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			NEW.Updatedby);  \n" +
                "	END IF;  \n" +
                "END;  \n" +

                "DROP TRIGGER IF EXISTS `Trg_AU_Component_FunctionalTestingEquipment_History`;  \n" +
                "CREATE TRIGGER `Trg_AU_Component_FunctionalTestingEquipment_History` AFTER UPDATE ON `component_functionaltestingequipment` FOR EACH ROW BEGIN  \n" +
                "	DECLARE pOldValue TEXT;  \n" +
                "	DECLARE pNewValue TEXT;  \n" +
                "	IF IFNULL(OLD.eqpID,0) != IFNULL(NEW.eqpID,0) THEN  \n" +
                "		IF OLD.eqpID IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`assetName`, '') INTO `pOldValue`  \n" +
                "			FROM equipment  \n" +
                "			WHERE eqpID =OLD.eqpID  \n" +
                "			ORDER BY eqpID DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "		IF NEW.eqpID IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`assetName`, '') INTO `pNewValue`  \n" +
                "			FROM equipment  \n" +
                "			WHERE eqpID =NEW.eqpID  \n" +
                "			ORDER BY eqpID DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "		   INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby)  \n" +
                "	       VALUES(NEW.refComponentID,		'component_functionaltestingequipment',		'Part > Equipment',  \n" +
                "			pOldValue, 			pNewValue,	 		OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			NEW.Updatedby);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.isDeleted,0) != IFNULL(NEW.isDeleted,0) THEN  \n" +
                "		IF OLD.eqpID IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`assetName`, '') INTO `pOldValue`  \n" +
                "			FROM equipment  \n" +
                "			WHERE eqpID =OLD.eqpID  \n" +
                "			ORDER BY eqpID DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "		   INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,	createByRoleId)  \n" +
                "	       VALUES(NEW.refComponentID,		'component_functionaltestingequipment',		'Part > Functional Testing Equipments > Deleted',  \n" +
                "			pOldValue,	 		NULL, 				 		OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.deletedAt,			NEW.deletedBy,	NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "END;  \n" +

                "DROP TRIGGER IF EXISTS `Trg_AU_Component_History`;  \n" +
                "CREATE TRIGGER `Trg_AU_Component_History` AFTER UPDATE ON `component` FOR EACH ROW FOLLOWS `Trg_AU_component`  \n" +
                "BEGIN  \n" +
                "	DECLARE pOldValue TEXT;  \n" +
                "	DECLARE pNewValue TEXT;  \n" +
                "    DECLARE pLabelValue TEXT;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.mfgPN,\"\") != IFNULL(NEW.mfgPN,\"\") THEN  \n" +
                "		SELECT IFNULL(`mfgType`, '') INTO `pLabelValue`  \n" +
                "		FROM mfgcodemst  \n" +
                "		WHERE id =NEW.mfgcodeID  \n" +
                "		ORDER BY id DESC LIMIT 1;  \n" +
                "        set pLabelValue = (select CASE WHEN pLabelValue = 'DIST' then 'Supplier PN' ELSE 'MFR PN' END);  \n" +
                "  \n" +
                "       INSERT INTO Component_History  \n" +
                "		(refComponentID,                 	 	tableName,                 	Colname,  \n" +
                "		Oldval, 			Newval, 			createdBy,  \n" +
                "		createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	VALUES(NEW.id,				'component',			pLabelValue,  \n" +
                "		CAST(OLD.mfgPN AS CHAR),	CAST(NEW.mfgPN AS CHAR),	 OLD.createdBy,  \n" +
                "		OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','mfgPN'));  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.productionPN,\"\") != IFNULL(NEW.productionPN,\"\") THEN  \n" +
                "       INSERT INTO Component_History  \n" +
                "		(refComponentID,                 	 	tableName,                 	Colname,  \n" +
                "		Oldval, 			Newval, 			createdBy,  \n" +
                "		createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	VALUES(NEW.id,				'component',			'Production PN',  \n" +
                "		CAST(OLD.productionPN AS CHAR),	CAST(NEW.productionPN AS CHAR),	 OLD.createdBy,  \n" +
                "		OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','productionPN'));  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.mfgcodeID,0) != IFNULL(NEW.mfgcodeID,0) THEN  \n" +
                "	IF OLD.mfgcodeID IS NOT NULL THEN  \n" +
                "		SELECT IFNULL(`mfgCode`, '') INTO `pOldValue`  \n" +
                "		FROM mfgcodemst  \n" +
                "		WHERE id =OLD.mfgcodeID  \n" +
                "		ORDER BY id DESC LIMIT 1;  \n" +
                "	END IF;  \n" +
                "	IF NEW.mfgcodeID IS NOT NULL THEN  \n" +
                "		SELECT IFNULL(`mfgCode`, '') INTO `pNewValue`  \n" +
                "		FROM mfgcodemst  \n" +
                "		WHERE id =NEW.mfgcodeID  \n" +
                "		ORDER BY id DESC LIMIT 1;  \n" +
                "	END IF;  \n" +
                "       INSERT INTO Component_History  \n" +
                "		(refComponentID,                tableName,                 	Colname,  \n" +
                "		Oldval, 			Newval, 			createdBy,  \n" +
                "		createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "       VALUES(NEW.id,				'component',			'MFR Code',  \n" +
                "		pOldValue,			pNewValue,	 		OLD.createdBy,  \n" +
                "		OLD.createdAt,			NEW.updatedAt,			NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'varchar');  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.mfgPNDescription,\"\") != IFNULL(NEW.mfgPNDescription,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Description',  \n" +
                "			CAST(OLD.mfgPNDescription AS CHAR),	CAST(NEW.mfgPNDescription AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','mfgPNDescription'));  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.packageQty,\"\") != IFNULL(NEW.packageQty,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'MFR SPQ',  \n" +
                "			CAST(OLD.packageQty AS CHAR),	CAST(NEW.packageQty AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'sixdigitunitprice');  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.umidSPQ,\"\") != IFNULL(NEW.umidSPQ,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'UMID SPQ',  \n" +
                "			CAST(OLD.umidSPQ AS CHAR),	CAST(NEW.umidSPQ AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'sixdigitunitprice');  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.ltbDate,\"\") != IFNULL(NEW.ltbDate,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'LTB Date',  \n" +
                "			CAST(DATE(OLD.ltbDate) AS CHAR),	CAST(DATE(NEW.ltbDate) AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','ltbDate'));  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.RoHSStatusID,\"\") != IFNULL(NEW.RoHSStatusID,\"\") THEN  \n" +
                "		IF OLD.RoHSStatusID IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`name`, '') INTO `pOldValue`  \n" +
                "			FROM rfq_rohsmst  \n" +
                "			WHERE id =OLD.RoHSStatusID  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "		IF NEW.RoHSStatusID IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`name`, '') INTO `pNewValue`  \n" +
                "			FROM rfq_rohsmst  \n" +
                "			WHERE id =NEW.RoHSStatusID  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'RoHS Status',  \n" +
                "			pOldValue,			pNewValue,	 		OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                       'varchar');  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.packaginggroupID,\"\") != IFNULL(NEW.packaginggroupID,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Packaging Group',  \n" +
                "			CAST(OLD.packaginggroupID AS CHAR),	CAST(NEW.packaginggroupID AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','packaginggroupID'));  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.isDeleted,\"\") != IFNULL(NEW.isDeleted,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Deleted',  \n" +
                "			NULL,				OLD.mfgPN,	 		OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','mfgPN'));  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.PIDCode,\"\") != IFNULL(NEW.PIDCode,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'PID Code',  \n" +
                "			CAST(OLD.PIDCode AS CHAR),	CAST(NEW.PIDCode AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','PIDCode'));  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.isGoodPart,\"\") != IFNULL(NEW.isGoodPart,\"\") THEN  \n" +
                "		IF OLD.isGoodPart IS NOT NULL THEN  \n" +
                "			SET pOldValue = CASE WHEN OLD.isGoodPart = 1 THEN  \n" +
                "										'Correct Part'  \n" +
                "								WHEN OLD.isGoodPart = 2 THEN  \n" +
                "										'Incorrect Part'  \n" +
                "								WHEN OLD.isGoodPart = 3 THEN  \n" +
                "										'TBD Part'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "		IF NEW.isGoodPart IS NOT NULL THEN  \n" +
                "			SET pNewValue = CASE WHEN NEW.isGoodPart = 1 THEN  \n" +
                "										'Correct Part'  \n" +
                "								WHEN NEW.isGoodPart = 2 THEN  \n" +
                "										'Incorrect Part'  \n" +
                "								WHEN NEW.isGoodPart = 3 THEN  \n" +
                "										'TBD Part'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Correct Part',  \n" +
                "			pOldValue,			pNewValue,	 		OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'varchar');  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.rohsgroupID,\"\") != IFNULL(NEW.rohsgroupID,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'RoHS Group',  \n" +
                "			CAST(OLD.rohsgroupID AS CHAR),	CAST(NEW.rohsgroupID AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','rohsgroupID'));  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.leadTime,\"\") != IFNULL(NEW.leadTime,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Standard Lead Time',  \n" +
                "			CAST(OLD.leadTime AS CHAR),	CAST(NEW.leadTime AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','leadTime'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/*IF IFNULL(OLD.packaging,\"\") != IFNULL(NEW.packaging,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby)  \n" +
                "	       VALUES(NEW.id,				'component',			'Packaging',  \n" +
                "			CAST(OLD.packaging AS CHAR),	CAST(NEW.packaging AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby);  \n" +
                "	END IF;*/  \n" +
                "	IF IFNULL(OLD.noOfPosition,\"\") != IFNULL(NEW.noOfPosition,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Pin Count',  \n" +
                "			CAST(OLD.noOfPosition AS CHAR),	CAST(NEW.noOfPosition AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','noOfPosition'));  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.countryOfOrigin,\"\") != IFNULL(NEW.countryOfOrigin,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Country Of Origin',  \n" +
                "			CAST(OLD.countryOfOrigin AS CHAR),	CAST(NEW.countryOfOrigin AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','countryOfOrigin'));  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.uom,\"\") != IFNULL(NEW.uom,\"\") THEN  \n" +
                "		IF OLD.uom IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`unitName`, '') INTO `pOldValue`  \n" +
                "			FROM uoms  \n" +
                "			WHERE id =OLD.uom  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "		IF NEW.uom IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`unitName`, '') INTO `pNewValue`  \n" +
                "			FROM uoms  \n" +
                "			WHERE id =NEW.uom  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'UOM',  \n" +
                "			pOldValue,			pNewValue,	 		OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'varchar');  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.mountingTypeID,\"\") != IFNULL(NEW.mountingTypeID,\"\") THEN  \n" +
                "		IF OLD.mountingTypeID IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`name`, '') INTO `pOldValue`  \n" +
                "			FROM rfq_mountingtypemst  \n" +
                "			WHERE id =OLD.mountingTypeID  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "		IF NEW.mountingTypeID IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`name`, '') INTO `pNewValue`  \n" +
                "  \n" +
                "			FROM rfq_mountingtypemst  \n" +
                "			WHERE id =NEW.mountingTypeID  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Mounting Type',  \n" +
                "			pOldValue,			pNewValue,	 		OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'varchar');  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.partPackage,\"\") != IFNULL(NEW.partPackage,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Package/ Case (Shape) (External)',  \n" +
                "			CAST(OLD.partPackage AS CHAR),	CAST(NEW.partPackage AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','partPackage'));  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.partPackageID,\"\") != IFNULL(NEW.partPackageID,\"\") THEN  \n" +
                "		IF OLD.partPackageID IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`name`, '') INTO `pOldValue`  \n" +
                "			FROM rfq_packagecasetypemst  \n" +
                "			WHERE id =OLD.partPackageID  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "		IF NEW.partPackageID IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`name`, '') INTO `pNewValue`  \n" +
                "			FROM rfq_packagecasetypemst  \n" +
                "			WHERE id =NEW.partPackageID  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Package/Case (Shape)',  \n" +
                "			pOldValue,			pNewValue,	 		OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'varchar');  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.deviceMarking,\"\") != IFNULL(NEW.deviceMarking,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Device Marking',  \n" +
                "			CAST(OLD.deviceMarking AS CHAR),	CAST(NEW.deviceMarking AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','deviceMarking'));  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.minimum,\"\") != IFNULL(NEW.minimum,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Min',  \n" +
                "			CAST(OLD.minimum AS CHAR),	CAST(NEW.minimum AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','minimum'));  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.mult,\"\") != IFNULL(NEW.mult,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Mult',  \n" +
                "			CAST(OLD.mult AS CHAR),		CAST(NEW.mult AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','mult'));  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.uomText,\"\") != IFNULL(NEW.uomText,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'UOM (External)',  \n" +
                "			CAST(OLD.uomText AS CHAR),	CAST(NEW.uomText AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','uomText'));  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.htsCode,\"\") != IFNULL(NEW.htsCode,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'HTS Code',  \n" +
                "			CAST(OLD.htsCode AS CHAR),	CAST(NEW.htsCode AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','htsCode'));  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.category,\"\") != IFNULL(NEW.category,\"\") THEN  \n" +
                "		IF OLD.category IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`categoryName`, '') INTO `pOldValue`  \n" +
                "			FROM rfq_partcategory  \n" +
                "			WHERE id =OLD.category  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "		IF NEW.category IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`categoryName`, '') INTO `pNewValue`  \n" +
                "			FROM rfq_partcategory  \n" +
                "			WHERE id =NEW.category  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Part Category',  \n" +
                "			pOldValue,			pNewValue,	 		OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'varchar');  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.rohsText,\"\") != IFNULL(NEW.rohsText,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'RoHS (External)',  \n" +
                "			CAST(OLD.rohsText AS CHAR),	CAST(NEW.rohsText AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','rohsText'));  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.dataSheetLink,\"\") != IFNULL(NEW.dataSheetLink,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Data Sheet Link (Set Default)',  \n" +
                "			CAST(OLD.dataSheetLink AS CHAR),	CAST(NEW.dataSheetLink AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','dataSheetLink'));  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.replacementPartID,\"\") != IFNULL(NEW.replacementPartID,\"\") THEN  \n" +
                "		IF OLD.replacementPartID IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`mfgPN`, '') INTO `pOldValue`  \n" +
                "			FROM component  \n" +
                "			WHERE id =OLD.replacementPartID  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "		IF NEW.replacementPartID IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`mfgPN`, '') INTO `pNewValue`  \n" +
                "			FROM component  \n" +
                "			WHERE id =NEW.replacementPartID  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Corrected Part',  \n" +
                "			pOldValue,			pNewValue,	 		OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'varchar');  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.eolDate,\"\") != IFNULL(NEW.eolDate,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'EOL Date',  \n" +
                "			CAST(DATE(OLD.eolDate) AS CHAR),	CAST(DATE(NEW.eolDate) AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','eolDate'));  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.reversalDate,\"\") != IFNULL(NEW.reversalDate,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Reversal Date',  \n" +
                "			CAST(DATE(OLD.reversalDate) AS CHAR),	CAST(DATE(NEW.reversalDate) AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','reversalDate'));  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.value,\"\") != IFNULL(NEW.value,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Value',  \n" +
                "			CAST(OLD.value AS CHAR),	CAST(NEW.value AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','value'));  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.tolerance,\"\") != IFNULL(NEW.tolerance,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Tolerance',  \n" +
                "			CAST(OLD.tolerance AS CHAR),	CAST(NEW.tolerance AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','tolerance'));  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.minOperatingTemp,\"\") != IFNULL(NEW.minOperatingTemp,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Min Operating Temperature',  \n" +
                "			CAST(OLD.minOperatingTemp AS CHAR),	CAST(NEW.minOperatingTemp AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','minOperatingTemp'));  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.maxOperatingTemp,\"\") != IFNULL(NEW.maxOperatingTemp,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Max Operating Temperature',  \n" +
                "			CAST(OLD.maxOperatingTemp AS CHAR),	CAST(NEW.maxOperatingTemp AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','maxOperatingTemp'));  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.functionalCategoryID,\"\") != IFNULL(NEW.functionalCategoryID,\"\") THEN  \n" +
                "		IF OLD.functionalCategoryID IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`partTypeName`, '') INTO `pOldValue`  \n" +
                "			FROM rfq_parttypemst  \n" +
                "			WHERE id =OLD.functionalCategoryID  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "		IF NEW.functionalCategoryID IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`partTypeName`, '') INTO `pNewValue`  \n" +
                "			FROM rfq_parttypemst  \n" +
                "			WHERE id =NEW.functionalCategoryID  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Functional Type',  \n" +
                "			pOldValue,			pNewValue,	 		OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'varchar');  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.weight,\"\") != IFNULL(NEW.weight,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Weight',  \n" +
                "			CAST(OLD.weight AS CHAR),	CAST(NEW.weight AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','weight'));  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.length,\"\") != IFNULL(NEW.length,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Length',  \n" +
                "			CAST(OLD.length AS CHAR),	CAST(NEW.length AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'unitprice');  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.width,\"\") != IFNULL(NEW.width,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Width',  \n" +
                "			CAST(OLD.width AS CHAR),	CAST(NEW.width AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'unitprice');  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.height,\"\") != IFNULL(NEW.height,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Height',  \n" +
                "			CAST(OLD.height AS CHAR),	CAST(NEW.height AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'unitprice');  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.saftyStock,\"\") != IFNULL(NEW.saftyStock,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Min. Count(Qty) (Safety Stock)',  \n" +
                "			CAST(OLD.saftyStock AS CHAR),	CAST(NEW.saftyStock AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','saftyStock'));  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.specialNote,\"\") != IFNULL(NEW.specialNote,\"\") THEN  \n" +
                "		INSERT INTO common_longtext_history  \n" +
                "			(refTransId,				Colname,				Oldval,  \n" +
                "			 Newval,					valueDataType,				Tablename,  \n" +
                "			 createdBy,  				createdAt,  			updatedAt, 			Updatedby,  \n" +
                "			createByRoleId,		updateByRoleId )  \n" +
                "		 VALUES(NEW.id,					'Special Note',			CAST(OLD.specialNote AS CHAR),  \n" +
                "				 CAST(NEW.specialNote AS CHAR),	 	fun_getDataTypeBasedOnTableAndColumnName('component', 'specialNote'), 'component',  \n" +
                "				 OLD.createdBy,  			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "				OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.heightText,\"\") != IFNULL(NEW.heightText,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Height - Seated (Max)',  \n" +
                "			CAST(OLD.heightText AS CHAR),	CAST(NEW.heightText AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','heightText'));  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.partStatus,\"\") != IFNULL(NEW.partStatus,\"\") THEN  \n" +
                "		IF OLD.partStatus IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`name`, '') INTO `pOldValue`  \n" +
                "			FROM component_partstatusmst  \n" +
                "			WHERE id = OLD.partStatus  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "		IF NEW.partStatus IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`name`, '') INTO `pNewValue`  \n" +
                "			FROM component_partstatusmst  \n" +
                "			WHERE id = NEW.partStatus  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Part Status',  \n" +
                "			pOldValue,			pNewValue,	 		OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'varchar');  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.partStatusText,\"\") != IFNULL(NEW.partStatusText,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Status (External)',  \n" +
                "			CAST(OLD.partStatusText AS CHAR),	CAST(NEW.partStatusText AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','partStatusText'));  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.isPIDManual,\"\") != IFNULL(NEW.isPIDManual,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'PID Manual',  \n" +
                "			CAST(OLD.isPIDManual AS CHAR),	CAST(NEW.isPIDManual AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','isPIDManual'));  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.feature,\"\") != IFNULL(NEW.feature,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Feature',  \n" +
                "			CAST(OLD.feature AS CHAR),	CAST(NEW.feature AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','feature'));  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.functionalCategoryText,\"\") != IFNULL(NEW.functionalCategoryText,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Functional Type (External)',  \n" +
                "			CAST(OLD.functionalCategoryText AS CHAR),	CAST(NEW.functionalCategoryText AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','functionalCategoryText'));  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.mountingTypeText,\"\") != IFNULL(NEW.mountingTypeText,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Mounting Type (External)',  \n" +
                "			CAST(OLD.mountingTypeText AS CHAR),	CAST(NEW.mountingTypeText AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','mountingTypeText'));  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.maxPriceLimit,\"\") != IFNULL(NEW.maxPriceLimit,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Max. Price Limit',  \n" +
                "			CAST(OLD.maxPriceLimit AS CHAR),	CAST(NEW.maxPriceLimit AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'amount');  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.selfLifeDays,\"\") != IFNULL(NEW.selfLifeDays,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Self Life Days',  \n" +
                "			CAST(OLD.selfLifeDays AS CHAR),	CAST(NEW.selfLifeDays AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','selfLifeDays'));  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.isCustom,\"\") != IFNULL(NEW.isCustom,\"\") THEN  \n" +
                "		IF OLD.isCustom IS NOT NULL THEN  \n" +
                "			SET pOldValue = CASE WHEN OLD.isCustom = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN OLD.isCustom = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "		IF NEW.isCustom IS NOT NULL THEN  \n" +
                "			SET pNewValue = CASE WHEN NEW.isCustom = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN NEW.isCustom = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Custom MFG Part',  \n" +
                "			pOldValue,			pNewValue,	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'varchar');  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.rev,\"\") != IFNULL(NEW.rev,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Rev',  \n" +
                "			CAST(OLD.rev AS CHAR),		CAST(NEW.rev AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','rev'));  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.mslID,\"\") != IFNULL(NEW.mslID,\"\") THEN  \n" +
                "		IF OLD.mslID IS NOT NULL THEN  \n" +
                "			SELECT CONCAT(levelRating,\" - \", IFNULL(`time`, '')) INTO `pOldValue`  \n" +
                "			FROM component_mslmst  \n" +
                "			WHERE id =OLD.mslID  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "		IF NEW.mslID IS NOT NULL THEN  \n" +
                "			SELECT CONCAT(levelRating,\" - \", IFNULL(`time`, '')) INTO `pNewValue`  \n" +
                "			FROM component_mslmst  \n" +
                "			WHERE id =NEW.mslID  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'MSL',  \n" +
                "			pOldValue,			pNewValue,	 		OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'varchar');  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.connecterTypeID,\"\") != IFNULL(NEW.connecterTypeID,\"\") THEN  \n" +
                "		IF OLD.connecterTypeID IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`name`, '') INTO `pOldValue`  \n" +
                "			FROM rfq_connectertypemst  \n" +
                "			WHERE id =OLD.connecterTypeID  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "		IF NEW.connecterTypeID IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`name`, '') INTO `pNewValue`  \n" +
                "			FROM rfq_connectertypemst  \n" +
                "			WHERE id =NEW.connecterTypeID  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Connector Type',  \n" +
                "			pOldValue,			pNewValue,	 		OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'varchar');  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.connectorTypeText,\"\") != IFNULL(NEW.connectorTypeText,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Connector Type (External)',  \n" +
                "			CAST(OLD.connectorTypeText AS CHAR),		CAST(NEW.connectorTypeText AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','connectorTypeText'));  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.costCategoryID,\"\") != IFNULL(NEW.costCategoryID,\"\") THEN  \n" +
                "		IF OLD.costCategoryID IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`categoryName`, '') INTO `pOldValue`  \n" +
                "			FROM cost_category  \n" +
                "			WHERE id =OLD.costCategoryID  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "		IF NEW.costCategoryID IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`categoryName`, '') INTO `pNewValue`  \n" +
                "			FROM cost_category  \n" +
                "			WHERE id =NEW.costCategoryID  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Cost Category',  \n" +
                "			pOldValue,			pNewValue,	 		OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'varchar');  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.maxQtyonHand,\"\") != IFNULL(NEW.maxQtyonHand,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Max. Qty on Hand',  \n" +
                "			CAST(OLD.maxQtyonHand AS CHAR),		CAST(NEW.maxQtyonHand AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                       'sixdigitunitprice');  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.noOfRows,\"\") != IFNULL(NEW.noOfRows,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'No Of Rows',  \n" +
                "			CAST(OLD.noOfRows AS CHAR),		CAST(NEW.noOfRows AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','noOfRows'));  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.bookValue,\"\") != IFNULL(NEW.bookValue,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Book Value',  \n" +
                "			CAST(OLD.bookValue AS CHAR),		CAST(NEW.bookValue AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','bookValue'));  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.voltage,\"\") != IFNULL(NEW.voltage,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Voltage',  \n" +
                "			CAST(OLD.voltage AS CHAR),		CAST(NEW.voltage AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','voltage'));  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.operatingTemp,\"\") != IFNULL(NEW.operatingTemp,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Operating Temperature',  \n" +
                "			CAST(OLD.operatingTemp AS CHAR), CAST(NEW.operatingTemp AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','operatingTemp'));  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.powerRating,\"\") != IFNULL(NEW.powerRating,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Power (Watts)',  \n" +
                "			CAST(OLD.powerRating AS CHAR), CAST(NEW.powerRating AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','powerRating'));  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.pitch,\"\") != IFNULL(NEW.pitch,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Pitch (Unit in mm)',  \n" +
                "			CAST(OLD.pitch AS CHAR), 	CAST(NEW.pitch AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','pitch'));  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.pitchMating,\"\") != IFNULL(NEW.pitchMating,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Pitch Mating(Unit in mm)',  \n" +
                "			CAST(OLD.pitchMating AS CHAR), 	CAST(NEW.pitchMating AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','pitchMating'));  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.plannedOverRunPercentagePerBuild,\"\") != IFNULL(NEW.plannedOverRunPercentagePerBuild,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Planned Overrun (Per Build) (%)',  \n" +
                "			CAST(OLD.plannedOverRunPercentagePerBuild AS CHAR), 	CAST(NEW.plannedOverRunPercentagePerBuild AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'percentage');  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.nickName,\"\") != IFNULL(NEW.nickName,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Nickname',  \n" +
                "			CAST(OLD.nickName AS CHAR), 	CAST(NEW.nickName AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','nickName'));  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.bomLock,\"\") != IFNULL(NEW.bomLock,\"\") THEN  \n" +
                "		IF OLD.bomLock IS NOT NULL THEN  \n" +
                "			SET pOldValue = CASE WHEN OLD.bomLock = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN OLD.bomLock = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "		IF NEW.bomLock IS NOT NULL THEN  \n" +
                "			SET pNewValue = CASE WHEN NEW.bomLock = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN NEW.bomLock = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Lock BOM',  \n" +
                "			pOldValue, 				pNewValue,	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'varchar');  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.restrictUSEwithpermission,\"\") != IFNULL(NEW.restrictUSEwithpermission,\"\") THEN  \n" +
                "		IF OLD.restrictUSEwithpermission IS NOT NULL THEN  \n" +
                "			SET pOldValue = CASE WHEN OLD.restrictUSEwithpermission = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN OLD.restrictUSEwithpermission = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "		IF NEW.restrictUSEwithpermission IS NOT NULL THEN  \n" +
                "			SET pNewValue = CASE WHEN NEW.restrictUSEwithpermission = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN NEW.restrictUSEwithpermission = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Restrict Use Including Packaging Alias (With Permission)',  \n" +
                "			pOldValue, 			pNewValue,	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                       'varchar');  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.sizeDimension,\"\") != IFNULL(NEW.sizeDimension,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Size/Dimension',  \n" +
                "			CAST(OLD.sizeDimension AS CHAR), 	CAST(NEW.sizeDimension AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','sizeDimension'));  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.plannedValuePerBuild,\"\") != IFNULL(NEW.plannedValuePerBuild,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Planned Overrun (Per Build)',  \n" +
                "			CAST(OLD.plannedValuePerBuild AS CHAR), 	CAST(NEW.plannedValuePerBuild AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','plannedValuePerBuild'));  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.scrapValuePerBuild,\"\") != IFNULL(NEW.scrapValuePerBuild,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Scrap Rate (Per Build)',  \n" +
                "			CAST(OLD.scrapValuePerBuild AS CHAR), 	CAST(NEW.scrapValuePerBuild AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','scrapValuePerBuild'));  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.scrapRatePercentagePerBuild,\"\") != IFNULL(NEW.scrapRatePercentagePerBuild,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Scrap Rate (Per Build) (%)',  \n" +
                "			CAST(OLD.scrapRatePercentagePerBuild AS CHAR), 	CAST(NEW.scrapRatePercentagePerBuild AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'percentage');  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.restrictUsePermanently,\"\") != IFNULL(NEW.restrictUsePermanently,\"\") THEN  \n" +
                "		IF OLD.restrictUsePermanently IS NOT NULL THEN  \n" +
                "			SET pOldValue = CASE WHEN OLD.restrictUsePermanently = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN OLD.restrictUsePermanently = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "		IF NEW.restrictUsePermanently IS NOT NULL THEN  \n" +
                "			SET pNewValue = CASE WHEN NEW.restrictUsePermanently = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN NEW.restrictUsePermanently = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,			'component',			'Restrict Use Including Packaging Alias (Permanently)',  \n" +
                "			pOldValue, 				pNewValue,	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'varchar');  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.customerID,\"\") != IFNULL(NEW.customerID,\"\") THEN  \n" +
                "		IF OLD.customerID IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`mfgCode`, '') INTO `pOldValue`  \n" +
                "			FROM mfgcodemst  \n" +
                "			WHERE id =OLD.customerID  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "		IF NEW.customerID IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`mfgCode`, '') INTO `pNewValue`  \n" +
                "			FROM mfgcodemst  \n" +
                "			WHERE id =NEW.customerID  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Customer',  \n" +
                "			pOldValue, 			pNewValue,	 		OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'varchar');  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.eau,\"\") != IFNULL(NEW.eau,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'EAU',  \n" +
                "			CAST(OLD.eau AS CHAR), 	CAST(NEW.eau AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','eau'));  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.assyCode,\"\") != IFNULL(NEW.assyCode,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Assy Code',  \n" +
                "			CAST(OLD.assyCode AS CHAR), 	CAST(NEW.assyCode AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','assyCode'));  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.pcbPerArray,\"\") != IFNULL(NEW.pcbPerArray,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'PCB Per Array',  \n" +
                "			CAST(OLD.pcbPerArray AS CHAR), 	CAST(NEW.pcbPerArray AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','pcbPerArray'));  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.temperatureCoefficient,\"\") != IFNULL(NEW.temperatureCoefficient,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Temperature Co-efficient',  \n" +
                "			CAST(OLD.temperatureCoefficient AS CHAR), 	CAST(NEW.temperatureCoefficient AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','temperatureCoefficient'));  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.temperatureCoefficientValue,\"\") != IFNULL(NEW.temperatureCoefficientValue,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Temperature Co-efficient Value',  \n" +
                "			CAST(OLD.temperatureCoefficientValue AS CHAR), 	CAST(NEW.temperatureCoefficientValue AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','temperatureCoefficientValue'));  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.temperatureCoefficientUnit,\"\") != IFNULL(NEW.temperatureCoefficientUnit,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Temperature Co-efficient Unit',  \n" +
                "			CAST(OLD.temperatureCoefficientUnit AS CHAR), 	CAST(NEW.temperatureCoefficientUnit AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','temperatureCoefficientUnit'));  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.isCPN,\"\") != IFNULL(NEW.isCPN,\"\") THEN  \n" +
                "		IF OLD.isCPN IS NOT NULL THEN  \n" +
                "			SET pOldValue = CASE WHEN OLD.isCPN = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN OLD.isCPN = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "		IF NEW.isCPN IS NOT NULL THEN  \n" +
                "			SET pNewValue = CASE WHEN NEW.isCPN = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN NEW.isCPN = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'CPN',  \n" +
                "			pOldValue, 			pNewValue,	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'varchar');  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.matingPartRquired,\"\") != IFNULL(NEW.matingPartRquired,\"\") THEN  \n" +
                "		IF OLD.matingPartRquired IS NOT NULL THEN  \n" +
                "			SET pOldValue = CASE WHEN OLD.matingPartRquired = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN OLD.matingPartRquired = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "		IF NEW.matingPartRquired IS NOT NULL THEN  \n" +
                "			SET pNewValue = CASE WHEN NEW.matingPartRquired = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN NEW.matingPartRquired = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Require Mating Part',  \n" +
                "			pOldValue, 			pNewValue,	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'varchar');  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.driverToolRequired,\"\") != IFNULL(NEW.driverToolRequired,\"\") THEN  \n" +
                "		IF OLD.driverToolRequired IS NOT NULL THEN  \n" +
                "			SET pOldValue = CASE WHEN OLD.driverToolRequired = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN OLD.driverToolRequired = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "		IF NEW.driverToolRequired IS NOT NULL THEN  \n" +
                "			SET pNewValue = CASE WHEN NEW.driverToolRequired = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN NEW.driverToolRequired = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Require Driver Tool',  \n" +
                "			pOldValue, 				pNewValue,	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'varchar');  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.pickupPadRequired,\"\") != IFNULL(NEW.pickupPadRequired,\"\") THEN  \n" +
                "		IF OLD.pickupPadRequired IS NOT NULL THEN  \n" +
                "			SET pOldValue = CASE WHEN OLD.pickupPadRequired = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN OLD.pickupPadRequired = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "		IF NEW.pickupPadRequired IS NOT NULL THEN  \n" +
                "			SET pNewValue = CASE WHEN NEW.pickupPadRequired = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN NEW.pickupPadRequired = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Require Pick up Pad',  \n" +
                "			pOldValue, 				pNewValue,	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'varchar');  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.programingRequired,\"\") != IFNULL(NEW.programingRequired,\"\") THEN  \n" +
                "		IF OLD.programingRequired IS NOT NULL THEN  \n" +
                "			SET pOldValue = CASE WHEN OLD.programingRequired = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN OLD.programingRequired = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "		IF NEW.programingRequired IS NOT NULL THEN  \n" +
                "			SET pNewValue = CASE WHEN NEW.programingRequired = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN NEW.programingRequired = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Require Programming',  \n" +
                "			pOldValue, 			pNewValue,	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                       'varchar');  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.functionalTestingRequired,\"\") != IFNULL(NEW.functionalTestingRequired,\"\") THEN  \n" +
                "		IF OLD.functionalTestingRequired IS NOT NULL THEN  \n" +
                "			SET pOldValue = CASE WHEN OLD.functionalTestingRequired = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN OLD.functionalTestingRequired = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "		IF NEW.functionalTestingRequired IS NOT NULL THEN  \n" +
                "			SET pNewValue = CASE WHEN NEW.functionalTestingRequired = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN NEW.functionalTestingRequired = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Require Functional Testing',  \n" +
                "			pOldValue, 				pNewValue,	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'varchar');  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.liveInternalVersion,\"\") != IFNULL(NEW.liveInternalVersion,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Live Internal Version',  \n" +
                "			CAST(OLD.liveInternalVersion AS CHAR), 	CAST(NEW.liveInternalVersion AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','liveInternalVersion'));  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.custAssyPN,\"\") != IFNULL(NEW.custAssyPN,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Part#',  \n" +
                "			CAST(OLD.custAssyPN AS CHAR), 	CAST(NEW.custAssyPN AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','custAssyPN'));  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.partType,\"\") != IFNULL(NEW.partType,\"\") THEN  \n" +
                "		IF OLD.partType IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`categoryName`, '') INTO `pOldValue`  \n" +
                "			FROM rfq_partcategory  \n" +
                "			WHERE id =OLD.partType  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "		IF NEW.partType IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`categoryName`, '') INTO `pNewValue`  \n" +
                "			FROM rfq_partcategory  \n" +
                "			WHERE id =NEW.partType  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Part Type',  \n" +
                "			pOldValue, 			pNewValue,	 		OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                      'varchar');  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.functionalTypePartRequired,\"\") != IFNULL(NEW.functionalTypePartRequired,\"\") THEN  \n" +
                "		IF OLD.functionalTypePartRequired IS NOT NULL THEN  \n" +
                "				SET pOldValue = CASE WHEN OLD.functionalTypePartRequired = 1 THEN  \n" +
                "											'Yes'  \n" +
                "									WHEN OLD.functionalTypePartRequired = 0 THEN  \n" +
                "											'No'  \n" +
                "									ELSE '' END;  \n" +
                "			END IF;  \n" +
                "		IF NEW.functionalTypePartRequired IS NOT NULL THEN  \n" +
                "			SET pNewValue = CASE WHEN NEW.functionalTypePartRequired = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN NEW.functionalTypePartRequired = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Require Functional Type Parts',  \n" +
                "			pOldValue, pNewValue,	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'varchar');  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.mountingTypePartRequired,\"\") != IFNULL(NEW.mountingTypePartRequired,\"\") THEN  \n" +
                "		IF OLD.mountingTypePartRequired IS NOT NULL THEN  \n" +
                "				SET pOldValue = CASE WHEN OLD.mountingTypePartRequired = 1 THEN  \n" +
                "											'Yes'  \n" +
                "									WHEN OLD.mountingTypePartRequired = 0 THEN  \n" +
                "											'No'  \n" +
                "									ELSE '' END;  \n" +
                "			END IF;  \n" +
                "		IF NEW.mountingTypePartRequired IS NOT NULL THEN  \n" +
                "			SET pNewValue = CASE WHEN NEW.mountingTypePartRequired = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN NEW.mountingTypePartRequired = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Require Mounting Type Parts',  \n" +
                "			pOldValue, 			pNewValue,	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'varchar');  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.shelfLifeAcceptanceDays,\"\") != IFNULL(NEW.shelfLifeAcceptanceDays,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'When receiving: Accept with permission if expires in (Days)',  \n" +
                "			CAST(OLD.shelfLifeAcceptanceDays AS CHAR), 	CAST(NEW.shelfLifeAcceptanceDays AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','shelfLifeAcceptanceDays'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.shelfListDaysThresholdPercentage,\"\") != IFNULL(NEW.shelfListDaysThresholdPercentage,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'When receiving: Accept with permission if expires in (Threshold(%))',  \n" +
                "			CAST(OLD.shelfListDaysThresholdPercentage AS CHAR), 	CAST(NEW.shelfListDaysThresholdPercentage AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'percentage');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.maxShelfLifeAcceptanceDays,\"\") != IFNULL(NEW.maxShelfLifeAcceptanceDays,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'When Receiving: Reject if expires in (Days)',  \n" +
                "			CAST(OLD.maxShelfLifeAcceptanceDays AS CHAR), 	CAST(NEW.maxShelfLifeAcceptanceDays AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','maxShelfLifeAcceptanceDays'));  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.maxShelfListDaysThresholdPercentage,\"\") != IFNULL(NEW.maxShelfListDaysThresholdPercentage,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'When Receiving: Reject if expires in (Threshold(%))',  \n" +
                "			CAST(OLD.maxShelfListDaysThresholdPercentage AS CHAR), 	CAST(NEW.maxShelfListDaysThresholdPercentage AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'percentage');  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.shelfLifeDateType,\"\") != IFNULL(NEW.shelfLifeDateType,\"\") THEN  \n" +
                "		SELECT (CASE WHEN (OLD.shelfLifeDateType = 'N') THEN 'None'  \n" +
                "					WHEN (OLD.shelfLifeDateType = 'M') THEN 'Date of Manufacture'  \n" +
                "                    WHEN (OLD.shelfLifeDateType = 'E') THEN 'Date of Expiration'  \n" +
                "                    ELSE '' END) INTO `pOldValue`   ;  \n" +
                "		SELECT (CASE WHEN (NEW.shelfLifeDateType = 'N') THEN 'None'  \n" +
                "					WHEN (NEW.shelfLifeDateType = 'M') THEN 'Date of Manufacture'  \n" +
                "                    WHEN (NEW.shelfLifeDateType = 'E') THEN 'Date of Expiration'  \n" +
                "                    ELSE '' END) INTO `pNewValue`   ;  \n" +
                "		INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Shelf Life Date Typ',  \n" +
                "			pOldValue, 	pNewValue,	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'varchar');  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.color,\"\") != IFNULL(NEW.color,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Color',  \n" +
                "			CAST(OLD.color AS CHAR), 	CAST(NEW.color AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','color'));  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.refSupplierMfgpnComponentID,\"\") != IFNULL(NEW.refSupplierMfgpnComponentID,\"\") THEN  \n" +
                "		IF OLD.partType IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`mfgPN`, '') INTO `pOldValue`  \n" +
                "				FROM component  \n" +
                "			WHERE id =OLD.refSupplierMfgpnComponentID  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "		IF NEW.partType IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`mfgPN`, '') INTO `pNewValue`  \n" +
                "				FROM component  \n" +
                "			WHERE id = NEW.refSupplierMfgpnComponentID  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'MFR PN',  \n" +
                "			pOldValue, 			pNewValue,	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'varchar');  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.imageURL,\"\") != IFNULL(NEW.imageURL,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Image URL',  \n" +
                "			CAST(OLD.imageURL AS CHAR), 	CAST(NEW.imageURL AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','imageURL'));  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.businessRisk,\"\") != IFNULL(NEW.businessRisk,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Business Risk',  \n" +
                "			CAST(OLD.businessRisk AS CHAR), 	CAST(NEW.businessRisk AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','businessRisk'));  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.exteranalAPICallStatus,\"\") != IFNULL(NEW.exteranalAPICallStatus,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Exteranal API Call Status',  \n" +
                "			CAST(OLD.exteranalAPICallStatus AS CHAR), 	CAST(NEW.exteranalAPICallStatus AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','exteranalAPICallStatus'));  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.isBOMVerified,\"\") != IFNULL(NEW.isBOMVerified,\"\") THEN  \n" +
                "		IF OLD.isBOMVerified IS NOT NULL THEN  \n" +
                "				SET pOldValue = CASE WHEN OLD.isBOMVerified = 1 THEN  \n" +
                "											'Yes'  \n" +
                "									WHEN OLD.isBOMVerified = 0 THEN  \n" +
                "											'No'  \n" +
                "									ELSE '' END;  \n" +
                "			END IF;  \n" +
                "		IF NEW.isBOMVerified IS NOT NULL THEN  \n" +
                "			SET pNewValue = CASE WHEN NEW.isBOMVerified = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN NEW.isBOMVerified = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'BOM Verified',  \n" +
                "			pOldValue, 			pNewValue,	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'varchar');  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.liveVersion,\"\") != IFNULL(NEW.liveVersion,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Live Version',  \n" +
                "			CAST(OLD.liveVersion AS CHAR), 	CAST(NEW.liveVersion AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','liveVersion'));  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.packagingID,\"\") != IFNULL(NEW.packagingID,\"\") THEN  \n" +
                "		IF OLD.packagingID IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`name`, '') INTO `pOldValue`  \n" +
                "			FROM component_packagingmst  \n" +
                "			WHERE id =OLD.packagingID  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "		IF NEW.packagingID IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`name`, '') INTO `pNewValue`  \n" +
                "			FROM component_packagingmst  \n" +
                "			WHERE id =NEW.packagingID  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Packaging',  \n" +
                "			pOldValue, 			pNewValue,	 		OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'varchar');  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.isTemperatureSensitive,\"\") != IFNULL(NEW.isTemperatureSensitive,\"\") THEN  \n" +
                "		IF OLD.isTemperatureSensitive IS NOT NULL THEN  \n" +
                "			SET pOldValue = CASE WHEN OLD.isTemperatureSensitive = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN OLD.isTemperatureSensitive = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "		IF NEW.isTemperatureSensitive IS NOT NULL THEN  \n" +
                "			SET pNewValue = CASE WHEN NEW.isTemperatureSensitive = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN NEW.isTemperatureSensitive = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Temperature Sensitive Data',  \n" +
                "			pOldValue, 			pNewValue,	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'varchar');  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.unit,\"\") != IFNULL(NEW.unit,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Unit',  \n" +
                "			CAST(OLD.unit AS CHAR), 	CAST(NEW.unit AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'unitprice');  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.grossWeight,\"\") != IFNULL(NEW.grossWeight,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Unit Gross Weight',  \n" +
                "			CAST(OLD.grossWeight AS CHAR), 	CAST(NEW.grossWeight AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'unitprice');  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.packagingWeight,\"\") != IFNULL(NEW.packagingWeight,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Unit Net Weight',  \n" +
                "			CAST(OLD.packagingWeight AS CHAR), 	CAST(NEW.packagingWeight AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'unitprice');  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.epicorType,\"\") != IFNULL(NEW.epicorType,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Purchase Type',  \n" +
                "			CAST(OLD.epicorType AS CHAR), 	CAST(NEW.epicorType AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','epicorType'));  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.grossWeightUom,\"\") != IFNULL(NEW.grossWeightUom,\"\") THEN  \n" +
                "		IF OLD.grossWeightUom IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`unitName`, '') INTO `pOldValue`  \n" +
                "			FROM uoms  \n" +
                "			WHERE id =OLD.grossWeightUom  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "		IF NEW.grossWeightUom IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`unitName`, '') INTO `pNewValue`  \n" +
                "			FROM uoms  \n" +
                "			WHERE id =NEW.grossWeightUom  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Unit Gross Weight (UOM)',  \n" +
                "			CAST(pOldValue AS CHAR), 	CAST(pNewValue AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                       'varchar');  \n" +
                "	END IF;  \n" +
                "     IF IFNULL(OLD.packagingWeightUom,\"\") != IFNULL(NEW.packagingWeightUom,\"\") THEN  \n" +
                "		IF OLD.packagingWeightUom IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`unitName`, '') INTO `pOldValue`  \n" +
                "			FROM uoms  \n" +
                "			WHERE id =OLD.packagingWeightUom  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "		IF NEW.packagingWeightUom IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`unitName`, '') INTO `pNewValue`  \n" +
                "			FROM uoms  \n" +
                "			WHERE id =NEW.packagingWeightUom  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Unit Net Weight (UOM)',  \n" +
                "			CAST(pOldValue AS CHAR), 	CAST(pNewValue AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'varchar');  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.price,\"\") != IFNULL(NEW.price,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Tentative Price Ea($)',  \n" +
                "			CAST(OLD.price AS CHAR),	CAST(NEW.price AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'amout');  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.noOfPositionText,\"\") != IFNULL(NEW.noOfPositionText,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Pin Count (External)',  \n" +
                "			OLD.noOfPositionText,	NEW.noOfPositionText,	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','noOfPositionText'));  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.uomClassID,\"\") != IFNULL(NEW.uomClassID,\"\") THEN  \n" +
                "		IF OLD.uomClassID IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`name`, '') INTO `pOldValue`  \n" +
                "			FROM measurement_types  \n" +
                "			WHERE id =OLD.uomClassID  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "		IF NEW.uomClassID IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`name`, '') INTO `pNewValue`  \n" +
                "			FROM measurement_types  \n" +
                "			WHERE id =NEW.uomClassID  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'UOM Class',  \n" +
                "			pOldValue,			pNewValue,	 		OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'varchar');  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.noOfRowsText,\"\") != IFNULL(NEW.noOfRowsText,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,        tableName,          Colname,  \n" +
                "			Oldval, 				Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,			'component',		'No. of Rows (External)',  \n" +
                "			OLD.noOfRowsText,		NEW.noOfRowsText,	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,		NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','noOfRowsText'));  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.rohsDeviation,\"\") != IFNULL(NEW.rohsDeviation,\"\") THEN  \n" +
                "		IF OLD.rohsDeviation IS NOT NULL THEN  \n" +
                "			SET pOldValue = CASE WHEN OLD.rohsDeviation = -1 THEN  \n" +
                "										'No'  \n" +
                "								WHEN OLD.rohsDeviation = -2 THEN  \n" +
                "										'With Approval'  \n" +
                "								WHEN OLD.rohsDeviation = -3 THEN  \n" +
                "										'Yes'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "		IF NEW.rohsDeviation IS NOT NULL THEN  \n" +
                "			SET pNewValue = CASE WHEN NEW.rohsDeviation = -1 THEN  \n" +
                "										'No'  \n" +
                "								WHEN NEW.rohsDeviation = -2 THEN  \n" +
                "										'With Approval'  \n" +
                "								WHEN NEW.rohsDeviation = -3 THEN  \n" +
                "										'Yes'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,        tableName,          Colname,  \n" +
                "			Oldval, 				Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,			'component',		'RoHS Deviation',  \n" +
                "			pOldValue,				pNewValue,			OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,		NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'varchar');  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.alertExpiryDays,\"\") != IFNULL(NEW.alertExpiryDays,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Alert Days before Expiry Date',  \n" +
                "			CAST(OLD.alertExpiryDays AS CHAR),	CAST(NEW.alertExpiryDays AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','alertExpiryDays'));  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.umidVerificationRequire,\"\") != IFNULL(NEW.umidVerificationRequire,\"\") THEN  \n" +
                "		IF OLD.umidVerificationRequire IS NOT NULL THEN  \n" +
                "			SET pOldValue = CASE WHEN OLD.umidVerificationRequire = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN OLD.umidVerificationRequire = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "		IF NEW.umidVerificationRequire IS NOT NULL THEN  \n" +
                "			SET pNewValue = CASE WHEN NEW.umidVerificationRequire = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN NEW.umidVerificationRequire = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 				Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,			'component',		'Require Supervisor Approval (Before Use)',  \n" +
                "			pOldValue,				pNewValue,	 		OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,		NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'varchar');  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.totalSolderPoints,\"\") != IFNULL(NEW.totalSolderPoints,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 				Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Total Solder Points',  \n" +
                "			CAST(OLD.totalSolderPoints AS CHAR),	CAST(NEW.totalSolderPoints AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','totalSolderPoints'));  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.trackSerialNumber,\"\") != IFNULL(NEW.trackSerialNumber,\"\") THEN  \n" +
                "		IF OLD.trackSerialNumber IS NOT NULL THEN  \n" +
                "			SET pOldValue = CASE WHEN OLD.trackSerialNumber = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN OLD.trackSerialNumber = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "		IF NEW.trackSerialNumber IS NOT NULL THEN  \n" +
                "			SET pNewValue = CASE WHEN NEW.trackSerialNumber = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN NEW.trackSerialNumber = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 				Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,			'component',		'Track Serial Numbers',  \n" +
                "			pOldValue,				pNewValue,	 		OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,		NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'varchar');  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.restrictPackagingUsePermanently,\"\") != IFNULL(NEW.restrictPackagingUsePermanently,\"\") THEN  \n" +
                "		IF OLD.restrictPackagingUsePermanently IS NOT NULL THEN  \n" +
                "			SET pOldValue = CASE WHEN OLD.restrictPackagingUsePermanently = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN OLD.restrictPackagingUsePermanently = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "		IF NEW.restrictPackagingUsePermanently IS NOT NULL THEN  \n" +
                "			SET pNewValue = CASE WHEN NEW.restrictPackagingUsePermanently = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN NEW.restrictPackagingUsePermanently = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 				Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,			'component',		'Restrict Use excluding Packaging Alias (Permanently)',  \n" +
                "			pOldValue,				pNewValue,	 		OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,		NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'varchar');  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.restrictPackagingUseWithpermission,\"\") != IFNULL(NEW.restrictPackagingUseWithpermission,\"\") THEN  \n" +
                "		IF OLD.restrictPackagingUseWithpermission IS NOT NULL THEN  \n" +
                "			SET pOldValue = CASE WHEN OLD.restrictPackagingUseWithpermission = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN OLD.restrictPackagingUseWithpermission = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "		IF NEW.restrictPackagingUseWithpermission IS NOT NULL THEN  \n" +
                "			SET pNewValue = CASE WHEN NEW.restrictPackagingUseWithpermission = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN NEW.restrictPackagingUseWithpermission = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 				Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,			'component',		'Restrict Use excluding Packaging Alias (With Permission)',  \n" +
                "			pOldValue,				pNewValue,	 		OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,		NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'varchar');  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.rfqOnly,\"\") != IFNULL(NEW.rfqOnly,\"\") THEN  \n" +
                "		IF OLD.rfqOnly IS NOT NULL THEN  \n" +
                "			SET pOldValue = CASE WHEN OLD.rfqOnly = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN OLD.rfqOnly = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "		IF NEW.rfqOnly IS NOT NULL THEN  \n" +
                "			SET pNewValue = CASE WHEN NEW.rfqOnly = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN NEW.rfqOnly = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 				Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,			'component',		'RFQ Only',  \n" +
                "			pOldValue,				pNewValue,	 		OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,		NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'varchar');  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.isCloudApiUpdateAttribute,\"\") != IFNULL(NEW.isCloudApiUpdateAttribute,\"\") THEN  \n" +
                "		IF OLD.isCloudApiUpdateAttribute IS NOT NULL THEN  \n" +
                "			SET pOldValue = CASE WHEN OLD.isCloudApiUpdateAttribute = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN OLD.isCloudApiUpdateAttribute = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "		IF NEW.isCloudApiUpdateAttribute IS NOT NULL THEN  \n" +
                "			SET pNewValue = CASE WHEN NEW.isCloudApiUpdateAttribute = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN NEW.isCloudApiUpdateAttribute = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 				Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,			'component',		'Cloud API update',  \n" +
                "			pOldValue,				pNewValue,	 		OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,		NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'varchar');  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.isAutoVerificationOfAllAssemblyParts,\"\") != IFNULL(NEW.isAutoVerificationOfAllAssemblyParts,\"\") THEN  \n" +
                "		IF OLD.isAutoVerificationOfAllAssemblyParts IS NOT NULL THEN  \n" +
                "			SET pOldValue = CASE WHEN OLD.isAutoVerificationOfAllAssemblyParts = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN OLD.isAutoVerificationOfAllAssemblyParts = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "		IF NEW.isAutoVerificationOfAllAssemblyParts IS NOT NULL THEN  \n" +
                "			SET pNewValue = CASE WHEN NEW.isAutoVerificationOfAllAssemblyParts = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN NEW.isAutoVerificationOfAllAssemblyParts = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 				Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,			'component',		'Bypass Machine Setup Verification (Only for Assembly)',  \n" +
                "			pOldValue,				pNewValue,	 		OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,		NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'varchar');  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.purchasingComment,\"\") != IFNULL(NEW.purchasingComment,\"\") THEN  \n" +
                "		INSERT INTO common_longtext_history  \n" +
                "			(refTransId,				Colname,				Oldval,  \n" +
                "			 Newval,					valueDataType,				Tablename,  \n" +
                "			 createdBy,  				createdAt,  			updatedAt, 			Updatedby,  \n" +
                "			createByRoleId,		updateByRoleId )  \n" +
                "		 VALUES(NEW.id,					'MISC Comment',			CAST(OLD.purchasingComment AS CHAR),  \n" +
                "				 CAST(NEW.purchasingComment AS CHAR),	 	fun_getDataTypeBasedOnTableAndColumnName('component', 'purchasingComment'), 'component',  \n" +
                "				 OLD.createdBy,  			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "				OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.predictedObsolescenceYear,\"\") != IFNULL(NEW.predictedObsolescenceYear,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Predicted Obsolescence Year',  \n" +
                "			CAST(OLD.predictedObsolescenceYear AS CHAR),	CAST(NEW.predictedObsolescenceYear AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','predictedObsolescenceYear'));  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.requiredTestTime,\"\") != IFNULL(NEW.requiredTestTime,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Functional Testing Time',  \n" +
                "			CAST(OLD.requiredTestTime AS CHAR),	CAST(NEW.requiredTestTime AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','requiredTestTime'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "    IF IFNULL(OLD.detailDescription,\"\") != IFNULL(NEW.detailDescription,\"\") THEN  \n" +
                "     INSERT INTO common_longtext_history  \n" +
                "		(refTransId,				Colname,				Oldval,  \n" +
                "		 Newval,					valueDataType,				Tablename,  \n" +
                "         createdBy,  				createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId )  \n" +
                "	 VALUES(NEW.id,					'Detailed Description',			CAST(OLD.detailDescription AS CHAR),  \n" +
                "			 CAST(NEW.detailDescription AS CHAR),	 	fun_getDataTypeBasedOnTableAndColumnName('component', 'detailDescription'), 'component',  \n" +
                "			 OLD.createdBy,  			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "			OLD.createByRoleId,		NEW.updateByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.obsoleteDate,\"\") != IFNULL(NEW.obsoleteDate,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Obsolete Date',  \n" +
                "			CAST(DATE(OLD.obsoleteDate) AS CHAR),	CAST(DATE(NEW.obsoleteDate) AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','obsoleteDate'));  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.mfrNameText,\"\") != IFNULL(NEW.mfrNameText,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'MFR (External)',  \n" +
                "			CAST(OLD.mfrNameText AS CHAR),	CAST(NEW.mfrNameText AS CHAR),	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','mfrNameText'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.assemblyType,0) != IFNULL(NEW.assemblyType,0) THEN  \n" +
                "		IF OLD.assemblyType IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`name`, '') INTO `pOldValue`  \n" +
                "			FROM rfq_assy_typemst  \n" +
                "			WHERE id =OLD.assemblyType  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "		IF NEW.assemblyType IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`name`, '') INTO `pNewValue`  \n" +
                "			FROM rfq_assy_typemst  \n" +
                "			WHERE id =NEW.assemblyType  \n" +
                "			ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "       INSERT INTO Component_History  \n" +
                "		(refComponentID,                tableName,                 	Colname,  \n" +
                "		Oldval, 			Newval, 			createdBy,  \n" +
                "		createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "       VALUES(NEW.id,				'component',			'Assy Type',  \n" +
                "		pOldValue,			pNewValue,	 		OLD.createdBy,  \n" +
                "		OLD.createdAt,			NEW.updatedAt,			NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'varchar');  \n" +
                "	END IF;  \n" +
                "    IF ((OLD.isWaterSoluble != NEW.isWaterSoluble)  \n" +
                "			or (OLD.isNoClean != NEW.isNoClean)  \n" +
                "            or (OLD.isFluxNotApplicable != NEW.isFluxNotApplicable))  \n" +
                "    THEN  \n" +
                "		-- Create string for Old configure value for Flux Type  \n" +
                "		set pOldValue = '';  \n" +
                "        IF(OLD.isFluxNotApplicable = 1) THEN  \n" +
                "			set pOldValue = 'Not Applicable';  \n" +
                "		END IF;  \n" +
                "        IF(OLD.isNoClean = 1) THEN  \n" +
                "			set pOldValue = concat((CASE WHEN (pOldValue != '') THEN concat(pOldValue, ', ') ELSE '' END), 'No-Clean');  \n" +
                "		END IF;  \n" +
                "        IF(OLD.isWaterSoluble = 1) THEN  \n" +
                "			set pOldValue = concat((CASE WHEN (pOldValue != '') THEN concat(pOldValue, ', ') ELSE '' END), 'Water Soluble');  \n" +
                "		END IF;  \n" +
                "  \n" +
                "        -- Create string for New configure value for Flux Type  \n" +
                "        set pNewValue = '';  \n" +
                "        IF(NEW.isFluxNotApplicable = 1) THEN  \n" +
                "			set pNewValue = 'Not Applicable';  \n" +
                "		END IF;  \n" +
                "        IF(NEW.isNoClean = 1) THEN  \n" +
                "			set pNewValue = concat((CASE WHEN (pNewValue != '') THEN concat(pNewValue, ', ') ELSE '' END), 'No-Clean');  \n" +
                "		END IF;  \n" +
                "        IF(NEW.isWaterSoluble = 1) THEN  \n" +
                "			set pNewValue = concat((CASE WHEN (pNewValue != '') THEN concat(pNewValue, ', ') ELSE '' END), 'Water Soluble');  \n" +
                "		END IF;  \n" +
                "  \n" +
                "       INSERT INTO Component_History  \n" +
                "		(refComponentID,                tableName,                 	Colname,  \n" +
                "		Oldval, 			Newval, 			createdBy,  \n" +
                "		createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "       VALUES(NEW.id,				'component',			'Flux Type',  \n" +
                "		pOldValue,			pNewValue,	 		OLD.createdBy,  \n" +
                "		OLD.createdAt,			NEW.updatedAt,			NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'varchar');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.isHazmatMaterial,\"\") != IFNULL(NEW.isHazmatMaterial,\"\") THEN  \n" +
                "		IF OLD.isHazmatMaterial IS NOT NULL THEN  \n" +
                "			SET pOldValue = CASE WHEN OLD.isHazmatMaterial = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN OLD.isHazmatMaterial = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "		IF NEW.isHazmatMaterial IS NOT NULL THEN  \n" +
                "			SET pNewValue = CASE WHEN NEW.isHazmatMaterial = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN NEW.isHazmatMaterial = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Hazmat Material',  \n" +
                "			pOldValue,			pNewValue,	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'varchar');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.isReceiveBulkItem,\"\") != IFNULL(NEW.isReceiveBulkItem,\"\") THEN  \n" +
                "		IF OLD.isReceiveBulkItem IS NOT NULL THEN  \n" +
                "			SET pOldValue = CASE WHEN OLD.isReceiveBulkItem = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN OLD.isReceiveBulkItem = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "		IF NEW.isReceiveBulkItem IS NOT NULL THEN  \n" +
                "			SET pNewValue = CASE WHEN NEW.isReceiveBulkItem = 1 THEN  \n" +
                "										'Yes'  \n" +
                "								WHEN NEW.isReceiveBulkItem = 0 THEN  \n" +
                "										'No'  \n" +
                "								ELSE '' END;  \n" +
                "		END IF;  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Receive as a Bulk item',  \n" +
                "			pOldValue,			pNewValue,	 	OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'varchar');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.internalReference,\"\") != IFNULL(NEW.internalReference,\"\") THEN  \n" +
                "	       INSERT INTO Component_History  \n" +
                "			(refComponentID,                tableName,                 	Colname,  \n" +
                "			Oldval, 			Newval, 			createdBy,  \n" +
                "			createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "	       VALUES(NEW.id,				'component',			'Internal Ref#',  \n" +
                "			CAST(OLD.internalReference AS CHAR),	CAST(NEW.internalReference AS CHAR),	 OLD.createdBy,  \n" +
                "			OLD.createdAt,			NEW.updatedAt,			 NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        fun_getDataTypeBasedOnTableAndColumnName('component','internalReference'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.purchaseacctId,\"\") != IFNULL(NEW.purchaseacctId,\"\") THEN  \n" +
                "		IF OLD.purchaseacctId IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`acct_name`, '') INTO `pOldValue`  \n" +
                "			FROM acct_acctmst  \n" +
                "			WHERE acct_id =OLD.purchaseacctId  \n" +
                "			ORDER BY acct_id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "		IF NEW.purchaseacctId IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`acct_name`, '') INTO `pNewValue`  \n" +
                "			FROM acct_acctmst  \n" +
                "			WHERE acct_id =NEW.purchaseacctId  \n" +
                "			ORDER BY acct_id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "       INSERT INTO Component_History  \n" +
                "		(refComponentID,                tableName,                 	Colname,  \n" +
                "		Oldval, 			Newval, 			createdBy,  \n" +
                "		createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "       VALUES(NEW.id,				'component',			'Purchase COA',  \n" +
                "		pOldValue,			pNewValue,	 		OLD.createdBy,  \n" +
                "		OLD.createdAt,			NEW.updatedAt,			NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'varchar');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.salesacctId,\"\") != IFNULL(NEW.salesacctId,\"\") THEN  \n" +
                "		IF OLD.salesacctId IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`acct_name`, '') INTO `pOldValue`  \n" +
                "			FROM acct_acctmst  \n" +
                "			WHERE acct_id =OLD.salesacctId  \n" +
                "			ORDER BY acct_id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "		IF NEW.salesacctId IS NOT NULL THEN  \n" +
                "			SELECT IFNULL(`acct_name`, '') INTO `pNewValue`  \n" +
                "			FROM acct_acctmst  \n" +
                "			WHERE acct_id =NEW.salesacctId  \n" +
                "			ORDER BY acct_id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "       INSERT INTO Component_History  \n" +
                "		(refComponentID,                tableName,                 	Colname,  \n" +
                "		Oldval, 			Newval, 			createdBy,  \n" +
                "		createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "       VALUES(NEW.id,				'component',			'Sales COA',  \n" +
                "		pOldValue,			pNewValue,	 		OLD.createdBy,  \n" +
                "		OLD.createdAt,			NEW.updatedAt,			NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'varchar');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.frequency,\"\") != IFNULL(NEW.frequency,\"\") THEN  \n" +
                "		set pOldValue = (CASE WHEN OLD.frequency = 1 THEN \"Every\"  \n" +
                "							  WHEN OLD.frequency = 1 THEN \"First\"  \n" +
                "                              WHEN OLD.frequency = 1 THEN \"Last\"  \n" +
                "                              ELSE '' END);  \n" +
                "  \n" +
                "        set pNewValue = (CASE WHEN NEW.frequency = 1 THEN \"Every\"  \n" +
                "							  WHEN NEW.frequency = 1 THEN \"First\"  \n" +
                "                              WHEN NEW.frequency = 1 THEN \"Last\"  \n" +
                "                              ELSE '' END);  \n" +
                "  \n" +
                "       INSERT INTO Component_History  \n" +
                "		(refComponentID,                tableName,                 	Colname,  \n" +
                "		Oldval, 			Newval, 			createdBy,  \n" +
                "		createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "       VALUES(NEW.id,				'component',			'Charge Frequency',  \n" +
                "		pOldValue,			pNewValue,	 		OLD.createdBy,  \n" +
                "		OLD.createdAt,			NEW.updatedAt,			NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'varchar');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.frequencyType,\"\") != IFNULL(NEW.frequencyType,\"\") THEN  \n" +
                "		set pOldValue = (CASE WHEN OLD.frequencyType = 1 THEN \"Release\"  \n" +
                "							  WHEN OLD.frequencyType = 1 THEN \"Shipment\"  \n" +
                "                              ELSE '' END);  \n" +
                "  \n" +
                "        set pNewValue = (CASE WHEN NEW.frequencyType = 1 THEN \"Release\"  \n" +
                "							  WHEN NEW.frequencyType = 1 THEN \"Shipment\"  \n" +
                "                              ELSE '' END);  \n" +
                "  \n" +
                "       INSERT INTO Component_History  \n" +
                "		(refComponentID,                tableName,                 	Colname,  \n" +
                "		Oldval, 			Newval, 			createdBy,  \n" +
                "		createdAt,  			updatedAt, 			Updatedby,  \n" +
                "        createByRoleId,		updateByRoleId,			valueDataType)  \n" +
                "       VALUES(NEW.id,				'component',			'Charge Frequency Type',  \n" +
                "		pOldValue,			pNewValue,	 		OLD.createdBy,  \n" +
                "		OLD.createdAt,			NEW.updatedAt,			NEW.Updatedby,  \n" +
                "        OLD.createByRoleId,		NEW.updateByRoleId,                        'varchar');  \n" +
                "	END IF;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version ->  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1308,'1.00','V1','Bug 41298: [Main Branch] Part History showing incorrect Modified By name - SHUBHAM '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1308:
            allDbChangesArray.push(
                /* **************************** New Script -> 14-02-2022  *********************************** */
                "DROP procedure IF EXISTS `Sproc_GetComponentHistory`;  \n" +
                "CREATE PROCEDURE `Sproc_GetComponentHistory`(  \n" +
                "	IN pPartID INT,  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383)  \n" +
                "	)  \n" +
                "BEGIN  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255);  \n" +
                "	DECLARE vDateTimeDisplayFormat VARCHAR(100);  \n" +
                "	DECLARE vTimeZone VARCHAR(50);  \n" +
                "	SELECT fun_getTimeZone() INTO vTimeZone;  \n" +
                "	SELECT fun_getDateTimeFormat() INTO vDateTimeDisplayFormat;  \n" +
                "  \n" +
                "	SET @temp_Sproc_GetComponentHistory = CONCAT(\"  \n" +
                "    select a.*,  \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(a.updatedAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') createdAtValue,  \n" +
                "                fun_getRoleByID(a.updateByRoleId) updatedbyRoleValue  \n" +
                "		from  \n" +
                "        (SELECT h.id,  			h.Colname,  			h.Oldval,  \n" +
                "			h.Newval,  			fun_getUserNameByID(h.updatedBy) ModifiedUser,  \n" +
                "			h.updatedAt,		h.valueDataType,				h.updateByRoleId  \n" +
                "	FROM component_history h  \n" +
                "	WHERE h.refComponentID = \",pPartID,  \n" +
                "    \" union all  \n" +
                "					SELECT h.id,  						h.Colname,  						h.Oldval,  \n" +
                "						h.Newval,  						fun_getUserNameByID(h.updatedBy) AS ModifiedUser,  \n" +
                "						h.updatedAt,                          h.valueDataType,				h.updateByRoleId  \n" +
                "					FROM common_longtext_history h  \n" +
                "					WHERE h.tablename = 'component'  \n" +
                "					and h.refTransId = \",pPartID,\" ) as a\");  \n" +
                "  \n" +
                "	IF (pOrderBy IS NOT NULL) THEN  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy);  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = \"ORDER BY updatedAt DESC\";  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = '1=1';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset);  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	 /* to get total count of rows */  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_GetComponentHistory,\" ) c where 1=1 and \", pWhereClause);  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"select * from ( \", @temp_Sproc_GetComponentHistory,\" ) c  \n" +
                "		where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "	PREPARE query1 FROM @SQLStatement2;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "	SELECT co.id,  \n" +
                "			fun_getUserNameByID(co.createdBy) createdbyValue,  \n" +
                "			fun_getRoleByID(co.createByRoleId) createdbyRoleValue,  \n" +
                "			fun_ApplyCommonDateTimeFormatByParaValue(co.createdAt,vTimeZone, vDateTimeDisplayFormat) createdAtValue,  \n" +
                "            m.mfgType  \n" +
                "	FROM component co  \n" +
                "    join mfgcodemst m ON m.id = co.mfgcodeID  \n" +
                "	WHERE co.id = pPartID;  \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version ->  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1309,'1.00','V1',' Bug 41298: [Main Branch] Part History showing incorrect Modified By name - SHUBHAM '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1309:
            allDbChangesArray.push(
                /* **************************** New Script -> 14-02-2022  *********************************** */
                "ALTER VIEW `vu_customer_packing_slip_qty` AS  \n" +
                "SELECT  \n" +
                "  `a`.`soNumbers`                  AS `soNumbers`,  \n" +
                "  `a`.`poQty`                      AS `poQty`,  \n" +
                "  `a`.`partID`                     AS `partID`,  \n" +
                "  `a`.`assyID`                     AS `assyID`,  \n" +
                "  `a`.`mfgPN`                      AS `mfgPN`,  \n" +
                "  `a`.`rohsIcon`                   AS `rohsIcon`,  \n" +
                "  `a`.`rohsName`                   AS `rohsName`,  \n" +
                "  `a`.`woID`                       AS `woID`,  \n" +
                "  `a`.`woNumber`                   AS `woNumber`,  \n" +
                "  `a`.`opStock`                    AS `opStock`,  \n" +
                "  `FUN_GETLASTWOOPIDBYWONUMBER`(  \n" +
                "`a`.`woNumber`)  AS `lastWOOPID`,  \n" +
                "  `a`.`availableQty`               AS `availableQty`,  \n" +
                "  `a`.`availableQtyWithUMIDStock`  AS `availableQtyWithUMIDStock`,  \n" +
                "  `a`.`availableQty`               AS `actualAvalilableQty`,  \n" +
                "  NULL                             AS `selectedQty`,  \n" +
                "  `a`.`totalUMIDCount`             AS `totalUMIDCount`,  \n" +
                "  `a`.`totalUMIDCountAfterShipped` AS `totalUMIDCountAfterShipped`,  \n" +
                "  `a`.`departmentName`             AS `departmentName`,  \n" +
                "  `a`.`stockType`                  AS `stockType`,  \n" +
                "  `a`.`stockTypeName`              AS `stockTypeName`,  \n" +
                "  `a`.`poNumbers`                  AS `poNumbers`,  \n" +
                "  `a`.`warehouseName`              AS `warehouseName`,  \n" +
                "  `a`.`binName`                    AS `binName`,  \n" +
                "  `a`.`binID`                      AS `binID`  \n" +
                "FROM (SELECT  \n" +
                "        (SUM(`atk`.`openingStock`) - (IFNULL(`css`.`pkgQty`,0) + (SELECT IFNULL(SUM(`ss`.`shippedqty`),0) FROM `shippedassembly` `ss` WHERE ((`ss`.`isDeleted` = 0) AND (`ss`.`woNumber` = `atk`.`woNumber`) AND (`ss`.`partID` = `atk`.`partID`) AND (`ss`.`stockType` = 'US'))))) AS `opStock`,  \n" +
                "        `atk`.`partID`                    AS `partID`,  \n" +
                "        `atk`.`woID`                      AS `woID`,  \n" +
                "        `atk`.`woNumber`                  AS `woNumber`,  \n" +
                "        MAX((CASE WHEN (`atk`.`type` = 'AS') THEN 'Adjustment Stock' WHEN (`atk`.`type` = 'WS') THEN 'Work Order Stock' WHEN (`atk`.`type` = 'OS') THEN 'Initial Stock' ELSE '' END)) AS `stockTypeName`,  \n" +
                "        MAX(`atk`.`type`)                 AS `stockType`,  \n" +
                "        `FUN_GETASSYPIDCODEBYID`(  \n" +
                "`atk`.`partID`)  AS `assyID`,  \n" +
                "        `FUN_GETROHSICONBYPARTID`(  \n" +
                "`atk`.`partID`)  AS `rohsIcon`,  \n" +
                "        `FUN_GETROHSNAMEBYPARTID`(  \n" +
                "`atk`.`partID`)  AS `rohsName`,  \n" +
                "        `FUN_GETCOMPONENTNAMEBYID`(  \n" +
                "`atk`.`partID`)  AS `mfgPN`,  \n" +
                "        `FUN_GETWAREHOUSENAMEBYID`(  \n" +
                "`atk`.`whID`)  AS `warehouseName`,  \n" +
                "        `FUN_GETBINNAMEBYID`(  \n" +
                "`atk`.`binID`)  AS `binName`,  \n" +
                "        `atk`.`binID`                     AS `binID`,  \n" +
                "        IFNULL(`css`.`pkgQty`,0)          AS `totalUMIDCount`,  \n" +
                "        `FUN_GETDEPARTMENTNAMEBYBINID`(  \n" +
                "`atk`.`binID`)  AS `departmentName`,  \n" +
                "        IFNULL(`css`.`pkgQty`,0)          AS `totalUMIDCountAfterShipped`,  \n" +
                "        (SUM(`atk`.`openingStock`) - (SELECT IFNULL(SUM(`ss`.`shippedqty`),0) FROM `shippedassembly` `ss` WHERE ((`ss`.`isDeleted` = 0) AND (`ss`.`woNumber` = `atk`.`woNumber`) AND (`ss`.`partID` = `atk`.`partID`)))) AS `availableQtyWithUMIDStock`,  \n" +
                "        ((SUM(`atk`.`openingStock`) - (SELECT IFNULL(SUM(`ss`.`shippedqty`),0) FROM `shippedassembly` `ss` WHERE ((`ss`.`isDeleted` = 0) AND (`ss`.`woNumber` = `atk`.`woNumber`) AND (`ss`.`partID` = `atk`.`partID`)))) - IFNULL(`css`.`pkgQty`,0)) AS `availableQty`,  \n" +
                "        GROUP_CONCAT(DISTINCT `atk`.`poNumber` SEPARATOR ', ') AS `poNumbers`,  \n" +
                "        GROUP_CONCAT(DISTINCT `atk`.`soNumber` SEPARATOR ', ') AS `soNumbers`,  \n" +
                "        SUM(`atk`.`poQty`) AS `poQty`  \n" +
                "      FROM (`assemblystock` `atk`  \n" +
                "         LEFT JOIN (SELECT  \n" +
                "                      `css`.`woID`                       AS `woId`,  \n" +
                "                      `css`.`woNumber`                   AS `woNumber`,  \n" +
                "                      SUM(`css`.`pkgQty`)                AS `pkgQty`  \n" +
                "                    FROM `component_sid_stock` `css`  \n" +
                "                    WHERE ((`css`.`isDeleted` = 0)  \n" +
                "                           AND (`css`.`woNumber` IS NOT NULL))  \n" +
                "                    GROUP BY `css`.`woID`,`css`.`woNumber`) `css`  \n" +
                "           ON ((`css`.`woNumber` = `atk`.`woNumber`)))  \n" +
                "      WHERE (`atk`.`isDeleted` = 0)  \n" +
                "      GROUP BY `atk`.`woNumber`,`atk`.`partID`,`atk`.`woID`,`atk`.`whID`,`atk`.`binID`,`css`.`pkgQty`) `a`  \n" +
                "WHERE (`a`.`availableQty` > 0);  \n" +
                /* **************************** Add Script Version ->  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1310,'1.00','V1','View Changes vu_customer_packing_slip_qty - VS '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1310:
            allDbChangesArray.push(
                /* **************************** New Script -> 15-02-2022  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_getSalesOrderReleaseLineDetails` ;  \n" +
                "CREATE PROCEDURE `Sproc_getSalesOrderReleaseLineDetails`(  \n" +
                "IN pSalesOrderDetID  INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "          SELECT ss.shippingID,  \n" +
                "                 ss.qty,  \n" +
                "                 IFNULL(ss.unitMeaser,'EA') unitMeaser,  \n" +
                "                 ss.shippingDate,  \n" +
                "                 ss.shippingAddressID,  \n" +
                "                 ss.description,  \n" +
                "                 ss.shippingContactPersonID,  \n" +
                "                 ss.priority,  \n" +
                "                 ss.packingSlipNo,  \n" +
                "                 ss.invoiceNo,  \n" +
                "                 ss.releaseNotes,  \n" +
                "                 ss.releaseNumber,  \n" +
                "                 ss.requestedDockDate,  \n" +
                "                 ss.carrierID,  \n" +
                "                 ss.carrierAccountNumber,  \n" +
                "                 ss.promisedShipDate,  \n" +
                "                 ss.shippingMethodID,  \n" +
                "                 ss.revisedRequestedDockDate,  \n" +
                "                 ss.revisedRequestedShipDate,  \n" +
                "                 ss.revisedRequestedPromisedDate,  \n" +
                "                 ss.isAgreeToShip,  \n" +
                "                 bsm.id AS futurePOID,  \n" +
                "                 bsm.poNumber AS futurePONumber,  \n" +
                "                 1 AS isShippingDateConfirm,  \n" +
                "                 1 AS isrequestedDockDateConfirm,  \n" +
                "                 1 AS promisedShipDateConfirm,  \n" +
                "                 1 AS isRevisedShippingDateConfirm,  \n" +
                "                 1 AS isrevisedRequestedDockDateConfirm,  \n" +
                "                 1 AS revisedPromisedShipDateConfirm,  \n" +
                "                 ss.customerReleaseLine,  \n" +
                "                 CASE WHEN shp.shippedQty IS NULL OR shp.shippedQty=0 THEN sbp.blanketPOShipQty ELSE shp.shippedQty END shippedQty,  \n" +
                "                 ss.isReadyToShip,  \n" +
                "                 ss.poReleaseNumber  \n" +
                "                 FROM salesshippingmst ss  LEFT JOIN (  \n" +
                "                                      SELECT SUM(cpd.shipQty) shippedQty,cpd.shippingId FROM customer_packingslip_det cpd  \n" +
                "                                      JOIN customer_packingslip cp ON cp.id=cpd.refCustPackingSlipID WHERE  cp.transType='P' AND cpd.isdeleted=0  \n" +
                "                                    GROUP BY cpd.shippingId ) AS shp  ON shp.shippingId=ss.shippingID  \n" +
                "                                    LEFT JOIN(  \n" +
                "                                      SELECT SUM(sd.shippedQty) AS blanketPOShipQty,sd.blanketShippingID FROM   (SELECT SUM(cpd.shipQty) shippedQty,cpd.shippingId,ssm.shippingID AS blanketShippingID FROM customer_packingslip_det cpd  \n" +
                "                                      JOIN customer_packingslip cp ON cp.id=cpd.refCustPackingSlipID  \n" +
                "                                      LEFT JOIN salesshippingmst ssm ON ssm.refShippingLineID=`cpd`.`shippingId` AND ssm.isDeleted=0  \n" +
                "                                      WHERE  cp.transType='P' AND cpd.isdeleted=0  \n" +
                "                                    GROUP BY cpd.shippingId ,ssm.shippingID)sd GROUP BY sd.blanketShippingID  \n" +
                "                                    ) AS sbp ON sbp.blanketShippingID=ss.shippingID  \n" +
                "                    LEFT JOIN salesshippingmst bss ON bss.shippingid=ss.refShippingLineID AND bss.isdeleted=0  \n" +
                "                    LEFT JOIN salesorderdet bsd ON bsd.id=bss.sDetID AND bsd.isdeleted=0  \n" +
                "                    LEFT JOIN salesordermst bsm ON bsm.id=bsd.refSalesOrderID AND bsm.isdeleted=0  \n" +
                "                 WHERE ss.sDetID= pSalesOrderDetID AND ss.isdeleted=0;  \n" +
                "  \n" +
                "                 SELECT releaseLevelComment,partCategory FROM salesorderdet WHERE id=pSalesOrderDetID;  \n" +
                "  \n" +
                "END;  \n" +  /* **************************** Add Script Version ->  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1311,'1.00','V1',' Alter procedure Sproc_getSalesOrderReleaseLineDetails-CC '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1311:
            allDbChangesArray.push(
                /* **************************** New Script -> 15-02-2022  *********************************** */
                "DROP procedure IF EXISTS `Sproc_GetComponentMFGAliasSearch`;  \n" +
                "CREATE PROCEDURE `Sproc_GetComponentMFGAliasSearch`(  \n" +
                "	IN pGoodPart VARCHAR(100),  \n" +
                "	IN pSearch VARCHAR(500),  \n" +
                "	IN pId INT,  \n" +
                "	IN pMfgType VARCHAR(50),  \n" +
                "	IN pRoHSStatusID VARCHAR(100),  \n" +
                "	IN pMfgCodeId INT,  \n" +
                "	IN pMountingType VARCHAR(50),  \n" +
                "	IN pMountingTypeId INT,  \n" +
                "	IN pCategoryID INT,  \n" +
                "	IN pIsContainCPN TINYINT,  \n" +
                "	IN pRohsMainCategoryID INT,  \n" +
                "	IN pIsRohsMainCategoryInvertMatch TINYINT,  \n" +
                "	IN prefSupplierMfgpnComponentID INT ,  \n" +
                "	IN ppackagingID INT,  \n" +
                "	IN pstrictCustomPart TINYINT,  \n" +
                "    IN pStrictCPNPart TINYINT,  \n" +
                "	IN psupplierID INT,  \n" +
                "    IN pPartType int,  \n" +
                "    IN pExcludeStatus INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE vRohsMainCategoryID INT;  \n" +
                "	DECLARE v_mfgNameFormat VARCHAR(100);  \n" +
                "  \n" +
                "    select fun_getMFGCodeNameFormat() into v_mfgNameFormat;  \n" +
                "  \n" +
                "	 SET @SQLStatement1=CONCAT(\" SELECT *  \n" +
                "		FROM  \n" +
                "		(  \n" +
                "			SELECT 	c.id,	CONCAT('(',m.mfgCode, ') ',c.mfgPN) mfgPN,  \n" +
                "					c.mfgPN orgMfgPN,						c.packaginggroupID,				c.PIDCode,  \n" +
                "					c.isGoodPart,							c.RoHSStatusID,					c.rohsgroupID,  \n" +
                "					c.mfgcodeID,          					c.rev,  \n" +
                "					m.mfgCode,								m.mfgType,						m.mfgName,  \n" +
                "                    fun_GetFormattedMfgCode(m.mfgCode, m.mfgName, '\",v_mfgNameFormat,\"') mfgCodeName,  \n" +
                "					c.category,								c.imageURL,						c.documentPath,  \n" +
                "					c.mfgPNDescription,				c.minOperatingTemp,				c.maxOperatingTemp,  \n" +
                "					c.value,								c.partPackage,					c.powerRating,  \n" +
                "					c.functionalCategoryID,					c.mountingTypeID,				c.connecterTypeID,  \n" +
                "					c.noOfPosition,							c.noOfRows,						c.pitch,  \n" +
                "					c.pitchMating,							c.length,						c.width,  \n" +
                "					c.height,								c.voltage,						c.weight,  \n" +
                "					c.feature,								c.color,						c.partStatus,  \n" +
                "					c.uom,									c.uomClassID,					c.unit,  \n" +
                "					c.restrictUsePermanently,				c.restrictUSEwithpermission,	c.restrictPackagingUsePermanently,  \n" +
                "					c.restrictPackagingUseWithpermission,  \n" +
                "					u.abbreviation AS uomName,				u.unitName AS  unitName,  \n" +
                "					r.rohsIcon,								r.name AS rohsName,  \n" +
                "					c.partPackageID,						c.bomLock,						c.businessRisk,  \n" +
                "					c.costCategoryID,						c.deviceMarking,				c.driverToolRequired,  \n" +
                "					c.eau,									c.epicorType,					c.functionalTestingRequired,  \n" +
                "					c.heightText,							c.isCPN,						c.isCustom,  \n" +
                "					c.leadTime,								c.matingPartRquired,			c.maxPriceLimit,  \n" +
                "					c.maxQtyonHand,							c.minimum,						c.mult,  \n" +
                "					c.packageQty,							c.partType,						c.pcbPerArray,  \n" +
                "					c.pickupPadRequired,					c.plannedOverRunPercentagePerBuild,  \n" +
                "					c.plannedValuePerBuild,					c.programingRequired,  \n" +
                "					c.rfqOnly,								c.saftyStock,					c.scrapRatePercentagePerBuild,  \n" +
                "					c.scrapValuePerBuild,					c.selfLifeDays,					c.shelfListDaysThresholdPercentage,  \n" +
                "					c.temperatureCoefficient,				c.temperatureCoefficientUnit,	c.temperatureCoefficientValue,  \n" +
                "					c.trackSerialNumber,					c.refSupplierMfgpnComponentID,	c.refMfgPNMfgCodeId,  \n" +
                "					vu.mfgName  supplierPartMfgName,		vu.mfgPN supplierPartMfgPn,		vu.mfgCode supplierPartMfgCode,  \n" +
                "					c.isWaterSoluble,						c.isNoClean,					c.isFluxNotApplicable,  \n" +
                "					c.detailDescription,					c.isHazmatMaterial, 			c.umidSPQ,  \n" +
                "                    c.shelfLifeDateType,					c.isReceiveBulkItem,			c.packagingID  \n" +
                "			FROM 	component c  \n" +
                "			INNER JOIN mfgCodemst m ON c.mfgcodeID = m.id  \n" +
                "			JOIN 	rfq_rohsmst r ON r.id = c.RoHSStatusID  \n" +
                "			JOIN  	uoms u ON u.id= c.uom AND u.isdeleted = 0  \n" +
                "			left join vu_supplierpartdetail_forfilter vu on c.id = vu.supplierPNId  \n" +
                "			WHERE 	c.isdeleted = 0  \");  \n" +
                "  if  pId is not null then  \n" +
                "    		SET @SQLStatement1=CONCAT(@SQLStatement1,\" 	AND c.id = \" ,pId );  \n" +
                "    end if;  \n" +
                "  \n" +
                "    if  pMfgType is not null then  \n" +
                "    		SET @SQLStatement1=CONCAT(@SQLStatement1,\" 	AND m.mfgType = '\",pMfgType,\"' \");  \n" +
                "    end if;  \n" +
                "  \n" +
                "    if  pRoHSStatusID is not null then  \n" +
                "			SET @SQLStatement1=CONCAT(@SQLStatement1,\" and c.RoHSStatusID = \", pRoHSStatusID );  \n" +
                "	 end if;  \n" +
                "	if  pMfgCodeId is not null then  \n" +
                "			SET @SQLStatement1=CONCAT(@SQLStatement1,\" and c.mfgcodeID = \",pMfgCodeId );  \n" +
                "	 end if;  \n" +
                "	if  pMountingType is not null then  \n" +
                "    	SET @SQLStatement1=CONCAT(@SQLStatement1,\" AND mt.name = '\",pMountingType,\"' \");  \n" +
                "	 end if;  \n" +
                "	if  pMountingTypeId is not null then  \n" +
                "				SET @SQLStatement1=CONCAT(@SQLStatement1,\" AND c.mountingTypeID = \",pMountingTypeId );  \n" +
                "	 end if;  \n" +
                "	if  pCategoryID is not null then  \n" +
                "			SET @SQLStatement1=CONCAT(@SQLStatement1,\" AND 	c.category = \", pCategoryID  );  \n" +
                "	 end if;  \n" +
                "	/* Fetch EXCEPT CPN part */  \n" +
                "	if  ifnull(pIsContainCPN,false) = false  then  \n" +
                "      #(CASE WHEN pIsContainCPN = 1 THEN c.isCPN= c.isCPN ELSE c.isCPN = FALSE END)  \n" +
                "		SET @SQLStatement1=CONCAT(@SQLStatement1,\" and c.isCPN = FALSE \");  \n" +
                "	 end if;  \n" +
                "     /* Fetch only CPN part */  \n" +
                "	if  ifnull(pStrictCPNPart,false) != false  then  \n" +
                "		SET @SQLStatement1=CONCAT(@SQLStatement1,\" and c.isCPN = TRUE \");  \n" +
                "	 end if;  \n" +
                "  \n" +
                "	if  pRohsMainCategoryID is not null then  \n" +
                "		 SET vRohsMainCategoryID = pRohsMainCategoryID;  \n" +
                "		/*===>this logic is added to compare invert rohs category*/  \n" +
                "		IF pIsRohsMainCategoryInvertMatch = FALSE  THEN  \n" +
                "			IF pRohsMainCategoryID = -1 THEN  \n" +
                "				SET vRohsMainCategoryID = -2;  \n" +
                "			ELSEIF pRohsMainCategoryID = -2 THEN  \n" +
                "				SET vRohsMainCategoryID = -1;  \n" +
                "			END IF;  \n" +
                "		END IF;  \n" +
                "        /*<===this logic is added to compare invert rohs category*/  \n" +
                "		#AND 	(CASE WHEN vRohsMainCategoryID is not null THEN r.refMainCategoryID = vRohsMainCategoryID ELSE 1 = 1 END)  \n" +
                "   		if vRohsMainCategoryID is not null then  \n" +
                "        SET @SQLStatement1=CONCAT(@SQLStatement1,\" and  r.refMainCategoryID  = \",vRohsMainCategoryID );  \n" +
                "        end if;  \n" +
                "	 end if;  \n" +
                "	if  prefSupplierMfgpnComponentID is not null then  \n" +
                "    	#AND 	c.refSupplierMfgpnComponentID <=> IFNULL(prefSupplierMfgpnComponentID, c.refSupplierMfgpnComponentID)  \n" +
                "		SET @SQLStatement1=CONCAT(@SQLStatement1,\" c.refSupplierMfgpnComponentID <=> IFNULL(\",prefSupplierMfgpnComponentID,\", c.refSupplierMfgpnComponentID)  \");  \n" +
                "	 end if;  \n" +
                "	if  pPartType is not null then  \n" +
                "        #AND 	c.partType = IFNULL(pPartType, c.partType)  \n" +
                "			SET @SQLStatement1=CONCAT(@SQLStatement1,\" and c.partType = '\",pPartType,\"' \");  \n" +
                "	 end if;  \n" +
                "	if  ppackagingID is not null then  \n" +
                "    	#AND 	c.packagingID <=> IFNULL(ppackagingID,c.packagingID)  \n" +
                "			SET @SQLStatement1=CONCAT(@SQLStatement1,\" AND 	c.packagingID <=> IFNULL(\",ppackagingID,\",c.packagingID) \");  \n" +
                "	 end if;  \n" +
                "	if  pstrictCustomPart is not null then  \n" +
                "			#AND c.category != 3  AND c.iscustom = 1  \n" +
                "			SET @SQLStatement1=CONCAT(@SQLStatement1,\" AND c.category != 3  AND c.iscustom = 1 \");  \n" +
                "	 end if;  \n" +
                "	if  psupplierID is not null and pstrictCustomPart  = 1 then  \n" +
                "		/* Old logic  \n" +
                "        (c.mfgcodeid IN (SELECT smm.refMfgCodeMstID  \n" +
                "									FROM supplier_mapping_mst smm  \n" +
                "									WHERE smm.isdeleted = 0 AND smm.isCustMapping=0 AND smm.supplierID = IFNULL(psupplierID,smm.supplierID)) OR  \n" +
                "					c.mfgcodeid IN (SELECT mc.id  \n" +
                "										FROM mfgcodemst mc  \n" +
                "										WHERE mc.iscompany = 1 AND mc.isdeleted = 0) OR  \n" +
                "					c.mfgcodeid IN (SELECT mc.id  \n" +
                "										FROM mfgcodemst mc  \n" +
                "										WHERE mc.mfgType = 'MFG' AND mc.isCustOrDisty = 1 AND mc.isdeleted=0)  \n" +
                "			)  \n" +
                "        */  \n" +
                "        SET @SQLStatement1=CONCAT(@SQLStatement1,\"  AND 	(c.mfgcodeid IN (SELECT smm.refMfgCodeMstID  \n" +
                "																			FROM supplier_mapping_mst smm  \n" +
                "																			WHERE smm.isdeleted = 0 AND smm.isCustMapping=0 AND smm.supplierID = IFNULL(\",psupplierID,\",smm.supplierID)  \n" +
                "																		union all /*get mfg which set as company*/  \n" +
                "																		SELECT mc.id  \n" +
                "																				FROM mfgcodemst mc  \n" +
                "																				WHERE mc.iscompany = 1 AND mc.isdeleted = 0  \n" +
                "																		union all /* get All Customer code */  \n" +
                "																		SELECT mc.id  \n" +
                "																				FROM mfgcodemst mc  \n" +
                "																				WHERE mc.mfgType = 'MFG' AND mc.isCustOrDisty = 1 AND mc.isdeleted=0  \n" +
                "																		)  \");  \n" +
                "	 end if;  \n" +
                "	if  pExcludeStatus is not null then  \n" +
                "    #AND 	(CASE WHEN pExcludeStatus is not null THEN c.partStatus != pExcludeStatus ELSE 1=1 END)  \n" +
                "			SET @SQLStatement1=CONCAT(@SQLStatement1,\" and c.partStatus != '\",pExcludeStatus,\"' \");  \n" +
                "	 end if;  \n" +
                "     /*Close Inner query section */  \n" +
                "     SET @SQLStatement1=CONCAT(@SQLStatement1,\" ) AS a  where 1= 1 \");  \n" +
                "  \n" +
                "     if  pSearch is not null then  \n" +
                "     /* old query(  \n" +
                "				(pSearch IS NULL AND 1 = 1) OR  \n" +
                "				(pSearch IS NOT NULL AND (a.mfgPN LIKE CONCAT('%', pSearch , '%') OR  \n" +
                "											EXISTS (SELECT 1 FROM component_otherpn opn  \n" +
                "													WHERE opn.refcomponentid = a.id  \n" +
                "													AND opn.name LIKE CONCAT('%', pSearch , '%')  \n" +
                "											)  \n" +
                "										)  \n" +
                "				)  \n" +
                "		)  \n" +
                "     */  \n" +
                "			SET @SQLStatement1=CONCAT(@SQLStatement1,\" and  exists ( select 1 from ( select a.id, a.mfgpn name from dual  \n" +
                "																					union all  \n" +
                "																					select opn.refcomponentid ,opn.name from component_otherpn opn where opn.refcomponentid = a.id  \n" +
                "																				) x where x.id  = a.id and x.name  LIKE CONCAT('%\", pSearch , \"%')  ) \");  \n" +
                "	 end if;  \n" +
                "  \n" +
                "     	SET @SQLStatement1=CONCAT(@SQLStatement1,\" ORDER BY mfgPN For update\");  \n" +
                "     PREPARE query1 FROM @SQLStatement1;  \n" +
                "		EXECUTE query1;  \n" +
                "		DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "    /* this logic used in purchase order when supplier is strictly custom part */  \n" +
                "   /*  \n" +
                "	IF(pstrictCustomPart = 1)THEN  \n" +
                "		SELECT *  \n" +
                "		FROM  \n" +
                "		(  \n" +
                "			SELECT 	c.id,	CONCAT('(',m.mfgCode, ') ',c.mfgPN) mfgPN,  \n" +
                "					c.mfgPN orgMfgPN,						c.packaginggroupID,				c.PIDCode,  \n" +
                "					c.isGoodPart,							c.RoHSStatusID,					c.rohsgroupID,  \n" +
                "					c.mfgcodeID,          					c.rev,  \n" +
                "					m.mfgCode,								m.mfgType,						m.mfgName,  \n" +
                "					c.category,								c.imageURL,						c.documentPath,  \n" +
                "					c.mfgPNDescription,						c.minOperatingTemp,				c.maxOperatingTemp,  \n" +
                "					c.value,								c.partPackage,					c.powerRating,  \n" +
                "					c.functionalCategoryID,					c.mountingTypeID,				c.connecterTypeID,  \n" +
                "					c.noOfPosition,							c.noOfRows,						c.pitch,  \n" +
                "					c.pitchMating,							c.length,						c.width,  \n" +
                "					c.height,								c.voltage,						c.weight,  \n" +
                "					c.feature,								c.color,						c.partStatus,  \n" +
                "					c.uom,									c.uomClassID,					c.unit,  \n" +
                "					c.restrictUsePermanently,				c.restrictUSEwithpermission,	c.restrictPackagingUsePermanently,  \n" +
                "					c.restrictPackagingUseWithpermission,  \n" +
                "					u.abbreviation AS uomName,				u.unitName AS  unitName,  \n" +
                "					r.rohsIcon,								r.name AS rohsName,  \n" +
                "					c.partPackageID,						c.bomLock,						c.businessRisk,  \n" +
                "					c.costCategoryID,						c.deviceMarking,				c.driverToolRequired,  \n" +
                "					c.eau,									c.epicorType,					c.functionalTestingRequired,  \n" +
                "					c.heightText,							c.isCPN,						c.isCustom,  \n" +
                "					c.leadTime,								c.matingPartRquired,			c.maxPriceLimit,  \n" +
                "					c.maxQtyonHand,							c.minimum,						c.mult,  \n" +
                "					c.packageQty,							c.partType,						c.pcbPerArray,  \n" +
                "					c.pickupPadRequired,					c.plannedOverRunPercentagePerBuild,  \n" +
                "					c.plannedValuePerBuild,					c.programingRequired,  \n" +
                "					c.rfqOnly,								c.saftyStock,					c.scrapRatePercentagePerBuild,  \n" +
                "					c.scrapValuePerBuild,					c.selfLifeDays,					c.shelfListDaysThresholdPercentage,  \n" +
                "					c.temperatureCoefficient,				c.temperatureCoefficientUnit,	c.temperatureCoefficientValue,  \n" +
                "					c.trackSerialNumber,					c.refSupplierMfgpnComponentID,	c.refMfgPNMfgCodeId,  \n" +
                "					vu.mfgName  supplierPartMfgName,		vu.mfgPN supplierPartMfgPn,		vu.mfgCode supplierPartMfgCode,  \n" +
                "					c.isWaterSoluble,						c.isNoClean,					c.isFluxNotApplicable,  \n" +
                "					c.detailDescription,					c.isHazmatMaterial, 			c.umidSPQ,  \n" +
                "                    c.shelfLifeDateType,					c.isReceiveBulkItem  \n" +
                "			FROM 	component c  \n" +
                "			INNER JOIN mfgCodemst m ON c.mfgcodeID = m.id AND m.mfgType = IFNULL(pMfgType, m.mfgType)  \n" +
                "			JOIN 	rfq_rohsmst r ON r.id = c.RoHSStatusID  \n" +
                "			JOIN  	uoms u ON u.id= c.uom AND u.isdeleted = 0  \n" +
                "			left join vu_supplierpartdetail_forfilter vu on c.id = vu.supplierPNId  \n" +
                "			WHERE 	c.isdeleted = 0  \n" +
                "			AND 	c.isGoodPart = IFNULL(pGoodPart,c.isGoodPart)  \n" +
                "			AND 	c.RoHSStatusID= IFNULL(pRoHSStatusID, c.RoHSStatusID)  \n" +
                "			AND 	c.mountingTypeID = IFNULL(pMountingTypeId, c.mountingTypeID)  \n" +
                "			AND 	c.id = IFNULL(pId, c.id)  \n" +
                "			AND 	c.mfgcodeID = IFNULL(pMfgCodeId, c.mfgcodeID)  \n" +
                "            AND 	c.partType = IFNULL(pPartType, c.partType)  \n" +
                "			AND 	(CASE WHEN pExcludeStatus is not null THEN c.partStatus != pExcludeStatus ELSE 1=1 END)  \n" +
                "			AND 	c.refSupplierMfgpnComponentID <=> IFNULL(prefSupplierMfgpnComponentID, c.refSupplierMfgpnComponentID)  \n" +
                "			AND 	c.packagingID <=> IFNULL(ppackagingID,c.packagingID)  \n" +
                "			AND 	(CASE WHEN pIsContainCPN = 1 THEN c.isCPN= c.isCPN ELSE c.isCPN = FALSE END)  \n" +
                "			AND 	(c.mfgcodeid IN (SELECT smm.refMfgCodeMstID  \n" +
                "									FROM supplier_mapping_mst smm  \n" +
                "									WHERE smm.isdeleted = 0 AND smm.isCustMapping=0 AND smm.supplierID = IFNULL(psupplierID,smm.supplierID)) OR  \n" +
                "					c.mfgcodeid IN (SELECT mc.id  \n" +
                "										FROM mfgcodemst mc  \n" +
                "										WHERE mc.iscompany = 1 AND mc.isdeleted = 0) OR  \n" +
                "					c.mfgcodeid IN (SELECT mc.id  \n" +
                "										FROM mfgcodemst mc  \n" +
                "										WHERE mc.mfgType = 'MFG' AND mc.isCustOrDisty = 1 AND mc.isdeleted=0)  \n" +
                "			)  \n" +
                "			AND c.category != 3  \n" +
                "			AND c.iscustom = 1  \n" +
                "		) AS a  \n" +
                "		WHERE (  \n" +
                "				(pSearch IS NULL AND 1 = 1) OR  \n" +
                "				(pSearch IS NOT NULL AND (a.mfgPN LIKE CONCAT('%', pSearch , '%') OR  \n" +
                "											EXISTS (SELECT 1 FROM component_otherpn opn  \n" +
                "													WHERE opn.refcomponentid = a.id  \n" +
                "													AND opn.name LIKE CONCAT('%', pSearch , '%')  \n" +
                "											)  \n" +
                "										)  \n" +
                "				)  \n" +
                "		)  \n" +
                "		ORDER BY mfgPN;  \n" +
                "  \n" +
                "	ELSEIF(pMountingType IS NOT NULL AND pstrictCustomPart = 0) THEN  */  \n" +
                "	/* this logic used in purchase order, packing slip, UMID management, Component Master, Reserve Stock, Component Assy DFM,  \n" +
                "    Reports, Price Break Update, Customer Part, Good-Bad Mapping Part, Supplier Quote, Supplier RMA */  \n" +
                "	/*	SELECT * FROM  \n" +
                "		(  \n" +
                "			 SELECT c.id,							CONCAT('(',m.mfgCode, ') ',c.mfgPN) mfgPN,  \n" +
                "					c.mfgPN orgMfgPN, 					c.packaginggroupID, 					c.PIDCode,  \n" +
                "					c.isGoodPart, 						c.RoHSStatusID, 						c.rohsgroupID,  \n" +
                "					c.mfgcodeID,					    c.rev,  \n" +
                "					m.mfgCode, 							m.mfgType,								m.mfgName,  \n" +
                "					c.category,							c.imageURL,								c.documentPath,  \n" +
                "					c.mfgPNDescription,					c.minOperatingTemp,        				c.maxOperatingTemp,  \n" +
                "					c.value,							c.partPackage,							c.powerRating,  \n" +
                "					c.functionalCategoryID,         	c.mountingTypeID,						c.connecterTypeID,  \n" +
                "					c.noOfPosition,        				c.noOfRows,								c.pitch,  \n" +
                "					c.pitchMating,        				c.length,								c.width,  \n" +
                "					c.height,        					c.voltage,								c.weight,  \n" +
                "					c.feature,        					c.color,								c.partStatus,  \n" +
                "					c.uom,					        	c.uomClassID,							c.unit,  \n" +
                "					c.restrictUsePermanently,			c.restrictUSEwithpermission,			c.restrictPackagingUsePermanently,  \n" +
                "					c.restrictPackagingUseWithpermission,  \n" +
                "					u.abbreviation AS uomName,			u.unitName AS  unitName,  \n" +
                "					r.rohsIcon,							r.name AS rohsName,  \n" +
                "					c.partPackageID,        			c.bomLock,								c.businessRisk,  \n" +
                "					c.costCategoryID,					c.deviceMarking,						c.driverToolRequired,  \n" +
                "					c.eau,								c.epicorType,							c.functionalTestingRequired,  \n" +
                "					c.heightText,						c.isCPN,								c.isCustom,  \n" +
                "					c.leadTime,							c.matingPartRquired,					c.maxPriceLimit,  \n" +
                "					c.maxQtyonHand,						c.minimum,								c.mult,  \n" +
                "					c.packageQty,						c.partType,								c.pcbPerArray,  \n" +
                "					c.pickupPadRequired,				c.plannedOverRunPercentagePerBuild, 	c.plannedValuePerBuild,  \n" +
                "					c.programingRequired,				c.rfqOnly,								c.saftyStock,  \n" +
                "					c.scrapRatePercentagePerBuild, 		c.scrapValuePerBuild,					c.selfLifeDays,  \n" +
                "					c.shelfListDaysThresholdPercentage, c.temperatureCoefficient,				c.temperatureCoefficientUnit,  \n" +
                "					c.temperatureCoefficientValue,		c.trackSerialNumber,					c.refSupplierMfgpnComponentID,  \n" +
                "					c.refMfgPNMfgCodeId,  \n" +
                "					vu.mfgName  supplierPartMfgName, 	vu.mfgPN supplierPartMfgPn, 			vu.mfgCode supplierPartMfgCode,  \n" +
                "					c.isWaterSoluble,        			c.isNoClean,        					c.isFluxNotApplicable,  \n" +
                "					c.detailDescription,					c.isHazmatMaterial, 				c.umidSPQ,  \n" +
                "                    c.shelfLifeDateType,					c.isReceiveBulkItem  \n" +
                "			FROM 	component c  \n" +
                "			INNER JOIN mfgCodemst m ON c.mfgcodeID = m.id AND (m.isdeleted = 0 AND  m.mfgType = IFNULL(pMfgType, m.mfgType))  \n" +
                "			JOIN 	rfq_mountingtypemst AS mt ON mt.id = c.mountingTypeID AND mt.name = pMountingType  \n" +
                "			JOIN 	rfq_rohsmst r ON r.id = c.RoHSStatusID  \n" +
                "			JOIN  	uoms u ON u.id = c.uom AND u.isdeleted = 0  \n" +
                "			left join vu_supplierpartdetail_forfilter vu on c.id = vu.supplierPNId  \n" +
                "			WHERE 	c.isdeleted = 0  \n" +
                "			AND 	c.isGoodPart = IFNULL(pGoodPart,c.isGoodPart)  \n" +
                "			AND 	c.RoHSStatusID= IFNULL(pRoHSStatusID, c.RoHSStatusID)  \n" +
                "			AND 	c.mountingTypeID = IFNULL(pMountingTypeId, c.mountingTypeID)  \n" +
                "			AND		c.id = IFNULL(pId, c.id) AND c.mfgcodeID = IFNULL(pMfgCodeId, c.mfgcodeID)  \n" +
                "			AND 	c.refSupplierMfgpnComponentID <=> IFNULL(prefSupplierMfgpnComponentID, c.refSupplierMfgpnComponentID)  \n" +
                "			AND 	c.packagingID <=> IFNULL(ppackagingID,c.packagingID)  \n" +
                "			AND 	c.category = IFNULL(pCategoryID, c.category)  \n" +
                "            AND 	c.partType = IFNULL(pPartType, c.partType)  \n" +
                "			AND 	(CASE WHEN pExcludeStatus is not null THEN c.partStatus != pExcludeStatus ELSE 1=1 END)  \n" +
                "			AND 	(CASE WHEN pIsContainCPN = 1 THEN c.isCPN= c.isCPN ELSE c.isCPN = FALSE END)  \n" +
                "  \n" +
                "		) AS a  \n" +
                "		WHERE (  \n" +
                "				(pSearch IS NULL AND 1 = 1) OR  \n" +
                "				(pSearch IS NOT NULL AND (a.mfgPN LIKE CONCAT('%', pSearch , '%') OR  \n" +
                "											EXISTS (SELECT 1 FROM component_otherpn opn  \n" +
                "													WHERE opn.refcomponentid = a.id  \n" +
                "													AND opn.name LIKE CONCAT('%', pSearch , '%')  \n" +
                "											)  \n" +
                "										)  \n" +
                "				)  \n" +
                "		)  \n" +
                "		ORDER BY mfgPN;  \n" +
                "  \n" +
                "	ELSE  */  \n" +
                "	  /* this logic used in purchase order, packing slip, UMID management, Component Master, Reserve Stock, Component Assy DFM,  \n" +
                "	  Reports,  Price Break Update,  Customer Part,  Good-Bad Mapping Part,  Supplier Quote,  Supplier RMAb*/  \n" +
                "  /*  \n" +
                "		select *  \n" +
                "		from  \n" +
                "		(  \n" +
                "			select 	c.id, 						CONCAT('(', m.mfgCode, ') ', c.mfgPN) mfgPN,  \n" +
                "					c.mfgPN orgMfgPN,			c.packaginggroupID,					c.PIDCode,  \n" +
                "					c.isGoodPart,				c.RoHSStatusID,						c.rohsgroupID,  \n" +
                "					c.mfgcodeID,          		c.rev,  \n" +
                "					m.mfgCode,					m.mfgName,							m.mfgType,  \n" +
                "					c.tolerance,				c.category,							c.imageURL,  \n" +
                "					c.documentPath,				c.mfgPNDescription,					c.minOperatingTemp,  \n" +
                "					c.maxOperatingTemp,			c.value,							c.partPackage,  \n" +
                "					c.powerRating,				c.functionalCategoryID,				c.mountingTypeID,  \n" +
                "					c.connecterTypeID,			c.noOfPosition,           	 		c.noOfRows,  \n" +
                "					c.pitch,            		c.pitchMating,            			c.length,  \n" +
                "					c.width,            		c.height,							c.voltage,  \n" +
                "					c.weight,            		c.feature,            				c.color,  \n" +
                "					c.partStatus,            	c.uom,            					c.uomClassID,  \n" +
                "					c.unit,            			c.restrictUsePermanently,			c.restrictUSEwithpermission,  \n" +
                "					c.restrictPackagingUsePermanently,								c.restrictPackagingUseWithpermission,  \n" +
                "					c.packagingID,				c.packaging,  \n" +
                "					u.abbreviation AS uomName,	u.unitName AS unitName,  \n" +
                "					r.rohsIcon,					r.name AS rohsName,  \n" +
                "					c.partPackageID,			c.bomLock,							c.businessRisk,  \n" +
                "					c.costCategoryID,			c.deviceMarking,					c.driverToolRequired,  \n" +
                "					c.eau,						c.epicorType,						c.functionalTestingRequired,  \n" +
                "					c.heightText,				c.isCPN,							c.isCustom,  \n" +
                "					c.leadTime,            		c.matingPartRquired,				c.maxPriceLimit,  \n" +
                "					c.maxQtyonHand,           	c.minimum,							c.mult,  \n" +
                "					c.packageQty,            	c.partType,							c.pcbPerArray,  \n" +
                "					c.pickupPadRequired,		c.plannedOverRunPercentagePerBuild, c.plannedValuePerBuild,  \n" +
                "					c.programingRequired,		c.rfqOnly,							c.saftyStock,  \n" +
                "					c.scrapRatePercentagePerBuild,		c.scrapValuePerBuild,		c.selfLifeDays,  \n" +
                "					c.shelfListDaysThresholdPercentage,	c.temperatureCoefficient,	c.temperatureCoefficientUnit,  \n" +
                "					c.temperatureCoefficientValue,		c.trackSerialNumber,		c.refSupplierMfgpnComponentID,  \n" +
                "					c.refMfgPNMfgCodeId,  \n" +
                "					vu.mfgName  supplierPartMfgName,  \n" +
                "					vu.mfgPN supplierPartMfgPn,  \n" +
                "					vu.mfgCode supplierPartMfgCode,  \n" +
                "					c.isWaterSoluble,			c.isNoClean,						c.isFluxNotApplicable,  \n" +
                "					c.detailDescription,		c.isHazmatMaterial, 				c.umidSPQ,  \n" +
                "                    c.shelfLifeDateType,		c.isReceiveBulkItem  \n" +
                "			from component c  \n" +
                "			INNER JOIN	mfgCodemst m ON m.id = c.mfgcodeID AND m.mfgType = IFNULL(pMfgType, m.mfgType)  \n" +
                "			INNER JOIN rfq_rohsmst r ON r.id = c.RoHSStatusID AND r.isDeleted = 0  \n" +
                "			INNER JOIN uoms u ON u.id = c.uom AND u.isdeleted = 0  \n" +
                "			left join vu_supplierpartdetail_forfilter vu on c.id = vu.supplierPNId  \n" +
                "			WHERE 	c.isdeleted = 0  \n" +
                "			AND 	c.id = IFNULL(pId, c.id)  \n" +
                "			AND 	c.isGoodPart = IFNULL(pGoodPart, c.isGoodPart)  \n" +
                "			AND 	c.RoHSStatusID = IFNULL(pRoHSStatusID, c.RoHSStatusID)  \n" +
                "			AND 	c.mountingTypeID = IFNULL(pMountingTypeId, c.mountingTypeID)  \n" +
                "			AND 	c.mfgcodeID = IFNULL(pMfgCodeId, c.mfgcodeID)  \n" +
                "			AND 	c.refSupplierMfgpnComponentID <=> IFNULL(prefSupplierMfgpnComponentID, c.refSupplierMfgpnComponentID)  \n" +
                "			AND 	c.packagingID <=> IFNULL(ppackagingID, c.packagingID)  \n" +
                "			AND 	c.category = IFNULL(pCategoryID, c.category)  \n" +
                "            AND 	c.partType = IFNULL(pPartType, c.partType)  \n" +
                "			AND 	(CASE WHEN pExcludeStatus is not null THEN c.partStatus != pExcludeStatus ELSE 1=1 END)  \n" +
                "			AND 	(CASE WHEN pIsContainCPN = 1 THEN c.isCPN = c.isCPN ELSE c.isCPN = FALSE END)  \n" +
                "			AND 	(CASE WHEN vRohsMainCategoryID is not null THEN r.refMainCategoryID = vRohsMainCategoryID ELSE 1 = 1 END)  \n" +
                "			AND 	(CASE WHEN pstrictCustomPart = 0 THEN c.iscustom = 0 ELSE 1 = 1 END)  \n" +
                "		) AS a  \n" +
                "		WHERE (  \n" +
                "				(pSearch IS NULL AND 1 = 1) OR  \n" +
                "				(pSearch IS NOT NULL AND  \n" +
                "					(  \n" +
                "						a.mfgPN LIKE CONCAT('%', pSearch, '%') OR  \n" +
                "						EXISTS( SELECT  1  \n" +
                "								FROM 	component_otherpn opn  \n" +
                "								WHERE 	opn.refcomponentid = a.id  \n" +
                "								AND 	opn.name LIKE CONCAT('%', pSearch, '%'))  \n" +
                "					)  \n" +
                "				)  \n" +
                "			)  \n" +
                "		ORDER BY mfgPN;  \n" +
                "	END IF;   */  \n" +
                "END;  \n" +

                "DROP procedure IF EXISTS `Sproc_GetComponentAssyProgramList`;  \n" +
                "CREATE PROCEDURE `Sproc_GetComponentAssyProgramList`(  \n" +
                "	IN pPageIndex INT,  \n" +
                "	IN pRecordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "    IN pPartId INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255);  \n" +
                "	DECLARE vMfgCodeFormat INT;  \n" +
                "  \n" +
                "	SELECT fun_getMFGCodeNameFormat() INTO vMfgCodeFormat;  \n" +
                "    DROP TEMPORARY TABLE IF EXISTS componentResult;  \n" +
                "  \n" +
                "	set @temp_Sproc_RetriveWhereUsedComponents1 = concat(\"  \n" +
                "		select a.*,concat(a.PIDCode,' : ',a.refDES,' : ',format(a.qpa,6),' : ',a.programingStatus,' : ',a.progName,' : ',a.assyPartStatus) valueString  \n" +
                "    from  \n" +
                "    (  \n" +
                "          select  \n" +
                "				assy.id  \n" +
                "                ,fun_GetFormattedMfgCode(assyMfg.mfgCode, assyMfg.mfgName,\", vMfgCodeFormat,\") as mfrCode  \n" +
                "                ,assyMfg.id as mfgCodeID  \n" +
                "                ,assyMfg.mfgType  \n" +
                "				,assy.mfgPN  \n" +
                "                ,assy.custAssyPN  \n" +
                "                ,assy.rev  \n" +
                "                ,assy.PIDCode  \n" +
                "                ,assy.liveVersion  \n" +
                "                ,assy.mfgPNDescription  \n" +
                "                ,assy.nickName  \n" +
                "                ,assyRo.rohsIcon as assyRohsIcon  \n" +
                "                ,assyRo.name as assyRohsName  \n" +
                "                ,assy.isGoodPart  \n" +
                "                ,assy.isCustom  \n" +
                "                ,assy.restrictUsePermanently as assyRestrictUsePermanently  \n" +
                "                ,assy.restrictUSEwithpermission as assyRestrictUSEwithpermission  \n" +
                "                ,assy.restrictPackagingUsePermanently as assyRestrictPackagingUsePermanently  \n" +
                "                ,assy.restrictPackagingUseWithpermission as assyRestrictPackagingUseWithpermission  \n" +
                "                ,case when rlaPart.mfgPNID = \", pPartId ,\" then  \n" +
                "					prog.id  \n" +
                "					else com.id  \n" +
                "					end programId  \n" +
                "				,case when rlaPart.mfgPNID = \", pPartId ,\" then  \n" +
                "					progMFG.id  \n" +
                "					else comMfg.id  \n" +
                "					end programMfrId  \n" +
                "				,case when rlaPart.mfgPNID = \", pPartId ,\" then  \n" +
                "					progMFG.mfgType  \n" +
                "					else comMfg.mfgType  \n" +
                "					end programMfgType  \n" +
                "                ,case when rlaPart.mfgPNID = \", pPartId ,\" then  \n" +
                "					fun_GetFormattedMfgCode(progMFG.mfgCode, progMFG.mfgName,\", vMfgCodeFormat,\")  \n" +
                "					else fun_GetFormattedMfgCode(comMfg.mfgCode, comMfg.mfgName,\", vMfgCodeFormat,\")  \n" +
                "					end programMfrCode  \n" +
                "                ,case when rlaPart.mfgPNID = \", pPartId ,\" then  \n" +
                "					prog.mfgPN  \n" +
                "					else com.mfgPN  \n" +
                "					end programMfgPN  \n" +
                "				,case when rlaPart.mfgPNID = \", pPartId ,\" then  \n" +
                "					prog.mfgPNDescription  \n" +
                "					else com.mfgPNDescription  \n" +
                "					end programMfgPNDescription  \n" +
                "				,case when rlaPart.mfgPNID = \", pPartId ,\" then  \n" +
                "					prgramRo.rohsIcon  \n" +
                "					else comRo.rohsIcon  \n" +
                "					end programRoHSIcon  \n" +
                "				,case when rlaPart.mfgPNID= \", pPartId ,\" then  \n" +
                "					prgramRo.name  \n" +
                "					else comRo.name  \n" +
                "					end programRoHSName  \n" +
                "				,case when rlaPart.mfgPNID= \", pPartId ,\" then  \n" +
                "					prog.restrictUsePermanently  \n" +
                "					else com.restrictUsePermanently  \n" +
                "					end programRestrictUsePermanently  \n" +
                "				,case when rlaPart.mfgPNID= \", pPartId ,\" then  \n" +
                "					prog.restrictUSEwithpermission  \n" +
                "					else com.restrictUSEwithpermission  \n" +
                "					end programRestrictUSEwithpermission  \n" +
                "				,case when rlaPart.mfgPNID = \", pPartId ,\" then  \n" +
                "					prog.restrictPackagingUsePermanently  \n" +
                "					else com.restrictPackagingUsePermanently  \n" +
                "					end programRestrictPackagingUsePermanently  \n" +
                "				,case when rlaPart.mfgPNID = \", pPartId ,\" then  \n" +
                "					prog.restrictPackagingUseWithpermission  \n" +
                "					else com.restrictPackagingUseWithpermission  \n" +
                "					end programRestrictPackagingUseWithpermission  \n" +
                "  \n" +
                "                ,pm.softwareRefDesg as refDES  \n" +
                "                ,format(rl.qpa,6) as qpa  \n" +
                "                ,rl.lineID as lineItemID  \n" +
                "                , (CASE WHEN rlPart.programingStatus = 1 THEN 'Pre-Assy'  \n" +
                "				WHEN rlPart.programingStatus = 2 THEN 'Post-Assy'  \n" +
                "				WHEN rlPart.programingStatus = 3 THEN 'Cust will program'  \n" +
                "				WHEN rlPart.programingStatus = 4 THEN 'Pre-Programmed'  \n" +
                "				ELSE 'N/A' END) AS programingStatus  \n" +
                "                ,case when rlaPart.mfgPNID = \", pPartId ,\"  then  \n" +
                "					prog.PIDCode  \n" +
                "				else com.PIDCode  \n" +
                "				end progName  \n" +
                "                ,cp.name assyPartStatus  \n" +
                "	  from rfq_lineitem_programming_mapping pm  \n" +
                "	  join rfq_lineitems rlPart on rlPart.id = pm.rfqLineItemID and rlPart.isDeleted = 0  \n" +
                "      join rfq_lineitems_alternatepart rlaPart ON rlaPart.rfqLineItemsID = rlPart.id and rlaPart.isDeleted = 0  \n" +
                "	  join rfq_lineitems rl on rl.id = pm.softwareRFQLineItemID and rl.isDeleted = 0  \n" +
                "	  join rfq_lineitems_alternatepart rla ON rla.rfqLineItemsID = rl.id and rla.isDeleted = 0  \n" +
                "	  join component assy ON assy.id = pm.partID and assy.isDeleted = 0  \n" +
                "      inner JOIN rfq_rohsmst assyRo ON assyRo.id = assy.RoHSStatusID  \n" +
                "      inner JOIN mfgCodemst AS assyMfg ON assyMfg.id = assy.mfgcodeID  \n" +
                "	  join component_partstatusmst cp ON cp.id = assy.partStatus and cp.isDeleted = 0  \n" +
                "  \n" +
                "	  join component prog ON prog.id = rla.mfgPNID and prog.isDeleted = 0  \n" +
                "      inner JOIN mfgCodemst AS progMFG ON progMFG.id = prog.mfgcodeID  \n" +
                "      inner JOIN rfq_rohsmst prgramRo ON prgramRo.id = prog.RoHSStatusID  \n" +
                "  \n" +
                "      join component com ON com.id = rlaPart.mfgPNID and com.isDeleted = 0  \n" +
                "      inner JOIN mfgCodemst AS comMfg ON comMfg.id = com.mfgcodeID  \n" +
                "      inner JOIN rfq_rohsmst comRo ON comRo.id = com.RoHSStatusID  \n" +
                "	  where pm.isDeleted = 0  \n" +
                "                    and (rlaPart.mfgPNID = \", pPartId , \" /*component part where software used*/  \n" +
                "			or rla.mfgPNID = \", pPartId , \"/*software part*/)  \n" +
                "        ) a \");  \n" +
                "  \n" +
                "	SET @SQLStatement1 = CONCAT(\"CREATE TEMPORARY TABLE componentResult AS  \n" +
                "							\",@temp_Sproc_RetriveWhereUsedComponents1,\" \");  \n" +
                "    PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , \"mfgPN ASC\") ;  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = '1=1' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pPageIndex <> 0 AND pRecordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (pPageIndex -1) * pRecordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/* to get total count of rows */  \n" +
                "	SET @SQLStatement4 = CONCAT(\" SELECT COUNT(1) as TotalRecord FROM componentResult where \", pWhereClause );  \n" +
                "	PREPARE query4 FROM @SQLStatement4;  \n" +
                "	EXECUTE query4;  \n" +
                "	DEALLOCATE PREPARE query4;  \n" +
                "  \n" +
                "	SET @SQLStatement5 = CONCAT(\" SELECT * FROM  componentResult where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "	PREPARE query5 FROM @SQLStatement5;  \n" +
                "	EXECUTE query5;  \n" +
                "	DEALLOCATE PREPARE query5;  \n" +
                "  \n" +
                "    DROP TEMPORARY TABLE IF EXISTS componentResult;  \n" +
                "  \n" +
                "END;  \n" +

                "DROP procedure IF EXISTS `Sproc_SaveCustMFGPn`;  \n" +
                "CREATE PROCEDURE `Sproc_SaveCustMFGPn`(  \n" +
                "IN prefCPNPartID INT,  \n" +
                "IN prefComponentIDs VARCHAR(5000),  \n" +
                "IN puserID int,  \n" +
                "IN pUserRoleID int  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE pLiveInternalVersionMethod VARCHAR(50);  \n" +
                "	DECLARE pLiveInternalVersionDateFormate VARCHAR(50);  \n" +
                "	DECLARE pCompanyName VARCHAR(100);  \n" +
                "	DECLARE pMFGPN VARCHAR(100);  \n" +
                "	DECLARE pLiveInternalVersion INT;  \n" +
                "	DECLARE totMFGPN INT DEFAULT 0;  \n" +
                "    DECLARE vCount INT;  \n" +
                "	DECLARE i INT DEFAULT 0;  \n" +
                "	/*DECLARE EXIT HANDLER FOR SQLEXCEPTION  \n" +
                "	BEGIN  \n" +
                "		ROLLBACK;  \n" +
                "		RESIGNAL;  \n" +
                "	END;  \n" +
                "	DECLARE EXIT HANDLER FOR SQLWARNING  \n" +
                "	  BEGIN  \n" +
                "		ROLLBACK;  \n" +
                "		RESIGNAL;  \n" +
                "	END;  \n" +
                "	START TRANSACTION;    */  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS t_CustMFGPn;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_CustMFGPn;  \n" +
                "	/*Generate Dummy data from string to row */  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS t_CustMFGPn;  \n" +
                "	CREATE TEMPORARY TABLE t_CustMFGPn( txt TEXT );  \n" +
                "	INSERT INTO t_CustMFGPn VALUES(prefComponentIDs);  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_CustMFGPn;  \n" +
                "	CREATE TEMPORARY TABLE temp_CustMFGPn( val CHAR(255) );  \n" +
                "	SET @SQL = CONCAT(\"insert into temp_CustMFGPn (val) values ('\", REPLACE(( SELECT GROUP_CONCAT(DISTINCT txt) AS DATA FROM t_CustMFGPn), \",\", \"'),('\"),\"');\");  \n" +
                "	PREPARE stmt1 FROM @SQL;  \n" +
                "	EXECUTE stmt1;  \n" +
                "	-- SELECT DISTINCT(val) FROM temp_CustMFGPn;  \n" +
                "	/*Generate Dummy data from string to row */  \n" +
                "  \n" +
                "	-- SELECT mfgPN INTO pMFGPN FROM component WHERE id = prefCPNPartID;  \n" +
                "  \n" +
                "	select count(1) into vCount  \n" +
                "		 from component_cust_alias_rev_pn co  \n" +
                "	where co.isDeleted= 0  and co.refComponentID = prefComponentIDs and  co.refCPNPartID = prefCPNPartID  \n" +
                "	group by co.id;  \n" +
                "  \n" +
                "	if vCount > 0 then  \n" +
                "            select 'DUIPLICATE_MAPPING' as message;  \n" +
                "	ELSE  \n" +
                "			SELECT IFNULL(liveInternalVersion,0) INTO pLiveInternalVersion FROM component WHERE id = prefCPNPartID;  \n" +
                "			SET pLiveInternalVersion  = pLiveInternalVersion  + 1;  \n" +
                "  \n" +
                "			SELECT `values` INTO pLiveInternalVersionMethod  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionMethod';  \n" +
                "			IF pLiveInternalVersionMethod = \"P\" THEN  \n" +
                "				SELECT `values` INTO pCompanyName  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionPrefixText';  \n" +
                "			ELSE  \n" +
                "				SELECT `values` INTO pLiveInternalVersionDateFormate  FROM systemconfigrations WHERE `key` = 'RFQInternalVersionDateFormat';  \n" +
                "				IF pLiveInternalVersionDateFormate = 'YYMMDD' THEN  \n" +
                "					SELECT DATE_FORMAT(UTC_DATE(), '%y%m%d') INTO pCompanyName ;  \n" +
                "				ELSE  \n" +
                "					SELECT DATE_FORMAT(UTC_DATE(), '%m%d%y') INTO pCompanyName ;  \n" +
                "				END IF;  \n" +
                "			END IF;  \n" +
                "  \n" +
                "			/* add all mapping mfgPN history with internal version */  \n" +
                "			SELECT COUNT(*) FROM temp_CustMFGPn INTO totMFGPN;  \n" +
                "			WHILE i < totMFGPN DO  \n" +
                "			SET pMFGPN = NULL;  \n" +
                "			SELECT mfgPN INTO pMFGPN FROM component WHERE deletedAt IS NULL  \n" +
                "			AND id = (SELECT val FROM temp_CustMFGPn LIMIT i,1);  \n" +
                "  \n" +
                "			INSERT INTO rfq_assembly_history (tableName, refTransID, rfqLineItemID, rfqAssyID, partID, columnName,  \n" +
                "								oldValue,newValue,changeVersion,createdAt,createdBy,createByRoleId,updatedAt,updatedBy,updateByRoleId)  \n" +
                "			VALUES 	(\"component\", prefCPNPartID, NULL,NULL, prefCPNPartID, \"MPN\",  \n" +
                "				NULL, pMFGPN , CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)), fun_DatetimetoUTCDateTime(),puserID,pUserRoleID,fun_DatetimetoUTCDateTime(),puserID,pUserRoleID);  \n" +
                "			SET i = i + 1;  \n" +
                "			END WHILE;  \n" +
                "			/* update component live internal version */  \n" +
                "			UPDATE component  \n" +
                "			SET liveInternalVersion = pLiveInternalVersion, liveVersion = CONCAT(pCompanyName,'-',CAST(pLiveInternalVersion AS CHAR)) WHERE id = prefCPNPartID;  \n" +
                "			/* add all mapping mfgPN against custpn */  \n" +
                "			INSERT INTO component_cust_alias_rev_pn(refComponentID,refCPNPartID,createdBy,createByRoleId,updatedAt,updatedBy,updateByRoleId)  \n" +
                "			SELECT DISTINCT(val) `refComponentID` , prefCPNPartID `refCPNPartID`, puserID `createdBy`,pUserRoleID , fun_DatetimetoUTCDateTime(),puserID,pUserRoleID  \n" +
                "			FROM temp_CustMFGPn ;  \n" +
                "	END IF;  \n" +
                "	-- COMMIT;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 15-02-2022 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1312,'1.00','V1',' User Story 39702: [Main Branch] Configure show detail below individual group (Same as applying for Alternate Part section) - SHUBHAM '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1312:
            allDbChangesArray.push(
                /* **************************** New Script -> 17-02-2022 *********************************** */
                "DROP procedure IF EXISTS `Sproc_GetUMIDDetailsForManageStock`;  \n" +
                "CREATE PROCEDURE `Sproc_GetUMIDDetailsForManageStock`(  \n" +
                "IN pInventoryType VARCHAR(5),  \n" +
                "IN pWOID INT,  \n" +
                "IN pPackingSlipDetID INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	IF(pInventoryType = 'AI') THEN  \n" +
                "		SELECT  \n" +
                "			atk.woID,  \n" +
                "			IFNULL(css.pkgQty, 0) AS totalUMIDCreatedQty,  \n" +
                "			((SUM(atk.openingStock) - (SELECT  \n" +
                "					IFNULL(SUM(ss.shippedqty), 0)  \n" +
                "				FROM  \n" +
                "					shippedassembly ss  \n" +
                "				WHERE  \n" +
                "					((ss.isDeleted = 0)  \n" +
                "						AND (ss.woNumber = atk.woNumber)  \n" +
                "						AND (ss.partID = atk.partID)))) - IFNULL(css.pkgQty, 0)) AS availableQty  \n" +
                "		FROM assemblystock atk  \n" +
                "		LEFT JOIN (SELECT  \n" +
                "						cs.woID, SUM(cs.pkgQty) AS pkgQty  \n" +
                "					FROM  \n" +
                "					component_sid_stock cs  \n" +
                "					WHERE cs.isDeleted = 0 AND cs.woID =  pWOID GROUP BY cs.woID) css ON css.woID = atk.woID  \n" +
                "		WHERE atk.isDeleted = 0 AND atk.woID =  pWOID  \n" +
                "		GROUP BY atk.woNumber,atk.partID,atk.whID,atk.binID,atk.woID,atk.woNumber,css.pkgQty;  \n" +
                "    ELSEIF(pInventoryType = 'NI') THEN  \n" +
                "		SELECT  SUM(orgPkgUnit) AS totalUMIDCreatedQty,  \n" +
                "				SUM(packingSlipQty) AS packingSlipQty,  \n" +
                "                SUM(packingSlipQty) - SUM(orgPkgUnit) AS availableQty  \n" +
                "			FROM component_sid_stock c  \n" +
                "			JOIN component_sid_stock_packing_detail cp ON cp.refComponentSidStockID = c.id AND cp.isDeleted = 0  \n" +
                "			where  c.isDeleted = 0 AND cp.refPackingSlipDetailID = pPackingSlipDetID;  \n" +
                "    END IF;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 17-02-2022 *********************************** */
                "DROP procedure IF EXISTS `Sproc_GetSameCriteriaUMIDPackingSlipDet`;  \n" +
                "CREATE PROCEDURE `Sproc_GetSameCriteriaUMIDPackingSlipDet`(  \n" +
                "	IN pPackagingID INT,  \n" +
                "	IN pBinID INT,  \n" +
                "	IN pPartId INT,  \n" +
                "	IN pUIDId INT,  \n" +
                "    IN pType VARCHAR(50)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE v_PackingSlipId INT;  \n" +
                "    DECLARE v_PackingSlipDetailID INT;  \n" +
                "    DECLARE v_ReceivedStatus VARCHAR(10);  \n" +
                "    DECLARE v_PackingSlipNumber VARCHAR(55);  \n" +
                "    DECLARE v_PackingSlipModeStatus VARCHAR(5);  \n" +
                "  \n" +
                "    IF(pType = 'UC') THEN  \n" +
                "		SELECT			vucp.packingSlipID,			vucp.PartId,	vucp.packingSlipDetID,  \n" +
                "						vucp.packingSlipNumber,  	vucp.packingSlipSerialNumber,  \n" +
                "                        IFNULL(c.umidSPQ,0) AS partPackagingMinQty,  \n" +
                "						vucp.BinID,  \n" +
                "                        cp.name packagingType,  \n" +
                "                        cp.sourceName,  \n" +
                "                        fun_getBinNameByID(vucp.BinID) AS binName,  \n" +
                "						vucp.packagingID AS packaging,  \n" +
                "						vucp.InQty AS receivedQty,					vucp.UMIDCreatedQty,  \n" +
                "                        vucp.returnQty,  			vucp.BalanceQty,  \n" +
                "						vucp.receivedStatus,    	ps.packingSlipModeStatus,  \n" +
                "                        IF(vucp.receivedStatus = 'P' OR vucp.receivedStatus = 'R' OR ps.packingSlipModeStatus = 'D',TRUE,FALSE) AS isDisable,  \n" +
                "                        ps.isCustConsigned,			ps.CustomerID,  \n" +
                "                        psd.isLineCustConsigned, 	psd.LineCustomerID  \n" +
                "				FROM 		vu_umid_creation_pending vucp  \n" +
                "				INNER JOIN 	component c on c.id = vucp.partId AND c.isdeleted = 0  \n" +
                "                INNER JOIN 	component_packagingmst cp on cp.id = vucp.packagingID AND cp.isdeleted = 0  \n" +
                "				INNER JOIN	packing_slip_material_receive ps on ps.id = vucp.packingSlipID AND ps.isdeleted = 0  \n" +
                "				JOIN	packing_slip_material_receive_det psd on psd.id = vucp.packingSlipDetID AND psd.isdeleted = 0  \n" +
                "				WHERE 		vucp.BalanceQty > 0 AND vucp.BinID = pBinID AND vucp.partId = pPartId GROUP BY vucp.packingSlipDetID;  \n" +
                "    ELSE  \n" +
                "		SELECT  \n" +
                "				 p.refPackingSlipMaterialRecID, ps.packingSlipNumber, ps.packingSlipModeStatus, p.receivedStatus, cp.refPackingSlipDetailID  \n" +
                "			INTO v_PackingSlipId, v_PackingSlipNumber, v_PackingSlipModeStatus, v_ReceivedStatus, v_PackingSlipDetailID  \n" +
                "			FROM  \n" +
                "				component_sid_stock c  \n" +
                "				JOIN component_sid_stock_packing_detail cp ON cp.refComponentSidStockID = c.id AND cp.isDeleted = 0  \n" +
                "				JOIN packing_slip_material_receive_det p ON p.id = cp.refPackingSlipDetailID AND p.isDeleted = 0  \n" +
                "				JOIN packing_slip_material_receive ps ON p.refPackingSlipMaterialRecID = ps.id  AND ps.isDeleted = 0  \n" +
                "				AND c.isDeleted = 0 AND c.id = pUIDId;  \n" +
                "  \n" +
                "		SELECT  \n" +
                "			packingSlipID, packagingID, BinID, PartId, nickname, InQty, UMIDCreatedQty, returnQty, BalanceQty, receivedStatus,  \n" +
                "			fun_getMfgCodeAndNameByPartID(PartId) mfgCodeName,  \n" +
                "			fun_getBinNameByID(BinID) binName,  \n" +
                "			fun_getPackingSlipNumberById(packingSlipID) packingSlipNumber,  \n" +
                "			fun_getPackagingNameByID(packagingID) packaging,  \n" +
                "			fun_getAssyPIDCodeByID(PartId) pidCode  \n" +
                "		FROM  \n" +
                "			vu_umid_creation_pending vu  \n" +
                "		WHERE  \n" +
                "			EXISTS(SELECT  \n" +
                "				1  \n" +
                "				FROM  \n" +
                "				component_sid_stock t WHERE  \n" +
                "					t.fromBin = vu.BinID  \n" +
                "					AND t.refcompid = vu.PartId  \n" +
                "					AND t.packaging = vu.packagingID  \n" +
                "					AND t.isDeleted = 0) AND packagingID = pPackagingID AND BinID = pBinID AND PartId = pPartId AND packingSlipID <> v_PackingSlipId AND receivedStatus = v_ReceivedStatus;  \n" +
                "		SELECT v_PackingSlipNumber AS packingSlipNumber, v_PackingSlipDetailID AS packingSlipDetID, v_PackingSlipModeStatus AS packingSlipModeStatus, IF(v_PackingSlipModeStatus = 'D',1,0) AS errorCode;  \n" +
                "    END IF;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 17-02-2022 *********************************** */
                "DROP procedure IF EXISTS `Sproc_retrive_kit_to_transfer`;  \n" +
                "CREATE PROCEDURE `Sproc_retrive_kit_to_transfer`(  \n" +
                "	pPageIndex INT,  \n" +
                "	pRecordPerPage INT,  \n" +
                "	pDeptID INT,  \n" +
                "	pSearchString VARCHAR(100),  \n" +
                "	pGlobalSearchKitSalesOrderDetID INT,  \n" +
                "	pGlobalSearchKitAssyID INT,  \n" +
                "	pSearchKitSalesOrderDetID INT,  \n" +
                "	pSearchKitAssyID INT,  \n" +
                "	pGlobalSearchBinString VARCHAR(1000),  \n" +
                "	pGlobalSearchUIDString VARCHAR(1000),  \n" +
                "	pIsCheckMRP TINYINT,  \n" +
                "	pIsCheckMWS TINYINT,  \n" +
                "	pIsCheckMRE TINYINT,  \n" +
                "    pIsCheckMRR TINYINT,  \n" +
                "	pIsCheckPRE TINYINT,  \n" +
                "	pIsCheckPPR TINYINT,  \n" +
                "	pIsCheckPNR TINYINT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255);  \n" +
                "	DECLARE v_ParentWHType VARCHAR(10);  \n" +
                "	DECLARE v_WhereClause VARCHAR(10000);  \n" +
                "	DECLARE v_WHTypeJoinClause VARCHAR(10000);  \n" +
                "	DECLARE v_WhereClauseFilter VARCHAR(10000);  \n" +
                "	DECLARE v_WhereBinInnerCondition VARCHAR(10000);  \n" +
                "	DECLARE v_WhereUMIDInnerCondition VARCHAR(10000);  \n" +
                "	DECLARE v_WhereKitFilterCondition VARCHAR(10000);  \n" +
                "    DECLARE v_WhereKitNameFilter VARCHAR(10000);  \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "	DECLARE vUTCDateTime datetime;  \n" +
                "  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
                "	SELECT fun_DatetimetoUTCDateTime() into vUTCDateTime;  \n" +
                "	SELECT parentWHType INTO v_ParentWHType FROM warehousemst WHERE ID = pDeptID AND deletedAt IS NULL;  \n" +
                "  \n" +
                "	IF(pPageIndex <> 0 AND pRecordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (pPageIndex -1) * pRecordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "     SET v_WHTypeJoinClause = CONCAT(\"  \n" +
                "			select  a.* ,  \n" +
                "					fun_getKitReturnStatus(a.pendingReleaseCount, a.releasedNotReturnedCount, a.returnedCount, a.readyToReturnCount, a.shortageReturnCount) AS kitReturnStatus  \n" +
                "				from  \n" +
                "							(SELECT 	        c.id,  \n" +
                "							c.salesOrderDetID,  \n" +
                "							c.refAssyId,  \n" +
                "							c.subAssyID,  \n" +
                "							c.plannKitNumber,  \n" +
                "							c.poQty,  \n" +
                "							c.poDueDate,  \n" +
                "							c.mfrLeadTime,  \n" +
                "							c.materialDockDate,  \n" +
                "							c.kitReleaseQty,  \n" +
                "							c.kitReleaseDate,  \n" +
                "							c.feasibilityWithAllocatedQty,  \n" +
                "                            c.actualKitReleaseDate,  \n" +
                "							c.releasedBy,  \n" +
                "							c.releaseTimeFeasibility,  \n" +
                "							c.kitStatus,  \n" +
                "							c.rushJob,  \n" +
                "							c.woStatusID,  \n" +
                "							c.refPlanId,  \n" +
                "							c.releasedNote,  \n" +
                "							c.releaseKitNumber,  \n" +
                "                            SUM(CASE WHEN c.kitReturnStatus ='NA' THEN 1 ELSE 0 END) over (  partition by c.salesOrderDetID,refAssyId,subAssyID) pendingReleaseCount,  \n" +
                "                            SUM(CASE WHEN c.kitReturnStatus ='NR' THEN 1 ELSE 0 END) over (  partition by c.salesOrderDetID,refAssyId,subAssyID) releasedNotReturnedCount,  \n" +
                "                            SUM(CASE WHEN c.kitReturnStatus ='FR' THEN 1 ELSE 0 END) over (  partition by c.salesOrderDetID,refAssyId,subAssyID) returnedCount,  \n" +
                "                            SUM(CASE WHEN c.kitReturnStatus ='RR' THEN 1 ELSE 0 END) over (  partition by c.salesOrderDetID,refAssyId,subAssyID) readyToReturnCount,  \n" +
                "                            SUM(CASE WHEN c.kitReturnStatus ='RS' THEN 1 ELSE 0 END) over (  partition by c.salesOrderDetID,refAssyId,subAssyID) shortageReturnCount,  \n" +
                "							c.woID,  \n" +
                "							c.workorderNumber,  \n" +
                "                            min(kitreleasedate)  over (  partition by c.salesOrderDetID,refAssyId,subAssyID) minKitReleaseDate,  \n" +
                "                             min(id)  over (  partition by c.salesOrderDetID,refAssyId,subAssyID) minkitid  \n" +
                "					FROM     vu_release_plan_detail AS c  \n" +
                "                      ) a where a.kitreleasedate = a.minKitReleaseDate  and a.id = a.minkitid \");  \n" +
                "  \n" +
                "  IF (pGlobalSearchBinString IS NOT NULL OR pGlobalSearchUIDString IS NOT NULL) THEN  \n" +
                "		IF (pGlobalSearchBinString IS NULL) THEN  \n" +
                "			SET v_WhereBinInnerCondition = CONCAT(\" csd.binId = csd.binId \");  \n" +
                "		ELSE  \n" +
                "			SET v_WhereBinInnerCondition = CONCAT(\"  \n" +
                "				csd.binId IN (  \n" +
                "						SELECT 	id  \n" +
                "						FROM 	binmst  \n" +
                "						WHERE 	isdeleted = 0  \n" +
                "								AND `Name` LIKE '%\", pGlobalSearchBinString , \"%'  \n" +
                "					)  \n" +
                "			\");  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF (pGlobalSearchUIDString IS NULL) THEN  \n" +
                "			SET v_WhereUMIDInnerCondition = CONCAT(\" ka.refUIDId = ka.refUIDId \");  \n" +
                "		ELSE  \n" +
                "			SET v_WhereUMIDInnerCondition = CONCAT(\"  \n" +
                "				ka.refUIDId IN (  \n" +
                "					SELECT 	id  \n" +
                "					FROM 	component_sid_stock  \n" +
                "					WHERE 	isdeleted = 0  \n" +
                "							AND uid LIKE '%\", pGlobalSearchUIDString ,\"%'  \n" +
                "				)  \n" +
                "			\");  \n" +
                "		END IF;  \n" +
                "		SET v_WhereClauseFilter = CONCAT(\"  \n" +
                "			EXISTS (  \n" +
                "				SELECT 		1  \n" +
                "				FROM 		kit_allocation ka  \n" +
                "				INNER JOIN 	component_sid_stock csd ON csd.id = ka.refUIDId  \n" +
                "				WHERE 		ka.refSalesOrderDetID = sd.id  \n" +
                "							AND ka.assyID = IFNULL(kad.partId, sd.partID)  \n" +
                "							AND ka.status = 'A'  \n" +
                "							AND (\", v_WhereBinInnerCondition ,\")  \n" +
                "							AND (\", v_WhereUMIDInnerCondition ,\")  \n" +
                "			)  \n" +
                "		\");  \n" +
                "	ELSE  \n" +
                "		SET v_WhereClauseFilter = CONCAT(\" 1 = 1 \");  \n" +
                "	END IF;  \n" +
                "	SET v_WhereClause = CONCAT(\" 1 = 1 \");  \n" +
                "  \n" +
                "	IF (pGlobalSearchKitSalesOrderDetID IS NOT NULL) THEN  \n" +
                "		SET v_WhereClause = CONCAT(v_WhereClause, \" AND  sd.id = \", pGlobalSearchKitSalesOrderDetID);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pSearchKitSalesOrderDetID IS NOT NULL) THEN  \n" +
                "		SET v_WhereClause = CONCAT(v_WhereClause, \" AND  sd.id = \", pSearchKitSalesOrderDetID);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pGlobalSearchKitAssyID IS NOT NULL) THEN  \n" +
                "		SET v_WhereClause = CONCAT(v_WhereClause, \"  \n" +
                "					AND  \n" +
                "						(  \n" +
                "							CASE  \n" +
                "								WHEN kad.partId IS NULL THEN  \n" +
                "									sd.partID = \", pGlobalSearchKitAssyID ,\"  \n" +
                "								ELSE  \n" +
                "									kad.partId = \", pGlobalSearchKitAssyID ,\"  \n" +
                "							END  \n" +
                "						)  \n" +
                "					 \");  \n" +
                "	ELSE  \n" +
                "		SET v_WhereClause = CONCAT(v_WhereClause, \"  \n" +
                "					AND  \n" +
                "						(  \n" +
                "							CASE  \n" +
                "								WHEN kad.partId IS NULL THEN  \n" +
                "									sd.partID = sd.partID  \n" +
                "								ELSE  \n" +
                "									kad.partId = kad.partId  \n" +
                "							END  \n" +
                "						)  \n" +
                "					 \");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pSearchKitAssyID IS NOT NULL) THEN  \n" +
                "		SET v_WhereClause = CONCAT(v_WhereClause, \"  \n" +
                "					AND	(  \n" +
                "							CASE  \n" +
                "								WHEN kad.partId IS NULL THEN  \n" +
                "									sd.partID = \", pSearchKitAssyID ,\"  \n" +
                "								ELSE  \n" +
                "									kad.partId = \", pSearchKitAssyID ,\"  \n" +
                "							END  \n" +
                "						)  \n" +
                "					\");  \n" +
                "	ELSE  \n" +
                "		SET v_WhereClause = CONCAT(v_WhereClause, \"  \n" +
                "					AND	(  \n" +
                "							CASE  \n" +
                "								WHEN kad.partId IS NULL THEN  \n" +
                "									sd.partID = sd.partID  \n" +
                "								ELSE  \n" +
                "									kad.partId = kad.partId  \n" +
                "							END  \n" +
                "						)  \n" +
                "					\");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	SET v_WhereKitNameFilter = \" 1 = 1 \";  \n" +
                "    IF(pSearchString IS NOT NULL OR pSearchString != '') THEN  \n" +
                "		SET v_WhereKitNameFilter = CONCAT(v_WhereKitNameFilter, \" AND  name LIKE '%\", pSearchString ,\"%' \");  \n" +
                "    END IF;  \n" +
                "  \n" +
                "	SET v_WhereKitFilterCondition = CONCAT(\" kitReturnStatus != 'Fully Returned' AND ( \");  \n" +
                "	IF (v_ParentWHType = 'M') THEN  \n" +
                "		IF (pIsCheckMRP = 1) THEN  \n" +
                "			SET v_WhereKitFilterCondition = CONCAT(v_WhereKitFilterCondition, \" kitReleaseStatus = 'Not Released' OR \");  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF (pIsCheckMRR = 1) THEN  \n" +
                "			SET v_WhereKitFilterCondition =  CONCAT(v_WhereKitFilterCondition, \" kitReleaseStatus = 'Ready To Release' OR \");  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF (pIsCheckMRE = 1) THEN  \n" +
                "			SET v_WhereKitFilterCondition = CONCAT(v_WhereKitFilterCondition, \" kitReleaseStatus = 'Fully Released' OR \");  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF (pIsCheckMWS = 1) THEN  \n" +
                "            SET v_WhereKitFilterCondition =  CONCAT(v_WhereKitFilterCondition, \" shortageLines > 0 OR \");  \n" +
                "		END IF;  \n" +
                "	ELSE  \n" +
                "		IF (pIsCheckPRE = 1) THEN  \n" +
                "			SET v_WhereKitFilterCondition = CONCAT(v_WhereKitFilterCondition, \" kitReleaseStatus = 'Fully Released' OR \");  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF (pIsCheckPPR = 1) THEN  \n" +
                "			SET v_WhereKitFilterCondition = CONCAT(v_WhereKitFilterCondition, \" kitReleaseStatus = 'Partially Released' OR \");  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF (pIsCheckPNR = 1) THEN  \n" +
                "			SET v_WhereKitFilterCondition = CONCAT(v_WhereKitFilterCondition, \" kitReleaseStatus = 'Not Released' OR \");  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "	SET v_WhereKitFilterCondition =  CONCAT(v_WhereKitFilterCondition, \" 1 = 0 ) \");  \n" +
                "  \n" +
                "	SET @vSQLMainQuery =  CONCAT(\"  \n" +
                "		SELECT k.* FROM  \n" +
                "			(SELECT	a.*,  \n" +
                "					(CASE WHEN a.kitReleaseIndicator IS NULL THEN 0 ELSE 1 END) AS shortageIndicatore,  \n" +
                "					FUNC_MISMATCHITEMFORKIT(a.refSalesOrderDetID, IFNULL(a.subAssyID,a.refAssyId), 'M', NULL, NULL) AS mismatchItem,  \n" +
                "					fun_getKitReleaseStatus(a.kitPlanPercentage,totalKitReleaseQty,totalPOReleaseQty,a.assyKitQty,a.assyPOQty,a.totalKitReleasePlan,a.pendingCount) kitReleaseStatus  \n" +
                "				FROM	(  \n" +
                "					SELECT 	sd.id refSalesOrderDetID,  \n" +
                "							sd.kitNumber,  \n" +
                "							IFNULL(kad.partId, sd.partID) assyID,  \n" +
                "							(CASE WHEN kad.partId IS NOT NULL THEN cs.mfgPN ELSE c.mfgPN END) assyName,  \n" +
                "							(CASE WHEN kad.partId IS NOT NULL THEN cs.PIDCode ELSE c.PIDCode END) assyPIDCode,  \n" +
                "							sd.partID assyMainId,  \n" +
                "							c.mfgPN assyMainName,  \n" +
                "							c.PIDCode assyMainPIDCode,  \n" +
                "							kad.partId assySubId,  \n" +
                "							cs.mfgPN assySubName,  \n" +
                "							cs.PIDCode assySubPIDCode,  \n" +
                "							CONCAT(c.PIDCode, ', ', s.poNumber, ', ', s.salesOrderNumber, ', ', sd.qty, (CASE WHEN sd.partID != kad.partId THEN CONCAT(' [', cs.PIDCode, ']') ELSE '' END)) `name`,  \n" +
                "							sd.kitNumber kitName,  \n" +
                "							s.id soId,  \n" +
                "							s.poNumber,  \n" +
                "							s.salesOrderNumber,  \n" +
                "							s.poDate,  \n" +
                "							sd.qty,  \n" +
                "							sd.kitQty,  \n" +
                "							kad.totalAssyBuildQty,  \n" +
                "							\", pDeptID ,\" AS deptID,  \n" +
                "							'\", v_ParentWHType ,\"' AS deptType,  \n" +
                "							fun_getWarehouseNameByID(\", pDeptID ,\") AS deptName,  \n" +
                "							IFNULL(b.uidCount, 0) uidCount,  \n" +
                "							IFNULL(b.binCount, 0) binCount,  \n" +
                "							ka.totalLines,  \n" +
                "							ka.shortageLines,  \n" +
                "							sd.isHotJob,  \n" +
                "							IFNULL(b.mismatchUMIDBin, 0) mismatchUMIDBin,  \n" +
                "                            r.name as  rohs,  \n" +
                "                         r.rohsIcon as rohsIcon,  \n" +
                "							/*fun_getRoHSNameByID(c.RoHSStatusID) AS rohs,  \n" +
                "							fun_getRoHSIconByID(c.RoHSStatusID) AS rohsIcon,  \n" +
                "							fun_getKitBuildFeasibility(sd.id, IFNULL(kad.partId, sd.partID)) kitBuildFeasibility,  */  \n" +
                "                             ka.minBuild kitBuildFeasibility,  \n" +
                "							fun_getSalesOrderDetailCompleteStatus(sd.id) salesOrderDetailCompleteStatus,  \n" +
                "							sp.totalKitPlan,  \n" +
                "							sp.pendingCount,  \n" +
                "							sp.totalKitReleasePlan,  \n" +
                "                            IFNULL(kad.perAssyBuildQty,0) * IFNULL(sd.qty,0) AS assyPOQty,  \n" +
                "							IFNULL(kad.perAssyBuildQty,0) * IFNULL(sd.kitQty,0) AS assyKitQty,  \n" +
                "							sp.totalKitReleaseQty,  \n" +
                "							sp.totalPOReleaseQty,  \n" +
                "							(  \n" +
                "								SELECT 	CONCAT(IFNULL(h.reason,''), ' - Halt by ', IFNULL(fun_getUserNameByEmployeID(h.holdEmployeeId), ''), ' on ', IFNULL(fun_ApplyCommonDateTimeFormatByParaValue(h.startDate,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"'), '')) poHalt  \n" +
                "								FROM 	holdunholdtrans h  \n" +
                "								WHERE 	h.refTransId = sd.id  \n" +
                "										AND h.refType = 'PO'  \n" +
                "										AND h.`status` = 'H'  \n" +
                "								ORDER BY h.id DESC  \n" +
                "								LIMIT 1  \n" +
                "							) poHalt,  \n" +
                "							(  \n" +
                "								SELECT 	GROUP_CONCAT(IFNULL(c.haltTooltip, '') SEPARATOR ' <br /> ' ) kitHalt  \n" +
                "								FROM 	(  \n" +
                "										SELECT 	a.haltTooltip  \n" +
                "										FROM 	(  \n" +
                "												SELECT 	CONCAT(IFNULL(h.reason, ''), ' - Halt by ', IFNULL(fun_getUserNameByEmployeID(h.holdEmployeeId), ''), ' on ', IFNULL(fun_ApplyCommonDateTimeFormatByParaValue(h.startDate,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"'), '')) haltTooltip  \n" +
                "												FROM 	holdunholdtrans h  \n" +
                "												WHERE 	h.refTransId = sd.id  \n" +
                "														AND h.refType = 'KR'  \n" +
                "														AND h.`status` = 'H'  \n" +
                "												ORDER BY h.id DESC  \n" +
                "												LIMIT 1  \n" +
                "										) a  \n" +
                "										UNION  \n" +
                "										SELECT 	b.haltTooltip  \n" +
                "										FROM 	(  \n" +
                "												SELECT 	CONCAT(IFNULL(h.reason, ''), ' - Halt by ', IFNULL(fun_getUserNameByEmployeID(h.holdEmployeeId), ''), ' on ', IFNULL(fun_ApplyCommonDateTimeFormatByParaValue(h.startDate,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"'), '')) haltTooltip  \n" +
                "												FROM 	holdunholdtrans h  \n" +
                "												WHERE 	h.refTransId = sd.id  \n" +
                "														AND h.refType = 'KA'  \n" +
                "														AND h.`status` = 'H'  \n" +
                "												ORDER BY h.id DESC  \n" +
                "												LIMIT 1  \n" +
                "										) b  \n" +
                "								) c  \n" +
                "							) kitHalt,  \n" +
                "							p.woID,  \n" +
                "							p.workorderNumber,  \n" +
                "							p.id AS id,  \n" +
                "							p.salesOrderDetID,  \n" +
                "							p.refAssyId,  \n" +
                "							p.subAssyID,  \n" +
                "							p.plannKitNumber,  \n" +
                "							p.poQty,  \n" +
                "							p.poDueDate,  \n" +
                "							p.mfrLeadTime,  \n" +
                "							p.materialDockDate,  \n" +
                "							p.kitReleaseQty,  \n" +
                "							p.kitReleaseDate,  \n" +
                "							(DATEDIFF(fun_ConvertUTCDatetimeToSpecificTimeZone('\",vUTCDateTime,\"','\",v_TimeZone,\"'), p.kitReleaseDate)) kitReleasedPassedDays,  \n" +
                "							p.feasibilityWithAllocatedQty,  \n" +
                "							fun_ApplyCommonDateTimeFormatByParaValue(p.actualKitReleaseDate,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') actualKitReleaseDate,  \n" +
                "							p.releasedBy,  \n" +
                "							p.releaseTimeFeasibility,  \n" +
                "							p.kitStatus,  \n" +
                "							p.rushJob,  \n" +
                "							p.woStatusID,  \n" +
                "							p.refPlanId,  \n" +
                "							p.releasedNote,  \n" +
                "							p.releaseKitNumber,  \n" +
                "							p.kitReturnStatus,  \n" +
                "							ka.kitPlanPercentage,  \n" +
                "							fun_getKitReleaseIndication(DATEDIFF(p.kitReleaseDate,'\",vUTCDateTime,\"'), IFNULL(ROUND((ka.shortageLines / ka.totalLines) * 100), 0), FALSE) kitReleaseIndicator,  \n" +
                "							ka.allocationUMIDCount allocationUMIDCount  \n" +
                "					FROM 		salesorderdet sd  \n" +
                "					INNER JOIN 	salesordermst s ON sd.refSalesOrderID = s.id  \n" +
                "					INNER JOIN	component c ON sd.partID = c.id  \n" +
                "					Inner Join rfq_rohsmst r on r.id = c.RoHSStatusID  \n" +
                "					LEFT JOIN  	kit_allocation_assy_detail kad ON kad.isDeleted = 0 AND kad.refSalesOrderDetID = sd.id  \n" +
                "					LEFT JOIN  	component cs ON kad.partId = cs.id  \n" +
                "					LEFT JOIN (  \n" +
                "							SELECT  salesOrderDetID, refAssyId, subAssyID,  \n" +
                "									COUNT(1) totalKitPlan,  \n" +
                "									SUM(CASE WHEN kitStatus = 'R' THEN 1 ELSE 0 END) totalKitReleasePlan,  \n" +
                "									SUM(CASE WHEN kitStatus = 'P' THEN 1 ELSE 0 END) pendingCount,  \n" +
                "									SUM(kitReleaseQty) totalKitReleaseQty,  \n" +
                "									SUM(poQty) totalPOReleaseQty  \n" +
                "									FROM salesorder_plan_detailsmst WHERE isDeleted = 0  \n" +
                "									GROUP BY salesOrderDetID, refAssyId, subAssyID  \n" +
                "						) AS sp ON sp.salesOrderDetID =  sd.id  AND sp.refAssyId = sd.partID  AND (CASE WHEN kad.partId = sd.partID THEN sp.subAssyID IS NULL ELSE sp.subAssyID = kad.partId END)  \n" +
                "					LEFT JOIN	(  \n" +
                "								SELECT 	a.refSalesOrderDetID,  \n" +
                "									a.assyID,  \n" +
                "									# a.binID,  \n" +
                "									COUNT(1) binCount,  \n" +
                "									SUM(a.uidCount) uidCount,  \n" +
                "									SUM(a.mismatchUMIDBin) mismatchUMIDBin  \n" +
                "								FROM 	(  \n" +
                "										SELECT 		k.refSalesOrderDetID,  \n" +
                "												k.assyID,  \n" +
                "												csd.binID,  \n" +
                "												COUNT(1) uidCount,  \n" +
                "												(  \n" +
                "													SELECT IF( EXISTS(  \n" +
                "														SELECT 	binId  \n" +
                "														FROM 	component_sid_stock  \n" +
                "														WHERE 	binID = csd.binID  \n" +
                "															AND isdeleted = 0  \n" +
                "															and isinstk  =1  \n" +
                "															AND id NOT IN (  \n" +
                "																SELECT 	refUIDId  \n" +
                "																FROM 	kit_allocation  \n" +
                "																WHERE	refSalesOrderDetID = k.refSalesOrderDetID  \n" +
                "																		AND assyID = k.assyID  \n" +
                "																		AND `status` = 'A'  \n" +
                "															)  \n" +
                "													), 1, 0)  \n" +
                "												) mismatchUMIDBin  \n" +
                "											FROM 		kit_allocation k  \n" +
                "											INNER JOIN 	component_sid_stock csd ON csd.id = k.refUIDId  \n" +
                "											INNER JOIN 	binmst b ON b.id = csd.binID  \n" +
                "											INNER JOIN 	warehousemst w ON w.id = b.warehouseID  \n" +
                "											WHERE		k.status = 'A'  \n" +
                "														AND	w.parentWHID = IFNULL(\", pDeptID ,\", w.parentWHID)  \n" +
                "														AND	csd.isDeleted = 0  \n" +
                "														AND	b.isDeleted = 0  \n" +
                "														AND	w.isDeleted = 0  \n" +
                "											GROUP BY 	k.refSalesOrderDetID, k.assyID, csd.binID  \n" +
                "									) AS a  \n" +
                "								GROUP BY   a.refSalesOrderDetID, a.assyID  \n" +
                "							) AS b ON b.refSalesOrderDetID = sd.id AND b.assyID = IFNULL(kad.partId, sd.partID)  \n" +
                "					LEFT JOIN 	(  \n" +
                "								SELECT 	k.refSalesOrderDetID,  \n" +
                "									k.assyID,  \n" +
                "									k.totalLines,  \n" +
                "									k.shortageLines,  \n" +
                "									k.kitAllocationPercentage kitPlanPercentage,  \n" +
                "									(CASE WHEN k.kitAllocationPercentage = 0 THEN 0 ELSE 1 END) AS allocationUMIDCount  ,  \n" +
                "                                    k.minBuild  \n" +
                "								FROM 	(  \n" +
                "										SELECT 	k.refSalesOrderDetID,  \n" +
                "											k.assyID,  \n" +
                "											COUNT(1) AS totalLines,  \n" +
                "											SUM((CASE WHEN (k.shortage > 0) THEN 1 ELSE 0 END)) AS shortageLines,  \n" +
                "											ROUND(SUM(CASE WHEN ((k.qpaWithDnp != 0 AND k.allocationPer > 100) OR k.isNotRequiredKitAllocation = 1) THEN 100 ELSE ROUND(IFNULL(k.allocationPer, 0), 2) END) / SUM(CASE WHEN k.qpaWithDnp != 0 THEN 1 ELSE 0 END), 2) AS kitAllocationPercentage  ,  \n" +
                "                                             min(minBuild) minBuild  \n" +
                "										FROM 	(  \n" +
                "												SELECT 	vk.refSalesOrderDetID,  \n" +
                "														vk.assyID,  vk.qpaWithDnp,  \n" +
                "														vk.isNotRequiredKitAllocation AS isNotRequiredKitAllocation,  \n" +
                "														IFNULL(((100 *  (CASE WHEN vk.connecterTypeID = -2 THEN IFNULL(vk.`allocatedpin`, 0) ELSE IFNULL(vk.`allocatedunit`, 0) END)) / (vk.`totalAssyBuildQty` * IFNULL(vk.`qpaWithDnp`, 0))), 0) AS `allocationPer`,  \n" +
                "														(CASE WHEN vk.connecterTypeID = -2 THEN vk.shortagePins ELSE vk.shortage END) AS shortage ,  \n" +
                "                                                        (  \n" +
                "															CASE  \n" +
                "																WHEN connecterTypeID = -2 THEN  \n" +
                "																	(IFNULL(allocatedpin, 0) / (IFNULL(qpaWithDnp, 0) * bomNumOfPosition))  \n" +
                "																ELSE  \n" +
                "																	(IFNULL(allocatedunit, 0) / IFNULL(qpaWithDnp, 0))  \n" +
                "  \n" +
                "															END  \n" +
                "														) AS minBuild  \n" +
                "												FROM 	vu_kit_allocation_detail vk  \n" +
                "                                                Inner join    salesorderdet sd on vk.refSalesorderdetid  = sd.id  AND sd.isDeleted = 0  \n" +
                "												WHERE    vk.`isNotRequiredKitAllocation` != 1 and vk.qpaWithDnp != 0  \n" +
                "											) k  GROUP BY k.refSalesOrderDetID, k.assyID  \n" +
                "									) k  \n" +
                "							) AS ka ON ka.refSalesOrderDetID = sd.id AND ka.assyID =  IFNULL(kad.partId, sd.partID)  \n" +
                "					LEFT JOIN 	(\", v_WHTypeJoinClause ,\") p ON p.salesOrderDetID =  sd.id  \n" +
                "									AND p.refAssyId = sd.partID  \n" +
                "									AND (CASE WHEN kad.partId = sd.partID THEN p.subAssyID IS NULL ELSE p.subAssyID = kad.partId END)  \n" +
                "					WHERE 		sd.isDeleted = 0 and sd.partCategory=3  \n" +
                "								AND 	s.isDeleted = 0  \n" +
                "								AND 	(\", v_WhereClauseFilter ,\")  \n" +
                "								AND 	(\", v_WhereClause ,\")  \n" +
                "				) AS a  \n" +
                "		) AS k WHERE 	(\", v_WhereKitFilterCondition ,\")  AND (\", v_WhereKitNameFilter ,\")  \n" +
                "	\");  \n" +
                "  \n" +
                "	SET @SQLStatementCount = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@vSQLMainQuery,\" ) c \");  \n" +
                "	PREPARE query2 FROM @SQLStatementCount;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "  IF (v_ParentWHType = 'M') THEN  \n" +
                "		SET @vSQLMainQuery =  CONCAT(@vSQLMainQuery, \"  \n" +
                "			ORDER BY isHotJob DESC,  \n" +
                "				 shortageIndicatore DESC,  \n" +
                "				 kitReleaseDate ASC  \n" +
                "			\");  \n" +
                "	ELSE  \n" +
                "		SET @vSQLMainQuery =  CONCAT(@vSQLMainQuery, \"  \n" +
                "			ORDER BY isHotJob DESC,  \n" +
                "				 shortageIndicatore DESC,  \n" +
                "				 actualKitReleaseDate ASC  \n" +
                "			\");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempKitDet;  \n" +
                "	SET @vSQLMainQuery = CONCAT(\"CREATE TEMPORARY TABLE IF NOT EXISTS tempKitDet AS \", @vSQLMainQuery, \" \", rowNumWhere);  \n" +
                "	PREPARE mainQuery FROM @vSQLMainQuery;  \n" +
                "    EXECUTE mainQuery;  \n" +
                "	DEALLOCATE PREPARE mainQuery;  \n" +
                "  \n" +
                "	SELECT * FROM tempKitDet;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 17-02-2022 *********************************** */
                "DROP procedure IF EXISTS `Sproc_retrive_UID_to_transfer`;  \n" +
                "CREATE PROCEDURE `Sproc_retrive_UID_to_transfer`(  \n" +
                "	pPageIndex INT,  \n" +
                "	pRecordPerPage INT,  \n" +
                "	pBinID INT,  \n" +
                "	pGlobalSearchUIDString VARCHAR(1000),  \n" +
                "	pSearchUIDString VARCHAR(1000),  \n" +
                "	pSearchString VARCHAR(100),  \n" +
                "	pClusterWHID INT,  \n" +
                "	pKitSalesOrderDetID INT,  \n" +
                "	pKitAssyID INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE v_Where VARCHAR(10000);  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255);  \n" +
                "  \n" +
                "	SET v_Where = \"\";  \n" +
                "  \n" +
                "	IF(pPageIndex <> 0 AND pRecordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (pPageIndex -1) * pRecordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "    IF (pGlobalSearchUIDString IS NOT NULL ) THEN  \n" +
                "		SET v_Where = CONCAT(v_Where, \" AND css.uid LIKE '%\", pGlobalSearchUIDString ,\"%'\");  \n" +
                "	END IF;  \n" +
                "  	IF ( pSearchUIDString IS NOT NULL) THEN  \n" +
                "		SET v_Where = CONCAT(v_Where, \" AND css.uid LIKE '%\", pSearchUIDString ,\"%' \");  \n" +
                "	END IF;  \n" +
                "	/* old Logic  \n" +
                "    IF (pGlobalSearchUIDString IS NOT NULL AND pSearchUIDString IS NOT NULL) THEN  \n" +
                "		SET v_Where = CONCAT(v_Where, \" AND (css.id IN (  \n" +
                "				SELECT 	id  \n" +
                "				FROM 	component_sid_stock  \n" +
                "				WHERE 	isdeleted = 0  \n" +
                "						AND (uid LIKE '%\", pGlobalSearchUIDString ,\"%' AND uid LIKE '%\", pSearchUIDString ,\"%')  \n" +
                "			)  \n" +
                "		)\");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pGlobalSearchUIDString IS NOT NULL AND pSearchUIDString IS NULL) THEN  \n" +
                "		SET v_Where = CONCAT(v_Where, \" AND css.id IN (  \n" +
                "			SELECT 	id  \n" +
                "			FROM 	component_sid_stock  \n" +
                "			WHERE 	deletedAt IS NULL  \n" +
                "					AND uid LIKE '%\", pGlobalSearchUIDString ,\"%'  \n" +
                "		)\");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pGlobalSearchUIDString IS NULL AND pSearchUIDString IS NOT NULL) THEN  \n" +
                "		SET v_Where = CONCAT(v_Where, \" AND css.id IN (  \n" +
                "			SELECT 	id  \n" +
                "			FROM 	component_sid_stock  \n" +
                "			WHERE 	deletedAt IS NULL  \n" +
                "					AND uid LIKE '%\", pSearchUIDString ,\"%'  \n" +
                "		)\");  \n" +
                "	END IF;  \n" +
                "  */  \n" +
                "	IF (pBinID IS NOT NULL) THEN  \n" +
                "		SET v_Where = CONCAT(v_Where, \" AND  css.binID  = \", pBinID);  \n" +
                "	END IF;  \n" +
                "   IF (pBinID IS  NULL and pClusterWHID is null  ) THEN  /*Xfer Screen if bin and warehouse both nulll then dont return any result of UMID*/  \n" +
                "		SET v_Where = CONCAT(v_Where, \" AND  1 = 0\");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pClusterWHID IS NOT NULL and pBinID is null) THEN  \n" +
                "		SET v_Where = CONCAT(v_Where, \" AND  css.binID  in (SELECT id FROM binmst bm WHERE   isdeleted = 0 and  \n" +
                "															 bm.warehouseid in (Select id from warehousemst where id = \", pClusterWHID, \" and warehouseType ='SMC' )	)\");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pSearchString IS NOT NULL) THEN  \n" +
                "		SET v_Where = CONCAT(v_Where, \" AND  css.uid like '%\", pSearchString ,\"%'\");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS Results;  \n" +
                "	SET @SQLStatement1 = CONCAT(\"  \n" +
                "				SELECT 		css.id,  \n" +
                "						css.scanlabel,  \n" +
                "						css.pkgQty,  \n" +
                "						css.uid,  \n" +
                "						c.PIDCode,  \n" +
                "						c.mfgcodeID,  \n" +
                "						c.mfgPN,  \n" +
                "						mfg.mfgCode,  \n" +
                "						mfg.mfgName,  \n" +
                "						ro.rohsIcon,  \n" +
                "						ro.name AS rohsName,  \n" +
                "						css.nickName,  \n" +
                "						css.binID,  \n" +
                "						cast(NULL as char(50)) binName,  \n" +
                "						0 warehouseID,  \n" +
                "						cast(NULL as char(50)) warehouseName,  \n" +
                "						0 parentWHID,  \n" +
                "						cast(NULL as char(50)) deptName,  \n" +
                "						css.uom,  \n" +
                "						cast('' as char(100)) uomName,  \n" +
                "						false isAllocatedToKit,  \n" +
                "						css.receiveMaterialType,  \n" +
                "						css.refcompid,  \n" +
                "						css.pkgUnit,  \n" +
                "						false isBelongsToSameKit,  \n" +
                "						fun_getMountingTypeNameByID(c.mountingTypeID) mountingTypeName,  \n" +
                "						0 refSalesOrderDetID, 	0 assyID,  \n" +
                "						fun_getAllocatedKitsNameByID(css.id, 'A') allocatedToKits,  \n" +
                "						cast(NULL as char(50)) warehouseType,  \n" +
                "						c.isCustom,  \n" +
                "						css.updatedAt,  \n" +
                "                        fun_ConvertInternalDateCodeIntoDateInDefaultFormate(css.dateCode) internalDateCodeInDate  \n" +
                "				FROM 		component_sid_stock css  \n" +
                "				LEFT OUTER JOIN component c ON c.id=css.refcompid AND c.isdeleted=0  \n" +
                "				LEFT OUTER JOIN rfq_rohsmst ro ON ro.id=c.RoHSStatusID AND ro.isdeleted=0  \n" +
                "				LEFT OUTER JOIN mfgcodemst mfg ON mfg.id=c.mfgcodeID AND mfg.isdeleted=0  \n" +
                "				WHERE	css.isdeleted = 0  \n" +
                "							AND css.isinStk = 1  \n" +
                "			\", v_Where , \" ORDER BY css.updatedAt DESC \"  \n" +
                "		);  \n" +
                "	SET @SQLStatementCount = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@SQLStatement1,\" ) c \");  \n" +
                "	PREPARE query1 FROM @SQLStatementCount;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS Results;  \n" +
                "	SET @SQLStatement1 = CONCAT(\"CREATE TEMPORARY TABLE IF NOT EXISTS Results AS \", @SQLStatement1, \" \", rowNumWhere);  \n" +
                "	PREPARE mainQuery FROM @SQLStatement1;  \n" +
                "	EXECUTE mainQuery;  \n" +
                "	DEALLOCATE PREPARE mainQuery;  \n" +
                "  \n" +
                "	-- SET Bin name  \n" +
                "	UPDATE 	Results r, binmst b  \n" +
                "	SET   	r.binName = b.Name, r.warehouseID = b.WarehouseID  \n" +
                "	WHERE	r.binID = b.id;  \n" +
                "  \n" +
                "	-- SET warehouse name  \n" +
                "	UPDATE 	Results r, warehousemst w  \n" +
                "	SET   	r.warehouseName = w.Name, r.parentWHID = w.parentWHID, r.warehouseType = w.warehouseType  \n" +
                "	WHERE	r.warehouseID = w.id;  \n" +
                "  \n" +
                "	-- SET department name  \n" +
                "	UPDATE 	Results r, warehousemst w  \n" +
                "	SET   	r.deptName = w.Name  \n" +
                "	WHERE	r.parentWHID = w.id;  \n" +
                "  \n" +
                "	-- Set UOM  \n" +
                "	UPDATE 	Results r, uoms u  \n" +
                "	SET   	r.uomName = u.unitName  \n" +
                "	WHERE	r.uom = u.id;  \n" +
                "  \n" +
                "	-- Set UMID is allocated to kit  \n" +
                "	IF (pKitSalesOrderDetID IS NOT NULL AND pKitAssyID IS NOT NULL) THEN  \n" +
                "		UPDATE 	Results r, kit_allocation k  \n" +
                "		SET   	r.isAllocatedToKit = TRUE,  \n" +
                "			r.refSalesOrderDetID = k.refSalesOrderDetID,  \n" +
                "			r.assyID = k.assyID,  \n" +
                "			r.isBelongsToSameKit = (CASE WHEN k.refSalesOrderDetID = pKitSalesOrderDetID AND k.assyID = pKitAssyID THEN TRUE ELSE FALSE END)  \n" +
                "		WHERE	r.id = k.refUIDId  \n" +
                "		AND 	k.status = 'A'  \n" +
                "		AND 	k.refSalesOrderDetID = pKitSalesOrderDetID  \n" +
                "		AND 	k.assyID = pKitAssyID;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT * FROM Results  ORDER BY isAllocatedToKit ASC, internalDateCodeInDate ASC  \"); -- order by isBelongsToSameKit desc  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 17-02-2022 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1313,'1.00','V1','Bug 41365 & User Story 39783 - CP'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1313:
            allDbChangesArray.push(
                /* **************************** New Script -> 04-02-2022 *********************************** */
                "select pageID into @parentPage from page_detail where menuRoute= 'Materialmanagement';  \n" +
                "update page_detail  \n" +
                "set pageRoute ='app.transaction.shipmentsummary',  \n" +
                "	pageURL ='/shipmentsummary', parentPageID=@parentPage ,displayMenuName='Customer Open Sales Order & Shipment Summary'  \n" +
                "where menuRoute='Materialmanagement.salesordershipment';  \n" +
                "  \n" +
                "select pageID into @parentPage from page_detail where menuRoute= 'transaction';  \n" +
                "update page_detail  \n" +
                "set pageRoute ='app.transaction.salesordershipment',  \n" +
                "	pageURL ='/salesordershipment', parentPageID= @parentPage  \n" +
                "where menuRoute='transaction.salesordershipment';  \n" +
                /* **************************** Add Script Version -> 04-02-2022  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1314,'1.00','V1','Update Page Detail for Shipment Summary  - Shweta '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1314:
            allDbChangesArray.push(
                /* **************************** New Script -> 21-02-2021  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_CreateRfqConsolidateLineItem` ;  \n" +
                "CREATE PROCEDURE `Sproc_CreateRfqConsolidateLineItem`(  \n" +
                "	IN prfqAssyID INT,  \n" +
                "    IN ppartID INT,  \n" +
                "	IN puserID INT,  \n" +
                "    IN pBOMVersion VARCHAR(50)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "DECLARE EXIT HANDLER FOR SQLEXCEPTION  \n" +
                "BEGIN  \n" +
                "	ROLLBACK;  \n" +
                "	RESIGNAL;  \n" +
                "END;  \n" +
                "DECLARE EXIT HANDLER FOR SQLWARNING  \n" +
                "  BEGIN  \n" +
                "	ROLLBACK;  \n" +
                "	RESIGNAL;  \n" +
                "END;  \n" +
                " DROP TEMPORARY TABLE IF EXISTS temp_Sproc_CreateRfqConsolidateLineItem;  \n" +
                "  \n" +
                "  START TRANSACTION;  \n" +
                "	SET SESSION group_concat_max_len = 500000;  \n" +
                "# consoliadte select  \n" +
                "		 DROP TEMPORARY TABLE IF EXISTS tempconsolidate;  \n" +
                "		 CREATE TEMPORARY TABLE IF NOT EXISTS tempconsolidate AS  \n" +
                "		 SELECT id FROM  rfq_consolidated_mfgpn_lineitem WHERE isDeleted=0 AND rfqAssyID = prfqAssyID;  \n" +
                "  \n" +
                "  /* call SP for generate consolidated data in temp_Sproc_CreateRfqConsolidateLineItem temporary table */  \n" +
                "        CALL Sproc_CreateConsolidateDataForPart(prfqAssyID, ppartID);  \n" +
                "  \n" +
                "# Delete consolidated lineItem if consolidatedLineItemIDs  change  \n" +
                "		UPDATE rfq_consolidated_mfgpn_lineitem cl  \n" +
                "        SET  \n" +
                "        cl.isDeleted = TRUE,  \n" +
                "        cl.deletedAt = fun_DatetimetoUTCDateTime(),  \n" +
                "        cl.deletedBy = puserID  \n" +
                "        WHERE cl.rfqAssyID = prfqAssyID AND cl.isDeleted = 0  \n" +
                "        AND NOT EXISTS (  \n" +
                "			SELECT  1 FROM (  \n" +
                "				SELECT rcl.id FROM rfq_consolidated_mfgpn_lineitem rcl  \n" +
                "				INNER JOIN temp_Sproc_CreateRfqConsolidateLineItem R ON R.rfqAssyIDORrefSalesOrderdetID = rcl.rfqAssyID AND rcl.consolidatedLineItemIDs = R.consolidatedLineItemIDs AND R.category <> 3  \n" +
                "				WHERE rcl.rfqAssyID = prfqAssyID  \n" +
                "				AND rcl.isDeleted = 0  \n" +
                "			)a WHERE a.id = cl.id  \n" +
                "        );  \n" +
                "  \n" +
                "# insert Consolidated lineItems  \n" +
                "		INSERT INTO `rfq_consolidated_mfgpn_lineitem`  \n" +
                "        (`lineID`,`isInstall`,`isPurchase`,`rfqAssyID`,`rfqLineItemID`,`uomID`,  \n" +
                "        `qpa`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`numOfPosition`,`isMultiple`,`consolidatedLineItemIDs`,`refDesig`,`consolidatedpartlineID`,`isqpaMismatch`,  \n" +
                "        `restrictCPNUseInBOMStep`, `restrictCPNUsePermanentlyStep`, `restrictCPNUseWithPermissionStep`, `custPNID`,`consolidateRestrictPartDetail`,`consolidatedPartWithFlagDetail`)  \n" +
                "        SELECT R.`lineID`,R.`isInstall`,R.`isPurchaseWithDNP`,prfqAssyID `rfqAssyID`,  \n" +
                "        R.`rfqLineItemsID`,R.`uomID`, R.`qpa`, fun_DatetimetoUTCDateTime() `createdAt`, puserID `createdBy`, fun_DatetimetoUTCDateTime() `updatedAt`,  \n" +
                "        puserID `updatedBy`, R.`numOfPosition`,(CASE WHEN (multiple > 1) THEN '1' WHEN (multiple = 1) THEN '0' ELSE '0' END) AS `isMultiple`,  \n" +
                "        R.`consolidatedLineItemIDs`, R.`consolidatedrefDesig`,R.`consolidatedpartlineID`,R.`isqpaMismatch`, R.`restrictCPNUseInBOMStep`, R.`restrictCPNUsePermanentlyStep`,  \n" +
                "        R.`restrictCPNUseWithPermissionStep`, R.`custPNID`,R.`consolidateRestrictPartDetail`, R.`consolidatedPartWithFlagDetail`  \n" +
                "        FROM temp_Sproc_CreateRfqConsolidateLineItem R  \n" +
                "        LEFT JOIN rfq_consolidated_mfgpn_lineitem cl ON cl.consolidatedLineItemIDs = R.consolidatedLineItemIDs AND cl.rfqAssyID = prfqAssyID  \n" +
                "        AND cl.rfqAssyID = R.rfqAssyIDORrefSalesOrderdetID AND cl.isDeleted = 0  \n" +
                "        WHERE cl.id IS NULL AND R.category <> 3;  \n" +
                "# insert Consolidated lineItems Quentity  \n" +
                "		INSERT INTO `rfq_consolidate_mfgpn_lineitem_quantity`  \n" +
                "        (`qtyID`,`consolidateID`,`createdBy`,`createdAt`,`updatedBy`,`updatedAt`,`rfqPriceGroupId`,`rfqPriceGroupDetailId`)  \n" +
                "        SELECT rq.id `qtyID`, cl.id `consolidateID`,puserID `createdBy`,fun_DatetimetoUTCDateTime() `createdAt`, puserID `updatedBy`,fun_DatetimetoUTCDateTime() `updatedAt`,rq.rfqPriceGroupId ,rq.rfqPriceGroupDetailId  \n" +
                "        FROM rfq_consolidated_mfgpn_lineitem cl  \n" +
                "        JOIN rfq_assy_quantity rq ON rq.rfqAssyID = cl.rfqAssyID AND rq.isDeleted = 0  \n" +
                "        LEFT JOIN rfq_consolidate_mfgpn_lineitem_quantity clq ON clq.consolidateID = cl.id AND clq.qtyID = rq.id  \n" +
                "        WHERE cl.rfqAssyID = prfqAssyID AND cl.isDeleted = 0 AND clq.id IS NULL;  \n" +
                "# Update Consilidated LineItems Quantity  \n" +
                "  \n" +
                "        UPDATE rfq_consolidate_mfgpn_lineitem_quantity rq, (SELECT qpa,consolidatedLineItemIDs FROM temp_Sproc_CreateRfqConsolidateLineItem WHERE category <> 3) Rs,  \n" +
                "        (  \n" +
                "			SELECT cl.id ,cl.qpa,cl.consolidatedLineItemIDs,consolidateRestrictPartDetail FROM rfq_consolidated_mfgpn_lineitem cl  \n" +
                "			WHERE cl.rfqAssyID = prfqAssyID AND cl.isDeleted = 0 AND cl.id  IS NOT NULL  \n" +
                "		) rcl  \n" +
                "        SET  \n" +
                "        rq.updatedAt = fun_DatetimetoUTCDateTime(),  \n" +
                "        rq.updatedBy = puserID,  \n" +
                "        rq.unitPrice= (CASE WHEN (rcl.qpa = Rs.qpa) THEN rq.unitPrice ELSE NULL END),  \n" +
                "        rq.quoteqty=(CASE WHEN (rcl.qpa = Rs.qpa) THEN rq.quoteqty ELSE NULL END),  \n" +
                "        rq.rfqQtySupplierID= (CASE WHEN (rcl.qpa = Rs.qpa) THEN rq.rfqQtySupplierID ELSE NULL END),  \n" +
                "        rq.finalPrice = (CASE WHEN (rcl.qpa = Rs.qpa) THEN rq.finalPrice ELSE NULL END)  \n" +
                "        WHERE rq.consolidateID = rcl.id AND rcl.qpa <> Rs.qpa AND rcl.consolidatedLineItemIDs = Rs.consolidatedLineItemIDs  \n" +
                "        AND rq.isDeleted = 0;  \n" +
                "  \n" +
                "# Update Consilidated LineItems Quantity  \n" +
                "		UPDATE rfq_consolidate_mfgpn_lineitem_quantity rq, (SELECT numOfPosition, consolidatedLineItemIDs FROM temp_Sproc_CreateRfqConsolidateLineItem WHERE category <> 3) Rs,  \n" +
                "        (  \n" +
                "			SELECT cl.id ,IFNULL(cl.numOfPosition,0) AS numOfPosition, cl.consolidatedLineItemIDs,consolidateRestrictPartDetail FROM rfq_consolidated_mfgpn_lineitem cl  \n" +
                "            WHERE cl.rfqAssyID = prfqAssyID AND cl.isDeleted = 0 AND cl.id IS NOT NULL  \n" +
                "		) rcl  \n" +
                "        SET  \n" +
                "        rq.updatedAt = fun_DatetimetoUTCDateTime(),  \n" +
                "        rq.updatedBy = puserID,  \n" +
                "        rq.unitPrice= (CASE WHEN (IFNULL(rcl.numOfPosition,0)  = Rs.numOfPosition) THEN rq.unitPrice ELSE NULL END),  \n" +
                "        rq.quoteqty=(CASE WHEN (IFNULL(rcl.numOfPosition,0)  = Rs.numOfPosition) THEN rq.quoteqty ELSE NULL END),  \n" +
                "        rq.rfqQtySupplierID= (CASE WHEN (IFNULL(rcl.numOfPosition,0)  = Rs.numOfPosition) THEN rq.rfqQtySupplierID ELSE NULL END),  \n" +
                "        rq.finalPrice = (CASE WHEN (IFNULL(rcl.numOfPosition,0)  = Rs.numOfPosition) THEN rq.finalPrice ELSE NULL END)  \n" +
                "        WHERE rq.consolidateID = rcl.id AND rcl.consolidatedLineItemIDs = Rs.consolidatedLineItemIDs AND rq.isDeleted = 0  \n" +
                "        AND IFNULL(rcl.numOfPosition,0)  <> Rs.numOfPosition;  \n" +
                "# Update Consilidated LineItems Quantity  \n" +
                "		UPDATE rfq_consolidate_mfgpn_lineitem_quantity rq, (SELECT consolidatedLineItemIDs, consolidateRestrictPartDetail FROM temp_Sproc_CreateRfqConsolidateLineItem WHERE category <> 3) Rs,  \n" +
                "        (  \n" +
                "			SELECT rl.id, rl.consolidatedLineItemIDs, rl.consolidateRestrictPartDetail  \n" +
                "            FROM rfq_consolidated_mfgpn_lineitem rl  \n" +
                "            WHERE rl.rfqAssyID = prfqAssyID AND rl.isDeleted = 0  \n" +
                "		) rcl  \n" +
                "         SET  \n" +
                "        rq.updatedAt = fun_DatetimetoUTCDateTime(),  \n" +
                "        rq.updatedBy = puserID,  \n" +
                "        rq.isBomUpdate=(CASE WHEN ((rcl.consolidateRestrictPartDetail != rs.consolidateRestrictPartDetail) AND (rq.selectionMode='Auto')) THEN 0  WHEN ((rcl.consolidateRestrictPartDetail = rs.consolidateRestrictPartDetail) OR ((rcl.consolidateRestrictPartDetail != rs.consolidateRestrictPartDetail) AND (rq.selectionMode!='Auto'))) THEN 1 ELSE 0 END),  \n" +
                "        rq.unitPrice= (CASE WHEN ((rcl.consolidateRestrictPartDetail != rs.consolidateRestrictPartDetail) AND (rq.selectionMode='Auto')) THEN NULL  WHEN ((rcl.consolidateRestrictPartDetail = rs.consolidateRestrictPartDetail) OR ((rcl.consolidateRestrictPartDetail != rs.consolidateRestrictPartDetail) AND (rq.selectionMode!='Auto'))) THEN rq.unitPrice ELSE NULL END),  \n" +
                "        rq.quoteqty= (CASE WHEN ((rcl.consolidateRestrictPartDetail != rs.consolidateRestrictPartDetail) AND (rq.selectionMode='Auto')) THEN NULL  WHEN ((rcl.consolidateRestrictPartDetail = rs.consolidateRestrictPartDetail) OR ((rcl.consolidateRestrictPartDetail != rs.consolidateRestrictPartDetail) AND (rq.selectionMode!='Auto'))) THEN rq.quoteqty ELSE NULL END),  \n" +
                "        rq.rfqQtySupplierID= (CASE WHEN ((rcl.consolidateRestrictPartDetail != rs.consolidateRestrictPartDetail) AND (rq.selectionMode='Auto')) THEN NULL  WHEN ((rcl.consolidateRestrictPartDetail = rs.consolidateRestrictPartDetail) OR ((rcl.consolidateRestrictPartDetail != rs.consolidateRestrictPartDetail) AND (rq.selectionMode!='Auto'))) THEN rq.rfqQtySupplierID ELSE NULL END),  \n" +
                "        rq.finalPrice =(CASE WHEN ((rcl.consolidateRestrictPartDetail != rs.consolidateRestrictPartDetail) AND (rq.selectionMode='Auto')) THEN NULL  WHEN ((rcl.consolidateRestrictPartDetail = rs.consolidateRestrictPartDetail) OR ((rcl.consolidateRestrictPartDetail != rs.consolidateRestrictPartDetail) AND (rq.selectionMode!='Auto'))) THEN rq.finalPrice ELSE NULL END)  \n" +
                "        WHERE rq.consolidateID = rcl.id AND rcl.consolidateRestrictPartDetail != rs.consolidateRestrictPartDetail AND rcl.consolidatedLineItemIDs = Rs.consolidatedLineItemIDs  \n" +
                "        AND rq.isDeleted = 0;  \n" +
                "  \n" +
                "# Update Consilidated LineItems  \n" +
                "		UPDATE rfq_consolidated_mfgpn_lineitem cl,  \n" +
                "        (  \n" +
                "			SELECT isInstall, isPurchaseWithDNP, numOfPosition, rfqLineItemsID, qpa, uomID, consolidatedrefDesig, lineID, consolidatedLineItemIDs,  \n" +
                "				   consolidatedpartlineID, consolidateRestrictPartDetail, restrictCPNUseWithPermissionStep, restrictCPNUsePermanentlyStep, restrictCPNUseInBOMStep,  \n" +
                "                   custPNID, isqpaMismatch, consolidatedPartWithFlagDetail  \n" +
                "			FROM temp_Sproc_CreateRfqConsolidateLineItem WHERE category <> 3  \n" +
                "		) R  \n" +
                "        SET  \n" +
                "        cl.isInstall = R.isInstall ,  \n" +
                "        cl.isPurchase = R.isPurchaseWithDNP,  \n" +
                "        cl.numOfPosition = R.numOfPosition,  \n" +
                "        cl.updatedAt = fun_DatetimetoUTCDateTime(),  \n" +
                "        cl.rfqLineItemID = R.rfqLineItemsID,  \n" +
                "        cl.qpa = R.qpa,  \n" +
                "        cl.uomID = R.uomID,  \n" +
                "        cl.refDesig = R.consolidatedrefDesig,  \n" +
                "        cl.lineID = R.lineID,  \n" +
                "        cl.consolidatedLineItemIDs = R.consolidatedLineItemIDs,  \n" +
                "        cl.consolidatedpartlineID = R.consolidatedpartlineID,  \n" +
                "        cl.consolidateRestrictPartDetail = R.consolidateRestrictPartDetail,  \n" +
                "        cl.updatedBy = puserID,  \n" +
                "        cl.restrictCPNUseWithPermissionStep = R.restrictCPNUseWithPermissionStep,  \n" +
                "        cl.restrictCPNUsePermanentlyStep = R.restrictCPNUsePermanentlyStep,  \n" +
                "        cl.restrictCPNUseInBOMStep = R.restrictCPNUseInBOMStep,  \n" +
                "        cl.custPNID = R.custPNID,  \n" +
                "        cl.isqpaMismatch = R.isqpaMismatch,  \n" +
                "        cl.consolidatedPartWithFlagDetail = R.consolidatedPartWithFlagDetail  \n" +
                "        WHERE cl.rfqAssyID = prfqAssyID AND cl.consolidatedLineItemIDs = R.consolidatedLineItemIDs AND cl.id  IS NOT NULL  \n" +
                "        AND cl.isDeleted = 0;  \n" +
                "  \n" +
                "     # Manage table before executing alternate part table  \n" +
                "                DROP TEMPORARY TABLE IF EXISTS tempconsolidateAlternatePart;  \n" +
                "		 CREATE TEMPORARY TABLE IF NOT EXISTS tempconsolidateAlternatePart AS  \n" +
                "		 SELECT rcml.id,rcml.consolidateID,rcml.mfgPNID,rcml.approvedMountingType FROM  rfq_consolidated_mfgpn_lineitem_alternate rcml WHERE rcml.consolidateID IN (SELECT id FROM rfq_consolidated_mfgpn_lineitem WHERE rfqassyid=prfqAssyID AND isdeleted=0) AND isDeleted=0;  \n" +
                "# Update Consilidated LineItems alternate part  \n" +
                "        UPDATE rfq_consolidated_mfgpn_lineitem_alternate cla,  \n" +
                "		(SELECT cl.id `consolidateID`, ap.`mfgPNID`, MIN(ap.`customerApproval`) customerApproval,  \n" +
                "				IFNULL(ap.restrictUseInBOMStep,0) restrictUseInBOMStep, IFNULL(ap.restrictUseInBOMWithPermissionStep,0) restrictUseInBOMWithPermissionStep,IFNULL(ap.restrictUseWithPermissionStep,1)restrictUseWithPermissionStep,  \n" +
                "				IFNULL(ap.restrictUsePermanentlyStep,1)restrictUsePermanentlyStep,IFNULL(ap.restrictUseExcludingAliasStep,1)restrictUseExcludingAliasStep,  \n" +
                "				IFNULL(ap.restrictUseExcludingAliasWithPermissionStep,1)restrictUseExcludingAliasWithPermissionStep,IFNULL(ap.restrictUseInBOMExcludingAliasStep,0)restrictUseInBOMExcludingAliasStep,  \n" +
                "				IFNULL(ap.restrictUseInBOMExcludingAliasWithPermissionStep,0)restrictUseInBOMExcludingAliasWithPermissionStep, IFNULL(ap.approvedMountingType,0)approvedMountingType,  \n" +
                "				IFNULL(ap.mismatchMountingTypeStep,1)mismatchMountingTypeStep,  \n" +
                "                IFNULL(ap.mismatchFunctionalCategoryStep,1)mismatchFunctionalCategoryStep  \n" +
                "		FROM rfq_lineitems_alternatepart ap  \n" +
                "		JOIN (  \n" +
                "			SELECT rcl.id, rcl.consolidatedLineItemIDs  \n" +
                "			FROM rfq_consolidated_mfgpn_lineitem rcl  \n" +
                "			JOIN rfq_lineitems rl ON rl.id = rcl.rfqLineItemID AND rl.isdeleted = 0  \n" +
                "			WHERE rcl.rfqAssyID = prfqAssyID  AND rcl.isdeleted = 0  \n" +
                "		) cl ON FIND_IN_SET(ap.rfqLineitemsID,cl.consolidatedLineItemIDs)  \n" +
                "		LEFT JOIN rfq_consolidated_mfgpn_lineitem_alternate cap ON cap.mfgPNID = ap.mfgPNID AND cl.id = cap.consolidateID AND cap.isDeleted = 0  \n" +
                "		WHERE ap.isdeleted = 0 AND cap.consolidateID IS NOT NULL  \n" +
                "		GROUP BY cl.id, ap.`mfgPNID`, IFNULL(ap.restrictUseInBOMStep,0), IFNULL(ap.restrictUseInBOMWithPermissionStep,0),IFNULL(ap.restrictUseWithPermissionStep,1),IFNULL(ap.restrictUsePermanentlyStep,1),  \n" +
                "				IFNULL(ap.restrictUseExcludingAliasStep,1), IFNULL(ap.restrictUseExcludingAliasWithPermissionStep,1),IFNULL(ap.restrictUseInBOMExcludingAliasStep,0),IFNULL(ap.restrictUseInBOMExcludingAliasWithPermissionStep,0),  \n" +
                "				IFNULL(ap.approvedMountingType,0), IFNULL(ap.mismatchMountingTypeStep,1), IFNULL(ap.mismatchFunctionalCategoryStep,1)  \n" +
                "		)b  \n" +
                "		SET  \n" +
                "			cla.customerApproval = b.customerApproval,  \n" +
                "			cla.updatedAt = fun_DatetimetoUTCDateTime(),  \n" +
                "			cla.updatedBy = puserID,  \n" +
                "			cla.restrictUseInBOMStep =  b.restrictUseInBOMStep,  \n" +
                "			cla.restrictUseInBOMWithPermissionStep = b.restrictUseInBOMWithPermissionStep,  \n" +
                "			cla.restrictUseWithPermissionStep = b.restrictUseWithPermissionStep,  \n" +
                "			cla.restrictUsePermanentlyStep = b.restrictUsePermanentlyStep,  \n" +
                "			cla.restrictUseExcludingAliasStep =  b.restrictUseExcludingAliasStep,  \n" +
                "			cla.restrictUseExcludingAliasWithPermissionStep = b.restrictUseExcludingAliasWithPermissionStep,  \n" +
                "			cla.restrictUseInBOMExcludingAliasStep = b.restrictUseInBOMExcludingAliasStep,  \n" +
                "			cla.restrictUseInBOMExcludingAliasWithPermissionStep = b.restrictUseInBOMExcludingAliasWithPermissionStep,  \n" +
                "			cla.approvedMountingType = b.approvedMountingType,  \n" +
                "			cla.mismatchMountingTypeStep = b.mismatchMountingTypeStep,  \n" +
                "			cla.mismatchFunctionalCategoryStep = b.mismatchFunctionalCategoryStep  \n" +
                "		WHERE cla.consolidateID = b.consolidateID AND  cla.mfgPNID = b.mfgPNID AND  cla.isDeleted = 0;  \n" +
                "# delete from consolidated Alternatepart if lineItem removed  \n" +
                "		UPDATE rfq_consolidated_mfgpn_lineitem_alternate cap  \n" +
                "        SET  \n" +
                "        cap.isDeleted = TRUE,  \n" +
                "        cap.deletedAt = fun_DatetimetoUTCDateTime(),  \n" +
                "        cap.deletedBy = puserID  \n" +
                "        WHERE EXISTS (SELECT 1 FROM rfq_consolidated_mfgpn_lineitem cl WHERE cl.rfqAssyID = prfqAssyID AND cl.id = cap.consolidateID  AND cl.isDeleted = 1)  \n" +
                "        AND cap.isdeleted = 0;  \n" +
                "  \n" +
                "# Delete Consilidated alternate parts if only mfg PN is removed from lineItem  \n" +
                "		UPDATE rfq_consolidated_mfgpn_lineitem_alternate cap,  \n" +
                "			(  \n" +
                "				SELECT DISTINCT (rcla.id) capID FROM rfq_consolidated_mfgpn_lineitem rcl  \n" +
                "				INNER JOIN rfq_consolidated_mfgpn_lineitem_alternate rcla ON rcla.consolidateID = rcl.id AND rcla.isdeleted = 0  \n" +
                "				INNER JOIN rfq_lineitems_alternatepart rla ON rla.mfgPNID = rcla.mfgPNID AND FIND_IN_SET(rla.rfqLineitemsID,rcl.consolidatedLineItemIDs) AND rla.isdeleted = 1  \n" +
                "				WHERE rcl.rfqAssyID = prfqAssyID AND rcl.isdeleted = 0  \n" +
                "            )AS rcap  \n" +
                "        SET  \n" +
                "        cap.isDeleted = TRUE,  \n" +
                "        cap.deletedAt = fun_DatetimetoUTCDateTime(),  \n" +
                "        cap.deletedBy = puserID  \n" +
                "        WHERE cap.id = rcap.capID AND cap.isdeleted = 0;  \n" +
                "  \n" +
                "# delete Consolidated lineItems Quentity  if rfq Quantity remove  \n" +
                "		UPDATE rfq_consolidate_mfgpn_lineitem_quantity cq, (SELECT id,rfqAssyID FROM rfq_assy_quantity q WHERE q.rfqAssyID = prfqAssyID AND q.isDeleted = 1 ) rq  \n" +
                "        SET  \n" +
                "        cq.isDeleted = TRUE,  \n" +
                "        cq.deletedAt = fun_DatetimetoUTCDateTime(),  \n" +
                "        cq.deletedBy = puserID  \n" +
                "        WHERE cq.qtyID = rq.id AND cq.isDeleted= 0;  \n" +
                "  \n" +
                "  \n" +
                "# delete Consolidated lineitem Quantity if Consolidate lineitem remove  \n" +
                "		UPDATE rfq_consolidate_mfgpn_lineitem_quantity cq, (SELECT id FROM rfq_consolidated_mfgpn_lineitem WHERE rfqAssyID = prfqAssyID AND isDeleted = 1 ) rcl  \n" +
                "        SET  \n" +
                "        cq.isDeleted = TRUE,  \n" +
                "        cq.deletedAt = fun_DatetimetoUTCDateTime(),  \n" +
                "        cq.deletedBy = puserID  \n" +
                "        WHERE cq.consolidateID = rcl.id AND cq.isDeleted= 0;  \n" +
                "  \n" +
                "# delete Consolidate lineItems  \n" +
                "		UPDATE rfq_consolidated_mfgpn_lineitem cl  \n" +
                "        SET  \n" +
                "        cl.isDeleted = TRUE,  \n" +
                "        cl.deletedAt = fun_DatetimetoUTCDateTime(),  \n" +
                "        cl.deletedBy = puserID  \n" +
                "        WHERE  cl.rfqAssyID = prfqAssyID AND cl.isDeleted = 0  \n" +
                "        AND NOT EXISTS (SELECT 1 FROM temp_Sproc_CreateRfqConsolidateLineItem tcd WHERE  tcd.rfqLineItemsID = cl.rfqLineItemID AND tcd.category <> 3);  \n" +
                "  \n" +
                "# Insert consolidataed mfgPart to consolidated from rfq lineitem alternate part  \n" +
                "		INSERT INTO `rfq_consolidated_mfgpn_lineitem_alternate`  \n" +
                "        (`mfgPN`,`consolidateID`,`mfgPNID`,`mfgCodeID`,`PIDCode`,`createdBy`,`createdAt`,`updatedBy`,`updatedAt`,`customerApproval`,  \n" +
                "        `restrictUseInBOMStep`, `restrictUseInBOMWithPermissionStep`,`restrictUseWithPermissionStep`,`restrictUsePermanentlyStep`,  \n" +
                "        `restrictUseExcludingAliasStep`,`restrictUseExcludingAliasWithPermissionStep`, `restrictUseInBOMExcludingAliasStep`, `restrictUseInBOMExcludingAliasWithPermissionStep`,`approvedMountingType`, `mismatchMountingTypeStep`,`mismatchFunctionalCategoryStep`)  \n" +
                "        SELECT ap.`mfgPN`, cl.id `consolidateID`, ap.`mfgPNID`,ap.`mfgCodeID`, fun_getAssyPIDCodeByID(ap.`mfgPNID`) AS `PIDCode`,  \n" +
                "		puserID `createdBy`,fun_DatetimetoUTCDateTime() `createdAt`,puserID `updatedBy`,fun_DatetimetoUTCDateTime() `updatedAt`, MIN(ap.`customerApproval`),  \n" +
                "				IFNULL(ap.restrictUseInBOMStep,0), IFNULL(ap.restrictUseInBOMWithPermissionStep,0),IFNULL(ap.restrictUseWithPermissionStep,1),IFNULL(ap.restrictUsePermanentlyStep,1),  \n" +
                "				IFNULL(ap.restrictUseExcludingAliasStep,1), IFNULL(ap.restrictUseExcludingAliasWithPermissionStep,1),IFNULL(ap.restrictUseInBOMExcludingAliasStep,0),IFNULL(ap.restrictUseInBOMExcludingAliasWithPermissionStep,0),  \n" +
                "				IFNULL(ap.approvedMountingType,0), IFNULL(ap.mismatchMountingTypeStep,1), IFNULL(ap.mismatchFunctionalCategoryStep,1)  \n" +
                "		FROM rfq_lineitems_alternatepart ap  \n" +
                "		JOIN (  \n" +
                "			SELECT rcl.id, rcl.consolidatedLineItemIDs  \n" +
                "			FROM rfq_consolidated_mfgpn_lineitem rcl  \n" +
                "			JOIN rfq_lineitems rl ON rl.id = rcl.rfqLineItemID AND rl.isdeleted = 0  \n" +
                "			WHERE rcl.rfqAssyID = prfqAssyID  AND rcl.isdeleted = 0  \n" +
                "		) cl ON FIND_IN_SET(ap.rfqLineitemsID,cl.consolidatedLineItemIDs)  \n" +
                "		LEFT JOIN rfq_consolidated_mfgpn_lineitem_alternate cap ON cap.mfgPNID = ap.mfgPNID AND cl.id = cap.consolidateID AND cap.isDeleted = 0  \n" +
                "		WHERE IFNULL(ap.mfgGoodPartMappingStep,1) = 1 AND IFNULL(ap.suggestedGoodPartStep,1) = 1 AND IFNULL(ap.distGoodPartMappingStep,1) = 1 AND IFNULL(ap.suggestedGoodDistPartStep,1) = 1 AND ap.isdeleted = 0 AND cap.consolidateID IS NULL  \n" +
                "		GROUP BY cl.id, ap.`mfgPN`, ap.`mfgPNID`, ap.`mfgCodeID`,  \n" +
                "				IFNULL(ap.restrictUseInBOMStep,0), IFNULL(ap.restrictUseInBOMWithPermissionStep,0),IFNULL(ap.restrictUseWithPermissionStep,1),IFNULL(ap.restrictUsePermanentlyStep,1),  \n" +
                "				IFNULL(ap.restrictUseExcludingAliasStep,1), IFNULL(ap.restrictUseExcludingAliasWithPermissionStep,1),IFNULL(ap.restrictUseInBOMExcludingAliasStep,0),IFNULL(ap.restrictUseInBOMExcludingAliasWithPermissionStep,0),  \n" +
                "				IFNULL(ap.approvedMountingType,0), IFNULL(ap.mismatchMountingTypeStep,1), IFNULL(ap.mismatchFunctionalCategoryStep,1);  \n" +
                "# Delete consolidated mfgPart if mfgPart Changed  \n" +
                "		UPDATE rfq_consolidated_mfgpn_lineitem_alternate cap, (SELECT a.id FROM rfq_consolidated_mfgpn_lineitem a WHERE a.rfqAssyID = prfqAssyID AND a.isDeleted = 0) rcl  \n" +
                "        SET  \n" +
                "        cap.isDeleted = TRUE,  \n" +
                "        cap.deletedAt = fun_DatetimetoUTCDateTime(),  \n" +
                "        cap.deletedBy = puserID  \n" +
                "		WHERE cap.consolidateID = rcl.id  \n" +
                "        AND cap.id NOT IN (  \n" +
                "			SELECT capid FROM(  \n" +
                "				SELECT  DISTINCT(rcap.id) AS capid  \n" +
                "				FROM rfq_consolidated_mfgpn_lineitem cl  \n" +
                "				INNER JOIN rfq_consolidated_mfgpn_lineitem_alternate rcap ON rcap.consolidateID = cl.id AND rcap.isdeleted = 0  \n" +
                "				JOIN rfq_lineitems_alternatepart ap ON ap.mfgPNID = rcap.mfgPNID AND FIND_IN_SET(ap.rfqLineitemsID,cl.consolidatedLineItemIDs) AND ap.isdeleted = 0  \n" +
                "				WHERE cl.rfqAssyID = prfqAssyID AND cl.isdeleted = 0  \n" +
                "            ) rcap  \n" +
                "		);  \n" +
                "  \n" +
                " # delete Consolidated lineitem Quantity if selected alternate part remove  \n" +
                "       UPDATE rfq_consolidate_mfgpn_lineitem_quantity cq,  \n" +
                "        (SELECT id FROM rfq_consolidated_mfgpn_lineitem cl WHERE cl.rfqAssyID = prfqAssyID AND cl.isDeleted = 0 ) rcl  \n" +
                "        SET  \n" +
                "        cq.finalPrice = NULL,  \n" +
                "        cq.selectedPIDCode = NULL,  \n" +
                "        cq.selectedMpn = NULL,  \n" +
                "        cq.selectionMode = NULL,  \n" +
                "        cq.supplier = NULL,  \n" +
                "        cq.refSupplierID=NULL,  \n" +
                "        cq.supplierStock = NULL,  \n" +
                "        cq.currentStock = NULL,  \n" +
                "        cq.grossStock = NULL,  \n" +
                "        cq.leadTime = NULL,  \n" +
                "        cq.rfqQtySupplierID=NULL,  \n" +
                "        cq.min = NULL,  \n" +
                "        cq.mult = NULL,  \n" +
                "        cq.unitPrice = NULL,  \n" +
                "        cq.quoteqty=NULL,  \n" +
                "        cq.updatedAt = fun_DatetimetoUTCDateTime(),  \n" +
                "        cq.updatedBy = puserID  \n" +
                "        WHERE cq.consolidateID = (rcl.id) AND NOT EXISTS  \n" +
                "         (SELECT 1 FROM rfq_consolidated_mfgpn_lineitem_alternate rc JOIN tempconsolidateAlternatePart ta ON rc.id=ta.id WHERE rc.mfgPNID = cq.componentID AND rc.consolidateid = rcl.id AND rc.isDeleted = 0 AND rc.approvedMountingType =ta.approvedMountingType )  \n" +
                "        AND cq.isDeleted= 0;  \n" +
                "  \n" +
                " # remove pricing if selected alternate part remove  \n" +
                "        UPDATE rfq_consolidate_mfgpn_lineitem_quantity cq,  \n" +
                "       (SELECT rcla.consolidateID , COUNT(1) alternateline FROM rfq_consolidated_mfgpn_lineitem_alternate rcla  \n" +
                "       WHERE rcla.consolidateID IN (SELECT cl.id FROM rfq_consolidated_mfgpn_lineitem cl WHERE cl.rfqAssyID = prfqAssyID AND cl.isDeleted = 0)  \n" +
                "       AND approvedMountingType = 1 AND rcla.isdeleted = 0) rcl  \n" +
                "        SET  \n" +
                "        cq.finalPrice = NULL,  \n" +
                "        cq.selectedPIDCode = NULL,  \n" +
                "        cq.selectedMpn = NULL,  \n" +
                "        cq.selectionMode = NULL,  \n" +
                "        cq.supplier = NULL,  \n" +
                "        cq.refSupplierID=NULL,  \n" +
                "        cq.supplierStock = NULL,  \n" +
                "        cq.currentStock = NULL,  \n" +
                "        cq.grossStock = NULL,  \n" +
                "        cq.leadTime = NULL,  \n" +
                "        cq.rfqQtySupplierID=NULL,  \n" +
                "        cq.min = NULL,  \n" +
                "        cq.mult = NULL,  \n" +
                "        cq.unitPrice = NULL,  \n" +
                "        cq.quoteqty=NULL,  \n" +
                "        cq.updatedAt = fun_DatetimetoUTCDateTime(),  \n" +
                "        cq.updatedBy = puserID  \n" +
                "        WHERE cq.consolidateID = (rcl.consolidateID)  \n" +
                "        AND (CASE WHEN rcl.alternateline > 0 THEN  \n" +
                "			cq.componentID NOT IN (SELECT rc.mfgPNID FROM rfq_consolidated_mfgpn_lineitem_alternate rc JOIN tempconsolidateAlternatePart ta ON rc.id=ta.id WHERE rc.consolidateid = rcl.consolidateID AND rc.isDeleted = 0 AND rc.approvedMountingType = ta.approvedMountingType)  \n" +
                "		ELSE 1=1 END)  \n" +
                "        AND cq.isDeleted= 0;  \n" +
                "  \n" +
                "# remove pricing for Change is buy  \n" +
                "        UPDATE rfq_consolidate_mfgpn_lineitem_quantity cq,  \n" +
                "        (SELECT id FROM rfq_consolidated_mfgpn_lineitem cl WHERE cl.rfqAssyID = prfqAssyID AND cl.isDeleted = 0  \n" +
                "        AND (cl.isPurchase = 0 OR restrictCPNUseInBOMStep = 1 OR restrictCPNUsePermanentlyStep = 0 OR restrictCPNUseWithPermissionStep= 0)) rcl  \n" +
                "        SET  \n" +
                "        cq.finalPrice = NULL,  \n" +
                "        cq.selectedPIDCode = NULL,  \n" +
                "        cq.selectedMpn = NULL,  \n" +
                "        cq.selectionMode = NULL,  \n" +
                "        cq.supplier = NULL,  \n" +
                "        cq.refSupplierID=NULL,  \n" +
                "        cq.supplierStock = NULL,  \n" +
                "        cq.currentStock = NULL,  \n" +
                "        cq.grossStock = NULL,  \n" +
                "        cq.leadTime = NULL,  \n" +
                "        cq.min = NULL,  \n" +
                "        cq.mult = NULL,  \n" +
                "        cq.quoteqty=NULL,  \n" +
                "        cq.unitPrice = NULL,  \n" +
                "        cq.rfqQtySupplierID=NULL,  \n" +
                "        cq.updatedAt = fun_DatetimetoUTCDateTime(),  \n" +
                "        cq.updatedBy = puserID  \n" +
                "        WHERE cq.consolidateID IN(rcl.id) AND cq.isDeleted= 0;  \n" +
                "  \n" +
                "# Delete summary details if exists  \n" +
                "		UPDATE `rfq_assy_quotations` rq ,  \n" +
                "			( SELECT rq.qtyID,rl.requestQty,(SUM(rq.unitPrice * ra.qpa * IFNULL(ra.numOfPosition,1))) AS TotalExtendedPrice  \n" +
                "				FROM rfq_consolidate_mfgpn_lineitem_quantity rq  \n" +
                "				JOIN rfq_assy_quantity rl ON rl.id = rq.qtyID AND rl.isDeleted = 0  \n" +
                "				JOIN rfq_consolidated_mfgpn_lineitem ra ON ra.id = rq.consolidateID AND ra.isdeleted = 0  \n" +
                "				WHERE  rl.rfqAssyid = prfqAssyID AND ra.isPurchase = 1 AND rq.isDeleted = 0  \n" +
                "				GROUP BY rq.qtyID, rl.requestQty  \n" +
                "			) qtychange  \n" +
                "        SET  \n" +
                "        rq.`unitPrice` = (CASE WHEN CONVERT(rq.unitPrice, DECIMAL(10,2)) != ROUND(qtychange.TotalExtendedPrice,2) THEN 0 ELSE CONVERT(rq.unitPrice, DECIMAL(10,2)) END),  \n" +
                "        rq.`updatedBy` = puserID,  \n" +
                "        rq.`updatedAt` = fun_DatetimetoUTCDateTime()  \n" +
                "        WHERE rq.rfqAssyID = prfqAssyID AND rq.rfqAssyQtyID = qtychange.qtyID AND  CONVERT(rq.unitPrice, DECIMAL(10,2)) != ROUND(qtychange.TotalExtendedPrice,2)  \n" +
                "        AND rq.refSubmittedQuoteID IS NULL AND rq.isDeleted = 0;  \n" +
                "  \n" +
                "# update rfq assembly pricing status  \n" +
                "  \n" +
                "        UPDATE rfq_assemblies  \n" +
                "        SET isReadyForPricing = TRUE,  \n" +
                "        partCostingBOMInternalVersion = pBOMVersion,  \n" +
                "        updatedAt = fun_DatetimetoUTCDateTime(),  \n" +
                "        updatedBy = puserID  \n" +
                "        WHERE id = prfqAssyID AND isDeleted = 0;  \n" +
                "  \n" +
                "# update rfq assembly pricing status  \n" +
                "  \n" +
                "        UPDATE rfq_lineitem_autopricingstatus rlas  \n" +
                "        SET `status` = NULL  \n" +
                "        WHERE rlas.rfqAssyID = prfqAssyID  \n" +
                "        AND EXISTS (SELECT id FROM tempconsolidate tc WHERE tc.id = rlas.consolidateID  \n" +
                "        AND NOT EXISTS (SELECT 1 FROM rfq_consolidated_mfgpn_lineitem rl WHERE rl.id = tc.id AND rl.rfqassyId = prfqAssyID AND isdeleted=0));  \n" +
                "--        AND rlas.consolidateID IN (SELECT id FROM tempconsolidate WHERE id NOT IN (SELECT rl.id FROM rfq_consolidated_mfgpn_lineitem rl WHERE rfqassyId = prfqAssyID AND isdeleted=0));  \n" +
                "  \n" +
                "#==================================  \n" +
                "/*  Submit Data for Labor Costing */  \n" +
                "#==================================  \n" +
                "        DROP TEMPORARY TABLE IF EXISTS laborResult;  \n" +
                "        CREATE TEMPORARY TABLE IF NOT EXISTS laborResult AS  \n" +
                "        SELECT prfqAssyID AS rfqAssyID, ppartID AS partID, id AS parPartID, id AS subAssyID, 1 AS perBuildQty, liveVersion AS BOMinternalversion, 0 isMismatchQPA,1 originalQPA, 0 LEVEL,0 isInstall  \n" +
                "        FROM COMPONENT WHERE id = ppartID AND isDeleted = 0  \n" +
                "        UNION  \n" +
                "        SELECT prfqAssyID AS rfqAssyID, ppartID AS partID, partID AS parPartID, mfgPNID AS subAssyID, QPA1 AS perBuildQty, liveVersion BOMinternalversion,  \n" +
                "        (CASE WHEN actualQPA != actualDesgCount THEN 1 ELSE 0 END) isMismatchQPA, (CASE WHEN actualQPA >= actualDesgCount THEN actualQPA ELSE actualDesgCount END) originalQPA, LEVEL, isInstall  \n" +
                "        FROM leveldata  \n" +
                "        WHERE category = 3;  \n" +
                "  \n" +
                "#  delete Labor assy Qty detail when line item removed from assy BOM  \n" +
                "  \n" +
                "        UPDATE rfq_labor_assy_qpa_detail rla  \n" +
                "        SET  \n" +
                "        rla.isDeleted = 1,  \n" +
                "        rla.deletedBy = puserID,  \n" +
                "        rla.deletedAt = fun_DatetimetoUTCDateTime()  \n" +
                "        WHERE rla.partID = ppartID AND rla.rfqAssyID = prfqAssyID AND rla.isDeleted  = 0  \n" +
                "        AND NOT EXISTS(SELECT 1 FROM laborResult lr WHERE lr.subAssyID = rla.subAssyID AND lr.parPartID = rla.parPartID  \n" +
                "        AND rla.rfqAssyID = prfqAssyID AND rla.partID = ppartID AND rla.level = lr.level);  \n" +
                "# Insert Data in to rfq_labor_assy_qpa_detail table for  \n" +
                "        INSERT INTO `rfq_labor_assy_qpa_detail`  \n" +
                "        (`rfqAssyID`,`partID`,`parPartID`,`subAssyID`,`level`,`perBuildQty`,`bomInternalVersion`, `originalQPA`, `isMismatchQPA`,`createdBy`,`updatedBy`,`createdAt`,`updatedAt`)  \n" +
                "		SELECT rfqAssyID, partID, parPartID,subAssyID,LEVEL ,perBuildQty, BOMinternalversion, originalQPA, isMismatchQPA, puserID `createdBy`, puserID `updatedBy`,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime()  \n" +
                "		FROM laborResult lr  \n" +
                "		WHERE NOT EXISTS(SELECT 1 FROM rfq_labor_assy_qpa_detail rla WHERE rla.isDeleted = 0 AND lr.subAssyID = rla.subAssyID  \n" +
                "		AND lr.parPartID = rla.parPartID AND rla.rfqAssyID = prfqAssyID AND rla.partID = ppartID AND lr.level = rla.level);  \n" +
                "  \n" +
                "# Update Data in rfq_labor_assy_qpa_detail table updated record  \n" +
                "		UPDATE rfq_labor_assy_qpa_detail rlaqd,  \n" +
                "        (SELECT parPartID, subAssyID, LEVEL, perBuildQty, bomInternalVersion, originalQPA, isMismatchQPA, isInstall  \n" +
                "        FROM laborResult) lr  \n" +
                "        SET  \n" +
                "        rlaqd.perBuildQty = lr.perBuildQty,  \n" +
                "        rlaqd.bomInternalVersion = lr.bomInternalVersion,  \n" +
                "        rlaqd.originalQPA = lr.originalQPA,  \n" +
                "        rlaqd.isMismatchQPA = lr.isMismatchQPA,  \n" +
                "        rlaqd.isInstall = lr.isInstall,  \n" +
                "        updatedBy = puserID,  \n" +
                "        updatedAt = fun_DatetimetoUTCDateTime()  \n" +
                "        WHERE rlaqd.rfqAssyID = prfqAssyID AND rlaqd.partID = ppartID AND lr.parPartID = rlaqd.parPartID AND lr.subAssyID = rlaqd.subAssyID AND lr.level = rlaqd.level AND rlaqd.isDeleted = 0  \n" +
                "        AND (rlaqd.perBuildQty != lr.perBuildQty OR rlaqd.bomInternalVersion != lr.bomInternalVersion OR rlaqd.originalQPA != lr.originalQPA OR rlaqd.isMismatchQPA != lr.isMismatchQPA OR rlaqd.isInstall != lr.isInstall);  \n" +
                "# create temporary table for mounting type wise detail  \n" +
                "        DROP TEMPORARY TABLE IF EXISTS assyBOMMountingTypeDet;  \n" +
                "        CREATE TEMPORARY TABLE IF NOT EXISTS assyBOMMountingTypeDet AS  \n" +
                "		SELECT prfqAssyID `rfqAssyID`, partID AS parPartID, mountingTypeID, `mountingType`,`lineCount`,`totalQPA`,NULL `subAssyID`, isInstall AS `isInstall`  \n" +
                "		FROM (  \n" +
                "			(  \n" +
                "				SELECT  SUM(qpa) AS `totalQPA`, COUNT(a.id) AS `lineCount`,  fun_getMountingTypeNameByID(mountingTypeID) AS mountingType, mountingTypeID, partID, isinstall  \n" +
                "				FROM  \n" +
                "				(  \n" +
                "					SELECT rl.id,(CASE WHEN rl.qpaDesignatorStep = 0 AND rl.uomID = -1 THEN  \n" +
                "								(CASE WHEN rl.qpa < IFNULL(rl.refDesigCount,0) THEN IFNULL(rl.refDesigCount,0) ELSE rl.qpa END)  \n" +
                "							ELSE rl.qpa END) AS qpa, rl.partID, rl.isInstall  \n" +
                "					FROM rfq_lineitems rl  \n" +
                "					WHERE rl.partID IN (SELECT  prPerPartID FROM part_sub_assy_relationship WHERE partID = ppartID AND isdeleted = 0)  \n" +
                "				) a  \n" +
                "				INNER JOIN  \n" +
                "				(  \n" +
                "					SELECT 	rl.id,  \n" +
                "					CASE WHEN IFNULL(MAX(com.mountingtypeID),'Unknown') = IFNULL(MIN(com.mountingtypeID),'Unknown')  THEN  \n" +
                "							MAX(com.mountingtypeID)  \n" +
                "						ELSE (SELECT id FROM rfq_mountingtypemst WHERE NAME = \"Mismatched\" LIMIT 1)  END  AS mountingTypeID  \n" +
                "					FROM rfq_lineitems rl  \n" +
                "					INNER JOIN rfq_lineitems_alternatepart ra ON ra.rfqLineItemsID = rl.id AND ra.isDeleted = 0  \n" +
                "					LEFT JOIN COMPONENT com ON com.id = (CASE WHEN ra.mfgPNID = -3 AND rl.custPNID IS NOT NULL THEN rl.custPNID ELSE ra.mfgPNID END) AND com.isGoodPart <> 2  \n" +
                "					WHERE rl.partID IN (SELECT prPerPartID FROM part_sub_assy_relationship WHERE partID = ppartID AND isdeleted = 0)  \n" +
                "					AND IFNULL(ra.mfgGoodPartMappingStep,1) = 1 AND IFNULL(ra.suggestedGoodPartStep,1) = 1 AND IFNULL(ra.distGoodPartMappingStep,1) = 1 AND IFNULL(ra.suggestedGoodDistPartStep,1) = 1  \n" +
                "					AND rl.isDeleted = 0  AND com.category != 3 AND com.isGoodPart <> 2   AND (IFNULL(ra.mismatchMountingTypeStep,0) = 1 OR ra.approvedMountingType = 1)  \n" +
                "					GROUP BY rl.id  \n" +
                "                    HAVING IFNULL(MAX(com.mountingtypeID),-100) = IFNULL(MIN(com.mountingtypeID),-100) OR (IFNULL(MAX(com.mountingtypeID),-100) != IFNULL(MIN(com.mountingtypeID),-100) AND MAX(IFNULL(ra.approvedMountingType,0)) = 1)  \n" +
                "				) b ON a.id = b.id  \n" +
                "				GROUP BY a.partID , b.mountingTypeID  \n" +
                "				)  \n" +
                "				UNION  \n" +
                "				(SELECT  SUM(qpa) AS `totalQPA`, COUNT(a.id) AS `lineCount`,  fun_getMountingTypeNameByID(mountingTypeID) AS mountingType, mountingTypeID, partID,isinstall  \n" +
                "				FROM  \n" +
                "				(  \n" +
                "					SELECT rl.id,(CASE WHEN rl.qpaDesignatorStep = 0 AND rl.uomID = -1 THEN  \n" +
                "								(CASE WHEN rl.qpa < IFNULL(rl.refDesigCount,0) THEN IFNULL(rl.refDesigCount,0) ELSE rl.qpa END)  \n" +
                "							ELSE rl.qpa END) AS qpa, rl.partID, rl.isInstall  \n" +
                "					FROM rfq_lineitems rl  \n" +
                "					WHERE rl.partID IN (SELECT  prPerPartID FROM part_sub_assy_relationship WHERE partID = ppartID AND isdeleted = 0)  \n" +
                "				) a  \n" +
                "				INNER JOIN  \n" +
                "				(  \n" +
                "					SELECT 	rl.id,  \n" +
                "					(SELECT id FROM rfq_mountingtypemst WHERE NAME = \"Mismatched\" LIMIT 1) AS mountingTypeID  \n" +
                "					FROM rfq_lineitems rl  \n" +
                "					INNER JOIN rfq_lineitems_alternatepart ra ON ra.rfqLineItemsID = rl.id AND ra.isDeleted = 0  \n" +
                "					LEFT JOIN COMPONENT com ON com.id = (CASE WHEN ra.mfgPNID = -3 AND rl.custPNID IS NOT NULL THEN rl.custPNID ELSE ra.mfgPNID END) AND com.isGoodPart <> 2  \n" +
                "					WHERE rl.partID IN (SELECT prPerPartID FROM part_sub_assy_relationship WHERE partID = ppartID AND isdeleted = 0)  \n" +
                "                    AND IFNULL(ra.mfgGoodPartMappingStep,1) = 1 AND IFNULL(ra.suggestedGoodPartStep,1) = 1 AND IFNULL(ra.distGoodPartMappingStep,1) = 1 AND IFNULL(ra.suggestedGoodDistPartStep,1) = 1  \n" +
                "					AND rl.isDeleted = 0  AND com.category != 3 AND com.isGoodPart <> 2  \n" +
                "					GROUP BY rl.id  \n" +
                "					HAVING IFNULL(MAX(com.mountingtypeID),-100) != IFNULL(MIN(com.mountingtypeID),-100) AND MAX(IFNULL(ra.approvedMountingType,0)) != 1  \n" +
                "				) b ON a.id = b.id  \n" +
                "				GROUP BY a.partID , b.mountingTypeID)  \n" +
                "			)a  \n" +
                "			UNION  \n" +
                "			(  \n" +
                "				SELECT rfqAssyID AS `rfqAssyID`,parPartID, NULL `mountingTypeID`, NULL mountingType, 1 AS `lineCount`,originalQPA AS `totalQPA`,subAssyID AS `subAssyID`, isInstall AS `isInstall`  \n" +
                "				FROM  \n" +
                "				(  \n" +
                "					SELECT rfqAssyID, parPartID, originalQPA,subAssyID,isInstall  \n" +
                "					FROM rfq_labor_assy_qpa_detail lr  \n" +
                "					WHERE lr.isDeleted = 0 AND lr.parpartId != lr.subAssyId AND lr.rfqAssyID = prfqAssyID  \n" +
                "				)b  \n" +
                "			);  \n" +
                "  \n" +
                "# delete assy Labor Mounting type wise Qty detail when line item removed from assy BOM  \n" +
                "# Note: -100 value is set for null value for mountingtypeID join purpose(in case of mounting type mismatch)  \n" +
                "  		UPDATE rfq_assy_labor_bom_mountingtype_qpa_detail rlmd  \n" +
                "        SET  \n" +
                "        rlmd.isDeleted = 1,  \n" +
                "        rlmd.deletedBy = puserID,  \n" +
                "        rlmd.deletedAt = fun_DatetimetoUTCDateTime()  \n" +
                "        WHERE rlmd.isDeleted = 0 AND rlmd.rfqAssyID = prfqAssyID  \n" +
                "        AND NOT EXISTS (SELECT 1 FROM assyBOMMountingTypeDet amd  \n" +
                "        WHERE rlmd.rfqAssyID = prfqAssyID AND amd.parPartID = rlmd.partID AND (IFNULL(rlmd.mountingTypeID,-100) = IFNULL(amd.mountingtypeID,-100) AND IFNULL(rlmd.subAssyID,-100) = IFNULL(amd.subAssyID,-100)));  \n" +
                "# Insert Data for assy Labor Mounting type wise Qty detail for new added data.  \n" +
                "# Note: -100 value is set for null value for mountingtypeID for join purpose(in case of mounting type mismatch)  \n" +
                "		INSERT INTO `rfq_assy_labor_bom_mountingtype_qpa_detail`  \n" +
                "        (`rfqAssyID`,`partID`,`subAssyID`,`mountingTypeID`,`lineCount`,`totalQPA`, `isInstall`, `createdBy`,`updatedBy`,`createdAt`,`updatedAt`)  \n" +
                "        SELECT rfqAssyID,parPartID,subAssyID,mountingtypeID,lineCount,totalQPA, isInstall, puserID `createdBy`,puserID `updatedBy`, fun_DatetimetoUTCDateTime() `createdAt`, fun_DatetimetoUTCDateTime() `updatedAt`  \n" +
                "		FROM assyBOMMountingTypeDet amd  \n" +
                "		WHERE NOT EXISTS(SELECT 1 FROM rfq_assy_labor_bom_mountingtype_qpa_detail rlmd  \n" +
                "		WHERE rlmd.rfqAssyID = prfqAssyID AND amd.parPartID = rlmd.partID AND rlmd.isDeleted = 0 AND (IFNULL(rlmd.mountingTypeID,-100) = IFNULL(amd.mountingtypeID,-100) AND IFNULL(rlmd.subAssyID,-100) = IFNULL(amd.subAssyID,-100) ));  \n" +
                "  \n" +
                "  \n" +
                "# Update Data for assy Labor Mounting type wise QPA detail for Updated line item when QPA and line count change.  \n" +
                "# Note: -100 value is set for null value for mountingtypeID for join purpose(in case of mounting type mismatch)  \n" +
                "		UPDATE rfq_assy_labor_bom_mountingtype_qpa_detail rlmd,  \n" +
                "        (SELECT lineCount,totalQPA,isInstall,mountingtypeID,subAssyID,parPartID FROM assyBOMMountingTypeDet) amd  \n" +
                "        SET  \n" +
                "        rlmd.lineCount = amd.lineCount,  \n" +
                "        rlmd.totalQPA = amd.totalQPA,  \n" +
                "        rlmd.isInstall = amd.isInstall,  \n" +
                "        rlmd.updatedby = puserID,  \n" +
                "        rlmd.updatedAt = fun_DatetimetoUTCDateTime()  \n" +
                "        WHERE  rlmd.rfqAssyID = prfqAssyID AND amd.parPartID = rlmd.partID AND rlmd.isDeleted = 0 AND (IFNULL(rlmd.mountingTypeID,-100) = IFNULL(amd.mountingtypeID,-100) AND IFNULL(rlmd.subAssyID,-100) = IFNULL(amd.subAssyID,-100))  \n" +
                "        AND (IFNULL(rlmd.lineCount,0) != IFNULL(amd.lineCount,0) OR IFNULL(rlmd.totalQPA,0) != IFNULL(amd.totalQPA,0) OR IFNULL(rlmd.isInstall,0) != IFNULL(amd.isInstall,1));  \n" +
                "  \n" +
                "# delete data from labor costing detail table if mounting type data deleted  \n" +
                "		UPDATE rfq_assy_qtywise_bom_laborcosting_detail raql  \n" +
                "        SET  \n" +
                "        raql.isDeleted = 1,  \n" +
                "        raql.deletedAt = fun_DatetimetoUTCDateTime(),  \n" +
                "        raql.deletedBy = puserID  \n" +
                "        WHERE EXISTS (SELECT  1 FROM rfq_assy_labor_bom_mountingtype_qpa_detail ramd  \n" +
                "        WHERE ramd.id = raql.rfqAssyBOMMountingID AND ramd.isDeleted = 1 AND ramd.rfqAssyID = prfqAssyID)  \n" +
                "        AND raql.isDeleted = 0;  \n" +
                "# delete data from labor costing detail table if rfq assy quantity data deleted  \n" +
                "		UPDATE rfq_assy_qtywise_bom_laborcosting_detail raql  \n" +
                "        SET  \n" +
                "        raql.isDeleted = 1,  \n" +
                "        raql.deletedAt = fun_DatetimetoUTCDateTime(),  \n" +
                "        raql.deletedBy = puserID  \n" +
                "        WHERE EXISTS (SELECT  1 FROM rfq_assy_quantity raq  \n" +
                "        WHERE raq.id = raql.rfqAssyQtyID AND raq.isDeleted = 1 AND raq.rfqAssyID = prfqAssyID)  \n" +
                "        AND raql.isDeleted = 0;  \n" +
                "  \n" +
                "# Insert New Data which are added in rfq_assy_labor_bom_mountingtype_qpa_detail and not in labor costing detail table  \n" +
                "		INSERT INTO `rfq_assy_qtywise_bom_laborcosting_detail`  \n" +
                "        (`rfqAssyQtyID`,`rfqAssyBOMMountingID`,`price`,`perAssyPrice`,`createdBy`,`updatedBy`,`createdAt`,`updatedAt`,`rfqPriceGroupId`,`rfqPriceGroupDetailId`)  \n" +
                "        SELECT raq.id `rfqAssyQtyID`,ramd.id `rfqAssyBOMMountingID`,0 `price`,0 `perAssyPrice`,puserID `createdBy`,puserID `updatedBy`,  \n" +
                "        fun_DatetimetoUTCDateTime() `createdAt`, fun_DatetimetoUTCDateTime() `updatedAt`,raq.rfqPriceGroupId,raq.rfqPriceGroupDetailId  \n" +
                "        FROM rfq_assy_labor_bom_mountingtype_qpa_detail ramd  \n" +
                "        JOIN rfq_assy_quantity raq ON ramd.rfqAssyID = raq.rfqAssyID AND raq.rfqAssyId = prfqAssyID AND raq.isDeleted = 0  \n" +
                "        WHERE ramd.rfqAssyId = prfqAssyID  \n" +
                "        AND NOT EXISTS (SELECT 1 FROM rfq_assy_qtywise_bom_laborcosting_detail raql WHERE raql.rfqAssyBOMMountingID = ramd.id AND raql.isDeleted = 0 AND raql.rfqAssyQtyID = raq.id)  \n" +
                "		AND ramd.isDeleted = 0;  \n" +
                "  \n" +
                "# update labor costing detail if there is any change in Mounting type wise QPA for update per assy price detail  \n" +
                "        UPDATE rfq_assy_qtywise_bom_laborcosting_detail raql,  \n" +
                "        (SELECT id,totalQPA,lineCount,mountingTypeID,partID,subAssyID FROM rfq_assy_labor_bom_mountingtype_qpa_detail ramd WHERE ramd.isDeleted = 0 AND ramd.rfqAssyID = prfqAssyID AND ramd.subAssyID IS NULL) ralmd,  \n" +
                "        (SELECT id FROM rfq_assy_quantity WHERE isDeleted = 0 AND rfqAssyID = prfqAssyID) raq  \n" +
                "        SET  \n" +
                "        raql.perAssyPrice = CAST((raql.price * IFNULL(ralmd.totalQPA,0)) AS DECIMAL(16,6)),  \n" +
                "        raql.updatedAt = fun_DatetimetoUTCDateTime(),  \n" +
                "        raql.updatedBy = puserID  \n" +
                "        WHERE ralmd.id = raql.rfqAssyBOMMountingID AND raq.id = raql.rfqAssyQtyID AND raql.isDeleted = 0 AND ralmd.subAssyID IS NULL  \n" +
                "        AND raql.perAssyPrice != CAST((raql.price * IFNULL(ralmd.totalQPA,0)) AS DECIMAL(16,6));  \n" +
                "# update Sub Assembly price based on qpa change  \n" +
                "		CALL `Sproc_getAllAssyLaborDetails`(NULL,prfqAssyID);  \n" +
                "  \n" +
                "#==================================  \n" +
                "/* End for Submit Data for Labor Costing */  \n" +
                "#==================================  \n" +
                "  \n" +
                "    -- Create consolidate qty for price group wise on same assembly,  \n" +
                "		CALL Sproc_CreateRfqConsolidateLineItem_Qty_With_All_RFQ(prfqAssyID,puserID);  \n" +
                "   COMMIT;  \n" +
                "    SELECT id FROM tempconsolidate WHERE id NOT IN (SELECT rl.id FROM rfq_consolidated_mfgpn_lineitem rl WHERE rfqassyId = prfqAssyID AND isdeleted=0);  \n" +
                "  \n" +
                "  \n" +
                "/*  UNION  \n" +
                "	SELECT rq.consolidateID AS id FROM rfq_consolidate_mfgpn_lineitem_quantity rq  \n" +
                "    LEFT JOIN  rfq_consolidated_mfgpn_lineitem rl ON rq.consolidateID=rl.id  \n" +
                "    WHERE rq.isdeleted=0 AND rq.finalprice IS NULL AND rl.rfqAssyID = prfqAssyID AND  (TIMESTAMPDIFF(SECOND, rq.updatedAt,fun_DatetimetoUTCDateTime())<120) AND (TIMESTAMPDIFF(SECOND, rq.createdAt,fun_DatetimetoUTCDateTime())>120);  \n" +
                "*/  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_Sproc_CreateRfqConsolidateLineItem;  \n" +
                "    DROP TEMPORARY  TABLE IF EXISTS tempconsolidate;  \n" +
                "    DROP TEMPORARY TABLE IF EXISTS leveldata;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** New Script -> 21-02-2021  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetRestrictedPartsForBOMNPurchase` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetRestrictedPartsForBOMNPurchase`(  \n" +
                "IN prfqAssyID INT(11),  \n" +
                "IN pisPurchaseApi TINYINT(1)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	IF(pisPurchaseApi=0) THEN  \n" +
                "	       SELECT rla.mfgPN,rla.mfgPNID,rla.consolidateID FROM rfq_consolidated_mfgpn_lineitem_alternate rla JOIN rfq_consolidated_mfgpn_lineitem rl  ON  \n" +
                "                  rl.id = rla.consolidateID AND rl.deletedAt IS NULL JOIN COMPONENT c ON c.id=rla.mfgPNID AND c.deletedAt IS NULL  WHERE rla.isDeleted = 0 AND(IFNULL(rla.restrictUseInBOMStep, 0) = 1  \n" +
                "                  OR rla.restrictUseWithPermissionStep = 0 OR rla.restrictUsePermanentlyStep = 0 OR c.restrictPackagingUsePermanently=1 OR rla.restrictUseInBOMExcludingAliasStep=1 OR  \n" +
                "                  (IFNULL(rla.customerApproval,'A')='P' AND rla.restrictUseInBOMExcludingAliasWithPermissionStep=1) OR  \n" +
                "                  (IFNULL(rla.customerApproval,'A')='P' AND c.restrictPackagingUseWithpermission=1)) AND rl.rfqAssyID =prfqAssyID  \n" +
                "                   UNION  \n" +
                "                  SELECT c.mfgPN, c.id AS mfgPNID, rlam.consolidateID FROM COMPONENT c LEFT JOIN  rfq_consolidated_mfgpn_lineitem_alternate rlam ON rlam.mfgpnid = c.id WHERE c.id NOT IN  \n" +
                "                  (SELECT mfgPNID FROM rfq_consolidated_mfgpn_lineitem_alternate rla WHERE rla.consolidateID IN  \n" +
                "                 (SELECT id FROM rfq_consolidated_mfgpn_lineitem WHERE rfqassyid =prfqAssyID AND deletedat IS NULL) AND rla.deletedAt IS NULL) AND  c.packaginggroupID IN  \n" +
                "                  (SELECT comp.packaginggroupID FROM COMPONENT comp WHERE comp.id IN (SELECT rla.mfgPNID FROM rfq_consolidated_mfgpn_lineitem_alternate rla WHERE rla.consolidateID IN  \n" +
                "                  (SELECT id FROM rfq_consolidated_mfgpn_lineitem WHERE rfqassyid =prfqAssyID AND deletedat IS NULL))  \n" +
                "                  ) AND c.isdeleted = 0 AND(IFNULL(rlam.restrictUseInBOMStep, 0) = 1 OR rlam.restrictUseWithPermissionStep = 0 OR rlam.restrictUsePermanentlyStep = 0 OR  \n" +
                "                  c.restrictUSEwithpermission=1 OR c.restrictUsePermanently=1 OR c.restrictPackagingUsePermanently=1 OR rlam.restrictUseInBOMExcludingAliasStep=1 OR  \n" +
                "                  (IFNULL(rlam.customerApproval,'A')='P' AND rlam.restrictUseInBOMExcludingAliasWithPermissionStep=1) OR  \n" +
                "                  (IFNULL(rlam.customerApproval,'A')='P' AND c.restrictPackagingUseWithpermission=1));  \n" +
                "	ELSE  \n" +
                "	SELECT rla.mfgPN,rla.mfgPNID,rla.refKitAllocationLineItemId AS consolidateID FROM kit_allocation_lineitems_alternatepart rla JOIN kit_allocation_lineitems rl  ON  \n" +
                "               rl.id = rla.refKitAllocationLineItemId AND rl.deletedAt IS NULL JOIN COMPONENT c ON c.id = rla.mfgPNID AND c.deletedAt IS NULL  \n" +
                "               WHERE rla.isDeleted = 0 AND(IFNULL(rla.restrictUseInBOMStep, 0) = 1  \n" +
                "               OR rla.restrictUseWithPermissionStep = 0 OR rla.restrictUsePermanentlyStep = 0 OR c.restrictPackagingUsePermanently = 1 OR rla.restrictUseInBOMExcludingAliasStep=1 OR  \n" +
                "               (IFNULL(rla.customerApproval,'A')='P' AND rla.restrictUseInBOMExcludingAliasWithPermissionStep=1) OR  \n" +
                "               (IFNULL(rla.customerApproval, 'A')='P' AND c.restrictPackagingUseWithpermission = 1)) AND rl.refSalesOrderDetID = prfqAssyID  \n" +
                "                UNION  \n" +
                "               SELECT c.mfgPN, c.id AS mfgPNID, rlam.refKitAllocationLineItemId AS consolidateID FROM COMPONENT c LEFT JOIN  \n" +
                "               kit_allocation_lineitems_alternatepart rlam ON rlam.mfgpnid = c.id WHERE c.id NOT IN  \n" +
                "               (SELECT mfgPNID FROM kit_allocation_lineitems_alternatepart rla WHERE rla.refKitAllocationLineItemId IN  \n" +
                "               (SELECT id FROM kit_allocation_lineitems WHERE refSalesOrderDetID =prfqAssyID  \n" +
                "               AND deletedat IS NULL) AND rla.deletedAt IS NULL) AND c.packaginggroupID IN  \n" +
                "               (SELECT comp.packaginggroupID FROM COMPONENT comp WHERE comp.id IN(SELECT rla.mfgPNID FROM kit_allocation_lineitems_alternatepart rla WHERE rla.refKitAllocationLineItemId IN  \n" +
                "               (SELECT id FROM kit_allocation_lineitems WHERE refSalesOrderDetID =prfqAssyID  \n" +
                "               AND deletedat IS NULL))  \n" +
                "               ) AND c.isdeleted = 0 AND(IFNULL(rlam.restrictUseInBOMStep, 0) = 1 OR rlam.restrictUseWithPermissionStep = 0  \n" +
                "              OR rlam.restrictUsePermanentlyStep = 0 OR c.restrictUSEwithpermission = 1 OR c.restrictUsePermanently = 1 OR c.restrictPackagingUsePermanently = 1 OR rlam.restrictUseInBOMExcludingAliasStep=1 OR  \n" +
                "               (IFNULL(rlam.customerApproval,'A')='P' AND rlam.restrictUseInBOMExcludingAliasWithPermissionStep=1) OR  \n" +
                "             (IFNULL(rlam.customerApproval, 'A')='P' AND c.restrictPackagingUseWithpermission = 1));  \n" +
                "	END IF;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 21-02-2021  *********************************** */
                /* **************************** New Script -> 21-02-2021  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1315,'1.00','V1',' Sproc_CreateRfqConsolidateLineItem - CC '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1315:
            allDbChangesArray.push(
                /* **************************** New Script -> 21-02-2022  *********************************** */
                "DROP procedure IF EXISTS `Sproc_RetrieveComponentGroupList`;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveComponentGroupList`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "    IN pComponentId varchar(50),  \n" +
                "    IN pIsFetchAll TINYINT  \n" +
                "	)  \n" +
                "BEGIN  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;  \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "	DECLARE vMfgCodeFormat INT;  \n" +
                "    DECLARE v_refSupplierMfgpnComponentID INT;  \n" +
                "  \n" +
                "    SELECT CASE WHEN (mfgType = 'MFG')  \n" +
                "				THEN id  \n" +
                "                ELSE refSupplierMfgpnComponentID  \n" +
                "			END  \n" +
                "		INTO  v_refSupplierMfgpnComponentID from component where id = pComponentId;  \n" +
                "  	SELECT fun_getMFGCodeNameFormat() INTO vMfgCodeFormat;  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
                "  \n" +
                "	SET @temp_Sproc_RetrieveAssyRevision = CONCAT(\"SELECT  \n" +
                "	c.ID,						c.mfgPN AS `mfgPN`,		c.imageURL,						c.mfgcodeID,		m.mfgCode AS `mfgCode`,   			c.PIDCode,  \n" +
                "	fun_GetFormattedMfgCode(m.mfgCode, m.mfgName,\", vMfgCodeFormat,\") as mfrCode, c.mfgPNDescription,   c.custAssyPN, c.rev, c.liveVersion,  \n" +
                "	c.isGoodPart,        c.restrictUsePermanently,        c.restrictUSEwithpermission,		c.restrictPackagingUsePermanently,		c.restrictPackagingUseWithpermission,  \n" +
                "	m.mfgType,					c.operatingTemp AS `operatingTemp`,			c.minOperatingTemp AS `minOperatingTemp`,				c.maxOperatingTemp AS `maxOperatingTemp`,  \n" +
                "	c.tolerance AS `tolerance`,	c.voltage AS `voltage`,c.value AS `value`,	c.partPackage AS `partPackage`,							c.powerRating AS `powerRating`,  \n" +
                "	c.weight AS `weight`,		c.feature AS `feature`,						c.functionalCategoryText AS `functionalTypeExternal`,	functional.partTypeName AS `functionalTypeInternal`,  \n" +
                "	c.mountingTypeText AS `mountingTypeExternal`,							mounting.name AS `mountingTypeInternal`,				ro.rohsIcon,ro.name rohsName,  \n" +
                "	c.connecterTypeID,			cast(NULL as char(50)) connecterTypeInternal,	c.connectorTypeText,  								c.noOfPosition,  \n" +
                "	c.noOfPositionText,	        c.noOfRows,									c.noOfRowsText,											c.pitch,  \n" +
                "	c.pitchMating,				c.sizeDimension,								(CASE WHEN (c.isEpoxyMount = 1) THEN 'Yes' ELSE 'No' END) AS isEpoxyMount,  \n" +
                "	c.length,		            c.width,	c.heightText,						c.height, 												c.color,  \n" +
                "	c.temperatureCoefficient,	c.temperatureCoefficientValue,					c.temperatureCoefficientUnit,  \n" +
                "	fun_getUserNameByID(c.updatedBy) updatedby,								fun_getUserNameByID(c.createdBy) createdby, 			fun_getRoleByID(c.createByRoleId) createdbyRole,  \n" +
                "	fun_getRoleByID(c.updateByRoleId) updatedbyRole,    					fun_ApplyCommonDateTimeFormatByParaValue(c.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAt,  \n" +
                "	fun_ApplyCommonDateTimeFormatByParaValue(c.UpdatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt  , c.isCustom  \n" +
                "	FROM component c  \n" +
                "	JOIN mfgcodemst m ON m.id = c.mfgcodeID  \n" +
                "	LEFT JOIN rfq_rohsmst ro ON c.RoHSStatusID = ro.id  \n" +
                "	LEFT OUTER JOIN rfq_parttypemst functional ON functional.id = c.functionalCategoryID  \n" +
                "	LEFT OUTER JOIN rfq_mountingtypemst mounting ON mounting.id = c.mountingTypeID  \n" +
                "	WHERE c.isDeleted = 0 and c.id != \", pComponentId , \" AND c.refSupplierMfgpnComponentID = \", v_refSupplierMfgpnComponentID);  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "		SET pOrderBy = \"ORDER BY mfgPN ASC\";  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "	END IF;  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = '1=1' ;  \n" +
                "	END IF;  \n" +
                "	IF(pIsFetchAll = false and  ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "	/* to get total count of rows */  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_RetrieveAssyRevision,\" ) c where 1=1 and \", pWhereClause);  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "	SET @SQLStatement2 = CONCAT(\"select * from ( \", @temp_Sproc_RetrieveAssyRevision,\" ) c  \n" +
                "		where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "	PREPARE query1 FROM @SQLStatement2;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "END;  \n" +

                "DROP procedure IF EXISTS `Sproc_RetrieveAssemblyRevisionList`;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveAssemblyRevisionList`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "    IN pNickname varchar(50),  \n" +
                "    IN pIsFetchAll TINYINT  \n" +
                "	)  \n" +
                "BEGIN  \n" +
                "		DECLARE pOffset INT;  \n" +
                "		DECLARE rowNumWhere VARCHAR(255) ;  \n" +
                "		DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
                "	        DECLARE v_TimeZone VARCHAR(50);  \n" +
                "	DECLARE vMfgCodeFormat INT;  \n" +
                "  \n" +
                "	SELECT fun_getMFGCodeNameFormat() INTO vMfgCodeFormat;  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
                "  \n" +
                "		SET @temp_Sproc_RetrieveAssyRevision = CONCAT(\"SELECT  \n" +
                "        c.ID,						c.mfgPN AS `mfgPN`,	c.imageURL, 	c.mfgcodeID,		m.mfgCode AS `mfgCode`,   			c.PIDCode,  \n" +
                "        fun_GetFormattedMfgCode(m.mfgCode, m.mfgName,\", vMfgCodeFormat,\") as mfrCode, c.mfgPNDescription,   c.custAssyPN, c.rev, c.liveVersion,  \n" +
                "        c.isGoodPart,        c.restrictUsePermanently,        c.restrictUSEwithpermission,		c.restrictPackagingUsePermanently,		c.restrictPackagingUseWithpermission,  \n" +
                "		m.mfgType,					c.operatingTemp AS `operatingTemp`,			c.minOperatingTemp AS `minOperatingTemp`,				c.maxOperatingTemp AS `maxOperatingTemp`,  \n" +
                "        c.tolerance AS `tolerance`,	c.voltage AS `voltage`,c.value AS `value`,	c.partPackage AS `partPackage`,							c.powerRating AS `powerRating`,  \n" +
                "        c.weight AS `weight`,		c.feature AS `feature`,						c.functionalCategoryText AS `functionalTypeExternal`,	functional.partTypeName AS `functionalTypeInternal`,  \n" +
                "        c.mountingTypeText AS `mountingTypeExternal`,							mounting.name AS `mountingTypeInternal`,				ro.rohsIcon,ro.name rohsName,  \n" +
                "        c.connecterTypeID,			cast(NULL as char(50)) connecterTypeInternal,	c.connectorTypeText,  								c.noOfPosition,  \n" +
                "        c.noOfPositionText,	        c.noOfRows,									c.noOfRowsText,											c.pitch,  \n" +
                "        c.pitchMating,				c.sizeDimension,								(CASE WHEN (c.isEpoxyMount = 1) THEN 'Yes' ELSE 'No' END) AS isEpoxyMount,  \n" +
                "        c.length,		            c.width,	c.heightText,						c.height, 												c.color,  \n" +
                "        c.temperatureCoefficient,	c.temperatureCoefficientValue,					c.temperatureCoefficientUnit,  \n" +
                "        fun_getUserNameByID(c.updatedBy) updatedby,								fun_getUserNameByID(c.createdBy) createdby, 			fun_getRoleByID(c.createByRoleId) createdbyRole,  \n" +
                "		fun_getRoleByID(c.updateByRoleId) updatedbyRole,    					fun_ApplyCommonDateTimeFormatByParaValue(c.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAt,  \n" +
                "		fun_ApplyCommonDateTimeFormatByParaValue(c.UpdatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt   , c.isCustom  \n" +
                "        FROM component c  \n" +
                "        JOIN mfgcodemst m ON m.id = c.mfgcodeID  \n" +
                "        LEFT JOIN rfq_rohsmst ro ON c.RoHSStatusID = ro.id  \n" +
                "        LEFT OUTER JOIN rfq_parttypemst functional ON functional.id = c.functionalCategoryID  \n" +
                "        LEFT OUTER JOIN rfq_mountingtypemst mounting ON mounting.id = c.mountingTypeID  \n" +
                "        WHERE c.category = 3 and c.nickName= '\",pNickname,\"' AND c.isDeleted = 0\");  \n" +
                "  \n" +
                "		IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "			SET pOrderBy = \"ORDER BY mfgPN ASC\";  \n" +
                "		ELSE  \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "			SET pWhereClause = '1=1' ;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF(pIsFetchAll = false AND ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "			SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "		ELSE  \n" +
                "			SET rowNumWhere = '';  \n" +
                "		END IF;  \n" +
                "		/* to get total count of rows */  \n" +
                "		SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_RetrieveAssyRevision,\" ) c where 1=1 and \", pWhereClause);  \n" +
                "		PREPARE query2 FROM @SQLStatement2;  \n" +
                "		EXECUTE query2;  \n" +
                "		DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "		SET @SQLStatement2 = CONCAT(\"select * from ( \", @temp_Sproc_RetrieveAssyRevision,\" ) c  \n" +
                "			where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "		PREPARE query1 FROM @SQLStatement2;  \n" +
                "		EXECUTE query1;  \n" +
                "		DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "    END;  \n" +

                "DROP procedure IF EXISTS `Sproc_RetrieveGoodBadParts`;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveGoodBadParts`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pComponentID INT,  \n" +
                "    IN pIsFetchAll TINYINT  \n" +
                "	)  \n" +
                "BEGIN  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;  \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "    DECLARE v_whereCluase VARCHAR(255) ;  \n" +
                "	DECLARE vMfgCodeFormat INT;  \n" +
                "    DECLARE v_replacementPartID INT;  \n" +
                "    DECLARE v_isGoodPart INT;  \n" +
                "  \n" +
                "    -- ----  '1' - Good Part, '2' - Incorrect Part, '3' - TBS(Unknown) Part  \n" +
                "    SELECT replacementPartID , isGoodPart  \n" +
                "		INTO  v_replacementPartID,v_isGoodPart from component where id = pComponentID;  \n" +
                "	SELECT fun_getMFGCodeNameFormat() INTO vMfgCodeFormat;  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
                "  \n" +
                "  set v_whereCluase = (SELECT CASE WHEN (v_isGoodPart = 1) THEN CONCAT(' and c.replacementPartID = ', pComponentID)  \n" +
                "									WHEN (v_isGoodPart = 2)  THEN CONCAT(' and  c.id = ', v_replacementPartID)  \n" +
                "                                    ELSE ''  \n" +
                "                                    END);  \n" +
                "  \n" +
                "	SET @temp_Sproc_RetrieveComponentAlternetPart = CONCAT(\"SELECT  \n" +
                "	c.ID,						c.mfgPN AS `mfgPN`,							c.mfgcodeID,		m.mfgCode AS `mfgCode`,   			c.PIDCode,  \n" +
                "	fun_GetFormattedMfgCode(m.mfgCode, m.mfgName,\", vMfgCodeFormat,\") as mfrCode, c.mfgPNDescription,   c.custAssyPN, c.rev, c.liveVersion,  \n" +
                "		(CASE WHEN (`c`.`isGoodPart` = 1) THEN 'Correct Part'  \n" +
                "					WHEN (`c`.`isGoodPart` = 2) THEN 'Incorrect Part'  \n" +
                "					WHEN (`c`.`isGoodPart` = 3) THEN 'TBD Part'  \n" +
                "					ELSE '' END) AS `isGoodPartValue`,  \n" +
                "	c.isGoodPart,        c.restrictUsePermanently,        c.restrictUSEwithpermission,		c.restrictPackagingUsePermanently,		c.restrictPackagingUseWithpermission,  \n" +
                "	m.mfgType,					c.operatingTemp AS `operatingTemp`,			c.minOperatingTemp AS `minOperatingTemp`,				c.maxOperatingTemp AS `maxOperatingTemp`,  \n" +
                "	c.tolerance AS `tolerance`,	c.voltage AS `voltage`,c.value AS `value`,	c.partPackage AS `partPackage`,							c.powerRating AS `powerRating`,  \n" +
                "	c.weight AS `weight`,		c.feature AS `feature`,						c.functionalCategoryText AS `functionalTypeExternal`,	functional.partTypeName AS `functionalTypeInternal`,  \n" +
                "	c.mountingTypeText AS `mountingTypeExternal`,							mounting.name AS `mountingTypeInternal`,				ro.rohsIcon,ro.name rohsName,  \n" +
                "	c.connecterTypeID,			cast(NULL as char(50)) connecterTypeInternal,	c.connectorTypeText,  								c.noOfPosition,  \n" +
                "	c.noOfPositionText,	        c.noOfRows,									c.noOfRowsText,											c.pitch,  \n" +
                "	c.pitchMating,				c.sizeDimension,								(CASE WHEN (c.isEpoxyMount = 1) THEN 'Yes' ELSE 'No' END) AS isEpoxyMount,  \n" +
                "	c.length,		            c.width,	c.heightText,						c.height, 												c.color,  \n" +
                "	c.temperatureCoefficient,	c.temperatureCoefficientValue,					c.temperatureCoefficientUnit,  \n" +
                "	fun_getUserNameByID(c.updatedBy) updatedby,								fun_getUserNameByID(c.createdBy) createdby, 			fun_getRoleByID(c.createByRoleId) createdbyRole,  \n" +
                "	fun_getRoleByID(c.updateByRoleId) updatedbyRole,    					fun_ApplyCommonDateTimeFormatByParaValue(c.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAt,  \n" +
                "	fun_ApplyCommonDateTimeFormatByParaValue(c.UpdatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt  \n" +
                "	FROM component c  \n" +
                "	JOIN mfgcodemst m ON m.id = c.mfgcodeID  \n" +
                "	LEFT JOIN rfq_rohsmst ro ON c.RoHSStatusID = ro.id  \n" +
                "	LEFT OUTER JOIN rfq_parttypemst functional ON functional.id = c.functionalCategoryID  \n" +
                "	LEFT OUTER JOIN rfq_mountingtypemst mounting ON mounting.id = c.mountingTypeID  \n" +
                "	WHERE c.isDeleted = 0\", v_whereCluase);  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "		SET pOrderBy = \"ORDER BY mfgPN ASC\";  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "	END IF;  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = '1=1' ;  \n" +
                "	END IF;  \n" +
                "	IF(pIsFetchAll = false and ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "	/* to get total count of rows */  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_RetrieveComponentAlternetPart,\" ) c where 1=1 and \", pWhereClause);  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "	SET @SQLStatement2 = CONCAT(\"select * from ( \", @temp_Sproc_RetrieveComponentAlternetPart,\" ) c  \n" +
                "		where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "	PREPARE query1 FROM @SQLStatement2;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "END;  \n" +

                "DROP procedure IF EXISTS `Sproc_GetComponentMFGPIDPRODPNAliasSearch`;  \n" +
                "CREATE PROCEDURE `Sproc_GetComponentMFGPIDPRODPNAliasSearch`(  \n" +
                "IN pSearch VARCHAR(500),  \n" +
                "IN pMfgType VARCHAR(50),  \n" +
                "IN pIsAssy TINYINT,  \n" +
                "IN pId INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "    SET @temp_Sproc_RetrieveComp  = 'SELECT `com`.`id`,  \n" +
                "        CONCAT(''('',`mfgCodemst`.`mfgCode`, '') '',`com`.`mfgPN`, \" | \", `com`.`PIDCode`,  \n" +
                "         (CASE WHEN `com`.`productionPN` is null THEN \"\" else CONCAT(\" | \",`com`.`productionPN`) END)) mfgPN,  \n" +
                "		`com`.`mfgPN` orgMfgPN,  \n" +
                "		`com`.`mfgPNDescription`,  \n" +
                "        `com`.`mfgType`,  \n" +
                "        `com`.`PIDCode`  \n" +
                "	FROM `component` AS `com`  \n" +
                "	INNER JOIN `mfgCodemst` AS `mfgCodemst` ON `com`.`mfgcodeID` = `mfgCodemst`.`id`  \n" +
                "    where 1 = 1';  \n" +
                "  \n" +
                "    IF(pId is not null) THEN  \n" +
                "		set @temp_Sproc_RetrieveComp = concat(@temp_Sproc_RetrieveComp, ' and `com`.`id` = ', pId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF(pMfgType is not null) THEN  \n" +
                "		set @temp_Sproc_RetrieveComp = concat(@temp_Sproc_RetrieveComp, ' and `com`.`mfgType` = \"', pMfgType , '\"');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF(pIsAssy = 1) THEN  \n" +
                "		set @temp_Sproc_RetrieveComp = concat(@temp_Sproc_RetrieveComp, ' and `com`.`category` = 3');  \n" +
                "	END IF;  \n" +
                "    set @temp_Sproc_RetrieveComp = concat('select * from (',@temp_Sproc_RetrieveComp, ' ) as a');  \n" +
                "  \n" +
                "    IF(pSearch is not null) THEN  \n" +
                "		set @temp_Sproc_RetrieveComp = concat(@temp_Sproc_RetrieveComp, ' where `a`.`mfgPN` like CONCAT(\"%', pSearch ,'%\") or EXISTS',  \n" +
                "													'(SELECT 1 FROM component_otherpn opn WHERE opn.refcomponentid = `a`.`id` AND opn.name LIKE CONCAT(\"%,', pSearch , ',%\"))  \n" +
                "											');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "   SET @SQLStatement1 = CONCAT(@temp_Sproc_RetrieveComp, ' ORDER BY  mfgPN');  \n" +
                "	PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version ->  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1316,'1.00','V1',' User Story 40991: [Main Branch] Supplier Pricing tab Demo Improvement points given by Jaybhai on 01-02-2022 - SHUBHAM '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1316:
            allDbChangesArray.push(
                /* **************************** New Script -> 22-02-2022 *********************************** */
                "select pageID into @parentPage from page_detail where pageName = 'Material Management';  \n" +
                "update page_detail  \n" +
                "set pageRoute ='app.transaction.shipmentsummary',  \n" +
                "	pageURL ='/shipmentsummary', parentPageID=@parentPage ,displayMenuName='Customer Open Sales Order & Shipment Summary'  \n" +
                "where pageName='Customer Open Sales Order & Shipment Summary';  \n" +
                /* **************************** Add Script Version -> 22-02-2022  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1317,'1.00','V1','Update Page Detail for Shipment Summary  - Shweta '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1317:
            allDbChangesArray.push(
                /* **************************** New Script -> 22-00-2022  *********************************** */
                "DROP procedure IF EXISTS `Sproc_GetComponentMFGPIDPRODPNAliasSearch`;  \n" +
                "CREATE PROCEDURE `Sproc_GetComponentMFGPIDPRODPNAliasSearch`(  \n" +
                "IN pSearch VARCHAR(500),  \n" +
                "IN pMfgType VARCHAR(50),  \n" +
                "IN pIsAssy TINYINT,  \n" +
                "IN pId INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "    SET @temp_Sproc_RetrieveComp  = 'SELECT `com`.`id`,  \n" +
                "        CONCAT(''('',`mfgCodemst`.`mfgCode`, '') '',`com`.`mfgPN`, \" | \", `com`.`PIDCode`,  \n" +
                "         (CASE WHEN `com`.`productionPN` is null THEN \"\" else CONCAT(\" | \",`com`.`productionPN`) END)) mfgPN,  \n" +
                "		`com`.`mfgPN` orgMfgPN,  \n" +
                "		`com`.`mfgPNDescription`,  \n" +
                "        `com`.`mfgType`,  \n" +
                "        `com`.`PIDCode`  \n" +
                "	FROM `component` AS `com`  \n" +
                "	INNER JOIN `mfgCodemst` AS `mfgCodemst` ON `com`.`mfgcodeID` = `mfgCodemst`.`id`  \n" +
                "    where com.isDeleted = 0';  \n" +
                "  \n" +
                "    IF(pId is not null) THEN  \n" +
                "		set @temp_Sproc_RetrieveComp = concat(@temp_Sproc_RetrieveComp, ' and `com`.`id` = ', pId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF(pMfgType is not null) THEN  \n" +
                "		set @temp_Sproc_RetrieveComp = concat(@temp_Sproc_RetrieveComp, ' and `com`.`mfgType` = \"', pMfgType , '\"');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF(pIsAssy = 1) THEN  \n" +
                "		set @temp_Sproc_RetrieveComp = concat(@temp_Sproc_RetrieveComp, ' and `com`.`category` = 3');  \n" +
                "	END IF;  \n" +
                "    set @temp_Sproc_RetrieveComp = concat('select * from (',@temp_Sproc_RetrieveComp, ' ) as a');  \n" +
                "  \n" +
                "    IF(pSearch is not null) THEN  \n" +
                "		set @temp_Sproc_RetrieveComp = concat(@temp_Sproc_RetrieveComp, ' where `a`.`mfgPN` like CONCAT(\"%', pSearch ,'%\") or EXISTS',  \n" +
                "													'(SELECT 1 FROM component_otherpn opn WHERE opn.refcomponentid = `a`.`id` AND opn.name LIKE CONCAT(\"%,', pSearch , ',%\")  \n" +
                "                                                    and opn.isDeleted = 0)  \n" +
                "											');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "   SET @SQLStatement1 = CONCAT(@temp_Sproc_RetrieveComp, ' ORDER BY  mfgPN');  \n" +
                "	PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version ->  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1318,'1.00','V1',' Bug 41304: [Main Branch] Old search result must not show while entering Part# in Part Search pop-hover - Check Comments - SHUBHAM '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1318:
            allDbChangesArray.push(
                /* **************************** New Script -> 24-02-2022  *********************************** */
                "ALTER TABLE `packing_slip_material_receive_det`  \n" +
                "ADD COLUMN `isZeroValue` TINYINT NOT NULL DEFAULT '0';  \n" +
                "ALTER TABLE `packing_slip_material_receive`  \n" +
                "ADD COLUMN `isZeroValue` TINYINT NOT NULL DEFAULT '0';  \n" +
                /* **************************** Add Script Version ->  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1319,'1.00','V1','User Story 37932: [Main Branch] Requesting Confirming Zero Value Invoice at Supplier invoice Header - Ashish'," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1319:
            allDbChangesArray.push(
                /* **************************** New Script -> 24-02-2022  *********************************** */
                "Drop procedure if exists `Sproc_RetrivePackingSlipMaterialDetList`;  \n" +
                "CREATE PROCEDURE `Sproc_RetrivePackingSlipMaterialDetList`(  \n" +
                "	IN pPageIndex INT,  \n" +
                "	IN pRecordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pPackingSlipID INT,  \n" +
                "    IN pInvoiceLineId INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;  \n" +
                "	DECLARE v_ParentPackingSlipId INT;  \n" +
                "	DECLARE v_InvoiceSlipId INT;  \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "	DECLARE vMfgCodeFormat INT;  \n" +
                "  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
                "    SELECT fun_getMFGCodeNameFormat() INTO vMfgCodeFormat;  \n" +
                "  \n" +
                "	SELECT id INTO v_ParentPackingSlipId FROM packing_slip_material_receive WHERE refPackingSlipNumberForInvoice = pPackingSlipID AND isDeleted = 0;  \n" +
                "  \n" +
                "	SELECT refPackingSlipNumberForInvoice INTO v_InvoiceSlipId FROM packing_slip_material_receive WHERE id = pPackingSlipID AND isDeleted = 0;  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS packingSlipResult;  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS packingSlipResult AS  \n" +
                "	SELECT 	*,  \n" +
                "		(  \n" +
                "			CASE  \n" +
                "				WHEN a.receivedStatus = 'P' THEN 'Pending'  \n" +
                "				WHEN a.receivedStatus = 'A' THEN 'Accepted'  \n" +
                "				WHEN a.receivedStatus = 'R' THEN 'Rejected'  \n" +
                "                WHEN a.receivedStatus = 'AD' THEN 'Accepted with Deviation'  \n" +
                "				ELSE NULL  \n" +
                "			END  \n" +
                "		) AS receivedStatusValue,  \n" +
                "		(  \n" +
                "			SELECT COUNT(id)  \n" +
                "			FROM packing_slip_material_receive_det_stock  \n" +
                "			WHERE refPackingSlipId = a.refPackingSlipMaterialRecID  \n" +
                "				AND partId = a.partID  \n" +
                "				AND packagingId = a.packagingID  \n" +
                "				AND binId = a.binID  \n" +
                "				AND isdeleted = 0  \n" +
                "                Limit 1  \n" +
                "		) AS isRMACreated,  \n" +
                "        (  \n" +
                "			CASE  \n" +
                "				WHEN a.TotalUMIDCount = a.orderedQty THEN TRUE  \n" +
                "				WHEN a.TotalUMIDCount <> a.orderedQty THEN  FALSE  \n" +
                "				ELSE False  \n" +
                "			END  \n" +
                "		) AS isPendingUMIDDisable  \n" +
                "	FROM 	(  \n" +
                "		SELECT 	p.id,						p.refPackingSlipMaterialRecID, 				p.refChargesTypeId,  \n" +
                "				CAST(p.packingSlipSerialNumber AS DECIMAL(50,1)) packingSlipSerialNumber,  \n" +
                "				p.nickname, 					p.partID, 								p.scanLabel,  \n" +
                "				p.orderedQty, 					p.receivedQty, 							p.packingSlipQty,  \n" +
                "				p.binID, 						p.warehouseID, 							p.parentWarehouseID,  \n" +
                "				p.invoicePrice, 				p.disputedPrice,  \n" +
                "				fun_getUserNameByID(p.createdBy) createdByName,  \n" +
                "				fun_getUserNameByID(p.updatedBy) updatedByName,  \n" +
                "				fun_getRoleByID(p.createByRoleId) createdbyRole,  \n" +
                "				fun_getRoleByID(p.updateByRoleId) updatedbyRole,  \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(p.createdAt, v_TimeZone, v_DateTimeDisplayFormat) createdAt,  \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(p.updatedAt, v_TimeZone, v_DateTimeDisplayFormat) updatedAt,  \n" +
                "				p.purchasePrice, 				p.approveNote, 						p.otherCharges,  \n" +
                "				p.status, 						p.extendedPrice, 					p.extendedReceivedPrice,  \n" +
                "				p.discount,  \n" +
                "				(IFNULL(p.extendedPrice, 0) - (IFNULL(p.extendedReceivedPrice, 0) + IFNULL(p.discount, 0))) lineVariance,  \n" +
                "				(IFNULL(p.packingSlipQty, 0) - IFNULL(p.receivedQty, 0)) lineQtyVariance,  \n" +
                "				p.refCreditDebitInvoiceNo,  \n" +
                "				p.difference, 					p.differenceQty, 					p.umidCreated,  \n" +
                "				p.poReleaseNumber,              p.isMemoForPrice,					p.isMemoForQty,  \n" +
                "				cmc.mfgCode,	fun_GetFormattedMfgCode(cmc.mfgCode, cmc.mfgName, vMfgCodeFormat) mfgName,  \n" +
                "                fun_getMfgCodeAndNameByID(sc.mfgcodeID) supplierCode1,  \n" +
                "                fun_GetFormattedMfgCode(scmc.mfgCode, scmc.mfgName, vMfgCodeFormat) supplierCode,  \n" +
                "				c.mfgcodeID,					c.mfgPN, c.PIDCode,					sc.mfgPN supplierPN,  \n" +
                "				c.unit,							c.uom,					  			fun_getUnitNameByID(c.uom) uomName,  \n" +
                "				0 totalReceivedQty,				0 pendingQty,						sc.mfgcodeID supplierMfgCodeId,  \n" +
                "				p.packagingID,					fun_getPackagingNameByID(p.packagingID) packaging,	sc.id supplierMFGPNID,  \n" +
                "				fun_getBinNameByID(p.binID) `bin`,  		fun_getWarehouseNameByID(p.warehouseID) warehouse,	fun_getWarehouseNameByID(p.parentWarehouseID) parentWarehouse,  \n" +
                "				c.RoHSStatusID,					fun_getRoHSIconByID(c.RoHSStatusID) rohsIcon, 		fun_getRoHSNameByID(c.RoHSStatusID) rohsName,  \n" +
                "				sc.RoHSStatusID supplierRoHSStatusID,		fun_getRoHSIconByID(sc.RoHSStatusID) supplierRohsIcon, 	fun_getRoHSNameByID(sc.RoHSStatusID) supplierRohsName,  \n" +
                "				sc.packagingID supplierPackagingId,		c.umidSPQ spq,                     c.packageQty,                  c.isCustom,  \n" +
                "				c.partType,                 			pod.partDescription,					pod.lineComment partPurchaseComment,  \n" +
                "				pod.internalLineComment,				p.refPOLineID,							p.rohsstatus,  \n" +
                "				p.isReceivedWrongPart,      			p.refPurchaseOrderDetID,				p.refPOReleaseLineID,  \n" +
                "				fun_getRoHSNameByID(p.rohsstatus) prohsName,  \n" +
                "				(  \n" +
                "					CASE  \n" +
                "						WHEN (v_ParentPackingSlipId IS NULL) THEN  \n" +
                "							p.receivedStatus  \n" +
                "						ELSE  \n" +
                "							(SELECT receivedStatus  \n" +
                "							FROM 	packing_slip_material_receive_det  \n" +
                "							WHERE 	refPackingSlipMaterialRecID = v_ParentPackingSlipId  \n" +
                "									AND packingSlipSerialNumber = p.packingSlipSerialNumber  \n" +
                "									AND isDeleted = 0 LIMIT 1)  \n" +
                "					END  \n" +
                "				) receivedStatus,  \n" +
                "				p.remark,  \n" +
                "				p.internalRemark,  \n" +
                "				p.comment,  \n" +
                "				p.internalRef,  \n" +
                "				p.purchaseInspectionComment,  \n" +
                "				(  \n" +
                "					CASE  \n" +
                "						WHEN (v_ParentPackingSlipId IS NULL) THEN  \n" +
                "							(SELECT COUNT(1) FROM packing_slip_material_receive_part_inspection_det psmp WHERE psmp.lineId = p.id AND psmp.isDeleted = 0 AND psmp.category = 'P' AND psmp.requiementType = 'R')  \n" +
                "						ELSE  \n" +
                "							(SELECT COUNT(1)  \n" +
                "							FROM 	packing_slip_material_receive_part_inspection_det psmp  \n" +
                "							WHERE EXISTS (  \n" +
                "									SELECT 	1  \n" +
                "									FROM 	packing_slip_material_receive_det pslip  \n" +
                "									WHERE 	pslip.refPackingSlipMaterialRecID = v_ParentPackingSlipId  \n" +
                "											AND 	pslip.id = psmp.lineId  \n" +
                "											AND 	pslip.packingSlipSerialNumber = p.packingSlipSerialNumber  \n" +
                "											AND	pslip.isDeleted = 0)  \n" +
                "								AND psmp.isDeleted = 0 AND psmp.category = 'P' AND psmp.requiementType = 'R')  \n" +
                "					END  \n" +
                "				) AS purchaseRequirementCount,  \n" +
                "				(  \n" +
                "					CASE  \n" +
                "						WHEN (v_ParentPackingSlipId IS NULL) THEN  \n" +
                "							(SELECT COUNT(1) FROM packing_slip_material_receive_part_inspection_det WHERE lineId = p.id AND inspectionStatus = 'R' AND isDeleted = 0 AND category = 'P' AND requiementType = 'R')  \n" +
                "						ELSE  \n" +
                "							(SELECT COUNT(1)  \n" +
                "							FROM 	packing_slip_material_receive_part_inspection_det psm  \n" +
                "							WHERE 	EXISTS (  \n" +
                "									SELECT 	1  \n" +
                "									FROM 	packing_slip_material_receive_det psmr  \n" +
                "									WHERE 	psmr.refPackingSlipMaterialRecID = v_ParentPackingSlipId  \n" +
                "										AND	psmr.id = psm.lineId  \n" +
                "										AND 	psmr.packingSlipSerialNumber = p.packingSlipSerialNumber  \n" +
                "										AND 	psmr.isDeleted = 0  \n" +
                "									)  \n" +
                "								AND psm.inspectionStatus = 'R'  \n" +
                "								AND psm.isDeleted = 0  \n" +
                "								AND psm.category = 'P' AND psm.requiementType = 'R')  \n" +
                "					END  \n" +
                "				) AS rejectedPurchaseRequirementCount,  \n" +
                "				(CASE WHEN p.`status` = 'A' THEN 'Approved' WHEN p.`status` = 'D' THEN 'Disapproved' ELSE 'Pending' END) invoiceVerificationStatus,  \n" +
                "				(CASE WHEN p.`status` = 'A' THEN 'Approved' WHEN p.`status` = 'D' THEN 'Disapproved' ELSE 'Pending' END) invoiceVerificationStatusForButton,  \n" +
                "				fun_getGenericCategoryNameByID(p.refChargesTypeId) otherChargesValue,  \n" +
                "				p.umidCreatedQty AS TotalUMIDCount,  \n" +
                "				(SELECT GROUP_CONCAT(IFNULL(creditMemoNumber, debitMemoNumber)) FROM packing_slip_material_receive ps WHERE ps.isDeleted = 0 AND FIND_IN_SET(ps.id, p.refCreditDebitInvoiceNo)) AS memoNumber,  \n" +
                "				(SELECT SUM(extendedPrice) FROM packing_slip_material_receive_det ps WHERE ps.isDeleted = 0 AND ps.refPackingSlipDetId = p.id /*GROUP BY ps.refPackingSlipDetId*/) AS amount,  \n" +
                "				-- (SELECT packingSlipSerialNumber FROM packing_slip_material_receive_det ps WHERE ps.id = p.refPackingSlipDetId AND ps.isDeleted = 0) refInvoiceLine,  \n" +
                "				ps.refInvoiceIdForMemo,  \n" +
                "				ps.refInvoiceLineForMemo refInvoiceLine,  \n" +
                "				ps.refInvoiceNumberForMemo,  \n" +
                "				(  \n" +
                "					CASE  \n" +
                "						WHEN 	v_InvoiceSlipId IS NULL THEN NULL  \n" +
                "						ELSE  \n" +
                "							(SELECT `status`  \n" +
                "							FROM 	packing_slip_material_receive_det  \n" +
                "							WHERE 	refPackingSlipMaterialRecID = v_InvoiceSlipId  \n" +
                "									AND packingSlipSerialNumber = p.packingSlipSerialNumber  \n" +
                "									AND isDeleted = 0)  \n" +
                "					END  \n" +
                "				) invoiceStatus,  \n" +
                "				(  \n" +
                "					CASE  \n" +
                "						WHEN 	v_InvoiceSlipId IS NULL THEN NULL  \n" +
                "						ELSE  \n" +
                "							(SELECT refCreditDebitInvoiceNo  \n" +
                "							FROM 	packing_slip_material_receive_det  \n" +
                "							WHERE 	refPackingSlipMaterialRecID = v_InvoiceSlipId  \n" +
                "									AND packingSlipSerialNumber = p.packingSlipSerialNumber  \n" +
                "									AND isDeleted = 0)  \n" +
                "					END  \n" +
                "				) invoiceLineHasMemo,  \n" +
                "				sc.isCustom AS isCustomSupplier,	p.allReceivedQty,  \n" +
                "				(SELECT COUNT(1) FROM  packing_slip_material_receive_part_inspection_det pd  \n" +
                "				  WHERE pd.isdeleted = 0 AND pd.category = 'P'  \n" +
                "					AND pd.requiementType ='C' AND pd.lineId = p.id  \n" +
                "					AND pd.partId = p.partID) commentCount,  \n" +
                "				(SELECT GROUP_CONCAT(inspectionStatus SEPARATOR '###') FROM packing_slip_material_receive_part_inspection_det WHERE lineId = p.id AND category = 'P' AND requiementType ='R' AND isDeleted = 0) psInspectionStatus,  \n" +
                "				p.refPackingSlipIdForRma,  \n" +
                "				p.refPackingSlipDetIdForRMA,  \n" +
                "				p.refInvoiceIdForRma,  \n" +
                "				p.refPackingSlipForRma,  \n" +
                "				p.refInvoiceForRma,  \n" +
                "				rm.packingSlipQty parentDetailLinePackingSlipQty,  \n" +
                "				rm.invoicePrice parentDetailLineInvoicePrice,  \n" +
                "				rm.extendedPrice parentDetailLineExtendedPrice,  \n" +
                "				(CASE WHEN p.refPackingSlipIdForRma IS NOT NULL THEN ps.packingSlipNumber/*fun_getPackingSlipNumberById(p.refPackingSlipIdForRma)*/ ELSE p.refPackingSlipForRma END) refPackingSlipNumber,  \n" +
                "				(CASE WHEN p.refInvoiceIdForRma IS NOT NULL THEN fun_getSupplierInvoiceNumberByID(p.refInvoiceIdForRma) ELSE p.refInvoiceForRma END) refInvoiceNumber,  \n" +
                "				(CASE WHEN p.refPackingSlipIdForRma IS NOT NULL THEN ps.mfgCodeID/*fun_getPackingSlipSupplierIdBySlipId(p.refPackingSlipIdForRma)*/ ELSE NULL END) refPackingSlipSupplierId,  \n" +
                "                ps.packingSlipModeStatus,  \n" +
                "                fun_getBinNameByID(psd.binID) refPackingSlipBinName,  \n" +
                "                m.refPurchaseOrderID, m.poDate, m.soDate, p.disputeQty, p.totalLines, p.pendingLines, p.acceptedWithDeviationLines, p.rejectedLines, p.acceptedLines, c.isReceiveBulkItem,  \n" +
                "                p.isLineCustConsigned, p.isNonUMIDStock,  \n" +
                "                CASE WHEN p.isLineCustConsigned=0 THEN 'No' ELSE 'Yes' END isLineCustConsignedValue,  \n" +
                "                CASE WHEN p.isNonUMIDStock=0 THEN 'No' ELSE 'Yes' END isNonUMIDStockValue,  \n" +
                "                p.LineCustomerID as lineCustomerID,  \n" +
                "				fun_GetFormattedMfgCode(mc.mfgcode, mc.mfgName, vMfgCodeFormat) customerName,  \n" +
                "                c.isCPN,  \n" +
                "                (  \n" +
                "						CASE 	WHEN p.isZeroValue = 0 THEN  \n" +
                "								'No'  \n" +
                "							WHEN p.isZeroValue = 1 THEN  \n" +
                "								'Yes'  \n" +
                "						END  \n" +
                "					) isZeroValueText,  \n" +
                "                p.isZeroValue  \n" +
                "		FROM		packing_slip_material_receive_det p  \n" +
                "        JOIN 	packing_slip_material_receive m on m.id = p.refPackingSlipMaterialRecID AND m.isDeleted = 0  \n" +
                "        LEFT JOIN	packing_slip_material_receive ps on ps.id = p.refPackingSlipIdForRma and ps.isDeleted = 0 and ps.receiptType = 'P'  \n" +
                "        LEFT JOIN	packing_slip_material_receive_det psd on psd.id = p.refPackingSlipDetIdForRMA and psd.isDeleted = 0  \n" +
                "		JOIN 	component c ON c.id = p.partID AND c.isDeleted = 0  \n" +
                "        join mfgcodemst cmc ON cmc.id = c.mfgCodeID and cmc.mfgType = 'MFG' and cmc.isDeleted = 0  \n" +
                "		LEFT JOIN	component sc ON sc.id = p.refSupplierPartId AND sc.isDeleted = 0 AND sc.mfgType = 'DIST'  \n" +
                "        left join mfgcodemst scmc ON scmc.id = sc.mfgCodeID and scmc.mfgType = 'DIST' and scmc.isDeleted = 0  \n" +
                "        LEFT JOIN	mfgcodemst mc  on mc.id = p.LineCustomerID  \n" +
                "		LEFT JOIN	(  \n" +
                "					SELECT 	id refInvoiceDetailIdForMemo, refPackingSlipMaterialRecID refInvoiceIdForMemo, fun_getSupplierInvoiceNumberByID(refPackingSlipMaterialRecID) refInvoiceNumberForMemo, packingSlipSerialNumber refInvoiceLineForMemo  \n" +
                "					FROM 	packing_slip_material_receive_det ps  \n" +
                "					WHERE 	ps.isDeleted = 0  \n" +
                "				) ps ON ps.refInvoiceDetailIdForMemo = p.refPackingSlipDetId  \n" +
                "		LEFT JOIN 	(  \n" +
                "					SELECT 	det.packingSlipSerialNumber, det.packingSlipQty, det.invoicePrice, det.extendedPrice, det.refPackingSlipMaterialRecID  \n" +
                "					FROM 	packing_slip_material_receive_det det  \n" +
                "					WHERE 	det.isDeleted = 0 AND det.refPackingSlipMaterialRecID = v_ParentPackingSlipId  \n" +
                "				) rm ON rm.packingSlipSerialNumber = p.packingSlipSerialNumber  \n" +
                "		LEFT JOIN 	purchase_order_det pod ON pod.id = p.refPurchaseOrderDetID AND pod.isDeleted = 0  \n" +
                "		WHERE   	p.refPackingSlipMaterialRecID = pPackingSlipID  \n" +
                "		AND 		p.isDeleted = 0  \n" +
                "	) a;  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempReceivedQtyResult;  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS tempReceivedQtyResult AS  \n" +
                "	SELECT /*ps.supplierSONumber, psm.partID, SUM(psm.ReceivedQty)  totalReceivedQty, SUM(psm.packingSlipQty) totalPackingSlipQty, psm.packagingID, psm.refPOLineID*/  \n" +
                "			psm.partID, psm.refPOLineID, SUM(psm.ReceivedQty)  totalReceivedQty, SUM(psm.packingSlipQty) totalPackingSlipQty  \n" +
                "	  FROM packing_slip_material_receive_det psm  \n" +
                "	 INNER JOIN packing_slip_material_receive ps ON ps.id = psm.refPackingSlipMaterialRecID  \n" +
                "	 WHERE EXISTS (SELECT 1 FROM packingSlipResult p WHERE p.PartID = psm.partID)  \n" +
                "       AND EXISTS (SELECT 1 FROM packing_slip_material_receive psmr WHERE psmr.poNumber = ps.poNumber AND psmr.id = pPackingSlipID AND psmr.isDeleted = 0)  \n" +
                "	   AND ps.receiptType = 'P'  \n" +
                "	   AND psm.isDeleted = 0  \n" +
                "	/*GROUP BY 	ps.poNumber, psm.partID, psm.refPOLineID*/  \n" +
                "     GROUP BY 	psm.partID, psm.refPOLineID;  \n" +
                "  \n" +
                "	-- Set received qty detail  \n" +
                "	UPDATE packingSlipResult r, tempReceivedQtyResult q  \n" +
                "	   SET r.totalReceivedQty = q.totalReceivedQty,  \n" +
                "			r.pendingQty = (IFNULL(r.orderedQty, 0) - IFNULL(q.totalPackingSlipQty,0))  \n" +
                "	 WHERE r.partID = q.partID AND r.refPOLineID = q.refPOLineID;  \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "		SET pOrderBy = \"ORDER BY id DESC\" ;  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = '1=1' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF pInvoiceLineId IS NOT NULL THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, \" and id = '\", pInvoiceLineId,\"'\") ;  \n" +
                "    END IF;  \n" +
                "  \n" +
                "	IF(pPageIndex <> 0 AND pRecordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (pPageIndex -1) * pRecordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/* to get total count of rows */  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord  FROM packingSlipResult where \", pWhereClause );  \n" +
                "	PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT * FROM  packingSlipResult where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "	SET @SQLStatement3 = CONCAT(\" SELECT `status` AS statusOfMainSlip, invoiceApprovalStatus invoiceApprovalStatusOfMainSlip,  \n" +
                "											invoiceTotalDue As invoiceTotalDue,  \n" +
                "									   ifnull((select round(sum(b.paymentAmount),2)  \n" +
                "										  from packingslip_invoice_payment a  \n" +
                "										  join packingslip_invoice_payment_det b ON a.id = b.refPayementid  \n" +
                "										 where b.refPackingslipInvoiceID = c.id  \n" +
                "                                           and a.refPaymentMode = 'P'  \n" +
                "                                           and a.isPaymentVoided = 0),0) paymentAmountTotal  \n" +
                "									FROM packing_slip_material_receive c WHERE id = \", pPackingSlipID ,\" AND isDeleted = 0\");  \n" +
                "	PREPARE query3 FROM @SQLStatement3;  \n" +
                "	EXECUTE query3;  \n" +
                "	DEALLOCATE PREPARE query3;  \n" +
                "  \n" +
                "END;  \n" +
                "Drop procedure if exists `Sproc_SaveInvoiceAndInvoiceLineDetail`;  \n" +
                "CREATE PROCEDURE `Sproc_SaveInvoiceAndInvoiceLineDetail`(  \n" +
                "	IN pInvoiceDetail JSON,  \n" +
                "	IN pPackingSlipId INT,  \n" +
                "	IN pSystemId VARCHAR(20),  \n" +
                "	IN pUserId VARCHAR(50),  \n" +
                "	IN pUserRoleId VARCHAR(50)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE v_CountOfInvoiceDetail INT;  \n" +
                "	DECLARE v_CountOfInvoiceLineDetail INT;  \n" +
                "    DECLARE v_CountOfRMA INT;  \n" +
                "	DECLARE v_IdOfInvoice INT;  \n" +
                "  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_Invoice_Detail;  \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_Invoice_Detail AS  \n" +
                "		SELECT 	*  \n" +
                "		FROM 	JSON_TABLE(  \n" +
                "			pInvoiceDetail,  \n" +
                "			\"$[*]\" COLUMNS(  \n" +
                "				poNumber VARCHAR(50) PATH \"$.poNumber\",  \n" +
                "				poDate DATE PATH \"$.poDate\",  \n" +
                "				mfgCodeID INT PATH \"$.mfgCodeID\",  \n" +
                "				supplierSONumber VARCHAR(50) PATH \"$.supplierSONumber\",  \n" +
                "                soDate DATE PATH \"$.soDate\",  \n" +
                "				packingSlipNumber VARCHAR(50) PATH \"$.packingSlipNumber\",  \n" +
                "				packingSlipDate DATE PATH \"$.packingSlipDate\",  \n" +
                "				invoiceNumber VARCHAR(50) PATH \"$.invoiceNumber\",  \n" +
                "				invoiceDate DATE PATH \"$.invoiceDate\",  \n" +
                "				creditMemoNumber VARCHAR(50) PATH \"$.creditMemoNumber\",  \n" +
                "				creditMemoDate DATE PATH \"$.creditMemoDate\",  \n" +
                "				debitMemoNumber VARCHAR(50) PATH \"$.debitMemoNumber\",  \n" +
                "				debitMemoDate DATE PATH \"$.debitMemoDate\",  \n" +
                "				receiptDate DATE PATH \"$.receiptDate\",  \n" +
                "				receiptType VARCHAR(1) PATH \"$.receiptType\",  \n" +
                "				`status` VARCHAR(5) PATH \"$.status\",  \n" +
                "				applyDate DATE PATH \"$.applyDate\",  \n" +
                "				invoiceTotalDue DECIMAL(18,8) PATH \"$.invoiceTotalDue\",  \n" +
                "				isTariffInvoice TINYINT PATH \"$.isTariffInvoice\",  \n" +
                "				refPackingSlipId INT PATH \"$.refPackingSlipId\",  \n" +
                "				paymentTermsID INT PATH \"$.paymentTermsID\",  \n" +
                "				termsDays INT PATH \"$.termsDays\",  \n" +
                "				creditMemoType VARCHAR(5) PATH \"$.creditMemoType\",  \n" +
                "                invoiceRequireManagementApproval INT PATH \"$.invoiceRequireManagementApproval\",  \n" +
                "                internalRemark  VARCHAR(1000) PATH \"$.internalRemark\",  \n" +
                "                remark  VARCHAR(1000) PATH \"$.remark\",  \n" +
                "                refSupplierCreditMemoNumber  VARCHAR(50) PATH \"$.refSupplierCreditMemoNumber\",  \n" +
                "                refPurchaseOrderID INT PATH \"$.refPurchaseOrderID\",  \n" +
                "                billToAddress VARCHAR(1000) PATH \"$.billToAddress\",  \n" +
                "                billToAddressID INT PATH \"$.billToAddressID\",  \n" +
                "                billToConactPerson VARCHAR(1000) PATH \"$.billToConactPerson\",  \n" +
                "                billToContactPersonID INT PATH \"$.billToContactPersonID\",  \n" +
                "                isZeroValue TINYINT PATH \"$.isZeroValue\"  \n" +
                "			)  \n" +
                "		) AS Invoice_Detail_JT;  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS temp_Invoice_Line_Detail;  \n" +
                "		CREATE TEMPORARY TABLE temp_Invoice_Line_Detail  \n" +
                "		(  \n" +
                "			packingSlipSerialNumber VARCHAR(50),  \n" +
                "			nickname VARCHAR(50),  \n" +
                "			partID INT,  \n" +
                "			refSupplierPartId INT,  \n" +
                "			scanLabel VARCHAR(1000),  \n" +
                "			receivedQty DECIMAL(18,8),  \n" +
                "			packingSlipQty DECIMAL(18,8),  \n" +
                "			binID INT,  \n" +
                "			warehouseID INT,  \n" +
                "			parentWarehouseID INT,  \n" +
                "			invoicePrice DECIMAL(18,8),  \n" +
                "			purchasePrice DECIMAL(18,8),  \n" +
                "			disputedPrice DECIMAL(18,8),  \n" +
                "			approveNote VARCHAR(1000),  \n" +
                "			otherCharges INT,  \n" +
                "			`status` VARCHAR(1),  \n" +
                "			extendedPrice DECIMAL(18,8),  \n" +
                "			refCreditDebitInvoiceNo INT,  \n" +
                "			difference DECIMAL(18,8),  \n" +
                "			umidCreated TINYINT,  \n" +
                "			poReleaseNumber VARCHAR(1000),  \n" +
                "			packagingID INT,  \n" +
                "			receivedStatus VARCHAR(2),  \n" +
                "			remark LONGTEXT,  \n" +
                "            isZeroValue tinyint  \n" +
                "		);  \n" +
                "  \n" +
                "		INSERT INTO temp_Invoice_Line_Detail (  \n" +
                "			packingSlipSerialNumber,  \n" +
                "			nickname,  \n" +
                "			partID,  \n" +
                "			refSupplierPartId,  \n" +
                "			scanLabel,  \n" +
                "			receivedQty,  \n" +
                "			packingSlipQty,  \n" +
                "			binID,  \n" +
                "			warehouseID,  \n" +
                "			parentWarehouseID,  \n" +
                "			invoicePrice,  \n" +
                "			disputedPrice,  \n" +
                "			approveNote,  \n" +
                "			otherCharges,  \n" +
                "			`status`,  \n" +
                "			extendedPrice,  \n" +
                "			refCreditDebitInvoiceNo,  \n" +
                "			difference,  \n" +
                "			umidCreated,  \n" +
                "			poReleaseNumber,  \n" +
                "			packagingID,  \n" +
                "			receivedStatus,  \n" +
                "			remark,  \n" +
                "            isZeroValue  \n" +
                "		)  \n" +
                "		SELECT  packingSlipSerialNumber,  \n" +
                "			nickname,  \n" +
                "			partID,  \n" +
                "			refSupplierPartId,  \n" +
                "			scanLabel,  \n" +
                "			receivedQty,  \n" +
                "			packingSlipQty,  \n" +
                "			binID,  \n" +
                "			warehouseID,  \n" +
                "			parentWarehouseID,  \n" +
                "			invoicePrice,  \n" +
                "			disputedPrice,  \n" +
                "			approveNote,  \n" +
                "			otherCharges,  \n" +
                "			`status`,  \n" +
                "			(  \n" +
                "				CASE  \n" +
                "					WHEN (packingSlipQty IS NOT NULL AND invoicePrice IS NOT NULL) THEN  \n" +
                "						(packingSlipQty * invoicePrice)  \n" +
                "					ELSE  \n" +
                "						NULL  \n" +
                "				END  \n" +
                "			),  \n" +
                "			refCreditDebitInvoiceNo,  \n" +
                "			difference,  \n" +
                "			umidCreated,  \n" +
                "			poReleaseNumber,  \n" +
                "			packagingID,  \n" +
                "			receivedStatus,  \n" +
                "			remark,  \n" +
                "            isZeroValue  \n" +
                "		FROM 	packing_slip_material_receive_det  \n" +
                "		WHERE 	isDeleted = 0  \n" +
                "				AND refPackingSlipMaterialRecID = pPackingSlipId;  \n" +
                "  \n" +
                "			SELECT COUNT(1) INTO v_CountOfInvoiceDetail FROM temp_Invoice_Detail;  \n" +
                "  \n" +
                "			IF (v_CountOfInvoiceDetail > 0) THEN  \n" +
                "				INSERT INTO packing_slip_material_receive (systemId, poNumber, poDate, mfgCodeID, supplierSONumber, soDate, packingSlipNumber, packingSlipDate, invoiceNumber, invoiceDate,  \n" +
                "							creditMemoNumber, creditMemoDate, debitMemoNumber, debitMemoDate, receiptDate, receiptType, `status`, applyDate, invoiceTotalDue, isTariffInvoice,  \n" +
                "							creditMemoType, createdBy, updatedBy, createByRoleId, updateByRoleId, paymentTermsID,termsDays, invoiceRequireManagementApproval,  \n" +
                "                            internalRemark, remark, invoiceApprovalStatus, refSupplierCreditMemoNumber, refPurchaseOrderID,  \n" +
                "                            billToAddress, billToAddressID, billToConactPerson, billToContactPersonID, isZeroValue)  \n" +
                "				SELECT 	pSystemId,  \n" +
                "					(CASE WHEN (poNumber IS NULL OR poNumber = \"\") THEN NULL ELSE poNumber END),  \n" +
                "					(CASE WHEN (poDate IS NULL OR poDate = \"0000-00-00\") THEN NULL ELSE poDate END),  \n" +
                "					mfgCodeID,  \n" +
                "					(CASE WHEN (supplierSONumber IS NULL OR supplierSONumber = \"\") THEN NULL ELSE supplierSONumber END),  \n" +
                "                    (CASE WHEN (soDate IS NULL OR soDate = \"0000-00-00\") THEN NULL ELSE soDate END),  \n" +
                "					packingSlipNumber, packingSlipDate,  \n" +
                "					(CASE WHEN (invoiceNumber IS NULL OR invoiceNumber = \"\") THEN NULL ELSE invoiceNumber END),  \n" +
                "					(CASE WHEN (invoiceDate IS NULL OR invoiceDate = \"0000-00-00\") THEN NULL ELSE invoiceDate END),  \n" +
                "					(CASE WHEN (creditMemoNumber IS NULL OR creditMemoNumber = \"\") THEN NULL ELSE creditMemoNumber END),  \n" +
                "					(CASE WHEN (creditMemoDate IS NULL OR creditMemoDate = \"0000-00-00\") THEN NULL ELSE creditMemoDate END),  \n" +
                "					(CASE WHEN (debitMemoNumber IS NULL OR debitMemoNumber = \"\") THEN NULL ELSE debitMemoNumber END),  \n" +
                "					(CASE WHEN (debitMemoDate IS NULL OR debitMemoDate = \"0000-00-00\") THEN NULL ELSE debitMemoDate END),  \n" +
                "					receiptDate, receiptType,  \n" +
                "					`status`, -- (case when invoiceRequireManagementApproval = 0 then `status` else 'I' end), /*status*/  \n" +
                "					applyDate, invoiceTotalDue, isTariffInvoice,  \n" +
                "					(CASE WHEN creditMemoType IS NULL OR creditMemoType = \"\" THEN NULL ELSE creditMemoType END),  \n" +
                "					pUserId, pUserId, pUserRoleId, pUserRoleId, paymentTermsID, termsDays, invoiceRequireManagementApproval,  \n" +
                "                    internalRemark,  \n" +
                "                    remark,  \n" +
                "					(CASE WHEN invoiceRequireManagementApproval = 0 THEN 3 ELSE 2 END) /*invoiceApprovalStatus*/,  \n" +
                "                    (CASE WHEN (refSupplierCreditMemoNumber IS NULL OR refSupplierCreditMemoNumber = \"\") THEN NULL ELSE refSupplierCreditMemoNumber END) /*refSupplierCreditMemoNumber*/,  \n" +
                "                    (CASE WHEN (refPurchaseOrderID IS NULL OR refPurchaseOrderID = 0) THEN NULL ELSE refPurchaseOrderID END)  /*refPurchaseOrderID*/,  \n" +
                "                    (CASE WHEN (billToAddress IS NULL OR billToAddress = \"\") THEN NULL ELSE billToAddress END) /*billToAddress*/,  \n" +
                "                    (CASE WHEN (billToAddressID IS NULL OR billToAddressID = 0) THEN NULL ELSE billToAddressID END)  /*billToAddressID*/,  \n" +
                "                    (CASE WHEN (billToConactPerson IS NULL OR billToConactPerson = \"\") THEN NULL ELSE billToConactPerson END) /*billToConactPerson*/,  \n" +
                "                    (CASE WHEN (billToContactPersonID IS NULL OR billToContactPersonID = 0) THEN NULL ELSE billToContactPersonID END)  /*billToContactPersonID*/,  \n" +
                "                    isZeroValue  \n" +
                "				FROM 	temp_Invoice_Detail;  \n" +
                "  \n" +
                "				SELECT LAST_INSERT_ID() INTO v_IdOfInvoice;  \n" +
                "  \n" +
                "				UPDATE 	packing_slip_material_receive  \n" +
                "				SET 	refPackingSlipNumberForInvoice = v_IdOfInvoice,  \n" +
                "					`status` = (CASE WHEN receiptType = 'P' THEN 'IR' WHEN receiptType = 'R' THEN 'CR' ELSE NULL END)  \n" +
                "				WHERE	id = (SELECT refPackingSlipId FROM temp_Invoice_Detail LIMIT 1)  \n" +
                "						AND isDeleted = 0;  \n" +
                "  \n" +
                "				select count(1) into v_CountOfRMA  \n" +
                "                  from packing_slip_material_receive_det d  \n" +
                "				 where exists (select 1 from packing_slip_material_receive p where p.id = d.refPackingSlipMaterialRecID and p.receiptType = 'R' and p.isDeleted = 0)  \n" +
                "					and d.refPackingSlipIdForRma = (SELECT refPackingSlipId FROM temp_Invoice_Detail LIMIT 1) /*packing slip id*/  \n" +
                "                    and d.isDeleted = 0  \n" +
                "					and d.refPackingSlipForRma is null/*manual packing slip*/  \n" +
                "					and d.refInvoiceIdForRma is null /* invoice id */;  \n" +
                "                 IF v_CountOfRMA != 0 THEN  \n" +
                "					/*update invoice id in RMA packing slip which is created before creating invoice*/  \n" +
                "                    update packing_slip_material_receive_det d  \n" +
                "						set d.refInvoiceIdForRma = v_IdOfInvoice  \n" +
                "					 where exists (select 1 from packing_slip_material_receive p where p.id = d.refPackingSlipMaterialRecID and p.receiptType = 'R' and p.isDeleted = 0)  \n" +
                "						and d.refPackingSlipIdForRma = (SELECT refPackingSlipId FROM temp_Invoice_Detail LIMIT 1) /*packing slip id*/  \n" +
                "						and d.isDeleted = 0  \n" +
                "						and d.refPackingSlipForRma is null/*manual packing slip*/  \n" +
                "						and d.refInvoiceIdForRma is null /* invoice id */;  \n" +
                "				 END IF;  \n" +
                "			END IF;  \n" +
                "  \n" +
                "			SELECT COUNT(1) INTO v_CountOfInvoiceLineDetail FROM temp_Invoice_Line_Detail;  \n" +
                "			IF (v_CountOfInvoiceLineDetail > 0) THEN  \n" +
                "				INSERT INTO packing_slip_material_receive_det (refPackingSlipMaterialRecID, packingSlipSerialNumber, nickname, partID, refSupplierPartId, scanLabel, receivedQty, packingSlipQty, binID, warehouseID, parentWarehouseID, invoicePrice, purchasePrice, disputedPrice, otherCharges, `status`, extendedPrice, refCreditDebitInvoiceNo, difference, umidCreated, poReleaseNumber, packagingID, receivedStatus, remark, isZeroValue, createdBy, updatedBy, createByRoleId, updateByRoleId)  \n" +
                "				SELECT 	v_IdOfInvoice, packingSlipSerialNumber,  \n" +
                "					nickname,  \n" +
                "					(CASE WHEN ( partID > 0) THEN  partID ELSE NULL END),  \n" +
                "					(CASE WHEN ( refSupplierPartId > 0) THEN  refSupplierPartId ELSE NULL END),  \n" +
                "					scanLabel,  \n" +
                "					receivedQty,  \n" +
                "					packingSlipQty,  \n" +
                "					(CASE WHEN ( binID > 0) THEN  binID ELSE NULL END),  \n" +
                "					(CASE WHEN ( warehouseID > 0) THEN  warehouseID ELSE NULL END),  \n" +
                "					(CASE WHEN ( parentWarehouseID < 0) THEN  parentWarehouseID ELSE NULL END),  \n" +
                "					invoicePrice,  \n" +
                "					purchasePrice,  \n" +
                "					disputedPrice,  \n" +
                "					otherCharges,  \n" +
                "					`status`,  \n" +
                "					extendedPrice,  \n" +
                "					(CASE WHEN ( refCreditDebitInvoiceNo > 0) THEN  refCreditDebitInvoiceNo ELSE NULL END),  \n" +
                "					difference,  \n" +
                "					umidCreated,  \n" +
                "					poReleaseNumber,  \n" +
                "					(CASE WHEN ( packagingID > 0) THEN  packagingID ELSE NULL END),  \n" +
                "					receivedStatus,  \n" +
                "					remark,  \n" +
                "                    isZeroValue,  \n" +
                "					pUserId,  \n" +
                "					pUserId,  \n" +
                "					pUserRoleId,  \n" +
                "					pUserRoleId  \n" +
                "				FROM 	temp_Invoice_Line_Detail;  \n" +
                "			END IF;  \n" +
                "  \n" +
                "	SELECT v_IdOfInvoice AS PackingSlipId;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version ->  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1320,'1.00','V1','User Story 37932: [Main Branch] Requesting Confirming Zero Value Invoice at Supplier invoice Header - Ashish'," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1320:
            allDbChangesArray.push(
                /* **************************** New Script -> 24-02-2022  *********************************** */
                "drop procedure if exists `Sproc_RetriveSupplierInvoiceList`;  \n" +
                "CREATE PROCEDURE `Sproc_RetriveSupplierInvoiceList`(  \n" +
                "	IN pPageIndex INT,  \n" +
                "	IN pRecordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pReceiptType VARCHAR(30),  \n" +
                "	IN pMfgCodeIds LONGTEXT,  \n" +
                "	IN pPaymentMethodTypeIds LONGTEXT,  \n" +
                "	IN pDueDate DATE,  \n" +
                "	IN pAdditionalDays INT,  \n" +
                "	IN pTermsAndAboveDays INT,  \n" +
                "	IN pInvoiceNumber VARCHAR(50),  \n" +
                "	IN pIsExactSearch TINYINT,  \n" +
                "	IN pMfrPnId INT,  \n" +
                "    IN pInvoiceIds LONGTEXT,  \n" +
                "    IN pExactPaymentNumberSearch TINYINT,  \n" +
                "    IN pPaymentNumber VARCHAR(50),  \n" +
                "    IN pPaymentTermsIds LONGTEXT,  \n" +
                "    IN pInvPaymentTermsIds LONGTEXT,  \n" +
                "    IN pInvoiceFromDate DATE,  \n" +
                "    IN pInvoiceToDate DATE,  \n" +
                "    IN pMarkedForRefundStatus LONGTEXT,  \n" +
                "    IN pInvoiceComments VARCHAR(1000),  \n" +
                "    IN pLockStatusFilter VARCHAR(50),  \n" +
                "    IN pSelectedDateType VARCHAR(10),  \n" +
                "    IN pIsConfirmedZeroValueInvoicesOnly TINYINT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255);  \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "    DECLARE vCurrentDate DATE;  \n" +
                "    DECLARE vMfgCodeFormat INT;  \n" +
                "  \n" +
                "	SELECT FUN_GETTIMEZONE() INTO v_TimeZone;  \n" +
                "	SELECT FUN_GETDATETIMEFORMAT() INTO v_DateTimeDisplayFormat;  \n" +
                "    SELECT fun_getMFGCodeNameFormat() INTO vMfgCodeFormat;  \n" +
                "  \n" +
                "    SELECT CAST(fun_ConvertUTCDatetimeToDataKeyDateTimeZone(UTC_TIMESTAMP()) AS DATE) INTO vCurrentDate;  \n" +
                "  \n" +
                "	SET @temp_Sproc_RetriveSupplierInvoiceList = CONCAT(\"  \n" +
                "			SELECT 		p.id,  \n" +
                "					p.systemId,  \n" +
                "					p.poNumber,  \n" +
                "                    p.poDate,  \n" +
                "                    p.refPurchaseOrderID poId,  \n" +
                "					p.mfgCodeID,  \n" +
                "					p.supplierSONumber,  \n" +
                "                    p.soDate,  \n" +
                "					(CASE WHEN p.receiptType = 'I' THEN psm.packingSlipNumber ELSE p.packingSlipNumber END) packingSlipNumber,  \n" +
                "                    (CASE WHEN p.receiptType = 'I' THEN psm.lockStatus ELSE p.lockStatus END) packingSlipLockStatus,  \n" +
                "					p.packingSlipDate,  \n" +
                "					p.invoiceNumber,  \n" +
                "                    p.lockStatus invoiceLockStatus,  \n" +
                "					p.invoiceDate,  \n" +
                "					ps.invoiceDate refParentCreditDebitInvoiceDate,  \n" +
                "					p.creditMemoNumber,  \n" +
                "                    p.lockStatus creditMemoLockStatus,  \n" +
                "					p.creditMemoDate,  \n" +
                "					p.debitMemoNumber,  \n" +
                "                    p.refSupplierCreditMemoNumber,  \n" +
                "                    p.lockStatus debitMemoLockStatus,  \n" +
                "					p.debitMemoDate,  \n" +
                "					p.receiptDate,  \n" +
                "					p.description,  \n" +
                "					p.billToAddress,  \n" +
                "					p.shipToAddress,  \n" +
                "					p.poVersion,  \n" +
                "					p.isDeleted,  \n" +
                "					p.receiptType,  \n" +
                "					p.`status`,  \n" +
                "					p.applyDate,  \n" +
                "					p.refParentCreditDebitInvoiceno,  \n" +
                "					p.refPackingSlipNumberForInvoice,  \n" +
                "					p.invoiceTotalDue,  \n" +
                "					p.isTariffInvoice,  \n" +
                "					p.creditMemoType,  \n" +
                "                    (  \n" +
                "						CASE 	WHEN p.creditMemoType = 'IC' THEN  \n" +
                "								'Invoice Credit Memo (Auto)'  \n" +
                "							WHEN p.creditMemoType = 'MC' THEN  \n" +
                "								'MISC Credit Memo'  \n" +
                "							WHEN p.creditMemoType = 'RC' THEN  \n" +
                "								'RMA Credit Memo'  \n" +
                "							WHEN p.creditMemoType = 'ID' THEN  \n" +
                "								'Invoice Debit Memo (Auto)'  \n" +
                "							WHEN p.creditMemoType = 'MD' THEN  \n" +
                "								'MISC Debit Memo'  \n" +
                "							WHEN p.receiptType = 'I' and p.isTariffInvoice = '0' THEN  \n" +
                "								'Invoice'  \n" +
                "							WHEN p.receiptType = 'I' and p.isTariffInvoice = '1' THEN  \n" +
                "								'MISC Invoice'  \n" +
                "						END  \n" +
                "					) subTypeValue,  \n" +
                "					fun_getUserNameByID(p.updatedBy) updatedByName,  \n" +
                "					fun_getUserNameByID(p.createdBy)  createdByName,  \n" +
                "					fun_getRoleByID(p.createByRoleId) createdbyRole,  \n" +
                "					fun_getRoleByID(p.updateByRoleId) updatedbyRole,  \n" +
                "					fun_ApplyCommonDateTimeFormatByParaValue(p.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAt,  \n" +
                "					fun_ApplyCommonDateTimeFormatByParaValue(p.updatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt,  \n" +
                "                    m.mfgName supplierName,  \n" +
                "					fun_GetFormattedMfgCode(m.mfgCode, m.mfgName,\",vMfgCodeFormat,\") supplierCode,  \n" +
                "					m.mfgCode supplierCodeName,  \n" +
                "					IFNULL(psDoc.cnt,0) invoiceDocCount,  \n" +
                "					pg.packingSlipDocCount,  \n" +
                "					pd.itemReceived,  \n" +
                "					pd.otherChargesItemReceived,  \n" +
                "					pd.itemDisapproved,  \n" +
                "					fun_getReceiptTypeName(p.`receiptType`) receiptMemoType,  \n" +
                "                    fun_getInvoiceStatusName(p.`status`) invoiceVerificationStatus,  \n" +
                "					ps.status parentInvoiceStatus,  \n" +
                "					ps.invoiceNumber refInvoiceNumber,  \n" +
                "                    ps.lockStatus refInvoiceLockStatus,  \n" +
                "					ps.creditMemoType parentCreditMemoType,  \n" +
                "					pd.totalExtendedAmount,  \n" +
                "                    pd.totalDiscount,  \n" +
                "					pe.totalCreditAmount,  \n" +
                "					pe.totalDebitAmount,  \n" +
                "					(  \n" +
                "						IFNULL(pd.totalExtendedAmount, 0) - IFNULL((pe.totalCreditAmount * -1), 0) - IFNULL((pe.totalDebitAmount * -1), 0)  \n" +
                "					) amountToPay,  \n" +
                "                    pd.totalExtendedReceivedPrice,  \n" +
                "					pd.packingDetailNote,  \n" +
                "					pd.approveLineCount,  \n" +
                "					fun_getDueDateEOM((case WHEN p.receiptType = 'D' THEN  \n" +
                "											p.debitMemoDate  \n" +
                "										WHEN p.receiptType = 'C' THEN  \n" +
                "											p.creditMemoDate  \n" +
                "										ELSE p.invoiceDate  \n" +
                "									end), payTerm.termsDays, p.paymentTermsID) paymentDueDate,  \n" +
                "					g.gencCategoryName paymentTermName,  \n" +
                " 					m.paymentTermsID paymentTermsID,  \n" +
                "                    payTerm.gencCategoryName invPaymentTermName,  \n" +
                "                    p.paymentTermsID invPaymentTermsID,  \n" +
                "					(CASE WHEN p.receiptType = 'I' THEN psm.id ELSE p.id END) packingSlipId,  \n" +
                "					psm.packingSlipModeStatus,  \n" +
                "                    psPay.paymentDate,  \n" +
                "					ifnull(psPay.paidAmount,0) paidAmount,  \n" +
                "					ifnull(psPay.refundAmount,0) refundAmount,  \n" +
                "					ifnull(pe.totalPaidDebitCreditAmount,0) totalPaidDebitCreditAmount,  \n" +
                "                    ifnull(pe.totalRefundDebitCreditAmount,0) totalRefundDebitCreditAmount,  \n" +
                "					p.invoiceRequireManagementApproval,  \n" +
                "					(  \n" +
                "						CASE 	WHEN p.invoiceRequireManagementApproval = 1 THEN  \n" +
                "								'Yes'  \n" +
                "							WHEN p.invoiceRequireManagementApproval = 0 THEN  \n" +
                "								'No'  \n" +
                "						END  \n" +
                "					) invoiceRequireManagementApprovalValue,  \n" +
                "					p.invoiceApprovalStatus,  \n" +
                "					(  \n" +
                "						CASE 	WHEN p.invoiceApprovalStatus = 1 THEN  \n" +
                "								'Approved'  \n" +
                "							WHEN p.invoiceApprovalStatus = 2 THEN  \n" +
                "								'Pending'  \n" +
                "							WHEN p.invoiceApprovalStatus = 3 THEN  \n" +
                "								'N/A'  \n" +
                "						END  \n" +
                "					) invoiceApprovalStatusValue,  \n" +
                "					p.invoiceApprovedBy,  \n" +
                "					fun_getUserNameByID(p.invoiceApprovedBy) invoiceApprovedByName,  \n" +
                "					fun_ApplyCommonDateTimeFormatByParaValue(p.invoiceApprovalDate,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') invoiceApprovalDate,  \n" +
                "					p.invoiceApprovalComment,  \n" +
                "					p.internalRemark,  \n" +
                "                    p.remark,  \n" +
                "					p.lockStatus,  \n" +
                "					(case when p.lockStatus = 'NA' then 'Not Applicable'  \n" +
                "						when p.lockStatus = 'RL' then 'Ready To Lock'  \n" +
                "						when p.lockStatus = 'LC' then 'Locked'  \n" +
                "						else null end  \n" +
                "					) lockStatusValue,  \n" +
                "					fun_getUserNameByID(p.lockedBy) lockByName,  \n" +
                "					fun_getRoleByID(p.lockedByRoleId) lockedByRoleName,  \n" +
                "					fun_ApplyCommonDateTimeFormatByParaValue(p.lockedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') lockedAt,  \n" +
                "                    case when p.receiptType = 'I' then  \n" +
                "							ifnull(p.invoiceTotalDue,0) - ((ifnull(pd.totalExtendedReceivedPrice,0)+ifnull(pd.totalDiscount,0))+((IFNULL((pe.totalCreditAmount), 0) + IFNULL((pe.totalDebitAmount),0))*-1))  \n" +
                "						else ifnull(p.invoiceTotalDue,0)+((ifnull(pd.totalExtendedReceivedPrice,0)+ifnull(pd.totalDiscount,0))) end invoiceVariance,  \n" +
                "					h1.refType as haltRefType,  \n" +
                "                    h1.status as haltStatus,  \n" +
                "                    (CASE WHEN h1.status = 'H' THEN  \n" +
                "								'Halted'  \n" +
                "							ELSE ''  \n" +
                "						END  \n" +
                "					) AS haltStatusText,  \n" +
                "                    (CASE  \n" +
                "							WHEN h1.status = 'H' THEN  \n" +
                "								CONCAT(h1.reason, ' - Halt by ',fun_getUserNameByEmployeID(h1.holdEmployeeId),' on ', fun_ConvertUTCDatetimeToDataKeyTimeZone(h1.startDate))  \n" +
                "							ELSE ''  \n" +
                "						END  \n" +
                "					) AS haltReason,  \n" +
                "                    psh1.refType as haltRefTypeRefInv,  \n" +
                "                    psh1.status as haltStatusRefInv,  \n" +
                "                    (CASE WHEN psh1.status = 'H' THEN  \n" +
                "								'Halted'  \n" +
                "							ELSE ''  \n" +
                "						END  \n" +
                "					) AS haltReasonRefInvText,  \n" +
                "                    (CASE  \n" +
                "							WHEN psh1.status = 'H' THEN  \n" +
                "								CONCAT(psh1.reason, ' - Halt by ',fun_getUserNameByEmployeID(psh1.holdEmployeeId),' on ', fun_ConvertUTCDatetimeToDataKeyTimeZone(psh1.startDate))  \n" +
                "							ELSE ''  \n" +
                "						END  \n" +
                "					) AS haltReasonRefInv,  \n" +
                "                    p.markedForRefund,  \n" +
                "                    (case when p.markedForRefund = 0 then 'N/A'  \n" +
                "						else case when ifnull(psPay.refundAmount,0) = 0 then  \n" +
                "										'Waiting for Refund'  \n" +
                "								when ifnull(psPay.refundAmount,0) <> 0 and ifnull(psPay.refundAmount,0) <> ifnull(p.markedForRefundAmt,0)  then  \n" +
                "										'Partially Refunded'  \n" +
                "								when ifnull(psPay.refundAmount,0) = ifnull(p.markedForRefundAmt,0) then  \n" +
                "										'Fully Refunded'  \n" +
                "								else '' end  \n" +
                "						end  \n" +
                "					) markedForRefundValue,  \n" +
                "                    p.markedForRefundAmt,  \n" +
                "					(  \n" +
                "						CASE 	WHEN p.isZeroValue = 0 THEN  \n" +
                "								'No'  \n" +
                "							WHEN p.isZeroValue = 1 THEN  \n" +
                "								'Yes'  \n" +
                "						END  \n" +
                "					) isZeroValueText,  \n" +
                "                    p.isZeroValue  \n" +
                "			FROM packing_slip_material_receive p force index (IDX_packing_slip_material_receive_receiptType)  \n" +
                "            JOIN mfgcodemst m ON m.id = p.mfgCodeID  \n" +
                "            left join (SELECT COUNT(1) AS `cnt`,  \n" +
                "							gFiles.gencFileOwnerType,  \n" +
                "							gFiles.refTransID,  \n" +
                "							gFiles.entityID  \n" +
                "						FROM genericfiles gFiles  \n" +
                "						WHERE gFiles.isDeleted = 0 AND gFiles.isRecycle = 0  \n" +
                "						and gFiles.entityID in (-13,-15,-16)  \n" +
                "						GROUP BY gFiles.gencFileOwnerType , gFiles.refTransID , gFiles.entityID) psDoc  \n" +
                "				ON  psDoc.entityID = (CASE WHEN p.receiptType = 'C' THEN -15  \n" +
                "																		WHEN p.receiptType = 'D' THEN -16  \n" +
                "																		ELSE -13  \n" +
                "																	END)  \n" +
                "				and psDoc.refTransID = p.id  \n" +
                "            LEFT JOIN holdunholdtrans h1 ON h1.refTransId = p.id  \n" +
                "								and h1.id = p.holdUnholdId /*(select max(h2.id)  \n" +
                " 											 from holdunholdtrans h2  \n" +
                " 											where h2.refTransId = h1.refTransId  \n" +
                " 											  and h2.refType in ('SINV','SCM','SDM')  \n" +
                " 											  and h2.isDeleted = 0)*/  \n" +
                "            left join genericcategory g ON g.gencCategoryID = m.paymentTermsID  \n" +
                "            left join genericcategory payTerm ON payTerm.gencCategoryID = p.paymentTermsID  \n" +
                "			LEFT JOIN packing_slip_material_receive ps ON ps.id = p.refParentCreditDebitInvoiceno AND ps.isDeleted = 0  \n" +
                "            LEFT JOIN holdunholdtrans psh1 ON psh1.refTransId = p.refParentCreditDebitInvoiceno  \n" +
                "								and psh1.id = p.refParentCreditDebitInvoiceHoldUnholdId /*(select max(h2.id)  \n" +
                " 											 from holdunholdtrans h2  \n" +
                " 											where psh1.refTransId = h2.refTransId  \n" +
                " 											  and h2.refType = 'SINV'  \n" +
                " 											  and h2.isDeleted = 0)*/  \n" +
                "			LEFT JOIN packing_slip_material_receive psm on psm.refPackingSlipNumberForInvoice = p.id and psm.receiptType = 'P' AND psm.isDeleted = 0  \n" +
                "            left join (  \n" +
                "				SELECT 	IFNULL(g.cnt,0) packingSlipDocCount, g.refTransID  \n" +
                "				FROM 	vu_genericfilescount g  \n" +
                "				WHERE 	g.entityID = -14  \n" +
                "				AND 	g.gencFileOwnerType = 'packing_slip'  \n" +
                "            ) pg on pg.refTransID = psm.id  \n" +
                "			left join (  \n" +
                "							select 	a.refPackingSlipMaterialRecID,  \n" +
                "								GROUP_CONCAT(a.packingSlipSerialNumber, '###', a.approveNote SEPARATOR '||') packingDetailNote,  \n" +
                "								sum(a.itemReceived) itemReceived,  \n" +
                "								sum(a.otherChargesItemReceived) otherChargesItemReceived,  \n" +
                "								sum(a.itemDisapproved) itemDisapproved,  \n" +
                "								sum(a.approveLineCount) approveLineCount,  \n" +
                "								sum(a.extendedPrice) totalExtendedAmount,  \n" +
                "                                sum(discount) totalDiscount,  \n" +
                "								sum(extendedReceivedPrice) totalExtendedReceivedPrice  \n" +
                "							from 	(  \n" +
                "									SELECT 	psm.refPackingSlipMaterialRecID,  \n" +
                "										psm.packingSlipSerialNumber,  \n" +
                "										ifnull(psm.approveNote,psm.comment) approveNote,  \n" +
                "										/*case when psm.refChargesTypeId IS NULL then 1 else 0 end itemReceived,  \n" +
                "										case when psm.refChargesTypeId IS NOT NULL then 1 else 0 end otherChargesItemReceived,*/  \n" +
                "                                        case when psm.packingSlipSerialNumber not REGEXP '^-?[0-9]+$' or psm.packingSlipSerialNumber <= 1000 then 1 else 0 end itemReceived,  \n" +
                "										case when psm.packingSlipSerialNumber REGEXP '^-?[0-9]+$' and psm.packingSlipSerialNumber > 1000 then 1 else 0 end otherChargesItemReceived,  \n" +
                "										case when psm.status = 'D' then 1 else 0 end itemDisapproved,  \n" +
                "										case when psm.status = 'A' then 1 else 0 end approveLineCount,  \n" +
                "										extendedPrice,  \n" +
                "                                        discount,  \n" +
                "										extendedReceivedPrice  \n" +
                "									FROM 	packing_slip_material_receive_det psm  \n" +
                "									WHERE 	psm.isDeleted = 0  \n" +
                "                                    and exists (select 1 from packing_slip_material_receive p where p.id = psm.refPackingSlipMaterialRecID and p.receiptType in ('I','C','D') and p.isDeleted = 0)  \n" +
                "								) a  \n" +
                "							group by a.refPackingSlipMaterialRecID  \n" +
                "						) pd ON pd.refPackingSlipMaterialRecID = p.id  \n" +
                "				left join (select b.refPackingslipInvoiceID,  \n" +
                "									sum(case when a.refPaymentMode = 'P' then b.paymentAmount else 0 end) paidAmount,  \n" +
                "									sum(case when a.refPaymentMode = 'RR' then b.paymentAmount else 0 end) refundAmount,  \n" +
                "                                    max(case when a.refPaymentMode = 'P' then a.paymentDate else null end) paymentDate  \n" +
                "							  from packingslip_invoice_payment a  \n" +
                "							  join packingslip_invoice_payment_det b ON b.refPayementid = a.id  \n" +
                "							 where a.refPaymentMode IN ('P','RR')  \n" +
                "							   and a.isPaymentVoided = 0  \n" +
                "							   and b.isDeleted = 0  \n" +
                "							 group by b.refPackingslipInvoiceID) psPay ON psPay.refPackingslipInvoiceID = p.id  \n" +
                "				left join (  \n" +
                "							select	 	ps.refParentCreditDebitInvoiceno,  \n" +
                "										sum(case when ps.receiptType = 'C' then pd.extendedPrice else 0 end) totalCreditAmount,  \n" +
                "    									sum(case when ps.receiptType = 'D' then pd.extendedPrice else 0 end) totalDebitAmount,  \n" +
                "    									sum(cmPay.paidAmount) totalPaidDebitCreditAmount,  \n" +
                "                                        sum(cmPay.refundAmount) totalRefundDebitCreditAmount  \n" +
                "							from 		packing_slip_material_receive ps  \n" +
                "							inner join 	packing_slip_material_receive_det pd ON ps.id = pd.refPackingSlipMaterialRecID  \n" +
                "                            left join (select b.refPackingslipInvoiceID,  \n" +
                "												sum(case when a.refPaymentMode = 'P' then b.paymentAmount else 0 end) paidAmount,  \n" +
                "												sum(case when a.refPaymentMode = 'RR' then b.paymentAmount else 0 end) refundAmount  \n" +
                "										  from packingslip_invoice_payment a  \n" +
                "										  join packingslip_invoice_payment_det b ON b.refPayementid = a.id  \n" +
                "										 where a.refPaymentMode IN ('P','RR')  \n" +
                "										   and b.isPaymentVoided = 0  \n" +
                "										   and b.isDeleted = 0  \n" +
                "										 group by b.refPackingslipInvoiceID) cmPay ON ps.id = cmPay.refPackingslipInvoiceID  \n" +
                "								  where ps.receiptType in ('C','D')  \n" +
                "									and ps.isDeleted = 0  \n" +
                "									and pd.isDeleted = 0  \n" +
                "							group by 	ps.refParentCreditDebitInvoiceno  \n" +
                "						) pe ON pe.refParentCreditDebitInvoiceno = p.id  \n" +
                "				WHERE p.`status` in ('PE','I','A','P','PP', 'PM') and p.isDeleted = 0 \",  \n" +
                "                (CASE WHEN pInvoiceIds IS NOT NULL THEN CONCAT(\" AND p.id in (\", pInvoiceIds ,\") \") ELSE \"\" END),  \n" +
                "                (CASE WHEN pReceiptType IS NOT NULL THEN CONCAT(\"  AND p.receiptType in (\", pReceiptType ,\")\") ELSE \"\" END),  \n" +
                "                (CASE WHEN pIsConfirmedZeroValueInvoicesOnly = 1 THEN CONCAT(\"  AND p.isZeroValue = true \") ELSE \"\" END)  \n" +
                "	);  \n" +
                "  \n" +
                "	IF (pMfgCodeIds IS NOT NULL AND pMfgCodeIds != '') THEN  \n" +
                "		SET @temp_Sproc_RetriveSupplierInvoiceList= CONCAT(@temp_Sproc_RetriveSupplierInvoiceList, ' AND p.mfgCodeID in (', pMfgCodeIds, ' )');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF (pPaymentTermsIds IS NOT NULL AND pPaymentTermsIds != '') THEN  \n" +
                "		SET @temp_Sproc_RetriveSupplierInvoiceList= CONCAT(@temp_Sproc_RetriveSupplierInvoiceList, ' AND m.paymentTermsID in (', pPaymentTermsIds, ' )');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF (pInvPaymentTermsIds IS NOT NULL AND pInvPaymentTermsIds != '') THEN  \n" +
                "		SET @temp_Sproc_RetriveSupplierInvoiceList= CONCAT(@temp_Sproc_RetriveSupplierInvoiceList, ' AND p.paymentTermsID in (', pInvPaymentTermsIds, ' )');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pPaymentMethodTypeIds IS NOT NULL AND pPaymentMethodTypeIds != '') THEN  \n" +
                "		SET @temp_Sproc_RetriveSupplierInvoiceList= CONCAT(@temp_Sproc_RetriveSupplierInvoiceList, ' and exists (select 1 from mfgcodemst m where m.id = p.mfgCodeID AND m.paymentMethodID in (', pPaymentMethodTypeIds, ' ))');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "     IF(pLockStatusFilter IS NOT NULL)THEN  \n" +
                "    	SET @temp_Sproc_RetriveSupplierInvoiceList = CONCAT(@temp_Sproc_RetriveSupplierInvoiceList,\" and p.lockStatus IN (\", pLockStatusFilter ,\")\");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "      IF(pInvoiceComments IS NOT NULL AND pInvoiceComments != '')THEN  \n" +
                "    	SET @temp_Sproc_RetriveSupplierInvoiceList = CONCAT(@temp_Sproc_RetriveSupplierInvoiceList,\" and (p.internalRemark LIKE '%\",pInvoiceComments,\"%' OR p.remark LIKE '%\",pInvoiceComments,\"%')\");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF (pPaymentNumber IS NOT NULL AND pPaymentNumber != '') THEN  \n" +
                "		SET @temp_Sproc_RetriveSupplierInvoiceList= CONCAT(@temp_Sproc_RetriveSupplierInvoiceList, \"  \n" +
                "				and exists (select 1  \n" +
                "							  from packingslip_invoice_payment pm  \n" +
                "							  join packingslip_invoice_payment_det pd ON pd.refPayementid = pm.id  \n" +
                "							 where pm.isPaymentVoided = 0  \n" +
                "							   and pm.refPaymentMode = 'P'  \n" +
                "							   and pd.refPackingslipInvoiceID = p.id  \n" +
                "							   and pm.isDeleted = 0  \n" +
                "                               and pd.isDeleted = 0  \n" +
                "							   and pm.paymentNumber \",  \n" +
                "                               CASE WHEN pExactPaymentNumberSearch = TRUE THEN CONCAT(\" = '\", pPaymentNumber ,\"' \") ELSE CONCAT(\" like '%\", pPaymentNumber, \"%' \") END  \n" +
                "                               ,\") \");  \n" +
                "    END IF;  \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY paymentDueDate, supplierCode\") ;  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = '1=1' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF pMarkedForRefundStatus IS NOT NULL and pMarkedForRefundStatus != '' THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause,\" and c.markedForRefundValue in (\",pMarkedForRefundStatus,\")\");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF pDueDate IS NOT NULL THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause,\" and c.paymentDueDate <= DATE_ADD('\",pDueDate,\"', INTERVAL \",IFNULL(pAdditionalDays,0),\" DAY) \");  \n" +
                "	ELSEIF (pTermsAndAboveDays IS NOT NULL OR pTermsAndAboveDays = 0) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause,\" and c.paymentDueDate <= DATE_ADD('\",vCurrentDate,\"', INTERVAL \",IFNULL(pTermsAndAboveDays,0),\" DAY) \");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF pInvoiceFromDate IS NOT NULL AND pInvoiceToDate IS NOT NULL THEN  \n" +
                "		IF pSelectedDateType = 'I' THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause,\" and (c.invoiceDate between '\",pInvoiceFromDate,\"' and '\",pInvoiceToDate,\"'  \n" +
                "													or c.refParentCreditDebitInvoiceDate between '\",pInvoiceFromDate,\"' and '\",pInvoiceToDate,\"')\");  \n" +
                "		ELSEIF pSelectedDateType = 'M' THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause,\" AND (receiptDate BETWEEN '\",pInvoiceFromDate,\"' AND '\",pInvoiceToDate,\"')\");  \n" +
                "		ELSEIF pSelectedDateType = 'PO' THEN  \n" +
                "        	SET pWhereClause = CONCAT(pWhereClause,\" AND (poDate BETWEEN '\",pInvoiceFromDate,\"' AND '\",pInvoiceToDate,\"')\");  \n" +
                "		ELSEIF pSelectedDateType = 'C' THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause,\" AND (creditMemoDate BETWEEN '\",pInvoiceFromDate,\"' AND '\",pInvoiceToDate,\"')\");  \n" +
                "		ELSEIF pSelectedDateType = 'D' THEN  \n" +
                "        	SET pWhereClause = CONCAT(pWhereClause,\" AND (debitMemoDate BETWEEN '\",pInvoiceFromDate,\"' AND '\",pInvoiceToDate,\"')\");  \n" +
                "		ELSEIF pSelectedDateType = 'P' THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause,\" AND (packingSlipDate BETWEEN '\",pInvoiceFromDate,\"' AND '\",pInvoiceToDate,\"')\");  \n" +
                "		END IF;  \n" +
                "	ELSEIF pInvoiceFromDate IS NOT NULL THEN  \n" +
                "		IF pSelectedDateType = 'I' THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause,\" and (c.invoiceDate = '\",pInvoiceFromDate,\"'  \n" +
                "													   or c.refParentCreditDebitInvoiceDate = '\",pInvoiceFromDate,\"')\");  \n" +
                "		ELSEIF pSelectedDateType = 'M' THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause,\" AND (receiptDate = '\",pInvoiceFromDate,\"')\");  \n" +
                "		ELSEIF pSelectedDateType = 'PO' THEN  \n" +
                "        	SET pWhereClause = CONCAT(pWhereClause,\" AND (poDate = '\",pInvoiceFromDate,\"')\");  \n" +
                "		ELSEIF pSelectedDateType = 'C' THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause,\" AND (creditMemoDate = '\",pInvoiceFromDate,\"')\");  \n" +
                "		ELSEIF pSelectedDateType = 'D' THEN  \n" +
                "        	SET pWhereClause = CONCAT(pWhereClause,\" AND (debitMemoDate = '\",pInvoiceFromDate,\"')\");  \n" +
                "		ELSEIF pSelectedDateType = 'P' THEN  \n" +
                "        	SET pWhereClause = CONCAT(pWhereClause,\" AND (packingSlipDate = '\",pInvoiceFromDate,\"')\");  \n" +
                "		END IF;  \n" +
                "    END IF;  \n" +
                "  \n" +
                "	IF pInvoiceNumber IS NOT NULL AND pInvoiceNumber != '' THEN  \n" +
                "		IF pIsExactSearch = 1 THEN  \n" +
                "			SET pWhereClause= CONCAT(pWhereClause, \"  \n" +
                "									AND (  \n" +
                "											c.supplierSONumber = '\", pInvoiceNumber, \"'  \n" +
                "										OR 	c.poNumber = '\", pInvoiceNumber, \"'  \n" +
                "										OR 	c.packingSlipNumber = '\", pInvoiceNumber, \"'  \n" +
                "										OR 	c.invoiceNumber = '\", pInvoiceNumber, \"'  \n" +
                "										OR 	c.refInvoiceNumber = '\", pInvoiceNumber, \"'  \n" +
                "										OR 	c.creditMemoNumber = '\", pInvoiceNumber, \"'  \n" +
                "										OR 	c.debitMemoNumber = '\", pInvoiceNumber, \"'\"  \n" +
                "									  \" ) \"  \n" +
                "						);  \n" +
                "		ELSE  \n" +
                "			SET pWhereClause= CONCAT(pWhereClause, \"  \n" +
                "									AND (  \n" +
                "											c.supplierSONumber like '%\", pInvoiceNumber, \"%'  \n" +
                "										OR 	c.poNumber like '%\", pInvoiceNumber, \"%'  \n" +
                "										OR 	c.packingSlipNumber like '%\", pInvoiceNumber, \"%'  \n" +
                "										OR 	c.invoiceNumber like '%\", pInvoiceNumber, \"%'  \n" +
                "										OR 	c.refInvoiceNumber like '%\", pInvoiceNumber, \"%'  \n" +
                "										OR 	c.creditMemoNumber like '%\", pInvoiceNumber, \"%'  \n" +
                "										OR 	c.debitMemoNumber like '%\", pInvoiceNumber, \"%'\"  \n" +
                "									  \" ) \"  \n" +
                "						);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pMfrPnId IS NOT NULL) THEN  \n" +
                "		SET pWhereClause= CONCAT(pWhereClause, \" AND exists (  \n" +
                "				SELECT 1  \n" +
                "				  FROM packing_slip_material_receive_det x  \n" +
                "				 WHERE x.refPackingSlipMaterialRecID = c.id and x.partID = \", pMfrPnId ,\" AND x.isDeleted = 0  \n" +
                "			)  \n" +
                "		\");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pPageIndex <> 0 AND pRecordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (pPageIndex -1) * pRecordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/* to get total count of rows */  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*) as TotalRecord FROM (\", @temp_Sproc_RetriveSupplierInvoiceList ,\" ) c where \", pWhereClause );  \n" +
                "    PREPARE query1 FROM @SQLStatement1;  \n" +
                "    EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"  \n" +
                "			SELECT 	c.*,  \n" +
                "					case when round((c.totalExtendedAmount - c.paidAmount + c.refundAmount),2) != 0 and c.paymentDueDate <= '\",vCurrentDate,\"' then 1 else 0 end isPaymentDueDatePassed,  \n" +
                "				round(c.paidAmount,2) totalPaidAmount,  \n" +
                "                round(c.refundAmount,2) totalRefundAmount,  \n" +
                "				round((c.totalExtendedAmount - c.paidAmount + c.refundAmount),2) paymentAmount,  \n" +
                "				round((c.totalExtendedAmount - c.paidAmount + c.refundAmount),2) balanceToPayAmount,  \n" +
                "				round((c.totalPaidDebitCreditAmount+c.totalRefundDebitCreditAmount+c.paidAmount+c.refundAmount),2) totalPaidAmountToDisableDelete  \n" +
                "			FROM 	(\", @temp_Sproc_RetriveSupplierInvoiceList ,\" ) c  \n" +
                "			where 	\", pWhereClause ,\" \", pOrderBy , rowNumWhere);  \n" +
                "  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  select @temp_Sproc_RetriveSupplierInvoiceList;  \n" +
                "END;  \n" +
                "DROP TRIGGER IF EXISTS `Trg_AU_packing_slip_material_receive`;  \n" +
                "CREATE TRIGGER `Trg_AU_packing_slip_material_receive` AFTER UPDATE ON `packing_slip_material_receive` FOR EACH ROW BEGIN  \n" +
                "	DECLARE vMfgCodeFormat INT;  \n" +
                "    DECLARE vOldCustomer VARCHAR(100);  \n" +
                "    DECLARE vNewCustomer VARCHAR(100);  \n" +
                "  \n" +
                "	SELECT fun_getMFGCodeNameFormat() INTO vMfgCodeFormat;  \n" +
                "	IF OLD.receiptType = \"P\" AND OLD.refPurchaseOrderID IS NULL AND NEW.isCustConsigned != OLD.isCustConsigned THEN  \n" +
                "		UPDATE packing_slip_material_receive_det SET isLineCustConsigned=NEW.isCustConsigned, LineCustomerID=NEW.CustomerID,updatedBy=NEW.updatedBy, updateByRoleId=NEW.updateByRoleId ,updatedAt=fun_DatetimetoUTCDateTime()  WHERE refPackingSlipMaterialRecID=OLD.id;  \n" +
                "        /* (-14) is Packing Slip Entity Default Entry ID*/  \n" +
                "        insert into pending_elastic_entity_sync_data(entityID,entityParamDet) values(-14,concat('{\"id\":', OLD.id , '}'));  \n" +
                "    END IF;  \n" +
                "	IF IFNULL(OLD.poNumber,0) != IFNULL(NEW.poNumber,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'PO#', CAST(OLD.poNumber AS CHAR), CAST(new.poNumber AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "		fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','poNumber'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.poDate,0) != IFNULL(NEW.poDate,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR),  \n" +
                "		CASE  \n" +
                "			WHEN NEW.receiptType = 'P' THEN 'PO Date'  \n" +
                "			WHEN NEW.receiptType = 'R' THEN 'RMA Date'  \n" +
                "			ELSE 'PO Date'  \n" +
                "		END ,  \n" +
                "		CAST(OLD.poDate AS CHAR), CAST(NEW.poDate AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "		fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','poDate'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.mfgCodeID,0) != IFNULL(NEW.mfgCodeID,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Supplier', CAST(fun_getMfgCodeAndNameByID(OLD.mfgCodeID) AS CHAR), CAST(fun_getMfgCodeAndNameByID(new.mfgCodeID) AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        'varchar');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.supplierSONumber,0) != IFNULL(NEW.supplierSONumber,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'SO#', CAST(OLD.supplierSONumber AS CHAR), CAST(new.supplierSONumber AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "		fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','supplierSONumber'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.soDate,0) != IFNULL(NEW.soDate,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'SO Date', CAST(OLD.soDate AS CHAR), CAST(NEW.soDate AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "		fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','soDate'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.packingSlipNumber,0) != IFNULL(NEW.packingSlipNumber,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Packing Slip#', CAST(OLD.packingSlipNumber AS CHAR), CAST(new.packingSlipNumber AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','packingSlipNumber'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.packingSlipDate,0) != IFNULL(NEW.packingSlipDate,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Packing Slip Date', CAST(OLD.packingSlipDate AS CHAR), CAST(NEW.packingSlipDate AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','packingSlipDate'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.invoiceNumber,0) != IFNULL(NEW.invoiceNumber,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Invoice#', CAST(OLD.invoiceNumber AS CHAR), CAST(new.invoiceNumber AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','invoiceNumber'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.invoiceDate,0) != IFNULL(NEW.invoiceDate,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Invoice Date', CAST(OLD.invoiceDate AS CHAR), CAST(NEW.invoiceDate AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','invoiceDate'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.creditMemoNumber,0) != IFNULL(NEW.creditMemoNumber,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Credit Memo#', CAST(OLD.creditMemoNumber AS CHAR), CAST(new.creditMemoNumber AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','creditMemoNumber'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.creditMemoDate,0) != IFNULL(NEW.creditMemoDate,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Credit Memo Date', CAST(OLD.creditMemoDate AS CHAR), CAST(NEW.creditMemoDate AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','creditMemoDate'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.debitMemoNumber,0) != IFNULL(NEW.debitMemoNumber,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Debit Memo#', CAST(OLD.debitMemoNumber AS CHAR), CAST(new.debitMemoNumber AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','debitMemoNumber'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.debitMemoDate,0) != IFNULL(NEW.debitMemoDate,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Debit Memo Date', CAST(OLD.debitMemoDate AS CHAR), CAST(NEW.debitMemoDate AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','debitMemoDate'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.receiptDate,0) != IFNULL(NEW.receiptDate,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), (CASE WHEN (new.receiptType = 'R' OR (new.receiptType = 'C' AND new.creditMemoType = 'RC')) THEN 'Ship By Date' ELSE 'Material Receipt Date' END),  \n" +
                "		CAST(OLD.receiptDate AS CHAR), CAST(NEW.receiptDate AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','receiptDate'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.`status`,0) != IFNULL(NEW.`status`,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR),  \n" +
                "		(  \n" +
                "			CASE  \n" +
                "				WHEN NEW.receiptType = 'P' THEN 'Packing Slip Status'  \n" +
                "				WHEN NEW.receiptType = 'R' THEN 'RMA Status'  \n" +
                "				ELSE 'Supplier Invoice Status'  \n" +
                "			END  \n" +
                "		),  \n" +
                "		CAST(  \n" +
                "			(  \n" +
                "				CASE  \n" +
                "					WHEN OLD.`status` = 'I' THEN 'Investigate'  \n" +
                "					WHEN OLD.`status` = 'W' THEN 'Waiting For Invoice'  \n" +
                "					WHEN OLD.`status` = 'IR' THEN 'Invoice Received'  \n" +
                "					WHEN OLD.`status` = 'A' THEN 'Approved To Pay'  \n" +
                "					WHEN OLD.`status` = 'P' THEN 'Paid'  \n" +
                "					WHEN OLD.`status` = 'PE' THEN 'Pending'  \n" +
                "					WHEN OLD.`status` = 'D' THEN 'Draft'  \n" +
                "					WHEN OLD.`status` = 'WS' THEN 'Waiting For Shipment'  \n" +
                "					WHEN OLD.`status` = 'WC' THEN 'Waiting For Credit Memo'  \n" +
                "					WHEN OLD.`status` = 'CR' THEN 'Credit Memo Received'  \n" +
                "                    WHEN OLD.`status` = 'PM' THEN 'Pending Management Approval'  \n" +
                "					ELSE NULL  \n" +
                "				END  \n" +
                "			) AS CHAR  \n" +
                "		),  \n" +
                "		CAST(  \n" +
                "			(  \n" +
                "				CASE  \n" +
                "					WHEN NEW.`status` = 'I' THEN 'Investigate'  \n" +
                "					WHEN NEW.`status` = 'W' THEN 'Waiting For Invoice'  \n" +
                "					WHEN NEW.`status` = 'IR' THEN 'Invoice Received'  \n" +
                "					WHEN NEW.`status` = 'A' THEN 'Approved To Pay'  \n" +
                "					WHEN NEW.`status` = 'P' THEN 'Paid'  \n" +
                "					WHEN NEW.`status` = 'PE' THEN 'Pending'  \n" +
                "					WHEN NEW.`status` = 'D' THEN 'Draft'  \n" +
                "					WHEN NEW.`status` = 'WS' THEN 'Waiting For Shipment'  \n" +
                "					WHEN NEW.`status` = 'WC' THEN 'Waiting For Credit Memo'  \n" +
                "					WHEN NEW.`status` = 'CR' THEN 'Credit Memo Received'  \n" +
                "                    WHEN NEW.`status` = 'PM' THEN 'Pending Management Approval'  \n" +
                "					ELSE NULL  \n" +
                "				END  \n" +
                "			) AS CHAR  \n" +
                "		),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId, 'varchar');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.packingSlipModeStatus,0) != IFNULL(NEW.packingSlipModeStatus,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR),  \n" +
                "		(  \n" +
                "			CASE  \n" +
                "				WHEN NEW.receiptType = 'P' THEN 'Packing Slip Posting Status'  \n" +
                "				WHEN NEW.receiptType = 'R' THEN 'RMA Posting Status'  \n" +
                "				ELSE 'Supplier Invoice Posting Status'  \n" +
                "			END  \n" +
                "		),  \n" +
                "		CAST(  \n" +
                "			(  \n" +
                "				CASE  \n" +
                "					WHEN OLD.packingSlipModeStatus = 'D' THEN 'Draft'  \n" +
                "					WHEN OLD.packingSlipModeStatus = 'P' THEN 'Publish'  \n" +
                "					WHEN OLD.packingSlipModeStatus = 'S' THEN 'Shipped'  \n" +
                "					ELSE NULL  \n" +
                "				END  \n" +
                "			) AS CHAR  \n" +
                "		),  \n" +
                "		CAST(  \n" +
                "			(  \n" +
                "				CASE  \n" +
                "					WHEN NEW.packingSlipModeStatus = 'D' THEN 'Draft'  \n" +
                "					WHEN NEW.packingSlipModeStatus = 'P' THEN 'Publish'  \n" +
                "					WHEN NEW.packingSlipModeStatus = 'S' THEN 'Shipped'  \n" +
                "					ELSE NULL  \n" +
                "				END  \n" +
                "			) AS CHAR  \n" +
                "		),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId, 'varchar');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.applyDate,0) != IFNULL(NEW.applyDate,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Apply Date', CAST(OLD.applyDate AS CHAR), CAST(NEW.applyDate AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','applyDate'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.invoiceTotalDue,0) != IFNULL(NEW.invoiceTotalDue,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR),  \n" +
                "		(  \n" +
                "			CASE  \n" +
                "				WHEN NEW.receiptType = 'I' THEN 'Invoice Total'  \n" +
                "				WHEN NEW.receiptType = 'C' THEN 'Credit Memo Total'  \n" +
                "				WHEN NEW.receiptType = 'D' THEN 'Debit Memo Total'  \n" +
                "				ELSE NULL  \n" +
                "			END  \n" +
                "		),  \n" +
                "		CAST(OLD.invoiceTotalDue AS CHAR), CAST(new.invoiceTotalDue AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        'amount');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.paymentTermsID,0) != IFNULL(NEW.paymentTermsID,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Payment Term', CAST(fun_getGenericCategoryNameByID(OLD.paymentTermsID) AS CHAR), CAST(fun_getGenericCategoryNameByID(new.paymentTermsID) AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        'varchar');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.remark,0) != IFNULL(NEW.remark,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR),  \n" +
                "		(  \n" +
                "			CASE  \n" +
                "				WHEN NEW.receiptType = 'R' THEN 'RMA Comment'  \n" +
                "				ELSE 'Comment'  \n" +
                "			END  \n" +
                "		), CAST(OLD.remark AS CHAR), CAST(new.remark AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','remark'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.internalRemark,0) != IFNULL(NEW.internalRemark,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR),  \n" +
                "		(  \n" +
                "			CASE  \n" +
                "				WHEN NEW.receiptType = 'R' THEN 'Internal RMA Comment'  \n" +
                "				ELSE 'PS Internal Comment'  \n" +
                "			END  \n" +
                "		), CAST(OLD.internalRemark AS CHAR), CAST(new.internalRemark AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','internalRemark'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.shippingMethodId,0) != IFNULL(NEW.shippingMethodId,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Shipping Method', CAST(fun_getGenericCategoryCodeNameByID(OLD.shippingMethodId) AS CHAR), CAST(fun_getGenericCategoryCodeNameByID(new.shippingMethodId) AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        'varchar');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.carrierID,0) != IFNULL(NEW.carrierID,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Carrier', CAST(fun_getGenericCategoryCodeNameByID(OLD.carrierID) AS CHAR), CAST(fun_getGenericCategoryCodeNameByID(new.carrierID) AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        'varchar');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.carrierAccountNumber,0) != IFNULL(NEW.carrierAccountNumber,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Carrier Account#', CAST(OLD.carrierAccountNumber AS CHAR), CAST(new.carrierAccountNumber AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','carrierAccountNumber'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.shippingInsurance ,0) != IFNULL(NEW.shippingInsurance ,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\",CAST(new.id AS CHAR),'Shipping With Insurance', CAST(CASE WHEN OLD.shippingInsurance = 0 THEN 'No' ELSE 'Yes' END AS CHAR), CAST(CASE WHEN NEW.shippingInsurance = 0 THEN 'No' ELSE 'Yes' END AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,  \n" +
                "		'varchar');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  /*address*/  \n" +
                "  \n" +
                "	IF IFNULL(OLD.billToAddress,0) != IFNULL(NEW.billToAddress,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Bill To', CAST(OLD.billToAddress AS CHAR), CAST(new.billToAddress AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','billToAddress'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.billToConactPerson,0) != IFNULL(NEW.billToConactPerson,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Bill To Contact Person', CAST(OLD.billToConactPerson AS CHAR), CAST(new.billToConactPerson AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','billToConactPerson'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.rmaShippingAddress,0) != IFNULL(NEW.rmaShippingAddress,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'RMA Ship To', CAST(OLD.rmaShippingAddress AS CHAR), CAST(new.rmaShippingAddress AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','rmaShippingAddress'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.rmaShippingContactPerson,0) != IFNULL(NEW.rmaShippingContactPerson,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'RMA Ship To Contact Person', OLD.rmaShippingContactPerson, new.rmaShippingContactPerson,  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','rmaShippingContactPerson'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.rmaMarkForAddress,0) != IFNULL(NEW.rmaMarkForAddress,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Mark For', CAST(OLD.rmaMarkForAddress AS CHAR), CAST(new.rmaMarkForAddress AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','rmaMarkForAddress'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.rmaMarkForContactPerson,0) != IFNULL(NEW.rmaMarkForContactPerson,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Mark For Contact Person', OLD.rmaMarkForContactPerson, new.rmaMarkForContactPerson,  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','rmaMarkForContactPerson'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  /*address*/  \n" +
                "  \n" +
                "    IF IFNULL(OLD.markedForRefund,0) != IFNULL(NEW.markedForRefund,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Marked for Refund',  \n" +
                "			case when OLD.markedForRefund = 1 then 'Yes' else 'No' end,  \n" +
                "            case when new.markedForRefund = 1 then 'Yes' else 'No' end,  \n" +
                "			fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId, 'varchar');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.markedForRefundAmt,0) != IFNULL(NEW.markedForRefundAmt,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Refund Amount ($)', CAST(OLD.markedForRefundAmt AS CHAR), CAST(new.markedForRefundAmt AS CHAR),  \n" +
                "			fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "            'amount');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  IF IFNULL(OLD.isCustConsigned, 0) != IFNULL(NEW.isCustConsigned, 0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES(\"PACKINGSLIPMATERIALRECEIVE\",CAST(new.id AS CHAR),'Packing Slip Customer Consigned (No Charge)',  CAST(CASE WHEN OLD.isCustConsigned=0 THEN 'No' ELSE 'Yes' END AS CHAR), CAST(CASE WHEN NEW.isCustConsigned=0 THEN 'No' ELSE 'Yes' END AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.CustomerID, 0) != IFNULL(NEW.CustomerID,0) THEN  \n" +
                "		SELECT fun_GetFormattedMfgCode(mfgCode, mfgName, vMfgCodeFormat) INTO vOldCustomer FROM mfgcodemst WHERE id=OLD.CustomerID;  \n" +
                "        SELECT fun_GetFormattedMfgCode(mfgCode, mfgName, vMfgCodeFormat) INTO vNewCustomer FROM mfgcodemst WHERE id=NEW.CustomerID;  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES(\"PACKINGSLIPMATERIALRECEIVE\",CAST(new.id AS CHAR),'Packing Slip Customer',  CAST(vOldCustomer AS CHAR), CAST(vNewCustomer AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  IF IFNULL(OLD.isNonUMIDStock, 0) != IFNULL(NEW.isNonUMIDStock, 0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES(\"PACKINGSLIPMATERIALRECEIVE\",CAST(new.id AS CHAR),'Packing Slip Do Not Create UMID Stock',  CAST(CASE WHEN OLD.isNonUMIDStock=0 THEN 'No' ELSE 'Yes' END AS CHAR), CAST(CASE WHEN NEW.isNonUMIDStock=0 THEN 'No' ELSE 'Yes' END AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.invoiceApprovalComment, 0) != IFNULL(NEW.invoiceApprovalComment, 0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES(\"PACKINGSLIPMATERIALRECEIVE\",CAST(new.id AS CHAR),'Approval Comment',  CAST(OLD.invoiceApprovalComment AS CHAR), CAST(NEW.invoiceApprovalComment AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.invoiceApprovalDate, 0) != IFNULL(NEW.invoiceApprovalDate, 0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES(\"PACKINGSLIPMATERIALRECEIVE\",CAST(new.id AS CHAR),'Approved On',  CAST(fun_ApplyCommonDateTimeFormatByParaValue(OLD.invoiceApprovalDate,FUN_GETTIMEZONE(), FUN_GETDATETIMEFORMAT()) AS CHAR), CAST(fun_ApplyCommonDateTimeFormatByParaValue(NEW.invoiceApprovalDate,FUN_GETTIMEZONE(), FUN_GETDATETIMEFORMAT()) AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.invoiceApprovedBy, 0) != IFNULL(NEW.invoiceApprovedBy, 0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES(\"PACKINGSLIPMATERIALRECEIVE\",CAST(new.id AS CHAR),'Approved By',  CAST(fun_getUserNameByID(OLD.invoiceApprovedBy) AS CHAR), CAST(fun_getUserNameByID(NEW.invoiceApprovedBy) AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "      IF IFNULL(OLD.invoiceRequireManagementApproval, 0) != IFNULL(NEW.invoiceRequireManagementApproval, 0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES(\"PACKINGSLIPMATERIALRECEIVE\",CAST(new.id AS CHAR),'Invoice Require Management Approval',  CAST(CASE WHEN OLD.invoiceRequireManagementApproval=0 THEN 'No' ELSE 'Yes' END AS CHAR), CAST(CASE WHEN NEW.invoiceRequireManagementApproval=0 THEN 'No' ELSE 'Yes' END AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.isZeroValue, 0) != IFNULL(NEW.isZeroValue, 0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES(\"PACKINGSLIPMATERIALRECEIVE\",CAST(new.id AS CHAR),'Confirmed Zero Value Invoices Only',  CAST(CASE WHEN OLD.isZeroValue=0 THEN 'No' ELSE 'Yes' END AS CHAR), CAST(CASE WHEN NEW.isZeroValue=0 THEN 'No' ELSE 'Yes' END AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  END;  \n" +
                /* **************************** Add Script Version ->  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1321,'1.00','V1','User Story 37932: [Main Branch] Requesting Confirming Zero Value Invoice at Supplier invoice Header - Ashish'," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1321:
            allDbChangesArray.push(
                /* **************************** New Script -> 24-02-2022  *********************************** */
                "DROP TRIGGER IF EXISTS `Trg_AU_packing_slip_material_receive_det`;  \n" +
                "CREATE TRIGGER `Trg_AU_packing_slip_material_receive_det` AFTER UPDATE ON `packing_slip_material_receive_det` FOR EACH ROW BEGIN  \n" +
                "	DECLARE v_PackingSlipReceiptType VARCHAR(5);  \n" +
                "	DECLARE v_CreditMemoType VARCHAR(5);  \n" +
                "	DECLARE v_oldRefRMAPackingSlipNumber VARCHAR(100);  \n" +
                "	DECLARE v_newRefRMAPackingSlipNumber VARCHAR(100);  \n" +
                "	DECLARE v_oldRefRMAInvoiceNumber VARCHAR(100);  \n" +
                "	DECLARE v_newRefRMAInvoiceNumber VARCHAR(100);  \n" +
                "	DECLARE PORLINE_OTY INT;  \n" +
                "	DECLARE vTotalQty INT;  \n" +
                "    DECLARE vPOID INT;  \n" +
                "	DECLARE vMfgCodeFormat INT;  \n" +
                "    DECLARE vOldCustomer VARCHAR(100);  \n" +
                "    DECLARE vNewCustomer VARCHAR(100);  \n" +
                "  \n" +
                "    SELECT fun_getMFGCodeNameFormat() INTO vMfgCodeFormat;  \n" +
                "  \n" +
                "    SELECT `qty` INTO PORLINE_OTY FROM purchase_order_line_release_det WHERE id = New.refPOReleaseLineID;  \n" +
                "	SELECT SUM(IFNULL(packingSlipQty,0)) INTO vTotalQty FROM packing_slip_material_receive_det WHERE refPOReleaseLineID=New.refPOReleaseLineID AND IFNULL(isReceivedWrongPart,0)=0 AND isdeleted=0;  \n" +
                "    select refPurchaseOrderID into vPOID from purchase_order_det where id = NEW.refPurchaseOrderDetID;  \n" +
                "  \n" +
                "	IF (NEW.refPurchaseOrderDetID IS NOT NULL AND New.refPOReleaseLineID IS NOT NULL AND NEW.refPOLineID IS NOT NULL AND PORLINE_OTY <= vTotalQty) THEN  \n" +
                "		UPDATE purchase_order_line_release_det SET poLineWorkingStatus='C',poLineCompleteType='Auto',receivedQty=vTotalQty WHERE id = NEW.refPOReleaseLineID;  \n" +
                "	ELSE  \n" +
                "		UPDATE purchase_order_line_release_det SET poLineWorkingStatus='P',receivedQty=vTotalQty,poLineCompleteType=(NULL),poLineCompleteReason=(NULL) WHERE id = NEW.refPOReleaseLineID;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(vPOID IS NOT NULL) THEN  \n" +
                "		CALL Sproc_UpdatePoWorkingLineStatus(vPOID);  \n" +
                "        /* (-20) is Purchase Order Entity Default Entry ID*/  \n" +
                "        insert into pending_elastic_entity_sync_data(entityID,entityParamDet) values(-20,concat('{\"id\":', vPOID , '}'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	SELECT receiptType, creditMemoType INTO v_PackingSlipReceiptType, v_CreditMemoType FROM packing_slip_material_receive WHERE id = NEW.refPackingSlipMaterialRecID;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.packingSlipSerialNumber,0) != IFNULL(NEW.packingSlipSerialNumber,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "        valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR),  \n" +
                "		(  \n" +
                "			CASE  \n" +
                "				WHEN v_PackingSlipReceiptType = 'P' THEN 'Packing Slip Line#'  \n" +
                "				WHEN v_PackingSlipReceiptType = 'R' THEN 'RMA Line#'  \n" +
                "				WHEN v_PackingSlipReceiptType = 'I' THEN 'Supplier Invoice Line#'  \n" +
                "				WHEN v_PackingSlipReceiptType = 'C' THEN 'Credit Memo Line#'  \n" +
                "				WHEN v_PackingSlipReceiptType = 'D' THEN 'Debit Memo Line#'  \n" +
                "				ELSE NULL  \n" +
                "			END  \n" +
                "		),  \n" +
                "		CAST(OLD.packingSlipSerialNumber AS CHAR), CAST(new.packingSlipSerialNumber AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive_det','packingSlipSerialNumber'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.poReleaseNumber,0) != IFNULL(NEW.poReleaseNumber,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "        valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'PO Release#', CAST(OLD.poReleaseNumber AS CHAR), CAST(new.poReleaseNumber AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive_det','poReleaseNumber'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.internalRef,0) != IFNULL(NEW.internalRef,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "        valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Internal Ref#', CAST(OLD.internalRef AS CHAR), CAST(new.internalRef AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive_det','internalRef'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.nickname,0) != IFNULL(NEW.nickname,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "        valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Nickname', CAST(OLD.nickname AS CHAR), CAST(new.nickname AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive_det','nickname'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.rohsstatus,0) != IFNULL(NEW.rohsstatus,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "        valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'RoHS Requirement', CAST(fun_getRoHSNameByID(OLD.rohsstatus) AS CHAR), CAST(fun_getRoHSNameByID(new.rohsstatus) AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        'varchar');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.partID,0) != IFNULL(NEW.partID,0) THEN  \n" +
                "		IF (v_PackingSlipReceiptType = 'P' OR v_PackingSlipReceiptType = 'R') THEN  \n" +
                "			INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "			valueDataType)  \n" +
                "			VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'MFR', CAST(fun_getMfgCodeAndNameByPartID(OLD.partID) AS CHAR), CAST(fun_getMfgCodeAndNameByPartID(new.partID) AS CHAR),  \n" +
                "			fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "            'varchar');  \n" +
                "		END IF;  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'MPN', CAST(fun_getComponentNameByID(OLD.partID) AS CHAR), CAST(fun_getComponentNameByID(new.partID) AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        'varchar');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.refSupplierPartId,0) != IFNULL(NEW.refSupplierPartId,0) THEN  \n" +
                "		IF (v_PackingSlipReceiptType = 'P' OR v_PackingSlipReceiptType = 'R') THEN  \n" +
                "			INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "			valueDataType)  \n" +
                "			VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Supplier', CAST(fun_getMfgCodeAndNameByPartID(OLD.refSupplierPartId) AS CHAR), CAST(fun_getMfgCodeAndNameByPartID(new.refSupplierPartId) AS CHAR),  \n" +
                "			fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "            'varchar');  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'SPN', CAST(fun_getComponentNameByID(OLD.refSupplierPartId) AS CHAR), CAST(fun_getComponentNameByID(new.refSupplierPartId) AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        'varchar');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.orderedQty,0) != IFNULL(NEW.orderedQty,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Order Qty', CAST(CAST(OLD.orderedQty AS SIGNED) AS CHAR), CAST(CAST(new.orderedQty AS SIGNED) AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        'qty');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.receivedQty,0) != IFNULL(NEW.receivedQty,0) THEN  \n" +
                "		IF (IFNULL(v_CreditMemoType,0) != 'MC' AND IFNULL(v_CreditMemoType,0) != 'MD') THEN  \n" +
                "			INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "			valueDataType)  \n" +
                "			VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), (CASE WHEN (v_CreditMemoType = 'RC' OR v_PackingSlipReceiptType = 'R') THEN 'Shipped Qty' ELSE 'Received Qty' END),  \n" +
                "			CAST(CAST(OLD.receivedQty AS SIGNED) AS CHAR), CAST(CAST(new.receivedQty AS SIGNED) AS CHAR),  \n" +
                "			fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "            'qty');  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.packingSlipQty,0) != IFNULL(NEW.packingSlipQty,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), (CASE WHEN v_CreditMemoType = 'RC' THEN 'Credit Memo Qty' WHEN v_PackingSlipReceiptType = 'R' THEN 'RMA Qty' ELSE 'Packing Slip Qty' END),  \n" +
                "		CAST(CAST(OLD.packingSlipQty AS SIGNED) AS CHAR), CAST(CAST(new.packingSlipQty AS SIGNED) AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        'qty');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.binID,0) != IFNULL(NEW.binID,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Location/Bin', CAST(fun_getBinNameByID(OLD.binID) AS CHAR), CAST(fun_getBinNameByID(new.binID) AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        'varchar');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.warehouseID,0) != IFNULL(NEW.warehouseID,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Warehouse', CAST(fun_getWarehouseNameByID(OLD.warehouseID) AS CHAR), CAST(fun_getWarehouseNameByID(new.warehouseID) AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        'varchar');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.parentWarehouseID,0) != IFNULL(NEW.parentWarehouseID,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Parent Warehouse', CAST(fun_getWarehouseNameByID(OLD.parentWarehouseID) AS CHAR), CAST(fun_getWarehouseNameByID(new.parentWarehouseID) AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        'varchar');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.invoicePrice,0) != IFNULL(NEW.invoicePrice,0) THEN  \n" +
                "		IF (IFNULL(v_PackingSlipReceiptType,0) != 'R') THEN  \n" +
                "			INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "			valueDataType)  \n" +
                "			VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), (CASE WHEN v_CreditMemoType = 'RC' THEN 'Credit Memo Unit Price' ELSE 'Invoice Price' END), CAST(OLD.invoicePrice AS CHAR), CAST(new.invoicePrice AS CHAR),  \n" +
                "			fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "            'unitprice');  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.purchasePrice,0) != IFNULL(NEW.purchasePrice,0) THEN  \n" +
                "		IF (IFNULL(v_CreditMemoType,0) != 'MC' AND IFNULL(v_CreditMemoType,0) != 'MD') THEN  \n" +
                "			INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "			valueDataType)  \n" +
                "			VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'PO Unit Price', CAST(OLD.purchasePrice AS CHAR), CAST(new.purchasePrice AS CHAR),  \n" +
                "			fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "            'unitprice');  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.approveNote,0) != IFNULL(NEW.approveNote,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "			valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Approve Note', CAST(OLD.approveNote AS CHAR), CAST(new.approveNote AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive_det','approveNote'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.`status`,0) != IFNULL(NEW.`status`,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "			valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Charged Status',  \n" +
                "		CAST(  \n" +
                "			(  \n" +
                "				CASE  \n" +
                "					WHEN old.`status` = 'P' THEN 'Pending'  \n" +
                "					WHEN old.`status` = 'A' THEN 'Approved'  \n" +
                "					WHEN old.`status` = 'D' THEN 'Disapproved'  \n" +
                "				END  \n" +
                "			)  \n" +
                "		AS CHAR),  \n" +
                "		CAST(  \n" +
                "			(  \n" +
                "				CASE  \n" +
                "					WHEN new.`status` = 'P' THEN 'Pending'  \n" +
                "					WHEN new.`status` = 'A' THEN 'Approved'  \n" +
                "					WHEN new.`status` = 'D' THEN 'Disapproved'  \n" +
                "				END  \n" +
                "			)  \n" +
                "		AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        'varchar');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.extendedPrice,0) != IFNULL(NEW.extendedPrice,0) THEN  \n" +
                "		IF (IFNULL(v_CreditMemoType,0) != 'MC' AND IFNULL(v_CreditMemoType,0) != 'MD') THEN  \n" +
                "			INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "			valueDataType)  \n" +
                "			VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), (CASE WHEN v_CreditMemoType = 'RC' THEN 'Extended Credit Memo Price' WHEN v_PackingSlipReceiptType = 'R' THEN 'Extended RMA Price' ELSE 'Extended Invoice Price' END),  \n" +
                "			OLD.extendedPrice, new.extendedPrice, fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "            'amount');  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.extendedReceivedPrice,0) != IFNULL(NEW.extendedReceivedPrice,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "			valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Extended PO Price',  \n" +
                "		OLD.extendedReceivedPrice, new.extendedReceivedPrice,  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        'amount');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.difference,0) != IFNULL(NEW.difference,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "			valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Difference Amount', CAST(OLD.difference AS CHAR), CAST(new.difference AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        'unitprice');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.differenceQty,0) != IFNULL(NEW.differenceQty,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "        valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Diffrence Qty', CAST(OLD.differenceQty AS CHAR), CAST(new.differenceQty AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        'qty');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.packagingID,0) != IFNULL(NEW.packagingID,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "        valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Packaging', CAST(fun_getPackagingNameByID(OLD.packagingID) AS CHAR), CAST(fun_getPackagingNameByID(new.packagingID) AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        'varchar');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.receivedStatus,0) != IFNULL(NEW.receivedStatus,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "        valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Received Status',  \n" +
                "		CAST(  \n" +
                "			(  \n" +
                "				CASE  \n" +
                "					WHEN old.receivedStatus = 'P' THEN 'Pending'  \n" +
                "					WHEN old.receivedStatus = 'A' THEN 'Accepted'  \n" +
                "					WHEN old.receivedStatus = 'R' THEN 'Rejected'  \n" +
                "				END  \n" +
                "			)  \n" +
                "		AS CHAR),  \n" +
                "		CAST(  \n" +
                "			(  \n" +
                "				CASE  \n" +
                "					WHEN new.receivedStatus = 'P' THEN 'Pending'  \n" +
                "					WHEN new.receivedStatus = 'A' THEN 'Accepted'  \n" +
                "					WHEN new.receivedStatus = 'R' THEN 'Rejected'  \n" +
                "				END  \n" +
                "			)  \n" +
                "		AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        'varchar');  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.`comment`,0) != IFNULL(NEW.`comment`,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "        valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Line Comment', CAST(OLD.`comment` AS CHAR), CAST(new.`comment` AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive_det','comment'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.remark,0) != IFNULL(NEW.remark,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "        valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Line Comment', CAST(OLD.remark AS CHAR), CAST(new.remark AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive_det','remark'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.internalRemark,0) != IFNULL(NEW.internalRemark,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "        valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Internal Line Comment', CAST(OLD.internalRemark AS CHAR), CAST(new.internalRemark AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive_det','internalRemark'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF v_PackingSlipReceiptType = 'R' THEN  \n" +
                "		IF (old.refPackingSlipIdForRma IS NOT NULL) THEN  \n" +
                "			SELECT fun_getPackingSlipNumberById(old.refPackingSlipIdForRma) INTO v_oldRefRMAPackingSlipNumber;  \n" +
                "		ELSE  \n" +
                "			SET v_oldRefRMAPackingSlipNumber = old.refPackingSlipForRma;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF (new.refPackingSlipIdForRma IS NOT NULL) THEN  \n" +
                "			SELECT fun_getPackingSlipNumberById(new.refPackingSlipIdForRma) INTO v_newRefRMAPackingSlipNumber;  \n" +
                "		ELSE  \n" +
                "			SET v_newRefRMAPackingSlipNumber = new.refPackingSlipForRma;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF (old.refInvoiceIdForRma IS NOT NULL) THEN  \n" +
                "			SELECT fun_getSupplierInvoiceNumberByID(old.refInvoiceIdForRma) INTO v_oldRefRMAInvoiceNumber;  \n" +
                "		ELSE  \n" +
                "			SET v_oldRefRMAInvoiceNumber = old.refInvoiceForRma;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF (new.refInvoiceIdForRma IS NOT NULL) THEN  \n" +
                "			SELECT fun_getSupplierInvoiceNumberByID(new.refInvoiceIdForRma) INTO v_newRefRMAInvoiceNumber;  \n" +
                "		ELSE  \n" +
                "			SET v_newRefRMAInvoiceNumber = new.refInvoiceForRma;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF IFNULL(v_oldRefRMAPackingSlipNumber,0) != IFNULL(v_newRefRMAPackingSlipNumber,0) THEN  \n" +
                "			INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "			valueDataType)  \n" +
                "			VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Packing Slip#', CAST(v_oldRefRMAPackingSlipNumber AS CHAR), CAST(v_newRefRMAPackingSlipNumber AS CHAR),  \n" +
                "			fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "            'varchar');  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF IFNULL(v_oldRefRMAInvoiceNumber,0) != IFNULL(v_newRefRMAInvoiceNumber,0) THEN  \n" +
                "			INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "			valueDataType)  \n" +
                "			VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Supplier Invoice#', CAST(v_oldRefRMAInvoiceNumber AS CHAR), CAST(v_newRefRMAInvoiceNumber AS CHAR),  \n" +
                "			fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "            'varchar');  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.isDeleted,0) != IFNULL(NEW.isDeleted,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "			valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Deleted', NULL,  \n" +
                "		CONCAT(  \n" +
                "			(  \n" +
                "				CASE  \n" +
                "					WHEN v_PackingSlipReceiptType = 'P' THEN 'Packing Slip Line# '  \n" +
                "					WHEN v_PackingSlipReceiptType = 'R' THEN 'RMA Line# '  \n" +
                "					WHEN v_PackingSlipReceiptType = 'I' THEN 'Invoice Line# '  \n" +
                "					WHEN v_PackingSlipReceiptType = 'C' THEN 'Credit Memo Line# '  \n" +
                "					WHEN v_PackingSlipReceiptType = 'D' THEN 'Debit Memo Line# '  \n" +
                "					ELSE 'Line# '  \n" +
                "				END  \n" +
                "			), CAST(OLD.packingSlipSerialNumber AS CHAR), ' is Deleted'  \n" +
                "		),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        'varchar');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.updateByRoleId,0) != IFNULL(NEW.updateByRoleId,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "			valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Last Modified By Role', CAST(fun_getRoleByID(OLD.updateByRoleId) AS CHAR), CAST(fun_getRoleByID(new.updateByRoleId) AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        'varchar');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  IF IFNULL(OLD.isLineCustConsigned,0) != IFNULL(NEW.isLineCustConsigned,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\",CAST(new.id AS CHAR),'Packing Slip Line Customer Consigned (No Charge)',CAST(CASE WHEN OLD.isLineCustConsigned=0 THEN 'No' ELSE 'Yes' END AS CHAR),  \n" +
                "		CAST(CASE WHEN NEW.isLineCustConsigned=0 THEN 'No' ELSE 'Yes' END AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.LineCustomerID,0) != IFNULL(NEW.LineCustomerID,0) THEN  \n" +
                "		SELECT fun_GetFormattedMfgCode(mfgCode, mfgName, vMfgCodeFormat) INTO vOldCustomer FROM mfgcodemst WHERE id=OLD.LineCustomerID;  \n" +
                "        SELECT fun_GetFormattedMfgCode(mfgCode, mfgName, vMfgCodeFormat) INTO vNewCustomer FROM mfgcodemst WHERE id=NEW.LineCustomerID;  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\",CAST(new.id AS CHAR),'Packing Slip Line Customer',CAST(vOldCustomer AS CHAR),  \n" +
                "		CAST(vNewCustomer AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.isNonUMIDStock,0) != IFNULL(NEW.isNonUMIDStock,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\",CAST(new.id AS CHAR),'Packing Slip Line Do Not Create UMID',CAST(CASE WHEN OLD.isNonUMIDStock=0 THEN 'No' ELSE 'Yes' END AS CHAR),  \n" +
                "		CAST(CASE WHEN NEW.isNonUMIDStock=0 THEN 'No' ELSE 'Yes' END AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.isZeroValue,0) != IFNULL(NEW.isZeroValue,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\",CAST(new.id AS CHAR),'Confirming Zero Value Line',CAST(CASE WHEN OLD.isZeroValue=0 THEN 'No' ELSE 'Yes' END AS CHAR),  \n" +
                "		CAST(CASE WHEN NEW.isZeroValue=0 THEN 'No' ELSE 'Yes' END AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version ->  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1322,'1.00','V1','User Story 37932: [Main Branch] Requesting Confirming Zero Value Invoice at Supplier invoice Header - Ashish'," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1322:
            allDbChangesArray.push(
                /* **************************** New Script -> 24-02-2022 *********************************** */
                "ALTER TABLE `contactperson` ADD COLUMN `mailToCategory` VARCHAR(5) NOT NULL DEFAULT 'N';  \n" +
                "ALTER TABLE `employees` CHANGE COLUMN `isContactPersonRequired` `personnelType` VARCHAR(5) NOT NULL DEFAULT 'P';  \n" +
                /* **************************** Add Script Version -> 24-02-2022 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1323,'1.00','V1',' US 40746 And User Story 40551: Show Primary contact person in detail tab of customer/supplier page. - Bhavik '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1323:
            allDbChangesArray.push(
                /* **************************** New Script -> 24-02-2022 *********************************** */
                "Drop function if exists `fun_getCategoryWisePhonesFromJsonList`;  \n" +
                "CREATE FUNCTION `fun_getCategoryWisePhonesFromJsonList`(  \n" +
                "	pJsonPhoneList TEXT  \n" +
                ") RETURNS text CHARSET utf8mb4  \n" +
                "BEGIN  \n" +
                "	DECLARE v_Phones TEXT;  \n" +
                "  \n" +
                "	select GROUP_CONCAT(catgWiseList.catgWisePhones SEPARATOR ' | ') INTO v_Phones  \n" +
                "		FROM (SELECT concat(jsonTblPhone.category,': ', GROUP_CONCAT(jsonTblPhone.phone, ifnull(concat(' Ext.' ,jsonTblPhone.phExtension), ''))) catgWisePhones  \n" +
                "			FROM JSON_TABLE(pJsonPhoneList,  \n" +
                "				'$[*]' COLUMNS (phone VARCHAR(40)  PATH '$.phone', phExtension VARCHAR(40) PATH '$.phExtension', category VARCHAR(40) PATH '$.category')  \n" +
                "			) jsonTblPhone group by jsonTblPhone.category order by FIELD(jsonTblPhone.category,'Home Fax','Work Fax','Home','Main','Mobile','Work') DESC  \n" +
                "        ) catgWiseList;  \n" +
                "  \n" +
                "	RETURN v_Phones;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 24-02-2022 *********************************** */
                "DROP TRIGGER IF EXISTS `Trg_AU_contactperson`;  \n" +
                "CREATE TRIGGER `Trg_AU_contactperson` AFTER UPDATE ON `contactperson` FOR EACH ROW BEGIN  \n" +
                "	DECLARE v_createdAt DATETIME DEFAULT fun_DatetimetoUTCDateTime();  \n" +
                "	DECLARE vTableName VARCHAR(50) DEFAULT \"contactperson\";  \n" +
                "  \n" +
                "	IF IFNULL(OLD.firstName,0) != IFNULL(NEW.firstName,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType)  \n" +
                "        VALUES('CONTACT_PERSON',CAST(new.personId AS CHAR),'First Name',CAST(OLD.firstName AS CHAR), CAST(NEW.firstName AS CHAR),v_createdAt,NEW.createdBy,v_createdAt,NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,fun_getDataTypeBasedOnTableAndColumnName(vTableName,'firstName'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.lastName,0) != IFNULL(NEW.lastName,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType)  \n" +
                "        VALUES('CONTACT_PERSON',CAST(new.personId AS CHAR),'Last Name',CAST(OLD.lastName AS CHAR), CAST(NEW.lastName AS CHAR),v_createdAt,NEW.createdBy,v_createdAt,NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,fun_getDataTypeBasedOnTableAndColumnName(vTableName,'lastName'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.email,0) != IFNULL(NEW.email,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType)  \n" +
                "        VALUES('CONTACT_PERSON',CAST(new.personId AS CHAR),'Email',CAST((SELECT GROUP_CONCAT(jsonTblEmails.email1) from JSON_TABLE(OLD.email, '$[*]' COLUMNS (email1 VARCHAR(40)  PATH '$.email')) jsonTblEmails) AS CHAR),  \n" +
                "			CAST(( SELECT GROUP_CONCAT(jsonTblEmails.email1) from JSON_TABLE(NEW.email, '$[*]' COLUMNS (email1 VARCHAR(40)  PATH '$.email')) jsonTblEmails)AS CHAR), v_createdAt,NEW.createdBy,v_createdAt,  \n" +
                "            NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,fun_getDataTypeBasedOnTableAndColumnName(vTableName,'email'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.division,0) != IFNULL(NEW.division,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType)  \n" +
                "        VALUES('CONTACT_PERSON',CAST(new.personId AS CHAR),'Department',CAST(OLD.division AS CHAR), CAST(NEW.division AS CHAR),v_createdAt,NEW.createdBy,v_createdAt,NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,fun_getDataTypeBasedOnTableAndColumnName(vTableName,'division'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.middleName,0) != IFNULL(NEW.middleName,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType)  \n" +
                "        VALUES('CONTACT_PERSON',CAST(new.personId AS CHAR),'Middle Name',CAST(OLD.middleName AS CHAR), CAST(NEW.middleName AS CHAR),v_createdAt,NEW.createdBy,v_createdAt,NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,fun_getDataTypeBasedOnTableAndColumnName(vTableName,'middleName'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.isDefault,0) != IFNULL(NEW.isDefault,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType)  \n" +
                "        VALUES('CONTACT_PERSON',CAST(new.personId AS CHAR),'Set as Default \"Attention to\"',CAST((CASE WHEN OLD.isDefault = '1' THEN 'Yes' ELSE 'No' END) AS CHAR), CAST((CASE WHEN NEW.isDefault = '1' THEN 'Yes' ELSE 'No' END) AS CHAR),v_createdAt,NEW.createdBy,v_createdAt,NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,fun_getDataTypeBasedOnTableAndColumnName(vTableName,'isDefault'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.additionalComment,0) != IFNULL(NEW.additionalComment,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType)  \n" +
                "        VALUES('CONTACT_PERSON',CAST(new.personId AS CHAR),'Comment',CAST(OLD.additionalComment AS CHAR), CAST(NEW.additionalComment AS CHAR),v_createdAt,NEW.createdBy,v_createdAt,NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,'longtext');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.isPrimary,0) != IFNULL(NEW.isPrimary,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType)  \n" +
                "        VALUES('CONTACT_PERSON',CAST(new.personId AS CHAR),'Primary Person',CAST((CASE WHEN OLD.isPrimary = '1' THEN 'Yes' ELSE 'No' END) AS CHAR), CAST((CASE WHEN NEW.isPrimary = '1' THEN 'Yes' ELSE 'No' END) AS CHAR),v_createdAt,NEW.createdBy,v_createdAt,NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,fun_getDataTypeBasedOnTableAndColumnName(vTableName,'isPrimary'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (IFNULL(OLD.refTableName,0) != IFNULL(NEW.refTableName,0) OR IFNULL(OLD.refTransID,0) != IFNULL(NEW.refTransID,0) ) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType)  \n" +
                "        VALUES('CONTACT_PERSON',CAST(new.personId AS CHAR),'Contact Person Type',CAST((CASE WHEN (OLD.refTableName = 'employees') THEN 'Personnel' WHEN (OLD.refTableName = 'mfgcodemst') THEN (SELECT (CASE  \n" +
                "			WHEN a.mfgType = 'MFG' THEN 'Customer/Manufacturer' WHEN a.mfgType = 'DIST' and a.isCustOrDisty = 1 THEN 'Supplier' ELSE ''  END) from (Select mfgType,isCustOrDisty from mfgcodemst where id = OLD.refTransID) a) ELSE '' END) AS CHAR),  \n" +
                "			CAST((CASE WHEN (NEW.refTableName = 'employees') THEN 'Personnel' WHEN (NEW.refTableName = 'mfgcodemst') THEN (SELECT (CASE WHEN a.mfgType = 'MFG' THEN 'Customer/Manufacturer' WHEN a.mfgType = 'DIST' and a.isCustOrDisty = 1 THEN 'Supplier' ELSE ''  END) from (Select mfgType,isCustOrDisty from mfgcodemst where id = NEW.refTransID) a) ELSE '' END) AS CHAR),  \n" +
                "             v_createdAt,NEW.createdBy,v_createdAt,NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,fun_getDataTypeBasedOnTableAndColumnName(vTableName,'refTableName'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.title,0) != IFNULL(NEW.title,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType)  \n" +
                "        VALUES('CONTACT_PERSON',CAST(new.personId AS CHAR),'Title',CAST(OLD.title AS CHAR), CAST(NEW.title AS CHAR),v_createdAt,NEW.createdBy,v_createdAt,NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,fun_getDataTypeBasedOnTableAndColumnName(vTableName,'title'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.isActive,0) != IFNULL(NEW.isActive,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType)  \n" +
                "        VALUES('CONTACT_PERSON',CAST(new.personId AS CHAR),'Status',CAST((CASE WHEN OLD.isActive = '1' THEN 'Active' ELSE 'Inactive' END) AS CHAR), CAST((CASE WHEN NEW.isActive = '1' THEN 'Active' ELSE 'Inactive' END) AS CHAR),v_createdAt,NEW.createdBy,v_createdAt,NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,'varchar');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.phoneNumber,0) != IFNULL(NEW.phoneNumber,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType)  \n" +
                "        VALUES('CONTACT_PERSON',CAST(new.personId AS CHAR),'Phone Numbers',  \n" +
                "        CAST(fun_getCategoryWisePhonesFromJsonList(OLD.phoneNumber) AS CHAR),  \n" +
                "		CAST(fun_getCategoryWisePhonesFromJsonList(NEW.phoneNumber) AS CHAR),  \n" +
                "        v_createdAt,NEW.createdBy,v_createdAt, NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,fun_getDataTypeBasedOnTableAndColumnName(vTableName,'phoneNumber'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.mailToCategory,0) != IFNULL(NEW.mailToCategory,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType)  \n" +
                "        VALUES('CONTACT_PERSON',CAST(new.personId AS CHAR),'Mail To', CAST((CASE WHEN (OLD.mailToCategory = 'N') THEN 'None' WHEN (OLD.mailToCategory = 'P') THEN 'Primary Email' WHEN (OLD.mailToCategory = 'A') THEN 'All Email' ELSE '' END) AS CHAR),  \n" +
                "			CAST((CASE WHEN (NEW.mailToCategory = 'N') THEN 'None' WHEN (NEW.mailToCategory = 'P') THEN 'Primary Email' WHEN (NEW.mailToCategory = 'A') THEN 'All Email' ELSE '' END) AS CHAR),v_createdAt,NEW.createdBy,v_createdAt,NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,'varchar');  \n" +
                "	END IF;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 24-02-2022 *********************************** */
                "Drop function if Exists `fun_getFormattedContactPerson`;  \n" +
                "CREATE FUNCTION `fun_getFormattedContactPerson`(  \n" +
                "	 pFirstName VARCHAR(255),  \n" +
                "     pMiddleName VARCHAR(255),  \n" +
                "     pLastName VARCHAR(255),  \n" +
                "     pDivision VARCHAR(100),  \n" +
                "     pEmail LONGTEXT,  \n" +
                "     pPhone VARCHAR(255),  \n" +
                "     pPhExtension VARCHAR(8)  \n" +
                ") RETURNS longtext CHARSET utf8mb4  \n" +
                "BEGIN  \n" +
                "	DECLARE vReturn LONGTEXT;  \n" +
                "	DECLARE vContPersonNameFormat INT;  \n" +
                "  \n" +
                "	SELECT fun_getContPersonNameDisplayFormat() INTO vContPersonNameFormat;  \n" +
                "  \n" +
                "	SELECT  CONCAT( fun_GetFormattedContactPersonName(pFirstName, pMiddleName,pLastName,vContPersonNameFormat),  \n" +
                "		 CASE WHEN pDivision IS NULL THEN '' ELSE pDivision END,  \n" +
                "		 CASE WHEN pEmail IS NULL THEN '' ELSE fun_convertJsonEmailToCommaSepList(pEmail) END,  \n" +
                "		 CASE WHEN pPhone IS NULL THEN '' ELSE pPhone END,  \n" +
                "		 CASE WHEN pPhExtension IS NULL THEN '' ELSE CONCAT('Ext. ',pPhExtension) END) INTO  vReturn;  \n" +
                "  \n" +
                "	RETURN vReturn;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 24-02-2022 *********************************** */
                "Drop function if Exists `fun_contactPersonDetailByID`;  \n" +
                "CREATE FUNCTION `fun_contactPersonDetailByID`(  \n" +
                "	pContactPersonID INT  \n" +
                ") RETURNS longtext CHARSET utf8mb4  \n" +
                "BEGIN  \n" +
                "	DECLARE pContactPerson VARCHAR(2000);  \n" +
                "	DECLARE vContPersonNameFormat INT;  \n" +
                "  \n" +
                "	SELECT fun_getContPersonNameDisplayFormat() INTO vContPersonNameFormat;  \n" +
                "  \n" +
                "  \n" +
                "	  SELECT  CONCAT('ATTN: ',fun_GetFormattedContactPersonName(firstName,middleName,lastName,vContPersonNameFormat), CASE WHEN division IS NULL THEN '' ELSE CONCAT('  \n" +
                "',division) END,  \n" +
                "	                 CASE WHEN email IS NULL THEN '' ELSE CONCAT('  \n" +
                "Email: ',fun_convertJsonEmailToCommaSepList(email)) END,  \n" +
                "	                 CASE WHEN phoneNumber IS NULL THEN '' ELSE CONCAT('  \n" +
                "Phone: ',fun_getCategoryWisePhonesFromJsonList(phoneNumber)) END  \n" +
                "	                 ) INTO  pContactPerson FROM contactperson  \n" +
                "	                 WHERE personID=pContactPersonID;  \n" +
                "  \n" +
                "	RETURN pContactPerson;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** New Script -> 24-02-2022 *********************************** */
                "Drop function if Exists `fun_getAddressbyIDAndContactPersonID`;  \n" +
                "CREATE FUNCTION `fun_getAddressbyIDAndContactPersonID`(  \n" +
                "	pAddressID INT,  \n" +
                "	pcontactPersonID INT  \n" +
                ") RETURNS varchar(2000) CHARSET utf8mb4  \n" +
                "BEGIN  \n" +
                "	DECLARE pAddress VARCHAR(2000);  \n" +
                "    DECLARE vFormatValue INT;  \n" +
                "  \n" +
                "	SELECT `values` INTO vFormatValue FROM systemconfigrations WHERE `key`='ContactPersonDisplayNameFormat';  \n" +
                "  \n" +
                "	SELECT CONCAT('<b>',IFNULL(ca.companyName,''),'</b>','<br/>','ATTN: ',fun_GetFormattedContactPersonName(cp.firstName,cp.middleName,cp.lastName,vFormatValue),'<br/>', IFNULL(cp.division,''),(CASE WHEN cp.division IS NOT NULL THEN'<br/>' ELSE '' END), IFNULL(ca.street1,''),' ', IFNULL(ca.street2,''),' ',IFNULL(ca.street3,''),'<br/>',  \n" +
                "	IFNULL(ca.city,''),', ', IFNULL(ca.state,''),', ', IFNULL(co.countryName,''),' ','-',' ', IFNULL(ca.postcode,''),  \n" +
                "	 CASE WHEN cp.phoneNumber IS NOT NULL THEN '<br/>' ELSE '' END,  \n" +
                "	 CASE WHEN cp.phoneNumber IS NULL THEN '' ELSE CONCAT('Phone: ', IFNULL(fun_getPrimaryPhoneFromJsonList(cp.phoneNumber),'')) END,  \n" +
                "	CASE WHEN cp.phoneNumber IS NULL THEN '' ELSE CONCAT(' Ext. ', IFNULL(fun_getPrimaryPhExtensionFromJsonList(cp.phoneNumber),'')) END,  \n" +
                "	(CASE WHEN cp.email IS NOT NULL THEN '<br/>' ELSE '' END), IFNULL(CONCAT('Email: ',fun_getPrimaryEmailFromJsonList(cp.email)),'')) INTO  pAddress  \n" +
                "	FROM customer_addresses ca  \n" +
                "	JOIN countrymst co ON co.countryID = ca.countryID  \n" +
                "	LEFT JOIN contactperson cp ON ca.customerId=cp.refTransID AND cp.personId=pcontactPersonID  \n" +
                "	WHERE ca.id = pAddressID  AND ca.isDeleted = 0;  \n" +
                "  \n" +
                "	RETURN pAddress;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** New Script -> 24-02-2022 *********************************** */
                "DROP TRIGGER IF EXISTS `Trg_AU_mfgcodemst`;  \n" +
                "CREATE TRIGGER `Trg_AU_mfgcodemst` AFTER UPDATE ON `mfgcodemst` FOR EACH ROW BEGIN  \n" +
                "    IF IFNULL(OLD.mfgCode,0) != IFNULL(NEW.mfgCode,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'Code',CAST(OLD.mfgCode AS CHAR), CAST(NEW.mfgCode AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.mfgName,0) != IFNULL(NEW.mfgName,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),CAST(CASE WHEN NEW.mfgType='DIST' THEN 'Company' ELSE 'Business Name' END AS CHAR),CAST(OLD.mfgName AS CHAR), CAST(NEW.mfgName AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.legalName,0) != IFNULL(NEW.legalName,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'Legal Name',CAST(OLD.legalName AS CHAR), CAST(NEW.legalName AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.customerType,0) != IFNULL(NEW.customerType,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'Customer Type',CAST(CASE WHEN  OLD.customerType='B'  THEN 'Broker' WHEN OLD.customerType='E' THEN 'End Customer'  ELSE '' END AS CHAR), CAST(CASE WHEN  NEW.customerType='B'  THEN 'Broker' WHEN NEW.customerType='E' THEN 'End Customer'  ELSE '' END AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.salesCommissionTo,0) != IFNULL(NEW.salesCommissionTo,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'Sales Commission To',fun_getUserNameByEmployeID(IFNULL(OLD.salesCommissionTo, NULL)), fun_getUserNameByEmployeID(IFNULL(NEW.salesCommissionTo, NULL)),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.customerSystemID,0) != IFNULL(NEW.customerSystemID,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'Customer#',CAST(OLD.customerSystemID AS CHAR), CAST(NEW.customerSystemID AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.carrierID,0) != IFNULL(NEW.carrierID,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'Carrier',fun_getGenericCategoryCodeNameByID(IFNULL(OLD.carrierID, NULL)), fun_getGenericCategoryCodeNameByID(IFNULL(NEW.carrierID, NULL)),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.rmaCarrierID,0) != IFNULL(NEW.rmaCarrierID,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'RMA Carrier',fun_getGenericCategoryCodeNameByID(IFNULL(OLD.rmaCarrierID, NULL)), fun_getGenericCategoryCodeNameByID(IFNULL(NEW.rmaCarrierID, NULL)),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.rmashippingMethodId,0) != IFNULL(NEW.rmashippingMethodId,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'RMA Shipping Method',fun_getGenericCategoryCodeNameByID(IFNULL(OLD.rmashippingMethodId, NULL)), fun_getGenericCategoryCodeNameByID(IFNULL(NEW.rmashippingMethodId, NULL)),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.shippingMethodId,0) != IFNULL(NEW.shippingMethodId,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'Shipping Method',fun_getGenericCategoryCodeNameByID(IFNULL(OLD.shippingMethodId, NULL)), fun_getGenericCategoryCodeNameByID(IFNULL(NEW.shippingMethodId, NULL)),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.carrierAccount,0) != IFNULL(NEW.carrierAccount,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'Carrier Account#',CAST(OLD.carrierAccount AS CHAR), CAST(NEW.carrierAccount AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.rmaCarrierAccount,0) != IFNULL(NEW.rmaCarrierAccount,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'RMA Carrier Account#',CAST(OLD.rmaCarrierAccount AS CHAR), CAST(NEW.rmaCarrierAccount AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.shippingInsurence,0) != IFNULL(NEW.shippingInsurence,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'Shipping insurance',CAST(CASE WHEN OLD.shippingInsurence=0 THEN 'No' ELSE 'Yes' END AS CHAR), CAST(CASE WHEN NEW.shippingInsurence=0 THEN 'No' ELSE 'Yes' END AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.rmaShippingInsurence,0) != IFNULL(NEW.rmaShippingInsurence,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'RMA Shipping insurance',CAST(CASE WHEN OLD.rmaShippingInsurence=0 THEN 'No' ELSE 'Yes' END AS CHAR), CAST(CASE WHEN NEW.rmaShippingInsurence=0 THEN 'No' ELSE 'Yes' END AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.authorizeType,0) != IFNULL(NEW.authorizeType,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'Authorize Type',CAST(CASE WHEN OLD.authorizeType=1 THEN 'Authorized' WHEN OLD.authorizeType=2 THEN 'Independent' WHEN OLD.authorizeType=3 THEN 'Authorized & Independent' ELSE '' END AS CHAR), CAST(CASE WHEN NEW.authorizeType=1 THEN 'Authorized' WHEN NEW.authorizeType=2 THEN 'Independent' WHEN NEW.authorizeType=3 THEN 'Authorized & Independent' ELSE '' END AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.email,0) != IFNULL(NEW.email,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'Email',CAST(OLD.email AS CHAR), CAST(NEW.email AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.website,0) != IFNULL(NEW.website,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'Website',CAST(OLD.website AS CHAR), CAST(NEW.website AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.contact,0) != IFNULL(NEW.contact,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'Phone',CAST(OLD.contact AS CHAR), CAST(NEW.contact AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.faxNumber,0) != IFNULL(NEW.faxNumber,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'Fax',CAST(OLD.faxNumber AS CHAR), CAST(NEW.faxNumber AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.isActive,0) != IFNULL(NEW.isActive,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'Status',CAST(CASE WHEN OLD.isActive=0 THEN 'Inactive' ELSE 'Active' END AS CHAR), CAST(CASE WHEN NEW.isActive=0 THEN 'Inactive' ELSE 'Active' END AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.isCustOrDisty,0) != IFNULL(NEW.isCustOrDisty,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'Current Status(Manufacturer/Customer)',CAST(CASE WHEN OLD.isCustOrDisty = 1 THEN 'Both' ELSE 'Manufacturer Only' END AS CHAR), CAST(CASE WHEN NEW.isCustOrDisty = 1 THEN 'Both' ELSE 'Manufacturer Only' END AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.invoicesRequireManagementApproval,0) != IFNULL(NEW.invoicesRequireManagementApproval,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'All Invoices Require Management Approval',CAST(CASE WHEN OLD.invoicesRequireManagementApproval = 0 THEN 'No' ELSE 'Yes' END AS CHAR), CAST(CASE WHEN NEW.invoicesRequireManagementApproval = 0 THEN 'No' ELSE 'Yes' END AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.taxID,0) != IFNULL(NEW.taxID,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'Tax ID',CAST(OLD.taxID AS CHAR), CAST(NEW.taxID AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.accountRef,0) != IFNULL(NEW.accountRef,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'Account Reference',CAST(OLD.accountRef AS CHAR), CAST(NEW.accountRef AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.paymentMethodID,0) != IFNULL(NEW.paymentMethodID,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'Payment Method',fun_getGenericCategoryNameByID(IFNULL(OLD.paymentMethodID, NULL)), fun_getGenericCategoryNameByID(IFNULL(NEW.paymentMethodID, NULL)),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.acctId,0) != IFNULL(NEW.acctId,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'COA',fun_getChartOfAccountsCodeNameByID(IFNULL(OLD.acctId, NULL)), fun_getChartOfAccountsCodeNameByID(IFNULL(NEW.acctId, NULL)),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.paymentTermsID,0) != IFNULL(NEW.paymentTermsID,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'Terms',fun_getGenericCategoryNameByID(IFNULL(OLD.paymentTermsID, NULL)), fun_getGenericCategoryNameByID(IFNULL(NEW.paymentTermsID, NULL)),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.dateCodeFormatID,0) != IFNULL(NEW.dateCodeFormatID,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES('MFGCODEMST',CAST(new.id AS CHAR),'MFR Date Code Format',fun_getDateCodeFormatById(IFNULL(OLD.dateCodeFormatID, NULL)), fun_getDateCodeFormatById(IFNULL(NEW.dateCodeFormatID, NULL)),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.comments,0) != IFNULL(NEW.comments,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES('MFGCODEMST',CAST(NEW.id AS CHAR),'Internal Comments',CAST(OLD.comments AS CHAR), CAST(NEW.comments AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.freeOnBoardId,0) != IFNULL(NEW.freeOnBoardId,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES('MFGCODEMST',CAST(NEW.id AS CHAR),'FOB',CAST(fun_getFOBById(OLD.freeOnBoardId) AS CHAR), CAST(fun_getFOBById(NEW.freeOnBoardId) AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.poComment,0) != IFNULL(NEW.poComment,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES('MFGCODEMST',CAST(NEW.id AS CHAR),'Misc. Comments',CAST(OLD.poComment AS CHAR), CAST(NEW.poComment AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.scanDocumentSide,0) != IFNULL(NEW.scanDocumentSide,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES('MFGCODEMST',CAST(NEW.id AS CHAR),'Scanning Side',CAST(CASE WHEN OLD.scanDocumentSide = 'D' THEN 'Duplex Scan (Double-sided)' ELSE 'Simplex Scan (Single-sided)' END AS CHAR), CAST(CASE WHEN NEW.scanDocumentSide = 'D' THEN 'Duplex Scan (Double-sided)' ELSE 'Simplex Scan (Single-sided)' END AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.isOrderQtyRequiredInPackingSlip,0) != IFNULL(NEW.isOrderQtyRequiredInPackingSlip,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES('MFGCODEMST',CAST(NEW.id AS CHAR),'Require Order Qty in Packing Slip',CAST(CASE WHEN OLD.isOrderQtyRequiredInPackingSlip = 0 THEN 'No' ELSE 'Yes' END AS CHAR), CAST(CASE WHEN NEW.isOrderQtyRequiredInPackingSlip = 0 THEN 'No' ELSE 'Yes' END AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.isSupplierEnable,0) != IFNULL(NEW.isSupplierEnable,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES('MFGCODEMST',CAST(NEW.id AS CHAR),'Enable Supplier API Request for All Users',CAST(CASE WHEN OLD.isSupplierEnable = 0 THEN 'Disabled' ELSE 'Enabled' END AS CHAR), CAST(CASE WHEN NEW.isSupplierEnable = 0 THEN 'Disabled' ELSE 'Enabled' END AS CHAR),  \n" +
                "        fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.externalSupplierOrder,0) != IFNULL(NEW.externalSupplierOrder,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES('MFGCODEMST',CAST(NEW.id AS CHAR),'Supplier API Request Order',CAST(OLD.externalSupplierOrder AS CHAR), CAST(NEW.externalSupplierOrder AS CHAR),  \n" +
                "        fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.supplierMFRMappingType,0) != IFNULL(NEW.supplierMFRMappingType,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES('MFGCODEMST',CAST(NEW.id AS CHAR),'Type Of Supplier',CAST(CASE WHEN OLD.supplierMFRMappingType = 'S' THEN 'Strictly Custom Part Only' WHEN OLD.supplierMFRMappingType = 'B' THEN 'Off-the-shelf' ELSE 'All' END AS CHAR),  \n" +
                "        CAST(CASE WHEN NEW.supplierMFRMappingType = 'S' THEN 'Strictly Custom Part Only' WHEN NEW.supplierMFRMappingType = 'B' THEN 'Off-the-shelf' ELSE 'All' END AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.displayOrder,0) != IFNULL(NEW.displayOrder,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES('MFGCODEMST',CAST(NEW.id AS CHAR),'Display Order',CAST(FORMAT(OLD.displayOrder, 5) AS CHAR), CAST(FORMAT(NEW.displayOrder, 5) AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 24-02-2022 *********************************** */
                /* **************************** Add Script Version -> 24-02-2022 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1324,'1.00','V1',' US 40746 And User Story 40551: Show Primary contact person in detail tab of customer/supplier page. - Bhavik '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1324:
            allDbChangesArray.push(
                /* **************************** New Script -> 24-02-2022 *********************************** */
                "Drop procedure if exists `Sproc_GetCompanyDetailsForReport`;  \n" +
                "CREATE PROCEDURE `Sproc_GetCompanyDetailsForReport`()  \n" +
                "BEGIN  \n" +
                "	DECLARE vContPersonNameFormat INT;  \n" +
                "	SELECT fun_getContPersonNameDisplayFormat() INTO vContPersonNameFormat;  \n" +
                "  \n" +
                "	SELECT CONCAT(IFNULL(ci.street1, ', '),', ',IFNULL(ci.city,', '),', ',IFNULL(ci.state, ''),' ',IFNULL(ci.postalCode,''))AS address,  \n" +
                "	   fun_GetFormattedContactPersonName(cp.firstName, cp.middleName, cp.lastName, vContPersonNameFormat) companyContactName,ci.registeredEmail as companyEmail,ci.faxNumber,ci.contactNumber as phoneNo,ci.phoneExt,ci.contactNumber AS contact, ci.name AS  companyName, ci.registeredEmail as email  \n" +
                "	FROM company_info ci  \n" +
                "	LEFT JOIN countrymst c ON ci.countryID=c.countryID and c.isDeleted = 0  \n" +
                "    LEFT JOIN contactperson cp ON ci.mfgCodeId = cp.refTransID and cp.refTableName = 'mfgcodemst' and cp.isDefault = 1 and cp.isActive = 1 and cp.isDeleted = 0  \n" +
                "	WHERE ci.isDeleted=0;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** New Script -> 24-02-2022 *********************************** */
                "Drop procedure if exists `Sproc_GetCompanyReportDetails`;  \n" +
                "CREATE PROCEDURE `Sproc_GetCompanyReportDetails`()  \n" +
                "BEGIN  \n" +
                "	DECLARE vContPersonNameFormat INT;  \n" +
                "	SELECT fun_getContPersonNameDisplayFormat() INTO vContPersonNameFormat;  \n" +
                "  \n" +
                "	# Company detail for Report  \n" +
                "	SELECT CONCAT( IF(ci.legalName = '' OR ci.legalName is null,'' ,CONCAT(ci.legalName, ' d/b/a,<br/>')),IFNULL(ci.name, ''),'<br/>',  \n" +
                "    IFNULL(ci.street1, ''),'<br/>',IFNULL(ci.city, ''),', ',IFNULL(ci.state, ''),' ',IFNULL(ci.postalCode, ''), ', ',  \n" +
                "    IFNULL(c.countryName,''),'<br/>','Email: &nbsp;',IFNULL(ci.registeredEmail,''),'<br/>','Phone: ', IFNULL(ci.contactNumber,''),  \n" +
                "    '<br/>','Fax: &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;',IFNULL(ci.faxNumber,''))AS address,  \n" +
                "		ci.registeredEmail AS companyEmail, ci.registeredEmail as email,   ci.faxNumber,ci.contactNumber AS contact,ci.phoneExt,ci.contactNumber AS phoneNo, ci.name AS  mfgName,'' AS headerName,'accounting@flextronassembly.com' AS billingEmail,  \n" +
                "		ci.ein, ci.remittanceAddress,  \n" +
                "        fun_GetFormattedContactPersonName(cp.firstName, cp.middleName, cp.lastName, vContPersonNameFormat) companyContactName  \n" +
                "	FROM company_info ci  \n" +
                "		LEFT JOIN countrymst c ON ci.countryID=c.countryID and c.isDeleted = 0  \n" +
                "		LEFT JOIN contactperson cp ON ci.mfgCodeId = cp.refTransID and cp.refTableName = 'mfgcodemst' and cp.isDefault = 1 and cp.isActive = 1 and cp.isDeleted = 0  \n" +
                "	WHERE ci.isDeleted=0;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 24-02-2022 *********************************** */
                "Drop procedure if exists `Sproc_RetrieveContactPersonList`;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveContactPersonList`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN prefEntityType VARCHAR(255),  \n" +
                "	IN pisPrimary TINYINT,  \n" +
                "	IN pisDefault TINYINT,  \n" +
                "	IN prefName VARCHAR(255),  \n" +
                "	IN padditionalComment VARCHAR(2000)  \n" +
                "   )  \n" +
                "BEGIN  \n" +
                "		DECLARE pOffset INT;  \n" +
                "		DECLARE rowNumWhere VARCHAR(255) ;  \n" +
                "        DECLARE mfgcodemstCondition VARCHAR(255) DEFAULT '';  \n" +
                "		DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
                "		DECLARE v_TimeZone VARCHAR(50);  \n" +
                "		DECLARE vMfgCodeFormat INT;  \n" +
                "		DECLARE vEmployeeNameFormat INT;  \n" +
                "		DECLARE vContPersonNameFormat INT;  \n" +
                "  \n" +
                "		SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "		SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
                "		SELECT fun_getMFGCodeNameFormat() INTO vMfgCodeFormat;  \n" +
                "		SELECT fun_getEmployeeDisplayFormat() INTO vEmployeeNameFormat;  \n" +
                "		SELECT fun_getContPersonNameDisplayFormat() INTO vContPersonNameFormat;  \n" +
                "  \n" +
                "  		IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "			SET pWhereClause = ' 1=1 ';  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF(prefEntityType = 'Customer/Manufacturer') THEN  \n" +
                "			SET mfgcodemstCondition = CONCAT(\" AND  mfg.mfgType = 'MFG'\");  \n" +
                "		ELSEIF (prefEntityType = 'Supplier') THEN  \n" +
                "			SET mfgcodemstCondition = CONCAT(\" AND  mfg.mfgType = 'DIST' and mfg.isCustOrDisty = 1\");  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF(pisPrimary) THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause,\" AND isPrimary = '\",pisPrimary,\"'\");  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF(pisDefault) THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause,\" AND isDefault = '\",pisDefault,\"'\");  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF(prefName IS NOT NULL AND prefName != '') THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause, \" AND refName LIKE '%\",prefName,\"%' \");  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF(padditionalComment IS NOT NULL AND padditionalComment != '') THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause, \" AND additionalComment LIKE '%\",padditionalComment,\"%' \");  \n" +
                "		END IF;  \n" +
                "  \n" +
                "        # Common Details for Retrive Contact Person.  \n" +
                "        SET @temp_Sproc_RetrieveMasterTemplate_Common = CONCAT(\"  \n" +
                "			fun_GetFormattedContactPersonName(a.firstName, a.middleName, a.lastName, \",vContPersonNameFormat,\") formattedName,  \n" +
                "			fun_getUserNameByID(a.updatedBy) updatedbyValue, fun_getUserNameByID(a.createdBy) createdbyValue,  \n" +
                "			fun_getRoleByID(a.createByRoleId) createdbyRoleValue, fun_getRoleByID(a.updateByRoleId) updatedbyRoleValue,  \n" +
                "			fun_ApplyCommonDateTimeFormatByParaValue(a.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAtValue,  \n" +
                "			fun_ApplyCommonDateTimeFormatByParaValue(a.updatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAtValue,  \n" +
                "			(CASE WHEN (a.systemGenerated = 0) THEN 'No' WHEN (a.systemGenerated = 1) THEN 'Yes' ELSE '' END) AS `syatemGeneratedValue`,  \n" +
                "			(CASE WHEN (a.isDefault = 0) THEN 'No' WHEN (a.isDefault = 1) THEN 'Yes' ELSE '' END) AS `isDefaultValue`,  \n" +
                "			(CASE WHEN (a.isPrimary = 0) THEN 'No' WHEN (a.isPrimary = 1) THEN 'Yes' ELSE '' END) AS `isPrimaryValue`,  \n" +
                "            (CASE WHEN (a.mailToCategory = 'N') THEN 'None' WHEN (a.mailToCategory = 'P') THEN 'Primary Email' WHEN (a.mailToCategory = 'A') THEN 'All Email' ELSE '' END) AS `mailToValue`  \n" +
                "		\");  \n" +
                "  \n" +
                "		# Filter: Personnel  \n" +
                "		SET @temp_Sproc_RetrieveMasterTemplate_employees = CONCAT(\"  \n" +
                "			select cp.personId, ecp.employeeId AS refTransID, cp.refTableName, cp.firstName, cp.middleName, cp.lastName, cp.title, cp.email, cp.isDefault, cp.additionalComment, cp.phoneNumber, cp.mailToCategory,  \n" +
                "					cp.division, cp.isPrimary, cp.systemGenerated, '' As refName, 'Personnel' AS refEntityType,  \n" +
                "                    fun_convertJsonEmailToCommaSepList(cp.email) emailList, (CASE WHEN cp.isActive = '1' THEN 'Active' ELSE 'Inactive' END) isActiveValue, cp.isActive,  \n" +
                "                    fun_GetEmployeeFormattedName(emp.firstName, emp.middleName, emp.lastName, emp.initialName,\",vEmployeeNameFormat,\") personnel,  \n" +
                "                    (SELECT GROUP_CONCAT(jsonTblPhone.phone, ifnull(concat(' Ext.' ,jsonTblPhone.phExtension), '')) from JSON_TABLE(cp.phoneNumber, '$[*]' COLUMNS (phone VARCHAR(40)  PATH '$.phone',phExtension VARCHAR(40)  PATH '$.phExtension')) jsonTblPhone ) phoneNumberList,  \n" +
                "					cp.updatedBy, cp.createdBy, cp.createByRoleId, cp.updateByRoleId, cp.createdAt, cp.updatedAt  \n" +
                "				FROM contactperson cp  \n" +
                "                LEFT JOIN employee_contactperson AS ecp ON  ecp.contactPersonId = cp.personId and ecp.isDeleted = 0 and ecp.releasedAt Is Null  \n" +
                "				LEFT JOIN employees emp ON emp.id = ecp.employeeId and emp.isDeleted = 0  \n" +
                "					WHERE cp.refTableName = 'employees' AND cp.isDeleted = 0  \n" +
                "		\");  \n" +
                "  \n" +
                "        # Filter: Manufacturer AND Supplier  \n" +
                "        SET @temp_Sproc_RetrieveMasterTemplate_mfgcodemst = CONCAT(\"  \n" +
                "			select cp.personId, cp.refTransID, cp.refTableName, cp.firstName, cp.middleName, cp.lastName, cp.title, cp.email, cp.isDefault, cp.additionalComment, cp.phoneNumber, cp.mailToCategory,  \n" +
                "					cp.division, cp.isPrimary, cp.systemGenerated, fun_GetFormattedMfgCode(mfg.mfgCode, mfg.mfgName, \",vMfgCodeFormat,\") AS refName,  \n" +
                "					(CASE WHEN mfg.mfgType = 'MFG' THEN 'Customer/Manufacturer' WHEN mfg.mfgType = 'DIST' and mfg.isCustOrDisty = 1 THEN 'Supplier' ELSE ''  END) AS refEntityType,  \n" +
                "					(SELECT GROUP_CONCAT(jsonTblEmails.emails) from JSON_TABLE(cp.email, '$[*]' COLUMNS (emails VARCHAR(40)  PATH '$.email')) jsonTblEmails) emailList, (CASE WHEN cp.isActive = '1' THEN 'Active' ELSE 'Inactive' END) isActiveValue, cp.isActive, '' AS personnels,  \n" +
                "                    (SELECT GROUP_CONCAT(jsonTblPhone.phone, ifnull(concat(' Ext.' ,jsonTblPhone.phExtension), '')) from JSON_TABLE(cp.phoneNumber, '$[*]' COLUMNS (phone VARCHAR(40)  PATH '$.phone',phExtension VARCHAR(40)  PATH '$.phExtension')) jsonTblPhone ) phoneNumberList,  \n" +
                "                    cp.updatedBy, cp.createdBy, cp.createByRoleId, cp.updateByRoleId, cp.createdAt, cp.updatedAt  \n" +
                "                FROM contactperson cp  \n" +
                "				INNER JOIN mfgcodemst mfg ON mfg.id = cp.refTransID and mfg.isDeleted = 0 \",mfgcodemstCondition,\"  \n" +
                "						WHERE cp.isDeleted = 0  \n" +
                "		\");  \n" +
                "  \n" +
                "        # UNION Records based of Filer : Create Final Query for Fetch Contact Person Records.  \n" +
                "        IF(prefEntityType = 'Supplier' OR prefEntityType = 'Customer/Manufacturer') THEN  \n" +
                "			SET @temp_Sproc_RetrieveMasterTemplate = CONCAT(\"select *, \",@temp_Sproc_RetrieveMasterTemplate_Common,\" from  \n" +
                "					(\",@temp_Sproc_RetrieveMasterTemplate_mfgcodemst,\") a \");  \n" +
                "		ELSEIF (prefEntityType = 'Personnel') THEN  \n" +
                "			SET @temp_Sproc_RetrieveMasterTemplate = CONCAT(\"select *, \",@temp_Sproc_RetrieveMasterTemplate_Common,\" from  \n" +
                "					(\",@temp_Sproc_RetrieveMasterTemplate_employees,\") a \");  \n" +
                "        ELSE  \n" +
                "			SET @temp_Sproc_RetrieveMasterTemplate= CONCAT(\"select *,\",@temp_Sproc_RetrieveMasterTemplate_Common,\" from  \n" +
                "					(\",@temp_Sproc_RetrieveMasterTemplate_employees,\" UNION ALL \",@temp_Sproc_RetrieveMasterTemplate_mfgcodemst,\") a \");  \n" +
                "        END IF;  \n" +
                "  \n" +
                "		IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "			SET pOrderBy = \"ORDER BY firstName ASC\" ;  \n" +
                "		ELSE  \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "			SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "		ELSE  \n" +
                "			SET rowNumWhere = '';  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		 /* to get total count of rows */  \n" +
                "		SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_RetrieveMasterTemplate,\" ) c where 1=1 and \", pWhereClause);  \n" +
                "		PREPARE query2 FROM @SQLStatement2;  \n" +
                "		EXECUTE query2;  \n" +
                "		DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "		SET @SQLStatement2 = CONCAT(\"select * from ( \", @temp_Sproc_RetrieveMasterTemplate,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "		PREPARE query1 FROM @SQLStatement2;  \n" +
                "		EXECUTE query1;  \n" +
                "		DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** New Script -> 24-02-2022 *********************************** */
                "Drop procedure if exists `Sproc_GetContactPersonForElastic`;  \n" +
                "CREATE PROCEDURE `Sproc_GetContactPersonForElastic`(  \n" +
                "	IN pId INT,  \n" +
                "    IN pFromdate DATE,  \n" +
                "    IN pTodate DATE,  \n" +
                "    IN pRequiredCount TINYINT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "	DECLARE vMfgCodeFormat INT;  \n" +
                "	DECLARE vEmployeeNameFormat INT;  \n" +
                "	DECLARE vContPersonNameFormat INT;  \n" +
                "  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "	SELECT fun_getMFGCodeNameFormat() INTO vMfgCodeFormat;  \n" +
                "	SELECT fun_getEmployeeDisplayFormat() INTO vEmployeeNameFormat;  \n" +
                "	SELECT fun_getContPersonNameDisplayFormat() INTO vContPersonNameFormat;  \n" +
                "  \n" +
                "    IF(pRequiredCount)  \n" +
                "	THEN  \n" +
                "		SELECT  \n" +
                "			COUNT(1)  \n" +
                "		FROM `contactperson`  \n" +
                "		WHERE `isDeleted` = 0 AND `personId` = IFNULL(pId,`personId`);  \n" +
                "	ELSE  \n" +
                "		SELECT cp.personId, cp.firstName, cp.middleName, cp.lastName, cp.division, cp.additionalComment, ecp.employeeId AS refTransID, cp.title,  \n" +
                "				fun_GetFormattedContactPersonName(cp.firstName, cp.middleName, cp.lastName,vContPersonNameFormat) fullName, 'Personnel' AS refEntityType,  \n" +
                "				NULL AS refName, fun_GetEmployeeFormattedName(emp.firstName, emp.middleName, emp.lastName, emp.initialName, vEmployeeNameFormat) personnels,  \n" +
                "				fun_convertJsonEmailToCommaSepList(cp.email) email,  \n" +
                "                fun_getCategoryWisePhonesFromJsonList(cp.phoneNumber) phoneNumberList,  \n" +
                "				NULL AS isDefault,  \n" +
                "				NULL AS isPrimary,  \n" +
                "				(CASE WHEN (cp.systemGenerated = 0) THEN 'No'  \n" +
                "					WHEN (cp.systemGenerated = 1) THEN 'Yes' ELSE '' END) AS systemGenerated,  \n" +
                "				(CASE WHEN cp.isActive = '1' THEN 'Active' ELSE 'Inactive' END) STATUS,  \n" +
                "				cp.isDeleted  \n" +
                "			FROM `contactperson` AS cp  \n" +
                "			LEFT JOIN employee_contactperson AS ecp ON  ecp.contactPersonId = cp.personId AND ecp.isDeleted = 0 AND ecp.releasedAt IS NULL  \n" +
                "			LEFT JOIN employees emp ON emp.id = ecp.employeeId AND emp.isDeleted = 0  \n" +
                "				WHERE `personId` = IFNULL(pId,`personId`) AND cp.refTableName ='employees'  \n" +
                "				AND (CASE WHEN (pFromdate IS NOT NULL AND pTodate IS NOT NULL) THEN  \n" +
                "					((DATE(fun_CovnertDateTimeByTimezoneValue(cp.createdAt,v_TimeZone)) BETWEEN pFromdate AND pTodate)  \n" +
                "						OR (DATE(fun_CovnertDateTimeByTimezoneValue(cp.updatedAt,v_TimeZone)) BETWEEN pFromdate AND pTodate))  \n" +
                "					ELSE 1 = 1 END)  \n" +
                "		UNION ALL  \n" +
                "		SELECT cp.personId, cp.firstName, cp.middleName, cp.lastName, cp.division, cp.additionalComment, cp.refTransID, cp.title,  \n" +
                "				fun_GetFormattedContactPersonName(cp.firstName, cp.middleName, cp.lastName,vContPersonNameFormat) fullName,  \n" +
                "				(CASE WHEN mfg.mfgType = 'MFG' THEN 'Customer/Manufacturer' WHEN mfg.mfgType = 'DIST' AND mfg.isCustOrDisty = 1 THEN 'Supplier' ELSE ''  END) AS refEntityType,  \n" +
                "                fun_GetFormattedMfgCode(mfg.mfgCode, mfg.mfgName,vMfgCodeFormat) AS refName,  NULL AS personnels,  \n" +
                "                fun_convertJsonEmailToCommaSepList(cp.email) email,  \n" +
                "                fun_getCategoryWisePhonesFromJsonList(cp.phoneNumber) phoneNumberList,  \n" +
                "				(CASE WHEN (cp.isDefault = 0) THEN 'No'  \n" +
                "					WHEN (cp.isDefault = 1) THEN 'Yes' ELSE '' END) AS isDefault,  \n" +
                "				(CASE WHEN (cp.isPrimary = 0) THEN 'No'  \n" +
                "					WHEN (cp.isPrimary = 1) THEN 'Yes' ELSE '' END) AS isPrimary,  \n" +
                "				(CASE WHEN (cp.systemGenerated = 0) THEN 'No'  \n" +
                "					WHEN (cp.systemGenerated = 1) THEN 'Yes' ELSE '' END) AS systemGenerated,  \n" +
                "				(CASE WHEN cp.isActive = '1' THEN 'Active' ELSE 'Inactive' END) STATUS,  \n" +
                "				cp.isDeleted  \n" +
                "			FROM `contactperson` AS cp  \n" +
                "				INNER JOIN mfgcodemst mfg ON mfg.id = cp.refTransID AND mfg.isDeleted = 0  \n" +
                "			WHERE `personId` = IFNULL(pId,`personId`)  \n" +
                "				AND (CASE WHEN (pFromdate IS NOT NULL AND pTodate IS NOT NULL) THEN  \n" +
                "					((DATE(fun_CovnertDateTimeByTimezoneValue(cp.createdAt,v_TimeZone)) BETWEEN pFromdate AND pTodate)  \n" +
                "						OR (DATE(fun_CovnertDateTimeByTimezoneValue(cp.updatedAt,v_TimeZone)) BETWEEN pFromdate AND pTodate))  \n" +
                "					ELSE 1 = 1 END);  \n" +
                "	END IF;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 24-02-2022 *********************************** */
                "Drop procedure if exists `Sproc_RetrieveCustomerInvoiceDetails`;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveCustomerInvoiceDetails`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pFilterStatus LONGTEXT,  \n" +
                "	IN pDueDate DATE,  \n" +
                "	IN pAdditionalDays INT,  \n" +
                "	IN pTermsAndAboveDays INT,  \n" +
                "	IN pPoNumber VARCHAR(50),  \n" +
                "	IN pIsExactSearchPO TINYINT,  \n" +
                "	IN pMfgCodeIds LONGTEXT ,  \n" +
                "	IN pPaymentTermsIds LONGTEXT ,  \n" +
                "	IN pPartId VARCHAR(5000) ,  \n" +
                "	IN pTransType VARCHAR(5) ,  \n" +
                "	IN pFromDate DATE,  \n" +
                "	IN pToDate DATE,  \n" +
                "	IN pPaymentStatusFilter VARCHAR(50) ,  \n" +
                "	IN pCreditAppliedStatusFilter  VARCHAR(100) ,  \n" +
                "	IN pZeroAmountFilter TINYINT,  \n" +
                "	IN pCreditMemoRefundStatusFilter VARCHAR(100)      ,  \n" +
                "	IN pMarkedForRefund TINYINT  \n" +
                "	-- IN pChequeNumber  VARCHAR(50)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;  \n" +
                "	DECLARE vDateTimeDisplayFormat VARCHAR(100);  \n" +
                "	DECLARE vTimeZone VARCHAR(50);  \n" +
                "	DECLARE v_receivedAmtSF VARCHAR(1000);  \n" +
                "	DECLARE v_appliedCMPDJoin VARCHAR(500);  \n" +
                "	DECLARE vMfgCodeFormat INT;  \n" +
                "    DECLARE v_empFormat INT;  \n" +
                "  \n" +
                "	SELECT fun_getTimeZone() INTO vTimeZone;  \n" +
                "	SELECT fun_getDateTimeFormat() INTO vDateTimeDisplayFormat;  \n" +
                "	SET v_appliedCMPDJoin = '';  \n" +
                "	SELECT fun_getMFGCodeNameFormat() INTO vMfgCodeFormat;  \n" +
                "    SELECT fun_getEmployeeDisplayFormat() INTO v_empFormat;  \n" +
                "  \n" +
                "	IF pTransType = 'C' THEN  \n" +
                "		SET v_receivedAmtSF = CONCAT(\" psip.id AS custPaymentMstID, psip.paymentAmount AS receivedAmount ,  \n" +
                "				(SELECT SUM(paymentAmount) FROM packingslip_invoice_payment_det WHERE refRefundCustCreditMemoID = cp.id  \n" +
                "						AND isDeleted = 0 AND isPaymentVoided = 0) AS totRefundIssuedAgainstCreditMemo ,  \n" +
                "				cp.refundStatus, fun_getCustCreditMemoRefundStatusTextByValue(cp.refundStatus) AS creditMemoRefundStatusText , \");  \n" +
                "		SET v_appliedCMPDJoin = CONCAT(\" LEFT JOIN packingslip_invoice_payment psip ON cp.id = psip.refCustCreditMemoID AND psip.refPaymentMode = 'CA'  \n" +
                "						AND psip.isDeleted = 0 AND psip.isPaymentVoided = 0 \");  \n" +
                "	ELSE  \n" +
                "		SET v_receivedAmtSF = CONCAT(' get_totalCustomerInvoiceReceivedAmountById(cp.id) AS receivedAmount ,  \n" +
                "						NULL as totRefundIssuedAgainstCreditMemo , ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "	SET @temp_Sproc_RetrieveCustomerInvoiceDetails = CONCAT(\"  \n" +
                "		SELECT  cp.id, cp.transType, cp.poNumber,cp.poDate, cp.poRevision,  \n" +
                "        (CASE WHEN cp.transType = 'I' THEN 'Invoice' WHEN cp.transType = 'C' THEN 'Credit Memo' END) transTypeText,  \n" +
                "        cp.packingSlipNumber,cp.packingslipDate,  \n" +
                "        cp.invoiceNumber,cp.invoiceDate, cp.revision,  \n" +
                "        cp.creditMemoNumber, cp.creditMemoDate,  \n" +
                "        cp.refDebitMemoNumber, cp.refDebitMemoDate,  \n" +
                "        (CASE WHEN cp.packingSlipType = 1 or cp.packingSlipType = 2  THEN 'Invoice'  \n" +
                "				WHEN  cp.packingSlipType =3 THEN 'MISC Invoice' END)invoiceType,  \n" +
                "	(CASE WHEN cp.packingSlipType = 1 or cp.packingSlipType = 2  THEN 1  \n" +
                "				WHEN  cp.packingSlipType =3 THEN 2 END)invoiceTypeCode,  \n" +
                "        cp.soNumber,cp.soDate,  \n" +
                "		cp.sorevision,  \n" +
                "        cp.refSalesOrderID,  \n" +
                "        cp.paymentAmount,cp.headerComment, cp.packingSlipComment,  \n" +
                "        cp.refCustInvoiceID,  \n" +
                "		fun_getCustomerInvoiceSubStatusName(cp.subStatus, cp.transType) statusConvertedValue,  \n" +
                "		 cp.status,  \n" +
                "         cp.subStatus,  \n" +
                "		 (case when cp.transType = 'I' then  fun_getPaymentStatusByCustPackingSlipSubStatus(cp.subStatus,cp.transType,cp.paymentStatus,'CODE') end) AS paymentStatusCode,  \n" +
                "		 (case when cp.transType = 'I' then  fun_getPaymentStatusByCustPackingSlipSubStatus(cp.subStatus,cp.transType,cp.paymentStatus,'VAL') end) AS paymentStatusValue,  \n" +
                "		(CASE WHEN cp.transType = 'C' THEN fun_getCustCreditAppliedStatusTextByValue(cp.paymentStatus)  \n" +
                "			ELSE '' END) AS creditAppliedStatus ,  \n" +
                "		  cp.paymentStatus,  \n" +
                "          ifnull(packingSlip.subStatus,0) packingSlipStatusID,  \n" +
                "		  fun_getCustomerInvoiceSubStatusName(packingSlip.subStatus, 'P') packingSlipStatus,  \n" +
                "		  ifnull(cp.totalAmount,0) totalAmount,  \n" +
                "          cp.isMarkForRefund AS isMarkForRefundCM, cp.agreedRefundAmt AS agreedRefundAmtCM,  \n" +
                "		  fun_getIntToText(cp.isMarkForRefund) isMarkRefundConvertedValueCM,  \n" +
                "		 (SELECT IFNULL(g.cnt,0) FROM vu_genericfilescount g WHERE g.entityid=-18 AND g.refTransID=cp.id) invoiceDocumentCount,  \n" +
                "         (SELECT IFNULL(g.cnt,0) FROM vu_genericfilescount g WHERE g.entityid=-17 AND g.refTransID in (select cpp.id from customer_packingslip cpp where cpp.refCustInvoiceID=cp.id)) packingslipDocumentCount,  \n" +
                "		 (select count(1) from customer_packingslip_det cpd where cpd.refCustPackingSlipID=cp.id and cpd.isdeleted=0) totalNumber,  \n" +
                "		 fun_GetFormattedMfgCode(m.mfgcode,m.mfgname,\", vMfgCodeFormat,\") as customerName,  \n" +
                "		 m.mfgcode as customerCode,  \n" +
                "         cp.customerID,  \n" +
                "         cp.createdBy as createdById,  \n" +
                "		\",v_receivedAmtSF,\"  \n" +
                "		 -- get_totalCustomerInvoiceReceivedAmountById(cp.id) receivedAmount,  \n" +
                "		 fun_getUserNameByID(cp.updatedBy) updatedby,  \n" +
                "		 fun_getUserNameByID(cp.createdBy) createdby,  \n" +
                "		 fun_getRoleByID(cp.createByRoleId) createdbyRole,  \n" +
                "		 fun_getRoleByID(cp.updateByRoleId) updatedbyRole,  \n" +
                "		 fun_ApplyCommonDateTimeFormatByParaValue(cp.createdAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') createdAt,  \n" +
                "		 fun_ApplyCommonDateTimeFormatByParaValue(cp.UpdatedAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') updatedAt ,  \n" +
                "         fun_getDueDateEOM(cp.invoiceDate,cp.termsDays,cp.termsId)  paymentDueDate,  \n" +
                "         cp.salesCommissionTo,  \n" +
                "         fun_GetEmployeeFormattedName(salecomm.firstName,salecomm.middleName,salecomm.lastName,salecomm.initialName,\",v_empFormat,\") salesCommissionToName,  \n" +
                "         cp.termsDays termDays,  \n" +
                "         cp.freeOnBoardId,  \n" +
                "         cp.freeOnBoardName,  \n" +
                "         cp.isLocked,  \n" +
                "         fun_getIntToText(cp.isLocked) isLockedConvertedValue,  \n" +
                "         fun_getUserNameByID(cp.lockedBy) lockedBy,  \n" +
                "         fun_getRoleByID(cp.lockedByRole) lockedByRole,  \n" +
                "         fun_ApplyCommonDateTimeFormatByParaValue(cp.lockedAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') lockedAt,  \n" +
                "         cp.shippingMethodId, fun_getGenericCategoryCodeNameByID(cp.shippingMethodId) shippingMethodName,  \n" +
                "         packingSlip.id packingSlipId,  \n" +
                "         (select group_concat(paymentNumber)  \n" +
                "				from  packingslip_invoice_payment pip join packingslip_invoice_payment_det pipd  \n" +
                "				on pipd.refPayementid = pip.id and pipd.isDeleted = 0  \n" +
                "                where pipd.refCustPackingslipInvoiceID = cp.id) paymentNumber,  \n" +
                "		 (select group_concat(trackNumber) from customer_packing_slip_track_number invTrack where invTrack.refCustPackingSlipID = cp.id and invTrack.isDeleted = 0) invoiceTrackNumber,  \n" +
                "		 (select COUNT(trackNumber) from customer_packing_slip_track_number invTrack where invTrack.refCustPackingSlipID = cp.id and invTrack.isDeleted = 0) cpTrackNumberCount,  \n" +
                "         cp.rmaNumber , cp.systemId,  \n" +
                "        fun_getAddressbyID(cp.intermediateShipmentId) intermediateAddress,  \n" +
                "		fun_getAddressbyID(cp.shipToId) shippingAddress,  \n" +
                "		fun_getAddressbyID(cp.billToId) billingAddress,  \n" +
                "        fun_getFormattedContactPerson(billCP.firstName,billCP.middleName,billCP.lastName,billCP.division,billCP.email, fun_getPrimaryPhoneFromJsonList(billCP.phoneNumber), fun_getPrimaryPhExtensionFromJsonList(billCP.phoneNumber)) billToContactPerson, fun_getFormattedContactPerson(shipCP.firstName,shipCP.middleName,shipCP.lastName,shipCP.division,shipCP.email,fun_getPrimaryPhoneFromJsonList(shipCP.phoneNumber) , fun_getPrimaryPhExtensionFromJsonList(shipCP.phoneNumber)) shipToToContactPerson,  \n" +
                "		fun_getFormattedContactPerson(interCP.firstName,interCP.middleName,interCP.lastName,interCP.division,interCP.email, fun_getPrimaryPhoneFromJsonList(interCP.phoneNumber), fun_getPrimaryPhExtensionFromJsonList(interCP.phoneNumber)) markToToContactPerson,  \n" +
                "         fun_getGenericCategoryCodeNameByID(cp.termsID) paymentTerms ,  \n" +
                "         cp.isZeroValue,  fun_getIntToText(cp.isZeroValue) isZeroValueConverted,  \n" +
                "         (SELECT `paymentDate` FROM packingslip_invoice_payment_det pipd  \n" +
                "					JOIN packingslip_invoice_payment pip ON pipd.`refPayementid` = pip.id  \n" +
                "		WHERE pipd.`refCustPackingslipInvoiceID` = cp.id AND pip.refPaymentMode = 'R' AND pipd.isPaymentVoided = 0 AND pipd.isDeleted = 0  \n" +
                "		AND pip.isPaymentVoided = 0 AND pip.isDeleted = 0 ORDER BY pipd.id DESC LIMIT 1) AS lastRcvdPaymentDate ,  \n" +
                "		fun_getGenericCategoryCodeNameByID(cp.carrierID) carrierName,  \n" +
                "        cp.carrierID , cp.carrierAccountNumber  \n" +
                "	 FROM customer_packingslip cp  \n" +
                "		JOIN mfgcodemst m on m.id = cp.customerID  \n" +
                "        LEFT JOIN contactperson billCP ON billCP.personId = cp.billingContactPersonID and billCP.isDeleted = 0  \n" +
                "        LEFT JOIN contactperson shipCP ON shipCP.personId = cp.shippingContactPersonID and shipCP.isDeleted = 0  \n" +
                "        LEFT JOIN contactperson interCP ON interCP.personId = cp.intermediateContactPersonID and interCP.isDeleted = 0  \n" +
                "		LEFT JOIN customer_packingslip packingSlip on packingSlip.refCustInvoiceID = cp.id and packingSlip.isDeleted = 0  and packingSlip.transType = 'P'  \n" +
                "        LEFT JOIN employees salecomm ON salecomm.id = cp.salesCommissionTo and salecomm.isDeleted = 0  \n" +
                "		\" , v_appliedCMPDJoin ,\"  \n" +
                "	WHERE  cp.isDeleted=0  \n" +
                "        AND cp.transType = '\" , pTransType,\"'\");  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "		IF pTransType = 'I' THEN  \n" +
                "			SET pOrderBy = \"ORDER BY c.paymentDueDate ASC\";  \n" +
                "		ELSE  \n" +
                "			SET pOrderBy = \"ORDER BY c.id DESC\";  \n" +
                "		END IF;  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = '1=1' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pMfgCodeIds IS NOT NULL AND pMfgCodeIds != '') THEN  \n" +
                "		SET @temp_Sproc_RetrieveCustomerInvoiceDetails= CONCAT(@temp_Sproc_RetrieveCustomerInvoiceDetails, ' AND m.id in (', pMfgCodeIds, ' )');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pPaymentTermsIds IS NOT NULL AND pPaymentTermsIds != '') THEN  \n" +
                "		SET @temp_Sproc_RetrieveCustomerInvoiceDetails= CONCAT(@temp_Sproc_RetrieveCustomerInvoiceDetails, ' AND cp.termsId in (', pPaymentTermsIds, ' )');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF pPartId IS NOT NULL THEN  \n" +
                "		SET @temp_Sproc_RetrieveCustomerInvoiceDetails= CONCAT(@temp_Sproc_RetrieveCustomerInvoiceDetails, ' AND cp.id in (select cpd.refCustPackingSlipID from customer_packingslip_det cpd where cpd.isDeleted = 0 and cpd.partId in (', pPartId , '))');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	# IF(pChequeNumber IS NOT NULL)THEN  \n" +
                "	#	SET @temp_Sproc_RetrieveCustomerInvoiceDetails=CONCAT(@temp_Sproc_RetrieveCustomerInvoiceDetails, ' and c.paymentNumber=''',pChequeNumber,'''');  \n" +
                "	# END IF;  \n" +
                "  \n" +
                "	IF(pFilterStatus IS NOT NULL AND pFilterStatus!='')THEN  \n" +
                "		SET @temp_Sproc_RetrieveCustomerInvoiceDetails=CONCAT(@temp_Sproc_RetrieveCustomerInvoiceDetails, ' and FIND_IN_SET(cp.subStatus,''', pFilterStatus ,''')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF pDueDate IS NOT NULL THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause,\" and (CASE WHEN c.paymentDueDate IS NULL THEN 1=1 ELSE c.paymentDueDate <= DATE_ADD('\",pDueDate,\"', INTERVAL \",IFNULL(pAdditionalDays,0),\" DAY) END) \");  \n" +
                "	ELSEIF (pTermsAndAboveDays IS NOT NULL OR pTermsAndAboveDays = 0) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause,\" and (CASE WHEN c.paymentDueDate IS NULL THEN 1=1 ELSE c.paymentDueDate <= DATE_ADD(current_date(), INTERVAL \",IFNULL(pTermsAndAboveDays,0),\" DAY) END) \");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF pPoNumber IS NOT NULL AND pPoNumber != '' THEN  \n" +
                "		IF pIsExactSearchPO = 1 THEN  \n" +
                "			SET pWhereClause= CONCAT(pWhereClause, \" AND (c.soNumber = '\", pPoNumber, \"'  \n" +
                "										OR 	c.poNumber = '\", pPoNumber, \"'  \n" +
                "										OR 	c.packingSlipNumber = '\", pPoNumber, \"'  \n" +
                "										OR 	c.invoiceNumber = '\", pPoNumber, \"'  \n" +
                "                                        OR 	c.creditMemoNumber = '\", pPoNumber, \"'  \n" +
                "										OR 	c.refCustInvoiceID = '\", pPoNumber, \"')\"  \n" +
                "						);  \n" +
                "		ELSE  \n" +
                "			SET pWhereClause= CONCAT(pWhereClause, \" AND (c.soNumber like '%\", pPoNumber, \"%'  \n" +
                "										OR 	c.poNumber like '%\", pPoNumber, \"%'  \n" +
                "										OR 	c.packingSlipNumber like '%\", pPoNumber, \"%'  \n" +
                "										OR 	c.invoiceNumber like '%\", pPoNumber, \"%'  \n" +
                "                                        OR 	c.creditMemoNumber like '%\", pPoNumber, \"%'  \n" +
                "										OR 	c.refCustInvoiceID like '%\", pPoNumber, \"%')\"  \n" +
                "						);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	# select @temp_Sproc_RetrieveCustomerInvoiceDetails, pWhereClause;  \n" +
                "	IF pFromDate IS NOT NULL THEN  \n" +
                "		IF pTransType = 'I' THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause,\" and c.invoiceDate >= '\",pFromDate ,\"'\");  \n" +
                "		ELSE  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause,\" and c.creditMemoDate >= '\",pFromDate ,\"'\");  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF pToDate IS NOT NULL THEN  \n" +
                "		IF pTransType = 'I' THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause,\" and c.invoiceDate <= '\",pToDate ,\"'\");  \n" +
                "		ELSE  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause,\" and c.creditMemoDate <= '\",pToDate ,\"'\");  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF pPaymentStatusFilter IS NOT NULL THEN  \n" +
                "		SET pWhereClause =CONCAT(pWhereClause , ' and FIND_IN_SET(c.paymentStatusCode,''', pPaymentStatusFilter ,''')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	IF pCreditAppliedStatusFilter IS NOT NULL THEN  \n" +
                "		SET pWhereClause =CONCAT(pWhereClause , ' and FIND_IN_SET(c.paymentStatus,''', pCreditAppliedStatusFilter ,''')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF pCreditMemoRefundStatusFilter IS NOT NULL THEN  \n" +
                "		SET pWhereClause =CONCAT(pWhereClause , ' and FIND_IN_SET(c.refundStatus,''', pCreditMemoRefundStatusFilter ,''')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	-- filter zero amount invoice  \n" +
                "	IF pZeroAmountFilter IS NOT NULL AND pZeroAmountFilter = 1 THEN  \n" +
                "		SET pWhereClause =CONCAT(pWhereClause , ' and c.totalAmount = 0');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF pMarkedForRefund = 1 THEN  \n" +
                "		SET pWhereClause =CONCAT(pWhereClause , ' and c.isMarkForRefund = 1');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "	 /* to get total count of rows */  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_RetrieveCustomerInvoiceDetails,\" ) c where 1=1 and \", pWhereClause);  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"select c.*, case when c.paymentDueDate <= current_date() then 1 else 0 end isPaymentDueDatePassed,  \n" +
                "		 round((c.totalAmount),2) totalAmount,  \n" +
                "    				round((c.totalAmount - c.receivedAmount),2) paymentAmount,  \n" +
                "    			(CASE WHEN c.transType = 'C' THEN ROUND((c.totalAmount + IFNULL(c.receivedAmount,0) + IFNULL(c.totRefundIssuedAgainstCreditMemo,0) ),2)  \n" +
                "				ELSE ROUND((c.totalAmount - IFNULL(c.receivedAmount,0)),2) END) AS pendingAmount ,  \n" +
                "                    (case when packingSlipStatusID = 5 and (c.subStatus = 4 or c.subStatus = 5) then concat(packingSlipStatus,' - ',c.statusConvertedValue)  \n" +
                "						else '' end) materialStatus from ( \",  \n" +
                "			@temp_Sproc_RetrieveCustomerInvoiceDetails,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "  \n" +
                "	--  select @SQLStatement2	;  \n" +
                "  \n" +
                "	PREPARE query1 FROM @SQLStatement2;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 24-02-2022 *********************************** */
                "Drop procedure if exists `Sproc_RetrieveCustomerPackingSlipDeatils`;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveCustomerPackingSlipDeatils`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pfilterStatus VARCHAR(1000),  \n" +
                "	IN pmfgCodelist VARCHAR(16000),  \n" +
                "	IN pmfgPartID  VARCHAR(5000) ,  \n" +
                "	IN ppsSearchType VARCHAR(5),  \n" +
                "	IN padvanceSearchPoSoPsInv VARCHAR(100),  \n" +
                "	IN pstatusIds VARCHAR(50),  \n" +
                "	IN pfromDate DATE,  \n" +
                "	IN ptoDate DATE  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;  \n" +
                "	DECLARE vTimeZone VARCHAR(50);  \n" +
                "	DECLARE vDateTimeDisplayFormat VARCHAR(100);  \n" +
                "    DECLARE vMfgCodeFormat INT;  \n" +
                "	DECLARE v_empFormat INT;  \n" +
                "  \n" +
                "	SELECT fun_getDateTimeFormat() INTO vDateTimeDisplayFormat;  \n" +
                "	SELECT fun_getTimeZone() INTO vTimeZone;  \n" +
                "    SELECT fun_getMFGCodeNameFormat() INTO vMfgCodeFormat;  \n" +
                "	SELECT fun_getEmployeeDisplayFormat() INTO v_empFormat;  \n" +
                "  \n" +
                "	SET @temp_Sproc_RetrieveCustomerPackingSlipDetails = CONCAT(\"  \n" +
                "		SELECT cd.id,  \n" +
                "				cd.packingSlipNumber,  \n" +
                "		       cd.packingslipDate,  \n" +
                "		       cd.poNumber,  \n" +
                "		       cd.soNumber,  \n" +
                "		       cd.soDate,  \n" +
                "		       cd.poDate,  \n" +
                "               cd.poRevision,  \n" +
                "		       cd.customerID,  \n" +
                "			fun_GetFormattedMfgCode(mfgmst.mfgcode,mfgmst.mfgname,\", vMfgCodeFormat,\") customerName,  \n" +
                "			cd.systemID,  \n" +
                "			fun_getFOBById(cd.freeOnBoardId) freeOnBoard,  \n" +
                "			cd.packingslipcomment,  \n" +
                "			cd.refCustInvoiceID,  \n" +
                "			cd.headerComment,  \n" +
                "			fun_getGenericCategoryCodeNameByID(cd.shippingmethodid)  shippingMethod,  \n" +
                "			cd.subStatus,  \n" +
                "			cd.sorevision,  \n" +
                "            cd.termsID,  \n" +
                "            cd.shippingmethodid,  \n" +
                "            invoice.invoiceNumber,  \n" +
                "            invoice.id as invoiceID,  \n" +
                "            invoice.subStatus as invoiceSubstatus,  \n" +
                "			mfgmst.mfgCode custCode,  \n" +
                "                ifnull(invoice.paymentStatus,'') paymentStatus,  \n" +
                "				case when cd.transType = 'P' then fun_getPaymentStatusByCustPackingSlipSubStatus(invoice.subStatus,cd.transType,invoice.paymentStatus,'VAL') end paymentStatusValue,  \n" +
                "                case when cd.transType = 'P' then fun_getPaymentStatusByCustPackingSlipSubStatus(invoice.subStatus,cd.transType,invoice.paymentStatus,'CODE') end paymentStatusCode,  \n" +
                "				fun_getCustomerInvoiceSubStatusName(cd.subStatus,'P') statusConvertedValue,  \n" +
                "            cd.refSalesOrderID,  \n" +
                "            case when sm.isBlanketPO=1 then 'Yes' else 'No' end blanketPOText,  \n" +
                "            sm.isBlanketPO,  \n" +
                "cd.id AS customerslipId,  \n" +
                "case when cd.packingSlipType=1 then 'MISC' else 'PO/SO' end as packingTypeText,cd.packingSlipType,  \n" +
                "fun_getCustomerInvoiceSubStatusName(invoice.subStatus,'I') as packingSlipStatusValue,  \n" +
                "  fun_getAddressbyID(cd.intermediateShipmentId) markFor,  \n" +
                "  fun_getAddressbyID(cd.shipToId) shipTo,  \n" +
                "  fun_getAddressbyID(cd.billToId) billTo,  \n" +
                "  fun_getFormattedContactPerson(billCP.firstName,billCP.middleName,billCP.lastName,billCP.division,billCP.email, fun_getPrimaryPhoneFromJsonList(billCP.phoneNumber), fun_getPrimaryPhExtensionFromJsonList(billCP.phoneNumber)) billToContactPerson,  \n" +
                "  fun_getFormattedContactPerson(shipCP.firstName,shipCP.middleName,shipCP.lastName,shipCP.division,shipCP.email, fun_getPrimaryPhoneFromJsonList(shipCP.phoneNumber),fun_getPrimaryPhExtensionFromJsonList(shipCP.phoneNumber)) shipToToContactPerson,  \n" +
                "  fun_getFormattedContactPerson(interCP.firstName,interCP.middleName,interCP.lastName,interCP.division,interCP.email, fun_getPrimaryPhoneFromJsonList(interCP.phoneNumber), fun_getPrimaryPhExtensionFromJsonList(interCP.phoneNumber)) markToToContactPerson,  \n" +
                "   fun_GetEmployeeFormattedName(emp.firstName,emp.middleName,emp.lastName,emp.initialName,\",v_empFormat,\") salesCommissionToName,  \n" +
                "   cd.salesCommissionTo,  \n" +
                "     (CASE WHEN cd.termsID IS NULL THEN '' ELSE fun_getGenericCategoryCodeNameByID(cd.termsID) END) AS termsDisplayText ,  \n" +
                "         fun_getUserNameByID(cd.updatedBy) updatedby,  \n" +
                "         fun_getUserNameByID(cd.createdBy) createdby,  \n" +
                "         fun_getRoleByID(cd.createByRoleId) createdbyRole,  \n" +
                "         fun_getRoleByID(cd.updateByRoleId) updatedbyRole,  \n" +
                "         fun_ApplyCommonDateTimeFormatByParaValue(cd.createdAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') AS createdAt,  \n" +
                "         fun_ApplyCommonDateTimeFormatByParaValue(cd.UpdatedAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') AS updatedAt,  \n" +
                "		 cd.isLocked,  \n" +
                "         fun_getIntToText(cd.isLocked) isLockedConvertedValue,  \n" +
                "         fun_getUserNameByID(cd.lockedBy) lockedBy,  \n" +
                "         fun_getRoleByID(cd.lockedByRole) lockedByRole,  \n" +
                "         fun_ApplyCommonDateTimeFormatByParaValue(cd.lockedAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') AS lockedAt,  \n" +
                "         cpTrack.cpTrackNumber,  \n" +
                "         ifnull(cpTrack.cpTrackNumberCount,0) cpTrackNumberCount,  \n" +
                "         (case when cd.subStatus = 5 and (invoice.subStatus = 4 or invoice.subStatus = 5) then concat(fun_getCustomerInvoiceSubStatusName(cd.subStatus,'P'),' - ',fun_getCustomerInvoiceSubStatusName(invoice.subStatus,'I'))  \n" +
                "						else '' end) materialStatus,  \n" +
                "                        cd.revision ,  \n" +
                "           ifnull(packingdtl.packingSlipCnt,0)  packingSlipCnt,  \n" +
                "           sm.rmaNumber,sm.isRmaPO,  \n" +
                "           (CASE when sm.isRmaPO = 1 then 'YES' when sm.isRmaPO = 0 then 'NO' else 'NA' end) isRmaPOText,  \n" +
                "           (CASE when sm.isRmaPO = 1 then 'Yes' when sm.isRmaPO = 0 then 'No' else 'N/A' end) isRmaPOTextDisp,  \n" +
                "           fun_getGenericCategoryCodeNameByID(cd.carrierID)  carrierName,  \n" +
                "           cd.carrierID , cd.carrierAccountNumber  \n" +
                "		FROM customer_packingslip cd  \n" +
                "        LEFT JOIN mfgcodemst mfgmst ON mfgmst.id = cd.customerId and mfgmst.isDeleted = 0  \n" +
                "		LEFT JOIN salesordermst sm on sm.id=cd.refSalesOrderID and sm.isdeleted=0  \n" +
                "		LEFT JOIN employees emp on emp.id=cd.salesCommissionTo and emp.isdeleted=0  \n" +
                "		LEFT JOIN customer_packingslip invoice on invoice.id=cd.refCustInvoiceID and invoice.isDeleted = 0  \n" +
                "		LEFT JOIN (  \n" +
                "		SELECT COUNT(cpTrack.trackNumber) cpTrackNumberCount,GROUP_CONCAT(cpTrack.trackNumber SEPARATOR ', ') cpTrackNumber,cpTrack.refCustPackingSlipID FROM customer_packing_slip_track_number cpTrack WHERE  cpTrack.isDeleted = 0 GROUP BY cpTrack.refCustPackingSlipID  \n" +
                "		) cpTrack on cpTrack.refCustPackingSlipID=cd.id  \n" +
                "		left join ( select count(1) packingSlipCnt,packingdtl.refCustPackingSlipID from customer_packingslip_det packingdtl where packingdtl.isDeleted = 0 GRoup by packingdtl.refCustPackingSlipID  \n" +
                "		) packingdtl on packingdtl.refCustPackingSlipID=cd.id  \n" +
                "        LEFT JOIN contactperson billCP ON billCP.personId = cd.billingContactPersonID and billCP.isDeleted = 0  \n" +
                "        LEFT JOIN contactperson shipCP ON shipCP.personId = cd.shippingContactPersonID and shipCP.isDeleted = 0  \n" +
                "        LEFT JOIN contactperson interCP ON interCP.personId = cd.intermediateContactPersonID and interCP.isDeleted = 0  \n" +
                "		WHERE  cd.isDeleted=0 and cd.transType='P'  \n" +
                "	\");  \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "        SET pOrderBy = \"ORDER BY systemID DESC\";  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = '1=1' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  IF(pfilterStatus IS NOT NULL AND pfilterStatus!='')THEN  \n" +
                "	 IF (pfilterStatus = 0) THEN  \n" +
                "		SET pWhereClause=CONCAT(pWhereClause, ' and c.invoiceSubStatus is null');  \n" +
                "    ELSE  \n" +
                "		SET pWhereClause=CONCAT(pWhereClause, ' and c.invoiceSubStatus in (', pfilterStatus ,')');  \n" +
                "    END IF;  \n" +
                "  END IF;  \n" +
                "  IF(pstatusIds IS NOT NULL AND pstatusIds!='')THEN  \n" +
                "	SET @temp_Sproc_RetrieveCustomerPackingSlipDetails=CONCAT(@temp_Sproc_RetrieveCustomerPackingSlipDetails, ' and cd.subStatus in (',pstatusIds,')');  \n" +
                "  END IF;  \n" +
                "  IF(pmfgCodelist IS NOT NULL AND pmfgCodelist!='')THEN  \n" +
                "	SET @temp_Sproc_RetrieveCustomerPackingSlipDetails=CONCAT(@temp_Sproc_RetrieveCustomerPackingSlipDetails, ' and cd.customerID in (',pmfgCodelist,')');  \n" +
                "  END IF;  \n" +
                "  \n" +
                "   IF pmfgPartID IS NOT NULL THEN  \n" +
                "		SET @temp_Sproc_RetrieveCustomerPackingSlipDetails= CONCAT(@temp_Sproc_RetrieveCustomerPackingSlipDetails, ' AND cd.id in (select cpd.refCustPackingSlipID from customer_packingslip_det cpd where cpd.isDeleted = 0 and cpd.partId in (', pmfgPartID , ')) ');  \n" +
                "    END IF;  \n" +
                "  \n" +
                "  IF(padvanceSearchPoSoPsInv IS NOT NULL AND padvanceSearchPoSoPsInv!='')THEN  \n" +
                "    IF(ppsSearchType='E')THEN  \n" +
                "		SET @temp_Sproc_RetrieveCustomerPackingSlipDetails=CONCAT(@temp_Sproc_RetrieveCustomerPackingSlipDetails, ' and (cd.poNumber=''',padvanceSearchPoSoPsInv,''' or cd.soNumber=''',padvanceSearchPoSoPsInv,''' or cd.packingSlipNumber=''',  \n" +
                "		padvanceSearchPoSoPsInv,''' or invoice.invoiceNumber=''',padvanceSearchPoSoPsInv,''' or invoice.invoiceNumber=''',padvanceSearchPoSoPsInv,'''  or cd.rmaNumber=''',padvanceSearchPoSoPsInv,''')');  \n" +
                "   ELSE  \n" +
                "        SET @temp_Sproc_RetrieveCustomerPackingSlipDetails=CONCAT(@temp_Sproc_RetrieveCustomerPackingSlipDetails, ' and (cd.poNumber like''%',padvanceSearchPoSoPsInv,'%'' or cd.soNumber like ''%',  \n" +
                "		padvanceSearchPoSoPsInv,'%'' or cd.packingSlipNumber like ''%',padvanceSearchPoSoPsInv,'%'' or invoice.invoiceNumber like ''%',padvanceSearchPoSoPsInv,'%''  or cd.rmaNumber like ''%',padvanceSearchPoSoPsInv,'%'')');  \n" +
                "  END IF;  \n" +
                "  END IF;  \n" +
                "  IF(pfromDate IS NOT NULL AND ptoDate IS NOT NULL)THEN  \n" +
                "  SET @temp_Sproc_RetrieveCustomerPackingSlipDetails=CONCAT(@temp_Sproc_RetrieveCustomerPackingSlipDetails, ' and (cd.packingslipdate>=''',pfromDate,''' and cd.packingslipdate<=''',ptoDate,''')');  \n" +
                "  ELSEIF(pfromDate IS NOT NULL)THEN  \n" +
                "       SET @temp_Sproc_RetrieveCustomerPackingSlipDetails=CONCAT(@temp_Sproc_RetrieveCustomerPackingSlipDetails, ' and (cd.packingslipdate>=''',pfromDate,''')');  \n" +
                "       ELSEIF(ptoDate IS NOT NULL)THEN  \n" +
                "       SET @temp_Sproc_RetrieveCustomerPackingSlipDetails=CONCAT(@temp_Sproc_RetrieveCustomerPackingSlipDetails, ' and (cd.packingslipdate<=''',ptoDate,''')');  \n" +
                "  END IF;  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	 /* to get total count of rows */  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_RetrieveCustomerPackingSlipDetails,\" ) c where 1=1 and \", pWhereClause);  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"select * from ( \", @temp_Sproc_RetrieveCustomerPackingSlipDetails,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "	PREPARE query1 FROM @SQLStatement2;  \n" +
                "	-- select @SQLStatement2;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** New Script -> 24-02-2022 *********************************** */
                "Drop procedure if exists `Sproc_RetrieveSupplierQuote`;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveSupplierQuote`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "    IN pIsSummary TINYINT,  \n" +
                "	IN pSupplierIds VARCHAR(16000),  \n" +
                "	IN pQuoteStatus VARCHAR(1000),  \n" +
                "	IN pSearchType VARCHAR(5),  \n" +
                "	IN pAdvanceSearchSQ VARCHAR(100),  \n" +
                "	IN pfromDate DATE,  \n" +
                "	IN ptoDate DATE,  \n" +
                "    IN pPartIds VARCHAR(16000)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;  \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "	DECLARE v_MfgNameFormat VARCHAR(100);  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
                "    SELECT fun_getMFGCodeNameFormat() INTO v_MfgNameFormat;  \n" +
                "  \n" +
                "	IF (pIsSummary = FALSE) THEN  \n" +
                "		SET @temp_Sproc_RetrieveSupplierQuote = CONCAT(\"  \n" +
                "				SELECT  \n" +
                "					s.id,  \n" +
                "					spd.id AS supplierQuotePartDetID,  \n" +
                "					fun_GetFormattedMfgCode(cm.mfgCode, cm.mfgName, \",v_MfgNameFormat,\") mfgName,  \n" +
                "					cm.mfgCode,  \n" +
                "					s.supplierID,  \n" +
                "					spd.partID,  \n" +
                "                    c.custAssyPN,  \n" +
                "					c.mfgPN AS mfgPN,  \n" +
                "                    c.mfgPNDescription,  \n" +
                "					c.mfgcodeID,  \n" +
                "					sc.mfgPN AS supplierPN,  \n" +
                "					spd.supplierPartID,  \n" +
                "					m.mfgName AS supplier,  \n" +
                "					s.quoteNumber,  \n" +
                "					s.quoteDate,  \n" +
                "					s.reference,  \n" +
                "					s.quoteStatus,  \n" +
                "					IF(s.quoteStatus = 'D', 'Draft', 'Published') AS statusConvertedValue,  \n" +
                "					IF(spd.isActive = 0, 'Inactive', 'Active') AS isActiveConvertedValueDetail,  \n" +
                "					spd.isActive,  \n" +
                "					spd.scanLabel,  \n" +
                "                    IF(s.quoteStatus = 'P',true, false) AS isDisabledDelete,  \n" +
                "                    IF(spd.id IS NULL, true, false) AS isDisabledPartPricing,  \n" +
                "                    IF(spd.id IS NULL, true, false) AS isDisabledCopySupplierQuote,  \n" +
                "                    IF(spd.id IS NULL, true, false) AS isDisabledPartPricingHistory,  \n" +
                "                    IF(spd.id IS NULL, false, true) AS isRequirementReference,  \n" +
                "					c.isCustom,  \n" +
                "					sc.isCustom AS isCustomSupplier,  \n" +
                "					rhc.rohsIcon,  \n" +
                "					rhc.name rohsName,  \n" +
                "					rhsc.rohsIcon supplierRohsIcon,  \n" +
                "					rhsc.name supplierRohsName,  \n" +
                "					fun_getPartAttibutesBySupplierQuoteDetailID(spd.id) AS attributesList,  \n" +
                "					fun_getPartPricingCountBySupplierQuoteDetailID(spd.id) AS pricingCount,  \n" +
                "					fun_getUserNameByID(spd.createdBy) createdby,  \n" +
                "					fun_getUserNameByID(spd.updatedBy) updatedby,  \n" +
                "					fun_ApplyCommonDateTimeFormatByParaValue(spd.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAt,  \n" +
                "					fun_ApplyCommonDateTimeFormatByParaValue(spd.UpdatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt,  \n" +
                "					fun_getRoleByID(spd.updateByRoleId) updatedByRole,  \n" +
                "					fun_getRoleByID(spd.createByRoleId) createdByRole  \n" +
                "				FROM  supplier_quote_parts_det spd  \n" +
                "				LEFT JOIN supplier_quote_mst s ON spd.supplierQuoteMstID = s.id AND s.isDeleted = 0  \n" +
                "				LEFT JOIN component c ON spd.partID = c.id AND c.isDeleted = 0  \n" +
                "				LEFT JOIN rfq_rohsmst rhc ON c.RoHSStatusID = rhc.id AND rhc.isDeleted = 0  \n" +
                "				LEFT JOIN component sc ON spd.supplierPartID = sc.id AND sc.isDeleted = 0 AND sc.refSupplierMfgpnComponentID IS NOT NULL  \n" +
                "				LEFT JOIN rfq_rohsmst rhsc ON sc.RoHSStatusID = rhsc.id AND rhsc.isDeleted = 0  \n" +
                "				LEFT JOIN mfgcodemst m ON s.supplierId = m.id AND m.isDeleted = 0  \n" +
                "				LEFT JOIN mfgcodemst cm ON cm.id = c.mfgcodeID  AND cm.isDeleted = 0  \n" +
                "				WHERE spd.isDeleted = 0 \");  \n" +
                "	 ELSE  \n" +
                "		SET @temp_Sproc_RetrieveSupplierQuote = CONCAT(\"  \n" +
                "			SELECT 	s.id,  \n" +
                "					s.supplierID,  \n" +
                "					m.mfgName AS supplier,  \n" +
                "					s.quoteNumber,  \n" +
                "					s.quoteDate,  \n" +
                "					s.reference,  \n" +
                "					s.quoteStatus,  \n" +
                "					IF(s.quoteStatus = 'D', 'Draft', 'Published') AS statusConvertedValue,  \n" +
                "                    IF(s.quoteStatus = 'P', true, false) AS isDisabledDelete,  \n" +
                "                    fun_getAddressbyID(s.billingAddressID) billTo,  \n" +
                "                    fun_getAddressbyID(s.shippingAddressID) shipTo,  \n" +
                "                    fun_getFormattedContactPerson(cntb.firstName,cntb.middleName,cntb.lastName,cntb.division,cntb.email, fun_getPrimaryPhoneFromJsonList(cntb.phoneNumber), fun_getPrimaryPhExtensionFromJsonList(cntb.phoneNumber)) billToContactName,  \n" +
                "                    fun_getFormattedContactPerson(cnts.firstName,cnts.middleName,cnts.lastName,cnts.division,cnts.email, fun_getPrimaryPhoneFromJsonList(cnts.phoneNumber),fun_getPrimaryPhExtensionFromJsonList(cnts.phoneNumber)) shipToContactName,  \n" +
                "                    (SELECT COUNT(0) FROM supplier_quote_parts_det WHERE isDeleted = 0 AND supplierQuoteMstID = s.id) AS noOfSupplierPartLine,  \n" +
                "					fun_getUserNameByID(s.createdBy) createdby,  \n" +
                "					fun_getUserNameByID(s.updatedBy) updatedby,  \n" +
                "					fun_ApplyCommonDateTimeFormatByParaValue(s.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAt,  \n" +
                "					fun_ApplyCommonDateTimeFormatByParaValue(s.UpdatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt,  \n" +
                "					fun_getRoleByID(s.updateByRoleId) updatedByRole,  \n" +
                "					fun_getRoleByID(s.createByRoleId) createdByRole  \n" +
                "			FROM   supplier_quote_mst s  \n" +
                "			LEFT JOIN mfgcodemst m ON s.supplierId = m.id AND m.isDeleted = 0  \n" +
                "			LEFT JOIN contactperson cntb ON s.billingContactPersonID = cntb.personId AND cntb.isDeleted = 0  \n" +
                "			LEFT JOIN contactperson cnts ON s.shippingContactPersonID = cnts.personId AND cnts.isDeleted = 0  \n" +
                "			WHERE  s.isDeleted = 0  AND  \n" +
                "            (CASE WHEN ('\",pPartIds,\"' != '') THEN  \n" +
                "				s.id IN  (SELECT spd.supplierQuoteMstID FROM  \n" +
                "				supplier_quote_parts_det spd  \n" +
                "                LEFT JOIN component c ON spd.partID = c.id AND c.isDeleted = 0  \n" +
                "				LEFT JOIN component sc ON spd.supplierPartID = sc.id AND sc.isDeleted = 0 AND sc.refSupplierMfgpnComponentID IS NOT NULL  \n" +
                "                WHERE spd.isDeleted = 0 AND (FIND_IN_SET(spd.supplierPartID, ('\",pPartIds,\"')) OR FIND_IN_SET(spd.partID, ('\",pPartIds,\"'))))  \n" +
                "				ELSE 1 = 1 END)  \n" +
                "			\");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY id desc\") ;  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = '1=1' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF(pSupplierIds IS NOT NULL OR pSupplierIds != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND supplierID in (\"',pSupplierIds,'\")');  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF(pQuoteStatus IS NOT NULL OR pQuoteStatus != '') THEn  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND quoteStatus in (\"',pQuoteStatus,'\")');  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF(pAdvanceSearchSQ IS NOT NULL OR pAdvanceSearchSQ != '') THEN  \n" +
                "		IF(pSearchType = 'E') THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause, ' AND quoteNumber = \"', pAdvanceSearchSQ , '\" ');  \n" +
                "		ELSE  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause, ' AND quoteNumber LIKE \"%', pAdvanceSearchSQ ,'%\" ');  \n" +
                "		END IF;  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF(pfromDate IS NOT NULL AND ptoDate IS NOT NULL)THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND (quoteDate >= ''',pfromDate,''' and quoteDate <= ''',ptoDate,''')');  \n" +
                "	ELSEIF(pfromDate IS NOT NULL)THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND (quoteDate >= ''',pfromDate,''')');  \n" +
                "	ELSEIF(ptoDate IS NOT NULL)THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND (quoteDate <= ''',ptoDate,''')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF(pPartIds != '' AND (pIsSummary = FALSE)) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND ( supplierPartID in (\"',pPartIds,'\") OR partID in (\"',pPartIds,'\") )');  \n" +
                "    END IF;  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/* to get total count of rows */  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_RetrieveSupplierQuote,\" ) c where 1=1 and \", pWhereClause);  \n" +
                "	PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"select c.*  from ( \", @temp_Sproc_RetrieveSupplierQuote,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "   PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** New Script -> 24-02-2022 *********************************** */
                "Drop procedure if exists `Sproc_GetCheckPrintAndRemittanceCustRefundReport`;  \n" +
                "CREATE PROCEDURE `Sproc_GetCheckPrintAndRemittanceCustRefundReport`(  \n" +
                "	IN pPaymentID INT  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "		/* Refund master details */  \n" +
                "		SELECT pip.id, pip.accountReference,  \n" +
                "			pip.paymentDate, pip.paymentNumber,  \n" +
                "			pip.paymentAmount,  \n" +
                "			fun_NumberToWords(pip.paymentAmount) AS paymentAmountInWords,  \n" +
                "			pip.payToName ,   -- pip.payToAddress,  \n" +
                "			fun_getAddressbyIDForCheckPrint(pip.payToAddressID, pip.payToContactPersonID) AS payToAddress,  \n" +
                "			 pip.billToName AS customerName,  \n" +
                "			 -- pip.billToAddress AS customerAddress,  \n" +
                "			fun_getAddressbyIDForCheckPrint(pip.billToAddressID, pip.billToContactPersonID) AS customerAddress,  \n" +
                "			-- ca.email AS customerEmail, ca.faxNumber AS customerFaxNumber,  \n" +
                "			fun_getPrimaryEmailFromJsonList(cp.email) AS customerEmail ,  \n" +
                "			#cp.faxNumber AS customerFaxNumber ,  \n" +
                "			'' AS customerFaxNumber ,  \n" +
                "			pip.bankAccountNo, pip.refGencTransModeID,  \n" +
                "			g.gencCategoryName AS paymentType ,  \n" +
                "			pip.remark  \n" +
                "		FROM packingslip_invoice_payment pip  \n" +
                "			-- LEFT JOIN customer_addresses ca ON ca.customerId = pip.mfgcodeID AND ca.isDeleted = 0 AND ca.addressType = 'B' AND ca.isDefault = 1  \n" +
                "			LEFT JOIN contactperson cp ON cp.personId = pip.billToContactPersonID AND cp.isDeleted = 0  \n" +
                "			JOIN genericcategory g ON g.categoryType = 'Payable Payment Method' AND g.gencCategoryID = pip.paymentType  \n" +
                "		WHERE pip.id = pPaymentID  \n" +
                "		AND pip.refPaymentMode = 'CR'  \n" +
                "		AND pip.isDeleted = 0  ;  \n" +
                "  \n" +
                "		/* get refunded payment or refunded credit memo details */  \n" +
                "		SELECT  \n" +
                "		       (CASE WHEN(refGencTransModeID = -6) THEN cmRefundDetTemp.creditMemoNumber  \n" +
                "				WHEN(refGencTransModeID = -9) THEN payRefundDetTemp.paymentNumber  \n" +
                "				ELSE NULL END) AS paymentCMNumber ,  \n" +
                "			(CASE WHEN(refGencTransModeID = -6) THEN cmRefundDetTemp.creditMemoDate  \n" +
                "				WHEN(refGencTransModeID = -9) THEN payRefundDetTemp.paymentDate  \n" +
                "				ELSE NULL END) AS paymentCMDate ,  \n" +
                "			(CASE WHEN(refGencTransModeID = -6) THEN cmRefundDetTemp.paymentAmount  \n" +
                "				WHEN(refGencTransModeID = -9) THEN payRefundDetTemp.paymentAmount  \n" +
                "				ELSE NULL END) AS refundedAmountForPaymentCM ,  \n" +
                "			(CASE WHEN(refGencTransModeID = -6) THEN cmRefundDetTemp.comment  \n" +
                "				WHEN(refGencTransModeID = -9) THEN payRefundDetTemp.comment  \n" +
                "				ELSE NULL END) AS commentForPaymentCM  \n" +
                "  \n" +
                "		FROM packingslip_invoice_payment psip  \n" +
                "		     LEFT JOIN (SELECT psipd.refPayementid, psipd.paymentAmount, psipd.comment, psipt.paymentNumber, psipt.paymentDate  \n" +
                "					FROM packingslip_invoice_payment_det psipd  \n" +
                "						JOIN packingslip_invoice_payment psipt ON psipd.refRefundPaymentID = psipt.id AND psipt.isDeleted = 0 AND psipt.isPaymentVoided = 0  \n" +
                "					WHERE psipd.refPayementid = pPaymentID  \n" +
                "					AND psipd.refRefundPaymentID IS NOT NULL  \n" +
                "					AND psipd.isDeleted = 0  AND psipd.isPaymentVoided = 0  \n" +
                "					 ) payRefundDetTemp  \n" +
                "				ON psip.id = payRefundDetTemp.refPayementid  \n" +
                "  \n" +
                "		     LEFT JOIN (SELECT psipd.refPayementid, psipd.paymentAmount ,psipd.comment, cps.creditMemoNumber, cps.creditMemoDate  \n" +
                "					 FROM packingslip_invoice_payment_det psipd  \n" +
                "						JOIN customer_packingslip cps ON psipd.refRefundCustCreditMemoID = cps.id AND cps.isDeleted = 0  \n" +
                "					WHERE psipd.refPayementid = pPaymentID  \n" +
                "					AND psipd.refRefundCustCreditMemoID IS NOT NULL  \n" +
                "					AND psipd.isDeleted = 0  AND psipd.isPaymentVoided = 0  \n" +
                "					) cmRefundDetTemp  \n" +
                "				ON psip.id = cmRefundDetTemp.refPayementid  \n" +
                "  \n" +
                "		WHERE psip.id = pPaymentID  \n" +
                "		AND psip.refPaymentMode = 'CR'  \n" +
                "		AND psip.isDeleted = 0  ;  \n" +
                "  \n" +
                "		/* Default set company (isCompany = 1) address details  */  \n" +
                "		SELECT CONCAT('<b>', IF(ci.legalName = '' OR ci.legalName IS NULL,'' ,CONCAT(ci.legalName, ' d/b/a,<br/>')),IFNULL(ci.name, ''),'</b><br/>',IFNULL(ci.street1, ''),'<br/>',IFNULL(ci.city, ''),', ',IFNULL(ci.state, ''),' ',IFNULL(ci.postalCode, ''),'<br/>',  \n" +
                "			IFNULL(c.countryName,''))AS address,  \n" +
                "			ci.personName AS companyContactName,ci.registeredEmail AS companyEmail,ci.faxNumber,ci.contactNumber AS phoneNo,ci.phoneExt,ci.contactNumber AS contact, ci.name AS  companyName, ci.registeredEmail AS email  \n" +
                "		FROM company_info ci  \n" +
                "		LEFT JOIN countrymst c ON ci.countryID=c.countryID AND c.isDeleted = 0  \n" +
                "		WHERE ci.isDeleted=0;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 24-02-2022 *********************************** */
                "Drop procedure if exists `Sproc_GetCheckPrintAndRemittanceReport`;  \n" +
                "CREATE PROCEDURE `Sproc_GetCheckPrintAndRemittanceReport`(  \n" +
                "	IN pPaymentID int  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "		select pip.id, pip.accountReference, pip.payToName, pip.paymentDate, pip.paymentNumber,  \n" +
                "				pip.paymentAmount,  \n" +
                "                fun_NumberToWords(pip.paymentAmount) paymentAmountInWords,  \n" +
                "                fun_getAddressbyIDForCheckPrint(pip.payToAddressID, pip.payToContactPersonID) payToAddress,  \n" +
                "				/*pip.payToAddress,  */  \n" +
                "				pip.billToName supplierName,  \n" +
                "                fun_getAddressbyIDForCheckPrint(pip.billToAddressID, pip.billToContactPersonID) supplierAddress,  \n" +
                "                /*pip.billToAddress supplierAddress,*/  \n" +
                "                ca.email supplierEmail, '' supplierFaxNumber,  \n" +
                "                pip.bankAccountNo,  \n" +
                "                g.gencCategoryName paymentType  \n" +
                "		  from packingslip_invoice_payment pip  \n" +
                "          left join customer_addresses ca ON ca.customerId = pip.mfgcodeID and ca.isDeleted = 0 and ca.addressType = 'B' and ca.isDefault = 1  \n" +
                "          join genericcategory g ON g.categoryType = 'Payable Payment Method' and g.gencCategoryID = pip.paymentType  \n" +
                "		 where pip.isDeleted = 0  \n" +
                "			and pip.refPaymentMode = 'P'  \n" +
                "		   and pip.id = pPaymentID;  \n" +
                "  \n" +
                "		  SELECT pd.refPayementid id,  \n" +
                "				(CASE 	WHEN p.`receiptType` = 'I' THEN  \n" +
                "							p.invoiceNumber  \n" +
                "						WHEN p.`receiptType` = 'C' THEN  \n" +
                "							p.creditMemoNumber  \n" +
                "						ELSE  \n" +
                "							p.debitMemoNumber  \n" +
                "					END) invoiceNumber,  \n" +
                "  \n" +
                "				(CASE 	WHEN p.`receiptType` = 'I' THEN  \n" +
                "							p.invoiceNumber  \n" +
                "				else  \n" +
                "					(SELECT 	ps.invoiceNumber  \n" +
                "					FROM 	packing_slip_material_receive ps  \n" +
                "					WHERE 	ps.id = p.refParentCreditDebitInvoiceno  \n" +
                "							AND ps.isDeleted = 0  )  \n" +
                "				end  \n" +
                "				) refInvoiceNumber,  \n" +
                "  \n" +
                "				(CASE WHEN p.`receiptType` = 'I' THEN  \n" +
                "							p.invoiceDate  \n" +
                "						WHEN p.`receiptType` = 'C' THEN  \n" +
                "							p.creditMemoDate  \n" +
                "						ELSE  \n" +
                "							p.debitMemoDate  \n" +
                "					END) invoiceDate,  \n" +
                "  \n" +
                "				p.remark `description`,  \n" +
                "				/*(select sum(extendedPrice) from  packing_slip_material_receive_det pd where p.id = pd.refPackingSlipMaterialRecID and pd.isDeleted = 0) extendedPrice,*/  \n" +
                "                pd.paymentAmount extendedPrice,  \n" +
                "				0 discount,  \n" +
                "				(CASE 	WHEN p.`receiptType` = 'I' THEN  \n" +
                "							'Invoice'  \n" +
                "						WHEN p.`receiptType` = 'C' THEN  \n" +
                "							'Credit Memo'  \n" +
                "						ELSE  \n" +
                "							'Debit Memo'  \n" +
                "					END) receiptMemoType,  \n" +
                "                    p.poNumber  \n" +
                "			FROM packing_slip_material_receive p  \n" +
                "            join packingslip_invoice_payment_det pd ON pd.refPackingslipInvoiceID = p.id  \n" +
                "			WHERE /*p.isDeleted =0  \n" +
                "			and*/ p.receiptType in ('I','C','D')  \n" +
                "            and exists (select 1 from packingslip_invoice_payment pip where pip.refPaymentMode = 'P' and pip.id = pd.refPayementid)  \n" +
                "			/*and p.`status` = 'P'*/  \n" +
                "			and pd.refPayementid = pPaymentID  \n" +
                "            order by invoiceDate, invoiceNumber;  \n" +
                "  \n" +
                "        	SELECT CONCAT('<b>',IF(ci.legalName = '' OR ci.legalName is null,'' ,CONCAT(ci.legalName, ' d/b/a,<br/>')),IFNULL(ci.name, ''),'</b><br/>',IFNULL(ci.street1, ''),'<br/>',IFNULL(ci.city, ''),', ',IFNULL(ci.state, ''),' ',IFNULL(ci.postalCode, ''),'<br/>',  \n" +
                "				IFNULL(c.countryName,''))AS address,  \n" +
                "				ci.personName as companyContactName,ci.registeredEmail as companyEmail,ci.faxNumber,ci.contactNumber as phoneNo,ci.phoneExt,ci.contactNumber AS contact, ci.name AS  companyName,ci.registeredEmail as email  \n" +
                "			FROM company_info ci  \n" +
                "			LEFT JOIN countrymst c ON ci.countryID=c.countryID and c.isDeleted = 0  \n" +
                "			WHERE ci.isDeleted=0;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 24-02-2022 *********************************** */
                "Drop procedure if exists `Sproc_GetCustomerPackingslipHeaderDetails`;  \n" +
                "CREATE PROCEDURE `Sproc_GetCustomerPackingslipHeaderDetails`(  \n" +
                "	IN cpid INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "  \n" +
                "	SELECT  \n" +
                "    cp.id,  \n" +
                "    cp.status,  \n" +
                "    cp.packingSlipType,  \n" +
                "    cp.packingSlipNumber AS PackingSlip,  \n" +
                "    cp.packingSlipDate AS PackingSlipDate,  \n" +
                "    cp.poDate AS PODate,  \n" +
                "    cp.soNumber AS SalesOrderNumber,  \n" +
                "    cp.poNumber AS PONumber,  \n" +
                "    cp.packingSlipComment,  \n" +
                "    IFNULL(gc.gencCategoryName,'-') AS ShippingMethod,  \n" +
                "    IFNULL(gcc.gencCategoryName,'-') AS PaymentMethod,  \n" +
                "    IFNULL(FUN_GETFOBBYID(cp.freeOnBoardId), '-') AS FOB,  \n" +
                "    cp.soDate AS SODate,  \n" +
                "    cp.sorevision AS SORevision,  \n" +
                "    fun_getAddressbyIDAndContactPersonID(cp.billToId,cp.billingContactPersonID) SoldToAddress,  \n" +
                "    fun_getAddressbyIDAndContactPersonID(cp.shipToId,cp.shippingContactPersonID) ShippingAddress,  \n" +
                "	fun_getAddressbyIDAndContactPersonID(cp.intermediateShipmentId,cp.intermediateContactPersonID) IntermediateAddress,  \n" +
                "    IFNULL(FUN_GETEMPLOYEENAMEBYEMPID(cp.salesCommissionTo),  \n" +
                "            '-') AS SalesOrderPersonName,  \n" +
                "	fun_getUserNameByID(cp.updatedBy) AS  preparedBy, us.emailAddress, emp.phExtension  \n" +
                "FROM  \n" +
                "    customer_packingslip cp  \n" +
                "        LEFT JOIN  \n" +
                "    salesordermst sm ON sm.id = cp.refSalesOrderID  \n" +
                "        AND sm.isDeleted = 0  \n" +
                "        LEFT JOIN  \n" +
                "    genericcategory gc ON gc.gencCategoryID = cp.shippingMethodId  \n" +
                "        AND gc.isDeleted = 0  \n" +
                "        AND gc.categoryType = 'Shipping Methods'  \n" +
                "        LEFT JOIN  \n" +
                "    genericcategory gcc ON gcc.gencCategoryID = cp.termsID  \n" +
                "        AND gcc.isDeleted = 0  \n" +
                "        AND gcc.categoryType = 'Payment Terms'  \n" +
                "	LEFT JOIN users us ON us.id = cp.updatedBy  \n" +
                "	LEFT JOIN employees emp ON emp.id = us.employeeID  \n" +
                "WHERE  \n" +
                "    cp.isDeleted = 0 AND cp.id = cpid  \n" +
                "LIMIT 1;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** New Script -> 24-02-2022 *********************************** */
                "Drop procedure if exists `Sproc_getCustomerSupplierGeographicalLocationReportDetails`;  \n" +
                "CREATE PROCEDURE `Sproc_getCustomerSupplierGeographicalLocationReportDetails`(  \n" +
                "	IN pEntityType varchar(5),  \n" +
                "	IN pAddressType varchar(5),  \n" +
                "	IN pisDefaultAddress tinyint  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE vWhereClause VARCHAR(16383);  \n" +
                "    SET vWhereClause = ' 1=1 ';  \n" +
                "	IF(pEntityType IS NOT NULL) THEN  \n" +
                "		IF pEntityType = 'CUST' THEN  \n" +
                "			SET vWhereClause = CONCAT(vWhereClause, \" AND cu.mfgType = 'MFG' AND cu.isCustOrDisty = 1 \");  \n" +
                "		ELSEIF pEntityType = 'DIST' THEN  \n" +
                "			SET vWhereClause = CONCAT(vWhereClause, \" AND cu.mfgType = 'DIST' \");  \n" +
                "		ELSE  \n" +
                "			SET vWhereClause = CONCAT(vWhereClause, \" AND 1=1 \");  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pAddressType IS NOT NULL) THEN  \n" +
                "		IF pAddressType = 'B' THEN  \n" +
                "			SET vWhereClause = CONCAT(vWhereClause, \" AND cua.addressType = 'B' \");  \n" +
                "		ELSEIF pAddressType = 'S' THEN  \n" +
                "			SET vWhereClause = CONCAT(vWhereClause, \" AND cua.addressType = 'S' \");  \n" +
                "		ELSEIF pAddressType = 'I' THEN  \n" +
                "			SET vWhereClause = CONCAT(vWhereClause, \" AND cua.addressType = 'I' \");  \n" +
                "		ELSEIF pAddressType = 'P' THEN  \n" +
                "			SET vWhereClause = CONCAT(vWhereClause, \" AND cua.addressType = 'P' \");  \n" +
                "		ELSEIF pAddressType = 'R' THEN  \n" +
                "			SET vWhereClause = CONCAT(vWhereClause, \" AND cua.addressType = 'R' \");  \n" +
                "		ELSE  \n" +
                "			SET vWhereClause = CONCAT(vWhereClause, \" AND 1=1 \");  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF pisDefaultAddress = 1 THEN  \n" +
                "		SET vWhereClause = CONCAT(vWhereClause, ' AND cua.isDefault = 1 ');  \n" +
                "    ELSE  \n" +
                "		SET vWhereClause = CONCAT(vWhereClause, ' AND 1=1 ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	SET @tempQuery = CONCAT(\"SELECT DISTINCT CONCAT(IF(cu.legalName = '' OR cu.legalName is null,'' ,CONCAT(cu.legalName, ' d/b/a, ')), IFNULL(cu.mfgName, ''), ' Address: ',IFNULL(cua.street1, ''), ' ',IFNULL(cua.city, ''),', ',IFNULL(cua.state, ''),' ',IFNULL(cua.postcode, ''), ',', IFNULL(c.countryName,''), ' ' ,IFNULL(CONCAT('Email:',fun_getPrimaryEmailFromJsonList(cp.email)),''), IFNULL(CONCAT(' Phone: ',fun_getPrimaryPhoneFromJsonList(cp.phoneNumber)),''),IFNULL(CONCAT(' Ext.',fun_getPrimaryPhExtensionFromJsonList(cp.phoneNumber)),''))AS Address, CONCAT(cua.Latitude ,' ',  cua.longitude) AS Location , cu.mfgCode as Code, cu.mfgName as Name, (case WHEN cu.mfgType = 'MFG' then 'Customer' WHEN cu.mfgType = 'DIST' then 'Supplier' else '' END) as Type, (case WHEN cua.isDefault = 1 then 'Yes' else 'No' END) as DefaultAddress,  \n" +
                "    (case WHEN cua.addressType = 'B' then 'Billing Address' WHEN cua.addressType = 'S' then 'Shipping Address'  WHEN cua.addressType = 'I' then 'Intermediate Address' WHEN cua.addressType = 'P' then 'Pay To Information' WHEN cua.addressType = 'R' then 'RMA Shipping Address' else '' END) as AddressType  \n" +
                "        FROM customer_addresses cua  \n" +
                "				Left Join contactperson cp on cua.defaultContactPersonID = cp.personId  \n" +
                "				JOIN mfgcodemst cu ON cu.id = cua.customerId  \n" +
                "				LEFT JOIN countrymst c ON cua.countryID=c.countryID  \n" +
                "				WHERE (cua.latitude is not null And cua.longitude is not null) and\", vWhereClause ,\";\");  \n" +
                "  \n" +
                "	PREPARE query1 FROM @tempQuery;  \n" +
                "			EXECUTE query1;  \n" +
                "			DEALLOCATE PREPARE query1;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 24-02-2022 *********************************** */
                "Drop procedure if exists `Sproc_PackingslipAndInovoiceReport`;  \n" +
                "CREATE PROCEDURE `Sproc_PackingslipAndInovoiceReport`(  \n" +
                "	IN pSupplierIDs LONGTEXT,  \n" +
                "	IN pfromDate DATE,  \n" +
                "	IN ptoDate DATE,  \n" +
                "	IN pEmployeeID INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE SQLStatement TEXT;  \n" +
                "	DECLARE v_SupplierID LONGTEXT;  \n" +
                "	IF(pSupplierIDs != '') THEN  \n" +
                "		SET v_SupplierID = CONCAT(\"a.mfgCodeID in (\",pSupplierIDs,\")\");  \n" +
                "	ELSE  \n" +
                "		SET v_SupplierID = \"1=1\";  \n" +
                "	END IF;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS Results;  \n" +
                "	SET SQLStatement  = CONCAT(\"  \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_Sproc_PackingslipAndInovoiceReport AS  \n" +
                "		SELECT 	ReceiptMonthYear,  \n" +
                "			Supplier,  \n" +
                "			SUM(NoOfReceivedLine) NoOfReceivedLine,  \n" +
                "			SUM(NoOfDisputeLine) NoOfDisputeLine,  \n" +
                "			SUM(NoOfLineWaitingForInvoice) NoOfLineWaitingForInvoice,  \n" +
                "			-- SUM(LinewiseDisputeRatio) LinewiseDisputeRatio,  \n" +
                "			ROUND((sum(NoOfDisputeLine)/sum(NoOfReceivedLine))*100,2) As LinewiseDisputeRatio,  \n" +
                "			SUM(TotalQtyReceived) TotalQtyReceived,  \n" +
                "			SUM(DisputeLineQty) DisputeLineQty,  \n" +
                "			-- SUM(QtywiseDisputeRatio) QtywiseDisputeRatio  \n" +
                "			ROUND((sum(DisputeLineQty)/sum(TotalQtyReceived))*100,2) QtywiseDisputeRatio  \n" +
                "		FROM 	(  \n" +
                "				SELECT 		a.receiptDate As ReceiptDate,  \n" +
                "						fun_getMfgCodeByID(a.mfgCodeID) Supplier,  \n" +
                "						Date_format(a.receiptDate ,'%M %Y') As ReceiptMonthYear,  \n" +
                "						b.NumberofReceivedLine As NoOfReceivedLine,  \n" +
                "						b.DisputeLine As NoOfDisputeLine,  \n" +
                "						b.WaitingForInvoiceLine As NoOfLineWaitingForInvoice,  \n" +
                "						-- Round((b.DisputeLine/b.NumberofReceivedLine)*100,2) As LinewiseDisputeRatio,  \n" +
                "						b.TotalReceivedQty As TotalQtyReceived,  \n" +
                "						b.DisputeLineQty As DisputeLineQty  \n" +
                "						-- Round((DisputeLineQty/TotalReceivedQty)*100,2) As QtywiseDisputeRatio  \n" +
                "				FROM 		packing_slip_material_receive a  \n" +
                "				LEFT JOIN 	(  \n" +
                "							SELECT 		refPackingSlipMaterialRecID, count(1) NumberofReceivedLine,  \n" +
                "									SUM(CASE  \n" +
                "										WHEN 	Status = 'A' and RefCreditDebitInvoiceNo is not null then  \n" +
                "											1  \n" +
                "										WHEN 	Status = 'D' then  \n" +
                "											1  \n" +
                "										ELSE  \n" +
                "											0  \n" +
                "									END)  DisputeLine,  \n" +
                "									SUM(CASE  \n" +
                "										WHEN 	Status ='P' then  \n" +
                "											1  \n" +
                "										ELSE 	0  \n" +
                "									END) waitingForInvoiceLine,  \n" +
                "									SUM(receivedQty) TotalReceivedQty,  \n" +
                "									SUM(CASE  \n" +
                "										WHEN 	Status = 'A' and RefCreditDebitInvoiceNo is not null then  \n" +
                "											receivedQty  \n" +
                "										WHEN 	Status = 'D' then  \n" +
                "											receivedQty  \n" +
                "										ELSE 	0  \n" +
                "									END)  DisputeLineQty  \n" +
                "							FROM 		packing_slip_material_receive_det  \n" +
                "							GROUP BY 	refPackingSlipMaterialRecID  \n" +
                "							) b ON a.id = b.refPackingSlipMaterialRecID  \n" +
                "				WHERE 		\",v_SupplierID,\"  \n" +
                "							AND receiptType ='I'  \n" +
                "							AND a.receiptDate IS NOT NULL  \n" +
                "							-- AND CAST(a.receiptDate AS DATE) BETWEEN DATE(\", pfromDate ,\") AND DATE(\", ptoDate ,\")  \n" +
                "							AND DATE(a.receiptDate)>=IFNULL(DATE('\",pfromDate,\"'),DATE(a.receiptDate))  \n" +
                "							AND DATE(a.receiptDate)<=IFNULL(DATE('\",ptoDate,\"'),DATE(a.receiptDate))  \n" +
                "							AND deletedAt IS NULL  \n" +
                "				ORDER BY 	a.receiptDate  \n" +
                "			) AS A  \n" +
                "		GROUP BY 	ReceiptMonthYear,Supplier  \n" +
                "		ORDER BY 	ReceiptMonthYear,Supplier  \n" +
                "	\");  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_Sproc_PackingslipAndInovoiceReport;  \n" +
                "	SET @SQLStatement1 = SQLStatement;  \n" +
                "	PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT('SELECT * FROM temp_Sproc_PackingslipAndInovoiceReport');  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "	CALL Sproc_GetCompanyDetailsForReport();  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** New Script -> 24-02-2022 *********************************** */
                "Drop procedure if exists `Sproc_GetReversalPartDetailReport`;  \n" +
                "CREATE PROCEDURE `Sproc_GetReversalPartDetailReport`(  \n" +
                "	IN pCustomerID text,  \n" +
                "    IN pWhereClause TEXT,  \n" +
                "    IN pWithAlternateParts TINYINT  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "DECLARE SQLStatement TEXT;  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS Results;  \n" +
                "		SET SQLStatement  = CONCAT(\"  \n" +
                "		Create temporary table if not exists Results as  \n" +
                "		SELECT * FROM  \n" +
                "		 (  \n" +
                "			 SELECT id, (select mfgName from mfgcodemst where id = mfgCodeId) Customer, mfgcodeID as customerID ,mfgPN as AssyPN,rev as AssyRev,RoHSStatusID FROM component  \n" +
                "			 WHERE category = 3 AND deletedAT IS NULL and  \n" +
                "			 partStatus IN ( SELECT id FROM component_partstatusmst WHERE `name`='Active')  \n" +
                "		 ) a,  \n" +
                "		 (  \n" +
                "			 SELECT a.partid, trim(a.Lineid)+0 Lineid, a.CustPN CPN,a.CustomerRev CPNRev,a.QPA, (select mfgName from mfgcodemst where id = b.mfgCodeID) mfgName,  \n" +
                "					 b.mfgCode,b.mfgCodeID,b.MFgPN,b.mfgPNId,c.eolDate EOLDate,c.ltbdate LTBDate,  \n" +
                "					 (SELECT `name` FROM component_partstatusmst WHERE id=c.partStatus)PartStatus,  \n" +
                "					 c.price as TentativePrice, (select mfgName from mfgcodemst where id = (select mfgCodeID from component where id = ( SELECT componentID FROM component_alternatepn WHERE refComponentID = b.mfgPNid and isDeleted = 0 order by componentID asc LIMIT 1))) alternatePartMFG,  \n" +
                "					 (select mfgPN from component where id = (SELECT componentID FROM component_alternatepn WHERE refComponentID = b.mfgPNid and isDeleted = 0 order by componentID asc  LIMIT 1)) alternatePart,  \n" +
                "					 c.updatedAt as modifiedAt,  \n" +
                "					 c.reversalDate,  \n" +
                "					 c.isReversal  \n" +
                "			 FROM rfq_lineitems a, rfq_lineitems_alternatepart b ,component c  \n" +
                "			 WHERE a.id = b.rfqlineitemsId AND b.mfgpnid =c.id AND a.deletedAt IS NULL AND b.deletedAT IS NULL  \n" +
                "             and not exists (select 1 from component_partstatusmst cp where cp.id = c.partStatus and cp.name='TBD')  \n" +
                "			 and (case when \",pWithAlternateParts,\" = 1 then 1=1 else ( exists (SELECT 1 FROM component_partstatusmst  \n" +
                "					WHERE `name`!='Active' and deletedAT IS NULL  and id = c.partStatus))  \n" +
                "					end)  \n" +
                "			 AND a.partid IN  \n" +
                "			 (  \n" +
                "				SELECT id FROM component c WHERE c.category = 3 AND c.deletedAT IS NULL  \n" +
                "				AND exists  \n" +
                "				(  \n" +
                "					SELECT 1 FROM component_partstatusmst  \n" +
                "					WHERE `name`='Active' and deletedAT IS NULL  and id = c.partStatus  \n" +
                "				)  \n" +
                "			 )  \n" +
                "			 AND EXISTS  \n" +
                "			 (  \n" +
                "				SELECT rfqlineitemsid FROM rfq_lineitems_alternatepart dp  \n" +
                "				WHERE dp.rfqlineitemsid = a.id and dp.deletedAT IS NULL  \n" +
                "				AND EXISTS  \n" +
                " 				(  \n" +
                " 					SELECT 1  \n" +
                "                      FROM component c  \n" +
                "					 WHERE c.id = dp.mfgPnID  \n" +
                "                       and c.deletedAT IS NULL  \n" +
                "                       and c.isReversal = true  \n" +
                "                       /*AND exists (  \n" +
                "								SELECT 1 FROM component_partstatusmst  \n" +
                "								WHERE `name` != 'Active' and deletedAT IS NULL  and id = c.partStatus  \n" +
                "								)*/  \n" +
                " 				)  \n" +
                "			  )  \n" +
                "		 ) b  \n" +
                "		 WHERE a.id =b.partid\");  \n" +
                "  \n" +
                "		IF pCustomerID != '' THEN  \n" +
                "			SET @SQLStatement1 = CONCAT(SQLStatement,' and customerID in (',pCustomerID,')');  \n" +
                "		ELSE  \n" +
                "			SET @SQLStatement1 = SQLStatement;  \n" +
                "		END IF;  \n" +
                "	PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "	IF(pWhereClause != '') THEN  \n" +
                "		SET @SQLStatement2 = CONCAT('SELECT * from Results  where ', pWhereClause);  \n" +
                "	else  \n" +
                "		SET @SQLStatement2 = CONCAT('SELECT * from Results');  \n" +
                "	end if;  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "	CALL Sproc_GetCompanyDetailsForReport();  \n" +
                "END;  \n" +
                /* **************************** New Script -> 24-02-2022 *********************************** */
                /* **************************** Add Script Version -> 24-02-2022 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1325,'1.00','V1',' US 40746 And User Story 40551: Show Primary contact person in detail tab of customer/supplier page. - Bhavik '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1325:
            allDbChangesArray.push(
                /* **************************** New Script -> 24-02-2022 *********************************** */
                "Drop procedure if exists `Sproc_getPartnerPrtformanceReportDetail`;  \n" +
                "CREATE PROCEDURE `Sproc_getPartnerPrtformanceReportDetail`(  \n" +
                "	IN pSupplierIDs LONGTEXT,  \n" +
                "	IN pfromDate DATE,  \n" +
                "	IN ptoDate DATE,  \n" +
                "	IN pEmployeeID INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE SQLStatement TEXT;  \n" +
                "	IF(pSupplierIDs != '') THEN  \n" +
                "		SET @supplierID = CONCAT(\"a.mfgCodeID in (\",pSupplierIDs,\")\");  \n" +
                "	ELSE  \n" +
                "		SET @supplierID = \"1=1\";  \n" +
                "	END IF;  \n" +
                "	SET SQLStatement  = CONCAT(\"  \n" +
                "		CREATE TEMPORARY TABLE IF NOT EXISTS temp_Sproc_getPartnerPrtformanceReportDetail as  \n" +
                "		SELECT 	ReceiptMonthYear,  \n" +
                "			Supplier,  \n" +
                "			SUM(NoOfReceivedLine) NoOfReceivedLine,  \n" +
                "			SUM(NoOfDisputeLine) NoOfDisputeLine,  \n" +
                "			ROUND((sum(NoOfDisputeLine)/sum(NoOfReceivedLine))*100,2) As LinewiseDisputeRatio,  \n" +
                "			#ROUND(((((sum(NoOfDisputeLine)/sum(NoOfReceivedLine))*100)/100)*50),2) As QualityGrade,  \n" +
                "			ROUND(50-Round(((((sum(NoOfDisputeLine)/sum(NoOfReceivedLine))*100)/100)*50),2),2) As QualityGrade,  \n" +
                "			SUM(TotalQtyReceived) TotalPartReceived,  \n" +
                "			0 as TotalOnTimePartReceived,  \n" +
                "			ROUND((0/sum(TotalQtyReceived))*100,2) PartsOnTimeRatio,  \n" +
                "			ROUND((((0/sum(TotalQtyReceived))*100/100)*50),2) as DiliveryGrade  \n" +
                "		FROM 	(  \n" +
                "				SELECT 		DATE_FORMAT(receiptDate,'%Y%m')receiptmonth,  \n" +
                "						a.receiptDate As ReceiptDate,  \n" +
                "						fun_getMfgCodeByID(a.mfgCodeID) Supplier,  \n" +
                "						Date_format(a.receiptDate ,'%b %Y') As ReceiptMonthYear,  \n" +
                "						b.NumberofReceivedLine As NoOfReceivedLine,  \n" +
                "						b.DisputeLine As NoOfDisputeLine,  \n" +
                "						b.WaitingForInvoiceLine As NoOfLineWaitingForInvoice,  \n" +
                "						b.TotalReceivedQty As TotalQtyReceived,  \n" +
                "						b.DisputeLineQty As DisputeLineQty  \n" +
                "				FROM 		packing_slip_material_receive a  \n" +
                "				LEFT JOIN 	(  \n" +
                "								SELECT 		refPackingSlipMaterialRecID,  \n" +
                "										COUNT(1) NumberofReceivedLine,  \n" +
                "										SUM(  \n" +
                "											CASE  \n" +
                "												WHEN 	Status = 'A' AND RefCreditDebitInvoiceNo IS NOT NULL THEN  \n" +
                "													1  \n" +
                "												WHEN 	Status = 'D' THEN  \n" +
                "													1  \n" +
                "												ELSE 	0  \n" +
                "											END)  DisputeLine,  \n" +
                "										SUM(  \n" +
                "											CASE  \n" +
                "												WHEN 	Status ='P' THEN  \n" +
                "													1  \n" +
                "												ELSE 	0  \n" +
                "											END  \n" +
                "										) waitingForInvoiceLine,  \n" +
                "										SUM(receivedQty) TotalReceivedQty,  \n" +
                "										SUM(  \n" +
                "											CASE  \n" +
                "												WHEN Status = 'A' AND RefCreditDebitInvoiceNo IS NOT NULL THEN  \n" +
                "													receivedQty  \n" +
                "												WHEN Status = 'D' THEN  \n" +
                "													receivedQty  \n" +
                "												ELSE  \n" +
                "													0  \n" +
                "											END  \n" +
                "										)  DisputeLineQty  \n" +
                "								FROM 		packing_slip_material_receive_det  \n" +
                "								GROUP BY 	refPackingSlipMaterialRecID  \n" +
                "							) b on a.id = b.refPackingSlipMaterialRecID  \n" +
                "				WHERE \",@supplierID,\"  \n" +
                "						AND  receiptType ='I'  \n" +
                "						AND a.receiptDate is not null  \n" +
                "						AND DATE(a.receiptDate)>=IFNULL(DATE('\",pfromDate,\"'),DATE(a.receiptDate))  \n" +
                "						AND DATE(a.receiptDate)<=IFNULL(DATE('\",ptoDate,\"'),DATE(a.receiptDate))  \n" +
                "						AND deletedAt IS NULL  \n" +
                "				ORDER BY 	a.receiptDate  \n" +
                "			) AS A  \n" +
                "		GROUP BY ReceiptMonthYear,Supplier  \n" +
                "		ORDER BY receiptmonth,Supplier  \n" +
                "	\");  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_Sproc_getPartnerPrtformanceReportDetail;  \n" +
                "	SET @SQLStatement1 = SQLStatement;  \n" +
                "	PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT('SELECT * from temp_Sproc_getPartnerPrtformanceReportDetail');  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "	CALL Sproc_GetCompanyDetailsForReport();  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** New Script -> 24-02-2022 *********************************** */
                "Drop procedure if exists `Sproc_GetLaborComparisonActualvsEstimatedReportDetail`;  \n" +
                "CREATE PROCEDURE `Sproc_GetLaborComparisonActualvsEstimatedReportDetail`(  \n" +
                "IN pAssyID int,  \n" +
                "IN pEmployeeID int  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "DECLARE tRfqAssyID int;  \n" +
                "select id into tRfqAssyID from rfq_assemblies where partid = pAssyID and isdeleted = 0 and status = 3  \n" +
                "order by quoteSubmitDate desc limit 1;  \n" +
                "if tRfqAssyID is null then  \n" +
                "select id into tRfqAssyID from rfq_assemblies where partid = pAssyID and isdeleted = 0 and status = 2 order by quoteSubmitDate desc limit 1;  \n" +
                "end if;  \n" +
                "		select fun_getAssyNameByID(partID) assembly, partID,  \n" +
                "        (case when mountingTypeID is not null then fun_getMountingTypeNameByID(mountingTypeID) else fun_getAssyNameByID(subAssyID) end) as mountingtype,  \n" +
                "		(case when mountingTypeID is not null then mountingTypeID else subAssyID end) as mountingTypeID,  \n" +
                "		CAST((perAssyPrice + overHeadAssyPrice) AS DECIMAL(12,5)) perAssyPrice ,  \n" +
                "        CAST(((perAssyPrice + overHeadAssyPrice) * requestQty) AS DECIMAL(12,2)) as totalCost,  \n" +
                "        0 costType,requestQty as Qty, subAssyID as sid  \n" +
                "		from rfq_assy_qtywise_bom_laborcosting_detail rbl  \n" +
                "		join rfq_assy_labor_bom_mountingtype_qpa_detail rlm on rlm.id = rfqAssyBOMMountingID  \n" +
                "		join rfq_assy_quantity raq on raq.id = rbl.rfqAssyQtyID and raq.isdeleted = 0  \n" +
                "		where rbl.isdeleted = 0 and partid = pAssyID  \n" +
                "		and rlm.rfqAssyID = tRfqAssyID  \n" +
                "		and rbl.rfqAssyQtyID = (case when (select count(1) from rfq_assy_quantity where rfqAssyID = tRfqAssyID and isDeleted = 0 and requestQty <= (select max(buildQty) from workorder where partID = pAssyID and isDeleted = 0)) > 0  \n" +
                "        then  \n" +
                "			(select id from rfq_assy_quantity where rfqAssyID = tRfqAssyID and isDeleted = 0 and requestQty <= (select max(buildQty) from workorder where partID = pAssyID and isDeleted = 0) order by requestQty desc limit 1)  \n" +
                "		else  \n" +
                "			(select id from rfq_assy_quantity where rfqAssyID = tRfqAssyID and isDeleted = 0 and requestQty >= (select max(buildQty) from workorder where partID = pAssyID and isDeleted = 0) order by requestQty asc limit 1)  \n" +
                "		end)  \n" +
                "		union  \n" +
                "		select fun_getWorkorderNumberByID(woId) assembly, woId,fun_getMountingTypeNameByID(mountingTypeID) as mountingtype,  \n" +
                "		mountingTypeID, sum(CAST(perAssytotalcost AS DECIMAL(12,5))) perAssytotalcostAS, sum(CAST((perAssytotalcost * woQty)AS DECIMAL(12,2))) totalcost,  \n" +
                "        1 costType, woQty as Qty,null as sid  \n" +
                "		from (  \n" +
                "		select wte.woid,wte.woOPID,wte.employeeID, woop.mountingTypeID,  \n" +
                "		wte.burdenRate,wte.paymentMode, (wo.buildQty) woQty,  \n" +
                "		(sum((case when wte.paymentMode = #'Exempt' then  \n" +
                "		'Non-exempt' then  \n" +
                "		((wte.burdenRate) * (((wte.productionTime)/60)/60))  \n" +
                "		else  \n" +
                "		((wte.burdenRate/(52*5*8))* (((wte.productionTime)/60)/60))  \n" +
                "		end))/wo.buildQty) perAssytotalcost,  \n" +
                "		((wte.productionTime)/60)/60 totalhr,  \n" +
                "		wte.productionTime,  \n" +
                "		wte.totalTime,  \n" +
                "		wte.woTransID,wt.issueQty,wtp.totalQty,wtp.passQty,wtp.reprocessQty,wtp.observedQty,wtp.reworkQty,wo.woID as parentWO  \n" +
                "		from workorder_trans_empinout wte  \n" +
                "		left join workorder wo on wo.woid = wte.woid and wo.isDeleted = 0  \n" +
                "		left join workorder_operation woop on woop.woopid = wte.woopid and woop.isDeleted = 0  \n" +
                "		join workorder_trans wt on wt.woTransID =  wte.woTransID and wt.isDeleted = 0  \n" +
                "		join workorder_trans_production wtp on wtp.woTransID = wt.woTransID and wtp.isDeleted = 0  \n" +
                "		where wo.partID = pAssyID  \n" +
                "		group by wte.woid,wte.employeeid,#wte.woopid  \n" +
                "		woop.mountingTypeID  \n" +
                "		union  \n" +
                "		select wte.woid,wte.woOPID,wte.employeeID, woop.mountingTypeID,  \n" +
                "		wte.burdenRate,wte.paymentMode, ((select buildQty from workorder where woid = wamd.parentWOID)*  \n" +
                "		(select qpa from kit_allocation_lineitems_alternatepart kala  \n" +
                "		left join kit_allocation_lineitems kal on kal.id = kala.refKitAllocationLineItemId and kal.isdeleted = 0  \n" +
                "		left join workorder woi on woi.partID = kala.partID  \n" +
                "		where kala.mfgPNID = wo.partID and  \n" +
                "		kala.refSalesOrderDetID in (select salesOrderDetailID from workorder_salesorder_details where woid = wamd.parentWOID and isdeleted = 0)  \n" +
                "		and kala.isDeleted = 0)) woQty,  \n" +
                "		(sum((case when wte.paymentMode = #'Exempt' then  \n" +
                "		'Non-exempt' then  \n" +
                "		(((wte.burdenRate) * (((wte.productionTime)/60)/60) ))  \n" +
                "		else  \n" +
                "		((wte.burdenRate/(52*5*8))* (((wte.productionTime)/60)/60))  \n" +
                "		end)))perAssytotalcost,  \n" +
                "		((wte.productionTime)/60)/60 totalhr,  \n" +
                "		wte.productionTime,  \n" +
                "		wte.totalTime,  \n" +
                "		wte.woTransID,wt.issueQty,wtp.totalQty,wtp.passQty,wtp.reprocessQty,wtp.observedQty,wtp.reworkQty,wo.woID as parentWO  \n" +
                "		from workorder_trans_empinout wte  \n" +
                "		left join workorder wo on wo.woid = wte.woid and wo.isDeleted = 0  \n" +
                "		left join workorder_operation woop on woop.woopid = wte.woopid and woop.isDeleted = 0  \n" +
                "		join workorder_trans wt on wt.woTransID =  wte.woTransID and wt.isDeleted = 0  \n" +
                "		join workorder_trans_production wtp on wtp.woTransID = wt.woTransID and wtp.isDeleted = 0  \n" +
                "		left join workorder_main_assembly_mapping_details wamd on wamd.refWOID = wo.woid and wamd.isDeleted = 0  \n" +
                "		where wamd.parentWOID in (select woid from workorder where partid = pAssyID and isdeleted = 0)  \n" +
                "		group by wte.woid,wte.employeeid,#wte.woopid  \n" +
                "		woop.mountingTypeID  \n" +
                "		)a  \n" +
                "        group by a.mountingTypeID,a.woid;  \n" +
                "  \n" +
                "	CALL Sproc_GetCompanyDetailsForReport();  \n" +
                "END;  \n" +
                /* **************************** New Script -> 24-02-2022 *********************************** */
                "Drop procedure if exists `Sproc_GetObsoletePartDetailReport`;  \n" +
                "CREATE PROCEDURE `Sproc_GetObsoletePartDetailReport`(  \n" +
                "	IN pCustomerID text,  \n" +
                "    IN pWhereClause TEXT,  \n" +
                "    IN pWithAlternateParts TINYINT,  \n" +
                "    In pAssyId text  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "DECLARE SQLStatement TEXT;  \n" +
                "if pAssyId is null or pAssyId =\"\"  then  \n" +
                "	set @assyIdCondition = \"1 = 1\";  \n" +
                "else  \n" +
                "	set @assyIdCondition = concat(\" id in (\",pAssyId,\")\");  \n" +
                "end if;  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS Results;  \n" +
                "		SET SQLStatement  = CONCAT(\"  \n" +
                "		Create temporary table if not exists Results as  \n" +
                "		SELECT * FROM  \n" +
                "	(SELECT * FROM  \n" +
                "		(  \n" +
                "			 SELECT id , (select mfgName from mfgcodemst where id = mfgCodeId) Customer, mfgcodeID as customerID ,mfgPN as AssyPN,rev as AssyRev,RoHSStatusID FROM component  \n" +
                "			 WHERE \", @assyIdCondition,\" and category = 3 AND isdeleted = 0 and  \n" +
                "			 partStatus IN ( SELECT id FROM component_partstatusmst WHERE `name`='Active')  \n" +
                "		 ) a,  \n" +
                "		 (  \n" +
                "			 SELECT a.id as lineitemid,b.id as rfqalternatePartID,a.partID, trim(a.Lineid)+0 Lineid, a.CustPN CPN,a.CustomerRev CPNRev,a.QPA, (select mfgName from mfgcodemst where id = b.mfgCodeID) mfgName,  \n" +
                "			 b.mfgCode,b.mfgCodeID,b.MFgPN,b.mfgPNId,c.eolDate EOLDate,c.ltbdate LTBDate,  \n" +
                "			 (SELECT `name` FROM component_partstatusmst WHERE id=c.partStatus)PartStatus , c.rohsgroupID,  \n" +
                "			 c.price as TentativePrice, fun_getRoHSIconByPartID(b.mfgPNId) rohsImage,  \n" +
                "			 c.updatedAt as modifiedAt  \n" +
                "			 FROM rfq_lineitems a, rfq_lineitems_alternatepart b ,component c  \n" +
                "			 WHERE a.id = b.rfqlineitemsId AND b.mfgpnid =c.id AND a.isdeleted =0 AND b.isdeleted = 0  \n" +
                "             and not exists (select 1 from component_partstatusmst cp where cp.id = c.partStatus and cp.name='TBD')  \n" +
                "			 and (case when \",pWithAlternateParts,\" = 1 then  1=1 else ( exists (SELECT 1 FROM component_partstatusmst  \n" +
                "					WHERE `name`!='Active' and deletedAT IS NULL  and id = c.partStatus))  \n" +
                "					end)  \n" +
                "			 AND a.partid IN  \n" +
                "			 (  \n" +
                "				SELECT id FROM component c WHERE c.category = 3 AND c.deletedAT IS NULL  \n" +
                "				AND exists  \n" +
                "				(  \n" +
                "					SELECT 1 FROM component_partstatusmst  \n" +
                "					WHERE `name`='Active' and deletedAT IS NULL  and id = c.partStatus  \n" +
                "				)  \n" +
                "			 )  \n" +
                "			 AND EXISTS  \n" +
                "			 (  \n" +
                "				SELECT rfqlineitemsid FROM rfq_lineitems_alternatepart dp  \n" +
                "				WHERE dp.rfqlineitemsid = a.id and dp.deletedAT IS NULL  \n" +
                "				AND EXISTS  \n" +
                "				(  \n" +
                "					SELECT 1 FROM component c WHERE c.id = dp.mfgPnID and c.deletedAT IS NULL AND exists  \n" +
                "					(  \n" +
                "						SELECT 1 FROM component_partstatusmst  \n" +
                "						WHERE `name` != 'Active' and deletedAT IS NULL  and id = c.partStatus  \n" +
                "					)  \n" +
                "				)  \n" +
                "			  )  \n" +
                "		 ) b  \n" +
                "         WHERE a.id =b.partID  \n" +
                "         )t  \n" +
                "  \n" +
                "            where 1=1 \");  \n" +
                "		IF pCustomerID != '' THEN  \n" +
                "			SET @SQLStatement1 = CONCAT(SQLStatement,' and customerID in (',pCustomerID,')');  \n" +
                "		ELSE  \n" +
                "			SET @SQLStatement1 = SQLStatement;  \n" +
                "		END IF;  \n" +
                "	PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "	IF(pWhereClause != '') THEN  \n" +
                "		SET @SQLStatement2 = CONCAT('SELECT * from Results  where ', pWhereClause);  \n" +
                "	else  \n" +
                "		SET @SQLStatement2 = CONCAT('SELECT * from Results');  \n" +
                "	end if;  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "	CALL Sproc_GetCompanyDetailsForReport();  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** New Script -> 24-02-2022 *********************************** */
                "Drop procedure if exists `Sproc_GetObsoletePartDetailForCompanyReport`;  \n" +
                "CREATE PROCEDURE `Sproc_GetObsoletePartDetailForCompanyReport`(  \n" +
                "	IN pCustomerID text,  \n" +
                "    IN pWhereClause TEXT,  \n" +
                "    IN pWithAlternateParts TINYINT,  \n" +
                "    IN pFromDate DATE,  \n" +
                "    IN pToDate DATE  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "DECLARE SQLStatement TEXT;  \n" +
                "		IF(pFromDate IS NULL OR pToDate IS NULL) THEN  \n" +
                "			SET @dateRangeStatement = ' 1=1 ';  \n" +
                "		ELSe  \n" +
                "            SET @dateRangeStatement = concat(\" c.obsoletedate between '\",pFromDate,\"' and '\",pToDate,\"' \");  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS ObsoletePartsForCompany;  \n" +
                "		SET SQLStatement  = CONCAT(\"  \n" +
                "		Create temporary table if not exists ObsoletePartsForCompany as  \n" +
                "		SELECT * FROM  \n" +
                "		 (  \n" +
                "			 SELECT id, (select mfgName from mfgcodemst where id = mfgCodeId) Customer, mfgcodeID as customerID ,mfgPN as AssyPN,rev as AssyRev,RoHSStatusID FROM component  \n" +
                "			 WHERE category = 3 AND deletedAT IS NULL and  \n" +
                "			 partStatus IN ( SELECT id FROM component_partstatusmst WHERE `name`='Active')  \n" +
                "		 ) a,  \n" +
                "		 (  \n" +
                "			 SELECT a.partid, trim(a.Lineid)+0 Lineid, a.CustPN CPN,a.CustomerRev CPNRev,a.QPA, (select mfgName from mfgcodemst where id = b.mfgCodeID) mfgName,  \n" +
                "			 b.mfgCode,b.mfgCodeID,b.MFgPN,b.mfgPNId,c.eolDate EOLDate,c.ltbdate LTBDate,  \n" +
                "			 (SELECT `name` FROM component_partstatusmst WHERE id=c.partStatus)PartStatus ,  \n" +
                "			 c.price as TentativePrice, (select mfgName from mfgcodemst where id = (select mfgCodeID from component where id = ( SELECT componentID FROM component_alternatepn WHERE refComponentID = b.mfgPNid and isDeleted = 0 order by componentID asc LIMIT 1))) alternatePartMFG,  \n" +
                "			 (select mfgPN from component where id = (SELECT componentID FROM component_alternatepn WHERE refComponentID = b.mfgPNid and isDeleted = 0 order by componentID asc  LIMIT 1)) alternatePart,  \n" +
                "			 c.updatedAt as modifiedAt,  \n" +
                "             c.obsoleteDate  \n" +
                "			 FROM rfq_lineitems a, rfq_lineitems_alternatepart b ,component c  \n" +
                "			 WHERE a.id = b.rfqlineitemsId AND b.mfgpnid =c.id AND a.deletedAt IS NULL AND b.deletedAT IS NULL  \n" +
                "             and not exists (select 1 from component_partstatusmst cp where cp.id = c.partStatus and cp.name='TBD')  \n" +
                "			 and (case when \",pWithAlternateParts,\" = 1 then  1=1 else ( exists (SELECT 1 FROM component_partstatusmst  \n" +
                "					WHERE `name`='Obsolete' and deletedAT IS NULL  and id = c.partStatus))  \n" +
                "					end)  \n" +
                "			 AND a.partid IN  \n" +
                "			 (  \n" +
                "				SELECT id FROM component c WHERE c.category = 3 AND c.deletedAT IS NULL  \n" +
                "				AND exists  \n" +
                "				(  \n" +
                "					SELECT 1 FROM component_partstatusmst  \n" +
                "					WHERE `name`='Active' and deletedAT IS NULL  and id = c.partStatus  \n" +
                "				)  \n" +
                "			 )  \n" +
                "			 AND EXISTS  \n" +
                "			 (  \n" +
                "				SELECT rfqlineitemsid FROM rfq_lineitems_alternatepart dp  \n" +
                "				WHERE dp.rfqlineitemsid = a.id and dp.deletedAT IS NULL  \n" +
                "				AND EXISTS  \n" +
                "				(  \n" +
                "					SELECT 1 FROM component c WHERE c.id = dp.mfgPnID and c.deletedAT IS NULL AND exists  \n" +
                "					(  \n" +
                "						SELECT 1 FROM component_partstatusmst  \n" +
                "						WHERE `name` = 'Obsolete' and deletedAT IS NULL  and id = c.partStatus  \n" +
                "					)  \n" +
                "                    and \",@dateRangeStatement ,\"  \n" +
                "				)  \n" +
                "			  )  \n" +
                "		 ) b  \n" +
                "		 WHERE a.id =b.partid\");  \n" +
                "		IF pCustomerID != '' THEN  \n" +
                "			SET @SQLStatement1 = CONCAT(SQLStatement,' and customerID in (',pCustomerID,')');  \n" +
                "		ELSE  \n" +
                "			SET @SQLStatement1 = SQLStatement;  \n" +
                "		END IF;  \n" +
                "	PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "	IF(pWhereClause != '') THEN  \n" +
                "		SET @SQLStatement2 = CONCAT('SELECT * from ObsoletePartsForCompany  where ', pWhereClause);  \n" +
                "	else  \n" +
                "		SET @SQLStatement2 = CONCAT('SELECT * from ObsoletePartsForCompany');  \n" +
                "	end if;  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "	CALL Sproc_GetCompanyDetailsForReport();  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** New Script -> 24-02-2022 *********************************** */
                "Drop procedure if exists `Sproc_GetManufacturer`;  \n" +
                "CREATE PROCEDURE `Sproc_GetManufacturer`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	-- IN pIsMFG TINYINT(1),  \n" +
                "	IN pmfgType VARCHAR(20),  \n" +
                "	IN pisCustOrDisty TINYINT  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;  \n" +
                "    DECLARE vDateTimeDisplayFormat VARCHAR(100);  \n" +
                "    DECLARE vTimeZone VARCHAR(50);  \n" +
                "    DECLARE vMfgCodeFormat INT;  \n" +
                "	DECLARE vContPersonNameFormat INT;  \n" +
                "  \n" +
                "    SELECT fun_getMFGCodeNameFormat() INTO vMfgCodeFormat;  \n" +
                "	SELECT fun_getTimeZone() INTO vTimeZone;  \n" +
                "	SELECT fun_getDateTimeFormat() INTO vDateTimeDisplayFormat;  \n" +
                "	SELECT fun_getContPersonNameDisplayFormat() INTO vContPersonNameFormat;  \n" +
                "  \n" +
                "	SET @temp_Sproc_RetriveWhereUsedComponents = CONCAT(\"  \n" +
                "       SELECT mc.id,mc.mfgCode,mc.mfgType,mc.mfgName,mc.legalName,mc.customerType, (case when  mc.customerType='B'  then 'Broker' when   mc.customerType='E' then 'End Customer'  else '' end) as customerTypeName,  \n" +
                "       (CASE WHEN (mc.isPricingApi = 1 OR mc.systemGenerated = 1) THEN 1 ELSE 0 END) isDisabledDelete, mc.isPricingApi , mc.systemGenerated,fun_getDateCodeFormatById(mc.dateCodeFormatID) dateCodeFormat,  \n" +
                "		fun_getUserNameByEmployeID(mc.salesCommissionTo) salesCommissionTo,  \n" +
                "		mc.isSupplierEnable,  \n" +
                "		mc.externalSupplierOrder,  \n" +
                "		mc.systemID,mc.customerSystemID,  \n" +
                "		fun_getGenericCategoryCodeNameByID(mc.carrierID) carrierName,  \n" +
                "		fun_getGenericCategoryCodeNameByID(mc.rmaCarrierID) rmacarrierName,  \n" +
                "		fun_getGenericCategoryCodeNameByID(mc.rmashippingMethodId) rmaShippingName,  \n" +
                "		fun_getGenericCategoryCodeNameByID(mc.shippingMethodId) ShippingName,  \n" +
                "		mc.carrierAccount,mc.rmaCarrierAccount,case when mc.shippingInsurence =1 then 'Yes' else 'No' end shippingInsuranceName,  \n" +
                "	        case when mc.rmaShippingInsurence =1 then 'Yes' else 'No' end rmashippingInsuranceName,  \n" +
                "	        case when mc.isPricingApi =1 and mc.isSupplierEnable=1 then 'Yes' else 'No' end supplierEnableText,  \n" +
                "	        mc.shippingInsurence, mc.rmaShippingInsurence,  \n" +
                "		fun_getUserNameByID(mc.updatedBy) updatedby,  \n" +
                "		fun_getUserNameByID(mc.createdBy) createdby,  \n" +
                "		fun_getRoleByID(mc.createByRoleId) createdbyRole,  \n" +
                "		fun_getRoleByID(mc.updateByRoleId) updatedbyRole,  \n" +
                "		fun_ApplyCommonDateTimeFormatByParaValue(mc.createdAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') createdAt,  \n" +
                "		fun_ApplyCommonDateTimeFormatByParaValue(mc.UpdatedAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') updatedAt,  \n" +
                "		smm.mappingMfr,  \n" +
                "        cmm.customerMapping,  \n" +
                "       CASE WHEN mc.authorizeType=1 THEN 'Authorized'  \n" +
                "            WHEN mc.authorizeType=2 THEN 'Independent'  \n" +
                "            WHEN mc.authorizeType=3 THEN 'Authorized & Independent'  \n" +
                "            ELSE '' END   authorizeTypeTxt,mc.authorizeType,  \n" +
                "		     wbw.buyBy,wbw.buyDate,wbw.description,wbw.id AS `acquiredID`,  \n" +
                "            wbw.acquired,  \n" +
                "		(SELECT GROUP_CONCAT(CONCAT(alias, '@@@',fun_getMappingManufacturerCount(id),  \n" +
                "        '@@@',fun_getUserNameByID(createdBy),  \n" +
                "        '@@@',fun_ApplyCommonDateTimeFormatByParaValue(createdAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"')  \n" +
                "        ) SEPARATOR '!!!!')  FROM mfgcodealias  \n" +
                "		WHERE IFNULL(isdeleted,0) = 0 AND mfgcodeId = mc.id  GROUP BY mfgcodeId) AS aliaslist  ,  \n" +
                "		mc.email , mc.website, mc.contact, mc.comments , mc.phExtension,  \n" +
                "		mc.contactCountryCode,mc.faxNumber, mc.faxCountryCode,mc.isActive, mc.isCompany,  \n" +
                "        (CASE WHEN (mc.`isCompany` = 0) THEN 'No'  \n" +
                "				WHEN (mc.`isCompany` = 1) THEN 'Yes' ELSE '' END) AS `isCompanyConvertedValue`,  \n" +
                "		(CASE WHEN (mc.systemGenerated = 0) THEN 'No'  \n" +
                "				WHEN (mc.systemGenerated = 1) THEN 'Yes' ELSE '' END) AS `SyatemGeneratedValue`,  \n" +
                "		(CASE WHEN (mc.`isActive` = 0) THEN 'Inactive'  \n" +
                "				WHEN (mc.`isActive` = 1) THEN 'Active' ELSE '' END) AS `isActiveConvertedValue`  \n" +
                "		 ,gc.gencCategoryName,  \n" +
                "		 CASE WHEN mc.isCustOrDisty = 1 THEN 'Both'  \n" +
                "			WHEN mc.isCustOrDisty = 0 OR mc.isCustOrDisty IS NULL THEN 'Manufacturer Only'  \n" +
                "		END AS isCustOrDistyText,  \n" +
                "        mc.displayOrder,  \n" +
                "        mc.invoicesRequireManagementApproval,  \n" +
                "        (CASE WHEN (mc.invoicesRequireManagementApproval = 0) THEN 'No'  \n" +
                "				WHEN (mc.invoicesRequireManagementApproval = 1) THEN 'Yes' ELSE '' END) AS `invoicesRequireManagementApprovalValue`,  \n" +
                "		mc.taxID,  \n" +
                "        mc.accountRef,  \n" +
                "        mc.paymentMethodID,  \n" +
                "		pc.gencCategoryName paymentMethodName,  \n" +
                "        pc.systemGenerated systemGeneratedPaymentMethod  ,  \n" +
                "        CONCAT('(',aam.`acct_code`,') ',aam.`acct_name`) AS ChartOfAccounts,  \n" +
                "		mc.acctId,  \n" +
                "           (select GROUP_CONCAT(fun_GetFormattedContactPersonName(cp.firstName, cp.middleName, cp.lastName, \",vContPersonNameFormat,\"))  \n" +
                "			from contactperson cp where cp.refTransID = mc.id AND cp.refTableName = 'mfgcodemst' AND cp.isPrimary = 1 AND cp.isActive = 1 AND cp.isDeleted = 0 ) personFullNameList  \n" +
                "	FROM mfgcodemst mc  \n" +
                "    LEFT JOIN  \n" +
                "		(SELECT supplierid,GROUP_CONCAT(fun_GetFormattedMfgCode(mfg.mfgCode, mfg.mfgName,\", vMfgCodeFormat ,\") SEPARATOR '##$$') mappingmfr  \n" +
                "				FROM supplier_mapping_mst smm inner join mfgcodemst mfg on smm.refmfgcodemstid = mfg.id  where  smm.isCustMapping=0 and smm.isDeleted= 0  \n" +
                "		group by supplierid)smm on smm.supplierid=mc.id  \n" +
                "	LEFT JOIN  \n" +
                "		(SELECT supplierid,GROUP_CONCAT(fun_GetFormattedMfgCode(mfg.mfgCode, mfg.mfgName,\", vMfgCodeFormat ,\") SEPARATOR '##$$') customerMapping  \n" +
                "				FROM supplier_mapping_mst smm inner join mfgcodemst mfg on smm.refmfgcodemstid = mfg.id  where  smm.isCustMapping=1 and smm.isDeleted= 0  \n" +
                "			group by supplierid) cmm on cmm.supplierid=mc.id  \n" +
                "    LEFT JOIN acct_acctmst aam ON aam.acct_id = mc.acctId AND aam.isDeleted=0  \n" +
                "    LEFT JOIN genericcategory gc ON gc.gencCategoryID = mc.paymentTermsID AND gc.isDeleted = 0  \n" +
                "    LEFT JOIN genericcategory pc ON pc.gencCategoryID = mc.paymentMethodID AND pc.isDeleted = 0  \n" +
                "	LEFT JOIN (SELECT wbwi.buyBy,wbwi.buyDate,wbwi.description,wbwi.id , wbwi.buyTo ,  \n" +
                "				CONCAT('(', mci.mfgcode,')' , ' ' ,mci.mfgName ) AS `acquired`  \n" +
                "			FROM  who_bought_who wbwi  \n" +
                "            JOIN mfgcodemst mci ON wbwi.buyBy = mci.id  \n" +
                "            AND wbwi.isDeleted = 0) wbw  \n" +
                "			ON wbw.buyTo = mc.id  \n" +
                "	WHERE mc.isdeleted = 0  \n" +
                "	AND mc.mfgType = '\", pmfgType , \"' \");  \n" +
                "  \n" +
                "	IF(pisCustOrDisty IS NOT NULL OR pisCustOrDisty != '') THEN  \n" +
                "		SET @temp_Sproc_RetriveWhereUsedComponents = CONCAT(@temp_Sproc_RetriveWhereUsedComponents,\" and mc.isCustOrDisty = \",pisCustOrDisty);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF (pOrderBy IS NOT NULL) THEN  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" ,\"displayOrder IS NULL, displayOrder ASC ,mfgName ASC\");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = '1=1' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "   /* to get total count of rows */  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_RetriveWhereUsedComponents,\" ) c where 1=1 and \", pWhereClause);  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"select * from ( \", @temp_Sproc_RetriveWhereUsedComponents,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "	 PREPARE query1 FROM @SQLStatement2;  \n" +
                "	 EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** New Script -> 24-02-2022 *********************************** */
                "Drop procedure if exists `Sproc_GetMfgCodeDetailForElastic`;  \n" +
                "CREATE PROCEDURE `Sproc_GetMfgCodeDetailForElastic`(  \n" +
                "	IN pId INT,  \n" +
                "    IN pIsCustOrDisty BIT,  \n" +
                "    IN pmfgType NVARCHAR(10),  \n" +
                "    In pFromdate date,  \n" +
                "    In pTodate date,  \n" +
                "    IN pRequiredCount tinyint  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "	DECLARE vContPersonNameFormat INT;  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "	SELECT fun_getContPersonNameDisplayFormat() INTO vContPersonNameFormat;  \n" +
                "  \n" +
                "     IF(pRequiredCount)  \n" +
                "	THEN  \n" +
                "		SELECT  \n" +
                "			count(1) totalCount  \n" +
                "		FROM mfgcodemst  \n" +
                "		WHERE IFNULL(isDeleted,0) = 0 AND  \n" +
                "			isCustOrDisty = IFNULL(pIsCustOrDisty,isCustOrDisty)  \n" +
                "			AND mfgType = IFNULL(pmfgType, mfgType);  \n" +
                "	ELSE  \n" +
                "		SELECT  id,mfgCode,mfgName,legalName,contact,faxNumber,isActive,mfgType,isCustOrDisty  ,  \n" +
                "            fun_getUserNameByEmployeID(salesCommissionTo) salesCommissionTo,  \n" +
                "            fun_getFOBById(freeOnBoardId) freeOnBoardMst ,  \n" +
                "			(SELECT gencCategoryName FROM genericcategory WHERE gencCategoryID = paymentTermsID) Terms,  \n" +
                "            (select GROUP_CONCAT(fun_GetFormattedContactPersonName(cp.firstName, cp.middleName, cp.lastName, vContPersonNameFormat))  \n" +
                "				from contactperson cp where cp.refTransID = id AND cp.refTableName = 'mfgcodemst' AND cp.isPrimary = 1 AND cp.isActive = 1 AND cp.isDeleted = 0 ) contPersonList,  \n" +
                "			isDeleted  \n" +
                "		FROM mfgcodemst  \n" +
                "		WHERE  id = IFNULL(pId,id) AND  \n" +
                "			isCustOrDisty = IFNULL(pIsCustOrDisty,isCustOrDisty)  \n" +
                "			AND mfgType = IFNULL(pmfgType, mfgType) AND  \n" +
                "			(CASE WHEN (pFromdate is not null and pTodate is not null) THEN  \n" +
                "						((DATE(fun_CovnertDateTimeByTimezoneValue(createdAt,v_TimeZone)) between pFromdate and pTodate)  \n" +
                "							or (DATE(fun_CovnertDateTimeByTimezoneValue(updatedAt,v_TimeZone)) between pFromdate and pTodate))  \n" +
                "						ELSE 1 = 1 END);  \n" +
                "    END IF;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 24-02-2022 *********************************** */
                "Drop procedure if exists `Sproc_Uti_AddExistingPrimaryContactDet`;  \n" +
                "CREATE PROCEDURE `Sproc_Uti_AddExistingPrimaryContactDet`(  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE vCurrUTCDateTime DATETIME;  \n" +
                "	DECLARE i INT DEFAULT 0;  \n" +
                "	DECLARE totCustContPerson INT DEFAULT 0;  \n" +
                "  \n" +
                "	DECLARE EXIT HANDLER FOR SQLEXCEPTION  \n" +
                "	BEGIN  \n" +
                "		ROLLBACK;  \n" +
                "		RESIGNAL;  \n" +
                "	END;  \n" +
                "	DECLARE EXIT HANDLER FOR SQLWARNING  \n" +
                "	  BEGIN  \n" +
                "		ROLLBACK;  \n" +
                "		RESIGNAL;  \n" +
                "	END;  \n" +
                "  \n" +
                "	START TRANSACTION;  \n" +
                "	SELECT fun_DatetimetoUTCDateTime() INTO vCurrUTCDateTime;  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_AddContactList ;  \n" +
                "	CREATE TEMPORARY TABLE temp_AddContactList AS  \n" +
                "	SELECT mfg.id `refTransID` , 'mfgcodemst' `refTableName` ,  \n" +
                "		SUBSTRING_INDEX(SUBSTRING_INDEX(mfg.primaryContactName, ' ', 1), ' ', -1) `firstName`,  \n" +
                "		IF(LENGTH(primaryContactName) - LENGTH(REPLACE(mfg.primaryContactName, ' ', ''))>1,  SUBSTRING_INDEX(SUBSTRING_INDEX(mfg.primaryContactName, ' ', 2), ' ', -1) ,NULL) `middleName` ,  \n" +
                "		SUBSTRING_INDEX(SUBSTRING_INDEX(mfg.primaryContactName, ' ', 3), ' ', -1) `lastName` ,  \n" +
                "		1 `createdBy`, vCurrUTCDateTime `createdAt`, 1 `createByRoleId` ,  \n" +
                "		1 `updatedBy`, vCurrUTCDateTime `updatedAt`, 1 `updateByRoleId`  \n" +
                "	FROM `mfgcodemst` mfg  \n" +
                "	WHERE mfg.isDeleted = 0  \n" +
                "	AND mfg.primaryContactName IS NOT NULL  \n" +
                "	;  \n" +
                "  \n" +
                "    # Remove Duplicate Entry.  \n" +
                "	Delete tt from temp_AddContactList tt  \n" +
                "			LEFT JOIN contactperson Cp ON ifnull(cp.firstName,'') = ifnull(tt.firstName,'') AND ifnull(cp.middleName, '') = ifnull(tt.middleName,'') ANd ifnull(cp.lastName,'') = ifnull(tt.lastName,'') and cp.isDeleted = 0  \n" +
                "			where cp.personId is not null OR tt.firstName is null or tt.firstName = '';  \n" +
                "  \n" +
                "	SELECT COUNT(1) INTO totCustContPerson  \n" +
                "	FROM temp_AddContactList ;  \n" +
                "  \n" +
                "	WHILE i < totCustContPerson DO  \n" +
                "			INSERT INTO `contactperson` (`refTransID`,`refTableName`,`firstName`,`middleName`,`lastName`,  \n" +
                "				`createdBy`,`createdAt`,`createByRoleId`,  \n" +
                "				`updatedBy`,`updatedAt`,`updateByRoleId`)  \n" +
                "			SELECT  `refTransID` , `refTableName` ,  `firstName`, `middleName` , `lastName` ,  \n" +
                "				 `createdBy` ,  `createdAt`, `createByRoleId` ,  \n" +
                "				 `updatedBy` ,  `updatedAt`, `updateByRoleId`  \n" +
                "			FROM temp_AddContactList  \n" +
                "			LIMIT i,1;  \n" +
                "  \n" +
                "		SET i = i + 1;  \n" +
                "	END WHILE ;  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_AddContactList ;  \n" +
                "  \n" +
                "	COMMIT;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** New Script -> 24-02-2022 *********************************** */
                "Drop Procedure if exists `Sproc_checkDelete_contactperson`;  \n" +
                "CREATE PROCEDURE `Sproc_checkDelete_contactperson`(  \n" +
                "	IN tableName VARCHAR(255),  \n" +
                "	IN IDs LONGTEXT,  \n" +
                "	IN deletedBy INT,  \n" +
                "	IN entityID VARCHAR(255),  \n" +
                "	IN refrenceIDs LONGTEXT,  \n" +
                "	IN countList INT,  \n" +
                "    IN pRoleID INT  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "DROP TEMPORARY TABLE IF EXISTS tempContactperson;  \n" +
                "	SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempContactperson as  \n" +
                "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"contactperson\" else \"\" end as msg FROM employee_contactperson WHERE contactPersonId IN (',IDs,') AND isDeleted = 0 LIMIT 1)  \n" +
                "		UNION ALL  \n" +
                "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"packing_slip_material_receive_det_supplier_rma\" else \"\" end as msg FROM packing_slip_material_receive WHERE receiptType = \"R\" AND (rmaShippingContactPersonID IN (',IDs,') OR rmaMarkForContactPersonID IN (',IDs,')) AND isDeleted = 0 LIMIT 1)  \n" +
                "		UNION ALL  \n" +
                "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"packing_slip_material_receive_det_debit_memo\" else \"\" end as msg FROM packing_slip_material_receive WHERE receiptType = \"D\" AND billToContactPersonID IN (',IDs,') AND isDeleted = 0 LIMIT 1)  \n" +
                "		UNION ALL  \n" +
                "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"packingslip_invoice_payment_cust_refund\" else \"\" end as msg FROM packingslip_invoice_payment  WHERE (billToContactPersonID IN (',IDs,') OR payToContactPersonID IN (',IDs,')) AND refPaymentMode = \"CR\" AND isDeleted = 0 LIMIT 1)  \n" +
                "		UNION ALL  \n" +
                "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"customer_packingslip\" else \"\" end as msg FROM customer_packingslip WHERE transType = \"P\" AND (billingContactPersonID IN (',IDs,') OR shippingContactPersonID IN (',IDs,') OR intermediateContactPersonID IN (',IDs,')) AND isDeleted = 0 LIMIT 1)  \n" +
                "		UNION ALL  \n" +
                "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"customer_packingslip_invoice\" else \"\" end as msg FROM customer_packingslip WHERE transType = \"I\" AND (billingContactPersonID IN (',IDs,') OR shippingContactPersonID IN (',IDs,') OR intermediateContactPersonID IN (',IDs,')) AND isDeleted = 0 LIMIT 1)  \n" +
                "		UNION ALL  \n" +
                "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"customer_packingslip_creditmemo\" else \"\" end as msg FROM customer_packingslip WHERE transType = \"C\" AND (billingContactPersonID IN (',IDs,') OR shippingContactPersonID IN (',IDs,') OR intermediateContactPersonID IN (',IDs,')) AND isDeleted = 0 LIMIT 1)  \n" +
                "		UNION ALL  \n" +
                "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"purchase_order_mst\" else \"\" end as msg FROM purchase_order_mst WHERE  (supplierContactPersonID IN (',IDs,') OR shippingContactPersonID IN (',IDs,') OR intermediateContactPersonID IN (',IDs,')) AND isDeleted = 0 LIMIT 1)  \n" +
                "		UNION ALL  \n" +
                "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"purchase_order_mst\" else \"\" end as msg FROM purchase_order_line_release_det WHERE shippingContactPersonID IN (',IDs,') AND isDeleted = 0 LIMIT 1)  \n" +
                "		UNION ALL  \n" +
                "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"supplier_quote_mst\" else \"\" end as msg FROM supplier_quote_mst WHERE isDeleted = 0 AND (billingContactPersonID IN (',IDs,') OR shippingContactPersonID IN (',IDs,')) LIMIT 1)  \n" +
                "		UNION ALL  \n" +
                "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"rfq_assemblies\" else \"\" end as msg FROM rfq_assemblies_quotation_submitted WHERE isDeleted = 0 AND (custBillingContactPersonID IN (',IDs,') OR custShippingContactPersonID IN (',IDs,')) LIMIT 1)  \n" +
                "        UNION ALL  \n" +
                "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"salesordermst\" else \"\" end as msg FROM salesordermst WHERE isDeleted = 0 AND (billingContactPersonID IN (',IDs,') OR contactPersonID IN (',IDs,') OR shippingContactPersonID IN (',IDs,') OR intermediateContactPersonID IN (',IDs,')) LIMIT 1)  \n" +
                "        UNION ALL  \n" +
                "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"salesordermst\" else \"\" end as msg FROM salesshippingmst WHERE isDeleted = 0 AND shippingContactPersonID IN (',IDs,') LIMIT 1)  \n" +
                "		');  \n" +
                "/*	  (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"packing_slip_material_receive\" else \"\" end as msg FROM packing_slip_material_receive WHERE isDeleted = 0 AND (billToConactPerson IN (',IDs,')  \n" +
                "			OR shipToContactPersonID IN (',IDs,') OR rmaShippingContactPersonID IN (',IDs,') OR rmaMarkForContactPersonID IN (',IDs,')) LIMIT 1)  \n" +
                "      UNION ALL  \n" +
                "      (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"packingslip_invoice_payment\" else \"\" end as msg FROM packingslip_invoice_payment WHERE isDeleted = 0 AND (payToContactPersonID IN (',IDs,') OR billToContactPersonID IN (',IDs,')) LIMIT 1)  \n" +
                "      UNION ALL  \n" +
                "      (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"rfqforms\" else \"\" end as msg FROM rfqforms WHERE isDeleted = 0 AND (custBillingConactPersonID IN (',IDs,') OR custShippingConactPersonID IN (',IDs,')) LIMIT 1)  \n" +
                "  */  \n" +
                "  \n" +
                "  	PREPARE stmt FROM @SQL;  \n" +
                "	EXECUTE stmt;  \n" +
                "  \n" +
                "    IF(countList=FALSE) THEN  \n" +
                "		IF(SELECT SUM(t.cnt) FROM tempContactperson t)=0 THEN  \n" +
                "			CREATE TEMPORARY TABLE IF NOT EXISTS tempSetIsDefaultContactperson AS  \n" +
                "				SELECT cp.refTransID,cp.refTableName FROM contactperson cp  WHERE FIND_IN_SET(cp.personId,IDs) AND cp.isDeleted = 0  group by cp.refTransID,cp.refTableName;  \n" +
                "  \n" +
                "			SET @SQl1 = CONCAT('update contactperson set isDeleted=',1,',deletedBy=',deletedBy,', deleteByRoleId = ',pRoleID,', deletedAt=\"',fun_DatetimetoUTCDateTime(),'\" where personId in(',IDs,') and deletedAt is NULL');  \n" +
                "			PREPARE stmt1 FROM @SQL1;  \n" +
                "			EXECUTE stmt1;  \n" +
                "  \n" +
                "            # If Default Contact person is Deleted then Set new Default Contact Person.  \n" +
                "            IF(EXISTS (SELECT 1 FROM tempSetIsDefaultContactperson)) THEN  \n" +
                "				CREATE TEMPORARY TABLE IF NOT EXISTS tempPersonId AS (SELECT MIN(cp.personId) personId, count(cp.personId) activePersonCnt FROM contactperson cp  \n" +
                "						WHERE EXISTS (  \n" +
                "							SELECT 1 FROM tempSetIsDefaultContactperson tcp WHERE tcp.refTransID = cp.refTransID AND tcp.refTableName = cp.refTableName  \n" +
                "							) AND cp.isDeleted = 0 AND cp.isActive = 1 GROUP BY cp.refTransID,cp.refTableName);  \n" +
                "				UPDATE contactperson SET isDefault =1 WHERE personId IN  \n" +
                "					(SELECT personId FROM tempPersonId where activePersonCnt = 1);  \n" +
                "				DROP TEMPORARY TABLE IF EXISTS tempPersonId;  \n" +
                "			END IF;  \n" +
                "			DROP TEMPORARY TABLE IF EXISTS tempSetIsDefaultContactperson;  \n" +
                "  \n" +
                "			SELECT * FROM tempContactperson WHERE IFNULL(cnt,0) > 0 AND msg IS NOT NULL AND msg != \"\";  \n" +
                "		ELSE  \n" +
                "			SELECT SUM(t.cnt) AS TotalCount, GROUP_CONCAT(t.msg SEPARATOR ',') AS Message FROM tempContactperson t;  \n" +
                "		END IF;  \n" +
                "	ELSE  \n" +
                "		SELECT t1.cnt,t2.display_page_name AS msg  \n" +
                "		FROM tempContactperson t1  \n" +
                "		INNER JOIN table_mapping_details t2 ON t1.msg=t2.tabel_name  \n" +
                "			WHERE IFNULL(cnt,0) > 0 AND msg IS NOT NULL AND msg != \"\"  \n" +
                "			ORDER BY t2.display_page_name;  \n" +
                "	END IF;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempContactperson;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 24-02-2022 *********************************** */
                "Drop procedure if exists `Sproc_Uti_removeDuplicatePrimaryContactDet`;  \n" +
                "CREATE PROCEDURE `Sproc_Uti_removeDuplicatePrimaryContactDet`(  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "  \n" +
                "	DECLARE EXIT HANDLER FOR SQLEXCEPTION  \n" +
                "	BEGIN  \n" +
                "		ROLLBACK;  \n" +
                "		RESIGNAL;  \n" +
                "	END;  \n" +
                "	DECLARE EXIT HANDLER FOR SQLWARNING  \n" +
                "	  BEGIN  \n" +
                "		ROLLBACK;  \n" +
                "		RESIGNAL;  \n" +
                "	END;  \n" +
                "  \n" +
                "	START TRANSACTION;  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE if exists tempDupPersonId;  \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE if not exists tempDupPersonId as  \n" +
                "		select a.dupPersonId as dupPersonIdList, a.maxPersonId as mainPersonId from (select group_concat(personId) dupPersonId, max(personId) maxPersonId from contactperson where isDeleted = 0  \n" +
                "			Group by refTableName, refTransID, firstName, middleName, lastName) a where dupPersonId like '%,%';  \n" +
                "		# [-S] employee_contactperson  \n" +
                "		SELECT count(1) FROM employee_contactperson tbl  \n" +
                "				INNER JOIN tempDupPersonId t on (FIND_IN_SET(tbl.contactPersonId ,t.dupPersonIdList) and tbl.contactPersonId <> t.mainPersonId)  \n" +
                "			WHERE tbl.isDeleted = 0;  \n" +
                "		Update employee_contactperson tbl  \n" +
                "				INNER JOIN tempDupPersonId t on (FIND_IN_SET(tbl.contactPersonId ,t.dupPersonIdList) and tbl.contactPersonId <> t.mainPersonId)  \n" +
                "				SET tbl.contactPersonId = t.mainPersonId  \n" +
                "			WHERE tbl.isDeleted = 0;  \n" +
                "		# [-E] employee_contactperson  \n" +
                "  \n" +
                "		# [-S] salesordermst  \n" +
                "		SELECT count(1) FROM salesordermst tbl  \n" +
                "				INNER JOIN tempDupPersonId t on  \n" +
                "					(FIND_IN_SET(tbl.billingContactPersonID ,t.dupPersonIdList) AND tbl.billingContactPersonID <> t.mainPersonId)  \n" +
                "			WHERE tbl.isDeleted = 0;  \n" +
                "		Update salesordermst tbl  \n" +
                "				INNER JOIN tempDupPersonId t on  \n" +
                "				   (FIND_IN_SET(tbl.billingContactPersonID ,t.dupPersonIdList) AND tbl.billingContactPersonID <> t.mainPersonId)  \n" +
                "				SET tbl.billingContactPersonID = t.mainPersonId  \n" +
                "			WHERE tbl.isDeleted = 0;  \n" +
                "		SELECT count(1) FROM salesordermst tbl  \n" +
                "				INNER JOIN tempDupPersonId t on  \n" +
                "					(FIND_IN_SET(tbl.contactPersonID ,t.dupPersonIdList) AND tbl.contactPersonID <> t.mainPersonId)  \n" +
                "			WHERE tbl.isDeleted = 0;  \n" +
                "		Update salesordermst tbl  \n" +
                "				INNER JOIN tempDupPersonId t on  \n" +
                "				 (FIND_IN_SET(tbl.contactPersonID ,t.dupPersonIdList) AND tbl.contactPersonID <> t.mainPersonId)  \n" +
                "				 SET tbl.contactPersonId = t.mainPersonId  \n" +
                "			WHERE tbl.isDeleted = 0;  \n" +
                "		SELECT count(1) FROM salesordermst tbl  \n" +
                "				INNER JOIN tempDupPersonId t on  \n" +
                "				(FIND_IN_SET(tbl.shippingContactPersonID ,t.dupPersonIdList) AND tbl.shippingContactPersonID <> t.mainPersonId)  \n" +
                "			WHERE tbl.isDeleted = 0;  \n" +
                "		Update salesordermst tbl  \n" +
                "				INNER JOIN tempDupPersonId t on  \n" +
                "				  (FIND_IN_SET(tbl.shippingContactPersonID ,t.dupPersonIdList) AND tbl.shippingContactPersonID <> t.mainPersonId)  \n" +
                "				SET tbl.shippingContactPersonID = t.mainPersonId  \n" +
                "			WHERE tbl.isDeleted = 0;  \n" +
                "		SELECT count(1) FROM salesordermst tbl  \n" +
                "				INNER JOIN tempDupPersonId t on  \n" +
                "				   (FIND_IN_SET(tbl.intermediateContactPersonID ,t.dupPersonIdList) AND tbl.intermediateContactPersonID <> t.mainPersonId)  \n" +
                "			WHERE tbl.isDeleted = 0;  \n" +
                "		Update salesordermst tbl  \n" +
                "				INNER JOIN tempDupPersonId t on  \n" +
                "					(FIND_IN_SET(tbl.intermediateContactPersonID ,t.dupPersonIdList) AND tbl.intermediateContactPersonID <> t.mainPersonId)  \n" +
                "				SET tbl.intermediateContactPersonID = t.mainPersonId  \n" +
                "			WHERE tbl.isDeleted = 0;  \n" +
                "		# [-E] salesordermst  \n" +
                "  \n" +
                "		# [-S] packing_slip_material_receive  \n" +
                "		SELECT count(1) FROM packing_slip_material_receive tbl  \n" +
                "				INNER JOIN tempDupPersonId t on  \n" +
                "					(FIND_IN_SET(tbl.rmaShippingContactPersonID ,t.dupPersonIdList) AND tbl.rmaShippingContactPersonID <> t.mainPersonId)  \n" +
                "			WHERE tbl.receiptType = \"R\" AND tbl.isDeleted = 0;  \n" +
                "		Update packing_slip_material_receive tbl  \n" +
                "				INNER JOIN tempDupPersonId t on  \n" +
                "				  (FIND_IN_SET(tbl.rmaShippingContactPersonID ,t.dupPersonIdList) AND tbl.rmaShippingContactPersonID <> t.mainPersonId)  \n" +
                "				SET tbl.rmaShippingContactPersonID = t.mainPersonId  \n" +
                "			WHERE tbl.receiptType = \"R\" AND tbl.isDeleted = 0;  \n" +
                "		SELECT count(1) FROM packing_slip_material_receive tbl  \n" +
                "				INNER JOIN tempDupPersonId t on  \n" +
                "					(FIND_IN_SET(tbl.rmaMarkForContactPersonID ,t.dupPersonIdList) AND tbl.rmaMarkForContactPersonID <> t.mainPersonId)  \n" +
                "			WHERE tbl.receiptType = \"R\" AND tbl.isDeleted = 0;  \n" +
                "		Update packing_slip_material_receive tbl  \n" +
                "				INNER JOIN tempDupPersonId t on  \n" +
                "				 (FIND_IN_SET(tbl.rmaMarkForContactPersonID ,t.dupPersonIdList) AND tbl.rmaMarkForContactPersonID <> t.mainPersonId)  \n" +
                "				 SET tbl.rmaMarkForContactPersonID = t.mainPersonId  \n" +
                "			WHERE tbl.receiptType = \"R\" AND tbl.isDeleted = 0;  \n" +
                "  \n" +
                "		SELECT count(1) FROM packing_slip_material_receive tbl  \n" +
                "				INNER JOIN tempDupPersonId t on  \n" +
                "					(FIND_IN_SET(tbl.billToContactPersonID ,t.dupPersonIdList) AND tbl.billToContactPersonID <> t.mainPersonId)  \n" +
                "			WHERE receiptType = \"D\" AND tbl.isDeleted = 0;  \n" +
                "		Update packing_slip_material_receive tbl  \n" +
                "				INNER JOIN tempDupPersonId t on  \n" +
                "				  (FIND_IN_SET(tbl.billToContactPersonID ,t.dupPersonIdList) AND tbl.billToContactPersonID <> t.mainPersonId)  \n" +
                "				SET tbl.billToContactPersonID = t.mainPersonId  \n" +
                "			WHERE receiptType = \"D\" AND tbl.isDeleted = 0;  \n" +
                "		# [-E] packing_slip_material_receive  \n" +
                "  \n" +
                "		# [-S] packingslip_invoice_payment  \n" +
                "		SELECT count(1) FROM packingslip_invoice_payment tbl  \n" +
                "				INNER JOIN tempDupPersonId t on  \n" +
                "					(FIND_IN_SET(tbl.billToContactPersonID ,t.dupPersonIdList) AND tbl.billToContactPersonID <> t.mainPersonId)  \n" +
                "			WHERE refPaymentMode = \"CR\" AND tbl.isDeleted = 0;  \n" +
                "		Update packingslip_invoice_payment tbl  \n" +
                "				INNER JOIN tempDupPersonId t on  \n" +
                "				  (FIND_IN_SET(tbl.billToContactPersonID ,t.dupPersonIdList) AND tbl.billToContactPersonID <> t.mainPersonId)  \n" +
                "				SET tbl.billToContactPersonID = t.mainPersonId  \n" +
                "			WHERE refPaymentMode = \"CR\" AND tbl.isDeleted = 0;  \n" +
                "  \n" +
                "		  SELECT count(1) FROM packingslip_invoice_payment tbl  \n" +
                "				INNER JOIN tempDupPersonId t on  \n" +
                "					(FIND_IN_SET(tbl.payToContactPersonID ,t.dupPersonIdList) AND tbl.payToContactPersonID <> t.mainPersonId)  \n" +
                "			WHERE refPaymentMode = \"CR\" AND tbl.isDeleted = 0;  \n" +
                "		Update packingslip_invoice_payment tbl  \n" +
                "				INNER JOIN tempDupPersonId t on  \n" +
                "				  (FIND_IN_SET(tbl.payToContactPersonID ,t.dupPersonIdList) AND tbl.payToContactPersonID <> t.mainPersonId)  \n" +
                "				SET tbl.payToContactPersonID = t.mainPersonId  \n" +
                "			WHERE refPaymentMode = \"CR\" AND tbl.isDeleted = 0;  \n" +
                "		# [-E] packingslip_invoice_payment  \n" +
                "  \n" +
                "		# [-S] customer_packingslip  \n" +
                "		SELECT count(1) FROM customer_packingslip tbl  \n" +
                "				INNER JOIN tempDupPersonId t on  \n" +
                "					(FIND_IN_SET(tbl.billingContactPersonID ,t.dupPersonIdList) AND tbl.billingContactPersonID <> t.mainPersonId)  \n" +
                "			WHERE transType = \"P\" AND tbl.isDeleted = 0;  \n" +
                "		Update customer_packingslip tbl  \n" +
                "				INNER JOIN tempDupPersonId t on  \n" +
                "				  (FIND_IN_SET(tbl.billingContactPersonID ,t.dupPersonIdList) AND tbl.billingContactPersonID <> t.mainPersonId)  \n" +
                "				SET tbl.billingContactPersonID = t.mainPersonId  \n" +
                "			WHERE transType = \"P\" AND tbl.isDeleted = 0;  \n" +
                "  \n" +
                "		SELECT count(1) FROM customer_packingslip tbl  \n" +
                "				INNER JOIN tempDupPersonId t on  \n" +
                "					(FIND_IN_SET(tbl.shippingContactPersonID ,t.dupPersonIdList) AND tbl.shippingContactPersonID <> t.mainPersonId)  \n" +
                "			WHERE transType = \"P\" AND tbl.isDeleted = 0;  \n" +
                "		Update customer_packingslip tbl  \n" +
                "				INNER JOIN tempDupPersonId t on  \n" +
                "				  (FIND_IN_SET(tbl.shippingContactPersonID ,t.dupPersonIdList) AND tbl.shippingContactPersonID <> t.mainPersonId)  \n" +
                "				SET tbl.shippingContactPersonID = t.mainPersonId  \n" +
                "			WHERE transType = \"P\" AND tbl.isDeleted = 0;  \n" +
                "  \n" +
                "		SELECT count(1) FROM customer_packingslip tbl  \n" +
                "				INNER JOIN tempDupPersonId t on  \n" +
                "					(FIND_IN_SET(tbl.intermediateContactPersonID ,t.dupPersonIdList) AND tbl.intermediateContactPersonID <> t.mainPersonId)  \n" +
                "			WHERE transType = \"P\" AND tbl.isDeleted = 0;  \n" +
                "		Update customer_packingslip tbl  \n" +
                "				INNER JOIN tempDupPersonId t on  \n" +
                "				  (FIND_IN_SET(tbl.intermediateContactPersonID ,t.dupPersonIdList) AND tbl.intermediateContactPersonID <> t.mainPersonId)  \n" +
                "				SET tbl.intermediateContactPersonID = t.mainPersonId  \n" +
                "			WHERE transType = \"P\" AND tbl.isDeleted = 0;  \n" +
                "  \n" +
                "		SELECT count(1) FROM customer_packingslip tbl  \n" +
                "				INNER JOIN tempDupPersonId t on  \n" +
                "					(FIND_IN_SET(tbl.billingContactPersonID ,t.dupPersonIdList) AND tbl.billingContactPersonID <> t.mainPersonId)  \n" +
                "			WHERE transType = \"I\" AND tbl.isDeleted = 0;  \n" +
                "		Update customer_packingslip tbl  \n" +
                "				INNER JOIN tempDupPersonId t on  \n" +
                "				  (FIND_IN_SET(tbl.billingContactPersonID ,t.dupPersonIdList) AND tbl.billingContactPersonID <> t.mainPersonId)  \n" +
                "				SET tbl.billingContactPersonID = t.mainPersonId  \n" +
                "			WHERE transType = \"I\" AND tbl.isDeleted = 0;  \n" +
                "  \n" +
                "		SELECT count(1) FROM customer_packingslip tbl  \n" +
                "				INNER JOIN tempDupPersonId t on  \n" +
                "					(FIND_IN_SET(tbl.shippingContactPersonID ,t.dupPersonIdList) AND tbl.shippingContactPersonID <> t.mainPersonId)  \n" +
                "			WHERE transType = \"I\" AND tbl.isDeleted = 0;  \n" +
                "		Update customer_packingslip tbl  \n" +
                "				INNER JOIN tempDupPersonId t on  \n" +
                "				  (FIND_IN_SET(tbl.shippingContactPersonID ,t.dupPersonIdList) AND tbl.shippingContactPersonID <> t.mainPersonId)  \n" +
                "				SET tbl.shippingContactPersonID = t.mainPersonId  \n" +
                "			WHERE transType = \"I\" AND tbl.isDeleted = 0;  \n" +
                "  \n" +
                "		SELECT count(1) FROM customer_packingslip tbl  \n" +
                "				INNER JOIN tempDupPersonId t on  \n" +
                "					(FIND_IN_SET(tbl.intermediateContactPersonID ,t.dupPersonIdList) AND tbl.intermediateContactPersonID <> t.mainPersonId)  \n" +
                "			WHERE transType = \"I\" AND tbl.isDeleted = 0;  \n" +
                "		Update customer_packingslip tbl  \n" +
                "				INNER JOIN tempDupPersonId t on  \n" +
                "				  (FIND_IN_SET(tbl.intermediateContactPersonID ,t.dupPersonIdList) AND tbl.intermediateContactPersonID <> t.mainPersonId)  \n" +
                "				SET tbl.intermediateContactPersonID = t.mainPersonId  \n" +
                "			WHERE transType = \"I\" AND tbl.isDeleted = 0;  \n" +
                "  \n" +
                "		SELECT count(1) FROM customer_packingslip tbl  \n" +
                "				INNER JOIN tempDupPersonId t on  \n" +
                "					(FIND_IN_SET(tbl.billingContactPersonID ,t.dupPersonIdList) AND tbl.billingContactPersonID <> t.mainPersonId)  \n" +
                "			WHERE transType = \"C\" AND tbl.isDeleted = 0;  \n" +
                "		Update customer_packingslip tbl  \n" +
                "				INNER JOIN tempDupPersonId t on  \n" +
                "				  (FIND_IN_SET(tbl.billingContactPersonID ,t.dupPersonIdList) AND tbl.billingContactPersonID <> t.mainPersonId)  \n" +
                "				SET tbl.billingContactPersonID = t.mainPersonId  \n" +
                "			WHERE transType = \"C\" AND tbl.isDeleted = 0;  \n" +
                "  \n" +
                "		SELECT count(1) FROM customer_packingslip tbl  \n" +
                "				INNER JOIN tempDupPersonId t on  \n" +
                "					(FIND_IN_SET(tbl.shippingContactPersonID ,t.dupPersonIdList) AND tbl.shippingContactPersonID <> t.mainPersonId)  \n" +
                "			WHERE transType = \"C\" AND tbl.isDeleted = 0;  \n" +
                "		Update customer_packingslip tbl  \n" +
                "				INNER JOIN tempDupPersonId t on  \n" +
                "				  (FIND_IN_SET(tbl.shippingContactPersonID ,t.dupPersonIdList) AND tbl.shippingContactPersonID <> t.mainPersonId)  \n" +
                "				SET tbl.shippingContactPersonID = t.mainPersonId  \n" +
                "			WHERE transType = \"C\" AND tbl.isDeleted = 0;  \n" +
                "  \n" +
                "		SELECT count(1) FROM customer_packingslip tbl  \n" +
                "				INNER JOIN tempDupPersonId t on  \n" +
                "					(FIND_IN_SET(tbl.intermediateContactPersonID ,t.dupPersonIdList) AND tbl.intermediateContactPersonID <> t.mainPersonId)  \n" +
                "			WHERE transType = \"C\" AND tbl.isDeleted = 0;  \n" +
                "		Update customer_packingslip tbl  \n" +
                "				INNER JOIN tempDupPersonId t on  \n" +
                "				  (FIND_IN_SET(tbl.intermediateContactPersonID ,t.dupPersonIdList) AND tbl.intermediateContactPersonID <> t.mainPersonId)  \n" +
                "				SET tbl.intermediateContactPersonID = t.mainPersonId  \n" +
                "			WHERE transType = \"C\" AND tbl.isDeleted = 0;  \n" +
                "		# [-E] customer_packingslip  \n" +
                "  \n" +
                "		# [-S] purchase_order_mst  \n" +
                "		SELECT count(1) FROM purchase_order_mst tbl  \n" +
                "				INNER JOIN tempDupPersonId t on  \n" +
                "					(FIND_IN_SET(tbl.supplierContactPersonID ,t.dupPersonIdList) AND tbl.supplierContactPersonID <> t.mainPersonId)  \n" +
                "			WHERE tbl.isDeleted = 0;  \n" +
                "		Update purchase_order_mst tbl  \n" +
                "				INNER JOIN tempDupPersonId t on  \n" +
                "				  (FIND_IN_SET(tbl.supplierContactPersonID ,t.dupPersonIdList) AND tbl.supplierContactPersonID <> t.mainPersonId)  \n" +
                "				SET tbl.supplierContactPersonID = t.mainPersonId  \n" +
                "			WHERE tbl.isDeleted = 0;  \n" +
                "  \n" +
                "		 SELECT count(1) FROM purchase_order_mst tbl  \n" +
                "				INNER JOIN tempDupPersonId t on  \n" +
                "					(FIND_IN_SET(tbl.shippingContactPersonID ,t.dupPersonIdList) AND tbl.shippingContactPersonID <> t.mainPersonId)  \n" +
                "			WHERE tbl.isDeleted = 0;  \n" +
                "		Update purchase_order_mst tbl  \n" +
                "				INNER JOIN tempDupPersonId t on  \n" +
                "				  (FIND_IN_SET(tbl.shippingContactPersonID ,t.dupPersonIdList) AND tbl.shippingContactPersonID <> t.mainPersonId)  \n" +
                "				SET tbl.shippingContactPersonID = t.mainPersonId  \n" +
                "			WHERE tbl.isDeleted = 0;  \n" +
                "  \n" +
                "		 SELECT count(1) FROM purchase_order_mst tbl  \n" +
                "				INNER JOIN tempDupPersonId t on  \n" +
                "					(FIND_IN_SET(tbl.intermediateContactPersonID ,t.dupPersonIdList) AND tbl.intermediateContactPersonID <> t.mainPersonId)  \n" +
                "			WHERE tbl.isDeleted = 0;  \n" +
                "		Update purchase_order_mst tbl  \n" +
                "				INNER JOIN tempDupPersonId t on  \n" +
                "				  (FIND_IN_SET(tbl.intermediateContactPersonID ,t.dupPersonIdList) AND tbl.intermediateContactPersonID <> t.mainPersonId)  \n" +
                "				SET tbl.supplierContactPersonID = t.mainPersonId  \n" +
                "			WHERE tbl.isDeleted = 0;  \n" +
                "		# [-E] purchase_order_mst  \n" +
                "  \n" +
                "		# [-S] purchase_order_line_release_det  \n" +
                "		SELECT count(1) FROM purchase_order_line_release_det tbl  \n" +
                "				INNER JOIN tempDupPersonId t on  \n" +
                "					(FIND_IN_SET(tbl.shippingContactPersonID ,t.dupPersonIdList) AND tbl.shippingContactPersonID <> t.mainPersonId)  \n" +
                "			WHERE tbl.isDeleted = 0;  \n" +
                "		Update purchase_order_line_release_det tbl  \n" +
                "				INNER JOIN tempDupPersonId t on  \n" +
                "				  (FIND_IN_SET(tbl.shippingContactPersonID ,t.dupPersonIdList) AND tbl.shippingContactPersonID <> t.mainPersonId)  \n" +
                "				SET tbl.shippingContactPersonID = t.mainPersonId  \n" +
                "			WHERE tbl.isDeleted = 0;  \n" +
                "		# [-E] purchase_order_line_release_det  \n" +
                "  \n" +
                "		# [-S] supplier_quote_mst  \n" +
                "		SELECT count(1) FROM supplier_quote_mst tbl  \n" +
                "				INNER JOIN tempDupPersonId t on  \n" +
                "					(FIND_IN_SET(tbl.billingContactPersonID ,t.dupPersonIdList) AND tbl.billingContactPersonID <> t.mainPersonId)  \n" +
                "			WHERE tbl.isDeleted = 0;  \n" +
                "		Update supplier_quote_mst tbl  \n" +
                "				INNER JOIN tempDupPersonId t on  \n" +
                "				  (FIND_IN_SET(tbl.billingContactPersonID ,t.dupPersonIdList) AND tbl.billingContactPersonID <> t.mainPersonId)  \n" +
                "				SET tbl.billingContactPersonID = t.mainPersonId  \n" +
                "			WHERE tbl.isDeleted = 0;  \n" +
                "  \n" +
                "		 SELECT count(1) FROM supplier_quote_mst tbl  \n" +
                "				INNER JOIN tempDupPersonId t on  \n" +
                "					(FIND_IN_SET(tbl.shippingContactPersonID ,t.dupPersonIdList) AND tbl.shippingContactPersonID <> t.mainPersonId)  \n" +
                "			WHERE tbl.isDeleted = 0;  \n" +
                "		Update supplier_quote_mst tbl  \n" +
                "				INNER JOIN tempDupPersonId t on  \n" +
                "				  (FIND_IN_SET(tbl.shippingContactPersonID ,t.dupPersonIdList) AND tbl.shippingContactPersonID <> t.mainPersonId)  \n" +
                "				SET tbl.shippingContactPersonID = t.mainPersonId  \n" +
                "			WHERE tbl.isDeleted = 0;  \n" +
                "		# [-E] supplier_quote_mst  \n" +
                "  \n" +
                "		# [-S] rfq_assemblies_quotation_submitted  \n" +
                "		SELECT count(1) FROM rfq_assemblies_quotation_submitted tbl  \n" +
                "				INNER JOIN tempDupPersonId t on  \n" +
                "					(FIND_IN_SET(tbl.custBillingContactPersonID ,t.dupPersonIdList) AND tbl.custBillingContactPersonID <> t.mainPersonId)  \n" +
                "			WHERE tbl.isDeleted = 0;  \n" +
                "		Update rfq_assemblies_quotation_submitted tbl  \n" +
                "				INNER JOIN tempDupPersonId t on  \n" +
                "				  (FIND_IN_SET(tbl.custBillingContactPersonID ,t.dupPersonIdList) AND tbl.custBillingContactPersonID <> t.mainPersonId)  \n" +
                "				SET tbl.custBillingContactPersonID = t.mainPersonId  \n" +
                "			WHERE tbl.isDeleted = 0;  \n" +
                "  \n" +
                "		SELECT count(1) FROM rfq_assemblies_quotation_submitted tbl  \n" +
                "				INNER JOIN tempDupPersonId t on  \n" +
                "					(FIND_IN_SET(tbl.custShippingContactPersonID ,t.dupPersonIdList) AND tbl.custShippingContactPersonID <> t.mainPersonId)  \n" +
                "			WHERE tbl.isDeleted = 0;  \n" +
                "		Update rfq_assemblies_quotation_submitted tbl  \n" +
                "				INNER JOIN tempDupPersonId t on  \n" +
                "				  (FIND_IN_SET(tbl.custShippingContactPersonID ,t.dupPersonIdList) AND tbl.custShippingContactPersonID <> t.mainPersonId)  \n" +
                "				SET tbl.custShippingContactPersonID = t.mainPersonId  \n" +
                "			WHERE tbl.isDeleted = 0;  \n" +
                "		# [-E] rfq_assemblies_quotation_submitted  \n" +
                "  \n" +
                "		# [-S] salesshippingmst  \n" +
                "		SELECT count(1) FROM salesshippingmst tbl  \n" +
                "				INNER JOIN tempDupPersonId t on  \n" +
                "					(FIND_IN_SET(tbl.shippingContactPersonID ,t.dupPersonIdList) AND tbl.shippingContactPersonID <> t.mainPersonId)  \n" +
                "			WHERE tbl.isDeleted = 0;  \n" +
                "		Update salesshippingmst tbl  \n" +
                "				INNER JOIN tempDupPersonId t on  \n" +
                "				  (FIND_IN_SET(tbl.shippingContactPersonID ,t.dupPersonIdList) AND tbl.shippingContactPersonID <> t.mainPersonId)  \n" +
                "				SET tbl.shippingContactPersonID = t.mainPersonId  \n" +
                "			WHERE tbl.isDeleted = 0;  \n" +
                "		# [-E] salesshippingmst  \n" +
                "  \n" +
                "		# [-E] contactperson  \n" +
                "		SELECT count(1) FROM contactperson tbl  \n" +
                "				INNER JOIN tempDupPersonId t on  \n" +
                "				   (FIND_IN_SET(tbl.personId ,t.dupPersonIdList) AND tbl.personId <> t.mainPersonId)  \n" +
                "			WHERE tbl.isDeleted = 0;  \n" +
                "		Update contactperson tbl  \n" +
                "				INNER JOIN tempDupPersonId t on  \n" +
                "				   (FIND_IN_SET(tbl.personId ,t.dupPersonIdList) AND tbl.personId <> t.mainPersonId)  \n" +
                "				SET tbl.isDeleted = 1, tbl.deletedBy = '1', tbl.deletedAt = fun_DatetimetoUTCDateTime(), tbl.deleteByRoleId = 1  \n" +
                "			WHERE tbl.isDeleted = 0;  \n" +
                "		# [-E] contactperson  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE if exists tempDupPersonId;  \n" +
                "  \n" +
                "	COMMIT;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** New Script -> 24-02-2022 *********************************** */
                /* **************************** Add Script Version -> 24-02-2022 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1326,'1.00','V1',' US 40746 And User Story 40551: Show Primary contact person in detail tab of customer/supplier page. - Bhavik '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1326:
            allDbChangesArray.push(
                /* **************************** New Script -> 25-02-2022 *********************************** */
                "update feature_mst  \n" +
                "set featureName ='Allow to View/Update PO Header Internal Notes, Release Notes, WO Comment, TBD Comment and Int. Notes at Customer Open Sales Order and Shipment Summary'  \n" +
                "where featureName='Allow to View/Update Comments at Shipment Summary';  \n" +
                /* **************************** Add Script Version -> 25-02-2022  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1327,'1.00','V1','Update Feature name of Shipment Summary Comments - Shweta '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1327:
            allDbChangesArray.push(
                /* **************************** New Script -> 25-02-2022 *********************************** */
                "DROP PROCEDURE IF EXISTS Sproc_getSalesOrderListAgainstShipment;  \n" +
                "CREATE PROCEDURE `Sproc_getSalesOrderListAgainstShipment`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pCustomerID INT,  \n" +
                "    IN pSearchText VARCHAR(1000) ,  \n" +
                "    IN pSoWorkingStatus TINYINT,  \n" +
                "    IN pAllowToUpdateComment TINYINT ,  \n" +
                "    IN pSortByColumn TINYINT  ,  \n" +
                "    IN pSoStatus TINYINT,  \n" +
                "    IN pSortingOrder TINYINT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE vMfgCodeFormat INT;  \n" +
                "    DECLARE headerWhereClause VARCHAR(3000);  \n" +
                "   -- DECLARE detailWhereClause VARCHAR(1000);  \n" +
                "	DECLARE vOrderBy VARCHAR(200);  \n" +
                "   	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;  \n" +
                "	DECLARE vContactPersonFormat INT;  \n" +
                "  \n" +
                "    SELECT fun_getContPersonNameDisplayFormat() INTO vContactPersonFormat;  \n" +
                "	select fun_getMFGCodeNameFormat() into vMfgCodeFormat ;  \n" +
                "  \n" +
                "    IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF pSortByColumn = 1 THEN  \n" +
                "		SET vOrderBy =' order by customerName' ;  \n" +
                "    ELSEIF pSortByColumn = 2 THEN  \n" +
                "		SET vOrderBy =' order by poNumber ' ;  \n" +
                "    ELSEIF pSortByColumn = 3 THEN  \n" +
                "		SET vOrderBy =' order by poDate ' ;  \n" +
                "    ELSEIF pSortByColumn = 4 THEN  \n" +
                "		SET vOrderBy =' order by soDate ' ;  \n" +
                "    ELSE  \n" +
                "		SET vOrderBy =' order by soId Desc ' ;  \n" +
                "    END IF;  \n" +
                "    IF pSortingOrder = 2 THEN  \n" +
                "		SET vOrderBy = concat(vOrderBY , ' Desc');  \n" +
                "    ELSE  \n" +
                "		SET vOrderBy = concat(vOrderBY , ' Asc');  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF pCustomerID IS NOT NULL THEN  \n" +
                "		SET headerWhereClause = concat(\" (salesOrder.customerID=\",pCustomerID,\") \");  \n" +
                "	ELSE  \n" +
                "		SET headerWhereClause = ' 1=1 ';  \n" +
                "    END IF;  \n" +
                "    IF pSoWorkingStatus IS  NULL OR pSoWorkingStatus = 0 THEN  \n" +
                "		SET headerWhereClause = concat(headerWhereClause, ' AND 1=1 ');  \n" +
                "	ELSE  \n" +
                "		SET headerWhereClause = concat(headerWhereClause, ' and salesOrder.workingStatus = ' , pSoWorkingStatus)  ;  \n" +
                "    END IF;  \n" +
                "    IF pSoStatus IS NULL OR pSoStatus <> -1 THEN  \n" +
                "		SET headerWhereClause = concat(headerWhereClause, ' and salesOrder.`status` = ' , pSoStatus)  ;  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF pSearchText IS NOT NULL  THEN  \n" +
                "		SET headerWhereClause = CONCAT(headerWhereClause ,\" AND  (salesOrder.salesOrderNumber like '%\",pSearchText,\"%'  \n" +
                "									or salesOrder.poNumber like '%\",pSearchText,\"%'  \n" +
                "									or salesOrder.customerName like '%\",pSearchText,\"%'  \n" +
                "                                    or salesOrder.lastCPSNumber like '%\",pSearchText,\"%'  \n" +
                "                                    or salesOrder.shippingComment like '%\",pSearchText,\"%' \",  \n" +
                "                                    CASE WHEN  pAllowToUpdateComment > 0 THEN CONCAT(\" OR salesOrder.internalComment like '%\",pSearchText,\"%'\") else ''  END,  \n" +
                "                                    \" or salesOrder.soId in (select refSalesOrderID from salesorderdet  sodet  \n" +
                "														 join component comp on comp.id = sodet.partID and sodet.isDeleted = 0  \n" +
                "                                                         left join (select  salesOrderDetailID,partID,group_concat(woNumber) woList  \n" +
                "																	from vu_salesorder_workorder_list group by salesOrderDetailID,partID) workOrderDet on workOrderDet.salesOrderDetailID =  sodet.id  and workOrderDet.partID = sodet.partId  \n" +
                "														 where sodet.isDeleted = 0	and (comp.PIDCode like '%\",pSearchText,\"%' OR comp.mfgPN like '%\",pSearchText,\"%'  \n" +
                "																OR comp.nickName like '%\",pSearchText,\"%' OR sodet.woComment like '%\",pSearchText,\"%'  \n" +
                "                                                                OR sodet.internalComment like '%\",pSearchText,\"%'\",  \n" +
                "                                                                CASE WHEN  pAllowToUpdateComment > 0 THEN CONCAT(\" OR sodet.remark like '%\",pSearchText,\"%'\") else '' END,  \n" +
                "                                                                CASE WHEN  pAllowToUpdateComment > 0 THEN CONCAT(\" OR sodet.releaseLevelComment like '%\",pSearchText,\"%'\") else ''  END,  \n" +
                "                                                                \" OR workOrderDet.woList like '\",pSearchText,\"%'  )	))\");  \n" +
                "  \n" +
                "    END IF;  \n" +
                "    DROP TEMPORARY TABLE IF EXISTS temp_so_mst;  \n" +
                "	SET @SQLStatement1 = concat(\"CREATE TEMPORARY TABLE temp_so_mst AS  select soId, salesOrderNumber,  \n" +
                "						soDate, poNumber, poDate, poRevision, poRevisionDate,  \n" +
                "						sorevision, ifnull(shippingComment,'-') shippingComment, internalComment, isBlanketPO, isLegacyPO, isRmaPO,  \n" +
                "                        soStatus, soStatusText,  shippingMethodID,termsID,freeOnBoardId, salesCommissionTo,contactPersonId,  \n" +
                "						customerID, mfgCode, mfgName, customerName,  \n" +
                "                        lastCPSId,lastCPSNumber,lastCPSDate,ifnull(lastCPSComment,'-') lastCPSComment,CPSCount,  CPSDraftCnt,  \n" +
                "                        billingAddressID, intermediateShipmentId,  \n" +
                "                        shippingAddressID,defaultAddress,  \n" +
                "                        companyName,street1,street2, street3,city, state,  \n" +
                "						postcode,countryName, isAddrDefault, isAddrActive,  \n" +
                "						firstName,lastName,middleName,personName,  \n" +
                "						mobile,mobileCountryCode,faxNumber,faxCountryCode,title,isContactDefault, isContactActive,  \n" +
                "						phoneNumber,email,division,emailList,phoneList,  \n" +
                "                        workingStatus, isLegacyPOText,isBlanketPOText,isRmaPOText,blanketPOOption, isAlreadyPublished  ,  \n" +
                "                        carrierID,carrierAccountNumber ,  \n" +
                "                        billingContactPersonID, intermediateContactPersonID, shippingContactPersonID,  \n" +
                "                        linkToBlanketPOText,shippingMethodText,carrierText  \n" +
                "    from (select som.id as soId, som.salesOrderNumber,  \n" +
                "            som.soDate, som.poNumber, som.poDate, som.poRevision, som.poRevisionDate,  \n" +
                "            som.revision as sorevision , som.shippingComment, som.internalComment,  \n" +
                "            som.isBlanketPO, som.isLegacyPO, som.isRmaPO, som.customerID,  \n" +
                "            som.status as soStatus ,(case when som.`status` = 1 then 'Published' else 'Draft' end) soStatusText,  \n" +
                "            som.shippingMethodID,som.termsID,som.freeOnBoardId, som.salesCommissionTo,som.contactPersonId,  \n" +
                "            som.billingAddressID, som.intermediateShipmentId,  \n" +
                "            cust.mfgCode, cust.mfgName, fun_GetFormattedMfgCode(cust.mfgCode,cust.mfgName,\",vMfgCodeFormat,\") customerName,  \n" +
                "            cpsDetails.lastCPSId,  \n" +
                "            cpsDetails.lastCPSNumber,  \n" +
                "            cpsDetails.lastCPSDate,  \n" +
                "			cpsDetails.lastCPSComment,  \n" +
                "            cpsDetails.CPSCount,  \n" +
                "            ifnull(cpsDetails.CPSDraftCnt,0) CPSDraftCnt,  \n" +
                "            som.shippingAddressID,  \n" +
                "            custAddr.isDefault as defaultAddress,  \n" +
                "            custAddr.companyName,custAddr.street1,custAddr.street2, custAddr.street3,custAddr.city, custAddr.state,  \n" +
                "            custAddr.postcode,country.countryName, custAddr.isDefault isAddrDefault, custAddr.isActive isAddrActive,  \n" +
                "            fun_GetFormattedContactPersonName(contactP.firstName, contactP.middleName,contactP.lastName,\",vContactPersonFormat,\") personName,  \n" +
                "            contactP.firstName,contactP.lastName,contactP.middleName,  \n" +
                "            contactP.mobile,contactP.mobileCountryCode,contactP.faxNumber,contactP.faxCountryCode,  \n" +
                "            contactP.title,contactP.isDefault isContactDefault, contactP.isActive isContactActive,  \n" +
                "            contactP.phoneNumber,contactP.email,contactP.division,  \n" +
                "            fun_convertJsonEmailToCommaSepList(contactP.email) emailList,  \n" +
                "            fun_convertJsonPhoneToCommaSepList(contactP.phoneNumber) phoneList,  \n" +
                "             (case when sodCnt.totalLineCount = sodCnt.completedLineCount  then 2  \n" +
                "				  when sodCnt.totalLineCount = sodCnt.canceledLineCount then -1  \n" +
                "                  else 1 end) workingStatus,  \n" +
                "            (case when som.isLegacyPO = 1 then 'Legacy PO' else '' end) isLegacyPOText,  \n" +
                "            (case when som.isRmaPO = 1 then 'RMA PO' else '' end) isRmaPOText,  \n" +
                "            (case when som.isBlanketPO = 1 then 'Blanket PO' else '' end) isBlanketPOText,  \n" +
                "            som.blanketPOOption,som.`status`,som.isAlreadyPublished ,  \n" +
                "            som.carrierID, som.carrierAccountNumber  ,  \n" +
                "            som.billingContactPersonID, som.intermediateContactPersonID, som.shippingContactPersonID,  \n" +
                "            (case when som.linkToBlanketPO = 1 then 'Linked to Blanket PO' else '' end) linkToBlanketPOText,  \n" +
                "             shippingMethod.gencCategoryName shippingMethodText, carrier.gencCategoryName carrierText  \n" +
                "	from salesordermst som  \n" +
                "    join mfgcodemst cust on cust.id = som.customerID and cust.isDeleted = 0  \n" +
                "	left join customer_addresses custAddr on  custAddr.customerId = som.customerID and custAddr.id = som.shippingAddressID and custAddr.isDeleted = 0  \n" +
                "	left join countrymst country on country.countryID = custAddr.countryID and country.isDeleted = 0  \n" +
                "    left join contactperson contactP on contactP.personId = som.shippingContactPersonID and contactP.isDeleted = 0  \n" +
                "    left join genericcategory  shippingMethod on shippingMethod.gencCategoryID = som.shippingMethodID and shippingMethod.categoryType ='Shipping Methods' and shippingMethod.isDeleted = 0  \n" +
                "	left join genericcategory  carrier on carrier.gencCategoryID = som.termsID and carrier.categoryType ='Carrier' and shippingMethod.isDeleted = 0  \n" +
                "    left join ( select  a.refSalesOrderID, max(lastCPSId) lastCPSId, max(lastCPSNumber) lastCPSNumber,  \n" +
                "				max(lastCPSDate) lastCPSDate, max(lastCPSComment) lastCPSComment, max(CPSCount) CPSCount, max(CPSDraftCnt) CPSDraftCnt  \n" +
                "				from (select cps.refSalesOrderID, cps.id,cps.packingSlipNumber,cps.packingSlipDate,cps.packingSlipComment ,  \n" +
                "						LAST_VALUE(cps.id) over (partition by cps.refSalesOrderID) lastCPSId ,  \n" +
                "						LAST_VALUE(cps.packingSlipNumber) over (partition by cps.refSalesOrderID) lastCPSNumber,  \n" +
                "						LAST_VALUE(cps.packingSlipDate) over (partition by cps.refSalesOrderID) lastCPSDate,  \n" +
                "						LAST_VALUE(cps.packingSlipComment) over (partition by cps.refSalesOrderID) lastCPSComment,  \n" +
                "						count(1) over (partition by cps.refSalesOrderID) CPSCount,  \n" +
                "						cpd.draftCnt AS CPSDraftCnt  \n" +
                "				from customer_packingslip cps  \n" +
                "                left join (select custp.refSalesOrderID draftRefSoId, count(1) draftCnt from customer_packingslip custp  \n" +
                "						where custp.isDeleted = 0  and custp.substatus = 1 and transType ='P'  \n" +
                "						group by custp.refSalesOrderID) cpd on cpd.draftRefSoId = cps.refSalesOrderID  \n" +
                "                where cps.isDeleted = 0  and cps.transType = 'P' and cps.refsalesorderid is not null) a  \n" +
                "				group by a.refSalesOrderID) cpsDetails on cpsDetails.refSalesOrderID = som.id  \n" +
                "	left join (select sod.refSalesOrderID as soId ,  \n" +
                "				sum((case when sod.salesOrderDetStatus = 2 then 1 else 0 end) ) completedLineCount,  \n" +
                "				count(1) totalLineCount,  \n" +
                "				sum((case when sod.isCancle = 1 then 1 else 0 end)) canceledLineCount  \n" +
                "				From salesorderdet sod where sod.isDeleted = 0  \n" +
                "				Group By sod.refSalesOrderID ) sodCnt on sodCnt.soId = som.id  \n" +
                "    where som.isDeleted = 0  \n" +
                "    ) salesOrder  \n" +
                "    where 1=1 and \", headerWhereClause,    vOrderBy , rowNumWhere) ;  \n" +
                "  \n" +
                "	PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "    DROP TEMPORARY TABLE IF EXISTS temp_so_detail;  \n" +
                "    CREATE TEMPORARY TABLE temp_so_detail AS  \n" +
                "    select soDetId,  \n" +
                "				refSalesOrderID, partID, lineID, custPOQty, tbdComment, internalComment,  \n" +
                "				shippingComment, isCancle,partDescription,salesOrderDetStatus,custPOLineNumber,  \n" +
                "				PIDCode, mfgPN,mfgcodeID,mfrName, rohsName, rohsIcon,  nickName,  partType,  isCustom,custAssyPN,partSpecialNote,  \n" +
                "                po_TBDQty,shippedQty AS shippedQty , woComment  ,  \n" +
                "                cancelStatus, isHotJob,isDetHalt,  \n" +
                "                soWorkingStatus, materialTentitiveDocDate  ,refSODetID,blanketSOId,  \n" +
                "                blanketPONumber  ,parentReleaseNumber,linkdPOCnt  \n" +
                "	from (select  sod.id as soDetId,  \n" +
                "				sod.refSalesOrderID,  \n" +
                "				sod.partID,  \n" +
                "				sod.lineID,  \n" +
                "				sod.qty as custPOQty,  \n" +
                "				sod.releaseLevelComment as tbdComment, -- TBD comments  \n" +
                "				sod.internalComment,  \n" +
                "				sod.remark as shippingComment,  \n" +
                "				sod.isCancle,  \n" +
                "                ifnull(sod.partDescription,'-') partDescription,  \n" +
                "                sod.salesOrderDetStatus,  \n" +
                "                sod.custPOLineNumber,  \n" +
                "				co.PIDCode,  \n" +
                "				co.mfgPN,  \n" +
                "                co.mfgcodeID,  \n" +
                "                fun_GetFormattedMfgCode(partMfg.mfgCode,partMfg.mfgName,vMfgCodeFormat) mfrName,  \n" +
                "				rohs.name AS rohsName,  \n" +
                "				rohs.rohsIcon,  \n" +
                "                co.nickName,  \n" +
                "                co.partType,  \n" +
                "                co.isCustom,  \n" +
                "                co.custAssyPN ,  \n" +
                "                co.specialNote partSpecialNote,  \n" +
                "				(sod.qty - ifnull(soDetQty.relQty,0)) po_TBDQty,  \n" +
                "                cpd.shippedQty,  \n" +
                "                ifnull(sod.woComment, workOrderDet.woList) woComment  ,  \n" +
                "                sod.isCancle cancelStatus,  \n" +
                "                sod.isHotJob,  \n" +
                "                (case when holdTrans.holdCnt > 0 then 1 else 0 end ) isDetHalt,  \n" +
                "                (CASE 	WHEN (sod.isCancle = 1) THEN 'Canceled'  \n" +
                "						WHEN (sod.`salesOrderDetStatus` = 1)   THEN 'In Progress'  \n" +
                "						ELSE 'Completed'  END) soWorkingStatus,  \n" +
                "                materialTentitiveDocDate ,  \n" +
                "                sod.refSODetID,  \n" +
                "                blanketPO.blanketSOId,  \n" +
                "                blanketPO.poNumber AS blanketPONumber  ,  \n" +
                "                soDetQty.parentReleaseNumber,  \n" +
                "                linkedPO.linkdPOCnt  \n" +
                "		from salesorderdet sod  \n" +
                "        JOIN temp_so_mst tempMst ON tempMst.soId = sod.refSalesOrderID  \n" +
                "		left join component co on co.id = sod.partID and co.isDeleted = 0  \n" +
                "        left join (select shipChild.sDetID, sum(shipChild.qty) relQty, GROUP_CONCAT(shipParent.releaseNumber) parentReleaseNumber from salesshippingmst shipChild  \n" +
                "					LEFT JOIN salesshippingmst shipParent ON shipParent.refShippingLineID = shipChild.shippingID   AND shipParent.isDeleted = 0  \n" +
                "					where shipChild.isDeleted = 0  group by shipChild.sDetID) as soDetQty on  soDetQty.sDetID = sod.id  \n" +
                "        left join (select refSalesorderDetid , sum(cpd.shipQty) shippedQty  \n" +
                "					from customer_packingslip_det  cpd  \n" +
                "					join customer_packingslip cps on cps.id = cpd.refCustPackingSlipID and cps.isDeleted = 0  \n" +
                "                    where cpd.isDeleted = 0 and cps.transType='P' group by refSalesorderDetid) cpd on cpd.refSalesorderDetid = sod.id  \n" +
                "		left join (select  salesOrderDetailID,partID,group_concat(woNumber) woList  \n" +
                "					from vu_salesorder_workorder_list group by salesOrderDetailID,partID) workOrderDet on workOrderDet.salesOrderDetailID =  sod.id  and workOrderDet.partID = sod.partId  \n" +
                "		left join rfq_rohsmst rohs on rohs.id = co.RoHSStatusID and rohs.isDeleted = 0  \n" +
                "        left join mfgcodemst partMfg on partMfg.id = co.mfgcodeID and partMfg.isDeleted = 0  \n" +
                "        left join (select refTransid ,count(1) holdCnt from holdunholdtrans where refType='PO' and isDeleted = 0 and endDate is NUll and `status` = 'H' group by refTransid) holdTrans  \n" +
                "			on holdTrans.refTransid = sod.id  \n" +
                "        left join (select blanketDet.id blanketDetId, blanketSO.id blanketSOId , blanketSO.poNumber from salesorderdet blanketDet  \n" +
                "				join salesordermst blanketSO on blanketSO.id = blanketDet.refSalesOrderID and blanketSO.isDeleted = 0  \n" +
                "                where blanketSO.isDeleted = 0) blanketPO on blanketPO.blanketDetId = sod.refBlanketPOID  \n" +
                "        left join (select childPO.refBlanketPOID , count(1) linkdPOCnt from salesorderdet childPO where childPO.isDeleted = 0 group by childPO.refBlanketPOID) linkedPO on linkedPO.refBlanketPOID = sod.id  \n" +
                "		where sod.isDeleted = 0  \n" +
                "	) a;  \n" +
                "  \n" +
                "    DROP TEMPORARY TABLE IF EXISTS temp_so_rel_detail;  \n" +
                "    CREATE TEMPORARY TABLE temp_so_rel_detail AS  \n" +
                "    select soDetId,  \n" +
                "				packingSlipDate,  \n" +
                "				promisedShipDate,  \n" +
                "                refCustPackingSlipID, packingSlipDetId,  \n" +
                "                  row_number() over (partition by releaseId,soDetId order by packingSlipDate desc) cpsIndex,  \n" +
                "				refSalesOrderID,releaseId, partID, lineID, custPOQty,  internalComment,  releaseLineComment,  \n" +
                "				shippingComment, isCancle, releaseNumber, soReleaseQty,  \n" +
                "                shippedQty AS shippedQty,  \n" +
                "                 cpsDetailCnt,  \n" +
                "                 isReadyToShip  ,cpsDetailShippedQty  ,  \n" +
                "                (case when  (soReleaseQty - cpsDetailShippedQty) <= 0 then 1 else 0 end) relCompletedStatus,  \n" +
                "                cpsSubStatus  ,poReleaseNumber,salesOrderDetStatus,'completed ' as firstInsert, shippingDetailCnt  \n" +
                "	from (select  sod.id as soDetId,  \n" +
                "				sod.refSalesOrderID,  \n" +
                "				sod.partID,  \n" +
                "				sod.lineID,  \n" +
                "				sod.qty as custPOQty,  \n" +
                "				sod.internalComment,  \n" +
                "				sod.remark as shippingComment,  \n" +
                "                soship.releaseNotes releaseLineComment,  \n" +
                "				sod.isCancle,  \n" +
                "                soship.shippingID releaseId,  \n" +
                "				soship.releaseNumber,  \n" +
                "				soship.promisedShipDate,  \n" +
                "				(case when co.partType = 4 then sod.qty else  soship.qty end) soReleaseQty,  \n" +
                "				cpd.refCustPackingSlipID,  \n" +
                "                cpd.id packingSlipDetId,  \n" +
                "				cpd.shipQty AS shippedQty,  \n" +
                "                cp.packingSlipDate ,  \n" +
                "                SUM(cpd.shipQty) over (partition by soship.shippingID,sod.id ) cpsDetailShippedQty,  \n" +
                "                COUNT(refCustPackingSlipID) over (partition by soship.shippingID,sod.id ) cpsDetailCnt,  \n" +
                "--                row_number() over (partition by soship.shippingID,sod.id ) cpsIndex,  \n" +
                "                soship.isReadyToShip,  \n" +
                "                cp.subStatus AS cpsSubStatus,  \n" +
                "                soship.poReleaseNumber,  \n" +
                "                sod.salesOrderDetStatus ,  \n" +
                "                sum(case when (soship.carrierAccountNumber is not null AND trim(soship.carrierAccountNumber) <>'')  OR soship.carrierID is not null OR  \n" +
                "                                soship.shippingMethodID is not null OR soship.shippingAddressID is not null OR  \n" +
                "                                soship.shippingContactPersonID is not null then 1 else 0 end) over (partition by soship.shippingID,sod.id) shippingDetailCnt  \n" +
                "		from salesorderdet sod  \n" +
                "        JOIN temp_so_mst tempMst ON tempMst.soId = sod.refSalesOrderID  \n" +
                "		left join component co on co.id = sod.partID and co.isDeleted = 0  \n" +
                "		left join salesshippingmst soship on soship.sDetID = sod.id and soship.isDeleted = 0  \n" +
                "		left join customer_packingslip_det cpd on cpd.refSalesorderDetid = sod.id and  (case when co.partType <> 4 then cpd.shippingId = soship.shippingID else 1 = 1 end)  and cpd.isDeleted = 0 and cpd.refCustPackingSlipID in (select id from customer_packingslip where isDeleted = 0 and transType='P')  \n" +
                "        left join customer_packingslip cp on cp.id = cpd.refCustPackingSlipID and sod.refSalesOrderID = cp.refSalesOrderID and cp.isDeleted = 0 and cp.transType = 'P'  \n" +
                "		-- left join rfq_rohsmst rohs on rohs.id = co.RoHSStatusID and rohs.isDeleted = 0  \n" +
                "		where sod.isDeleted = 0  \n" +
                "	) a;  \n" +
                "  \n" +
                "  \n" +
                "	SELECT * from temp_so_mst;  \n" +
                "  \n" +
                "    SET @SQLStatement2 = CONCAT(\"SELECT soDetail.* from temp_so_detail AS soDetail  \n" +
                "								left join temp_so_mst mst on mst.soId = soDetail.refSalesOrderID  \n" +
                "                                order by soDetail.salesOrderDetStatus, soDetail.soDetId\");  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                " 	SELECT * from temp_so_rel_detail order by relCompletedStatus,promisedShipDate;  \n" +
                "		-- order by soDetId,relCompletedStatus,promisedShipDate;  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_so_mst;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_so_detail;  \n" +
                "    DROP TEMPORARY TABLE IF EXISTS temp_so_rel_detail;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 25-02-2022  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1328,'1.00','V1','Sproc_getSalesOrderListAgainstShipment - Shweta '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1328:
            allDbChangesArray.push(
                /* **************************** New Script -> 25-02-2022  *********************************** */
                "DROP procedure IF EXISTS `Sproc_RetriveSupplierInvoiceList`;  \n" +
                "CREATE PROCEDURE `Sproc_RetriveSupplierInvoiceList`(  \n" +
                "	IN pPageIndex INT,  \n" +
                "	IN pRecordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pReceiptType VARCHAR(30),  \n" +
                "	IN pMfgCodeIds LONGTEXT,  \n" +
                "	IN pPaymentMethodTypeIds LONGTEXT,  \n" +
                "	IN pDueDate DATE,  \n" +
                "	IN pAdditionalDays INT,  \n" +
                "	IN pTermsAndAboveDays INT,  \n" +
                "	IN pInvoiceNumber VARCHAR(50),  \n" +
                "	IN pIsExactSearch TINYINT,  \n" +
                "	IN pMfrPnId INT,  \n" +
                "    IN pInvoiceIds LONGTEXT,  \n" +
                "    IN pExactPaymentNumberSearch TINYINT,  \n" +
                "    IN pPaymentNumber VARCHAR(50),  \n" +
                "    IN pPaymentTermsIds LONGTEXT,  \n" +
                "    IN pInvPaymentTermsIds LONGTEXT,  \n" +
                "    IN pInvoiceFromDate DATE,  \n" +
                "    IN pInvoiceToDate DATE,  \n" +
                "    IN pMarkedForRefundStatus LONGTEXT,  \n" +
                "    IN pInvoiceComments VARCHAR(1000),  \n" +
                "    IN pLockStatusFilter VARCHAR(50),  \n" +
                "    IN pSelectedDateType VARCHAR(10),  \n" +
                "    IN pIsConfirmedZeroValueInvoicesOnly TINYINT,  \n" +
                "    IN pPaidAmount VARCHAR(50),  \n" +
                "    IN pExactPaidAmountSearch TINYINT,  \n" +
                "    IN pExtendedAmount VARCHAR(50),  \n" +
                "    IN pExactExtendedAmountSearch TINYINT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255);  \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "    DECLARE vCurrentDate DATE;  \n" +
                "    DECLARE vMfgCodeFormat INT;  \n" +
                "  \n" +
                "	SELECT FUN_GETTIMEZONE() INTO v_TimeZone;  \n" +
                "	SELECT FUN_GETDATETIMEFORMAT() INTO v_DateTimeDisplayFormat;  \n" +
                "    SELECT fun_getMFGCodeNameFormat() INTO vMfgCodeFormat;  \n" +
                "  \n" +
                "    SELECT CAST(fun_ConvertUTCDatetimeToDataKeyDateTimeZone(UTC_TIMESTAMP()) AS DATE) INTO vCurrentDate;  \n" +
                "  \n" +
                "	SET @temp_Sproc_RetriveSupplierInvoiceList = CONCAT(\"  \n" +
                "			SELECT 		p.id,  \n" +
                "					p.systemId,  \n" +
                "					p.poNumber,  \n" +
                "                    p.poDate,  \n" +
                "                    p.refPurchaseOrderID poId,  \n" +
                "					p.mfgCodeID,  \n" +
                "					p.supplierSONumber,  \n" +
                "                    p.soDate,  \n" +
                "					(CASE WHEN p.receiptType = 'I' THEN psm.packingSlipNumber ELSE p.packingSlipNumber END) packingSlipNumber,  \n" +
                "                    (CASE WHEN p.receiptType = 'I' THEN psm.lockStatus ELSE p.lockStatus END) packingSlipLockStatus,  \n" +
                "					p.packingSlipDate,  \n" +
                "					p.invoiceNumber,  \n" +
                "                    p.lockStatus invoiceLockStatus,  \n" +
                "					p.invoiceDate,  \n" +
                "					ps.invoiceDate refParentCreditDebitInvoiceDate,  \n" +
                "					p.creditMemoNumber,  \n" +
                "                    p.lockStatus creditMemoLockStatus,  \n" +
                "					p.creditMemoDate,  \n" +
                "					p.debitMemoNumber,  \n" +
                "                    p.refSupplierCreditMemoNumber,  \n" +
                "                    p.lockStatus debitMemoLockStatus,  \n" +
                "					p.debitMemoDate,  \n" +
                "					p.receiptDate,  \n" +
                "					p.description,  \n" +
                "					p.billToAddress,  \n" +
                "					p.shipToAddress,  \n" +
                "					p.poVersion,  \n" +
                "					p.isDeleted,  \n" +
                "					p.receiptType,  \n" +
                "					p.`status`,  \n" +
                "					p.applyDate,  \n" +
                "					p.refParentCreditDebitInvoiceno,  \n" +
                "					p.refPackingSlipNumberForInvoice,  \n" +
                "					p.invoiceTotalDue,  \n" +
                "					p.isTariffInvoice,  \n" +
                "					p.creditMemoType,  \n" +
                "                    (  \n" +
                "						CASE 	WHEN p.creditMemoType = 'IC' THEN  \n" +
                "								'Invoice Credit Memo (Auto)'  \n" +
                "							WHEN p.creditMemoType = 'MC' THEN  \n" +
                "								'MISC Credit Memo'  \n" +
                "							WHEN p.creditMemoType = 'RC' THEN  \n" +
                "								'RMA Credit Memo'  \n" +
                "							WHEN p.creditMemoType = 'ID' THEN  \n" +
                "								'Invoice Debit Memo (Auto)'  \n" +
                "							WHEN p.creditMemoType = 'MD' THEN  \n" +
                "								'MISC Debit Memo'  \n" +
                "							WHEN p.receiptType = 'I' and p.isTariffInvoice = '0' THEN  \n" +
                "								'Invoice'  \n" +
                "							WHEN p.receiptType = 'I' and p.isTariffInvoice = '1' THEN  \n" +
                "								'MISC Invoice'  \n" +
                "						END  \n" +
                "					) subTypeValue,  \n" +
                "					fun_getUserNameByID(p.updatedBy) updatedByName,  \n" +
                "					fun_getUserNameByID(p.createdBy)  createdByName,  \n" +
                "					fun_getRoleByID(p.createByRoleId) createdbyRole,  \n" +
                "					fun_getRoleByID(p.updateByRoleId) updatedbyRole,  \n" +
                "					fun_ApplyCommonDateTimeFormatByParaValue(p.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAt,  \n" +
                "					fun_ApplyCommonDateTimeFormatByParaValue(p.updatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt,  \n" +
                "                    m.mfgName supplierName,  \n" +
                "					fun_GetFormattedMfgCode(m.mfgCode, m.mfgName,\",vMfgCodeFormat,\") supplierCode,  \n" +
                "					m.mfgCode supplierCodeName,  \n" +
                "					IFNULL(psDoc.cnt,0) invoiceDocCount,  \n" +
                "					pg.packingSlipDocCount,  \n" +
                "					pd.itemReceived,  \n" +
                "					pd.otherChargesItemReceived,  \n" +
                "					pd.itemDisapproved,  \n" +
                "					fun_getReceiptTypeName(p.`receiptType`) receiptMemoType,  \n" +
                "                    fun_getInvoiceStatusName(p.`status`) invoiceVerificationStatus,  \n" +
                "					ps.status parentInvoiceStatus,  \n" +
                "					ps.invoiceNumber refInvoiceNumber,  \n" +
                "                    ps.lockStatus refInvoiceLockStatus,  \n" +
                "					ps.creditMemoType parentCreditMemoType,  \n" +
                "					pd.totalExtendedAmount,  \n" +
                "                    pd.totalDiscount,  \n" +
                "					pe.totalCreditAmount,  \n" +
                "					pe.totalDebitAmount,  \n" +
                "					(  \n" +
                "						IFNULL(pd.totalExtendedAmount, 0) - IFNULL((pe.totalCreditAmount * -1), 0) - IFNULL((pe.totalDebitAmount * -1), 0)  \n" +
                "					) amountToPay,  \n" +
                "                    pd.totalExtendedReceivedPrice,  \n" +
                "					pd.packingDetailNote,  \n" +
                "					pd.approveLineCount,  \n" +
                "					fun_getDueDateEOM((case WHEN p.receiptType = 'D' THEN  \n" +
                "											p.debitMemoDate  \n" +
                "										WHEN p.receiptType = 'C' THEN  \n" +
                "											p.creditMemoDate  \n" +
                "										ELSE p.invoiceDate  \n" +
                "									end), payTerm.termsDays, p.paymentTermsID) paymentDueDate,  \n" +
                "					g.gencCategoryName paymentTermName,  \n" +
                " 					m.paymentTermsID paymentTermsID,  \n" +
                "                    payTerm.gencCategoryName invPaymentTermName,  \n" +
                "                    p.paymentTermsID invPaymentTermsID,  \n" +
                "					(CASE WHEN p.receiptType = 'I' THEN psm.id ELSE p.id END) packingSlipId,  \n" +
                "					psm.packingSlipModeStatus,  \n" +
                "                    psPay.paymentDate,  \n" +
                "					ifnull(psPay.paidAmount,0) paidAmount,  \n" +
                "					ifnull(psPay.refundAmount,0) refundAmount,  \n" +
                "					ifnull(pe.totalPaidDebitCreditAmount,0) totalPaidDebitCreditAmount,  \n" +
                "                    ifnull(pe.totalRefundDebitCreditAmount,0) totalRefundDebitCreditAmount,  \n" +
                "					p.invoiceRequireManagementApproval,  \n" +
                "					(  \n" +
                "						CASE 	WHEN p.invoiceRequireManagementApproval = 1 THEN  \n" +
                "								'Yes'  \n" +
                "							WHEN p.invoiceRequireManagementApproval = 0 THEN  \n" +
                "								'No'  \n" +
                "						END  \n" +
                "					) invoiceRequireManagementApprovalValue,  \n" +
                "					p.invoiceApprovalStatus,  \n" +
                "					(  \n" +
                "						CASE 	WHEN p.invoiceApprovalStatus = 1 THEN  \n" +
                "								'Approved'  \n" +
                "							WHEN p.invoiceApprovalStatus = 2 THEN  \n" +
                "								'Pending'  \n" +
                "							WHEN p.invoiceApprovalStatus = 3 THEN  \n" +
                "								'N/A'  \n" +
                "						END  \n" +
                "					) invoiceApprovalStatusValue,  \n" +
                "					p.invoiceApprovedBy,  \n" +
                "					fun_getUserNameByID(p.invoiceApprovedBy) invoiceApprovedByName,  \n" +
                "					fun_ApplyCommonDateTimeFormatByParaValue(p.invoiceApprovalDate,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') invoiceApprovalDate,  \n" +
                "					p.invoiceApprovalComment,  \n" +
                "					p.internalRemark,  \n" +
                "                    p.remark,  \n" +
                "					p.lockStatus,  \n" +
                "					(case when p.lockStatus = 'NA' then 'Not Applicable'  \n" +
                "						when p.lockStatus = 'RL' then 'Ready To Lock'  \n" +
                "						when p.lockStatus = 'LC' then 'Locked'  \n" +
                "						else null end  \n" +
                "					) lockStatusValue,  \n" +
                "					fun_getUserNameByID(p.lockedBy) lockByName,  \n" +
                "					fun_getRoleByID(p.lockedByRoleId) lockedByRoleName,  \n" +
                "					fun_ApplyCommonDateTimeFormatByParaValue(p.lockedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') lockedAt,  \n" +
                "                    case when p.receiptType = 'I' then  \n" +
                "							ifnull(p.invoiceTotalDue,0) - ((ifnull(pd.totalExtendedReceivedPrice,0)+ifnull(pd.totalDiscount,0))+((IFNULL((pe.totalCreditAmount), 0) + IFNULL((pe.totalDebitAmount),0))*-1))  \n" +
                "						else ifnull(p.invoiceTotalDue,0)+((ifnull(pd.totalExtendedReceivedPrice,0)+ifnull(pd.totalDiscount,0))) end invoiceVariance,  \n" +
                "					h1.refType as haltRefType,  \n" +
                "                    h1.status as haltStatus,  \n" +
                "                    (CASE WHEN h1.status = 'H' THEN  \n" +
                "								'Halted'  \n" +
                "							ELSE ''  \n" +
                "						END  \n" +
                "					) AS haltStatusText,  \n" +
                "                    (CASE  \n" +
                "							WHEN h1.status = 'H' THEN  \n" +
                "								CONCAT(h1.reason, ' - Halt by ',fun_getUserNameByEmployeID(h1.holdEmployeeId),' on ', fun_ConvertUTCDatetimeToDataKeyTimeZone(h1.startDate))  \n" +
                "							ELSE ''  \n" +
                "						END  \n" +
                "					) AS haltReason,  \n" +
                "                    psh1.refType as haltRefTypeRefInv,  \n" +
                "                    psh1.status as haltStatusRefInv,  \n" +
                "                    (CASE WHEN psh1.status = 'H' THEN  \n" +
                "								'Halted'  \n" +
                "							ELSE ''  \n" +
                "						END  \n" +
                "					) AS haltReasonRefInvText,  \n" +
                "                    (CASE  \n" +
                "							WHEN psh1.status = 'H' THEN  \n" +
                "								CONCAT(psh1.reason, ' - Halt by ',fun_getUserNameByEmployeID(psh1.holdEmployeeId),' on ', fun_ConvertUTCDatetimeToDataKeyTimeZone(psh1.startDate))  \n" +
                "							ELSE ''  \n" +
                "						END  \n" +
                "					) AS haltReasonRefInv,  \n" +
                "                    p.markedForRefund,  \n" +
                "                    (case when p.markedForRefund = 0 then 'N/A'  \n" +
                "						else case when ifnull(psPay.refundAmount,0) = 0 then  \n" +
                "										'Waiting for Refund'  \n" +
                "								when ifnull(psPay.refundAmount,0) <> 0 and ifnull(psPay.refundAmount,0) <> ifnull(p.markedForRefundAmt,0)  then  \n" +
                "										'Partially Refunded'  \n" +
                "								when ifnull(psPay.refundAmount,0) = ifnull(p.markedForRefundAmt,0) then  \n" +
                "										'Fully Refunded'  \n" +
                "								else '' end  \n" +
                "						end  \n" +
                "					) markedForRefundValue,  \n" +
                "                    p.markedForRefundAmt,  \n" +
                "					(  \n" +
                "						CASE 	WHEN p.isZeroValue = 0 THEN  \n" +
                "								'No'  \n" +
                "							WHEN p.isZeroValue = 1 THEN  \n" +
                "								'Yes'  \n" +
                "						END  \n" +
                "					) isZeroValueText,  \n" +
                "                    p.isZeroValue  \n" +
                "			FROM packing_slip_material_receive p force index (IDX_packing_slip_material_receive_receiptType)  \n" +
                "            JOIN mfgcodemst m ON m.id = p.mfgCodeID  \n" +
                "            left join (SELECT COUNT(1) AS `cnt`,  \n" +
                "							gFiles.gencFileOwnerType,  \n" +
                "							gFiles.refTransID,  \n" +
                "							gFiles.entityID  \n" +
                "						FROM genericfiles gFiles  \n" +
                "						WHERE gFiles.isDeleted = 0 AND gFiles.isRecycle = 0  \n" +
                "						and gFiles.entityID in (-13,-15,-16)  \n" +
                "						GROUP BY gFiles.gencFileOwnerType , gFiles.refTransID , gFiles.entityID) psDoc  \n" +
                "				ON  psDoc.entityID = (CASE WHEN p.receiptType = 'C' THEN -15  \n" +
                "																		WHEN p.receiptType = 'D' THEN -16  \n" +
                "																		ELSE -13  \n" +
                "																	END)  \n" +
                "				and psDoc.refTransID = p.id  \n" +
                "            LEFT JOIN holdunholdtrans h1 ON h1.refTransId = p.id  \n" +
                "								and h1.id = p.holdUnholdId /*(select max(h2.id)  \n" +
                " 											 from holdunholdtrans h2  \n" +
                " 											where h2.refTransId = h1.refTransId  \n" +
                " 											  and h2.refType in ('SINV','SCM','SDM')  \n" +
                " 											  and h2.isDeleted = 0)*/  \n" +
                "            left join genericcategory g ON g.gencCategoryID = m.paymentTermsID  \n" +
                "            left join genericcategory payTerm ON payTerm.gencCategoryID = p.paymentTermsID  \n" +
                "			LEFT JOIN packing_slip_material_receive ps ON ps.id = p.refParentCreditDebitInvoiceno AND ps.isDeleted = 0  \n" +
                "            LEFT JOIN holdunholdtrans psh1 ON psh1.refTransId = p.refParentCreditDebitInvoiceno  \n" +
                "								and psh1.id = p.refParentCreditDebitInvoiceHoldUnholdId /*(select max(h2.id)  \n" +
                " 											 from holdunholdtrans h2  \n" +
                " 											where psh1.refTransId = h2.refTransId  \n" +
                " 											  and h2.refType = 'SINV'  \n" +
                " 											  and h2.isDeleted = 0)*/  \n" +
                "			LEFT JOIN packing_slip_material_receive psm on psm.refPackingSlipNumberForInvoice = p.id and psm.receiptType = 'P' AND psm.isDeleted = 0  \n" +
                "            left join (  \n" +
                "				SELECT 	IFNULL(g.cnt,0) packingSlipDocCount, g.refTransID  \n" +
                "				FROM 	vu_genericfilescount g  \n" +
                "				WHERE 	g.entityID = -14  \n" +
                "				AND 	g.gencFileOwnerType = 'packing_slip'  \n" +
                "            ) pg on pg.refTransID = psm.id  \n" +
                "			left join (  \n" +
                "							select 	a.refPackingSlipMaterialRecID,  \n" +
                "								GROUP_CONCAT(a.packingSlipSerialNumber, '###', a.approveNote SEPARATOR '||') packingDetailNote,  \n" +
                "								sum(a.itemReceived) itemReceived,  \n" +
                "								sum(a.otherChargesItemReceived) otherChargesItemReceived,  \n" +
                "								sum(a.itemDisapproved) itemDisapproved,  \n" +
                "								sum(a.approveLineCount) approveLineCount,  \n" +
                "								sum(a.extendedPrice) totalExtendedAmount,  \n" +
                "                                sum(discount) totalDiscount,  \n" +
                "								sum(extendedReceivedPrice) totalExtendedReceivedPrice  \n" +
                "							from 	(  \n" +
                "									SELECT 	psm.refPackingSlipMaterialRecID,  \n" +
                "										psm.packingSlipSerialNumber,  \n" +
                "										ifnull(psm.approveNote,psm.comment) approveNote,  \n" +
                "										/*case when psm.refChargesTypeId IS NULL then 1 else 0 end itemReceived,  \n" +
                "										case when psm.refChargesTypeId IS NOT NULL then 1 else 0 end otherChargesItemReceived,*/  \n" +
                "                                        case when psm.packingSlipSerialNumber not REGEXP '^-?[0-9]+$' or psm.packingSlipSerialNumber <= 1000 then 1 else 0 end itemReceived,  \n" +
                "										case when psm.packingSlipSerialNumber REGEXP '^-?[0-9]+$' and psm.packingSlipSerialNumber > 1000 then 1 else 0 end otherChargesItemReceived,  \n" +
                "										case when psm.status = 'D' then 1 else 0 end itemDisapproved,  \n" +
                "										case when psm.status = 'A' then 1 else 0 end approveLineCount,  \n" +
                "										extendedPrice,  \n" +
                "                                        discount,  \n" +
                "										extendedReceivedPrice  \n" +
                "									FROM 	packing_slip_material_receive_det psm  \n" +
                "									WHERE 	psm.isDeleted = 0  \n" +
                "                                    and exists (select 1 from packing_slip_material_receive p where p.id = psm.refPackingSlipMaterialRecID and p.receiptType in ('I','C','D') and p.isDeleted = 0)  \n" +
                "								) a  \n" +
                "							group by a.refPackingSlipMaterialRecID  \n" +
                "						) pd ON pd.refPackingSlipMaterialRecID = p.id  \n" +
                "				left join (select b.refPackingslipInvoiceID,  \n" +
                "									sum(case when a.refPaymentMode = 'P' then b.paymentAmount else 0 end) paidAmount,  \n" +
                "									sum(case when a.refPaymentMode = 'RR' then b.paymentAmount else 0 end) refundAmount,  \n" +
                "                                    max(case when a.refPaymentMode = 'P' then a.paymentDate else null end) paymentDate  \n" +
                "							  from packingslip_invoice_payment a  \n" +
                "							  join packingslip_invoice_payment_det b ON b.refPayementid = a.id  \n" +
                "							 where a.refPaymentMode IN ('P','RR')  \n" +
                "							   and a.isPaymentVoided = 0  \n" +
                "							   and b.isDeleted = 0  \n" +
                "							 group by b.refPackingslipInvoiceID) psPay ON psPay.refPackingslipInvoiceID = p.id  \n" +
                "				left join (  \n" +
                "							select	 	ps.refParentCreditDebitInvoiceno,  \n" +
                "										sum(case when ps.receiptType = 'C' then pd.extendedPrice else 0 end) totalCreditAmount,  \n" +
                "    									sum(case when ps.receiptType = 'D' then pd.extendedPrice else 0 end) totalDebitAmount,  \n" +
                "    									sum(cmPay.paidAmount) totalPaidDebitCreditAmount,  \n" +
                "                                        sum(cmPay.refundAmount) totalRefundDebitCreditAmount  \n" +
                "							from 		packing_slip_material_receive ps  \n" +
                "							inner join 	packing_slip_material_receive_det pd ON ps.id = pd.refPackingSlipMaterialRecID  \n" +
                "                            left join (select b.refPackingslipInvoiceID,  \n" +
                "												sum(case when a.refPaymentMode = 'P' then b.paymentAmount else 0 end) paidAmount,  \n" +
                "												sum(case when a.refPaymentMode = 'RR' then b.paymentAmount else 0 end) refundAmount  \n" +
                "										  from packingslip_invoice_payment a  \n" +
                "										  join packingslip_invoice_payment_det b ON b.refPayementid = a.id  \n" +
                "										 where a.refPaymentMode IN ('P','RR')  \n" +
                "										   and b.isPaymentVoided = 0  \n" +
                "										   and b.isDeleted = 0  \n" +
                "										 group by b.refPackingslipInvoiceID) cmPay ON ps.id = cmPay.refPackingslipInvoiceID  \n" +
                "								  where ps.receiptType in ('C','D')  \n" +
                "									and ps.isDeleted = 0  \n" +
                "									and pd.isDeleted = 0  \n" +
                "							group by 	ps.refParentCreditDebitInvoiceno  \n" +
                "						) pe ON pe.refParentCreditDebitInvoiceno = p.id  \n" +
                "				WHERE p.`status` in ('PE','I','A','P','PP', 'PM') and p.isDeleted = 0 \",  \n" +
                "                (CASE WHEN pInvoiceIds IS NOT NULL THEN CONCAT(\" AND p.id in (\", pInvoiceIds ,\") \") ELSE \"\" END),  \n" +
                "                (CASE WHEN pReceiptType IS NOT NULL THEN CONCAT(\"  AND p.receiptType in (\", pReceiptType ,\")\") ELSE \"\" END),  \n" +
                "                (CASE WHEN pIsConfirmedZeroValueInvoicesOnly = 1 THEN CONCAT(\"  AND p.isZeroValue = true \") ELSE \"\" END)  \n" +
                "	);  \n" +
                "  \n" +
                "	IF (pMfgCodeIds IS NOT NULL AND pMfgCodeIds != '') THEN  \n" +
                "		SET @temp_Sproc_RetriveSupplierInvoiceList= CONCAT(@temp_Sproc_RetriveSupplierInvoiceList, ' AND p.mfgCodeID in (', pMfgCodeIds, ' )');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF (pPaymentTermsIds IS NOT NULL AND pPaymentTermsIds != '') THEN  \n" +
                "		SET @temp_Sproc_RetriveSupplierInvoiceList= CONCAT(@temp_Sproc_RetriveSupplierInvoiceList, ' AND m.paymentTermsID in (', pPaymentTermsIds, ' )');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF (pInvPaymentTermsIds IS NOT NULL AND pInvPaymentTermsIds != '') THEN  \n" +
                "		SET @temp_Sproc_RetriveSupplierInvoiceList= CONCAT(@temp_Sproc_RetriveSupplierInvoiceList, ' AND p.paymentTermsID in (', pInvPaymentTermsIds, ' )');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pPaymentMethodTypeIds IS NOT NULL AND pPaymentMethodTypeIds != '') THEN  \n" +
                "		SET @temp_Sproc_RetriveSupplierInvoiceList= CONCAT(@temp_Sproc_RetriveSupplierInvoiceList, ' and exists (select 1 from mfgcodemst m where m.id = p.mfgCodeID AND m.paymentMethodID in (', pPaymentMethodTypeIds, ' ))');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "     IF(pLockStatusFilter IS NOT NULL)THEN  \n" +
                "    	SET @temp_Sproc_RetriveSupplierInvoiceList = CONCAT(@temp_Sproc_RetriveSupplierInvoiceList,\" and p.lockStatus IN (\", pLockStatusFilter ,\")\");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "      IF(pInvoiceComments IS NOT NULL AND pInvoiceComments != '')THEN  \n" +
                "    	SET @temp_Sproc_RetriveSupplierInvoiceList = CONCAT(@temp_Sproc_RetriveSupplierInvoiceList,\" and (p.internalRemark LIKE '%\",pInvoiceComments,\"%' OR p.remark LIKE '%\",pInvoiceComments,\"%')\");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF (pPaymentNumber IS NOT NULL AND pPaymentNumber != '') THEN  \n" +
                "		SET @temp_Sproc_RetriveSupplierInvoiceList= CONCAT(@temp_Sproc_RetriveSupplierInvoiceList, \"  \n" +
                "				and exists (select 1  \n" +
                "							  from packingslip_invoice_payment pm  \n" +
                "							  join packingslip_invoice_payment_det pd ON pd.refPayementid = pm.id  \n" +
                "							 where pm.isPaymentVoided = 0  \n" +
                "							   and pm.refPaymentMode = 'P'  \n" +
                "							   and pd.refPackingslipInvoiceID = p.id  \n" +
                "							   and pm.isDeleted = 0  \n" +
                "                               and pd.isDeleted = 0  \n" +
                "							   and pm.paymentNumber \",  \n" +
                "                               CASE WHEN pExactPaymentNumberSearch = TRUE THEN CONCAT(\" = '\", pPaymentNumber ,\"' \") ELSE CONCAT(\" like '%\", pPaymentNumber, \"%' \") END  \n" +
                "                               ,\") \");  \n" +
                "    END IF;  \n" +
                "	IF (pPaidAmount IS NOT NULL AND pPaidAmount != '') THEN  \n" +
                "		SET @temp_Sproc_RetriveSupplierInvoiceList= CONCAT(@temp_Sproc_RetriveSupplierInvoiceList, \" and paidAmount \", CASE WHEN pExactPaidAmountSearch = TRUE THEN CONCAT(\" = '\", pPaidAmount ,\"' \") ELSE CONCAT(\" like '%\", pPaidAmount, \"%' \") END);  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF (pExtendedAmount IS NOT NULL AND pExtendedAmount != '') THEN  \n" +
                "    	SET @temp_Sproc_RetriveSupplierInvoiceList= CONCAT(@temp_Sproc_RetriveSupplierInvoiceList, \" and pd.totalExtendedAmount \", CASE WHEN pExactExtendedAmountSearch = TRUE THEN CONCAT(\" = '\", pExtendedAmount ,\"' \") ELSE CONCAT(\" like '%\", pExtendedAmount, \"%' \") END);  \n" +
                "    END IF;  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY paymentDueDate, supplierCode\") ;  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = '1=1' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF pMarkedForRefundStatus IS NOT NULL and pMarkedForRefundStatus != '' THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause,\" and c.markedForRefundValue in (\",pMarkedForRefundStatus,\")\");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF pDueDate IS NOT NULL THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause,\" and c.paymentDueDate <= DATE_ADD('\",pDueDate,\"', INTERVAL \",IFNULL(pAdditionalDays,0),\" DAY) \");  \n" +
                "	ELSEIF (pTermsAndAboveDays IS NOT NULL OR pTermsAndAboveDays = 0) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause,\" and c.paymentDueDate <= DATE_ADD('\",vCurrentDate,\"', INTERVAL \",IFNULL(pTermsAndAboveDays,0),\" DAY) \");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF pInvoiceFromDate IS NOT NULL AND pInvoiceToDate IS NOT NULL THEN  \n" +
                "		IF pSelectedDateType = 'I' THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause,\" and (c.invoiceDate between '\",pInvoiceFromDate,\"' and '\",pInvoiceToDate,\"'  \n" +
                "													or c.refParentCreditDebitInvoiceDate between '\",pInvoiceFromDate,\"' and '\",pInvoiceToDate,\"')\");  \n" +
                "		ELSEIF pSelectedDateType = 'M' THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause,\" AND (receiptDate BETWEEN '\",pInvoiceFromDate,\"' AND '\",pInvoiceToDate,\"')\");  \n" +
                "		ELSEIF pSelectedDateType = 'PO' THEN  \n" +
                "        	SET pWhereClause = CONCAT(pWhereClause,\" AND (poDate BETWEEN '\",pInvoiceFromDate,\"' AND '\",pInvoiceToDate,\"')\");  \n" +
                "		ELSEIF pSelectedDateType = 'C' THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause,\" AND (creditMemoDate BETWEEN '\",pInvoiceFromDate,\"' AND '\",pInvoiceToDate,\"')\");  \n" +
                "		ELSEIF pSelectedDateType = 'D' THEN  \n" +
                "        	SET pWhereClause = CONCAT(pWhereClause,\" AND (debitMemoDate BETWEEN '\",pInvoiceFromDate,\"' AND '\",pInvoiceToDate,\"')\");  \n" +
                "		ELSEIF pSelectedDateType = 'P' THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause,\" AND (packingSlipDate BETWEEN '\",pInvoiceFromDate,\"' AND '\",pInvoiceToDate,\"')\");  \n" +
                "		END IF;  \n" +
                "	ELSEIF pInvoiceFromDate IS NOT NULL THEN  \n" +
                "		IF pSelectedDateType = 'I' THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause,\" and (c.invoiceDate = '\",pInvoiceFromDate,\"'  \n" +
                "													   or c.refParentCreditDebitInvoiceDate = '\",pInvoiceFromDate,\"')\");  \n" +
                "		ELSEIF pSelectedDateType = 'M' THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause,\" AND (receiptDate = '\",pInvoiceFromDate,\"')\");  \n" +
                "		ELSEIF pSelectedDateType = 'PO' THEN  \n" +
                "        	SET pWhereClause = CONCAT(pWhereClause,\" AND (poDate = '\",pInvoiceFromDate,\"')\");  \n" +
                "		ELSEIF pSelectedDateType = 'C' THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause,\" AND (creditMemoDate = '\",pInvoiceFromDate,\"')\");  \n" +
                "		ELSEIF pSelectedDateType = 'D' THEN  \n" +
                "        	SET pWhereClause = CONCAT(pWhereClause,\" AND (debitMemoDate = '\",pInvoiceFromDate,\"')\");  \n" +
                "		ELSEIF pSelectedDateType = 'P' THEN  \n" +
                "        	SET pWhereClause = CONCAT(pWhereClause,\" AND (packingSlipDate = '\",pInvoiceFromDate,\"')\");  \n" +
                "		END IF;  \n" +
                "    END IF;  \n" +
                "  \n" +
                "	IF pInvoiceNumber IS NOT NULL AND pInvoiceNumber != '' THEN  \n" +
                "		IF pIsExactSearch = 1 THEN  \n" +
                "			SET pWhereClause= CONCAT(pWhereClause, \"  \n" +
                "									AND (  \n" +
                "											c.supplierSONumber = '\", pInvoiceNumber, \"'  \n" +
                "										OR 	c.poNumber = '\", pInvoiceNumber, \"'  \n" +
                "										OR 	c.packingSlipNumber = '\", pInvoiceNumber, \"'  \n" +
                "										OR 	c.invoiceNumber = '\", pInvoiceNumber, \"'  \n" +
                "										OR 	c.refInvoiceNumber = '\", pInvoiceNumber, \"'  \n" +
                "										OR 	c.creditMemoNumber = '\", pInvoiceNumber, \"'  \n" +
                "										OR 	c.debitMemoNumber = '\", pInvoiceNumber, \"'\"  \n" +
                "									  \" ) \"  \n" +
                "						);  \n" +
                "		ELSE  \n" +
                "			SET pWhereClause= CONCAT(pWhereClause, \"  \n" +
                "									AND (  \n" +
                "											c.supplierSONumber like '%\", pInvoiceNumber, \"%'  \n" +
                "										OR 	c.poNumber like '%\", pInvoiceNumber, \"%'  \n" +
                "										OR 	c.packingSlipNumber like '%\", pInvoiceNumber, \"%'  \n" +
                "										OR 	c.invoiceNumber like '%\", pInvoiceNumber, \"%'  \n" +
                "										OR 	c.refInvoiceNumber like '%\", pInvoiceNumber, \"%'  \n" +
                "										OR 	c.creditMemoNumber like '%\", pInvoiceNumber, \"%'  \n" +
                "										OR 	c.debitMemoNumber like '%\", pInvoiceNumber, \"%'\"  \n" +
                "									  \" ) \"  \n" +
                "						);  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pMfrPnId IS NOT NULL) THEN  \n" +
                "		SET pWhereClause= CONCAT(pWhereClause, \" AND exists (  \n" +
                "				SELECT 1  \n" +
                "				  FROM packing_slip_material_receive_det x  \n" +
                "				 WHERE x.refPackingSlipMaterialRecID = c.id and x.partID = \", pMfrPnId ,\" AND x.isDeleted = 0  \n" +
                "			)  \n" +
                "		\");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pPageIndex <> 0 AND pRecordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (pPageIndex -1) * pRecordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/* to get total count of rows */  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*) as TotalRecord FROM (\", @temp_Sproc_RetriveSupplierInvoiceList ,\" ) c where \", pWhereClause );  \n" +
                "    PREPARE query1 FROM @SQLStatement1;  \n" +
                "    EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"  \n" +
                "			SELECT 	c.*,  \n" +
                "					case when round((c.totalExtendedAmount - c.paidAmount + c.refundAmount),2) != 0 and c.paymentDueDate <= '\",vCurrentDate,\"' then 1 else 0 end isPaymentDueDatePassed,  \n" +
                "				round(c.paidAmount,2) totalPaidAmount,  \n" +
                "                round(c.refundAmount,2) totalRefundAmount,  \n" +
                "				round((c.totalExtendedAmount - c.paidAmount + c.refundAmount),2) paymentAmount,  \n" +
                "				round((c.totalExtendedAmount - c.paidAmount + c.refundAmount),2) balanceToPayAmount,  \n" +
                "				round((c.totalPaidDebitCreditAmount+c.totalRefundDebitCreditAmount+c.paidAmount+c.refundAmount),2) totalPaidAmountToDisableDelete  \n" +
                "			FROM 	(\", @temp_Sproc_RetriveSupplierInvoiceList ,\" ) c  \n" +
                "			where 	\", pWhereClause ,\" \", pOrderBy , rowNumWhere);  \n" +
                "  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 25-02-2022  *********************************** */
                "DROP procedure IF EXISTS `Sproc_GetAllOtherComponentList`;  \n" +
                "CREATE PROCEDURE `Sproc_GetAllOtherComponentList`(  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "      DECLARE pmfgCodeID INT;  \n" +
                "      DECLARE vMfgCodeIds VARCHAR(50) DEFAULT '';  \n" +
                "      DECLARE v_mfgNameFormat VARCHAR(10);  \n" +
                "	  SELECT fun_getMFGCodeNameFormat() INTO v_mfgNameFormat;  \n" +
                "      SELECT id INTO pmfgCodeID FROM mfgcodemst WHERE iscompany=1  AND isdeleted=0;  \n" +
                "      SELECT GROUP_CONCAT(refMfgCodeMstID) INTO vMfgCodeIds  \n" +
                "      FROM supplier_mapping_mst  \n" +
                "      WHERE supplierID  = pmfgCodeID AND isDeleted =0 AND isCustMapping=0;  \n" +
                "      #get component having mfg as iscompany and part type other  \n" +
                "      SELECT c.pidcode,c.id,c.mfgPN,rr.name AS rohsName,rr.rohsIcon,c.frequency,c.mfgPNDescription,c.category,c.partType,  \n" +
                "      cp.name AS packagingName,c.imageURL,c.unit, c.pcbPerArray, c.packageQty,c.minimum, c.mult,  \n" +
                "      c.packagingId,u.unitName,c.rohsStatusID,mc.mfgCode,mc.mfgName,c.mfgcodeid , pmfgCodeID   fcaCompId , c.partStatus,  \n" +
                "      c.frequencyType, fun_GetFormattedMfgCode(mc.mfgCode, mc.mfgName, v_mfgNameFormat) mfgCodeName, c.internalReference  \n" +
                "      FROM COMPONENT c JOIN rfq_rohsmst rr ON rr.id=c.rohsStatusID  \n" +
                "      LEFT JOIN component_packagingmst cp ON cp.id=c.packagingId  \n" +
                "      LEFT JOIN uoms u ON u.id=c.uom  \n" +
                "      JOIN mfgcodemst mc ON  mc.id=c.mfgcodeid  \n" +
                "      WHERE c.partType=4  \n" +
                "      AND c.isdeleted=0  \n" +
                "      AND (c.mfgcodeid=pmfgCodeID OR FIND_IN_SET(c.mfgcodeid ,vMfgCodeIds))  \n" +
                "      AND c.isGoodPart  = 1;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version ->  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1329,'1.00','V1',' User Story 40988: [Main Branch] Demo Improvement points for Add some filters in Advance Filter given on 01-02-2022 - Jay '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1329:
            allDbChangesArray.push(
                /* **************************** New Script -> 25-02-2022  *********************************** */
                "DROP TRIGGER IF EXISTS `TRG_BU_purchase_order_line_release_det`;  \n" +
                "CREATE TRIGGER `TRG_BU_purchase_order_line_release_det` BEFORE UPDATE ON `purchase_order_line_release_det` FOR EACH ROW BEGIN  \n" +
                "	IF(NEW.isdeleted = 0) THEN  \n" +
                "		IF (SELECT COUNT(1) FROM purchase_order_det WHERE id = NEW.refPurchaseOrderDetID AND isdeleted = true) = 1 THEN  \n" +
                "			SIGNAL SQLSTATE '45001' SET MESSAGE_TEXT= 'Parent Detail does not exists, Please refresh page and try again.';  \n" +
                "		END IF;  \n" +
                "		IF (NEW.qty = NEW.receivedQty AND NEW.poLineWorkingStatus='P') THEN  \n" +
                "			SET NEW.poLineWorkingStatus='C';  \n" +
                "			SET NEW.poLineCompleteType='A';  \n" +
                "		ELSEIF ((NEW.qty > NEW.receivedQty AND NEW.poLineCompleteType != 'M') OR (NEW.qty != OLD.qty AND New.poLineCompleteType = 'M' AND NEW.poLineWorkingStatus='C')) THEN  \n" +
                "			SET NEW.poLineWorkingStatus='P';  \n" +
                "			SET NEW.poLineCompleteType='P';  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 25-02-2022  *********************************** */
                "DROP TRIGGER IF EXISTS `TRG_AI_packing_slip_material_receive_det`;  \n" +
                "CREATE TRIGGER `TRG_AI_packing_slip_material_receive_det` AFTER INSERT ON `packing_slip_material_receive_det` FOR EACH ROW BEGIN  \n" +
                "	DECLARE PORLINE_OTY INT;  \n" +
                "	DECLARE vTotalQty INT;  \n" +
                "    DECLARE vPOID INT;  \n" +
                "    SELECT `qty` INTO PORLINE_OTY FROM purchase_order_line_release_det WHERE id = New.refPOReleaseLineID;  \n" +
                "	SELECT SUM(IFNULL(packingSlipQty,0)) INTO vTotalQty FROM packing_slip_material_receive_det WHERE refPOReleaseLineID=New.refPOReleaseLineID AND IFNULL(isReceivedWrongPart,0)=0 AND isdeleted=0;  \n" +
                "	select refPurchaseOrderID into vPOID from purchase_order_det where id = NEW.refPurchaseOrderDetID;  \n" +
                "	IF (NEW.isDeleted = TRUE)THEN  \n" +
                "		UPDATE purchase_order_line_release_det SET poLineWorkingStatus='P',poLineCompleteType='P',poLineCompleteReason=(NULL),receivedQty=vTotalQty WHERE id = NEW.refPOReleaseLineID;  \n" +
                "	ELSEIF( NEW.refPurchaseOrderDetID IS NOT NULL AND New.refPOReleaseLineID IS NOT NULL AND NEW.refPOLineID IS NOT NULL AND  \n" +
                "		PORLINE_OTY <= vTotalQty) THEN  \n" +
                "			UPDATE purchase_order_line_release_det SET poLineWorkingStatus='C',poLineCompleteType='A', receivedQty=vTotalQty WHERE id = NEW.refPOReleaseLineID;  \n" +
                "		ELSE  \n" +
                "			UPDATE purchase_order_line_release_det SET poLineWorkingStatus='P',receivedQty=vTotalQty,poLineCompleteType='P',poLineCompleteReason=(NULL) WHERE id = NEW.refPOReleaseLineID;  \n" +
                "	END IF;  \n" +
                "    IF(vPOID IS NOT NULL) THEN  \n" +
                "		CALL Sproc_UpdatePoWorkingLineStatus(vPOID);  \n" +
                "	END IF;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 25-02-2022  *********************************** */
                "DROP TRIGGER IF EXISTS `Trg_AU_packing_slip_material_receive_det`;  \n" +
                "CREATE TRIGGER `Trg_AU_packing_slip_material_receive_det` AFTER UPDATE ON `packing_slip_material_receive_det` FOR EACH ROW BEGIN  \n" +
                "	DECLARE v_PackingSlipReceiptType VARCHAR(5);  \n" +
                "	DECLARE v_CreditMemoType VARCHAR(5);  \n" +
                "	DECLARE v_oldRefRMAPackingSlipNumber VARCHAR(100);  \n" +
                "	DECLARE v_newRefRMAPackingSlipNumber VARCHAR(100);  \n" +
                "	DECLARE v_oldRefRMAInvoiceNumber VARCHAR(100);  \n" +
                "	DECLARE v_newRefRMAInvoiceNumber VARCHAR(100);  \n" +
                "	DECLARE PORLINE_OTY INT;  \n" +
                "	DECLARE vTotalQty INT;  \n" +
                "    DECLARE vPOID INT;  \n" +
                "	DECLARE vMfgCodeFormat INT;  \n" +
                "    DECLARE vOldCustomer VARCHAR(100);  \n" +
                "    DECLARE vNewCustomer VARCHAR(100);  \n" +
                "  \n" +
                "    SELECT fun_getMFGCodeNameFormat() INTO vMfgCodeFormat;  \n" +
                "  \n" +
                "    SELECT `qty` INTO PORLINE_OTY FROM purchase_order_line_release_det WHERE id = New.refPOReleaseLineID;  \n" +
                "	SELECT SUM(IFNULL(packingSlipQty,0)) INTO vTotalQty FROM packing_slip_material_receive_det WHERE refPOReleaseLineID=New.refPOReleaseLineID AND IFNULL(isReceivedWrongPart,0)=0 AND isdeleted=0;  \n" +
                "    select refPurchaseOrderID into vPOID from purchase_order_det where id = NEW.refPurchaseOrderDetID;  \n" +
                "  \n" +
                "	IF (NEW.refPurchaseOrderDetID IS NOT NULL AND New.refPOReleaseLineID IS NOT NULL AND NEW.refPOLineID IS NOT NULL AND PORLINE_OTY <= vTotalQty) THEN  \n" +
                "		UPDATE purchase_order_line_release_det SET poLineWorkingStatus='C',poLineCompleteType='A',receivedQty=vTotalQty WHERE id = NEW.refPOReleaseLineID;  \n" +
                "	ELSE  \n" +
                "		UPDATE purchase_order_line_release_det SET poLineWorkingStatus='P',receivedQty=vTotalQty,poLineCompleteType='P',poLineCompleteReason=(NULL) WHERE id = NEW.refPOReleaseLineID;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(vPOID IS NOT NULL) THEN  \n" +
                "		CALL Sproc_UpdatePoWorkingLineStatus(vPOID);  \n" +
                "        /* (-20) is Purchase Order Entity Default Entry ID*/  \n" +
                "        insert into pending_elastic_entity_sync_data(entityID,entityParamDet) values(-20,concat('{\"id\":', vPOID , '}'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	SELECT receiptType, creditMemoType INTO v_PackingSlipReceiptType, v_CreditMemoType FROM packing_slip_material_receive WHERE id = NEW.refPackingSlipMaterialRecID;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.packingSlipSerialNumber,0) != IFNULL(NEW.packingSlipSerialNumber,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "        valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR),  \n" +
                "		(  \n" +
                "			CASE  \n" +
                "				WHEN v_PackingSlipReceiptType = 'P' THEN 'Packing Slip Line#'  \n" +
                "				WHEN v_PackingSlipReceiptType = 'R' THEN 'RMA Line#'  \n" +
                "				WHEN v_PackingSlipReceiptType = 'I' THEN 'Supplier Invoice Line#'  \n" +
                "				WHEN v_PackingSlipReceiptType = 'C' THEN 'Credit Memo Line#'  \n" +
                "				WHEN v_PackingSlipReceiptType = 'D' THEN 'Debit Memo Line#'  \n" +
                "				ELSE NULL  \n" +
                "			END  \n" +
                "		),  \n" +
                "		CAST(OLD.packingSlipSerialNumber AS CHAR), CAST(new.packingSlipSerialNumber AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive_det','packingSlipSerialNumber'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.poReleaseNumber,0) != IFNULL(NEW.poReleaseNumber,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "        valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'PO Release#', CAST(OLD.poReleaseNumber AS CHAR), CAST(new.poReleaseNumber AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive_det','poReleaseNumber'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.internalRef,0) != IFNULL(NEW.internalRef,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "        valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Internal Ref#', CAST(OLD.internalRef AS CHAR), CAST(new.internalRef AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive_det','internalRef'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.nickname,0) != IFNULL(NEW.nickname,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "        valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Nickname', CAST(OLD.nickname AS CHAR), CAST(new.nickname AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive_det','nickname'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.rohsstatus,0) != IFNULL(NEW.rohsstatus,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "        valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'RoHS Requirement', CAST(fun_getRoHSNameByID(OLD.rohsstatus) AS CHAR), CAST(fun_getRoHSNameByID(new.rohsstatus) AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        'varchar');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.partID,0) != IFNULL(NEW.partID,0) THEN  \n" +
                "		IF (v_PackingSlipReceiptType = 'P' OR v_PackingSlipReceiptType = 'R') THEN  \n" +
                "			INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "			valueDataType)  \n" +
                "			VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'MFR', CAST(fun_getMfgCodeAndNameByPartID(OLD.partID) AS CHAR), CAST(fun_getMfgCodeAndNameByPartID(new.partID) AS CHAR),  \n" +
                "			fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "            'varchar');  \n" +
                "		END IF;  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'MPN', CAST(fun_getComponentNameByID(OLD.partID) AS CHAR), CAST(fun_getComponentNameByID(new.partID) AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        'varchar');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.refSupplierPartId,0) != IFNULL(NEW.refSupplierPartId,0) THEN  \n" +
                "		IF (v_PackingSlipReceiptType = 'P' OR v_PackingSlipReceiptType = 'R') THEN  \n" +
                "			INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "			valueDataType)  \n" +
                "			VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Supplier', CAST(fun_getMfgCodeAndNameByPartID(OLD.refSupplierPartId) AS CHAR), CAST(fun_getMfgCodeAndNameByPartID(new.refSupplierPartId) AS CHAR),  \n" +
                "			fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "            'varchar');  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'SPN', CAST(fun_getComponentNameByID(OLD.refSupplierPartId) AS CHAR), CAST(fun_getComponentNameByID(new.refSupplierPartId) AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        'varchar');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.orderedQty,0) != IFNULL(NEW.orderedQty,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Order Qty', CAST(CAST(OLD.orderedQty AS SIGNED) AS CHAR), CAST(CAST(new.orderedQty AS SIGNED) AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        'qty');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.receivedQty,0) != IFNULL(NEW.receivedQty,0) THEN  \n" +
                "		IF (IFNULL(v_CreditMemoType,0) != 'MC' AND IFNULL(v_CreditMemoType,0) != 'MD') THEN  \n" +
                "			INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "			valueDataType)  \n" +
                "			VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), (CASE WHEN (v_CreditMemoType = 'RC' OR v_PackingSlipReceiptType = 'R') THEN 'Shipped Qty' ELSE 'Received Qty' END),  \n" +
                "			CAST(CAST(OLD.receivedQty AS SIGNED) AS CHAR), CAST(CAST(new.receivedQty AS SIGNED) AS CHAR),  \n" +
                "			fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "            'qty');  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.packingSlipQty,0) != IFNULL(NEW.packingSlipQty,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), (CASE WHEN v_CreditMemoType = 'RC' THEN 'Credit Memo Qty' WHEN v_PackingSlipReceiptType = 'R' THEN 'RMA Qty' ELSE 'Packing Slip Qty' END),  \n" +
                "		CAST(CAST(OLD.packingSlipQty AS SIGNED) AS CHAR), CAST(CAST(new.packingSlipQty AS SIGNED) AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        'qty');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.binID,0) != IFNULL(NEW.binID,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Location/Bin', CAST(fun_getBinNameByID(OLD.binID) AS CHAR), CAST(fun_getBinNameByID(new.binID) AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        'varchar');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.warehouseID,0) != IFNULL(NEW.warehouseID,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Warehouse', CAST(fun_getWarehouseNameByID(OLD.warehouseID) AS CHAR), CAST(fun_getWarehouseNameByID(new.warehouseID) AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        'varchar');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.parentWarehouseID,0) != IFNULL(NEW.parentWarehouseID,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Parent Warehouse', CAST(fun_getWarehouseNameByID(OLD.parentWarehouseID) AS CHAR), CAST(fun_getWarehouseNameByID(new.parentWarehouseID) AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        'varchar');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.invoicePrice,0) != IFNULL(NEW.invoicePrice,0) THEN  \n" +
                "		IF (IFNULL(v_PackingSlipReceiptType,0) != 'R') THEN  \n" +
                "			INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "			valueDataType)  \n" +
                "			VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), (CASE WHEN v_CreditMemoType = 'RC' THEN 'Credit Memo Unit Price' ELSE 'Invoice Price' END), CAST(OLD.invoicePrice AS CHAR), CAST(new.invoicePrice AS CHAR),  \n" +
                "			fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "            'unitprice');  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.purchasePrice,0) != IFNULL(NEW.purchasePrice,0) THEN  \n" +
                "		IF (IFNULL(v_CreditMemoType,0) != 'MC' AND IFNULL(v_CreditMemoType,0) != 'MD') THEN  \n" +
                "			INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "			valueDataType)  \n" +
                "			VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'PO Unit Price', CAST(OLD.purchasePrice AS CHAR), CAST(new.purchasePrice AS CHAR),  \n" +
                "			fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "            'unitprice');  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.approveNote,0) != IFNULL(NEW.approveNote,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "			valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Approve Note', CAST(OLD.approveNote AS CHAR), CAST(new.approveNote AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive_det','approveNote'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.`status`,0) != IFNULL(NEW.`status`,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "			valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Charged Status',  \n" +
                "		CAST(  \n" +
                "			(  \n" +
                "				CASE  \n" +
                "					WHEN old.`status` = 'P' THEN 'Pending'  \n" +
                "					WHEN old.`status` = 'A' THEN 'Approved'  \n" +
                "					WHEN old.`status` = 'D' THEN 'Disapproved'  \n" +
                "				END  \n" +
                "			)  \n" +
                "		AS CHAR),  \n" +
                "		CAST(  \n" +
                "			(  \n" +
                "				CASE  \n" +
                "					WHEN new.`status` = 'P' THEN 'Pending'  \n" +
                "					WHEN new.`status` = 'A' THEN 'Approved'  \n" +
                "					WHEN new.`status` = 'D' THEN 'Disapproved'  \n" +
                "				END  \n" +
                "			)  \n" +
                "		AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        'varchar');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.extendedPrice,0) != IFNULL(NEW.extendedPrice,0) THEN  \n" +
                "		IF (IFNULL(v_CreditMemoType,0) != 'MC' AND IFNULL(v_CreditMemoType,0) != 'MD') THEN  \n" +
                "			INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "			valueDataType)  \n" +
                "			VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), (CASE WHEN v_CreditMemoType = 'RC' THEN 'Extended Credit Memo Price' WHEN v_PackingSlipReceiptType = 'R' THEN 'Extended RMA Price' ELSE 'Extended Invoice Price' END),  \n" +
                "			OLD.extendedPrice, new.extendedPrice, fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "            'amount');  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.extendedReceivedPrice,0) != IFNULL(NEW.extendedReceivedPrice,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "			valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Extended PO Price',  \n" +
                "		OLD.extendedReceivedPrice, new.extendedReceivedPrice,  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        'amount');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.difference,0) != IFNULL(NEW.difference,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "			valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Difference Amount', CAST(OLD.difference AS CHAR), CAST(new.difference AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        'unitprice');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.differenceQty,0) != IFNULL(NEW.differenceQty,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "        valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Diffrence Qty', CAST(OLD.differenceQty AS CHAR), CAST(new.differenceQty AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        'qty');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.packagingID,0) != IFNULL(NEW.packagingID,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "        valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Packaging', CAST(fun_getPackagingNameByID(OLD.packagingID) AS CHAR), CAST(fun_getPackagingNameByID(new.packagingID) AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        'varchar');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.receivedStatus,0) != IFNULL(NEW.receivedStatus,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "        valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Received Status',  \n" +
                "		CAST(  \n" +
                "			(  \n" +
                "				CASE  \n" +
                "					WHEN old.receivedStatus = 'P' THEN 'Pending'  \n" +
                "					WHEN old.receivedStatus = 'A' THEN 'Accepted'  \n" +
                "					WHEN old.receivedStatus = 'R' THEN 'Rejected'  \n" +
                "				END  \n" +
                "			)  \n" +
                "		AS CHAR),  \n" +
                "		CAST(  \n" +
                "			(  \n" +
                "				CASE  \n" +
                "					WHEN new.receivedStatus = 'P' THEN 'Pending'  \n" +
                "					WHEN new.receivedStatus = 'A' THEN 'Accepted'  \n" +
                "					WHEN new.receivedStatus = 'R' THEN 'Rejected'  \n" +
                "				END  \n" +
                "			)  \n" +
                "		AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        'varchar');  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.`comment`,0) != IFNULL(NEW.`comment`,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "        valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Line Comment', CAST(OLD.`comment` AS CHAR), CAST(new.`comment` AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive_det','comment'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.remark,0) != IFNULL(NEW.remark,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "        valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Line Comment', CAST(OLD.remark AS CHAR), CAST(new.remark AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive_det','remark'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.internalRemark,0) != IFNULL(NEW.internalRemark,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "        valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Internal Line Comment', CAST(OLD.internalRemark AS CHAR), CAST(new.internalRemark AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive_det','internalRemark'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF v_PackingSlipReceiptType = 'R' THEN  \n" +
                "		IF (old.refPackingSlipIdForRma IS NOT NULL) THEN  \n" +
                "			SELECT fun_getPackingSlipNumberById(old.refPackingSlipIdForRma) INTO v_oldRefRMAPackingSlipNumber;  \n" +
                "		ELSE  \n" +
                "			SET v_oldRefRMAPackingSlipNumber = old.refPackingSlipForRma;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF (new.refPackingSlipIdForRma IS NOT NULL) THEN  \n" +
                "			SELECT fun_getPackingSlipNumberById(new.refPackingSlipIdForRma) INTO v_newRefRMAPackingSlipNumber;  \n" +
                "		ELSE  \n" +
                "			SET v_newRefRMAPackingSlipNumber = new.refPackingSlipForRma;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF (old.refInvoiceIdForRma IS NOT NULL) THEN  \n" +
                "			SELECT fun_getSupplierInvoiceNumberByID(old.refInvoiceIdForRma) INTO v_oldRefRMAInvoiceNumber;  \n" +
                "		ELSE  \n" +
                "			SET v_oldRefRMAInvoiceNumber = old.refInvoiceForRma;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF (new.refInvoiceIdForRma IS NOT NULL) THEN  \n" +
                "			SELECT fun_getSupplierInvoiceNumberByID(new.refInvoiceIdForRma) INTO v_newRefRMAInvoiceNumber;  \n" +
                "		ELSE  \n" +
                "			SET v_newRefRMAInvoiceNumber = new.refInvoiceForRma;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF IFNULL(v_oldRefRMAPackingSlipNumber,0) != IFNULL(v_newRefRMAPackingSlipNumber,0) THEN  \n" +
                "			INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "			valueDataType)  \n" +
                "			VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Packing Slip#', CAST(v_oldRefRMAPackingSlipNumber AS CHAR), CAST(v_newRefRMAPackingSlipNumber AS CHAR),  \n" +
                "			fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "            'varchar');  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF IFNULL(v_oldRefRMAInvoiceNumber,0) != IFNULL(v_newRefRMAInvoiceNumber,0) THEN  \n" +
                "			INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "			valueDataType)  \n" +
                "			VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Supplier Invoice#', CAST(v_oldRefRMAInvoiceNumber AS CHAR), CAST(v_newRefRMAInvoiceNumber AS CHAR),  \n" +
                "			fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "            'varchar');  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.isDeleted,0) != IFNULL(NEW.isDeleted,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "			valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Deleted', NULL,  \n" +
                "		CONCAT(  \n" +
                "			(  \n" +
                "				CASE  \n" +
                "					WHEN v_PackingSlipReceiptType = 'P' THEN 'Packing Slip Line# '  \n" +
                "					WHEN v_PackingSlipReceiptType = 'R' THEN 'RMA Line# '  \n" +
                "					WHEN v_PackingSlipReceiptType = 'I' THEN 'Invoice Line# '  \n" +
                "					WHEN v_PackingSlipReceiptType = 'C' THEN 'Credit Memo Line# '  \n" +
                "					WHEN v_PackingSlipReceiptType = 'D' THEN 'Debit Memo Line# '  \n" +
                "					ELSE 'Line# '  \n" +
                "				END  \n" +
                "			), CAST(OLD.packingSlipSerialNumber AS CHAR), ' is Deleted'  \n" +
                "		),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        'varchar');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.updateByRoleId,0) != IFNULL(NEW.updateByRoleId,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "			valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\", CAST(new.id AS CHAR), 'Last Modified By Role', CAST(fun_getRoleByID(OLD.updateByRoleId) AS CHAR), CAST(fun_getRoleByID(new.updateByRoleId) AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        'varchar');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  IF IFNULL(OLD.isLineCustConsigned,0) != IFNULL(NEW.isLineCustConsigned,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\",CAST(new.id AS CHAR),'Packing Slip Line Customer Consigned (No Charge)',CAST(CASE WHEN OLD.isLineCustConsigned=0 THEN 'No' ELSE 'Yes' END AS CHAR),  \n" +
                "		CAST(CASE WHEN NEW.isLineCustConsigned=0 THEN 'No' ELSE 'Yes' END AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.LineCustomerID,0) != IFNULL(NEW.LineCustomerID,0) THEN  \n" +
                "		SELECT fun_GetFormattedMfgCode(mfgCode, mfgName, vMfgCodeFormat) INTO vOldCustomer FROM mfgcodemst WHERE id=OLD.LineCustomerID;  \n" +
                "        SELECT fun_GetFormattedMfgCode(mfgCode, mfgName, vMfgCodeFormat) INTO vNewCustomer FROM mfgcodemst WHERE id=NEW.LineCustomerID;  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\",CAST(new.id AS CHAR),'Packing Slip Line Customer',CAST(vOldCustomer AS CHAR),  \n" +
                "		CAST(vNewCustomer AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.isNonUMIDStock,0) != IFNULL(NEW.isNonUMIDStock,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\",CAST(new.id AS CHAR),'Packing Slip Line Do Not Create UMID',CAST(CASE WHEN OLD.isNonUMIDStock=0 THEN 'No' ELSE 'Yes' END AS CHAR),  \n" +
                "		CAST(CASE WHEN NEW.isNonUMIDStock=0 THEN 'No' ELSE 'Yes' END AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.isZeroValue,0) != IFNULL(NEW.isZeroValue,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVEDET\",CAST(new.id AS CHAR),'Confirming Zero Value Line',CAST(CASE WHEN OLD.isZeroValue=0 THEN 'No' ELSE 'Yes' END AS CHAR),  \n" +
                "		CAST(CASE WHEN NEW.isZeroValue=0 THEN 'No' ELSE 'Yes' END AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version ->  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1330,'1.00','V1',' User Story 40988: [Main Branch] Demo Improvement points for Add some filters in Advance Filter given on 01-02-2022 - Jay '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1330:
            allDbChangesArray.push(
                /* **************************** New Script -> 25-02-2022  *********************************** */
                "DROP procedure IF EXISTS `Sproc_UpdatePoWorkingLineStatus`;  \n" +
                "CREATE PROCEDURE `Sproc_UpdatePoWorkingLineStatus`(  \n" +
                "	IN pPOID INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE vStatus VARCHAR(50);  \n" +
                "    DECLARE vPOTotalLinesWithOtherPart INT;  \n" +
                "	DECLARE vPOLines INT;  \n" +
                "	DECLARE vIsManualCompleted INT;  \n" +
                "  \n" +
                "    SELECT count(1) INTO vPOTotalLinesWithOtherPart FROM purchase_order_det WHERE refPurchaseOrderID=pPOID AND isDeleted=0;  \n" +
                "    SELECT count(1) INTO vPOLines FROM vu_purchaseorder_shipping_release WHERE refPurchaseOrderID=pPOID;  \n" +
                "    SELECT count(1) INTO vIsManualCompleted FROM vu_purchaseorder_shipping_release WHERE refPurchaseOrderID=pPOID AND poLineCompleteType='M';  \n" +
                "  \n" +
                "    SELECT poLineWorkingStatus INTO vStatus FROM vu_purchaseorder_shipping_release WHERE refPurchaseOrderID=pPOID AND poLineWorkingStatus='P' LIMIT 1;  \n" +
                "	IF vPOTotalLinesWithOtherPart > 0 THEN -- check po have any lines  \n" +
                "		IF vPOLines IS NULL OR vPOLines=0 THEN  \n" +
                "			SET vStatus='P';  \n" +
                "		ELSE  \n" +
                "			SET vStatus=IFNULL(vStatus,'C');  \n" +
                "		END IF;  \n" +
                "	ELSE  \n" +
                "		SET vStatus='P';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(vStatus='P') THEN  \n" +
                "		UPDATE purchase_order_mst SET poWorkingStatus=(case when poWorkingStatus='CA' then poWorkingStatus else vStatus end),lockStatus='NA',lockedAt=null,lockedBy=null,lockedByRoleId=null WHERE id=pPOID;  \n" +
                "	ELSE  \n" +
                "		UPDATE purchase_order_mst SET poWorkingStatus=(case when poWorkingStatus='CA' then poWorkingStatus else vStatus end),poCompleteType=(case when vIsManualCompleted > 0 then 'M' else 'A' end),lockStatus='RL' WHERE id=pPOID;  \n" +
                "	END IF;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 25-02-2022  *********************************** */
                "DROP VIEW IF EXISTS `vu_purchaseorder_shipping_release` ;  \n" +
                "CREATE VIEW `vu_purchaseorder_shipping_release` AS  \n" +
                "    SELECT  \n" +
                "        `pold`.`refPurchaseOrderDetID` AS `refPurchaseOrderDetID`,  \n" +
                "        `pod`.`refPurchaseOrderID` AS `refPurchaseOrderID`,  \n" +
                "        SUM(`pold`.`qty`) AS `totalQty`,  \n" +
                "        SUM(IFNULL(`pold`.`receivedQty`, 0)) AS `totalReceivedQty`,  \n" +
                "        (CASE  \n" +
                "            WHEN ((SUM(`pold`.`qty`) - SUM(IFNULL(`pold`.`receivedQty`, 0))) > 0) THEN (SUM(`pold`.`qty`) - SUM(IFNULL(`pold`.`receivedQty`, 0)))  \n" +
                "            ELSE 0  \n" +
                "        END) AS `totalPendingQty`,  \n" +
                "        MAX((CASE  \n" +
                "            WHEN (IFNULL(`pold`.`poLineWorkingStatus`, 'P') = 'P') THEN 'P'  \n" +
                "            ELSE 'C'  \n" +
                "        END)) AS `poLineWorkingStatus`,  \n" +
                "        MAX((CASE  \n" +
                "            WHEN (IFNULL(`pold`.`poLineWorkingStatus`, 'P') = 'P') THEN 'Open'  \n" +
                "            ELSE 'Closed'  \n" +
                "        END)) AS `poLineWorkingDisplayStatus`,  \n" +
                "        MAX((CASE  \n" +
                "            WHEN (`pold`.`poLineCompleteType` = 'M') THEN 'Manually Completed'  \n" +
                "            WHEN (`pold`.`poLineCompleteType` = 'A') THEN 'Auto Completed'  \n" +
                "            ELSE 'Open'  \n" +
                "        END)) AS `poLineCompleteTypeDisplayValue`,  \n" +
                "        MAX((CASE  \n" +
                "            WHEN (`pold`.`poLineCompleteType` = 'M') THEN 'M'  \n" +
                "            WHEN (`pold`.`poLineCompleteType` = 'A') THEN 'A'  \n" +
                "            ELSE 'P'  \n" +
                "        END)) AS `poLineCompleteType`,  \n" +
                "        SUM((CASE  \n" +
                "            WHEN (IFNULL(`pold`.`poLineWorkingStatus`, 'P') = 'P') THEN 1  \n" +
                "            ELSE 0  \n" +
                "        END)) AS `pendingLineCount`,  \n" +
                "        SUM((CASE  \n" +
                "            WHEN (IFNULL(`pold`.`poLineWorkingStatus`, 'P') = 'C') THEN 1  \n" +
                "            ELSE 0  \n" +
                "        END)) AS `receivedLineCount`,  \n" +
                "        (CASE  \n" +
                "            WHEN  \n" +
                "                (MAX((CASE  \n" +
                "                    WHEN (`pold`.`poLineCompleteType` = 'M') THEN 'Manually Completed'  \n" +
                "                    WHEN (`pold`.`poLineCompleteType` = 'A') THEN 'Auto Completed'  \n" +
                "                    ELSE 'Open'  \n" +
                "                END)) = 'Manually Completed')  \n" +
                "            THEN  \n" +
                "                GROUP_CONCAT(CONCAT('Release#:',  \n" +
                "                            ' ',  \n" +
                "                            `pold`.`releaseNumber`,  \n" +
                "                            '  \n" +
                "                                                                                                                                                                                                    ',  \n" +
                "                            'PO Release Complete Type:',  \n" +
                "                            ' ',  \n" +
                "                            (CASE  \n" +
                "                                WHEN (`pold`.`poLineCompleteType` = 'M') THEN 'Manually Completed'  \n" +
                "                                WHEN (`pold`.`poLineCompleteType` = 'A') THEN 'Auto Completed'  \n" +
                "                                ELSE 'Open'  \n" +
                "                            END),  \n" +
                "                            '  \n" +
                "                                                                                                                                                                                                    ',  \n" +
                "                            'PO Release Complete Reason:',  \n" +
                "                            IFNULL(`pold`.`poLineCompleteReason`, ''))  \n" +
                "                    SEPARATOR '  \n" +
                "                                                                                                                                            ')  \n" +
                "            ELSE ''  \n" +
                "        END) AS `poLineCompleteReason`  \n" +
                "    FROM  \n" +
                "        (`purchase_order_line_release_det` `pold`  \n" +
                "        JOIN `purchase_order_det` `pod` ON ((`pod`.`id` = `pold`.`refPurchaseOrderDetID`)))  \n" +
                "    WHERE  \n" +
                "        (`pold`.`isDeleted` = 0)  \n" +
                "    GROUP BY `pold`.`refPurchaseOrderDetID` , `pod`.`refPurchaseOrderID`;  \n" +
                /* **************************** Add Script Version ->  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1331,'1.00','V1',' User Story 39185: [Main Branch] Purchase Order Changes December-2021 - Jay '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1331:
            allDbChangesArray.push(
                /* **************************** New Script -> 25-02-2022  *********************************** */
                "DROP procedure IF EXISTS `Sproc_RetrievePurchaseOrderPerLineDetails`;  \n" +
                "CREATE PROCEDURE `Sproc_RetrievePurchaseOrderPerLineDetails`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN psupplierID VARCHAR(16000),  \n" +
                "	IN pshippingMethodId VARCHAR(16000),  \n" +
                "	IN psearchposotype VARCHAR(10),  \n" +
                "	IN psearchposotext VARCHAR(1000),  \n" +
                "	IN ppartIds VARCHAR(1000),  \n" +
                "    IN ppolinestatus VARCHAR(10),  \n" +
                "	IN ppostatus VARCHAR(50),  \n" +
                "	IN pfromDate DATE,  \n" +
                "	IN ptoDate DATE,  \n" +
                "    IN ponlyOtherPart boolean,  \n" +
                "    IN pwithoutOtherPart boolean,  \n" +
                "    IN pisonlyPendingLines boolean,  \n" +
                "    IN pPOComments VARCHAR(1000)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255);  \n" +
                "	DECLARE vDateTimeDisplayFormat VARCHAR(100);  \n" +
                "	DECLARE vTimeZone VARCHAR(50);  \n" +
                "	DECLARE vMfgCodeFormat INT;  \n" +
                "    DECLARE v_GroupConcatSeparator VARCHAR(10);  \n" +
                "  \n" +
                "	SELECT fun_getTimeZone() INTO vTimeZone;  \n" +
                "	SELECT fun_getDateTimeFormat() INTO vDateTimeDisplayFormat;  \n" +
                "    SELECT fun_getMFGCodeNameFormat() INTO vMfgCodeFormat;  \n" +
                "    SELECT `values` INTO v_GroupConcatSeparator FROM systemconfigrations WHERE `key` = 'GroupConcatSeparator' AND isActive = 1 AND isDeleted = 0;  \n" +
                "  \n" +
                "	SET @temp_Sproc_RetrievePurchaseOrderPerLineDeatils = CONCAT(\"  \n" +
                "			SELECT  \n" +
                "				pod.id,  \n" +
                "				pom.id AS refPurchaseOrderID,  \n" +
                "				CASE  \n" +
                "					WHEN pom.status = 0 THEN 'Draft'  \n" +
                "					ELSE 'Published'  \n" +
                "				END statusName,  \n" +
                "				pod.mfgPartID,  \n" +
                "				pod.packagingID,  \n" +
                "				pod.supplierPartID,  \n" +
                "				pod.partDescription,  \n" +
                "				pod.pcbPerArray,  \n" +
                "				pod.rohsStatusID,  \n" +
                "				pod.internalRef,  \n" +
                "				pod.qty,  \n" +
                "				pod.price,  \n" +
                "				pom.shippingMethodID,  \n" +
                "				(pod.qty * pod.price) extPrice,  \n" +
                "				pod.totalRelease,  \n" +
                "				pod.lineComment,  \n" +
                "				pod.lineID,  \n" +
                "				pod.supplierQuoteNumber,  \n" +
                "				(CASE  \n" +
                "					WHEN (vups.totalReceivedQty * 100 / pod.qty) > 100 THEN 100  \n" +
                "					ELSE IFNULL(ROUND((vups.totalReceivedQty * 100 / pod.qty),  \n" +
                "									2),  \n" +
                "							0)  \n" +
                "				END) poLineCompletionPercentage,  \n" +
                "				pom.poDate,  \n" +
                "				pom.poRevision,  \n" +
                "				pom.soNumber,  \n" +
                "				pom.soDate,  \n" +
                "				c.mfgPN,  \n" +
                "				c.pidCode,  \n" +
                "				c.unit,  \n" +
                "				c.iscustom,  \n" +
                "				c.partType,  \n" +
                "				rr.name AS rohsName,  \n" +
                "				rr.rohsIcon,  \n" +
                "				FUN_GETPACKAGINGNAMEBYID(pod.packagingID) packagingName,  \n" +
                "				mc.mfgCode,  \n" +
                "				mc.mfgName,  \n" +
                "				mc.id AS mfgcodeID,  \n" +
                "				pom.poNumber,  \n" +
                "				pom.status,  \n" +
                "				pom.carrierID,  \n" +
                "				pom.poWorkingStatus,  \n" +
                "				IFNULL(vups.poLineWorkingDisplayStatus, 'Open') poLineWorkingDisplayStatus,  \n" +
                "				CASE  \n" +
                "					WHEN pom.poWorkingStatus = 'C' THEN 'Completed'  \n" +
                "					WHEN pom.poWorkingStatus = 'CA' THEN 'Canceled'  \n" +
                "					ELSE 'In Progress'  \n" +
                "				END poWorkingStatusDisplayStatus,  \n" +
                "				vups.totalReceivedQty,  \n" +
                "				vups.totalPendingQty,  \n" +
                "				vups.poLineCompleteReason,  \n" +
                "				vups.poLineCompleteTypeDisplayValue poCompleteType,  \n" +
                "				FUN_GETFORMATTEDMFGCODE(m.mfgcode, m.mfgName, \",vMfgCodeFormat,\") supplierName,  \n" +
                "				FUN_GETUNITNAMEBYID(c.uom) uomName,  \n" +
                "				sc.mfgPN supplierPN,  \n" +
                "				pom.supplierID,  \n" +
                "				pom.termsID,  \n" +
                "				FUN_GETGENERICCATEGORYCODENAMEBYID(pom.termsID) termsName,  \n" +
                "				FUN_GETGENERICCATEGORYCODENAMEBYID(pom.shippingMethodID) shippingMethod,  \n" +
                "				FUN_GETGENERICCATEGORYCODENAMEBYID(pom.carrierID) carrierName,  \n" +
                "				pom.carrierAccountNumber,  \n" +
                "				pom.poComment,  \n" +
                "				pom.shippingComment,  \n" +
                "				pod.internalLineComment,  \n" +
                "				m.mfgcode AS supplierMfgName,  \n" +
                "				pol.otherExpense,  \n" +
                "				(IFNULL(pol.otherExpense, 0) + (pod.qty * pod.price)) totalExtPrice,  \n" +
                "				FUN_GETFORMATTEDMFGCODE(mc.mfgCode, mc.mfgName, \",vMfgCodeFormat,\") mfgcodeName,  \n" +
                "				FUN_GETUSERNAMEBYID(pod.updatedBy) updatedby,  \n" +
                "				FUN_GETUSERNAMEBYID(pod.createdBy) createdby,  \n" +
                "				FUN_GETROLEBYID(pod.createByRoleId) createdbyRole,  \n" +
                "				FUN_GETROLEBYID(pod.updateByRoleId) updatedbyRole,  \n" +
                "				(SELECT  \n" +
                "						pold.shippingDate  \n" +
                "					FROM  \n" +
                "						purchase_order_line_release_det pold  \n" +
                "					WHERE  \n" +
                "						pold.refPurchaseOrderDetID = pod.id  \n" +
                "							AND pold.isDeleted = 0  \n" +
                "					LIMIT 1) shipDate,  \n" +
                "				(SELECT  \n" +
                "						pold.promisedShipDate  \n" +
                "					FROM  \n" +
                "						purchase_order_line_release_det pold  \n" +
                "					WHERE  \n" +
                "						pold.refPurchaseOrderDetID = pod.id  \n" +
                "							AND pold.isDeleted = 0  \n" +
                "					LIMIT 1) promisedShipDate,  \n" +
                "				FUN_APPLYCOMMONDATETIMEFORMATBYPARAVALUE(pod.createdAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') createdAt,  \n" +
                "				FUN_APPLYCOMMONDATETIMEFORMATBYPARAVALUE(pod.UpdatedAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') updatedAt,  \n" +
                "				ps.packingSlipDate,  \n" +
                "				ps.packingSlipId,  \n" +
                "				c.custAssyPN,  \n" +
                "				(SELECT  \n" +
                "						GROUP_CONCAT(DISTINCT psmr.id, '@@@', psmr.packingSlipNumber  \n" +
                "								ORDER BY psmr.packingSlipDate DESC  \n" +
                "								SEPARATOR '\",v_GroupConcatSeparator,\"')  \n" +
                "					FROM  \n" +
                "						packing_slip_material_receive psmr  \n" +
                "							JOIN  \n" +
                "						packing_slip_material_receive_det psmrd ON psmrd.refPackingSlipMaterialRecID = psmr.id  \n" +
                "							AND psmrd.isDeleted = FALSE  \n" +
                "					WHERE  \n" +
                "						psmr.refPurchaseOrderID = pom.id  \n" +
                "							AND psmrd.refPurchaseOrderDetID = pod.id  \n" +
                "							AND psmr.receiptType = 'P'  \n" +
                "							AND psmr.isDeleted = FALSE  \n" +
                "					GROUP BY psmr.refPurchaseOrderID , psmrd.refPurchaseOrderDetID) packingSlip,  \n" +
                "				pod.isdeleted,  \n" +
                "				IFNULL(vups.poLineWorkingStatus, 'P') poLineWorkingStatus,  \n" +
                "				pod.isLineCustConsigned,  \n" +
                "				CASE  \n" +
                "					WHEN pod.isLineCustConsigned = 0 THEN 'No'  \n" +
                "					ELSE 'Yes'  \n" +
                "				END isLineCustConsignedValue,  \n" +
                "				pod.lineCustomerID,  \n" +
                "				FUN_GETFORMATTEDMFGCODE(pm.mfgCode, pm.mfgName, \",vMfgCodeFormat,\") customerName,  \n" +
                "				m.mfgName AS POSupplierName,  \n" +
                "				pod.isNonUMIDStock,  \n" +
                "				CASE  \n" +
                "					WHEN pod.isNonUMIDStock = 0 THEN 'No'  \n" +
                "					ELSE 'Yes'  \n" +
                "				END isNonUMIDStockValue,  \n" +
                "				pom.lockStatus  \n" +
                "			FROM  \n" +
                "				purchase_order_det pod  \n" +
                "					LEFT JOIN  \n" +
                "						(SELECT  \n" +
                "							MAX(psm.receiptDate) packingSlipDate,  \n" +
                "								MAX(psm.id) packingSlipId,  \n" +
                "								psmr.refPurchaseOrderDetID  \n" +
                "						FROM  \n" +
                "							packing_slip_material_receive psm  \n" +
                "						INNER JOIN packing_slip_material_receive_det psmr ON psmr.refPackingSlipMaterialRecID = psm.id  \n" +
                "							AND psmr.isdeleted = 0  \n" +
                "						GROUP BY psmr.refPurchaseOrderDetID) ps ON ps.refPurchaseOrderDetID = pod.id  \n" +
                "					LEFT JOIN  \n" +
                "						(SELECT  \n" +
                "							SUM(qty * price) AS otherExpense, refPurchaseOrderDetID  \n" +
                "						FROM  \n" +
                "							purchase_order_line_othercharges  \n" +
                "						WHERE  \n" +
                "							isDeleted = 0  \n" +
                "						GROUP BY refPurchaseOrderDetID) pol ON pol.refPurchaseOrderDetID = pod.id  \n" +
                "					LEFT JOIN  \n" +
                "						purchase_order_mst pom ON pom.id = pod.refPurchaseOrderID AND pom.isdeleted = 0  \n" +
                "					LEFT JOIN  \n" +
                "						vu_purchaseorder_shipping_release vups ON vups.refPurchaseOrderDetID = pod.id  \n" +
                "					JOIN  \n" +
                "						mfgcodemst m ON m.id = pom.supplierID  \n" +
                "					LEFT JOIN  \n" +
                "						component c ON c.id = pod.mfgPartID  \n" +
                "					LEFT JOIN  \n" +
                "						component sc ON sc.id = pod.supplierPartID  \n" +
                "					LEFT JOIN  \n" +
                "						mfgcodemst mc ON mc.id = c.mfgcodeID  \n" +
                "					LEFT JOIN  \n" +
                "						mfgcodemst pm ON pm.id = pod.lineCustomerID  \n" +
                "					LEFT JOIN  \n" +
                "						rfq_rohsmst rr ON rr.id = pod.rohsStatusID  \n" +
                "			WHERE  \n" +
                "				pod.isdeleted = 0  \n" +
                "	\");  \n" +
                "  \n" +
                "	IF(psupplierID IS NOT NULL)THEN  \n" +
                "		SET @temp_Sproc_RetrievePurchaseOrderPerLineDeatils= CONCAT(@temp_Sproc_RetrievePurchaseOrderPerLineDeatils,' and pom.supplierID in (',psupplierID,')');  \n" +
                "	END IF;  \n" +
                "	IF(pshippingMethodId IS NOT NULL)THEN  \n" +
                "		SET @temp_Sproc_RetrievePurchaseOrderPerLineDeatils= CONCAT(@temp_Sproc_RetrievePurchaseOrderPerLineDeatils,' and pom.shippingMethodID in (',pshippingMethodId,')');  \n" +
                "	END IF;  \n" +
                "	IF(psearchposotext IS NOT NULL)THEN  \n" +
                "		SET @temp_Sproc_RetrievePurchaseOrderPerLineDeatils= CONCAT(@temp_Sproc_RetrievePurchaseOrderPerLineDeatils,' and (pom.soNumber  ', CASE WHEN psearchposotype=\"C\" THEN CONCAT(' = \"', psearchposotext ,'\" ') ELSE CONCAT(' like \"%',psearchposotext,'%\" ') END, ' OR pom.poNumber ', CASE WHEN psearchposotype=\"C\" THEN CONCAT(' = \"', psearchposotext ,'\" ') ELSE CONCAT(' like \"%',psearchposotext,'%\" ') END,')');  \n" +
                "	END IF;  \n" +
                "	IF(pfromDate IS NOT NULL AND ptoDate IS NOT NULL)THEN  \n" +
                "		SET @temp_Sproc_RetrievePurchaseOrderPerLineDeatils=CONCAT(@temp_Sproc_RetrievePurchaseOrderPerLineDeatils, ' and (pom.poDate BETWEEN ''',pfromDate,''' AND ''',ptoDate,''')');  \n" +
                "	ELSEIF(pfromDate IS NOT NULL)THEN  \n" +
                "		SET @temp_Sproc_RetrievePurchaseOrderPerLineDeatils=CONCAT(@temp_Sproc_RetrievePurchaseOrderPerLineDeatils, ' and (pom.poDate =''',pfromDate,''')');  \n" +
                "	END IF;  \n" +
                "    IF(ppolinestatus IS NOT NULL)THEN  \n" +
                "		SET @temp_Sproc_RetrievePurchaseOrderPerLineDeatils= CONCAT(@temp_Sproc_RetrievePurchaseOrderPerLineDeatils,\" and poLineWorkingStatus = '\", ppolinestatus ,\"'\");  \n" +
                "	END IF;  \n" +
                "	IF(ppostatus IS NOT NULL)THEN  \n" +
                "		SET @temp_Sproc_RetrievePurchaseOrderPerLineDeatils= CONCAT(@temp_Sproc_RetrievePurchaseOrderPerLineDeatils,\" and pom.poWorkingStatus IN (\", ppostatus ,\")\");  \n" +
                "	END IF;  \n" +
                "    IF(pPOComments IS NOT NULL AND pPOComments != '')THEN  \n" +
                "		SET @temp_Sproc_RetrievePurchaseOrderPerLineDeatils = CONCAT(@temp_Sproc_RetrievePurchaseOrderPerLineDeatils, \"  \n" +
                "				AND (pom.shippingComment LIKE '%\",pPOComments,\"%'  \n" +
                "                OR pod.partDescription LIKE '%\",pPOComments,\"%'  \n" +
                "                OR pod.internalLineComment LIKE '%\",pPOComments,\"%'  \n" +
                "                OR pod.lineComment LIKE '%\",pPOComments,\"%'  \n" +
                "                OR pom.poComment LIKE '%\",pPOComments,\"%')  \n" +
                "                \");  \n" +
                "    END IF;  \n" +
                "	IF(ppartIds IS NOT NULL)THEN  \n" +
                "		SET @temp_Sproc_RetrievePurchaseOrderPerLineDeatils= CONCAT(@temp_Sproc_RetrievePurchaseOrderPerLineDeatils,' and (pod.mfgPartID in (',ppartIds,') OR pod.supplierPartID in (',ppartIds,'))');  \n" +
                "	END IF;  \n" +
                "    IF(pwithoutOtherPart=TRUE)THEN  \n" +
                "		SET @temp_Sproc_RetrievePurchaseOrderPerLineDeatils= CONCAT(@temp_Sproc_RetrievePurchaseOrderPerLineDeatils,' and c.partType!=4');  \n" +
                "	END IF;  \n" +
                "    IF(ponlyOtherPart=TRUE)THEN  \n" +
                "		SET @temp_Sproc_RetrievePurchaseOrderPerLineDeatils= CONCAT(@temp_Sproc_RetrievePurchaseOrderPerLineDeatils,' and c.partType=4');  \n" +
                "	END IF;  \n" +
                "	IF(pisonlyPendingLines=TRUE)THEN  \n" +
                "		SET @temp_Sproc_RetrievePurchaseOrderPerLineDeatils= CONCAT(@temp_Sproc_RetrievePurchaseOrderPerLineDeatils,' and poLineWorkingStatus=\"P\"');  \n" +
                "	END IF;  \n" +
                "    IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "		SET pOrderBy = \"ORDER BY createdAt DESC\";  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy);  \n" +
                "	END IF;  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = '1=1';  \n" +
                "	END IF;  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset);  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "	/* to get total count of rows */  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_RetrievePurchaseOrderPerLineDeatils,\" ) c where 1=1 and \", pWhereClause);  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "	SET @SQLStatement2 = CONCAT(\"select * from ( \", @temp_Sproc_RetrievePurchaseOrderPerLineDeatils,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "    PREPARE query1 FROM @SQLStatement2;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 25-02-2022  *********************************** */
                "DROP procedure IF EXISTS `Sproc_RetrievePurchaseOrderSummaryDeatils`;  \n" +
                "CREATE PROCEDURE `Sproc_RetrievePurchaseOrderSummaryDeatils`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN psupplierID VARCHAR(16000),  \n" +
                "	IN pshippingMethodId VARCHAR(16000),  \n" +
                "	IN psearchposotype VARCHAR(10),  \n" +
                "	IN psearchposotext VARCHAR(1000),  \n" +
                "	IN ppartIds VARCHAR(1000),  \n" +
                "	IN ppostatus VARCHAR(50),  \n" +
                "	IN pfromDate DATE,  \n" +
                "	IN ptoDate DATE,  \n" +
                "   IN pLockFilterStatus VARCHAR(50),  \n" +
                "   IN pPoPostingStatusFilter VARCHAR(20),  \n" +
                "   IN pPOComments VARCHAR(1000)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255);  \n" +
                "	DECLARE vDateTimeDisplayFormat VARCHAR(100);  \n" +
                "	DECLARE vTimeZone VARCHAR(50);  \n" +
                "    DECLARE vMfgCodeFormat INT;  \n" +
                "    DECLARE v_GroupConcatSeparator VARCHAR(10);  \n" +
                "	SELECT fun_getTimeZone() INTO vTimeZone;  \n" +
                "	SELECT fun_getDateTimeFormat() INTO vDateTimeDisplayFormat;  \n" +
                "    SELECT fun_getMFGCodeNameFormat() INTO vMfgCodeFormat;  \n" +
                "    SELECT `values` INTO v_GroupConcatSeparator FROM systemconfigrations WHERE `key` = 'GroupConcatSeparator' AND isActive = 1 AND isDeleted = 0;  \n" +
                "  \n" +
                "	SET @temp_Sproc_RetrievePurchaseOrderSummaryDeatils = CONCAT(\"  \n" +
                "			SELECT  \n" +
                "				pom.id,  \n" +
                "				pom.poNumber,  \n" +
                "				pom.supplierID,  \n" +
                "				pom.poDate,  \n" +
                "				pom.soNumber,  \n" +
                "				pom.soDate,  \n" +
                "				pom.termsID,  \n" +
                "				pom.shippingMethodID,  \n" +
                "				CASE  \n" +
                "					WHEN pom.status = 0 THEN 'Draft'  \n" +
                "					ELSE 'Published'  \n" +
                "				END statusName,  \n" +
                "				pom.status,  \n" +
                "				pom.poComment,  \n" +
                "				pom.shippingComment,  \n" +
                "				pom.serialNumber,  \n" +
                "				pom.poRevision,  \n" +
                "				pom.carrierID,  \n" +
                "				pom.carrierAccountNumber,  \n" +
                "				CASE  \n" +
                "					WHEN pom.shippingInsurance = 0 THEN 'No'  \n" +
                "					ELSE 'Yes'  \n" +
                "				END shippingInsuranceName,  \n" +
                "				pom.shippingInsurance,  \n" +
                "				FUN_GETADDRESSBYIDANDCONTACTPERSONID(pom.supplierAddressID,  \n" +
                "						pom.supplierContactPersonID) AS supplierAddress,  \n" +
                "				FUN_GETADDRESSBYIDANDCONTACTPERSONID(pom.shippingAddressID,  \n" +
                "						pom.shippingContactPersonID) AS shippingAddress,  \n" +
                "				FUN_GETADDRESSBYIDANDCONTACTPERSONID(pom.intermediateShipmentID,  \n" +
                "						pom.intermediateContactPersonID) AS intermediateAddress,  \n" +
                "				CASE  \n" +
                "					WHEN pom.isBlanketPO = 0 THEN 'No'  \n" +
                "					ELSE 'Yes'  \n" +
                "				END blanketPO,  \n" +
                "				pom.isBlanketPO,  \n" +
                "				m.mfgcode,  \n" +
                "				pom.poCompleteReason,  \n" +
                "                CASE  \n" +
                "					WHEN pom.poCompleteType = 'A' THEN 'Auto Completed'  \n" +
                "					WHEN pom.poCompleteType = 'M' THEN 'Manually Completed'  \n" +
                "					ELSE 'Open'  \n" +
                "				END  \n" +
                "				poCompleteType,  \n" +
                "				pom.cancleReason,  \n" +
                "				FUN_GETFORMATTEDMFGCODE(m.mfgcode, m.mfgName, \",vMfgCodeFormat,\") supplierName,  \n" +
                "				pom.poWorkingStatus,  \n" +
                "				pom.CancellationConfirmed,  \n" +
                "				CASE  \n" +
                "					WHEN pom.CancellationConfirmed = 0 THEN 'No'  \n" +
                "					ELSE 'Yes'  \n" +
                "				END CancellationConfirmedStatus,  \n" +
                "				CASE  \n" +
                "					WHEN pom.poWorkingStatus = 'P' THEN 'In Progress'  \n" +
                "					WHEN pom.poWorkingStatus = 'C' THEN 'Completed'  \n" +
                "					ELSE 'Canceled'  \n" +
                "				END workingStatusName,  \n" +
                "				IFNULL(vgf.cnt, 0) poDocumentCount,  \n" +
                "				FUN_GETFOBBYID(pom.freeOnBoardId) freeOnBoard,  \n" +
                "				FUN_GETGENERICCATEGORYCODENAMEBYID(pom.termsID) termsName,  \n" +
                "				FUN_GETGENERICCATEGORYCODENAMEBYID(pom.shippingMethodID) shippingMethod,  \n" +
                "				FUN_GETGENERICCATEGORYCODENAMEBYID(pom.carrierID) carrierName,  \n" +
                "				FUN_GETUSERNAMEBYID(pom.updatedBy) updatedby,  \n" +
                "				FUN_GETUSERNAMEBYID(pom.createdBy) createdby,  \n" +
                "				FUN_GETROLEBYID(pom.createByRoleId) createdbyRole,  \n" +
                "				FUN_GETROLEBYID(pom.updateByRoleId) updatedbyRole,  \n" +
                "				FUN_APPLYCOMMONDATETIMEFORMATBYPARAVALUE(pom.createdAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') createdAt,  \n" +
                "				FUN_APPLYCOMMONDATETIMEFORMATBYPARAVALUE(pom.UpdatedAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') updatedAt,  \n" +
                "				(SELECT  \n" +
                "						id  \n" +
                "					FROM  \n" +
                "						packing_slip_material_receive  \n" +
                "					WHERE  \n" +
                "						refPurchaseOrderID = pom.id  \n" +
                "							AND receiptType = 'P'  \n" +
                "							AND isdeleted = FALSE  \n" +
                "					ORDER BY receiptDate DESC  \n" +
                "					LIMIT 1) packingSlipId,  \n" +
                "				pom.isCustConsigned,  \n" +
                "				CASE  \n" +
                "					WHEN pom.isCustConsigned = 0 THEN 'No'  \n" +
                "					ELSE 'Yes'  \n" +
                "				END isCustConsignedValue,  \n" +
                "				pom.customerID,  \n" +
                "				FUN_GETFORMATTEDMFGCODE(pm.mfgcode, pm.mfgName, \",vMfgCodeFormat,\") customerName,  \n" +
                "				pom.isNonUMIDStock,  \n" +
                "				CASE  \n" +
                "					WHEN pom.isNonUMIDStock = 0 THEN 'No'  \n" +
                "					ELSE 'Yes'  \n" +
                "				END isNonUMIDStockValue,  \n" +
                "				pom.lockStatus,  \n" +
                "				(CASE  \n" +
                "					WHEN pom.lockStatus = 'NA' THEN 'Not Applicable'  \n" +
                "					WHEN pom.lockStatus = 'RL' THEN 'Ready To Lock'  \n" +
                "					WHEN pom.lockStatus = 'LC' THEN 'Locked'  \n" +
                "					ELSE NULL  \n" +
                "				END) lockStatusValue,  \n" +
                "				FUN_GETUSERNAMEBYID(pom.lockedBy) lockByName,  \n" +
                "				FUN_GETROLEBYID(pom.lockedByRoleId) lockedByRoleName,  \n" +
                "				FUN_APPLYCOMMONDATETIMEFORMATBYPARAVALUE(pom.lockedAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') lockedAt,  \n" +
                "				(SELECT  \n" +
                "						GROUP_CONCAT(DISTINCT psmr.id, '@@@', psmr.packingSlipNumber  \n" +
                "								ORDER BY psmr.packingSlipDate DESC  \n" +
                "								SEPARATOR '\",v_GroupConcatSeparator,\"')  \n" +
                "					FROM  \n" +
                "						packing_slip_material_receive psmr  \n" +
                "					WHERE  \n" +
                "						psmr.refPurchaseOrderID = pom.id  \n" +
                "							AND psmr.receiptType = 'P'  \n" +
                "							AND psmr.isDeleted = FALSE  \n" +
                "					GROUP BY psmr.refPurchaseOrderID) packingSlip,  \n" +
                "				vups.poPendingLine,  \n" +
                "				vups.poCompletedLine,  \n" +
                "				pod.totalAmount,  \n" +
                "				pod.totalPOLines,  \n" +
                "				pod.totalItems,  \n" +
                "				pod.totalOtherItems,  \n" +
                "				(CASE  \n" +
                "					WHEN  \n" +
                "						(IFNULL((vups.poCompletedLine * 100 / pod.totalPOLines),  \n" +
                "								0)) > 100  \n" +
                "					THEN  \n" +
                "						100  \n" +
                "					ELSE IFNULL(ROUND((vups.poCompletedLine * 100 / pod.totalPOLines),  \n" +
                "									2),  \n" +
                "							0)  \n" +
                "				END) poCompletionPercentage  \n" +
                "			FROM  \n" +
                "				purchase_order_mst pom  \n" +
                "					JOIN  \n" +
                "				mfgcodemst m ON m.id = pom.supplierID  \n" +
                "					LEFT JOIN  \n" +
                "				vu_genericfilescount vgf ON vgf.entityID = - 20  \n" +
                "					AND vgf.refTransID = pom.id  \n" +
                "					LEFT JOIN  \n" +
                "				(SELECT  \n" +
                "					SUM(CASE  \n" +
                "							WHEN poLineWorkingStatus = 'P' THEN 1  \n" +
                "							ELSE 0  \n" +
                "						END) poPendingLine,  \n" +
                "						SUM(CASE  \n" +
                "							WHEN poLineWorkingStatus = 'C' THEN 1  \n" +
                "							ELSE 0  \n" +
                "						END) poCompletedLine,  \n" +
                "						refPurchaseOrderID  \n" +
                "				FROM  \n" +
                "					vu_purchaseorder_shipping_release  \n" +
                "				GROUP BY refPurchaseOrderID) vups ON vups.refPurchaseOrderID = pom.id  \n" +
                "					LEFT JOIN  \n" +
                "				(SELECT  \n" +
                "					SUM((p.qty * p.price) + IFNULL(FUN_GETOTHERCHARGESBYPURCHASEORDERDETID(p.id), 0)) totalAmount,  \n" +
                "						COUNT(1) totalPOLines,  \n" +
                "						SUM(CASE  \n" +
                "							WHEN c.partType != 4 AND c.id IS NOT NULL THEN 1  \n" +
                "							ELSE 0  \n" +
                "						END) totalItems,  \n" +
                "						SUM(CASE  \n" +
                "							WHEN c.partType = 4 AND c.id IS NOT NULL THEN 1  \n" +
                "							ELSE 0  \n" +
                "						END) totalOtherItems,  \n" +
                "						p.refPurchaseOrderID  \n" +
                "				FROM  \n" +
                "					purchase_order_det p  \n" +
                "				LEFT JOIN component c ON c.id = p.mfgPartID  \n" +
                "				WHERE  \n" +
                "					p.isdeleted = 0  \n" +
                "				GROUP BY p.refPurchaseOrderID) pod ON pod.refPurchaseOrderID = pom.id  \n" +
                "					LEFT JOIN  \n" +
                "				mfgcodemst pm ON pm.id = pom.customerID  \n" +
                "			WHERE  \n" +
                "				pom.isdeleted = 0\");  \n" +
                "	IF(psupplierID IS NOT NULL)THEN  \n" +
                "		SET @temp_Sproc_RetrievePurchaseOrderSummaryDeatils= CONCAT(@temp_Sproc_RetrievePurchaseOrderSummaryDeatils,' and pom.supplierID in (',psupplierID,')');  \n" +
                "	END IF;  \n" +
                "	IF(pshippingMethodId IS NOT NULL)THEN  \n" +
                "		SET @temp_Sproc_RetrievePurchaseOrderSummaryDeatils= CONCAT(@temp_Sproc_RetrievePurchaseOrderSummaryDeatils,' and pom.shippingMethodID in (',pshippingMethodId,')');  \n" +
                "	END IF;  \n" +
                "	IF(psearchposotext IS NOT NULL)THEN  \n" +
                "		SET @temp_Sproc_RetrievePurchaseOrderSummaryDeatils= CONCAT(@temp_Sproc_RetrievePurchaseOrderSummaryDeatils,' and (pom.soNumber  ', CASE WHEN psearchposotype=\"C\" THEN CONCAT(' like \"%',psearchposotext,'%\" ') ELSE CONCAT(' = \"', psearchposotext ,'\" ') END, ' OR pom.poNumber ', CASE WHEN psearchposotype=\"C\" THEN CONCAT(' like \"%',psearchposotext,'%\" ') ELSE CONCAT(' = \"', psearchposotext ,'\" ') END,')');  \n" +
                "	END IF;  \n" +
                "    IF(pPOComments IS NOT NULL AND pPOComments != '')THEN  \n" +
                "		SET @temp_Sproc_RetrievePurchaseOrderSummaryDeatils = CONCAT(@temp_Sproc_RetrievePurchaseOrderSummaryDeatils, \"  \n" +
                "				AND (pom.shippingComment LIKE '%\",pPOComments,\"%'  \n" +
                "                OR pom.poComment LIKE '%\",pPOComments,\"%')  \n" +
                "                \");  \n" +
                "    END IF;  \n" +
                "	IF(pfromDate IS NOT NULL AND ptoDate IS NOT NULL)THEN  \n" +
                "		SET @temp_Sproc_RetrievePurchaseOrderSummaryDeatils=CONCAT(@temp_Sproc_RetrievePurchaseOrderSummaryDeatils, ' and (pom.poDate  BETWEEN ''',pfromDate,''' AND ''',ptoDate,''')');  \n" +
                "	ELSEIF(pfromDate IS NOT NULL)THEN  \n" +
                "		SET @temp_Sproc_RetrievePurchaseOrderSummaryDeatils=CONCAT(@temp_Sproc_RetrievePurchaseOrderSummaryDeatils, ' and (pom.poDate = ''',pfromDate,''')');  \n" +
                "	END IF;  \n" +
                "    IF(ppostatus IS NOT NULL)THEN  \n" +
                "		SET @temp_Sproc_RetrievePurchaseOrderSummaryDeatils= CONCAT(@temp_Sproc_RetrievePurchaseOrderSummaryDeatils,\" and pom.poWorkingStatus IN (\", ppostatus ,\")\");  \n" +
                "	END IF;  \n" +
                "	IF(ppartIds IS NOT NULL)THEN  \n" +
                "		SET @temp_Sproc_RetrievePurchaseOrderSummaryDeatils= CONCAT(@temp_Sproc_RetrievePurchaseOrderSummaryDeatils,' AND exists (select 1 from purchase_order_det pod where pod.refPurchaseOrderID = pom.id and pod.isDeleted = 0 and (pod.mfgPartID in (',ppartIds,') OR pod.supplierPartID in (',ppartIds,')))');  \n" +
                "	END IF;  \n" +
                "    IF(pLockFilterStatus IS NOT NULL)THEN  \n" +
                "    	SET @temp_Sproc_RetrievePurchaseOrderSummaryDeatils= CONCAT(@temp_Sproc_RetrievePurchaseOrderSummaryDeatils,\" and pom.lockStatus IN (\", pLockFilterStatus ,\")\");  \n" +
                "	END IF;  \n" +
                "    IF(pPoPostingStatusFilter IS NOT NULL)THEN  \n" +
                "    	SET @temp_Sproc_RetrievePurchaseOrderSummaryDeatils= CONCAT(@temp_Sproc_RetrievePurchaseOrderSummaryDeatils,\" and pom.status = '\", pPoPostingStatusFilter ,\"'\");  \n" +
                "	END IF;  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "		SET pOrderBy = \"ORDER BY createdAt DESC\";  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy);  \n" +
                "	END IF;  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = '1=1';  \n" +
                "	END IF;  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset);  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "	/* to get total count of rows */  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_RetrievePurchaseOrderSummaryDeatils,\" ) c where 1=1 and \", pWhereClause);  \n" +
                "	PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "    SET @SQLStatement2 = CONCAT(\"select * from ( \", @temp_Sproc_RetrievePurchaseOrderSummaryDeatils,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "    PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "    DEALLOCATE PREPARE query2;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version ->  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1332,'1.00','V1',' User Story 40988: [Main Branch] Demo Improvement points for Add some filters in Advance Filter given on 01-02-2022 - Jay '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1332:
            allDbChangesArray.push(
                /* **************************** New Script -> 25-02-2022  *********************************** */
                "UPDATE page_detail  \n" +
                "SET  \n" +
                "    isReadOnlyDeveloped = 1  \n" +
                "WHERE  \n" +
                "    pageName IN ('Add Purchase Order' , 'Add Purchase Order Documents','Add Purchase Order MISC')  \n" +
                "        AND isReadOnlyDeveloped = 0  \n" +
                "        AND isdeleted = 0;  \n" +
                /* **************************** Add Script Version ->  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1333,'1.00','V1',' User Story 39185: [Main Branch] Purchase Order Changes December-2021 - Jay '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1333:
            allDbChangesArray.push(
                /* **************************** New Script -> 26-02-2022 ******************************************* */
                "DROP procedure IF EXISTS `Sproc_retrive_UID_to_transfer`;  \n" +
                "CREATE PROCEDURE `Sproc_retrive_UID_to_transfer`(  \n" +
                "	pPageIndex INT,  \n" +
                "	pRecordPerPage INT,  \n" +
                "	pBinID INT,  \n" +
                "	pGlobalSearchUIDString VARCHAR(1000),  \n" +
                "	pSearchUIDString VARCHAR(1000),  \n" +
                "	pSearchString VARCHAR(100),  \n" +
                "	pClusterWHID INT,  \n" +
                "	pKitSalesOrderDetID INT,  \n" +
                "	pKitAssyID INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE v_Where VARCHAR(10000);  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255);  \n" +
                "  \n" +
                "	SET v_Where = \"\";  \n" +
                "  \n" +
                "	IF(pPageIndex <> 0 AND pRecordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (pPageIndex -1) * pRecordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "    IF (pGlobalSearchUIDString IS NOT NULL ) THEN  \n" +
                "		SET v_Where = CONCAT(v_Where, \" AND css.uid LIKE '%\", pGlobalSearchUIDString ,\"%'\");  \n" +
                "	END IF;  \n" +
                "  	IF ( pSearchUIDString IS NOT NULL) THEN  \n" +
                "		SET v_Where = CONCAT(v_Where, \" AND css.uid LIKE '%\", pSearchUIDString ,\"%' \");  \n" +
                "	END IF;  \n" +
                "	/* old Logic  \n" +
                "    IF (pGlobalSearchUIDString IS NOT NULL AND pSearchUIDString IS NOT NULL) THEN  \n" +
                "		SET v_Where = CONCAT(v_Where, \" AND (css.id IN (  \n" +
                "				SELECT 	id  \n" +
                "				FROM 	component_sid_stock  \n" +
                "				WHERE 	isdeleted = 0  \n" +
                "						AND (uid LIKE '%\", pGlobalSearchUIDString ,\"%' AND uid LIKE '%\", pSearchUIDString ,\"%')  \n" +
                "			)  \n" +
                "		)\");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pGlobalSearchUIDString IS NOT NULL AND pSearchUIDString IS NULL) THEN  \n" +
                "		SET v_Where = CONCAT(v_Where, \" AND css.id IN (  \n" +
                "			SELECT 	id  \n" +
                "			FROM 	component_sid_stock  \n" +
                "			WHERE 	deletedAt IS NULL  \n" +
                "					AND uid LIKE '%\", pGlobalSearchUIDString ,\"%'  \n" +
                "		)\");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pGlobalSearchUIDString IS NULL AND pSearchUIDString IS NOT NULL) THEN  \n" +
                "		SET v_Where = CONCAT(v_Where, \" AND css.id IN (  \n" +
                "			SELECT 	id  \n" +
                "			FROM 	component_sid_stock  \n" +
                "			WHERE 	deletedAt IS NULL  \n" +
                "					AND uid LIKE '%\", pSearchUIDString ,\"%'  \n" +
                "		)\");  \n" +
                "	END IF;  \n" +
                "  */  \n" +
                "	IF (pBinID IS NOT NULL) THEN  \n" +
                "		SET v_Where = CONCAT(v_Where, \" AND  css.binID  = \", pBinID);  \n" +
                "	END IF;  \n" +
                "   IF (pBinID IS  NULL and pClusterWHID is null  ) THEN  /*Xfer Screen if bin and warehouse both nulll then dont return any result of UMID*/  \n" +
                "		SET v_Where = CONCAT(v_Where, \" AND  1 = 0\");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pClusterWHID IS NOT NULL and pBinID is null) THEN  \n" +
                "		SET v_Where = CONCAT(v_Where, \" AND  css.binID  in (SELECT id FROM binmst bm WHERE   isdeleted = 0 and  \n" +
                "															 bm.warehouseid in (Select id from warehousemst where id = \", pClusterWHID, \" and warehouseType ='SMC' )	)\");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pSearchString IS NOT NULL) THEN  \n" +
                "		SET v_Where = CONCAT(v_Where, \" AND  css.uid like '%\", pSearchString ,\"%'\");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS Results;  \n" +
                "	SET @SQLStatement1 = CONCAT(\"  \n" +
                "				SELECT 		css.id,  \n" +
                "						css.scanlabel,  \n" +
                "						css.pkgQty,  \n" +
                "						css.uid,  \n" +
                "						c.PIDCode,  \n" +
                "						c.mfgcodeID,  \n" +
                "						c.mfgPN,  \n" +
                "                        c.mfgPNDescription,  \n" +
                "						mfg.mfgCode,  \n" +
                "						mfg.mfgName,  \n" +
                "						ro.rohsIcon,  \n" +
                "						ro.name AS rohsName,  \n" +
                "						css.nickName,  \n" +
                "						css.binID,  \n" +
                "						cast(NULL as char(50)) binName,  \n" +
                "						0 warehouseID,  \n" +
                "						cast(NULL as char(50)) warehouseName,  \n" +
                "						0 parentWHID,  \n" +
                "						cast(NULL as char(50)) deptName,  \n" +
                "						css.uom,  \n" +
                "						cast('' as char(100)) uomName,  \n" +
                "						false isAllocatedToKit,  \n" +
                "						css.receiveMaterialType,  \n" +
                "						css.refcompid,  \n" +
                "						css.pkgUnit,  \n" +
                "						false isBelongsToSameKit,  \n" +
                "						fun_getMountingTypeNameByID(c.mountingTypeID) mountingTypeName,  \n" +
                "						0 refSalesOrderDetID, 	0 assyID,  \n" +
                "						fun_getAllocatedKitsNameByID(css.id, 'A') allocatedToKits,  \n" +
                "						cast(NULL as char(50)) warehouseType,  \n" +
                "						c.isCustom,  \n" +
                "						css.updatedAt,  \n" +
                "                        fun_ConvertInternalDateCodeIntoDateInDefaultFormate(css.dateCode) internalDateCodeInDate  \n" +
                "				FROM 		component_sid_stock css  \n" +
                "				LEFT OUTER JOIN component c ON c.id=css.refcompid AND c.isdeleted=0  \n" +
                "				LEFT OUTER JOIN rfq_rohsmst ro ON ro.id=c.RoHSStatusID AND ro.isdeleted=0  \n" +
                "				LEFT OUTER JOIN mfgcodemst mfg ON mfg.id=c.mfgcodeID AND mfg.isdeleted=0  \n" +
                "				WHERE	css.isdeleted = 0  \n" +
                "							AND css.isinStk = 1  \n" +
                "			\", v_Where , \" ORDER BY css.updatedAt DESC \"  \n" +
                "		);  \n" +
                "	SET @SQLStatementCount = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@SQLStatement1,\" ) c \");  \n" +
                "	PREPARE query1 FROM @SQLStatementCount;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS Results;  \n" +
                "	SET @SQLStatement1 = CONCAT(\"CREATE TEMPORARY TABLE IF NOT EXISTS Results AS \", @SQLStatement1, \" \", rowNumWhere);  \n" +
                "	PREPARE mainQuery FROM @SQLStatement1;  \n" +
                "	EXECUTE mainQuery;  \n" +
                "	DEALLOCATE PREPARE mainQuery;  \n" +
                "  \n" +
                "	-- SET Bin name  \n" +
                "	UPDATE 	Results r, binmst b  \n" +
                "	SET   	r.binName = b.Name, r.warehouseID = b.WarehouseID  \n" +
                "	WHERE	r.binID = b.id;  \n" +
                "  \n" +
                "	-- SET warehouse name  \n" +
                "	UPDATE 	Results r, warehousemst w  \n" +
                "	SET   	r.warehouseName = w.Name, r.parentWHID = w.parentWHID, r.warehouseType = w.warehouseType  \n" +
                "	WHERE	r.warehouseID = w.id;  \n" +
                "  \n" +
                "	-- SET department name  \n" +
                "	UPDATE 	Results r, warehousemst w  \n" +
                "	SET   	r.deptName = w.Name  \n" +
                "	WHERE	r.parentWHID = w.id;  \n" +
                "  \n" +
                "	-- Set UOM  \n" +
                "	UPDATE 	Results r, uoms u  \n" +
                "	SET   	r.uomName = u.unitName  \n" +
                "	WHERE	r.uom = u.id;  \n" +
                "  \n" +
                "	-- Set UMID is allocated to kit  \n" +
                "	IF (pKitSalesOrderDetID IS NOT NULL AND pKitAssyID IS NOT NULL) THEN  \n" +
                "		UPDATE 	Results r, kit_allocation k  \n" +
                "		SET   	r.isAllocatedToKit = TRUE,  \n" +
                "			r.refSalesOrderDetID = k.refSalesOrderDetID,  \n" +
                "			r.assyID = k.assyID,  \n" +
                "			r.isBelongsToSameKit = (CASE WHEN k.refSalesOrderDetID = pKitSalesOrderDetID AND k.assyID = pKitAssyID THEN TRUE ELSE FALSE END)  \n" +
                "		WHERE	r.id = k.refUIDId  \n" +
                "		AND 	k.status = 'A'  \n" +
                "		AND 	k.refSalesOrderDetID = pKitSalesOrderDetID  \n" +
                "		AND 	k.assyID = pKitAssyID;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT * FROM Results  ORDER BY isAllocatedToKit ASC, internalDateCodeInDate ASC  \"); -- order by isBelongsToSameKit desc  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 26-02-2022 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1334,'1.00','V1','User Story 41587: [Main branch]Demo improvement point related to Xfer Bulk Material screen (22-02-2022) - CP'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1334:
            allDbChangesArray.push(
                /* **************************** New Script -> 26-02-2022  *********************************** */
                "DROP procedure IF EXISTS `Sproc_GetFilterComponentlist`;  \n" +
                "CREATE PROCEDURE `Sproc_GetFilterComponentlist`(  \n" +
                "	IN searchString VARCHAR(255),  \n" +
                "	IN pIsSalesOrder TINYINT,  \n" +
                "    IN pID INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE pWhereClause VARCHAR(16383);  \n" +
                "	SET pWhereClause = '1=1' ;  \n" +
                "	SET @Sproc_GetFilterComponentlist = CONCAT(\"  \n" +
                "		SELECT  \n" +
                "			c.mfgCodeID,  \n" +
                "            c.id,  \n" +
                "            c.PIDCode,  \n" +
                "            c.mfgPn,  \n" +
                "			CONCAT('(',mg.mfgcode,')',' ',c.mfgPn,' | ',c.PIDCode, CASE WHEN c.productionPN IS NULL THEN '' ELSE ' | ' END,IFNULL(c.productionPN,'')) componentParts  \n" +
                "		FROM  \n" +
                "			`component` c  \n" +
                "				JOIN  \n" +
                "			mfgcodemst mg ON mg.id=c.mfgCodeID  \n" +
                "		WHERE  \n" +
                "			c.isDeleted=0 AND c.isgoodpart=1  \n" +
                "	\");  \n" +
                "  \n" +
                "	IF(pIsSalesOrder=1)THEN  \n" +
                "		SET @Sproc_GetFilterComponentlist=CONCAT(@Sproc_GetFilterComponentlist,' AND c.refSupplierMfgpnComponentID IS NULL');  \n" +
                "	END IF;  \n" +
                "	IF(pID IS NOT NULL AND pID != '')THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause,' AND c.id = ', pID);  \n" +
                "	END IF;  \n" +
                "    IF(searchString IS NOT NULL AND searchString != '')THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause,' AND ( componentParts LIKE ''%', searchString, '%'')');  \n" +
                "	END IF;  \n" +
                "	SET @SQLStatement1 = CONCAT(\"SELECT * FROM ( \", @Sproc_GetFilterComponentlist,\" ) c  WHERE \", pWhereClause);  \n" +
                "    PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 26-02-2022 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1335,'1.00','V1',' User Story 41340: [Main Branch] Create Directive for Purchase Order List page - Jay '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1335:
            allDbChangesArray.push(
                /* **************************** New Script -> 26-02-2022  *********************************** */
                "INSERT INTO `page_detail`  \n" +
                "     (`pageName`, `RO`, `RW`, `pageRoute`, `pageURL`, `menuName`, `parentPageID`, `hasChild`,  `isActive`,  \n" +
                "              `createdAt`, `updatedAt`, `createdBy`, `updatedBy` ,`isDeleted`, `isDisplay`, `displayMenuName`,`iconClass` ,  \n" +
                "              `createByRoleId`, `updateByRoleId`)  \n" +
                " VALUES ('Manage Customer Addresses', 0, 0, 'app.customer.managecustomer.addresses', '/addresses/:customerType/:cid',  \n" +
                "         'Manage Customer Addresses', (SELECT a.pageID FROM page_detail a WHERE a.pageName='Manage Customer'),  0, 1,  \n" +
                "           fun_DatetimetoUTCDateTime(), fun_DatetimetoUTCDateTime(), '1' , '1' , 0, 1, 'Customer','t-icons-customer add-icon',  \n" +
                "           1, 1) ;  \n" +
                /* **************************** New Script -> 26-02-2022  *********************************** */
                "INSERT INTO `page_detail`  \n" +
                "     (`pageName`, `RO`, `RW`, `pageRoute`, `pageURL`, `menuName`, `parentPageID`, `hasChild`,  `isActive`,  \n" +
                "              `createdAt`, `updatedAt`, `createdBy`, `updatedBy` ,`isDeleted`, `isDisplay`, `displayMenuName`,`iconClass` ,  \n" +
                "              `createByRoleId`, `updateByRoleId`)  \n" +
                " VALUES ('Manage Supplier Addresses', 0, 0, 'app.supplier.managesupplier.addresses', '/addresses/:customerType/:cid',  \n" +
                "         'Manage Supplier Addresses', (SELECT a.pageID FROM page_detail a WHERE a.pageName='Manage Supplier'),  0, 1,  \n" +
                "           fun_DatetimetoUTCDateTime(), fun_DatetimetoUTCDateTime(), '1' , '1' , 0, 1, 'Supplier','t-icons-supplier add-icon',  \n" +
                "           1, 1) ;  \n" +
                /* **************************** New Script -> 26-02-2022  *********************************** */
                "INSERT INTO `page_detail`  \n" +
                "     (`pageName`, `RO`, `RW`, `pageRoute`, `pageURL`, `menuName`, `parentPageID`, `hasChild`,  `isActive`,  \n" +
                "              `createdAt`, `updatedAt`, `createdBy`, `updatedBy` ,`isDeleted`, `isDisplay`, `displayMenuName`,`iconClass` ,  \n" +
                "              `createByRoleId`, `updateByRoleId`)  \n" +
                " VALUES ('Manage Manufacturer Addresses', 0, 0, 'app.manufacturer.managemanufacturer.addresses', '/addresses/:customerType/:cid',  \n" +
                "         'Manage Manufacturer Addresses', (SELECT a.pageID FROM page_detail a WHERE a.pageName='Manage Manufacturer'),  0, 1,  \n" +
                "           fun_DatetimetoUTCDateTime(), fun_DatetimetoUTCDateTime(), '1' , '1' , 0, 1, 'Manufacturer','t-icons-manufacturer add-icon',  \n" +
                "           1, 1) ;  \n" +
                /* **************************** New Script -> 26-02-2022  *********************************** */
                "INSERT INTO `page_detail`  \n" +
                "     (`pageName`, `RO`, `RW`, `pageRoute`, `pageURL`, `menuName`, `parentPageID`, `hasChild`,  `isActive`,  \n" +
                "              `createdAt`, `updatedAt`, `createdBy`, `updatedBy` ,`isDeleted`, `isDisplay`, `displayMenuName`,`iconClass` ,  \n" +
                "              `createByRoleId`, `updateByRoleId`)  \n" +
                " VALUES ('Manage Customer Automation Addresses', 0, 0, 'app.customer.managecustomer.automationaddresses', '/automationaddresses/:customerType/:cid',  \n" +
                "         'Manage Customer Automation Addresses', (SELECT a.pageID FROM page_detail a WHERE a.pageName='Manage Customer'),  0, 1,  \n" +
                "           fun_DatetimetoUTCDateTime(), fun_DatetimetoUTCDateTime(), '1' , '1' , 0, 1, 'Customer','t-icons-customer add-icon',  \n" +
                "           1, 1) ;  \n" +
                /* **************************** New Script -> 26-02-2022  *********************************** */
                "INSERT INTO `page_detail`  \n" +
                "     (`pageName`, `RO`, `RW`, `pageRoute`, `pageURL`, `menuName`, `parentPageID`, `hasChild`,  `isActive`,  \n" +
                "              `createdAt`, `updatedAt`, `createdBy`, `updatedBy` ,`isDeleted`, `isDisplay`, `displayMenuName`,`iconClass` ,  \n" +
                "              `createByRoleId`, `updateByRoleId`)  \n" +
                " VALUES ('Manage Supplier Automation Addresses', 0, 0, 'app.supplier.managesupplier.automationaddresses', '/automationaddresses/:customerType/:cid',  \n" +
                "         'Manage Supplier Automation Addresses', (SELECT a.pageID FROM page_detail a WHERE a.pageName='Manage Supplier'),  0, 1,  \n" +
                "           fun_DatetimetoUTCDateTime(), fun_DatetimetoUTCDateTime(), '1' , '1' , 0, 1, 'Supplier','t-icons-supplier add-icon',  \n" +
                "           1, 1) ;  \n" +
                /* **************************** New Script -> 26-02-2022  *********************************** */
                "INSERT INTO `page_detail`  \n" +
                "     (`pageName`, `RO`, `RW`, `pageRoute`, `pageURL`, `menuName`, `parentPageID`, `hasChild`,  `isActive`,  \n" +
                "              `createdAt`, `updatedAt`, `createdBy`, `updatedBy` ,`isDeleted`, `isDisplay`, `displayMenuName`,`iconClass` ,  \n" +
                "              `createByRoleId`, `updateByRoleId`)  \n" +
                " VALUES ('Manage Manufacturer Automation Addresses', 0, 0, 'app.manufacturer.managemanufacturer.automationaddresses', '/automationaddresses/:customerType/:cid',  \n" +
                "         'Manage Manufacturer Automation Addresses', (SELECT a.pageID FROM page_detail a WHERE a.pageName='Manage Manufacturer'),  0, 1,  \n" +
                "           fun_DatetimetoUTCDateTime(), fun_DatetimetoUTCDateTime(), '1' , '1' , 0, 1, 'Manufacturer','t-icons-manufacturer add-icon',  \n" +
                "           1, 1) ;  \n" +
                /* **************************** Add Script Version -> 26-02-2022 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1336,'1.00','V1',' User Story 39488 - new page detail entry for addresses and automation tab entry - KS '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1336:
            allDbChangesArray.push(
                /* **************************** New Script -> 26-02-2022  *********************************** */
                "CALL Sproc_giveRightToChildPage('Manage Customer Addresses');  \n" +
                "	CALL Sproc_giveRightToChildPage('Manage Supplier Addresses');  \n" +
                "	CALL Sproc_giveRightToChildPage('Manage Manufacturer Addresses');  \n" +
                /* **************************** Add Script Version -> 26-02-2022 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1337,'1.00','V1',' User Story 39488 - default addresses page rights - KS '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1337:
            allDbChangesArray.push(
                /* **************************** New Script -> 26-02-2022  *********************************** */
                "CALL Sproc_giveRightToChildPage('Manage Customer Automation Addresses');  \n" +
                "	CALL Sproc_giveRightToChildPage('Manage Supplier Automation Addresses');  \n" +
                "	CALL Sproc_giveRightToChildPage('Manage Manufacturer Automation Addresses');  \n" +
                /* **************************** Add Script Version -> 26-02-2022 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1338,'1.00','V1',' User Story 39488 - default automation page rights - KS '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1338:
            allDbChangesArray.push(
                /* **************************** New Script -> 26-02-2022  *********************************** */
                "ALTER TABLE customer_addresses  \n" +
                "ADD COLUMN copyFromShipToAddrMstID INT ;  \n" +
                /* **************************** Add Script Version -> 26-02-2022 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1339,'1.00','V1',' User Story 39488 - customer_addresses add new fields - KS '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1339:
            allDbChangesArray.push(
                /* **************************** New Script -> 26-02-2022  *********************************** */
                "INSERT INTO customer_addresses (`customerId`,`street1`,`street2`,`city`,`state`,  \n" +
                "		`countryID`,`postcode`,`addressType`,`isDefault`, `street3`,  \n" +
                "		`companyName`, `systemGenerated`, `bankRemitToName`, `latitude`, `longitude`,  \n" +
                "		`additionalComment`, `defaultContactPersonID`, `isActive`, `copyFromShipToAddrMstID`,  \n" +
                "		`createdBy`,`updatedBy`,`createByRoleId`,`updateByRoleId`,`createdAt`,`updatedAt`)  \n" +
                "SELECT `customerId`,`street1`,`street2`,`city`,`state`,  \n" +
                "		`countryID`,`postcode`,'I',`isDefault`, `street3`,  \n" +
                "		`companyName`, `systemGenerated`, `bankRemitToName`, `latitude`, `longitude`,  \n" +
                "		`additionalComment`, `defaultContactPersonID`, `isActive`, `id` ,  \n" +
                "		1, 1, 1, 1, fun_DatetimetoUTCDateTime(), fun_DatetimetoUTCDateTime()  \n" +
                "FROM customer_addresses  \n" +
                "WHERE id IN (  \n" +
                "		SELECT intermediateShipmentId FROM `customer_packingslip` WHERE intermediateShipmentId IS NOT NULL  \n" +
                "		UNION  \n" +
                "		SELECT intermediateShipmentID FROM `purchase_order_mst` WHERE intermediateShipmentID IS NOT NULL  \n" +
                "		UNION  \n" +
                "		SELECT intermediateShipmentId FROM `salesordermst` WHERE intermediateShipmentId IS NOT NULL  \n" +
                "		/* this not required  \n" +
                "		UNION  \n" +
                "		SELECT rmaMarkForAddressId FROM `packing_slip_material_receive`  WHERE rmaMarkForAddressId IS NOT NULL  \n" +
                "		*/  \n" +
                "	    )  \n" +
                "   ;  \n" +
                /* **************************** Add Script Version -> 26-02-2022 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1340,'1.00','V1',' User Story 39488 - intermediate address entry - KS '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1340:
            allDbChangesArray.push(
                /* **************************** New Script -> 26-02-2022  *********************************** */
                "DROP TRIGGER /*!50032 IF EXISTS */ `Trg_AU_customer_packingslip` ;  \n" +
                "CREATE TRIGGER `Trg_AU_customer_packingslip` AFTER UPDATE ON `customer_packingslip`  \n" +
                "    FOR EACH ROW BEGIN  \n" +
                "	DECLARE vTransTypeText VARCHAR(20);  \n" +
                "	SET vTransTypeText= IF(NEW.transType='I','Invoice','Credit Memo');  \n" +
                "  \n" +
                "    IF IFNULL(OLD.soNumber,0) != IFNULL(NEW.soNumber,0) THEN  \n" +
                "       INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "       VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'SO#',CAST(OLD.soNumber AS CHAR),  \n" +
                "       CAST(NEW.soNumber AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.poNumber,0) != IFNULL(NEW.poNumber,0) THEN  \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "    VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'PO#',CAST(OLD.poNumber AS CHAR),  \n" +
                "       CAST(NEW.poNumber AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.poDate,0) != IFNULL(NEW.poDate,0) THEN  \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "    VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'PO Date',CAST(DATE_FORMAT(OLD.poDate, '%m/%d/%y') AS CHAR),  \n" +
                "       CAST(DATE_FORMAT(NEW.poDate, '%m/%d/%y') AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.soDate,0) != IFNULL(NEW.soDate,0) THEN  \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "    VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'SO Date', CAST(DATE_FORMAT(OLD.soDate, '%m/%d/%y') AS CHAR),  \n" +
                "       CAST(DATE_FORMAT(NEW.soDate, '%m/%d/%y') AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.contactPersonID,0) != IFNULL(NEW.contactPersonID,0) THEN  \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "    VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'Contact Person',(SELECT CONCAT(firstName,' ',lastName) FROM contactperson WHERE personId=OLD.contactPersonId),  \n" +
                "      (SELECT CONCAT(firstName,' ',lastName) FROM contactperson WHERE personId=NEW.contactPersonId), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.packingSlipComment,0) != IFNULL(NEW.packingSlipComment,0) THEN  \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "    VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'Header Shipping Comments', OLD.packingSlipComment,  \n" +
                "       NEW.packingSlipComment, fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.substatus ,0) != IFNULL(NEW.substatus ,0) THEN  \n" +
                "	IF(NEW.transType='P')THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "		VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'Status', (CASE WHEN OLD.substatus=1 THEN 'Draft'WHEN OLD.substatus=2 THEN 'Ready To Ship'WHEN OLD.substatus=3 THEN 'Waiting For Shipping Label'WHEN OLD.substatus=4 THEN 'Waiting For Pickup' WHEN OLD.substatus= 6 THEN 'Published' WHEN OLD.substatus= 5 THEN 'Shipped'  ELSE '' END),  \n" +
                "		(CASE WHEN NEW.substatus=1 THEN 'Draft'WHEN NEW.substatus=2 THEN 'Ready To Ship'WHEN NEW.substatus=3 THEN 'Waiting For Shipping Label'WHEN NEW.substatus=4 THEN 'Waiting For Pickup' WHEN NEW.substatus=6 THEN 'Published'  ELSE 'Shipped' END), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	ELSEIF (NEW.transType='I')THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "		VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'Status', (CASE WHEN OLD.substatus=1 THEN 'Shipped - Not Invoiced' WHEN OLD.substatus=2 THEN 'Invoiced' WHEN Old.subStatus=3 THEN 'Corrected and Invoiced'  WHEN Old.subStatus=4 THEN 'Draft' WHEN Old.subStatus=5 THEN 'Published' END),  \n" +
                "		(CASE WHEN NEW.substatus=1 THEN 'Shipped - Not Invoiced' WHEN NEW.substatus=2 THEN 'Invoiced' WHEN NEW.subStatus=3 THEN 'Corrected and Invoiced'  WHEN NEW.subStatus=4 THEN 'Draft' WHEN NEW.subStatus=5 THEN 'Published' END), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	ELSEIF (NEW.transType='C')THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "		VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'Status', (CASE WHEN OLD.substatus=1 THEN 'Draft' WHEN OLD.substatus=2 THEN 'Published' ELSE '' END),  \n" +
                "		(CASE WHEN NEW.substatus=1 THEN 'Draft' WHEN NEW.substatus=2 THEN 'Published' ELSE '' END), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.shippingMethodId ,0) != IFNULL(NEW.shippingMethodId ,0) THEN  \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "    VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'Shipping Method', fun_getGenericCategoryNameByID(OLD.shippingMethodId),  \n" +
                "       fun_getGenericCategoryNameByID(NEW.shippingMethodId), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.sorevision ,0) != IFNULL(NEW.sorevision ,0) THEN  \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "    VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'SO Version', CAST(OLD.sorevision AS CHAR),  \n" +
                "       CAST(NEW.sorevision AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.freeOnBoardId ,0) != IFNULL(NEW.freeOnBoardId ,0) THEN  \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "    VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'FOB',(SELECT `name` FROM freeonboardmst WHERE id=OLD.freeOnBoardId) ,  \n" +
                "     (SELECT `name` FROM freeonboardmst WHERE id=NEW.freeOnBoardId), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.invoiceNumber ,0) != IFNULL(NEW.invoiceNumber ,0) THEN  \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "    VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'Invoice#',CAST(OLD.invoiceNumber AS CHAR) ,  \n" +
                "     CAST(NEW.invoiceNumber AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.invoiceDate ,0) != IFNULL(NEW.invoiceDate,0) THEN  \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "    VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'Invoice Date',CAST(DATE_FORMAT(OLD.invoiceDate, '%m/%d/%y') AS CHAR) ,  \n" +
                "     CAST(DATE_FORMAT(NEW.invoiceDate, '%m/%d/%y') AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.headerComment ,0) != IFNULL(NEW.headerComment,0) THEN  \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "    VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'Header Internal Notes',CAST(OLD.headerComment AS CHAR),  \n" +
                "     CAST(NEW.headerComment AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.packingSlipDate,0) != IFNULL(NEW.packingSlipDate,0) THEN  \n" +
                "	INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "	VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'Packing Slip Date',CAST(DATE_FORMAT(OLD.packingSlipDate, '%m/%d/%y') AS CHAR),  \n" +
                "		CAST(DATE_FORMAT(NEW.packingSlipDate, '%m/%d/%y') AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.packingSlipNumber,0) != IFNULL(NEW.packingSlipNumber,0) THEN  \n" +
                "       INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "       VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'Packing Slip#',CAST(OLD.packingSlipNumber AS CHAR),  \n" +
                "		CAST(NEW.packingSlipNumber AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.termsID,0) != IFNULL(NEW.termsID,0) THEN  \n" +
                "	INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "	VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'Terms',  \n" +
                "		(SELECT (CASE WHEN gencCategoryCode IS NOT NULL THEN CONCAT('(', gencCategoryCode, ') ', gencCategoryName) ELSE gencCategoryName    END)  \n" +
                "			FROM genericcategory  WHERE gencCategoryID = OLD.termsID) ,  \n" +
                "		(SELECT (CASE WHEN gencCategoryCode IS NOT NULL THEN CONCAT('(', gencCategoryCode, ') ', gencCategoryName) ELSE gencCategoryName    END)  \n" +
                "			FROM genericcategory  WHERE gencCategoryID = NEW.termsID) ,  \n" +
                "	fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.salesCommissionTo,0) != IFNULL(NEW.salesCommissionTo,0) THEN  \n" +
                "	INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "	VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'Sales Commission To',  \n" +
                "		(SELECT CONCAT('(',initialName,')',' ',IFNULL(firstName,''),' ',IFNULL(lastName,'')) FROM employees WHERE id = OLD.salesCommissionTo),  \n" +
                "		(SELECT CONCAT('(',initialName,')',' ',IFNULL(firstName,''),' ',IFNULL(lastName,'')) FROM employees WHERE id = NEW.salesCommissionTo),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.totalAmount ,0) != IFNULL(NEW.totalAmount ,0) THEN  \n" +
                "	INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "	VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'Total Amount ($)',  \n" +
                "		CASE WHEN NEW.transType='C' THEN CONCAT('(',CAST(FORMAT(REPLACE(OLD.totalAmount,'-',''),2) AS CHAR),')') ELSE CAST(FORMAT(OLD.totalAmount,2) AS CHAR) END,  \n" +
                "		CASE WHEN NEW.transType='C' THEN CONCAT('(',CAST(FORMAT(REPLACE(NEW.totalAmount,'-',''),2) AS CHAR),')') ELSE CAST(FORMAT(NEW.totalAmount,2) AS CHAR) END,  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.isLocked,0) != IFNULL(NEW.isLocked,0) THEN  \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "    VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'Locked',(CASE WHEN OLD.isLocked=0 THEN 'No' WHEN OLD.isLocked=1 THEN 'Yes' ELSE '' END),  \n" +
                "      (CASE WHEN NEW.isLocked=0 THEN 'No' WHEN NEW.isLocked=1 THEN 'Yes' ELSE '' END), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.lockedAt ,0) != IFNULL(NEW.lockedAt ,0) THEN  \n" +
                "	INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType)  \n" +
                "	VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),(CASE WHEN OLD.isLocked = 1 THEN 'Unlocked Date' ELSE 'Locked Date' END),'',  \n" +
                "		(CASE WHEN OLD.isLocked = 1 THEN fun_DatetimetoUTCDateTime() ELSE NEW.lockedAt END),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,  \n" +
                "		fun_getDataTypeBasedOnTableAndColumnName(\"CUSTOMER_PACKINGSLIP\",'lockedAt'));  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.lockedBy ,0) != IFNULL(NEW.lockedBy ,0) THEN  \n" +
                "	INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "	VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),(CASE WHEN OLD.isLocked = 1 THEN 'Unlocked By' ELSE 'Locked By' END),'',  \n" +
                "		(CASE WHEN OLD.isLocked = 1 THEN fun_getUserNameByID(NEW.updatedBy) ELSE fun_getUserNameByID(NEW.lockedBy) END) ,  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "  \n" +
                "   IF IFNULL(OLD.billingAddress ,0) != IFNULL(NEW.billingAddress ,0) THEN  \n" +
                "	INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "	VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'Billing Address',CAST(OLD.billingAddress AS CHAR),  \n" +
                "		CAST(NEW.billingAddress AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.shippingAddress ,0) != IFNULL(NEW.shippingAddress ,0) THEN  \n" +
                "	INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "	VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'Shipping Address',CAST(OLD.shippingAddress AS CHAR),  \n" +
                "		CAST(NEW.shippingAddress AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.intermediateAddress ,0) != IFNULL(NEW.intermediateAddress ,0) THEN  \n" +
                "	INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "	VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'Mark For (Intermediate Ship To) Address',CAST(OLD.intermediateAddress AS CHAR) ,  \n" +
                "		CAST(NEW.intermediateAddress AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.creditMemoNumber ,0) != IFNULL(NEW.creditMemoNumber ,0) THEN  \n" +
                "	INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "	VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'Credit Memo Number',CAST(OLD.creditMemoNumber AS CHAR),  \n" +
                "		CAST(NEW.creditMemoNumber AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.creditMemoDate,0) != IFNULL(NEW.creditMemoDate,0) THEN  \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "    VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'Credit Memo Date',CAST(DATE_FORMAT(OLD.creditMemoDate, '%m/%d/%y') AS CHAR),  \n" +
                "       CAST(DATE_FORMAT(NEW.creditMemoDate, '%m/%d/%y') AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.refDebitMemoNumber ,0) != IFNULL(NEW.refDebitMemoNumber ,0) THEN  \n" +
                "	INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "	VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'Ref. Debit Memo#',CAST(OLD.refDebitMemoNumber AS CHAR) ,  \n" +
                "		CAST(NEW.refDebitMemoNumber AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.refDebitMemoDate,0) != IFNULL(NEW.refDebitMemoDate,0) THEN  \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "    VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'Ref. Debit Memo Date',CAST(DATE_FORMAT(OLD.refDebitMemoDate, '%m/%d/%y') AS CHAR),  \n" +
                "       CAST(DATE_FORMAT(NEW.refDebitMemoDate, '%m/%d/%y') AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "  \n" +
                "  \n" +
                "    IF IFNULL(OLD.rmaNumber ,0) != IFNULL(NEW.rmaNumber ,0) THEN  \n" +
                "	INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "	VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'RMA#',CAST(OLD.rmaNumber AS CHAR) ,  \n" +
                "		CAST(NEW.rmaNumber AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "  \n" +
                "   IF IFNULL(OLD.revision ,0) != IFNULL(NEW.revision,0) THEN  \n" +
                "	INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "	VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'Revision',OLD.revision  ,  \n" +
                "		NEW.revision , fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "  \n" +
                "     IF IFNULL(OLD.isZeroValue,0) != IFNULL(NEW.isZeroValue,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "	   VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(new.id AS CHAR),CONCAT('Confirming Zero Value',vTransTypeText),(CASE WHEN OLD.isZeroValue =0 THEN 'False' ELSE 'True' END),  \n" +
                "	   (CASE WHEN NEW.isZeroValue =0 THEN 'False' ELSE 'True' END),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "     IF IFNULL(OLD.poRevision,0) != IFNULL(NEW.poRevision,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "	   VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(new.id AS CHAR),'PO Revision',OLD.poRevision,NEW.poRevision,  \n" +
                "       fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "     IF IFNULL(OLD.isMarkForRefund,0) != IFNULL(NEW.isMarkForRefund,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "	   VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(new.id AS CHAR),'Mark For Refund',OLD.isMarkForRefund,NEW.isMarkForRefund,  \n" +
                "       fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.agreedRefundAmt,0) != IFNULL(NEW.agreedRefundAmt,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "	   VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(new.id AS CHAR),'Agreed Refund Amt',OLD.agreedRefundAmt,NEW.agreedRefundAmt,  \n" +
                "       fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "      IF IFNULL(OLD.carrierID ,0) != IFNULL(NEW.carrierID ,0) THEN  \n" +
                "     INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "    VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'Carrier', fun_getGenericCategoryNameByID(OLD.carrierID),  \n" +
                "       fun_getGenericCategoryNameByID(NEW.carrierID), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "    IF IFNULL(OLD.carrierAccountNumber ,0) != IFNULL(NEW.carrierAccountNumber ,0) THEN  \n" +
                "		 INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "		VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(NEW.id AS CHAR),'Carrier Account# ', CAST(OLD.carrierAccountNumber AS CHAR),  \n" +
                "		   CAST(NEW.carrierAccountNumber AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "    END IF;  \n" +
                "    IF IFNULL(OLD.billingContactPersonID,0) != IFNULL(NEW.billingContactPersonID,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "		VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(new.id AS CHAR),'BillTo Contact Person',  \n" +
                "        fun_contactPersonDetailByID(OLD.billingContactPersonID),fun_contactPersonDetailByID(NEW.billingContactPersonID),  \n" +
                "		fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.shippingContactPersonID,0) != IFNULL(NEW.shippingContactPersonID,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "		VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(new.id AS CHAR),'ShipTo Contact Person',  \n" +
                "        fun_contactPersonDetailByID(OLD.shippingContactPersonID),fun_contactPersonDetailByID(NEW.shippingContactPersonID),  \n" +
                "		fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.intermediateContactPersonID,0) != IFNULL(NEW.intermediateContactPersonID,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "		VALUES(\"CUSTOMER_PACKINGSLIP\",CAST(new.id AS CHAR),'Mark For Contact Person',  \n" +
                "        fun_contactPersonDetailByID(OLD.intermediateContactPersonID),fun_contactPersonDetailByID(NEW.intermediateContactPersonID),  \n" +
                "		fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "   END;  \n" +
                /* **************************** New Script -> 26-02-2022  *********************************** */
                "DROP TRIGGER /*!50032 IF EXISTS */ `Trg_AU_Packingslip_Invoice_Payment_History` ;  \n" +
                "CREATE TRIGGER `Trg_AU_Packingslip_Invoice_Payment_History` AFTER UPDATE ON `packingslip_invoice_payment`  \n" +
                "    FOR EACH ROW BEGIN  \n" +
                "	DECLARE vTableName VARCHAR(50) DEFAULT \"packingslip_invoice_payment\";  \n" +
                "	DECLARE vOldval LONGTEXT DEFAULT '';  \n" +
                "	DECLARE vNewval LONGTEXT DEFAULT '';  \n" +
                "	DECLARE vLockUnlockFieldPTText VARCHAR(50) DEFAULT 'Locked' ;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.paymentNumber, \"\") != IFNULL(NEW.paymentNumber, \"\") THEN  \n" +
                "        INSERT INTO supplier_invoice_payment_history  \n" +
                "					(tableName,									refPaymentID,  \n" +
                "					Colname,									Oldval,  \n" +
                "					Newval,										createdAt,  \n" +
                "					createdBy,									createByRoleId,  \n" +
                "					updatedAt,									updatedBy,  \n" +
                "					updateByRoleId,								valueDataType)  \n" +
                "		  VALUES 	(vTableName,										NEW.id,  \n" +
                "					(CASE WHEN old.refPaymentMode = \"CA\" THEN \"Transaction#\"  \n" +
                "						WHEN old.refPaymentMode = \"WOFF\" THEN \"Write Off#\"  \n" +
                "						ELSE \"Payment# or Check#\" END),			OLD.paymentNumber,  \n" +
                "					NEW.paymentNumber,							OLD.updatedAt,  \n" +
                "					OLD.updatedBy,								OLD.updateByRoleId,  \n" +
                "					fun_DatetimetoUTCDateTime(), /*updatedAt*/	NEW.updatedBy, /*updatedBy*/  \n" +
                "					NEW.updateByRoleId /*updateByRoleId*/,  \n" +
                "                    fun_getDataTypeBasedOnTableAndColumnName(vTableName,'paymentNumber'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.paymentDate, \"\") != IFNULL(NEW.paymentDate, \"\") THEN  \n" +
                "		INSERT INTO supplier_invoice_payment_history  \n" +
                "					(tableName,									refPaymentID,  \n" +
                "					Colname,									Oldval,  \n" +
                "					Newval,										createdAt,  \n" +
                "					createdBy,									createByRoleId,  \n" +
                "					updatedAt,									updatedBy,  \n" +
                "					updateByRoleId,								valueDataType)  \n" +
                "		  VALUES 	(vTableName,										NEW.id,  \n" +
                "				(CASE WHEN old.refPaymentMode = \"CA\" THEN \"Applied Credit Memo Date\"  \n" +
                "						WHEN old.refPaymentMode = \"WOFF\" THEN \"Write Off Date\"  \n" +
                "						WHEN old.refPaymentMode = \"RR\" OR old.refPaymentMode = \"CR\" THEN \"Refund Date\"  \n" +
                "						ELSE \"Payment Date\" END), 					OLD.paymentDate,  \n" +
                "					NEW.paymentDate,				OLD.updatedAt,  \n" +
                "					OLD.updatedBy,									OLD.updateByRoleId,  \n" +
                "					fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/  \n" +
                "					NEW.updateByRoleId/*updateByRoleId*/,  \n" +
                "                    fun_getDataTypeBasedOnTableAndColumnName(vTableName,'paymentDate'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.paymentAmount, \"\") != IFNULL(NEW.paymentAmount, \"\")  THEN  \n" +
                "		INSERT INTO supplier_invoice_payment_history  \n" +
                "					(tableName,									refPaymentID,  \n" +
                "					Colname,									Oldval,  \n" +
                "					Newval,										createdAt,  \n" +
                "					createdBy,									createByRoleId,  \n" +
                "					updatedAt,									updatedBy,  \n" +
                "					updateByRoleId,								valueDataType)  \n" +
                "		  VALUES 	(vTableName,										NEW.id,  \n" +
                "				(CASE WHEN old.refPaymentMode = \"CA\" THEN \"Applied Credit Memo Amount ($)\"  \n" +
                "						WHEN old.refPaymentMode = \"WOFF\" THEN \"Write Off Amount ($)\"  \n" +
                "						WHEN old.refPaymentMode = \"RR\" OR old.refPaymentMode = \"CR\" THEN \"Refund Amount ($)\"  \n" +
                "					   ELSE \"Payment Amount ($)\" END),  						OLD.paymentAmount,  \n" +
                "					NEW.paymentAmount,								OLD.updatedAt,  \n" +
                "					OLD.updatedBy,									OLD.updateByRoleId,  \n" +
                "					fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/  \n" +
                "					NEW.updateByRoleId/*updateByRoleId*/,		'amount');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.paymentType, \"\") != IFNULL(NEW.paymentType, \"\") THEN  \n" +
                "		SELECT IFNULL(gencCategoryName, '') INTO vOldval  \n" +
                "		  FROM genericcategory  \n" +
                "		 WHERE gencCategoryID = OLD.paymentType  \n" +
                "		 LIMIT 1;  \n" +
                "  \n" +
                "		SELECT IFNULL(gencCategoryName, '') INTO vNewval  \n" +
                "		  FROM genericcategory  \n" +
                "		 WHERE gencCategoryID = NEW.paymentType  \n" +
                "		 LIMIT 1;  \n" +
                "  \n" +
                "         INSERT INTO supplier_invoice_payment_history  \n" +
                "					(tableName,									refPaymentID,  \n" +
                "					Colname,									Oldval,  \n" +
                "					Newval,										createdAt,  \n" +
                "					createdBy,									createByRoleId,  \n" +
                "					updatedAt,									updatedBy,  \n" +
                "					updateByRoleId,								valueDataType)  \n" +
                "		  VALUES 	(vTableName,										NEW.id,  \n" +
                "					\"Payment Method\",								vOldval,  \n" +
                "					vNewval,									OLD.updatedAt,  \n" +
                "					OLD.updatedBy,									OLD.updateByRoleId,  \n" +
                "					fun_DatetimetoUTCDateTime(), /*updatedAt*/		NEW.updatedBy, /*updatedBy*/  \n" +
                "					NEW.updateByRoleId/*updateByRoleId*/,			'varchar');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.accountReference, \"\") != IFNULL(NEW.accountReference, \"\") THEN  \n" +
                "		INSERT INTO supplier_invoice_payment_history  \n" +
                "					(tableName,									refPaymentID,  \n" +
                "					Colname,									Oldval,  \n" +
                "					Newval,										createdAt,  \n" +
                "					createdBy,									createByRoleId,  \n" +
                "					updatedAt,									updatedBy,  \n" +
                "					updateByRoleId,								valueDataType)  \n" +
                "		  VALUES 		(vTableName,								NEW.id,  \n" +
                "					\"Account Reference\",							OLD.accountReference,  \n" +
                "					NEW.accountReference,							OLD.updatedAt,  \n" +
                "					OLD.updatedBy,									OLD.updateByRoleId,  \n" +
                "					fun_DatetimetoUTCDateTime(), /*updatedAt*/		NEW.updatedBy, /*updatedBy*/  \n" +
                "					NEW.updateByRoleId/*updateByRoleId*/,  \n" +
                "                    fun_getDataTypeBasedOnTableAndColumnName(vTableName,'accountReference'));  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.bankAccountNo, \"\") != IFNULL(NEW.bankAccountNo, \"\") THEN  \n" +
                "		INSERT INTO supplier_invoice_payment_history  \n" +
                "					(tableName,									refPaymentID,  \n" +
                "					Colname,									Oldval,  \n" +
                "					Newval,										createdAt,  \n" +
                "					createdBy,									createByRoleId,  \n" +
                "					updatedAt,									updatedBy,  \n" +
                "					updateByRoleId,								valueDataType)  \n" +
                "		  VALUES 	(vTableName,										NEW.id,  \n" +
                "					(CASE WHEN old.refPaymentMode = \"CR\" THEN \"Refund To (Bank Account Code)\"  \n" +
                "						ELSE \"Bank Account Code\" END),						OLD.bankAccountNo,  \n" +
                "					NEW.bankAccountNo,								OLD.updatedAt,  \n" +
                "					OLD.updatedBy,									OLD.updateByRoleId,  \n" +
                "					fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/  \n" +
                "					NEW.updateByRoleId/*updateByRoleId*/,  \n" +
                "                    fun_getDataTypeBasedOnTableAndColumnName(vTableName,'bankAccountNo'));  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.bankName, \"\") != IFNULL(NEW.bankName, \"\") THEN  \n" +
                "		INSERT INTO supplier_invoice_payment_history  \n" +
                "					(tableName,									refPaymentID,  \n" +
                "					Colname,									Oldval,  \n" +
                "					Newval,										createdAt,  \n" +
                "					createdBy,									createByRoleId,  \n" +
                "					updatedAt,									updatedBy,  \n" +
                "					updateByRoleId,								valueDataType)  \n" +
                "		  VALUES 	(vTableName,									NEW.id,  \n" +
                "					\"Bank Name\",								OLD.bankName,  \n" +
                "					NEW.bankName,								OLD.updatedAt,  \n" +
                "					OLD.updatedBy,								OLD.updateByRoleId,  \n" +
                "					fun_DatetimetoUTCDateTime(), /*updatedAt*/				NEW.updatedBy, /*updatedBy*/  \n" +
                "					NEW.updateByRoleId/*updateByRoleId*/,  \n" +
                "                    fun_getDataTypeBasedOnTableAndColumnName(vTableName,'bankName'));  \n" +
                "    END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.remark, \"\") != IFNULL(NEW.remark, \"\") THEN  \n" +
                "		INSERT INTO supplier_invoice_payment_history  \n" +
                "					(tableName,									refPaymentID,  \n" +
                "					Colname,									Oldval,  \n" +
                "					Newval,										createdAt,  \n" +
                "					createdBy,									createByRoleId,  \n" +
                "					updatedAt,									updatedBy,  \n" +
                "					updateByRoleId,								valueDataType)  \n" +
                "		  VALUES 	(vTableName,										NEW.id,  \n" +
                "					\"Comments\",									OLD.remark,  \n" +
                "					NEW.remark,									OLD.updatedAt,  \n" +
                "					OLD.updatedBy,									OLD.updateByRoleId,  \n" +
                "					fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/  \n" +
                "					NEW.updateByRoleId/*updateByRoleId*/,  \n" +
                "                    fun_getDataTypeBasedOnTableAndColumnName(vTableName,'remark'));  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.agreedRefundAmt, \"\") != IFNULL(NEW.agreedRefundAmt, \"\") THEN  \n" +
                "		INSERT INTO supplier_invoice_payment_history  \n" +
                "					(tableName,									refPaymentID,  \n" +
                "					Colname,									Oldval,  \n" +
                "					Newval,										createdAt,  \n" +
                "					createdBy,									createByRoleId,  \n" +
                "					updatedAt,									updatedBy,  \n" +
                "					updateByRoleId,								valueDataType)  \n" +
                "		  VALUES 	(vTableName,									NEW.id,  \n" +
                "					\"Agreed Refund Amount ($)\",						OLD.agreedRefundAmt,  \n" +
                "					NEW.agreedRefundAmt,							OLD.updatedAt,  \n" +
                "					OLD.updatedBy,									OLD.updateByRoleId,  \n" +
                "					fun_DatetimetoUTCDateTime(), /*updatedAt*/		NEW.updatedBy, /*updatedBy*/  \n" +
                "					NEW.updateByRoleId/*updateByRoleId*/,			'amount');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.isMarkForRefund, \"\") != IFNULL(NEW.isMarkForRefund, \"\") THEN  \n" +
                "		INSERT INTO supplier_invoice_payment_history  \n" +
                "					(tableName,									refPaymentID,  \n" +
                "					Colname,									Oldval,  \n" +
                "					Newval,										createdAt,  \n" +
                "					createdBy,									createByRoleId,  \n" +
                "					updatedAt,									updatedBy,  \n" +
                "					updateByRoleId,								valueDataType)  \n" +
                "			 VALUES 	(vTableName,								NEW.id,  \n" +
                "					\"Mark for Refund\",								(CASE WHEN OLD.isMarkForRefund =0 THEN 'False' ELSE 'True' END),  \n" +
                "					(CASE WHEN NEW.isMarkForRefund =0 THEN 'False' ELSE 'True' END),		OLD.updatedAt,  \n" +
                "					OLD.updatedBy,									OLD.updateByRoleId,  \n" +
                "					fun_DatetimetoUTCDateTime(), /*updatedAt*/		NEW.updatedBy, /*updatedBy*/  \n" +
                "					NEW.updateByRoleId/*updateByRoleId*/,			'varchar');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.isDeleted, \"\") != IFNULL(NEW.isDeleted, \"\") THEN  \n" +
                "		IF NEW.isDeleted = TRUE THEN  \n" +
                "			SET vNewval = 'Deleted';  \n" +
                "		ELSEIF NEW.isDeleted = FALSE THEN  \n" +
                "			SET vNewval = 'Restored';  \n" +
                "		ELSE  \n" +
                "			SET vNewval = 'Unknown action on delete';  \n" +
                "        END IF;  \n" +
                "		INSERT INTO supplier_invoice_payment_history  \n" +
                "					(tableName,									refPaymentID,  \n" +
                "                    Colname,									Oldval,  \n" +
                "                    Newval,										createdAt,  \n" +
                "					createdBy,									createByRoleId,  \n" +
                "					updatedAt,									updatedBy,  \n" +
                "					updateByRoleId,								valueDataType)  \n" +
                "		  VALUES 	(vTableName,								NEW.id,  \n" +
                "                    vNewval,									NULL,  \n" +
                "                    OLD.paymentNumber,							OLD.updatedAt,  \n" +
                "					OLD.updatedBy,								OLD.updateByRoleId,  \n" +
                "					fun_DatetimetoUTCDateTime(), /*updatedAt*/	NEW.updatedBy, /*updatedBy*/  \n" +
                "					NEW.updateByRoleId/*updateByRoleId*/,		'varchar');  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.isPaymentVoided, \"\") != IFNULL(NEW.isPaymentVoided, \"\") THEN  \n" +
                "		SET vOldval = CASE WHEN OLD.isPaymentVoided = TRUE THEN 'Voided' ELSE  \n" +
                "					(CASE WHEN NEW.refPaymentMode = 'P' THEN 'Paid' WHEN NEW.refPaymentMode = 'R' THEN 'Received' ELSE '' END)  \n" +
                "				END;  \n" +
                "		SET vNewval = CASE WHEN NEW.isPaymentVoided = TRUE THEN 'Voided' ELSE  \n" +
                "					(CASE WHEN NEW.refPaymentMode = 'P' THEN 'Paid' WHEN NEW.refPaymentMode = 'R' THEN 'Received' ELSE '' END)  \n" +
                "				END;  \n" +
                "        INSERT INTO supplier_invoice_payment_history  \n" +
                "					(tableName,									refPaymentID,  \n" +
                "					Colname,									Oldval,  \n" +
                "					Newval,										createdAt,  \n" +
                "					createdBy,									createByRoleId,  \n" +
                "					updatedAt,									updatedBy,  \n" +
                "					updateByRoleId,								valueDataType)  \n" +
                "		  VALUES 	(vTableName,								NEW.id,  \n" +
                "					(CASE WHEN old.refPaymentMode = \"CA\" OR old.refPaymentMode = \"WOFF\"  \n" +
                "						OR old.refPaymentMode = \"CR\" THEN \"Voided Status\"  \n" +
                "						ELSE \"Payment Status\" END), 			vOldval,  \n" +
                "					vNewval,									OLD.updatedAt,  \n" +
                "					OLD.updatedBy,								OLD.updateByRoleId,  \n" +
                "					fun_DatetimetoUTCDateTime(), /*updatedAt*/	NEW.updatedBy, /*updatedBy*/  \n" +
                "					NEW.updateByRoleId/*updateByRoleId*/,		'varchar');  \n" +
                "  \n" +
                "  \n" +
                "		IF (IFNULL(OLD.isPaymentVoided, \"\") != IFNULL(NEW.isPaymentVoided, \"\") AND NEW.isPaymentVoided = TRUE) THEN  \n" +
                "			INSERT INTO supplier_invoice_payment_history  \n" +
                "							(tableName,									refPaymentID,  \n" +
                "							Colname,									Oldval,  \n" +
                "							Newval,										createdAt,  \n" +
                "							createdBy,									createByRoleId,  \n" +
                "							updatedAt,									updatedBy,  \n" +
                "							updateByRoleId,								valueDataType)  \n" +
                "				  VALUES 	(vTableName,									NEW.id,  \n" +
                "							\"Voided Date\",									'',  \n" +
                "							NEW.UpdatedAt,  								OLD.updatedAt,  \n" +
                "							OLD.updatedBy,									OLD.updateByRoleId,  \n" +
                "							fun_DatetimetoUTCDateTime(), /*updatedAt*/		NEW.updatedBy, /*updatedBy*/  \n" +
                "							NEW.updateByRoleId/*updateByRoleId*/,  \n" +
                "                            fun_getDataTypeBasedOnTableAndColumnName(vTableName,'UpdatedAt'));  \n" +
                "  \n" +
                "  \n" +
                "			  INSERT INTO supplier_invoice_payment_history  \n" +
                "							(tableName,									refPaymentID,  \n" +
                "							Colname,									Oldval,  \n" +
                "							Newval,										createdAt,  \n" +
                "							createdBy,									createByRoleId,  \n" +
                "							updatedAt,									updatedBy,  \n" +
                "							updateByRoleId,								valueDataType)  \n" +
                "				  VALUES 	(vTableName,									NEW.id,  \n" +
                "							\"Voided By\",									'',  \n" +
                "							fun_getUserNameByID(NEW.updatedBy),				OLD.updatedAt,  \n" +
                "							OLD.updatedBy,									OLD.updateByRoleId,  \n" +
                "							fun_DatetimetoUTCDateTime(), /*updatedAt*/		NEW.updatedBy, /*updatedBy*/  \n" +
                "							NEW.updateByRoleId/*updateByRoleId*/,			'varchar');  \n" +
                "		  END IF;  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.voidPaymentReason, \"\") != IFNULL(NEW.voidPaymentReason, \"\") THEN  \n" +
                "		INSERT INTO supplier_invoice_payment_history  \n" +
                "					(tableName,									refPaymentID,  \n" +
                "					Colname,									Oldval,  \n" +
                "					Newval,										createdAt,  \n" +
                "					createdBy,									createByRoleId,  \n" +
                "					updatedAt,									updatedBy,  \n" +
                "					updateByRoleId,								valueDataType)  \n" +
                "		  VALUES 	(vTableName,										NEW.id,  \n" +
                "				(CASE WHEN old.refPaymentMode = \"CA\" THEN \"Applied Credit Memo Void Reason\"  \n" +
                "						WHEN old.refPaymentMode = \"WOFF\" THEN \"Write Off Void Reason\"  \n" +
                "						WHEN old.refPaymentMode = \"RR\" OR old.refPaymentMode = \"CR\" THEN \"Void Refund Reason\"  \n" +
                "						ELSE \"Void Payment Reason\" END),					OLD.voidPaymentReason,  \n" +
                "					NEW.voidPaymentReason,								OLD.updatedAt,  \n" +
                "					OLD.updatedBy,									OLD.updateByRoleId,  \n" +
                "					fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/  \n" +
                "					NEW.updateByRoleId /*updateByRoleId*/,  \n" +
                "                    fun_getDataTypeBasedOnTableAndColumnName(vTableName,'voidPaymentReason'));  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.refVoidedPaymentNumber, \"\") != IFNULL(NEW.refVoidedPaymentNumber, \"\") THEN  \n" +
                "		INSERT INTO supplier_invoice_payment_history  \n" +
                "					(tableName,									refPaymentID,  \n" +
                "					Colname,									Oldval,  \n" +
                "					Newval,										createdAt,  \n" +
                "					createdBy,									createByRoleId,  \n" +
                "					updatedAt,									updatedBy,  \n" +
                "					updateByRoleId,								valueDataType)  \n" +
                "		  VALUES 	(vTableName,										NEW.id,  \n" +
                "					\"Ref Voided Payment# Or Check#\",						OLD.refVoidedPaymentNumber,  \n" +
                "					NEW.refVoidedPaymentNumber,							OLD.updatedAt,  \n" +
                "					OLD.updatedBy,									OLD.updateByRoleId,  \n" +
                "					fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/  \n" +
                "					NEW.updateByRoleId/*updateByRoleId*/,  \n" +
                "                    fun_getDataTypeBasedOnTableAndColumnName(vTableName,'refVoidedPaymentNumber'));  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.lockStatus, \"\") != IFNULL(NEW.lockStatus, \"\") THEN  \n" +
                "  \n" +
                "	IF (OLD.lockStatus = 'LC') THEN  \n" +
                "		SET vLockUnlockFieldPTText = \"Unlocked\";  \n" +
                "	END IF;  \n" +
                "  \n" +
                "        INSERT INTO supplier_invoice_payment_history  \n" +
                "					(tableName,									refPaymentID,  \n" +
                "					Colname,									Oldval,  \n" +
                "					Newval,										createdAt,  \n" +
                "					createdBy,									createByRoleId,  \n" +
                "					updatedAt,									updatedBy,  \n" +
                "					updateByRoleId,									valueDataType)  \n" +
                "		  VALUES 	(vTableName,										NEW.id,  \n" +
                "				 \"Lock Status\",									(CASE WHEN OLD.lockStatus = 'NA' THEN 'Not Applicable'   WHEN OLD.lockStatus = 'RL' THEN 'Ready To Lock'  \n" +
                "																WHEN OLD.lockStatus = 'LC' THEN 'Locked' ELSE '' END),  \n" +
                "				(CASE WHEN NEW.lockStatus = 'NA' THEN 'Not Applicable'  \n" +
                "						WHEN NEW.lockStatus = 'RL' THEN 'Ready To Lock'  \n" +
                "						WHEN NEW.lockStatus = 'LC' THEN 'Locked' ELSE '' END),			OLD.updatedAt,  \n" +
                "					OLD.updatedBy,									OLD.updateByRoleId,  \n" +
                "					fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/  \n" +
                "					NEW.updateByRoleId/*updateByRoleId*/,						'varchar');  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.lockedAt, \"\") != IFNULL(NEW.lockedAt, \"\") THEN  \n" +
                "        INSERT INTO supplier_invoice_payment_history  \n" +
                "					(tableName,									refPaymentID,  \n" +
                "					Colname,									Oldval,  \n" +
                "					Newval,										createdAt,  \n" +
                "					createdBy,									createByRoleId,  \n" +
                "					updatedAt,									updatedBy,  \n" +
                "					updateByRoleId,									valueDataType)  \n" +
                "		  VALUES 	(vTableName,										NEW.id,  \n" +
                "					CONCAT(vLockUnlockFieldPTText, \" Date\"),					'',  \n" +
                "					(CASE WHEN OLD.lockStatus = 'LC' THEN fun_DatetimetoUTCDateTime()  \n" +
                "						ELSE NEW.lockedAt END), 						OLD.updatedAt,  \n" +
                "					OLD.updatedBy,									OLD.updateByRoleId,  \n" +
                "					fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/  \n" +
                "					NEW.updateByRoleId /*updateByRoleId*/,  \n" +
                "                    fun_getDataTypeBasedOnTableAndColumnName(vTableName,'lockedAt'));  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.lockedBy, \"\") != IFNULL(NEW.lockedBy, \"\") THEN  \n" +
                "        INSERT INTO supplier_invoice_payment_history  \n" +
                "					(tableName,									refPaymentID,  \n" +
                "					Colname,									Oldval,  \n" +
                "					Newval,										createdAt,  \n" +
                "					createdBy,									createByRoleId,  \n" +
                "					updatedAt,									updatedBy,  \n" +
                "					updateByRoleId,									valueDataType)  \n" +
                "		  VALUES 		(vTableName,									NEW.id,  \n" +
                "					CONCAT(vLockUnlockFieldPTText, \" By\"),					'',  \n" +
                "					(CASE WHEN OLD.lockStatus = 'LC' THEN fun_getUserNameByID(NEW.updatedBy)  \n" +
                "						ELSE fun_getUserNameByID(NEW.lockedBy) END),				OLD.updatedAt,  \n" +
                "					OLD.updatedBy,								OLD.updateByRoleId,  \n" +
                "					fun_DatetimetoUTCDateTime(), /*updatedAt*/				NEW.updatedBy, /*updatedBy*/  \n" +
                "					NEW.updateByRoleId/*updateByRoleId*/,					'varchar');  \n" +
                "    END IF;  \n" +
                "  \n" +
                "		IF IFNULL(OLD.mfgcodeID,0) != IFNULL(NEW.mfgcodeID,0) THEN  \n" +
                "			IF OLD.mfgcodeID IS NOT NULL THEN  \n" +
                "				SELECT IFNULL(`mfgCode`, '') INTO vOldval  \n" +
                "				FROM mfgcodemst  \n" +
                "				WHERE id =OLD.mfgcodeID  \n" +
                "				ORDER BY id DESC LIMIT 1;  \n" +
                "			END IF;  \n" +
                "			IF NEW.mfgcodeID IS NOT NULL THEN  \n" +
                "				SELECT IFNULL(`mfgCode`, '') INTO vNewval  \n" +
                "				FROM mfgcodemst  \n" +
                "				WHERE id =NEW.mfgcodeID  \n" +
                "				ORDER BY id DESC LIMIT 1;  \n" +
                "			END IF;  \n" +
                "			  INSERT INTO supplier_invoice_payment_history  \n" +
                "						(tableName,									refPaymentID,  \n" +
                "						Colname,									Oldval,  \n" +
                "						Newval,										createdAt,  \n" +
                "						createdBy,									createByRoleId,  \n" +
                "						updatedAt,									updatedBy,  \n" +
                "						updateByRoleId,								valueDataType)  \n" +
                "			  VALUES 	(vTableName,								NEW.id,  \n" +
                "						\"Supplier\",									vOldval,  \n" +
                "						vNewval,									OLD.updatedAt,  \n" +
                "						OLD.updatedBy,								OLD.updateByRoleId,  \n" +
                "						fun_DatetimetoUTCDateTime(), /*updatedAt*/	NEW.updatedBy, /*updatedBy*/  \n" +
                "						NEW.updateByRoleId/*updateByRoleId*/,		'varchar');  \n" +
                "		END IF;  \n" +
                "  \n" +
                "	    IF IFNULL(OLD.payToName, \"\") != IFNULL(NEW.payToName, \"\") THEN  \n" +
                "			INSERT INTO supplier_invoice_payment_history  \n" +
                "						(tableName,									refPaymentID,  \n" +
                "						Colname,									Oldval,  \n" +
                "						Newval,										createdAt,  \n" +
                "						createdBy,									createByRoleId,  \n" +
                "						updatedAt,									updatedBy,  \n" +
                "						updateByRoleId,								valueDataType)  \n" +
                "			  VALUES 	(vTableName,										NEW.id,  \n" +
                "						\"Remit To name\",									OLD.payToName,  \n" +
                "						NEW.payToName,									OLD.updatedAt,  \n" +
                "						OLD.updatedBy,									OLD.updateByRoleId,  \n" +
                "						fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/  \n" +
                "						NEW.updateByRoleId/*updateByRoleId*/,  \n" +
                "                        fun_getDataTypeBasedOnTableAndColumnName(vTableName,'payToName'));  \n" +
                "	    END IF;  \n" +
                "  \n" +
                "	    IF IFNULL(OLD.payToAddress, \"\") != IFNULL(NEW.payToAddress, \"\") THEN  \n" +
                "			INSERT INTO supplier_invoice_payment_history  \n" +
                "						(tableName,									refPaymentID,  \n" +
                "						Colname,									Oldval,  \n" +
                "						Newval,										createdAt,  \n" +
                "						createdBy,									createByRoleId,  \n" +
                "						updatedAt,									updatedBy,  \n" +
                "						updateByRoleId,								valueDataType)  \n" +
                "			  VALUES 	(vTableName,										NEW.id,  \n" +
                "						\"Remit To Address\",									OLD.payToAddress,  \n" +
                "						NEW.payToAddress,								OLD.updatedAt,  \n" +
                "						OLD.updatedBy,									OLD.updateByRoleId,  \n" +
                "						fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/  \n" +
                "						NEW.updateByRoleId/*updateByRoleId*/,  \n" +
                "                        fun_getDataTypeBasedOnTableAndColumnName(vTableName,'payToAddress'));  \n" +
                "	    END IF;  \n" +
                "  \n" +
                "	    IF IFNULL(OLD.payToContactPerson, \"\") != IFNULL(NEW.payToContactPerson, \"\") THEN  \n" +
                "			INSERT INTO supplier_invoice_payment_history  \n" +
                "						(tableName,									refPaymentID,  \n" +
                "						Colname,									Oldval,  \n" +
                "						Newval,										createdAt,  \n" +
                "						createdBy,									createByRoleId,  \n" +
                "						updatedAt,									updatedBy,  \n" +
                "						updateByRoleId,									valueDataType)  \n" +
                "			  VALUES 		(vTableName,									NEW.id,  \n" +
                "						\"Remit To Contact Person\",							OLD.payToContactPerson,  \n" +
                "						NEW.payToContactPerson,								OLD.updatedAt,  \n" +
                "						OLD.updatedBy,									OLD.updateByRoleId,  \n" +
                "						fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/  \n" +
                "						NEW.updateByRoleId/*updateByRoleId*/,  \n" +
                "                        fun_getDataTypeBasedOnTableAndColumnName(vTableName,'payToContactPerson'));  \n" +
                "	    END IF;  \n" +
                "  \n" +
                "	    IF IFNULL(OLD.billToName, \"\") != IFNULL(NEW.billToName, \"\") THEN  \n" +
                "			INSERT INTO supplier_invoice_payment_history  \n" +
                "						(tableName,									refPaymentID,  \n" +
                "						Colname,									Oldval,  \n" +
                "						Newval,										createdAt,  \n" +
                "						createdBy,									createByRoleId,  \n" +
                "						updatedAt,									updatedBy,  \n" +
                "						updateByRoleId,								valueDataType)  \n" +
                "			  VALUES 	(vTableName,										NEW.id,  \n" +
                "						\"Bill To Name\",									OLD.billToName,  \n" +
                "						NEW.billToName,									OLD.updatedAt,  \n" +
                "						OLD.updatedBy,									OLD.updateByRoleId,  \n" +
                "						fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/  \n" +
                "						NEW.updateByRoleId/*updateByRoleId*/,  \n" +
                "                        fun_getDataTypeBasedOnTableAndColumnName(vTableName,'billToName'));  \n" +
                "	    END IF;  \n" +
                "  \n" +
                "	    IF IFNULL(OLD.billToAddress, \"\") != IFNULL(NEW.billToAddress, \"\") THEN  \n" +
                "			INSERT INTO supplier_invoice_payment_history  \n" +
                "						(tableName,									refPaymentID,  \n" +
                "						Colname,									Oldval,  \n" +
                "						Newval,										createdAt,  \n" +
                "						createdBy,									createByRoleId,  \n" +
                "						updatedAt,									updatedBy,  \n" +
                "						updateByRoleId,									valueDataType)  \n" +
                "			  VALUES 	(vTableName,										NEW.id,  \n" +
                "						(CASE WHEN old.refPaymentMode = \"CR\" THEN \"Billing Address\"  \n" +
                "						ELSE \"Business Address\" END),							OLD.billToAddress,  \n" +
                "						NEW.billToAddress,								OLD.updatedAt,  \n" +
                "						OLD.updatedBy,									OLD.updateByRoleId,  \n" +
                "						fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/  \n" +
                "						NEW.updateByRoleId/*updateByRoleId*/,  \n" +
                "                        fun_getDataTypeBasedOnTableAndColumnName(vTableName,'billToAddress'));  \n" +
                "	    END IF;  \n" +
                "  \n" +
                "	    IF IFNULL(OLD.billToContactPerson, \"\") != IFNULL(NEW.billToContactPerson, \"\") THEN  \n" +
                "			INSERT INTO supplier_invoice_payment_history  \n" +
                "						(tableName,									refPaymentID,  \n" +
                "						Colname,									Oldval,  \n" +
                "						Newval,										createdAt,  \n" +
                "						createdBy,									createByRoleId,  \n" +
                "						updatedAt,									updatedBy,  \n" +
                "						updateByRoleId,									valueDataType)  \n" +
                "			  VALUES 		(vTableName,									NEW.id,  \n" +
                "						(CASE WHEN old.refPaymentMode = \"CR\" THEN \"Billing Address Contact Person\"  \n" +
                "						ELSE \"Business Address Contact Person\" END),					OLD.billToContactPerson,  \n" +
                "						NEW.billToContactPerson,							OLD.updatedAt,  \n" +
                "						OLD.updatedBy,									OLD.updateByRoleId,  \n" +
                "						fun_DatetimetoUTCDateTime(), /*updatedAt*/					NEW.updatedBy, /*updatedBy*/  \n" +
                "						NEW.updateByRoleId/*updateByRoleId*/,  \n" +
                "                        fun_getDataTypeBasedOnTableAndColumnName(vTableName,'billToContactPerson'));  \n" +
                "	    END IF;  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "  \n" +
                "    IF NEW.refPaymentMode IN ('R','RR') THEN  \n" +
                "  \n" +
                "	    IF IFNULL(OLD.depositBatchNumber, \"\") != IFNULL(NEW.depositBatchNumber, \"\") THEN  \n" +
                "			INSERT INTO supplier_invoice_payment_history  \n" +
                "						(tableName,						refPaymentID,  \n" +
                "						Colname,						Oldval,  \n" +
                "						Newval,							createdAt,  \n" +
                "						createdBy,						createByRoleId,  \n" +
                "						updatedAt,						updatedBy,  \n" +
                "						updateByRoleId,					valueDataType)  \n" +
                "			  VALUES 	(vTableName,							NEW.id,  \n" +
                "					\"Deposit Batch#\",						OLD.depositBatchNumber,  \n" +
                "					NEW.depositBatchNumber,						OLD.updatedAt,  \n" +
                "					OLD.updatedBy,							OLD.updateByRoleId,  \n" +
                "					fun_DatetimetoUTCDateTime(), /*updatedAt*/			NEW.updatedBy, /*updatedBy*/  \n" +
                "					NEW.updateByRoleId/*updateByRoleId*/,  \n" +
                "                    fun_getDataTypeBasedOnTableAndColumnName(vTableName,'depositBatchNumber'));  \n" +
                "	    END IF;  \n" +
                "  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    IF NEW.refPaymentMode IN ('RR','CR') THEN  \n" +
                "		IF IFNULL(OLD.offsetAmount,0) != IFNULL(NEW.offsetAmount,0) THEN  \n" +
                "			INSERT INTO supplier_invoice_payment_history  \n" +
                "					(tableName,									refPaymentID,  \n" +
                "					Colname,									Oldval,  \n" +
                "					Newval,										createdAt,  \n" +
                "					createdBy,									createByRoleId,  \n" +
                "					updatedAt,									updatedBy,  \n" +
                "					updateByRoleId,								valueDataType)  \n" +
                "			VALUES 	(vTableName,										NEW.id,  \n" +
                "					(CASE WHEN NEW.refPaymentMode = 'RR' THEN \"Offset Refund Amount ($)\"  \n" +
                "						WHEN NEW.refPaymentMode = 'CR' THEN \"Offset Amount ($)\"  \n" +
                "						ELSE '' END),								OLD.offsetAmount,  \n" +
                "					NEW.offsetAmount,								OLD.updatedAt,  \n" +
                "					OLD.updatedBy,									OLD.updateByRoleId,  \n" +
                "					fun_DatetimetoUTCDateTime(), /*updatedAt*/		NEW.updatedBy, /*updatedBy*/  \n" +
                "					NEW.updateByRoleId/*updateByRoleId*/,  \n" +
                "                    'amount');  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF IFNULL(OLD.acctId,0) != IFNULL(NEW.acctId,0) THEN  \n" +
                "			INSERT INTO supplier_invoice_payment_history  \n" +
                "					(tableName,									refPaymentID,  \n" +
                "					Colname,									Oldval,  \n" +
                "					Newval,										createdAt,  \n" +
                "					createdBy,									createByRoleId,  \n" +
                "					updatedAt,									updatedBy,  \n" +
                "					updateByRoleId,								valueDataType)  \n" +
                "		  VALUES 	(vTableName,								NEW.id,  \n" +
                "					\"COA\",  \n" +
                "					(SELECT CONCAT('(',a.acct_code,') ', a.acct_name) FROM acct_acctmst a WHERE a.acct_id = OLD.acctId),  \n" +
                "					(SELECT CONCAT('(',a.acct_code,') ', a.acct_name) FROM acct_acctmst a WHERE a.acct_id = NEW.acctId),  \n" +
                "					OLD.updatedAt,   							OLD.updatedBy,  \n" +
                "					OLD.updateByRoleId,							fun_DatetimetoUTCDateTime(), /*updatedAt*/  \n" +
                "					NEW.updatedBy, /*updatedBy*/				NEW.updateByRoleId/*updateByRoleId*/,  \n" +
                "                    'varchar');  \n" +
                "		END IF;  \n" +
                "    END IF;  \n" +
                "  \n" +
                "  \n" +
                "    IF NEW.refPaymentMode = 'CR' THEN  \n" +
                "		IF IFNULL(OLD.subStatus, \"\") != IFNULL(NEW.subStatus, \"\") THEN  \n" +
                "			INSERT INTO supplier_invoice_payment_history  \n" +
                "					(tableName,							refPaymentID,  \n" +
                "					Colname,							Oldval,  \n" +
                "					Newval,								createdAt,  \n" +
                "					createdBy,							createByRoleId,  \n" +
                "					updatedAt,							updatedBy,  \n" +
                "					updateByRoleId,						valueDataType)  \n" +
                "			  VALUES 	(vTableName,							NEW.id,  \n" +
                "					\"Refund Status\",						fun_getCustRefundSubStatusNameByID(OLD.subStatus),  \n" +
                "					fun_getCustRefundSubStatusNameByID(NEW.subStatus),		OLD.updatedAt,  \n" +
                "					OLD.updatedBy,							OLD.updateByRoleId,  \n" +
                "					fun_DatetimetoUTCDateTime(), /*updatedAt*/		NEW.updatedBy, /*updatedBy*/  \n" +
                "					NEW.updateByRoleId/*updateByRoleId*/,	'varchar');  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF IFNULL(OLD.isMarkAsPaid, \"\") != IFNULL(NEW.isMarkAsPaid, \"\") THEN  \n" +
                "			INSERT INTO supplier_invoice_payment_history  \n" +
                "					(tableName,							refPaymentID,  \n" +
                "					Colname,							Oldval,  \n" +
                "					Newval,								createdAt,  \n" +
                "					createdBy,							createByRoleId,  \n" +
                "					updatedAt,							updatedBy,  \n" +
                "					updateByRoleId,						valueDataType)  \n" +
                "			  VALUES 	(vTableName,								NEW.id,  \n" +
                "					\"Mark As Paid\",									fun_getIntToText(OLD.isMarkAsPaid),  \n" +
                "					fun_getIntToText(NEW.isMarkAsPaid),				OLD.updatedAt,  \n" +
                "					OLD.updatedBy,									OLD.updateByRoleId,  \n" +
                "					fun_DatetimetoUTCDateTime(), /*updatedAt*/		NEW.updatedBy, /*updatedBy*/  \n" +
                "					NEW.updateByRoleId/*updateByRoleId*/,			'varchar');  \n" +
                "		END IF;  \n" +
                "    END IF;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** New Script -> 26-02-2022  *********************************** */
                "DROP TRIGGER /*!50032 IF EXISTS */ `Trg_AU_packing_slip_material_receive` ;  \n" +
                "CREATE TRIGGER `Trg_AU_packing_slip_material_receive` AFTER UPDATE ON `packing_slip_material_receive`  \n" +
                "    FOR EACH ROW BEGIN  \n" +
                "	DECLARE vMfgCodeFormat INT;  \n" +
                "    DECLARE vOldCustomer VARCHAR(100);  \n" +
                "    DECLARE vNewCustomer VARCHAR(100);  \n" +
                "  \n" +
                "	SELECT fun_getMFGCodeNameFormat() INTO vMfgCodeFormat;  \n" +
                "	IF OLD.receiptType = \"P\" AND OLD.refPurchaseOrderID IS NULL AND NEW.isCustConsigned != OLD.isCustConsigned THEN  \n" +
                "		UPDATE packing_slip_material_receive_det SET isLineCustConsigned=NEW.isCustConsigned, LineCustomerID=NEW.CustomerID,updatedBy=NEW.updatedBy, updateByRoleId=NEW.updateByRoleId ,updatedAt=fun_DatetimetoUTCDateTime()  WHERE refPackingSlipMaterialRecID=OLD.id;  \n" +
                "        /* (-14) is Packing Slip Entity Default Entry ID*/  \n" +
                "        INSERT INTO pending_elastic_entity_sync_data(entityID,entityParamDet) VALUES(-14,CONCAT('{\"id\":', OLD.id , '}'));  \n" +
                "    END IF;  \n" +
                "	IF IFNULL(OLD.poNumber,0) != IFNULL(NEW.poNumber,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'PO#', CAST(OLD.poNumber AS CHAR), CAST(new.poNumber AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "		fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','poNumber'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.poDate,0) != IFNULL(NEW.poDate,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR),  \n" +
                "		CASE  \n" +
                "			WHEN NEW.receiptType = 'P' THEN 'PO Date'  \n" +
                "			WHEN NEW.receiptType = 'R' THEN 'RMA Date'  \n" +
                "			ELSE 'PO Date'  \n" +
                "		END ,  \n" +
                "		CAST(OLD.poDate AS CHAR), CAST(NEW.poDate AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "		fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','poDate'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.mfgCodeID,0) != IFNULL(NEW.mfgCodeID,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Supplier', CAST(fun_getMfgCodeAndNameByID(OLD.mfgCodeID) AS CHAR), CAST(fun_getMfgCodeAndNameByID(new.mfgCodeID) AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        'varchar');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.supplierSONumber,0) != IFNULL(NEW.supplierSONumber,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'SO#', CAST(OLD.supplierSONumber AS CHAR), CAST(new.supplierSONumber AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "		fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','supplierSONumber'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.soDate,0) != IFNULL(NEW.soDate,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'SO Date', CAST(OLD.soDate AS CHAR), CAST(NEW.soDate AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "		fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','soDate'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.packingSlipNumber,0) != IFNULL(NEW.packingSlipNumber,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Packing Slip#', CAST(OLD.packingSlipNumber AS CHAR), CAST(new.packingSlipNumber AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','packingSlipNumber'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.packingSlipDate,0) != IFNULL(NEW.packingSlipDate,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Packing Slip Date', CAST(OLD.packingSlipDate AS CHAR), CAST(NEW.packingSlipDate AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','packingSlipDate'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.invoiceNumber,0) != IFNULL(NEW.invoiceNumber,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Invoice#', CAST(OLD.invoiceNumber AS CHAR), CAST(new.invoiceNumber AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','invoiceNumber'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.invoiceDate,0) != IFNULL(NEW.invoiceDate,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Invoice Date', CAST(OLD.invoiceDate AS CHAR), CAST(NEW.invoiceDate AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','invoiceDate'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.creditMemoNumber,0) != IFNULL(NEW.creditMemoNumber,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Credit Memo#', CAST(OLD.creditMemoNumber AS CHAR), CAST(new.creditMemoNumber AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','creditMemoNumber'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.creditMemoDate,0) != IFNULL(NEW.creditMemoDate,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Credit Memo Date', CAST(OLD.creditMemoDate AS CHAR), CAST(NEW.creditMemoDate AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','creditMemoDate'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.debitMemoNumber,0) != IFNULL(NEW.debitMemoNumber,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Debit Memo#', CAST(OLD.debitMemoNumber AS CHAR), CAST(new.debitMemoNumber AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','debitMemoNumber'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.debitMemoDate,0) != IFNULL(NEW.debitMemoDate,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Debit Memo Date', CAST(OLD.debitMemoDate AS CHAR), CAST(NEW.debitMemoDate AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','debitMemoDate'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.receiptDate,0) != IFNULL(NEW.receiptDate,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), (CASE WHEN (new.receiptType = 'R' OR (new.receiptType = 'C' AND new.creditMemoType = 'RC')) THEN 'Ship By Date' ELSE 'Material Receipt Date' END),  \n" +
                "		CAST(OLD.receiptDate AS CHAR), CAST(NEW.receiptDate AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','receiptDate'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.`status`,0) != IFNULL(NEW.`status`,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR),  \n" +
                "		(  \n" +
                "			CASE  \n" +
                "				WHEN NEW.receiptType = 'P' THEN 'Packing Slip Status'  \n" +
                "				WHEN NEW.receiptType = 'R' THEN 'RMA Status'  \n" +
                "				ELSE 'Supplier Invoice Status'  \n" +
                "			END  \n" +
                "		),  \n" +
                "		CAST(  \n" +
                "			(  \n" +
                "				CASE  \n" +
                "					WHEN OLD.`status` = 'I' THEN 'Investigate'  \n" +
                "					WHEN OLD.`status` = 'W' THEN 'Waiting For Invoice'  \n" +
                "					WHEN OLD.`status` = 'IR' THEN 'Invoice Received'  \n" +
                "					WHEN OLD.`status` = 'A' THEN 'Approved To Pay'  \n" +
                "					WHEN OLD.`status` = 'P' THEN 'Paid'  \n" +
                "					WHEN OLD.`status` = 'PE' THEN 'Pending'  \n" +
                "					WHEN OLD.`status` = 'D' THEN 'Draft'  \n" +
                "					WHEN OLD.`status` = 'WS' THEN 'Waiting For Shipment'  \n" +
                "					WHEN OLD.`status` = 'WC' THEN 'Waiting For Credit Memo'  \n" +
                "					WHEN OLD.`status` = 'CR' THEN 'Credit Memo Received'  \n" +
                "                    WHEN OLD.`status` = 'PM' THEN 'Pending Management Approval'  \n" +
                "					ELSE NULL  \n" +
                "				END  \n" +
                "			) AS CHAR  \n" +
                "		),  \n" +
                "		CAST(  \n" +
                "			(  \n" +
                "				CASE  \n" +
                "					WHEN NEW.`status` = 'I' THEN 'Investigate'  \n" +
                "					WHEN NEW.`status` = 'W' THEN 'Waiting For Invoice'  \n" +
                "					WHEN NEW.`status` = 'IR' THEN 'Invoice Received'  \n" +
                "					WHEN NEW.`status` = 'A' THEN 'Approved To Pay'  \n" +
                "					WHEN NEW.`status` = 'P' THEN 'Paid'  \n" +
                "					WHEN NEW.`status` = 'PE' THEN 'Pending'  \n" +
                "					WHEN NEW.`status` = 'D' THEN 'Draft'  \n" +
                "					WHEN NEW.`status` = 'WS' THEN 'Waiting For Shipment'  \n" +
                "					WHEN NEW.`status` = 'WC' THEN 'Waiting For Credit Memo'  \n" +
                "					WHEN NEW.`status` = 'CR' THEN 'Credit Memo Received'  \n" +
                "                    WHEN NEW.`status` = 'PM' THEN 'Pending Management Approval'  \n" +
                "					ELSE NULL  \n" +
                "				END  \n" +
                "			) AS CHAR  \n" +
                "		),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId, 'varchar');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.packingSlipModeStatus,0) != IFNULL(NEW.packingSlipModeStatus,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR),  \n" +
                "		(  \n" +
                "			CASE  \n" +
                "				WHEN NEW.receiptType = 'P' THEN 'Packing Slip Posting Status'  \n" +
                "				WHEN NEW.receiptType = 'R' THEN 'RMA Posting Status'  \n" +
                "				ELSE 'Supplier Invoice Posting Status'  \n" +
                "			END  \n" +
                "		),  \n" +
                "		CAST(  \n" +
                "			(  \n" +
                "				CASE  \n" +
                "					WHEN OLD.packingSlipModeStatus = 'D' THEN 'Draft'  \n" +
                "					WHEN OLD.packingSlipModeStatus = 'P' THEN 'Publish'  \n" +
                "					WHEN OLD.packingSlipModeStatus = 'S' THEN 'Shipped'  \n" +
                "					ELSE NULL  \n" +
                "				END  \n" +
                "			) AS CHAR  \n" +
                "		),  \n" +
                "		CAST(  \n" +
                "			(  \n" +
                "				CASE  \n" +
                "					WHEN NEW.packingSlipModeStatus = 'D' THEN 'Draft'  \n" +
                "					WHEN NEW.packingSlipModeStatus = 'P' THEN 'Publish'  \n" +
                "					WHEN NEW.packingSlipModeStatus = 'S' THEN 'Shipped'  \n" +
                "					ELSE NULL  \n" +
                "				END  \n" +
                "			) AS CHAR  \n" +
                "		),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId, 'varchar');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.applyDate,0) != IFNULL(NEW.applyDate,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Apply Date', CAST(OLD.applyDate AS CHAR), CAST(NEW.applyDate AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','applyDate'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.invoiceTotalDue,0) != IFNULL(NEW.invoiceTotalDue,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR),  \n" +
                "		(  \n" +
                "			CASE  \n" +
                "				WHEN NEW.receiptType = 'I' THEN 'Invoice Total'  \n" +
                "				WHEN NEW.receiptType = 'C' THEN 'Credit Memo Total'  \n" +
                "				WHEN NEW.receiptType = 'D' THEN 'Debit Memo Total'  \n" +
                "				ELSE NULL  \n" +
                "			END  \n" +
                "		),  \n" +
                "		CAST(OLD.invoiceTotalDue AS CHAR), CAST(new.invoiceTotalDue AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        'amount');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.paymentTermsID,0) != IFNULL(NEW.paymentTermsID,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Payment Term', CAST(fun_getGenericCategoryNameByID(OLD.paymentTermsID) AS CHAR), CAST(fun_getGenericCategoryNameByID(new.paymentTermsID) AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        'varchar');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.remark,0) != IFNULL(NEW.remark,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR),  \n" +
                "		(  \n" +
                "			CASE  \n" +
                "				WHEN NEW.receiptType = 'R' THEN 'RMA Comment'  \n" +
                "				ELSE 'Comment'  \n" +
                "			END  \n" +
                "		), CAST(OLD.remark AS CHAR), CAST(new.remark AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','remark'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.internalRemark,0) != IFNULL(NEW.internalRemark,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR),  \n" +
                "		(  \n" +
                "			CASE  \n" +
                "				WHEN NEW.receiptType = 'R' THEN 'Internal RMA Comment'  \n" +
                "				ELSE 'PS Internal Comment'  \n" +
                "			END  \n" +
                "		), CAST(OLD.internalRemark AS CHAR), CAST(new.internalRemark AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','internalRemark'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.shippingMethodId,0) != IFNULL(NEW.shippingMethodId,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Shipping Method', CAST(fun_getGenericCategoryCodeNameByID(OLD.shippingMethodId) AS CHAR), CAST(fun_getGenericCategoryCodeNameByID(new.shippingMethodId) AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        'varchar');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.carrierID,0) != IFNULL(NEW.carrierID,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Carrier', CAST(fun_getGenericCategoryCodeNameByID(OLD.carrierID) AS CHAR), CAST(fun_getGenericCategoryCodeNameByID(new.carrierID) AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        'varchar');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.carrierAccountNumber,0) != IFNULL(NEW.carrierAccountNumber,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Carrier Account#', CAST(OLD.carrierAccountNumber AS CHAR), CAST(new.carrierAccountNumber AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','carrierAccountNumber'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.shippingInsurance ,0) != IFNULL(NEW.shippingInsurance ,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\",CAST(new.id AS CHAR),'Shipping With Insurance', CAST(CASE WHEN OLD.shippingInsurance = 0 THEN 'No' ELSE 'Yes' END AS CHAR), CAST(CASE WHEN NEW.shippingInsurance = 0 THEN 'No' ELSE 'Yes' END AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,  \n" +
                "		'varchar');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  /*address*/  \n" +
                "  \n" +
                "	IF IFNULL(OLD.billToAddress,0) != IFNULL(NEW.billToAddress,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Business Address', CAST(OLD.billToAddress AS CHAR), CAST(new.billToAddress AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','billToAddress'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.billToConactPerson,0) != IFNULL(NEW.billToConactPerson,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Business Address Contact Person', CAST(OLD.billToConactPerson AS CHAR), CAST(new.billToConactPerson AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','billToConactPerson'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.rmaShippingAddress,0) != IFNULL(NEW.rmaShippingAddress,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'RMA Shipping Address', CAST(OLD.rmaShippingAddress AS CHAR), CAST(new.rmaShippingAddress AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','rmaShippingAddress'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.rmaShippingContactPerson,0) != IFNULL(NEW.rmaShippingContactPerson,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'RMA Shipping Address Contact Person', OLD.rmaShippingContactPerson, new.rmaShippingContactPerson,  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','rmaShippingContactPerson'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF IFNULL(OLD.rmaMarkForAddress,0) != IFNULL(NEW.rmaMarkForAddress,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Mark For (Intermediate Ship To) Address', CAST(OLD.rmaMarkForAddress AS CHAR), CAST(new.rmaMarkForAddress AS CHAR),  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','rmaMarkForAddress'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.rmaMarkForContactPerson,0) != IFNULL(NEW.rmaMarkForContactPerson,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Mark For Contact Person', OLD.rmaMarkForContactPerson, new.rmaMarkForContactPerson,  \n" +
                "		fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "        fun_getDataTypeBasedOnTableAndColumnName('packing_slip_material_receive','rmaMarkForContactPerson'));  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  /*address*/  \n" +
                "  \n" +
                "    IF IFNULL(OLD.markedForRefund,0) != IFNULL(NEW.markedForRefund,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Marked for Refund',  \n" +
                "			CASE WHEN OLD.markedForRefund = 1 THEN 'Yes' ELSE 'No' END,  \n" +
                "            CASE WHEN new.markedForRefund = 1 THEN 'Yes' ELSE 'No' END,  \n" +
                "			fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId, 'varchar');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF IFNULL(OLD.markedForRefundAmt,0) != IFNULL(NEW.markedForRefundAmt,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,  \n" +
                "		valueDataType)  \n" +
                "		VALUES(\"PACKINGSLIPMATERIALRECEIVE\", CAST(new.id AS CHAR), 'Refund Amount ($)', CAST(OLD.markedForRefundAmt AS CHAR), CAST(new.markedForRefundAmt AS CHAR),  \n" +
                "			fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,  \n" +
                "            'amount');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  IF IFNULL(OLD.isCustConsigned, 0) != IFNULL(NEW.isCustConsigned, 0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES(\"PACKINGSLIPMATERIALRECEIVE\",CAST(new.id AS CHAR),'Packing Slip Customer Consigned (No Charge)',  CAST(CASE WHEN OLD.isCustConsigned=0 THEN 'No' ELSE 'Yes' END AS CHAR), CAST(CASE WHEN NEW.isCustConsigned=0 THEN 'No' ELSE 'Yes' END AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.CustomerID, 0) != IFNULL(NEW.CustomerID,0) THEN  \n" +
                "		SELECT fun_GetFormattedMfgCode(mfgCode, mfgName, vMfgCodeFormat) INTO vOldCustomer FROM mfgcodemst WHERE id=OLD.CustomerID;  \n" +
                "        SELECT fun_GetFormattedMfgCode(mfgCode, mfgName, vMfgCodeFormat) INTO vNewCustomer FROM mfgcodemst WHERE id=NEW.CustomerID;  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES(\"PACKINGSLIPMATERIALRECEIVE\",CAST(new.id AS CHAR),'Packing Slip Customer',  CAST(vOldCustomer AS CHAR), CAST(vNewCustomer AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  IF IFNULL(OLD.isNonUMIDStock, 0) != IFNULL(NEW.isNonUMIDStock, 0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES(\"PACKINGSLIPMATERIALRECEIVE\",CAST(new.id AS CHAR),'Packing Slip Do Not Create UMID Stock',  CAST(CASE WHEN OLD.isNonUMIDStock=0 THEN 'No' ELSE 'Yes' END AS CHAR), CAST(CASE WHEN NEW.isNonUMIDStock=0 THEN 'No' ELSE 'Yes' END AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.invoiceApprovalComment, 0) != IFNULL(NEW.invoiceApprovalComment, 0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES(\"PACKINGSLIPMATERIALRECEIVE\",CAST(new.id AS CHAR),'Approval Comment',  CAST(OLD.invoiceApprovalComment AS CHAR), CAST(NEW.invoiceApprovalComment AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.invoiceApprovalDate, 0) != IFNULL(NEW.invoiceApprovalDate, 0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES(\"PACKINGSLIPMATERIALRECEIVE\",CAST(new.id AS CHAR),'Approved On',  CAST(fun_ApplyCommonDateTimeFormatByParaValue(OLD.invoiceApprovalDate,FUN_GETTIMEZONE(), FUN_GETDATETIMEFORMAT()) AS CHAR), CAST(fun_ApplyCommonDateTimeFormatByParaValue(NEW.invoiceApprovalDate,FUN_GETTIMEZONE(), FUN_GETDATETIMEFORMAT()) AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.invoiceApprovedBy, 0) != IFNULL(NEW.invoiceApprovedBy, 0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES(\"PACKINGSLIPMATERIALRECEIVE\",CAST(new.id AS CHAR),'Approved By',  CAST(fun_getUserNameByID(OLD.invoiceApprovedBy) AS CHAR), CAST(fun_getUserNameByID(NEW.invoiceApprovedBy) AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "      IF IFNULL(OLD.invoiceRequireManagementApproval, 0) != IFNULL(NEW.invoiceRequireManagementApproval, 0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES(\"PACKINGSLIPMATERIALRECEIVE\",CAST(new.id AS CHAR),'Invoice Require Management Approval',  CAST(CASE WHEN OLD.invoiceRequireManagementApproval=0 THEN 'No' ELSE 'Yes' END AS CHAR), CAST(CASE WHEN NEW.invoiceRequireManagementApproval=0 THEN 'No' ELSE 'Yes' END AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.isZeroValue, 0) != IFNULL(NEW.isZeroValue, 0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId)  \n" +
                "        VALUES(\"PACKINGSLIPMATERIALRECEIVE\",CAST(new.id AS CHAR),'Confirmed Zero Value Invoices Only',  CAST(CASE WHEN OLD.isZeroValue=0 THEN 'No' ELSE 'Yes' END AS CHAR), CAST(CASE WHEN NEW.isZeroValue=0 THEN 'No' ELSE 'Yes' END AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId);  \n" +
                "	END IF;  \n" +
                "  END;  \n" +
                /* **************************** Add Script Version -> 26-02-2022 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1341,'1.00','V1',' User Story 39488 - triggers - KS '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1341:
            allDbChangesArray.push(
                /* **************************** New Script -> 26-02-2022  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetCheckPrintAndRemittanceReport` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetCheckPrintAndRemittanceReport`(  \n" +
                "	IN pPaymentID INT  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "		SELECT pip.id, pip.accountReference, pip.payToName, pip.paymentDate, pip.paymentNumber,  \n" +
                "				pip.paymentAmount,  \n" +
                "                fun_NumberToWords(pip.paymentAmount) paymentAmountInWords,  \n" +
                "                fun_getAddressbyIDForCheckPrint(pip.payToAddressID, pip.payToContactPersonID) payToAddress,  \n" +
                "				/*pip.payToAddress,  */  \n" +
                "				pip.billToName supplierName,  \n" +
                "                fun_getAddressbyIDForCheckPrint(pip.billToAddressID, pip.billToContactPersonID) supplierAddress,  \n" +
                "                /*pip.billToAddress supplierAddress,*/  \n" +
                "                ca.email supplierEmail, '' supplierFaxNumber,  \n" +
                "                pip.bankAccountNo,  \n" +
                "                g.gencCategoryName paymentType  \n" +
                "		  FROM packingslip_invoice_payment pip  \n" +
                "          LEFT JOIN customer_addresses ca ON ca.customerId = pip.mfgcodeID AND ca.isDeleted = 0 AND ca.addressType = 'BU' AND ca.isDefault = 1  \n" +
                "          JOIN genericcategory g ON g.categoryType = 'Payable Payment Method' AND g.gencCategoryID = pip.paymentType  \n" +
                "		 WHERE pip.isDeleted = 0  \n" +
                "			AND pip.refPaymentMode = 'P'  \n" +
                "		   AND pip.id = pPaymentID;  \n" +
                "  \n" +
                "		  SELECT pd.refPayementid id,  \n" +
                "				(CASE 	WHEN p.`receiptType` = 'I' THEN  \n" +
                "							p.invoiceNumber  \n" +
                "						WHEN p.`receiptType` = 'C' THEN  \n" +
                "							p.creditMemoNumber  \n" +
                "						ELSE  \n" +
                "							p.debitMemoNumber  \n" +
                "					END) invoiceNumber,  \n" +
                "  \n" +
                "				(CASE 	WHEN p.`receiptType` = 'I' THEN  \n" +
                "							p.invoiceNumber  \n" +
                "				ELSE  \n" +
                "					(SELECT 	ps.invoiceNumber  \n" +
                "					FROM 	packing_slip_material_receive ps  \n" +
                "					WHERE 	ps.id = p.refParentCreditDebitInvoiceno  \n" +
                "							AND ps.isDeleted = 0  )  \n" +
                "				END  \n" +
                "				) refInvoiceNumber,  \n" +
                "  \n" +
                "				(CASE WHEN p.`receiptType` = 'I' THEN  \n" +
                "							p.invoiceDate  \n" +
                "						WHEN p.`receiptType` = 'C' THEN  \n" +
                "							p.creditMemoDate  \n" +
                "						ELSE  \n" +
                "							p.debitMemoDate  \n" +
                "					END) invoiceDate,  \n" +
                "  \n" +
                "				p.remark `description`,  \n" +
                "				/*(select sum(extendedPrice) from  packing_slip_material_receive_det pd where p.id = pd.refPackingSlipMaterialRecID and pd.isDeleted = 0) extendedPrice,*/  \n" +
                "                pd.paymentAmount extendedPrice,  \n" +
                "				0 discount,  \n" +
                "				(CASE 	WHEN p.`receiptType` = 'I' THEN  \n" +
                "							'Invoice'  \n" +
                "						WHEN p.`receiptType` = 'C' THEN  \n" +
                "							'Credit Memo'  \n" +
                "						ELSE  \n" +
                "							'Debit Memo'  \n" +
                "					END) receiptMemoType,  \n" +
                "                    p.poNumber  \n" +
                "			FROM packing_slip_material_receive p  \n" +
                "            JOIN packingslip_invoice_payment_det pd ON pd.refPackingslipInvoiceID = p.id  \n" +
                "			WHERE /*p.isDeleted =0  \n" +
                "			and*/ p.receiptType IN ('I','C','D')  \n" +
                "            AND EXISTS (SELECT 1 FROM packingslip_invoice_payment pip WHERE pip.refPaymentMode = 'P' AND pip.id = pd.refPayementid)  \n" +
                "			/*and p.`status` = 'P'*/  \n" +
                "			AND pd.refPayementid = pPaymentID  \n" +
                "            ORDER BY invoiceDate, invoiceNumber;  \n" +
                "  \n" +
                "        	SELECT CONCAT('<b>',IF(ci.legalName = '' OR ci.legalName IS NULL,'' ,CONCAT(ci.legalName, ' d/b/a,<br/>')),IFNULL(ci.name, ''),'</b><br/>',IFNULL(ci.street1, ''),'<br/>',IFNULL(ci.city, ''),', ',IFNULL(ci.state, ''),' ',IFNULL(ci.postalCode, ''),'<br/>',  \n" +
                "				IFNULL(c.countryName,''))AS address,  \n" +
                "				ci.personName AS companyContactName,ci.registeredEmail AS companyEmail,ci.faxNumber,ci.contactNumber AS phoneNo,ci.phoneExt,ci.contactNumber AS contact, ci.name AS  companyName,ci.registeredEmail AS email  \n" +
                "			FROM company_info ci  \n" +
                "			LEFT JOIN countrymst c ON ci.countryID=c.countryID AND c.isDeleted = 0  \n" +
                "			WHERE ci.isDeleted=0;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 26-02-2022  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_getDebitMemoReportDetail` ;  \n" +
                "CREATE PROCEDURE `Sproc_getDebitMemoReportDetail`(  \n" +
                "	IN pReceiptID INT,  \n" +
                "    IN pEmployeeID INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "  \n" +
                "    # Debit Memo report details which shows in 2nd section as table format  \n" +
                "         SELECT c.mfgPN partNumber, c.mfgPNDescription DESCRIPTION,  \n" +
                "				psd.packingSlipQty quantity, psd.invoicePrice, psd.extendedPrice, psd.approveNote,  \n" +
                "				ps.debitMemoDate, ps.debitMemoNumber  \n" +
                "			FROM packing_slip_material_receive_det psd  \n" +
                "	  INNER JOIN packing_slip_material_receive ps ON ps.id = psd.refPackingSlipMaterialRecID  \n" +
                "	   LEFT JOIN COMPONENT c ON psd.partID = c.id AND c.isDeleted = 0  \n" +
                "		   WHERE psd.isDeleted = 0  \n" +
                "             AND psd.refPackingSlipMaterialRecID  = pReceiptID  \n" +
                "             AND ps.isDeleted =0;  \n" +
                "  \n" +
                "	# Debit Memo report main section details which shows in 1st section  \n" +
                "       SELECT ps.id, ps.poNumber, ps.debitMemoNumber,  \n" +
                "				DATE_FORMAT(ps.debitMemoDate, '%m/%d/%Y') debitMemoDate,  \n" +
                "				DATE_FORMAT(psr.invoiceDate, '%m/%d/%Y') refInvoiceDate,  \n" +
                "				psr.invoiceNumber refInvoiceNumber,  \n" +
                "				fun_getMfgNameByID(ps.mfgCodeID) supplier,  \n" +
                "				/*CONCAT('ATTN: ', IFNULL(ca.personName,''),'<br/>', IFNULL(ca.division,''), (CASE WHEN ca.division IS NOT NULL THEN'<br/>' ELSE '' END), IFNULL(ca.street1,''),' ', IFNULL(ca.street2,''),' ',IFNULL(ca.street3,''),'<br/> ',  \n" +
                "				IFNULL(ca.city,''),', ', IFNULL(ca.state,''),', ',IFNULL(ca.postcode,''),'<br/>',IFNULL(co.countryName,'')) billingAddress*/  \n" +
                "                fun_getAddressbyIDAndContactPersonID(ps.billToAddressID, ps.billToContactPersonID) billingAddress  \n" +
                "		FROM packing_slip_material_receive ps  \n" +
                "	LEFT JOIN packing_slip_material_receive psr ON psr.id = ps.refParentCreditDebitInvoiceno  AND psr.isDeleted = 0  \n" +
                "	LEFT JOIN customer_addresses ca ON ca.customerID = ps.mfgCodeID AND ca.isDeleted = 0 AND ca.addressType = 'BU' AND ca.isDefault = 1  \n" +
                "	LEFT JOIN countrymst co ON co.countryID = ca.countryID  AND co.isDeleted = 0  \n" +
                "		WHERE ps.id = pReceiptID  \n" +
                "          AND ps.receiptType = 'D'  \n" +
                "          AND ps.isDeleted = 0;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** New Script -> 26-02-2022  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetPackingSlipInvoicePaymentToInformation` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetPackingSlipInvoicePaymentToInformation`(  \n" +
                "	IN pPaymentId INT,  \n" +
                "	IN pMfgCodeId INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "    DECLARE v_mfgNameFormat INT;  \n" +
                "  \n" +
                "SELECT FUN_GETMFGCODENAMEFORMAT() INTO v_mfgNameFormat;  \n" +
                "  \n" +
                "	IF pPaymentId IS NOT NULL THEN  \n" +
                "  \n" +
                "        SELECT FUN_GETTIMEZONE() INTO v_TimeZone;  \n" +
                "		SELECT FUN_GETDATETIMEFORMAT() INTO v_DateTimeDisplayFormat;  \n" +
                "  \n" +
                "		SELECT  pi.systemId,  \n" +
                "				pi.id paymentId,  \n" +
                "				pi.accountReference,  \n" +
                "				pi.mfgcodeID,  \n" +
                "				m.mfgCode,  \n" +
                "				m.mfgName,  \n" +
                "				FUN_GETFORMATTEDMFGCODE(m.mfgCode, m.mfgName, v_mfgNameFormat) fullMfgName,  \n" +
                "				pi.paymentType,  \n" +
                "				p.gencCategoryName paymentTypeName,  \n" +
                "				pi.paymentNumber,  \n" +
                "				pi.bankAccountMasID,  \n" +
                "				pi.bankName,  \n" +
                "				pi.bankAccountNo,  \n" +
                "				pi.paymentDate,  \n" +
                "				pi.paymentAmount,  \n" +
                "				pi.payToName,  \n" +
                "				pi.payToAddress,  \n" +
                "                pi.payToAddressID,  \n" +
                "				pi.payToContactPersonID,  \n" +
                "				pi.remark,  \n" +
                "				pi.isPaymentVoided,  \n" +
                "				pi.voidPaymentReason,  \n" +
                "				pi.billToName,  \n" +
                "				pi.billToAddress,  \n" +
                "                pi.billToAddressID,  \n" +
                "				pi.billToContactPersonID,  \n" +
                "				pi.lockStatus,  \n" +
                "				FUN_GETUSERNAMEBYID(pi.lockedBy) lockByName,  \n" +
                "				FUN_APPLYCOMMONDATETIMEFORMATBYPARAVALUE(pi.lockedAt,  v_TimeZone,  v_DateTimeDisplayFormat) lockedAt,  \n" +
                "				PI.refPaymentMode  \n" +
                "		FROM  packingslip_invoice_payment PI  \n" +
                "        INNER JOIN  mfgcodemst m ON m.id = pi.mfgcodeID  \n" +
                "        INNER JOIN  genericcategory p ON p.gencCategoryID = pi.paymentType  \n" +
                "		WHERE  pi.isDeleted = 0  \n" +
                "        AND PI.refPaymentMode = 'P'  \n" +
                "        AND pi.id = pPaymentId;  \n" +
                "	ELSE  \n" +
                "		SELECT 		m.accountRef accountReference,  \n" +
                "				m.id mfgcodeID,  \n" +
                "				m.mfgCode,  \n" +
                "				m.mfgName,  \n" +
                "				fun_GetFormattedMfgCode(m.mfgCode, m.mfgName, v_mfgNameFormat) fullMfgName,  \n" +
                "				m.paymentMethodID paymentType,  \n" +
                "				p.gencCategoryName paymentTypeName,  \n" +
                "				NULL paymentNumber,  \n" +
                "				b.id bankAccountMasID,  \n" +
                "				b.bankName,  \n" +
                "				b.accountCode bankAccountNo,  \n" +
                "				NULL paymentDate,  \n" +
                "				NULL paymentAmount,  \n" +
                "				ca.bankRemitToName payToName,  \n" +
                "				fun_getAddressbyIDForCheckPrint(ca.id, ca.defaultContactPersonID) payToAddress,  \n" +
                "				NULL remark,  \n" +
                "				0 isPaymentVoided,  \n" +
                "				NULL voidPaymentReason,  \n" +
                "				cb.companyName billToName,  \n" +
                "				fun_getAddressbyIDForCheckPrint(cb.id, cb.defaultContactPersonID) billToAddress,  \n" +
                "				NULL lockStatus,  \n" +
                "				NULL lockByName,  \n" +
                "				NULL lockedAt  \n" +
                "		FROM 		mfgcodemst m  \n" +
                "		LEFT JOIN 	genericcategory p ON p.gencCategoryID = m.paymentMethodID  \n" +
                "        LEFT JOIN 	bank_mst b ON b.id = p.bankid AND b.isDeleted = 0 AND b.isActive = 1  \n" +
                "		LEFT JOIN 	customer_addresses ca ON ca.customerId = m.id AND ca.isDeleted = 0 AND ca.addressType = 'P' AND ca.isDefault = 1  \n" +
                "		LEFT JOIN 	customer_addresses cb ON cb.customerId = m.id AND cb.isDeleted = 0 AND cb.addressType = 'BU' AND cb.isDefault = 1  \n" +
                "		WHERE 		m.isDeleted = 0  \n" +
                "					AND m.id = pMfgCodeId;  \n" +
                "	END IF;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 26-02-2022 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1342,'1.00','V1',' User Story 39489 - SPs - KS '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1342:
            allDbChangesArray.push(
                /* **************************** New Script -> 26-02-2022  *********************************** */
                "INSERT INTO customer_addresses (`customerId`,`street1`,`street2`,`city`,`state`,  \n" +
                "			`countryID`,`postcode`,`addressType`,`isDefault`, `street3`,  \n" +
                "			`companyName`, `systemGenerated`, `bankRemitToName`, `latitude`, `longitude`,  \n" +
                "			`additionalComment`, `defaultContactPersonID`, `isActive`,  \n" +
                "			`createdBy`,`updatedBy`,`createByRoleId`,`updateByRoleId`,`createdAt`,`updatedAt`)  \n" +
                "  \n" +
                "	SELECT ca.`customerId`,ca.`street1`,ca.`street2`,ca.`city`,ca.`state`,  \n" +
                "			ca.`countryID`,ca.`postcode`,'P',ca.`isDefault`, ca.`street3`,  \n" +
                "			ca.`companyName`, ca.`systemGenerated`, ca.`bankRemitToName`, ca.`latitude`, ca.`longitude`,  \n" +
                "			ca.`additionalComment`, ca.`defaultContactPersonID`, ca.`isActive`,  \n" +
                "			1, 1, 1, 1, fun_DatetimetoUTCDateTime(), fun_DatetimetoUTCDateTime()  \n" +
                "	FROM customer_addresses ca  \n" +
                "		JOIN mfgcodemst mcm ON mcm.id = ca.customerId  \n" +
                "	WHERE ca.addressType = 'B'  \n" +
                "	AND mcm.isCompany = 1  \n" +
                "	AND ca.isDeleted = 0 AND mcm.isDeleted = 0  \n" +
                "	;  \n" +
                /* **************************** New Script -> 26-02-2022  *********************************** */
                "INSERT INTO `page_detail`  \n" +
                "		 (`pageName`, `RO`, `RW`, `pageRoute`, `pageURL`, `menuName`, `parentPageID`, `hasChild`,  `isActive`,  \n" +
                "				  `createdAt`, `updatedAt`, `createdBy`, `updatedBy` ,`isDeleted`, `isDisplay`, `displayMenuName`,`iconClass` ,  \n" +
                "				  `createByRoleId`, `updateByRoleId`)  \n" +
                "	 VALUES ('Company Profile Contacts', 0, 0, 'app.companyprofile.contacts', '/companyprofile/contacts',  \n" +
                "			 'Company Profile Contacts', (SELECT a.pageID FROM page_detail a WHERE a.pageName='Company Profile'),  0, 1,  \n" +
                "			   fun_DatetimetoUTCDateTime(), fun_DatetimetoUTCDateTime(), '1' , '1' , 0, 1, 'Company Profile',NULL,  \n" +
                "			   1, 1) ;  \n" +
                /* **************************** Add Script Version -> 26-02-2022 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1343,'1.00','V1',' User Story 39490 - default company billing address entry as remit to and remit to route - KS '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1343:
            allDbChangesArray.push(
                /* **************************** New Script -> 26-02-2022  *********************************** */
                "DROP FUNCTION IF EXISTS `fun_getDefaultCompanyRemitAddrByID` ;  \n" +
                "CREATE FUNCTION `fun_getDefaultCompanyRemitAddrByID`(  \n" +
                "	pAddressID INT  \n" +
                ") RETURNS LONGTEXT CHARSET utf8mb4  \n" +
                "BEGIN  \n" +
                "	DECLARE pAddress VARCHAR(2000);  \n" +
                "  \n" +
                "	SELECT CONCAT(UPPER(ca.companyName),fun_getNewLineCharacter(),ca.street1,' ', IFNULL(ca.street2,''),' ',IFNULL(ca.street3,''),fun_getNewLineCharacter(),ca.city,', ',ca.state,' ',ca.postcode,', ',c.countryName) INTO pAddress  \n" +
                "	FROM customer_addresses ca  \n" +
                "		LEFT JOIN countrymst c ON c.countryID=ca.countryID  \n" +
                "	WHERE ca.id = pAddressID ;  \n" +
                "  \n" +
                "	RETURN pAddress;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** New Script -> 26-02-2022  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetCompanyReportDetails` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetCompanyReportDetails`()  \n" +
                "BEGIN  \n" +
                "	DECLARE vContPersonNameFormat INT;  \n" +
                "	SELECT fun_getContPersonNameDisplayFormat() INTO vContPersonNameFormat;  \n" +
                "  \n" +
                "	# Company detail for Report  \n" +
                "	SELECT CONCAT( IF(ci.legalName = '' OR ci.legalName IS NULL,'' ,CONCAT(ci.legalName, ' d/b/a,<br/>')),IFNULL(ci.name, ''),'<br/>',  \n" +
                "    IFNULL(ci.street1, ''),'<br/>',IFNULL(ci.city, ''),', ',IFNULL(ci.state, ''),' ',IFNULL(ci.postalCode, ''), ', ',  \n" +
                "    IFNULL(c.countryName,''),'<br/>','Email: &nbsp;',IFNULL(ci.registeredEmail,''),'<br/>','Phone: ', IFNULL(ci.contactNumber,''),  \n" +
                "    '<br/>','Fax: &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;',IFNULL(ci.faxNumber,''))AS address,  \n" +
                "		ci.registeredEmail AS companyEmail, ci.registeredEmail AS email,   ci.faxNumber,ci.contactNumber AS contact,ci.phoneExt,ci.contactNumber AS phoneNo, ci.name AS  mfgName,'' AS headerName,'accounting@flextronassembly.com' AS billingEmail,  \n" +
                "		ci.ein, fun_getDefaultCompanyRemitAddrByID(ca.id) AS remittanceAddress,  \n" +
                "        fun_GetFormattedContactPersonName(cp.firstName, cp.middleName, cp.lastName, vContPersonNameFormat) companyContactName  \n" +
                "	FROM company_info ci  \n" +
                "		LEFT JOIN countrymst c ON ci.countryID=c.countryID AND c.isDeleted = 0  \n" +
                "		LEFT JOIN contactperson cp ON ci.mfgCodeId = cp.refTransID AND cp.refTableName = 'mfgcodemst' AND cp.isDefault = 1 AND cp.isActive = 1 AND cp.isDeleted = 0  \n" +
                "		LEFT JOIN customer_addresses ca ON ca.customerId = ci.mfgCodeId AND ca.addressType = 'P' AND ca.isDefault = 1 AND ca.isDeleted = 0  \n" +
                "	WHERE ci.isDeleted=0;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 26-02-2022 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1344,'1.00','V1',' User Story 39490 - SPs function - KS '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1344:
            allDbChangesArray.push(
                /* **************************** New Script -> 28-02-2022 *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_getCustomerSupplierGeographicalLocationReportDetails`;  \n" +
                "CREATE PROCEDURE `Sproc_getCustomerSupplierGeographicalLocationReportDetails`(  \n" +
                "	IN pEntityType varchar(5),  \n" +
                "	IN pAddressType varchar(5),  \n" +
                "	IN pisDefaultAddress tinyint  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE vWhereClause VARCHAR(16383);  \n" +
                "    SET vWhereClause = ' 1=1 ';  \n" +
                "	IF(pEntityType IS NOT NULL) THEN  \n" +
                "		IF pEntityType = 'CUST' THEN  \n" +
                "			SET vWhereClause = CONCAT(vWhereClause, \" AND cu.mfgType = 'MFG' AND cu.isCustOrDisty = 1 \");  \n" +
                "		ELSEIF pEntityType = 'DIST' THEN  \n" +
                "			SET vWhereClause = CONCAT(vWhereClause, \" AND cu.mfgType = 'DIST' \");  \n" +
                "		ELSE  \n" +
                "			SET vWhereClause = CONCAT(vWhereClause, \" AND 1=1 \");  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pAddressType IS NOT NULL) THEN  \n" +
                "		IF pAddressType = 'B' THEN  \n" +
                "			SET vWhereClause = CONCAT(vWhereClause, \" AND cua.addressType = 'B' \");  \n" +
                "		ELSEIF pAddressType = 'S' THEN  \n" +
                "			SET vWhereClause = CONCAT(vWhereClause, \" AND cua.addressType = 'S' \");  \n" +
                "		ELSEIF pAddressType = 'I' THEN  \n" +
                "			SET vWhereClause = CONCAT(vWhereClause, \" AND cua.addressType = 'I' \");  \n" +
                "		ELSEIF pAddressType = 'P' THEN  \n" +
                "			SET vWhereClause = CONCAT(vWhereClause, \" AND cua.addressType = 'P' \");  \n" +
                "		ELSEIF pAddressType = 'R' THEN  \n" +
                "			SET vWhereClause = CONCAT(vWhereClause, \" AND cua.addressType = 'R' \");  \n" +
                "		ELSEIF pAddressType = 'W' THEN  \n" +
                "			SET vWhereClause = CONCAT(vWhereClause, \" AND cua.addressType = 'W' \");  \n" +
                "		ELSEIF pAddressType = 'BU' THEN  \n" +
                "			SET vWhereClause = CONCAT(vWhereClause, \" AND cua.addressType = 'BU' \");  \n" +
                "		ELSE  \n" +
                "			SET vWhereClause = CONCAT(vWhereClause, \" AND 1=1 \");  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF pisDefaultAddress = 1 THEN  \n" +
                "		SET vWhereClause = CONCAT(vWhereClause, ' AND cua.isDefault = 1 ');  \n" +
                "    ELSE  \n" +
                "		SET vWhereClause = CONCAT(vWhereClause, ' AND 1=1 ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	SET @tempQuery = CONCAT(\"SELECT DISTINCT CONCAT(IF(cu.legalName = '' OR cu.legalName is null,'' ,CONCAT(cu.legalName, ' d/b/a, ')), IFNULL(cu.mfgName, ''), ' Address: ',IFNULL(cua.street1, ''), ' ',IFNULL(cua.city, ''),', ',IFNULL(cua.state, ''),' ',IFNULL(cua.postcode, ''), ',', IFNULL(c.countryName,''), ' ' ,IFNULL(CONCAT('Email:',fun_getPrimaryEmailFromJsonList(cp.email)),''), IFNULL(CONCAT(' Phone: ',fun_getPrimaryPhoneFromJsonList(cp.phoneNumber)),''),IFNULL(CONCAT(' Ext.',fun_getPrimaryPhExtensionFromJsonList(cp.phoneNumber)),''))AS Address, CONCAT(cua.Latitude ,' ',  cua.longitude) AS Location , cu.mfgCode as Code, cu.mfgName as Name, (case WHEN cu.mfgType = 'MFG' then 'Customer' WHEN cu.mfgType = 'DIST' then 'Supplier' else '' END) as Type, (case WHEN cua.isDefault = 1 then 'Yes' else 'No' END) as DefaultAddress,  \n" +
                "    (case WHEN cua.addressType = 'B' then 'Billing Address' WHEN cua.addressType = 'S' then 'Shipping Address'  WHEN cua.addressType = 'I' then 'Mark For (Intermediate Ship To) Address'  \n" +
                "		WHEN cua.addressType = 'P' then 'Remit To Address' WHEN cua.addressType = 'R' then 'RMA Shipping Address'  \n" +
                "        WHEN cua.addressType = 'W' then 'Wire Transfer Address' WHEN cua.addressType = 'BU' then 'Business Address' else '' END) as AddressType  \n" +
                "        FROM customer_addresses cua  \n" +
                "				Left Join contactperson cp on cua.defaultContactPersonID = cp.personId  \n" +
                "				JOIN mfgcodemst cu ON cu.id = cua.customerId  \n" +
                "				LEFT JOIN countrymst c ON cua.countryID=c.countryID  \n" +
                "				WHERE (cua.latitude is not null And cua.longitude is not null) and\", vWhereClause ,\";\");  \n" +
                "  \n" +
                "	PREPARE query1 FROM @tempQuery;  \n" +
                "			EXECUTE query1;  \n" +
                "			DEALLOCATE PREPARE query1;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 28-02-2022 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1345,'1.00','V1',' US 39489 : Task 41706: Geographical Address View Report Changes. - Bhavik '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1345:
            allDbChangesArray.push(
                /* **************************** New Script -> 28/02/2022  *********************************** */
                "DROP procedure IF EXISTS `Sproc_getCPNDetails`;  \n" +
                "CREATE PROCEDURE `Sproc_getCPNDetails`(  \n" +
                "	 IN pcustomerID INT,  \n" +
                "     IN pComponentID INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE vMfgCodeFormat INT;  \n" +
                "  \n" +
                "	SELECT fun_getMFGCodeNameFormat() INTO vMfgCodeFormat;  \n" +
                "  \n" +
                "		DROP TEMPORARY TABLE IF EXISTS tempComponentCPNPart;  \n" +
                "		CREATE TEMPORARY TABLE tempComponentCPNPart(refCPNPartID INT);  \n" +
                "  \n" +
                "    IF(pComponentId IS NOT NULL) THEN  \n" +
                "  \n" +
                "		INSERT INTO tempComponentCPNPart  \n" +
                "        SELECT refCPNPartID FROM component_cust_alias_rev_pn WHERE isDeleted = 0 AND refComponentID = pComponentId;  \n" +
                "  \n" +
                "		set @temp_Sproc_GetComponentCustAliasRev = CONCAT(@temp_Sproc_GetComponentCustAliasRev,' AND co.id IN (select refCPNPartID  from tempComponentCPNPart)');  \n" +
                "    END IF;  \n" +
                "  \n" +
                "    SELECT  co.id,  \n" +
                "    co.PIDCode,  \n" +
                "	co.custAssyPN,  \n" +
                "	co.rev,  \n" +
                "    co.liveVersion,  \n" +
                "    co.mfgPNDescription as `CPNDescription`,  \n" +
                "    (case when co.isCPN = 1 then 'Yes' else 'No' end) as `CPN`, pc.categoryName as `PartType`,  \n" +
                "	m.mfgCode,  \n" +
                "    fun_GetFormattedMfgCode(m.mfgCode, m.mfgName, vMfgCodeFormat) as customer,  \n" +
                "	co.mfgPN, co.mfgPNDescription as `Description`  \n" +
                "	FROM component co  \n" +
                "    Inner Join rfq_partcategory pc on pc.id = co.partType  \n" +
                "    JOIN mfgcodemst m ON co.mfgcodeID = m.id  \n" +
                "	WHERE co.mfgCodeID = IFNULL(pcustomerID,co.mfgCodeID)  and (co.isCPN = 1 or co.isCustom = 1 or co.category = 3 )  \n" +
                "    AND (CASE WHEN(pComponentId is NULL) THEN 1 = 1 ELSE co.id IN (select refCPNPartID  from tempComponentCPNPart) END)  \n" +
                "	AND co.isdeleted  = 0;  \n" +
                "    END;  \n" +

                "DROP procedure IF EXISTS `Sproc_GetComponentMFGPIDPRODPNAliasSearch`;  \n" +
                "CREATE PROCEDURE `Sproc_GetComponentMFGPIDPRODPNAliasSearch`(  \n" +
                "IN pSearch VARCHAR(500),  \n" +
                "IN pMfgType VARCHAR(50),  \n" +
                "IN pIsAssy TINYINT,  \n" +
                "IN pId INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "    SET @temp_Sproc_RetrieveComp  = 'SELECT `com`.`id`,  \n" +
                "        CONCAT(''('',`mfgCodemst`.`mfgCode`, '') '',`com`.`mfgPN`, \" | \", `com`.`PIDCode`,  \n" +
                "         (CASE WHEN `com`.`productionPN` is null THEN \"\" else CONCAT(\" | \",`com`.`productionPN`) END)) displayMfgPN,  \n" +
                "		`com`.`mfgPN`,  \n" +
                "		`com`.`mfgPNDescription`,  \n" +
                "        `com`.`mfgType`,  \n" +
                "        `com`.`PIDCode`  \n" +
                "	FROM `component` AS `com`  \n" +
                "	INNER JOIN `mfgCodemst` AS `mfgCodemst` ON `com`.`mfgcodeID` = `mfgCodemst`.`id`  \n" +
                "    where com.isDeleted = 0';  \n" +
                "  \n" +
                "    IF(pId is not null) THEN  \n" +
                "		set @temp_Sproc_RetrieveComp = concat(@temp_Sproc_RetrieveComp, ' and `com`.`id` = ', pId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF(pMfgType is not null) THEN  \n" +
                "		set @temp_Sproc_RetrieveComp = concat(@temp_Sproc_RetrieveComp, ' and `com`.`mfgType` = \"', pMfgType , '\"');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF(pIsAssy = 1) THEN  \n" +
                "		set @temp_Sproc_RetrieveComp = concat(@temp_Sproc_RetrieveComp, ' and `com`.`category` = 3');  \n" +
                "	END IF;  \n" +
                "    set @temp_Sproc_RetrieveComp = concat('select * from (',@temp_Sproc_RetrieveComp, ' ) as a');  \n" +
                "  \n" +
                "    IF(pSearch is not null) THEN  \n" +
                "		set @temp_Sproc_RetrieveComp = concat(@temp_Sproc_RetrieveComp, ' where `a`.`mfgPN` REGEXP \"', pSearch ,'\" or EXISTS',  \n" +
                "													'(SELECT 1 FROM component_otherpn opn WHERE opn.refcomponentid = `a`.`id` AND  \n" +
                "                                                    opn.name REGEXP \"', pSearch , '\"  \n" +
                "                                                    and opn.isDeleted = 0)  \n" +
                "											');  \n" +
                "	END IF;  \n" +
                "   SET @SQLStatement1 = CONCAT(@temp_Sproc_RetrieveComp, ' ORDER BY  mfgPN desc' );  \n" +
                "	PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version ->  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1346,'1.00','V1',' User Story 39702: & Bug - 41624 - SHUBHAM '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1346:
            allDbChangesArray.push(
                /* **************************** New Script -> 28/02/2022  *********************************** */
                "update page_detail set pageRoute = 'app.component.managecomponent.polist',pageURL = '/polist/:coid',  \n" +
                " pageName='Manage Parts Purchase Order List',menuName='Manage Manufacturer Parts Purchase Order List' where pageRoute = 'app.component.managecomponent.alternategroup';  \n" +
                "  \n" +
                "update page_detail set pageRoute = 'app.component.managedistcomponent.polist',pageURL = '/polist/:coid',  \n" +
                " pageName='Manage Supplier Parts Purchase Order List',menuName='Manage Supplier Parts Purchase Order List' where pageRoute = 'app.component.managedistcomponent.alternategroup';  \n" +
                /* **************************** Add Script Version ->  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1347,'1.00','V1',' User Story 39702: - SHUBHAM '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1347:
            allDbChangesArray.push(
                /* **************************** New Script -> 28/02/2022  *********************************** */
                "DROP VIEW IF EXISTS `vu_purchaseorder_shipping_release` ;  \n" +
                "CREATE VIEW `vu_purchaseorder_shipping_release` AS  \n" +
                "    SELECT  \n" +
                "        `pold`.`refPurchaseOrderDetID` AS `refPurchaseOrderDetID`,  \n" +
                "        `pod`.`refPurchaseOrderID` AS `refPurchaseOrderID`,  \n" +
                "        SUM(`pold`.`qty`) AS `totalQty`,  \n" +
                "        SUM(IFNULL(`pold`.`receivedQty`, 0)) AS `totalReceivedQty`,  \n" +
                "        (CASE  \n" +
                "            WHEN ((SUM(`pold`.`qty`) - SUM(IFNULL(`pold`.`receivedQty`, 0))) > 0) THEN (SUM(`pold`.`qty`) - SUM(IFNULL(`pold`.`receivedQty`, 0)))  \n" +
                "            ELSE 0  \n" +
                "        END) AS `totalPendingQty`,  \n" +
                "        MAX((CASE  \n" +
                "            WHEN (IFNULL(`pold`.`poLineWorkingStatus`, 'P') = 'P') THEN 'P'  \n" +
                "            ELSE 'C'  \n" +
                "        END)) AS `poLineWorkingStatus`,  \n" +
                "        MAX((CASE  \n" +
                "            WHEN (IFNULL(`pold`.`poLineWorkingStatus`, 'P') = 'P') THEN 'Open'  \n" +
                "            ELSE 'Closed'  \n" +
                "        END)) AS `poLineWorkingDisplayStatus`,  \n" +
                "        MAX((CASE  \n" +
                "            WHEN (`pold`.`poLineCompleteType` = 'M') THEN 'Manually Completed'  \n" +
                "            WHEN (`pold`.`poLineCompleteType` = 'A') THEN 'Auto Completed'  \n" +
                "            ELSE 'Open'  \n" +
                "        END)) AS `poLineCompleteTypeDisplayValue`,  \n" +
                "        MAX((CASE  \n" +
                "            WHEN (`pold`.`poLineCompleteType` = 'M') THEN 'M'  \n" +
                "            WHEN (`pold`.`poLineCompleteType` = 'A') THEN 'A'  \n" +
                "            ELSE 'P'  \n" +
                "        END)) AS `poLineCompleteType`,  \n" +
                "        SUM((CASE  \n" +
                "            WHEN (IFNULL(`pold`.`poLineWorkingStatus`, 'P') = 'P') THEN 1  \n" +
                "            ELSE 0  \n" +
                "        END)) AS `pendingLineCount`,  \n" +
                "        SUM((CASE  \n" +
                "            WHEN (IFNULL(`pold`.`poLineWorkingStatus`, 'P') = 'C') THEN 1  \n" +
                "            ELSE 0  \n" +
                "        END)) AS `receivedLineCount`,  \n" +
                "        (CASE  \n" +
                "            WHEN  \n" +
                "                (MAX((CASE  \n" +
                "                    WHEN (`pold`.`poLineCompleteType` = 'M') THEN 'Manually Completed'  \n" +
                "                    WHEN (`pold`.`poLineCompleteType` = 'A') THEN 'Auto Completed'  \n" +
                "                    ELSE 'Open'  \n" +
                "                END)) = 'Manually Completed')  \n" +
                "            THEN  \n" +
                "                GROUP_CONCAT(CONCAT('Release#:',  \n" +
                "                            ' ',  \n" +
                "                            `pold`.`releaseNumber`,  \n" +
                "                            '		',  \n" +
                "                            'PO Release Completion Type:',  \n" +
                "                            ' ',  \n" +
                "                            CONVERT( (CASE  \n" +
                "                                WHEN (`pold`.`poLineCompleteType` = 'M') THEN 'Manually Completed'  \n" +
                "                                WHEN (`pold`.`poLineCompleteType` = 'A') THEN 'Auto Completed'  \n" +
                "                                ELSE 'Open'  \n" +
                "                            END) USING UTF8MB4),  \n" +
                "                            '<br />',  \n" +
                "                            '				PO Release Completion Reason: ',  \n" +
                "                            IFNULL(`pold`.`poLineCompleteReason`, ''))  \n" +
                "                    SEPARATOR '<br />')  \n" +
                "            ELSE ''  \n" +
                "        END) AS `poLineCompleteReason`  \n" +
                "    FROM  \n" +
                "        (`purchase_order_line_release_det` `pold`  \n" +
                "        JOIN `purchase_order_det` `pod` ON ((`pod`.`id` = `pold`.`refPurchaseOrderDetID`)))  \n" +
                "    WHERE  \n" +
                "        (`pold`.`isDeleted` = 0)  \n" +
                "    GROUP BY `pold`.`refPurchaseOrderDetID` , `pod`.`refPurchaseOrderID`;  \n" +
                /* **************************** Add Script Version -> 28/02/2022 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1348,'1.00','V1',' Bug 41714: PO Line Completion Reason pop-up UI is showing broken in details tab of the purchase order listing page - Jay '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1348:
            allDbChangesArray.push(
                /* **************************** New Script -> 28/02/2022  *********************************** */
                "UPDATE `feature_mst` SET `featureName` = 'Allow to Add/Update/Delete Part Packaging Alias' WHERE `featureName` = 'Allow to Add Packaging Alias Part';  \n" +
                /* **************************** Add Script Version ->  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName\`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1349,'1.00','V1',' US 39702 - SHUBHAM '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1349:
            allDbChangesArray.push(
                /* **************************** New Script -> 01/03/2022  *********************************** */
                "DROP procedure IF EXISTS `Sproc_GetComponentMFGPIDPRODPNAliasSearch`;  \n" +
                "CREATE PROCEDURE `Sproc_GetComponentMFGPIDPRODPNAliasSearch`(  \n" +
                "IN pSearch VARCHAR(500),  \n" +
                "IN pMfgType VARCHAR(50),  \n" +
                "IN pIsAssy TINYINT,  \n" +
                "IN pId INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "    SET @temp_Sproc_RetrieveComp  = 'SELECT `com`.`id`,  \n" +
                "        CONCAT(''('',`mfgCodemst`.`mfgCode`, '') '',`com`.`mfgPN`, \" | \", `com`.`PIDCode`,  \n" +
                "         (CASE WHEN `com`.`productionPN` is null THEN \"\" else CONCAT(\" | \",`com`.`productionPN`) END)) displayMfgPN,  \n" +
                "		`com`.`mfgPN`,  \n" +
                "		`com`.`mfgPNDescription`,  \n" +
                "        `com`.`mfgType`,  \n" +
                "        `com`.`PIDCode`  \n" +
                "	FROM `component` AS `com`  \n" +
                "	INNER JOIN `mfgCodemst` AS `mfgCodemst` ON `com`.`mfgcodeID` = `mfgCodemst`.`id`  \n" +
                "    where com.isDeleted = 0';  \n" +
                "  \n" +
                "    IF(pId is not null) THEN  \n" +
                "		set @temp_Sproc_RetrieveComp = concat(@temp_Sproc_RetrieveComp, ' and `com`.`id` = ', pId);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF(pMfgType is not null) THEN  \n" +
                "		set @temp_Sproc_RetrieveComp = concat(@temp_Sproc_RetrieveComp, ' and `com`.`mfgType` = \"', pMfgType , '\"');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF(pIsAssy = 1) THEN  \n" +
                "		set @temp_Sproc_RetrieveComp = concat(@temp_Sproc_RetrieveComp, ' and `com`.`category` = 3');  \n" +
                "	END IF;  \n" +
                "    set @temp_Sproc_RetrieveComp = concat('select * from (',@temp_Sproc_RetrieveComp, ' ) as a');  \n" +
                "  \n" +
                "    IF(pSearch is not null) THEN  \n" +
                "		set @temp_Sproc_RetrieveComp = concat(@temp_Sproc_RetrieveComp, ' where `a`.`displayMfgPN` REGEXP ''', pSearch ,''' or EXISTS',  \n" +
                "													'(SELECT 1 FROM component_otherpn opn WHERE opn.refcomponentid = `a`.`id` AND  \n" +
                "                                                    opn.name REGEXP ''', pSearch , '''  \n" +
                "                                                    and opn.isDeleted = 0)  \n" +
                "											');  \n" +
                "	END IF;  \n" +
                "   SET @SQLStatement1 = CONCAT(@temp_Sproc_RetrieveComp, ' ORDER BY  mfgPN desc' );  \n" +
                "	PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version ->  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName\`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1350,'1.00','V1','Bug 41738: Not able to create duplicate custom parts from Create Duplicate Part Pop-up - SHUBHAM '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1350:
            allDbChangesArray.push(
                /* **************************** New Script -> 01/03/2022  *********************************** */
                "DROP procedure IF EXISTS `Sproc_GetComponentMFGAliasPartsSearch`;  \n" +
                "CREATE PROCEDURE `Sproc_GetComponentMFGAliasPartsSearch`(  \n" +
                "	IN pGoodPart VARCHAR(100),  \n" +
                "	IN pSearch VARCHAR(500),  \n" +
                "	IN pId INT,  \n" +
                "	IN pMfgType VARCHAR(50),  \n" +
                "	IN pMfgCodeId INT,  \n" +
                "	IN pMountingType VARCHAR(50),  \n" +
                "	IN pMountingTypeId INT,  \n" +
                "	IN pCategoryID INT,  \n" +
                "	IN pRohsMainCategoryID INT,  \n" +
                "	IN pIsRohsMainCategoryInvertMatch TINYINT,  \n" +
                "	IN pstrictCustomPart TINYINT,  \n" +
                "    IN pAlternatePartFilter TINYINT,  \n" +
                "    IN pPackagingAliasFilter TINYINT,  \n" +
                "    IN pRoHReplacementPartFilter TINYINT,  \n" +
                "    IN pDriveToolsPartFilter TINYINT,  \n" +
                "    IN pProcessMaterialPartFilter TINYINT,  \n" +
                "    IN pRequireMatingPartFilter TINYINT,  \n" +
                "    IN pPickupPadPartFilter TINYINT,  \n" +
                "    IN pRequireFunctionalPartFilter TINYINT,  \n" +
                "	IN pCurrentPartId INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE vRohsMainCategoryID INT;  \n" +
                "	DECLARE vPackaginggroupID INT;  \n" +
                "	SET vRohsMainCategoryID = pRohsMainCategoryID;  \n" +
                "	/*===>this logic is added to compare invert rohs category*/  \n" +
                "	IF pIsRohsMainCategoryInvertMatch = FALSE  THEN  \n" +
                "		IF pRohsMainCategoryID = -1 THEN  \n" +
                "			SET vRohsMainCategoryID = -2;  \n" +
                "		ELSEIF pRohsMainCategoryID = -2 THEN  \n" +
                "			SET vRohsMainCategoryID = -1;  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "	/*<===this logic is added to compare invert rohs category*/  \n" +
                "	IF(pCurrentPartId is not null)  \n" +
                "	THEN  \n" +
                "		select packaginggroupID INTO vPackaginggroupID from component where id = pCurrentPartId;  \n" +
                "	END IF;  \n" +
                "	select *  \n" +
                "		from  \n" +
                "		(  \n" +
                "			select 	c.id, 						CONCAT('(', m.mfgCode, ') ', c.mfgPN) mfgPN,					c.mfgPN orgMfgPN,			c.packaginggroupID,		c.PIDCode,  	c.partStatus,	c.partPackageID,  \n" +
                "					c.isGoodPart,				c.RoHSStatusID,						c.mfgcodeID,				c.mfgType,  				c.partType,				c.isCustom,  	c.uom,		c.uomClassID,  \n" +
                "					c.category,					c.functionalCategoryID,				c.mountingTypeID,			c.connecterTypeID ,			r.rohsIcon,				r.name AS rohsName, c.minOperatingTemp,  \n" +
                "                    c.maxOperatingTemp,			c.temperatureCoefficientValue,		c.temperatureCoefficientUnit,	c.noOfPosition,			c.noOfRows,				c.pitch,		c.pitchMating,		c.length,  \n" +
                "                    c.width,					c.height,							c.tolerance,					c.voltage,				c.value,				powerRating,	c.weight,		c.feature,  \n" +
                "                    c.color,					c.packageQty,						c.umidSPQ,						c.restrictPackagingUsePermanently,	c.restrictPackagingUseWithpermission,  \n" +
                "                    c.restrictUsePermanently,	c.restrictUSEwithpermission,		c.partPackage,				c.isNoClean,				c.isWaterSoluble,		c.isFluxNotApplicable,	c.mfgPNDescription,  \n" +
                "                    c.detailDescription,		c.isHazmatMaterial,					c.isReceiveBulkItem,		c.isEpoxyMount  \n" +
                "  \n" +
                "			from component c  \n" +
                "			INNER JOIN	mfgCodemst m ON m.id = c.mfgcodeID  \n" +
                "            JOIN 	rfq_mountingtypemst AS mt ON mt.id = c.mountingTypeID AND  mt.name = IFNULL(pMountingType, mt.name)  \n" +
                "			INNER JOIN rfq_rohsmst r ON r.id = c.RoHSStatusID AND r.isDeleted = 0  \n" +
                "			WHERE 	c.isdeleted = 0  \n" +
                "			AND 	c.id = IFNULL(pId, c.id)  \n" +
                "            AND 	c.mfgType = IFNULL(pMfgType, m.mfgType)  \n" +
                "            AND     (CASE WHEN pCurrentPartId is not null THEN c.id != pCurrentPartId  ELSE 1 = 1 END)  \n" +
                "		 	AND 	c.isGoodPart = IFNULL(pGoodPart, c.isGoodPart)  \n" +
                "			AND 	c.mountingTypeID = IFNULL(pMountingTypeId, c.mountingTypeID)  \n" +
                "			AND 	c.mfgcodeID = IFNULL(pMfgCodeId, c.mfgcodeID)  \n" +
                "			AND 	c.category = IFNULL(pCategoryID, c.category)  \n" +
                "			AND 	(CASE WHEN vRohsMainCategoryID is not null THEN r.refMainCategoryID = vRohsMainCategoryID ELSE 1 = 1 END)  \n" +
                "			AND 	(CASE WHEN pstrictCustomPart = 0 THEN c.iscustom = 0 ELSE 1 = 1 END)  \n" +
                "            and 	(CASE WHEN pPackagingAliasFilter = 1 THEN  (not exists (select 1 from component_packagingalias cp where cp.componentID = c.id and cp.aliasgroupID = vPackaginggroupID and cp.isDeleted = 0)) ELSE 1= 1 END)  \n" +
                "			and 	(CASE WHEN pAlternatePartFilter = 1 THEN  (not exists (select 1 from component_alternatepn ca where ca.type = 1 and ca.componentID = c.id and ca.refComponentID = pCurrentPartId and ca.isDeleted = 0)) ELSE 1= 1 END)  \n" +
                "			and 	(CASE WHEN pPickupPadPartFilter = 1 THEN  (not exists (select 1 from component_alternatepn ca where ca.type = 2 and ca.componentID = c.id and ca.refComponentID = pCurrentPartId and ca.isDeleted = 0)) ELSE 1= 1 END)  \n" +
                "			and 	(CASE WHEN pRequireFunctionalPartFilter = 1 THEN  (not exists (select 1 from component_alternatepn ca where ca.type = 4 and ca.componentID = c.id and ca.refComponentID = pCurrentPartId and ca.isDeleted = 0)) ELSE 1= 1 END)  \n" +
                "			and 	(CASE WHEN pProcessMaterialPartFilter = 1 THEN  (not exists (select 1 from component_alternatepn ca where ca.type = 5 and ca.componentID = c.id and ca.refComponentID = pCurrentPartId and ca.isDeleted = 0)) ELSE 1= 1 END)  \n" +
                "			and 	(CASE WHEN pRoHReplacementPartFilter = 1 THEN  (not exists (select 1 from component_alternatepn ca where ca.type = 6 and ca.componentID = c.id and ca.refComponentID = pCurrentPartId and ca.isDeleted = 0)) ELSE 1= 1 END)  \n" +
                "			and 	(CASE WHEN pDriveToolsPartFilter = 1 THEN  (not exists (select 1 from component_drivetools cd where cd.isDeleted = 0 and cd.componentID = c.id and cd.refComponentID = pCurrentPartId )) ELSE 1= 1 END)  \n" +
                "            and ((pSearch IS NULL AND 1 = 1) OR  \n" +
                "				(pSearch IS NOT NULL AND  \n" +
                "					(  \n" +
                "						c.mfgPN LIKE CONCAT('%', pSearch, '%') OR  \n" +
                "						EXISTS( SELECT  1  \n" +
                "								FROM 	component_otherpn opn  \n" +
                "								WHERE 	opn.refcomponentid = c.id  \n" +
                "								AND 	opn.name LIKE CONCAT('%', pSearch, '%'))  \n" +
                "					)  \n" +
                "				) )  \n" +
                "		) AS a  \n" +
                "		/*WHERE (  \n" +
                "				(pSearch IS NULL AND 1 = 1) OR  \n" +
                "				(pSearch IS NOT NULL AND  \n" +
                "					(  \n" +
                "						a.mfgPN LIKE CONCAT('%', pSearch, '%') OR  \n" +
                "						EXISTS( SELECT  1  \n" +
                "								FROM 	component_otherpn opn  \n" +
                "								WHERE 	opn.refcomponentid = a.id  \n" +
                "								AND 	opn.name LIKE CONCAT('%', pSearch, '%'))  \n" +
                "					)  \n" +
                "				)  \n" +
                "			)  */  \n" +
                "		ORDER BY mfgPN;  \n" +
                "END;  \n" +

                "DROP procedure IF EXISTS `Sproc_GetKitAllocationForElastic`;  \n" +
                "CREATE PROCEDURE `Sproc_GetKitAllocationForElastic`(  \n" +
                "    In pFromdate date,  \n" +
                "    In pTodate date,  \n" +
                "    IN pRequiredCount tinyint(1)  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "    DECLARE pWhereClause VARCHAR(1000);  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "    SET pWhereClause = '1 = 1';  \n" +
                "    IF(pRequiredCount)  \n" +
                "	THEN  \n" +
                "		SET @temp_Sproc_GetKitAllocationForElastic = CONCAT(\"  \n" +
                "		SELECT  \n" +
                "			 count(1) totalCount\");  \n" +
                "		SET pWhereClause = CONCAT('sd.isDeleted = 0');  \n" +
                "	ELSE  \n" +
                "		SET @temp_Sproc_GetKitAllocationForElastic = CONCAT(\"  \n" +
                "		SELECT  \n" +
                "			  k.id  \n" +
                "				,k.refSalesOrderDetID  \n" +
                "                ,sd.refSalesOrderID  \n" +
                "				,s.poNumber  \n" +
                "				,s.salesOrderNumber  \n" +
                "				,k.assyId  \n" +
                "                ,assy.mfgcodeID  \n" +
                "                ,assy_mcm.mfgType assyMfgType  \n" +
                "				,assy.PIDCode AssyPIdCode  \n" +
                "				,assy.mfgPN assyMfgPN  \n" +
                "				,k.partId  \n" +
                "                ,c_mcm.mfgType partMfgType  \n" +
                "				,c.PIDCode partCode  \n" +
                "				,assy.mfgPN partMfgPn  \n" +
                "				,c.assyCode part  \n" +
                "				,k.UID  \n" +
                "				,k.refUIDId  \n" +
                "                ,k.allocatedQty  \n" +
                "                ,k.consumeQty  \n" +
                "                ,k.scrapExpiredQty  \n" +
                "                ,CASE WHEN k.STATUS = 'A' THEN 'Allocated'  \n" +
                "					WHEN k.STATUS = 'R' THEN 'Return'  \n" +
                "					WHEN k.STATUS = 'D' THEN 'Deallocated'  \n" +
                "					ELSE 'Consumed' END KitStatus  \n" +
                "                ,k.returnQty  \n" +
                "                ,sd.isDeleted  \n" +
                "				,k.createdAt  \n" +
                "				,k.updatedAt  \n" +
                "                ,sd.kitNumber\");  \n" +
                "			IF((SELECT COUNT(1) from tempKitAllocation) > 0) THEN  \n" +
                "				SET pWhereClause = CONCAT(\"k.id IN (select pId from tempKitAllocation)\");  \n" +
                "			END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	SET @temp_Sproc_GetKitAllocationForElastic = CONCAT(@temp_Sproc_GetKitAllocationForElastic, \"  \n" +
                "			from kit_allocation k  \n" +
                "			inner join salesorderdet sd on k.refSalesOrderDetID = sd.id and sd.partCategory=3  \n" +
                "			left JOIN salesordermst s ON sd.refSalesOrderID = s.id  \n" +
                "			left join component assy on k.assyId = assy.Id  \n" +
                "			left join component c on k.partId = c.Id  \n" +
                "            left join mfgcodemst assy_mcm on assy.mfgcodeId = assy_mcm.id  \n" +
                "            left join mfgcodemst c_mcm on c.mfgcodeId = c_mcm.id  \n" +
                "            where  \n" +
                "	\");  \n" +
                "  \n" +
                "    IF (pFromdate IS NOT NULL OR pTodate IS NOT NULL) THEN  \n" +
                "		SET pWhereClause =CONCAT(pWhereClause,\"  AND (((DATE(fun_CovnertDateTimeByTimezoneValue(k.createdAt,'\",v_TimeZone,\"'))  \n" +
                "        between '\",pFromdate,\"' and '\",pTodate,\"')  \n" +
                "            or (DATE(fun_CovnertDateTimeByTimezoneValue(k.updatedAt,'\",v_TimeZone,\"')) between '\",pFromdate,\"' and '\",pTodate,\"'))  \n" +
                "        OR ((DATE(fun_CovnertDateTimeByTimezoneValue(sd.createdAt,'\",v_TimeZone,\"'))  \n" +
                "        between '\",pFromdate,\"' and '\",pTodate,\"')  \n" +
                "            or (DATE(fun_CovnertDateTimeByTimezoneValue(sd.updatedAt,'\",v_TimeZone,\"')) between '\",pFromdate,\"' and '\",pTodate,\"')));\");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	SET @SQLStatement1 = CONCAT(@temp_Sproc_GetKitAllocationForElastic, pWhereClause);  \n" +
                "	PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "    DROP TEMPORARY TABLE IF EXISTS tempKitAllocation;  \n" +
                "END;  \n" +

                "DROP procedure IF EXISTS `Sproc_CreateAssemblyRevision`;  \n" +
                "CREATE PROCEDURE `Sproc_CreateAssemblyRevision`(  \n" +
                "	IN pFromPartID INT,  \n" +
                "    IN pNewEpicorType varchar(50),  \n" +
                "    IN pNewAssemblyType INT,  \n" +
                "    IN pNewMfgcodeID INT,  \n" +
                "    IN pNewCustAssyPN varchar(500),  \n" +
                "    IN pNewPartRev varchar(50),  \n" +
                "    IN pNewMfgPN varchar(100),  \n" +
                "    IN pNewAssyCode varchar(50),  \n" +
                "    IN pNewNickName varchar(50),  \n" +
                "    IN pNewPIDCode varchar(109),  \n" +
                "    IN pIsCPN tinyint,  \n" +
                "    IN pIsCustom tinyInt,  \n" +
                "    IN pUserID Int,  \n" +
                "    IN pUserRoleId Int,  \n" +
                "    IN pIsAttribute tinyint,  \n" +
                "    IN pIsSettings tinyint,  \n" +
                "    IN pIsAdditionalAttibute tinyint,  \n" +
                "    IN pIsPackagingDetail tinyint,  \n" +
                "    IN pIsStandards tinyint,  \n" +
                "    IN pIsRequiredFunctionalType tinyint,  \n" +
                "    IN pIsRequiredMountingType tinyint,  \n" +
                "    IN pIsPackagingAliasPart tinyint,  \n" +
                "    IN pIsOtherPartName tinyint,  \n" +
                "    IN pIsAlternatePart tinyint,  \n" +
                "    IN pIsRoHSReplacementPart tinyint,  \n" +
                "    IN pIsDriveTool tinyint,  \n" +
                "    IN pIsProcessMaterial tinyint,  \n" +
                "    IN pIsRequiredMattingParts tinyint,  \n" +
                "    IN pIsPickupPad tinyint,  \n" +
                "    IN pIsFunctionalTesingTool tinyint,  \n" +
                "    IN pIsFinctionalRestingEquipment tinyint,  \n" +
                "    IN pIsBOM tinyint,  \n" +
                "    IN pIsComments tinyInt,  \n" +
                "    IN pIsCopyImages tinyInt,  \n" +
                "    IN pIsCopyDatasheet tinyInt,  \n" +
                "    IN pIsCopyDocument tinyInt,  \n" +
                "    IN pIsOperationalAttirbutes tinyInt,  \n" +
                "    IN pIsAcceptableShippinCountry tinyInt,  \n" +
                "    IN pIsTrackSNumber tinyInt,  \n" +
                "    IN pMfgPNDescription varchar(2000),  \n" +
                "    IN pDetailDescription varchar(2000),  \n" +
                "    IN pInternalReference varchar(50),  \n" +
                "    IN pRoHSStatusID int,  \n" +
                "    IN pIsFluxNotApplicable tinyInt,  \n" +
                "    IN pIsWaterSoluble tinyInt,  \n" +
                "    IN pIsNoClean tinyInt,  \n" +
                "    IN pSpecialNote varchar(2000),  \n" +
                "    IN pRohsDeviation int,  \n" +
                "    IN pFunctionalTypeID int,  \n" +
                "    IN pMountingTypeID int  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "DECLARE vValidationPassed tinyint;  \n" +
                "DECLARE vFromPartCategory tinyint;  \n" +
                "DECLARE vFromMfgType varchar(5);  \n" +
                "DECLARE vIsCPN tinyint;  \n" +
                "DECLARE vCount INT;  \n" +
                "DECLARE vToPartID INT;  \n" +
                "DECLARE vUserRoleId INT;  \n" +
                "DECLARE vMisMatchFields longtext;  \n" +
                "DECLARE vSerialNumber varchar(20);  \n" +
                "DECLARE vMessage varchar(200);  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempFromComponentDetail;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempToComponentDetail;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempComponentAlternateValidationDetail;  \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE tempFromComponentDetail  \n" +
                "    select * from component where 1 = 2;  \n" +
                "  \n" +
                "	CREATE TEMPORARY TABLE tempToComponentDetail  \n" +
                "    select * from component where 1 = 2;  \n" +
                "  \n" +
                "    CREATE TEMPORARY TABLE tempComponentAlternateValidationDetail  \n" +
                "    select * from component_alternatepn_validations where 1 = 2;  \n" +
                "  \n" +
                "	set vValidationPassed = 1; #1 passed, 0 failed  \n" +
                "  	set vCount = 0;  \n" +
                "    select co.category, m.mfgType, count(co.id), co.isCPN  \n" +
                "      into vFromPartCategory, vFromMfgType, vCount, vIsCPN  \n" +
                "	  from component co  \n" +
                "	  join mfgcodemst m on m.id = co.mfgcodeID  \n" +
                "	 where co.id = pFromPartID and co.isDeleted = 0  \n" +
                "     group by co.category, m.mfgType, co.id, co.isCPN  ;  \n" +
                "  \n" +
                "	if vCount = 0 then  \n" +
                "		set vValidationPassed = 0;  \n" +
                "		select 'PART_NOT_FOUND' as message;  \n" +
                "	end if;  \n" +
                "  \n" +
                "	if vFromMfgType = 'DIST' then /*in case of supplier part must follow mfr part attributes*/  \n" +
                "		set pIsAttribute = 1;  \n" +
                "        set pIsAdditionalAttibute = 1;  \n" +
                "    end if;  \n" +
                "  \n" +
                "	set vCount = 0;  \n" +
                "    if (vFromPartCategory = 3) then # check category  \n" +
                "	   select count(1) into vCount  \n" +
                "		 from component co  \n" +
                "		where co.mfgcodeID = pNewMfgcodeID  \n" +
                "          and co.category = 3  \n" +
                "		  and co.custAssyPN = pNewCustAssyPN  \n" +
                "		  and co.rev = pNewPartRev  \n" +
                "          and co.isDeleted = 0  \n" +
                "		  and co.deletedAt is null  \n" +
                "	  group by co.mfgcodeID,co.category,co.custAssyPN,co.rev;  \n" +
                "		if vCount > 0 then  \n" +
                "			set vValidationPassed = 0;  \n" +
                "            select 'DUPLICATE_REV' as message;  \n" +
                "        end if;  \n" +
                "  \n" +
                "         set vCount = 0;  \n" +
                "		 select count(1) into vCount  \n" +
                "			 from component co  \n" +
                "			where co.nickName != pNewNickName  \n" +
                "              and co.category = 3  \n" +
                "              and co.custAssyPN = pNewCustAssyPN  \n" +
                "              and co.mfgcodeID = pNewMfgcodeID  \n" +
                "			  and co.isDeleted = 0  \n" +
                "			  and co.deletedAt is null  \n" +
                "              group by co.category,co.custAssyPN,co.mfgcodeID;  \n" +
                "		  if vCount > 0 then  \n" +
                "			set vValidationPassed = 0;  \n" +
                "				select 'NICKNAME_MISMATCH_VALIDATION' as message,  \n" +
                "						concat('(',m.mfgCode,') ',m.mfgName) mfrName,  \n" +
                "                        co.id, co.mfgPN, co.custAssyPN, co.rev, co.nickName  \n" +
                "				 from component co  \n" +
                "                 join mfgcodemst m ON m.id = co.mfgcodeID  \n" +
                "				where co.nickName != pNewNickName  \n" +
                "				  and co.category = 3  \n" +
                "				  and co.custAssyPN = pNewCustAssyPN  \n" +
                "				  and co.mfgcodeID = pNewMfgcodeID  \n" +
                "				  and co.isDeleted = 0  \n" +
                "				  and co.deletedAt is null ;  \n" +
                "				 -- limit 1;  \n" +
                "		  end if;  \n" +
                "  \n" +
                "		set vCount = 0;  \n" +
                "		 select count(1) into vCount  \n" +
                "			 from component co  \n" +
                "			where co.nickName = pNewNickName  \n" +
                "              and co.category = 3  \n" +
                "              and co.custAssyPN != pNewCustAssyPN  \n" +
                "              and co.mfgcodeID = pNewMfgcodeID  \n" +
                "			  and co.isDeleted = 0  \n" +
                "			  and co.deletedAt is null  \n" +
                "			group by co.nickName,co.category,co.mfgcodeID;  \n" +
                "		 if vCount > 0 then  \n" +
                "			set vValidationPassed = 0;  \n" +
                "				select 'DUPLICATE_NICKNAME' as message,  \n" +
                "                        co.id, co.mfgPN, co.custAssyPN, co.rev, co.nickName  \n" +
                "				 from component co  \n" +
                "				where co.nickName = pNewNickName  \n" +
                "				  and co.category = 3  \n" +
                "				  and co.custAssyPN != pNewCustAssyPN  \n" +
                "				  and co.mfgcodeID = pNewMfgcodeID  \n" +
                "				  and co.isDeleted = 0  \n" +
                "				  and co.deletedAt is null  ;  \n" +
                "		  end if;  \n" +
                "	end if;  \n" +
                "  \n" +
                "    set vCount = 0;  \n" +
                "		select count(1) into vCount  \n" +
                "		 from component co  \n" +
                "		where co.mfgcodeID = pNewMfgcodeID  \n" +
                "		  and co.mfgPN = pNewMfgPN  \n" +
                "          and co.isDeleted = 0  \n" +
                "		  and co.deletedAt is null  \n" +
                "	  group by co.mfgcodeID,co.mfgPN;  \n" +
                "	 if vCount > 0 then  \n" +
                "		set vValidationPassed = 0;  \n" +
                "        select 'DUPLICATE_MFGPN' as message;  \n" +
                "     end if;  \n" +
                "  \n" +
                "    set vCount = 0;  \n" +
                "		select count(1) into vCount  \n" +
                "		 from component co  \n" +
                "		where co.PIDCode = pNewPIDCode  \n" +
                "		  and co.isDeleted = 0  \n" +
                "		  and co.deletedAt is null  \n" +
                "          group by co.PIDCode;  \n" +
                "    if vCount > 0 then  \n" +
                "		set vValidationPassed = 0;  \n" +
                "        select 'DUPLICATE_PID' as message;  \n" +
                "	end if;  \n" +
                "  \n" +
                "    if vValidationPassed = 1 then /*if above validations passed then only generate new serial number*/  \n" +
                "		call Sproc_GenerateIncrementalNumber(case when vFromMfgType = 'MFG' then  \n" +
                "													'MPNSystemID'  \n" +
                "												else 'SPNSystemID' end,  \n" +
                "											 true);  \n" +
                "		  select systemID, message into vSerialNumber, vMessage  \n" +
                "		  from temp_serialNumber;  \n" +
                "        if vMessage is not null and vMessage != '' then  \n" +
                "			set vValidationPassed = 0;  \n" +
                "			select vMessage as message;  \n" +
                "		end if;  \n" +
                "	end if;  \n" +
                "  \n" +
                "	if vValidationPassed = 1 then  #1 passed, 0 failed  \n" +
                "		-- START TRANSACTION;  \n" +
                "		insert into component(  \n" +
                "				isCustom, isCPN, rfqOnly, isGoodPart,replacementPartID, partType, category, epicorType, mfgcodeID,  \n" +
                "				custAssyPN, rev, mfgPN, assyCode, nickName, PIDCode, costCategoryID,imageURL, dataSheetLink,  \n" +
                "				mfgPNDescription, specialNote, purchasingComment, uomClassID, uom, unit,  \n" +
                "                functionalCategoryID,  \n" +
                "                mountingTypeID,  \n" +
                "                operatingTemp,				minOperatingTemp,				maxOperatingTemp,  \n" +
                "				temperatureCoefficient,				temperatureCoefficientValue,				temperatureCoefficientUnit,				connecterTypeID,  \n" +
                "				noOfPosition,				noOfRows,  \n" +
                "				pitch,				pitchMating,				sizeDimension,				length,				width,				heightText,				height,  \n" +
                "				partStatus, leadTime, serialNumber, RoHSStatusID,  \n" +
                "				rohsDeviation, mslID, packagingWeight, packagingWeightUom, grossWeight, grossWeightUom,  \n" +
                "				countryOfOrigin, htsCode, createdBy, createByRoleId,  \n" +
                "				updatedBy,updateByRoleId, isDeleted,assemblyType,detailDescription,  \n" +
                "				refMfgPNMfgCodeId, refSupplierMfgpnComponentID, isFluxNotApplicable,isWaterSoluble,isNoClean,isCloudApiUpdateAttribute,restrictPackagingUsePermanently,  \n" +
                "				restrictPackagingUseWithpermission,umidVerificationRequire,isAutoVerificationOfAllAssemblyParts,isHazmatMaterial,trackSerialNumber,requiredTestTime,  \n" +
                "                mountingTypePartRequired,functionalTypePartRequired,driverToolRequired,matingPartRquired,pickupPadRequired,functionalTestingRequired,internalReference, mfgType, isEpoxyMount,  \n" +
                "                scrapValuePerBuild,				scrapRatePercentagePerBuild,				plannedValuePerBuild,				plannedOverRunPercentagePerBuild,				selfLifeDays,  \n" +
                "				shelfLifeAcceptanceDays,				shelfListDaysThresholdPercentage,				maxShelfLifeAcceptanceDays,				maxShelfListDaysThresholdPercentage,  \n" +
                "				shelfLifeDateType,				maxPriceLimit,				maxQtyonHand,				saftyStock,				eau,				businessRisk,				programingRequired,  \n" +
                "                restrictUSEwithpermission,                bomLock,                restrictUsePermanently,  \n" +
                "                tolerance,				voltage,				value,				powerRating,  \n" +
                "				weight,				feature,				color,  \n" +
                "                deviceMarking,				packagingID,  \n" +
                "				minimum,				mult,				packageQty,				umidSPQ,  \n" +
                "                pcbPerArray,                IsReceiveBulkItem)  \n" +
                "		select pIsCustom, pIsCPN, rfqOnly, isGoodPart,replacementPartID, partType, category, pNewEpicorType, pNewMfgcodeID,  \n" +
                "				pNewCustAssyPN, pNewPartRev/*rev*/, pNewMfgPN/*mfgPN*/, pNewAssyCode, pNewNickName, pNewPIDCode, costCategoryID,imageURL, dataSheetLink,  \n" +
                "				pMfgPNDescription, pSpecialNote, purchasingComment, uomClassID, uom, unit,  \n" +
                "                pFunctionalTypeID,  \n" +
                "                pMountingTypeID,  \n" +
                "                /* Copy in case Attribute  checked*/  \n" +
                "                (CASE WHEN (pIsAttribute = 1) THEN  operatingTemp ELSE null END),  \n" +
                "                (CASE WHEN (pIsAttribute = 1) THEN  minOperatingTemp ELSE null END),  \n" +
                "                (CASE WHEN (pIsAttribute = 1) THEN  maxOperatingTemp ELSE null END),  \n" +
                "                (CASE WHEN (pIsAttribute = 1) THEN  temperatureCoefficient ELSE null END),  \n" +
                "                (CASE WHEN (pIsAttribute = 1) THEN  temperatureCoefficientValue ELSE null END),  \n" +
                "                (CASE WHEN (pIsAttribute = 1) THEN  temperatureCoefficientUnit ELSE null END),  \n" +
                "                (CASE WHEN (pIsAttribute = 1) THEN  connecterTypeID ELSE null END),  \n" +
                "                (CASE WHEN (pIsAttribute = 1) THEN  noOfPosition ELSE null END),  \n" +
                "                (CASE WHEN (pIsAttribute = 1) THEN  noOfRows ELSE null END),  \n" +
                "                (CASE WHEN (pIsAttribute = 1) THEN  pitch ELSE null END),  \n" +
                "                (CASE WHEN (pIsAttribute = 1) THEN  pitchMating ELSE null END),  \n" +
                "                (CASE WHEN (pIsAttribute = 1) THEN  sizeDimension ELSE null END),  \n" +
                "                (CASE WHEN (pIsAttribute = 1) THEN  length ELSE null END),  \n" +
                "                (CASE WHEN (pIsAttribute = 1) THEN  width ELSE null END),  \n" +
                "                (CASE WHEN (pIsAttribute = 1) THEN  heightText ELSE null END),  \n" +
                "                (CASE WHEN (pIsAttribute = 1) THEN  height ELSE null END),  \n" +
                "  \n" +
                "				partStatus,  leadTime, vSerialNumber/*serialNumber*/, pRoHSStatusID,  \n" +
                "				pRohsDeviation, mslID, packagingWeight, packagingWeightUom, grossWeight, grossWeightUom,  \n" +
                "				countryOfOrigin, htsCode, pUserID/*createdBy*/, pUserRoleId/*createByRoleId*/,  \n" +
                "				pUserID/*updatedBy*/,pUserRoleId/*updateByRoleId*/, false /*isDeleted*/,pNewAssemblyType,pDetailDescription,  \n" +
                "				refMfgPNMfgCodeId, refSupplierMfgpnComponentID,  \n" +
                "                pIsFluxNotApplicable,  \n" +
                "                pIsWaterSoluble,  \n" +
                "                pIsNoClean,  \n" +
                "				(CASE WHEN (pIsCustom = 1) THEN 0 ELSE isCloudApiUpdateAttribute END),restrictPackagingUsePermanently,  \n" +
                "				restrictPackagingUseWithpermission,umidVerificationRequire ,isAutoVerificationOfAllAssemblyParts,isHazmatMaterial,  \n" +
                "                (CASE WHEN (pIsTrackSNumber = 1) THEN trackSerialNumber ELSE 0 END),  \n" +
                "                (CASE WHEN (pIsFunctionalTesingTool = 1  and pIsCPN = 0) THEN requiredTestTime ELSE null END),  \n" +
                "                (CASE WHEN (pIsRequiredMountingType = 1) THEN mountingTypePartRequired ELSE 0 END),  \n" +
                "                (CASE WHEN (pIsRequiredFunctionalType = 1) THEN functionalTypePartRequired ELSE 0 END),  \n" +
                "                (CASE WHEN (pIsDriveTool = 1 and pIsCPN = 0) THEN driverToolRequired ELSE 0 END),  \n" +
                "                (CASE WHEN (pIsRequiredMattingParts = 1  and pIsCPN = 0) THEN matingPartRquired ELSE 0 END),  \n" +
                "                (CASE WHEN (pIsPickupPad = 1  and pIsCPN = 0) THEN pickupPadRequired ELSE 0 END),  \n" +
                "                (CASE WHEN (pIsFunctionalTesingTool = 1  and pIsCPN = 0) THEN functionalTestingRequired ELSE 0 END),  \n" +
                "                pInternalReference,  \n" +
                "                mfgType,isEpoxyMount,  \n" +
                "  \n" +
                "                /* Copy in case Settings checked*/  \n" +
                "                (CASE WHEN (pIsSettings = 1) THEN  scrapValuePerBuild ELSE null END),  \n" +
                "                (CASE WHEN (pIsSettings = 1) THEN  scrapRatePercentagePerBuild ELSE null END),  \n" +
                "                (CASE WHEN (pIsSettings = 1) THEN  plannedValuePerBuild ELSE null END),  \n" +
                "                (CASE WHEN (pIsSettings = 1) THEN  plannedOverRunPercentagePerBuild ELSE null END),  \n" +
                "                (CASE WHEN (pIsSettings = 1) THEN  selfLifeDays ELSE null END),  \n" +
                "                (CASE WHEN (pIsSettings = 1) THEN  shelfLifeAcceptanceDays ELSE null END),  \n" +
                "                (CASE WHEN (pIsSettings = 1) THEN  shelfListDaysThresholdPercentage ELSE null END),  \n" +
                "                (CASE WHEN (pIsSettings = 1) THEN  maxShelfLifeAcceptanceDays ELSE null END),  \n" +
                "                (CASE WHEN (pIsSettings = 1) THEN  maxShelfListDaysThresholdPercentage ELSE null END),  \n" +
                "                (CASE WHEN (pIsSettings = 1) THEN  shelfLifeDateType ELSE null END),  \n" +
                "                (CASE WHEN (pIsSettings = 1) THEN  maxPriceLimit ELSE null END),  \n" +
                "                (CASE WHEN (pIsSettings = 1) THEN  maxQtyonHand ELSE null END),  \n" +
                "                (CASE WHEN (pIsSettings = 1) THEN  saftyStock ELSE null END),  \n" +
                "                (CASE WHEN (pIsSettings = 1) THEN  eau ELSE null END),  \n" +
                "                (CASE WHEN (pIsSettings = 1) THEN  businessRisk ELSE null END),  \n" +
                "                (CASE WHEN (pIsSettings = 1) THEN  programingRequired ELSE 0 END),  \n" +
                "                (CASE WHEN (pIsSettings = 1 and pIsCPN = 0) THEN  restrictUSEwithpermission ELSE 0 END),  \n" +
                "                (CASE WHEN (pIsSettings = 1) THEN  bomLock ELSE 0 END),  \n" +
                "                (CASE WHEN (pIsSettings = 1 and pIsCPN = 0) THEN  restrictUsePermanently ELSE 0 END),  \n" +
                "  \n" +
                "                /* Copy in case Additional Attribute checked*/  \n" +
                "                (CASE WHEN (pIsAdditionalAttibute = 1) THEN  tolerance ELSE null END),  \n" +
                "                (CASE WHEN (pIsAdditionalAttibute = 1) THEN  voltage ELSE null END),  \n" +
                "                (CASE WHEN (pIsAdditionalAttibute = 1) THEN  `value` ELSE null END),  \n" +
                "                (CASE WHEN (pIsAdditionalAttibute = 1) THEN  powerRating ELSE null END),  \n" +
                "                (CASE WHEN (pIsAdditionalAttibute = 1) THEN  weight ELSE null END),  \n" +
                "                (CASE WHEN (pIsAdditionalAttibute = 1) THEN  feature ELSE null END),  \n" +
                "                (CASE WHEN (pIsAdditionalAttibute = 1) THEN  color ELSE null END),  \n" +
                "  \n" +
                "                /* Copy in case Packaging Detail checked*/  \n" +
                "                (CASE WHEN (pIsPackagingDetail = 1) THEN  deviceMarking ELSE null END),  \n" +
                "                (CASE WHEN (pIsPackagingDetail = 1) THEN  packagingID ELSE null END),  \n" +
                "                (CASE WHEN (pIsPackagingDetail = 1) THEN  minimum ELSE null END),  \n" +
                "                (CASE WHEN (pIsPackagingDetail = 1) THEN  mult ELSE null END),  \n" +
                "                (CASE WHEN (pIsPackagingDetail = 1) THEN  packageQty ELSE null END),  \n" +
                "                (CASE WHEN (pIsPackagingDetail = 1) THEN  umidSPQ ELSE null END),  \n" +
                "                (CASE WHEN (pIsPackagingDetail = 1) THEN  pcbPerArray ELSE null END),  \n" +
                "                (CASE WHEN (pIsPackagingDetail = 1) THEN  IsReceiveBulkItem ELSE null END)  \n" +
                "		 from component  \n" +
                "		where id = pFromPartID;  \n" +
                "		set vToPartID = LAST_INSERT_ID();  \n" +
                "  \n" +
                "		IF(vValidationPassed = 1)  \n" +
                "		THEN  \n" +
                "			 set vMessage = '';  \n" +
                "			 CALL Sproc_CopyPartDetailOnCopyAndDuplicatePart(pFromPartID,vToPartID,pUserID,vIsCPN,pIsCPN,vFromPartCategory,pIsStandards,pIsRequiredFunctionalType,pIsRequiredMountingType,pIsPackagingAliasPart,pIsOtherPartName  \n" +
                "				,pIsAlternatePart,pIsRoHSReplacementPart,pIsDriveTool,pIsProcessMaterial,pIsRequiredMattingParts,pIsPickupPad,pIsFunctionalTesingTool,pIsFinctionalRestingEquipment, vMisMatchFields, vMessage);  \n" +
                "  \n" +
                "            IF(vMessage != '')  \n" +
                "			THEN  \n" +
                "				select vMessage as message,vMisMatchFields as misMatchFields;  \n" +
                "			ELSE  \n" +
                "				IF pIsSettings then  \n" +
                "					INSERT INTO `component_temperature_sensitive_data`  \n" +
                "					(`pickTemperatureAbove`,`timeLiquidusSecond`,`createdAt`,`createdBy`,`updatedAt`,`updatedBy`,`refComponentID`)  \n" +
                "					select `pickTemperatureAbove`,`timeLiquidusSecond`, current_timestamp() `createdAt`, pUserID  `createdBy`, current_timestamp() `updatedAt`, pUserID `updatedBy`, vToPartID `refComponentID`  \n" +
                "					from component_temperature_sensitive_data where refComponentID = pFromPartID and isDeleted = 0 and deletedAt is null;  \n" +
                "				end if;  \n" +
                "  \n" +
                "				IF pIsAcceptableShippinCountry then  \n" +
                "					INSERT INTO component_acceptable_shipping_countries  \n" +
                "						(refComponentID,countryID,createdAt,createdBy,createByRoleId)  \n" +
                "					SELECT  \n" +
                "						vToPartID,countryID,current_timestamp(),pUserID,pUserRoleId  \n" +
                "					FROM  \n" +
                "						component_acceptable_shipping_countries where refComponentID= pFromPartID and isDeleted = 0;  \n" +
                "				end if;  \n" +
                "  \n" +
                "				if (vFromPartCategory = 3) then  \n" +
                "					if pIsBOM then  \n" +
                "						CALL Sproc_CopyAssyBOMQuote_WitoutTransaction(pFromPartID, vToPartID, pUserID, true, null, null, null, null, null, null, null, null, pUserRoleId);  \n" +
                "					end if;  \n" +
                "					call Sproc_CreatePartAssyBomRelationship(vToPartID, pUserID);  \n" +
                "				end if;  \n" +
                "				if(pIsComments = 1) THEN  \n" +
                "						INSERT INTO componenet_inspection_requirement_det  \n" +
                "								(`partId`,`inspectionRequirementId`,`createdBy`,`createdAt`,`createByRoleId`,`category`)  \n" +
                "						select vToPartID,inspectionRequirementId,pUserID,current_timestamp(),  \n" +
                "						pUserRoleId,category from componenet_inspection_requirement_det where partId = pFromPartID;  \n" +
                "						INSERT INTO assembly_revision_comments  \n" +
                "							(`commentBy`,`comment`,`createdBy`,`createdAt`,`partID`,`createByRoleId`)  \n" +
                "						select `commentBy`,`comment`,pUserID,current_timestamp(),vToPartID,pUserRoleId from assembly_revision_comments where  \n" +
                "							partID = pFromPartID;  \n" +
                "				END IF;  \n" +
                "  \n" +
                "				CALL Sproc_getRefTransDetailForDocument('component',vToPartID,false);  \n" +
                "				IF pIsCopyImages  then  \n" +
                "					insert into component_images  \n" +
                "							(imageURL, refComponentID, createdBy,createdAt, createByRoleId)  \n" +
                "					select imageURL, vToPartID,pUserID, current_timestamp(), pUserRoleId  \n" +
                "					 from component_images  \n" +
                "					where refComponentID = pFromPartID and isDeleted = false;  \n" +
                "				end if;  \n" +
                "				IF pIsCopyDatasheet  then  \n" +
                "					insert into component_datasheets  \n" +
                "							(datasheetURL, refComponentID, createdBy,createdAt, createByRoleId)  \n" +
                "					select datasheetURL, vToPartID,pUserID ,current_timestamp(), pUserRoleId  \n" +
                "					from component_datasheets  \n" +
                "						where refComponentID = pFromPartID and isDeleted = false;  \n" +
                "				end if;  \n" +
                "				IF pIsOperationalAttirbutes  then  \n" +
                "					INSERT INTO component_dynamic_attribute_mapping_part  \n" +
                "						(mfgPNID,attributeID,attributeValue,createdAt,createdBy,createByRoleId)  \n" +
                "					SELECT  \n" +
                "						vToPartID,attributeID,attributeValue,current_timestamp(),pUserID,pUserRoleId  \n" +
                "					FROM  \n" +
                "					component_dynamic_attribute_mapping_part where mfgPNID= pFromPartID and isDeleted = 0;  \n" +
                "				end if;  \n" +
                "				IF pIsCopyDocument then  \n" +
                "					# [S] - copy document_folder from selected part/assembly level to new part  \n" +
                "					INSERT INTO generic_folder  \n" +
                "							(`gencFolderName`,`refTransID`,`entityID`,`gencFileOwnerType`,`roleId`,`refParentId`,  \n" +
                "							`isDeleted`,`createdAt`,`createdBy`,`copyGencFolderID`,`refCopyTransID`,`refCopyGencFileOwnerType`,`createByRoleId`)  \n" +
                "					SELECT  a.gencFolderName, vToPartID refTransID, '-9' , 'component' gencFileOwnerType, a.roleId, a.refParentId,  \n" +
                "							0 isDeleted, fun_DatetimetoUTCDateTime() createdAt, pUserID createdBy, a.gencFolderID copyGencFolderID ,  \n" +
                "							a.refTransID refCopyTransID, a.gencFileOwnerType refCopyGencFileOwnerType,pUserRoleId  \n" +
                "					FROM generic_folder a  \n" +
                "					WHERE a.refTransID = pFromPartID  \n" +
                "					AND a.gencFileOwnerType = 'component' AND entityID = -9  AND a.isRecycle = 0 AND a.isDeleted = 0;  \n" +
                "  \n" +
                "					UPDATE generic_folder gf1,  \n" +
                "					(   SELECT a.gencFolderID, a.copyGencFolderID  \n" +
                "						FROM generic_folder a WHERE a.refTransID = vToPartID  \n" +
                "						AND a.gencFileOwnerType = 'component' AND entityID = -9 AND a.isRecycle = 0 AND a.isDeleted = 0  \n" +
                "					) gf2  \n" +
                "					SET gf1.refParentId = gf2.gencFolderID  \n" +
                "					WHERE gf1.refParentId = gf2.copyGencFolderID  \n" +
                "					AND gf1.refTransID = vToPartID  \n" +
                "					AND gf1.gencFileOwnerType = 'component' AND entityID = -9 AND gf1.isRecycle = 0 AND gf1.isDeleted = 0;  \n" +
                "					# [E] - copy generic_folder from selected part/assembly level to new part  \n" +
                "  \n" +
                "					INSERT INTO genericfiles  \n" +
                "						(gencFileName,gencOriginalName,gencFileDescription,gencFileExtension,gencFileType,tags,isDefault,refTransID,  \n" +
                "						entityID,gencFileOwnerType,isActive,genFilePath,createdAt,createdBy,isShared,fileGroupBy,refParentId,fileSize,  \n" +
                "						refCopyTransID,refCopyGencFileOwnerType,createByRoleId)  \n" +
                "					select gencFileName,gencOriginalName,gencFileDescription,gencFileExtension,gencFileType,tags,isDefault,vToPartID,  \n" +
                "						entityID,gencFileOwnerType,isActive,genFilePath,current_timestamp(),pUserID,isShared,fileGroupBy,refParentId,fileSize,  \n" +
                "						pFromPartID,refCopyGencFileOwnerType,pUserRoleId  \n" +
                "					from genericfiles where refTransID = pFromPartID and entityID = -9 and isRecycle = 0 and isDeleted = 0;  \n" +
                "  \n" +
                "					UPDATE genericfiles gf1,  \n" +
                "					(   SELECT a.gencFolderID, a.copyGencFolderID  \n" +
                "						FROM generic_folder a WHERE a.refTransID = vToPartID  \n" +
                "						AND a.gencFileOwnerType = 'component' AND entityID = -9 AND a.isRecycle = 0 AND a.isDeleted = 0  \n" +
                "					) gf2  \n" +
                "					SET gf1.refParentId = gf2.gencFolderID  \n" +
                "					WHERE gf1.refParentId = gf2.copyGencFolderID  \n" +
                "					AND gf1.refTransID = vToPartID  \n" +
                "					AND gf1.gencFileOwnerType = 'component' AND entityID = -9 AND gf1.isRecycle = 0 AND gf1.isDeleted = 0;  \n" +
                "				end if;  \n" +
                "  \n" +
                "				set @documentPathOfFromPart = (select documentPath from component where id = pFromPartID);  \n" +
                "				IF(@documentPathOfFromPart is null)  \n" +
                "				THEN  \n" +
                "					CALL Sproc_getRefTransDetailForDocument('component',pFromPartID,false);  \n" +
                "				END IF;  \n" +
                "				select *,(select documentPath from component where id = pFromPartID) documentPathOfFromPart from component where id = vToPartID;  \n" +
                "			END IF;  \n" +
                "		END IF;  \n" +
                "	end if;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version ->  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1351,'1.00','V1',' BUG - 41790-41766-41767 - SHUBHAM '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1351:
            allDbChangesArray.push(
                /* **************************** New Script -> 02-03-2022  *********************************** */
                "DROP procedure IF EXISTS `Sproc_updatePurchaseOrderStatus`;  \n" +
                "CREATE PROCEDURE `Sproc_updatePurchaseOrderStatus`(  \n" +
                "	IN pPOID INT,  \n" +
                "	IN pupdatedBy VARCHAR(100),  \n" +
                "	IN pupdatedRoleID VARCHAR(100),  \n" +
                "	IN pcompleteReason VARCHAR(1000),  \n" +
                "	IN pcompleteType VARCHAR(20),  \n" +
                "	IN pcancellationReason VARCHAR(1000),  \n" +
                "	IN ptype VARCHAR(5),  \n" +
                "	IN pCancellationConfirmed TINYINT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	IF pcompleteReason IS NOT NULL THEN  \n" +
                "		IF ptype = 'C' THEN /* for complete po */  \n" +
                "			UPDATE purchase_order_mst SET poWorkingStatus='C',updatedBy=pupdatedBy,updateByRoleId=pupdatedRoleID,poCompleteReason=pcompleteReason,poCompleteType=pcompleteType,lockStatus='RL',updatedAt=fun_DatetimetoUTCDateTime() WHERE id=pPOID;  \n" +
                "			UPDATE purchase_order_line_release_det pod SET pod.poLineWorkingStatus='C',pod.updatedBy=pupdatedBy,pod.updateByRoleId=pupdatedRoleID,poLineCompleteReason=IFNULL(poLineCompleteReason,pcompleteReason),poLineCompleteType=IFNULL(poLineCompleteType,pcompleteType),updatedAt=fun_DatetimetoUTCDateTime() WHERE pod.refPurchaseOrderDetID IN (SELECT po.id FROM purchase_order_det po WHERE po.refPurchaseOrderID=pPOID);  \n" +
                "		ELSEIF ptype = 'P' THEN /* for open po */  \n" +
                "			UPDATE purchase_order_mst SET poWorkingStatus='P',updatedBy=pupdatedBy,updateByRoleId=pupdatedRoleID,poCompleteReason=pcompleteReason,poCompleteType=pcompleteType,lockStatus='NA',updatedAt=fun_DatetimetoUTCDateTime() WHERE id=pPOID;  \n" +
                "			UPDATE purchase_order_line_release_det pod SET pod.poLineWorkingStatus='P',pod.updatedBy=pupdatedBy,pod.updateByRoleId=pupdatedRoleID,poLineCompleteReason=IFNULL(poLineCompleteReason,pcompleteReason),poLineCompleteType=IFNULL(poLineCompleteType,pcompleteType),updatedAt=fun_DatetimetoUTCDateTime() WHERE pod.refPurchaseOrderDetID IN (SELECT po.id FROM purchase_order_det po WHERE po.refPurchaseOrderID=pPOID);  \n" +
                "		END IF;  \n" +
                "	ELSEIF pcancellationReason IS NOT NULL THEN  \n" +
                "		IF ptype = 'C' THEN /* for cancellation po */  \n" +
                "			UPDATE purchase_order_mst SET poWorkingStatus='CA',CancellationConfirmed=pCancellationConfirmed,updatedBy=pupdatedBy,updateByRoleId=pupdatedRoleID,updatedAt=fun_DatetimetoUTCDateTime(),cancleReason=pcancellationReason,poCompleteType=pcompleteType WHERE id=pPOID;  \n" +
                "		ELSEIF ptype = 'R' THEN /* for revoke cancellation po */  \n" +
                "			UPDATE purchase_order_mst SET poWorkingStatus='P',CancellationConfirmed=0,updatedBy=pupdatedBy,updateByRoleId=pupdatedRoleID,updatedAt=fun_DatetimetoUTCDateTime(),cancleReason=pcancellationReason,lockStatus='NA',poCompleteType=pcompleteType WHERE id=pPOID;  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 02-03-2022 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1352,'1.00','V1',' Bug 41802: Purchase order: Lock status is not updated while performing undo cancellation operation in PO - Jay '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1352:
            allDbChangesArray.push(
                /* **************************** New Script -> 03-03-2021  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetBOMCleanProcessPercentage` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetBOMCleanProcessPercentage`(  \n" +
                "	IN pPartID INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "		DECLARE percentage INT;  \n" +
                "                DECLARE remainTime INT(11);  \n" +
                "  \n" +
                "                	SELECT (  \n" +
                "                         ((SELECT  COUNT(DISTINCT(partnumber)) FROM external_partverificationrequest_log WHERE partid=pPartID AND `type`='FJTV3-CleanBOM')-  \n" +
                "                         (SELECT  COUNT(1) FROM external_partverificationrequest_log WHERE partid=pPartID AND `type`='FJTV3-CleanBOM' AND partStatus=0)) *100/  \n" +
                "                        (SELECT  COUNT(DISTINCT(partnumber)) FROM external_partverificationrequest_log WHERE partid=pPartID AND `type`='FJTV3-CleanBOM')  \n" +
                "                ) INTO percentage;  \n" +
                "                 SELECT  (COUNT(1) * 6) INTO  remainTime   FROM external_partverificationrequest_log WHERE  `type`='FJTV3-CleanBOM' AND partid=pPartID AND partStatus=0;  \n" +
                "                 SELECT  percentage,remainTime;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 03-03-2021  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1353,'1.00','V1',' Sproc_GetBOMCleanProcessPercentage -CC '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1353:
            allDbChangesArray.push(
                /* **************************** New Script -> 04-03-2022 ******************************************* */
                "DROP procedure IF EXISTS `Sproc_GetReceivingMaterial`;  \n" +
                "CREATE PROCEDURE `Sproc_GetReceivingMaterial`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pWHId INT,  \n" +
                "	IN pBinId INT,  \n" +
                "	IN pFunctionalTypeIDs VARCHAR(16383),  \n" +
                "	IN pMountingTypeIDs VARCHAR(16383),  \n" +
                "	IN pRefSalesOrderDetIDs VARCHAR(16383),  \n" +
                "	IN pAssyIDs VARCHAR(16383),  \n" +
                "	IN pRestrictPart TINYINT,  \n" +
                "	IN pExpireMaterial TINYINT,  \n" +
                "	IN pPartId INT,  \n" +
                "	IN pIsShowPackagingAlias TINYINT,  \n" +
                "	IN pStandardIDs VARCHAR(16383),  \n" +
                "	IN pStandardsClassIDs VARCHAR(16383),  \n" +
                "	IN pCostCategoryIDs VARCHAR(16383),  \n" +
                "	IN pDateCode VARCHAR(16383),  \n" +
                "	IN pIsAvailableToSell TINYINT,  \n" +
                "	IN pIsRestrictedUMID TINYINT,  \n" +
                "	IN pIsInternalStock TINYINT,  \n" +
                "	IN pIsCustomerStock TINYINT,  \n" +
                "	IN pdepartmentIDs VARCHAR(16383),  \n" +
                "	IN pwarehouseType VARCHAR(255),  \n" +
                "	IN pWarehouse VARCHAR(16383),  \n" +
                "	IN pExpiredDay INT,  \n" +
                "	IN pRohsStatusIDs VARCHAR(16383),  \n" +
                "	IN pCustomerId INT,  \n" +
                "	IN pFromDate DATE,  \n" +
                "	IN pToDate DATE,  \n" +
                "	IN pSearchTextAttribute LONGTEXT,  \n" +
                "    IN pMfgCodeIDs VARCHAR(16383),  \n" +
                "    IN pSupplierCodeIDs VARCHAR(16383),  \n" +
                "	IN pInventoryType VARCHAR(255),  \n" +
                "    IN pInnerQueryWhereClause VARCHAR(16383),  \n" +
                "    IN pIsNonCofc TINYINT,  \n" +
                "    IN pEmployeeIDs VARCHAR(16383)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255);  \n" +
                "	DECLARE v_DescriptionWhereClause LONGTEXT;  \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "	DECLARE attributeSearchString LONGTEXT;  \n" +
                "	DECLARE attributeSearchLength INT DEFAULT 0;  \n" +
                "	DECLARE attributeSearchChip  VARCHAR(500) DEFAULT NULL;  \n" +
                "	DECLARE attributeSearchSubLength INT DEFAULT 0;  \n" +
                "	DECLARE groupConcateSepationValue VARCHAR(50);  \n" +
                "    DECLARE v_ExpiryDate datetime;  \n" +
                "    DECLARE v_PartIDs VARCHAR(16383);  \n" +
                "	DECLARE vMfgCodeFormat INT;  \n" +
                "  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
                "	SELECT fun_getMFGCodeNameFormat() INTO vMfgCodeFormat;  \n" +
                "	SET v_DescriptionWhereClause = '';  \n" +
                "    SET v_ExpiryDate = fun_DatetimetoUTCDateTime();  \n" +
                "  \n" +
                "	IF (pOrderBy IS NOT NULL) THEN  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy);  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = \"ORDER BY pkgQty DESC\";  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '\"\"') THEN  \n" +
                "		SET pWhereClause = ' 1=1';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pInnerQueryWhereClause IS NULL OR pInnerQueryWhereClause = '\"\"') THEN  \n" +
                "		SET pInnerQueryWhereClause = ' ';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF(pIsNonCofc = 1) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND  packingSlipName IS NULL ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    /* Non COFc records filter */  \n" +
                "	IF(pSupplierCodeIDs IS NOT NULL AND pSupplierCodeIDs != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND packingSlipSupplierId in (', pSupplierCodeIDs, ') ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF(pEmployeeIDs IS NOT NULL AND pEmployeeIDs != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND createdBy in (', pEmployeeIDs, ') ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pPartId IS NOT NULL AND pPartId != '') THEN  \n" +
                "		IF(pIsShowPackagingAlias = 1) THEN  \n" +
                "			SELECT 	group_concat(IFNULL(cp.id, c.id))  \n" +
                "            into	v_PartIDs  \n" +
                "			FROM 	component c  \n" +
                "			LEFT JOIN 	component cp ON c.packagingGroupid = cp.packagingGroupid AND cp.isDeleted = 0  \n" +
                "			WHERE 	c.id = pPartId  \n" +
                "			AND 	c.isDeleted = 0;  \n" +
                "		ELSE  \n" +
                "			select pPartId into v_PartIDs;  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/*below query need to refactor*/  \n" +
                "	IF (pSearchTextAttribute IS NOT NULL AND pSearchTextAttribute != '') THEN  \n" +
                "		SELECT `values` INTO groupConcateSepationValue FROM systemconfigrations WHERE `key` = 'GroupConcatSeparator' AND isDeleted = 0;  \n" +
                "		SET attributeSearchString = pSearchTextAttribute;  \n" +
                "		do_this:  \n" +
                "		LOOP  \n" +
                "			SET attributeSearchLength = CHAR_LENGTH(attributeSearchString);  \n" +
                "			SET attributeSearchChip = SUBSTRING_INDEX(attributeSearchString, groupConcateSepationValue, 1);  \n" +
                "			SET attributeSearchSubLength = CHAR_LENGTH(attributeSearchChip);  \n" +
                "			SET attributeSearchString = MID(attributeSearchString, (attributeSearchSubLength+4), attributeSearchLength);  \n" +
                "			SET v_DescriptionWhereClause = CONCAT(v_DescriptionWhereClause, ' AND (c.mfgPNDescription REGEXP ''(^|[[:space:]])', attributeSearchChip ,'([[:space:]]|$)'' ');  \n" +
                "			SET v_DescriptionWhereClause = CONCAT(v_DescriptionWhereClause, ' OR c.detailDescription REGEXP ''(^|[[:space:]])', attributeSearchChip ,'([[:space:]]|$)'' ) ');  \n" +
                "			IF (attributeSearchString = NULL OR attributeSearchString = \"\") THEN  \n" +
                "				LEAVE do_this;  \n" +
                "			END IF;  \n" +
                "		END LOOP do_this;  \n" +
                "	END IF;  \n" +
                "	IF(pCustomerId IS NOT NULL AND (pRefSalesOrderDetIDs IS NULL OR pRefSalesOrderDetIDs='') AND (pAssyIDs IS NULL OR pAssyIDs='')) THEN  \n" +
                "		SELECT 	GROUP_CONCAT(DISTINCT partId),GROUP_CONCAT(DISTINCT refSalesOrderDetID) INTO pAssyIDs,pRefSalesOrderDetIDs  \n" +
                "		FROM 	kit_allocation_assy_detail  \n" +
                "		WHERE 	isDeleted = 0  \n" +
                "			AND partId IN (SELECT id FROM component WHERE isDeleted = 0 AND mfgcodeid=pCustomerId);  \n" +
                "	END IF;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempAllocatedKitUIDs;  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS tempAllocatedKitUIDs (refUidID INT);  \n" +
                "	IF(pRefSalesOrderDetIDs IS NOT NULL AND pRefSalesOrderDetIDs != '' AND pAssyIDs IS NOT NULL AND pAssyIDs != '') THEN  \n" +
                "		INSERT INTO tempAllocatedKitUIDs (refUidID)  \n" +
                "		SELECT 	k.refUIDId  \n" +
                "		FROM 	kit_allocation k  \n" +
                "		WHERE 	FIND_IN_SET(k.refSalesOrderDetID, pRefSalesOrderDetIDs)  \n" +
                "		AND	FIND_IN_SET(k.assyID, pAssyIDs)  \n" +
                "		AND	k.status = 'A';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    DROP temporary table if exists temp_component_sid_stock;  \n" +
                "    CREATE temporary table temp_component_sid_stock(  \n" +
                "		  id int NOT NULL DEFAULT '0',  \n" +
                "		  scanlabel varchar(1000) DEFAULT NULL,  \n" +
                "		  umidPrefix varchar(20) DEFAULT NULL,  \n" +
                "		  uid varchar(15) DEFAULT NULL,  \n" +
                "		  receiveMaterialType varchar(100) DEFAULT NULL,  \n" +
                "		  displayReceiveMaterialType varchar(37) DEFAULT NULL,  \n" +
                "		  stockInventoryType varchar(10) DEFAULT NULL,  \n" +
                "		  displayStockInventoryType varchar(39) DEFAULT NULL,  \n" +
                "		  fromUIDId int DEFAULT NULL,  \n" +
                "		  fromUID varchar(15) DEFAULT NULL,  \n" +
                "		  parentUIDId int DEFAULT NULL,  \n" +
                "		  parentUID varchar(15) DEFAULT NULL,  \n" +
                "		  mfgcodeID int NOT NULL,  \n" +
                "		  mfg text,  \n" +
                "		  refcompid int DEFAULT NULL,  \n" +
                "		  mfgPN varchar(100) NOT NULL,  \n" +
                "		  PIDCode varchar(109) NOT NULL,  \n" +
                "		  packageQty decimal(18,6) DEFAULT NULL,  \n" +
                "		  mslLevel varchar(58) DEFAULT NULL,  \n" +
                "		  RoHSStatusID int NOT NULL,  \n" +
                "		  rohsIcon varchar(255) DEFAULT NULL,  \n" +
                "		  rohsName varchar(50) DEFAULT NULL,  \n" +
                "		  mfgPNDescription varchar(2000) NOT NULL DEFAULT '',  \n" +
                "		  spq decimal(18,8) DEFAULT NULL,  \n" +
                "		  pkgQty decimal(18,8) DEFAULT NULL,  \n" +
                "		  pkgUnit decimal(18,8) DEFAULT NULL,  \n" +
                "		  uom int DEFAULT NULL,  \n" +
                "          uomClassID int DEFAULT NULL,  \n" +
                "		  uomName varchar(100) NOT NULL,  \n" +
                "		  orgPkgUnit decimal(18,8) NOT NULL DEFAULT '0.00000000',  \n" +
                "		  orgQty decimal(18,8) DEFAULT NULL,  \n" +
                "		  packaginggroupID int DEFAULT NULL,  \n" +
                "		  packaging int DEFAULT NULL,  \n" +
                "		  packagingName varchar(100) NOT NULL,  \n" +
                "		  printStatus tinyint(1) NOT NULL DEFAULT '0',  \n" +
                "		  tentativePrice decimal(18,8) NOT NULL DEFAULT '0.00000000',  \n" +
                "		  costScrapQty decimal(65,20) DEFAULT NULL,  \n" +
                "		  costCategoryID int DEFAULT NULL,  \n" +
                "		  costCategory varchar(147) DEFAULT NULL,  \n" +
                "		  lotCode varchar(255) DEFAULT NULL,  \n" +
                "		  dateCode varchar(10) DEFAULT NULL,  \n" +
                "		  UMIDrohsStatusID int NOT NULL,  \n" +
                "		  UMIDrohsStatus varchar(50) DEFAULT NULL,  \n" +
                "		  binID int DEFAULT NULL,  \n" +
                "		  location varchar(110) DEFAULT NULL,  \n" +
                "		  side varchar(5) NOT NULL DEFAULT '',  \n" +
                "		  warehouseID int DEFAULT NULL,  \n" +
                "		  warehouse varchar(50) NOT NULL,  \n" +
                "		  warehouseType varchar(50) DEFAULT NULL,  \n" +
                "		  department varchar(50) NOT NULL,  \n" +
                "		  departmentID int NOT NULL DEFAULT '0',  \n" +
                "		  fromBin int DEFAULT NULL,  \n" +
                "		  fromBinName varchar(110) DEFAULT NULL,  \n" +
                "		  fromSide varchar(5) NOT NULL DEFAULT '',  \n" +
                "		  fromWarehouse int DEFAULT NULL,  \n" +
                "		  fromWHName varchar(50) NOT NULL,  \n" +
                "		  fromDepartment int DEFAULT NULL,  \n" +
                "		  fromDepartmentName varchar(50) NOT NULL,  \n" +
                "		  orgRecBin int DEFAULT NULL,  \n" +
                "		  orgRecBinName varchar(110) DEFAULT NULL,  \n" +
                "		  orgRecWarehouse int DEFAULT NULL,  \n" +
                "		  orgRecWHName varchar(50) NOT NULL,  \n" +
                "		  orgRecDepartment int DEFAULT NULL,  \n" +
                "		  orgRecDepartmentName varchar(50) NOT NULL,  \n" +
                "		  expiryDate date DEFAULT NULL,  \n" +
                "		  expiredStatus varchar(7) DEFAULT NULL,  \n" +
                "		  pcbPerArray int DEFAULT NULL,  \n" +
                "		  nickName varchar(50) DEFAULT NULL,  \n" +
                "		  specialNote varchar(1000) DEFAULT NULL,  \n" +
                "		  isinStk tinyint(1) DEFAULT NULL,  \n" +
                "		  woNumber varchar(255) DEFAULT NULL,  \n" +
                "		  refRestrictUMIDId int DEFAULT NULL,  \n" +
                "		  isUMIDRestrict tinyint(1) DEFAULT NULL,  \n" +
                "		  UMIDRestricted varchar(3) NOT NULL DEFAULT '',  \n" +
                "		  restrictUsePermanently tinyint NOT NULL DEFAULT '0',  \n" +
                "		  restrictUSEwithpermission tinyint NOT NULL DEFAULT '0',  \n" +
                "		  restrictPackagingUsePermanently tinyint(1) DEFAULT NULL,  \n" +
                "		  restrictPackagingUseWithpermission tinyint(1) DEFAULT NULL,  \n" +
                "		  reasonUMIDRestricted longtext CHARACTER SET utf8,  \n" +
                "		  countOfRestrictUMID bigint DEFAULT NULL,  \n" +
                "		  mountingTypeID int NOT NULL,  \n" +
                "		  mountingTypeName varchar(50) DEFAULT NULL,  \n" +
                "		  externalPartPackage varchar(200) DEFAULT NULL,  \n" +
                "		  partPackage varchar(50) DEFAULT NULL,  \n" +
                "		  internalPartPackage varchar(50) DEFAULT NULL,  \n" +
                "		  isCustom tinyint NOT NULL DEFAULT '0',  \n" +
                "		  detailDescription text,  \n" +
                "		  pictureCount bigint NOT NULL DEFAULT '0',  \n" +
                "		  customerID int DEFAULT NULL,  \n" +
                "		  customer text,  \n" +
                "		  assyID int DEFAULT NULL,  \n" +
                "		  assembly varchar(109),  \n" +
                "		  cpn varchar(3) NOT NULL DEFAULT '',  \n" +
                "		  mfgAvailable varchar(3) NOT NULL DEFAULT '',  \n" +
                "		  customerConsign varchar(3) NOT NULL DEFAULT '',  \n" +
                "          cpnMFGCodeID INT DEFAULT NULL,  \n" +
                "		  cpnMFGCode text,  \n" +
                "		  refCPNMFGPNID int DEFAULT NULL,  \n" +
                "		  cpnMFGPN varchar(100),  \n" +
                "		  refSupplierPartId int DEFAULT NULL,  \n" +
                "		  supplierMFGCode text,  \n" +
                "		  supplieMFGPN varchar(100),  \n" +
                "		  totalScrapUnit decimal(40,8) DEFAULT NULL,  \n" +
                "		  perScrapQty decimal(55,12) DEFAULT NULL,  \n" +
                "		  isTransit varchar(10) DEFAULT NULL,  \n" +
                "		  searchUser varchar(50) DEFAULT NULL,  \n" +
                "		  mfrDateCodeFormatID int DEFAULT NULL,  \n" +
                "		  mfrDateCode varchar(50) DEFAULT NULL,  \n" +
                "		  mfrDateCodeFormat varchar(50) DEFAULT NULL,  \n" +
                "		  createdAt varchar(50) DEFAULT NULL,  \n" +
                "		  createdBy varchar(255) NOT NULL,  \n" +
                "		  createdByName varchar(50) DEFAULT NULL,  \n" +
                "		  createdbyRole varchar(255) DEFAULT NULL,  \n" +
                "		  createdUserCode varchar(255) DEFAULT NULL,  \n" +
                "		  updatedAt varchar(50) DEFAULT NULL,  \n" +
                "		  updatedBy varchar(255) DEFAULT NULL,  \n" +
                "		  umidModifiedBy varchar(50) DEFAULT NULL,  \n" +
                "		  updatedbyRole varchar(255) DEFAULT NULL,  \n" +
                "		  allocatedToKit text,  \n" +
                "		  packingSlipName varchar(305) DEFAULT NULL,  \n" +
                "		  packingSupplierName text,  \n" +
                "		  packingSlipId int DEFAULT NULL,  \n" +
                "		  packingSlipSupplierId int DEFAULT NULL,  \n" +
                "          packingSlipNumber VARCHAR(100) DEFAULT NULL,  \n" +
                "          cocDocumentCount int default 0,  \n" +
                "          parentCofCDocumentCount int default 0,  \n" +
                "          createByRoleId int default null,  \n" +
                "          updateByRoleId int default null,  \n" +
                "          isReservedStock TINYINT DEFAULT FALSE,  \n" +
                "          reservedStock VARCHAR(10),  \n" +
                "          custAssyPN varchar(100) DEFAULT NULL  \n" +
                "		);  \n" +
                "	SET @temp_component_sid_stock = CONCAT(\"Insert into temp_component_sid_stock  \n" +
                "					(		id, 				scanlabel, 			umidPrefix, 			uid,					receiveMaterialType, 	displayReceiveMaterialType,  \n" +
                "							stockInventoryType, displayStockInventoryType, 					fromUIDId, 				fromUID, 				parentUIDId,  \n" +
                "                            parentUID, 			mfgcodeID, 			mfg, 					refcompid, 				mfgPN, 					PIDCode,  \n" +
                "                            packageQty, 		mslLevel, 			RoHSStatusID, 			rohsIcon, 				rohsName, 				mfgPNDescription,  \n" +
                "                            spq, 				pkgQty, 			pkgUnit, 				uom, 					uomClassID, 			uomName,  \n" +
                "                            orgPkgUnit, 		orgQty, 			packaginggroupID, 		packaging, 				packagingName, 			printStatus,  \n" +
                "                            tentativePrice, 	costScrapQty, 		costCategoryID, 		costCategory, 			lotCode, 				dateCode,  \n" +
                "                            UMIDrohsStatusID, 	UMIDrohsStatus, 	binID, 					location, 				side, 					warehouseID,  \n" +
                "                            warehouse, 			warehouseType, 		department, 			departmentID, 			fromBin, 				fromBinName,  \n" +
                "                            fromSide, 			fromWarehouse, 		fromWHName, 			fromDepartment, 		fromDepartmentName, 	orgRecBin,  \n" +
                "                            orgRecBinName, 		orgRecWarehouse, 	orgRecWHName, 			orgRecDepartment, 		orgRecDepartmentName, 	expiryDate,  \n" +
                "                            expiredStatus, 		pcbPerArray, 		nickName, 				specialNote, 			isinStk, 				woNumber,  \n" +
                "                            refRestrictUMIDId, 	isUMIDRestrict, 	UMIDRestricted, 		restrictUsePermanently, restrictUSEwithpermission,  \n" +
                "                            restrictPackagingUsePermanently, 		restrictPackagingUseWithpermission, 			reasonUMIDRestricted, 	countOfRestrictUMID,  \n" +
                "                            mountingTypeID, 	mountingTypeName, 	externalPartPackage, 	partPackage, 			internalPartPackage, 	isCustom,  \n" +
                "                            detailDescription, 	pictureCount, 		customerID, 			customer, 				assyID,					assembly,  \n" +
                "                            cpn, 				mfgAvailable, 		customerConsign, 		cpnMFGCodeID, 			cpnMFGCode, 			refCPNMFGPNID,  \n" +
                "                            cpnMFGPN, 			refSupplierPartId, 	supplierMFGCode, 		supplieMFGPN, 			totalScrapUnit, 		perScrapQty,  \n" +
                "                            isTransit, 			searchUser, 		mfrDateCodeFormatID, 	mfrDateCode, 			mfrDateCodeFormat, 		createdAt,  \n" +
                "                            createdBy, 			createdByName, 		createdbyRole, 			createdUserCode, 		createByRoleId, 		updatedAt,  \n" +
                "                            updatedBy, 			umidModifiedBy, 	updatedbyRole, 			updateByRoleId, 		allocatedToKit, 		packingSlipName,  \n" +
                "                            packingSupplierName,packingSlipId, 		packingSlipSupplierId, 	packingSlipNumber,		isReservedStock,		reservedStock,  \n" +
                "                            custAssyPN)  \n" +
                "					SELECT 	id,					scanlabel,			umidPrefix,  			uid, 					receiveMaterialType, 	displayReceiveMaterialType,  \n" +
                "							stockInventoryType, displayStockInventoryType,					fromUIDId, 				fromUID, 				parentUIDId,  \n" +
                "							parentUID,    		mfgcodeID,		 	mfg,					refcompid,				mfgPN, 					PIDCode,  \n" +
                "							packageQty, 	 	mslLevel,			RoHSStatusID,			rohsIcon, 				rohsName,				mfgPNDescription,  \n" +
                "							spq,				pkgQty, 			pkgUnit,   		 		uom,  					uomClassID,				uomName,  \n" +
                "                            orgPkgUnit,      	orgQty, 			packaginggroupID,		packaging,				packagingName,  		printStatus,  \n" +
                "                            tentativePrice,   	costScrapQty,		costCategoryID,			costCategory,			lotCode,  \n" +
                "							dateCode,			UMIDrohsStatusID,   UMIDrohsStatus,    	 	binID,					location,				side,  \n" +
                "							warehouseID,		warehouse,			warehouseType,			department, 			departmentID,			fromBin,  \n" +
                "							fromBinName, 		fromSide,  			fromWarehouse,  		fromWHName,				fromDepartment,			fromDepartmentName,  \n" +
                "							orgRecBin,			orgRecBinName,		orgRecWarehouse,		orgRecWHName,			orgRecDepartment, 		orgRecDepartmentName,  \n" +
                "							expiryDate,			expiredStatus,		pcbPerArray, 			nickName, 		 	 	specialNote,			isinStk,  \n" +
                "							woNumber,       	refRestrictUMIDId,	isUMIDRestrict,			UMIDRestricted,		    restrictUsePermanently,	restrictUSEwithpermission,  \n" +
                "							restrictPackagingUsePermanently,		restrictPackagingUseWithpermission,				reasonUMIDRestricted,	countOfRestrictUMID,  \n" +
                "							mountingTypeID,		mountingTypeName,  	externalPartPackage,	partPackage,			internalPartPackage, 	isCustom,  \n" +
                "							detailDescription, 	pictureCount, 	  	customerID,				customer,		 		assyID,					assembly,  \n" +
                "							cpn,				mfgAvailable, 	 	customerConsign,		cpnMFGCodeID,			cpnMFGCode, 		 	refCPNMFGPNID,  \n" +
                "                            cpnMFGPN,  			refSupplierPartId,	supplierMFGCode,		supplieMFGPN,			totalScrapUnit,			perScrapQty,  \n" +
                "							isTransit,			searchUser,       	mfrDateCodeFormatID,	mfrDateCode, 			mfrDateCodeFormat,		createdAt,  \n" +
                "							createdBy,			createdByName,	  	createdbyRole,			createdUserCode, 		createByRoleId,			updatedAt,  \n" +
                "                            updatedBy,			umidModifiedBy,		updatedbyRole,			updateByRoleId ,		allocatedToKit,			packingSlipName,  \n" +
                "                            packingSupplierName,packingSlipId,		packingSlipSupplierId,	packingSlipNumber,		isReservedStock,		reservedStock,  \n" +
                "                            custAssyPN  \n" +
                "		FROM 		(  \n" +
                "					SELECT 		css.id,						css.scanlabel,				css.prefix umidPrefix,		css.uid,					css.receiveMaterialType,  \n" +
                "								(CASE WHEN css.receiveMaterialType = 'PP' THEN 'Purchased Part'  \n" +
                "										WHEN css.receiveMaterialType = 'CP' THEN 'Customer Consigned Part'  \n" +
                "										ELSE NULL  \n" +
                "								END) displayReceiveMaterialType,  \n" +
                "								css.stockInventoryType,  \n" +
                "								(CASE WHEN css.stockInventoryType = 'NI' THEN 'New Incoming Stock'  \n" +
                "										WHEN css.stockInventoryType = 'OI' THEN 'Move Non-Q2C to Q2C Stock'  \n" +
                "										WHEN css.stockInventoryType = 'AI' THEN 'Non-UMID Assembly Stock'  \n" +
                "										WHEN css.stockInventoryType = 'SI' THEN 'Split UMID'  \n" +
                "										ELSE NULL  \n" +
                "								END) displayStockInventoryType,  \n" +
                "								css.fromUIDId,				css.fromUID, 				css.parentUIDId, 			css.parentUID,      		c.mfgcodeID,  \n" +
                "								fun_GetFormattedMfgCode(m.mfgCode, m.mfgName,\", vMfgCodeFormat ,\") AS mfg,			css.refcompid,				c.mfgPN,					c.PIDCode,  \n" +
                "								c.packageQty,				CONCAT(cmsl.levelRating, ' (', cmsl.`time` ,')') mslLevel,							c.RoHSStatusID,  \n" +
                "								rohs.rohsIcon,				rohs.name  rohsName,		c.mfgPNDescription,			css.spq,					css.pkgQty,  \n" +
                "								css.pkgUnit,				css.uom,					u.measurementTypeID uomClassID,							u.unitName uomName,  \n" +
                "                                IFNULL(css.orgPkgUnit, 0) orgPkgUnit, 					css.orgQty,					c.packaginggroupID,			css.packaging,  \n" +
                "                                cp.name packagingName,		css.printStatus, 			IFNULL(c.price, 0) tentativePrice,  \n" +
                "                                ROUND((((IFNULL(cssh.scrappedUnit,0) + IFNULL(vuu.kitScrappepUnit,0))/css.orgPkgUnit) * IFNULL(c.price, 0)), 2) costScrapQty,  \n" +
                "                                ROUND((((IFNULL(cssh.scrappedUnit,0) + IFNULL(vuu.kitScrappepUnit,0))/css.orgPkgUnit) * 100), 2) perScrapQty,  \n" +
                "                                css.costCategoryID, 		CONCAT(cc.categoryName, ' (', cc.`from`, ' - ', cc.`to`, ' )') costCategory,  \n" +
                "								css.lotCode,				css.dateCode,				css.rohsStatusID UMIDrohsStatusID,    					umid_rohs.name UMIDrohsStatus,  \n" +
                "								css.binID, 					b.name location,			(CASE WHEN b.smartCartSide = 0 THEN 'Left' WHEN b.smartCartSide = 1 THEN  'Right' ELSE '' END) side,  \n" +
                "								b.warehouseID,				w.name warehouse,			w.warehouseType,  			pw.name department,      	pw.id departmentID,  \n" +
                "								css.fromBin,				fb.name fromBinName,		(CASE WHEN fb.smartCartSide = 0 THEN 'Left' WHEN fb.smartCartSide = 1 THEN  'Right' ELSE '' END) fromSide,  \n" +
                "								css.fromWarehouse,      	fw.name fromWHName,			css.fromDepartment,     	fpw.name fromDepartmentName,  \n" +
                "								css.orgRecBin,          	ob.name orgRecBinName,		css.orgRecWarehouse,    	ow.name orgRecWHName, 		css.orgRecDepartment,  \n" +
                "								opw.name orgRecDepartmentName,	css.expiryDate,			(CASE WHEN (css.expiryDate < '\", v_ExpiryDate, \"') THEN 'Expired' ELSE NULL END) AS expiredStatus,  \n" +
                "								css.pcbPerArray,			css.nickName,				css.specialNote,			css.isinStk,   				css.woNumber,  \n" +
                "								css.refRestrictUMIDId, 		css.isUMIDRestrict,			(CASE WHEN (css.isUMIDRestrict = 0) THEN 'No' WHEN (css.isUMIDRestrict = 1) THEN 'Yes' ELSE '' END) AS UMIDRestricted,  \n" +
                "								c.restrictUsePermanently,	c.restrictUSEwithpermission,		c.restrictPackagingUsePermanently,				c.restrictPackagingUseWithpermission,  \n" +
                "								css_rst_umid.reasonForRestrict reasonUMIDRestricted, 			css_rst_umid.RestrictedCount countOfRestrictUMID,  \n" +
                "								c.mountingTypeID,	        rmt.name mountingTypeName,	 		c.partPackageID, 			c.partPackage externalPartPackage,  \n" +
                "								rpc.name partPackage,		rpc.name internalPartPackage, 		c.isCustom,                 c.detailDescription,  \n" +
                "								IFNULL(vgf.cnt, 0) pictureCount,		css.customerID,  \n" +
                "								fun_GetFormattedMfgCode(cust.mfgCode, cust.mfgName,\", vMfgCodeFormat ,\") AS customer,  \n" +
                "								css.assyID,					assy.PIDCode assembly,  \n" +
                "								(CASE WHEN (css.cpn = 0) THEN 'No' WHEN (css.cpn = 1) THEN 'Yes' ELSE '' END) AS cpn,  \n" +
                "								(CASE WHEN (css.mfgAvailabel = 0) THEN 'No' WHEN (css.mfgAvailabel = 1) THEN 'Yes' ELSE '' END) AS mfgAvailable,  \n" +
                "								(CASE WHEN (css.customerConsign = 0) THEN 'No' WHEN (css.customerConsign = 1) THEN 'Yes' ELSE '' END) AS customerConsign,  \n" +
                "								css.refCPNMFGPNID,	 m_cpn.id cpnMFGCodeID,  \n" +
                "                                fun_GetFormattedMfgCode(m_cpn.mfgCode, m_cpn.mfgName,\", vMfgCodeFormat ,\") AS cpnMFGCode,  \n" +
                "                                cpn_comp.mfgPN cpnMFGPN,  \n" +
                "                                css.refSupplierPartId,  \n" +
                "								fun_GetFormattedMfgCode(m_supp.mfgCode, m_supp.mfgName,\", vMfgCodeFormat ,\") AS supplierMFGCode,  \n" +
                "                                supp_comp.mfgPN supplieMFGPN,  \n" +
                "								(IFNULL(cssh.scrappedUnit,0) + IFNULL(vuu.kitScrappepUnit,0)) totalScrapUnit,  \n" +
                "								null isTransit,  \n" +
                "								null searchUser,  \n" +
                "								css.mfrDateCodeFormatID,        css.mfrDateCode,              null mfrDateCodeFormat,  \n" +
                "								css.createdAt createdAtFilter,  	fun_ApplyCommonDateTimeFormatByParaValue(css.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAt,  \n" +
                "								css.createdBy,			(Case when css.createdBy = 'Auto' then 'Auto' else null end) createdByName,		null createdbyRole,  css.createByRoleId,  \n" +
                "								(Case when css.createdBy = 'Auto' then 'Auto' else null end) createdUserCode,  \n" +
                "								fun_ApplyCommonDateTimeFormatByParaValue(css.updatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt,  \n" +
                "								css.updatedBy,			(Case when css.updatedBy = 'Auto' then 'Auto' else null end) umidModifiedBy,   null updatedbyRole,    css.updateByRoleId,  \n" +
                "								kit.kitname allocatedToKit,  \n" +
                "								null packingSlipName,  \n" +
                "								null packingSupplierName,  \n" +
                "								null packingSlipId,  \n" +
                "								null packingSlipSupplierId,  \n" +
                "                                NULL packingSlipNumber,  \n" +
                "                                css.isReservedStock,  \n" +
                "                                IF(css.isReservedStock = 0,'No','Yes') AS reservedStock,		c.custAssyPN  \n" +
                "					FROM 		component_sid_stock css  \n" +
                "					INNER JOIN 	component c on css.refcompid = c.id \",  \n" +
                "						(case when (v_PartIDs IS NOT NULL AND v_PartIDs != '') THEN CONCAT(' AND c.id in (', v_PartIDs, ') ') else '' end),  \n" +
                "						(case when (pMfgCodeIDs IS NOT NULL AND pMfgCodeIDs != '') THEN CONCAT(' AND c.mfgcodeID in (', pMfgCodeIDs, ') ') else '' end),  \n" +
                "                        (case when (pMountingTypeIDs IS NOT NULL AND pMountingTypeIDs != '') THEN CONCAT(' AND c.mountingTypeID in (', pMountingTypeIDs, ') ') else '' end),  \n" +
                "                        (case when (pFunctionalTypeIDs IS NOT NULL AND pFunctionalTypeIDs != '') THEN CONCAT(' AND c.functionalCategoryID in (', pFunctionalTypeIDs, ') ') else '' end),  \n" +
                "						(case when (pStandardIDs IS NOT NULL AND pStandardIDs != '' AND pStandardsClassIDs IS NOT NULL AND pStandardsClassIDs != '') THEN  \n" +
                "									CONCAT(' and exists (select 1 from component_standard_details csd where csd.componentID = c.id and csd.isDeleted = 0 AND (csd.certificateStandardID in (', pStandardIDs, ' ) OR csd.ClassID in (', pStandardsClassIDs, ' ))) ')  \n" +
                "								when (pStandardIDs IS NOT NULL AND pStandardIDs != '') THEN  \n" +
                "									CONCAT(' and exists (select 1 from component_standard_details csd where csd.componentID = c.id and csd.isDeleted = 0 AND csd.certificateStandardID in (', pStandardIDs, ' )) ')  \n" +
                "								when (pStandardsClassIDs IS NOT NULL AND pStandardsClassIDs != '') THEN  \n" +
                "									CONCAT(' and exists (select 1 from component_standard_details csd where csd.componentID = c.id and csd.isDeleted = 0 AND csd.ClassID in (', pStandardsClassIDs, ' )) ')  \n" +
                "								else ''  \n" +
                "                        end),  \n" +
                "                        (case when (pRestrictPart = 1) THEN ' AND (c.restrictUsePermanently = 1 OR c.restrictPackagingUsePermanently = 1 OR c.restrictUSEwithpermission = 1 OR c.restrictPackagingUseWithpermission = 1)' else '' end),  \n" +
                "                        /*below query need to refactor*/  \n" +
                "                        (case when (pIsAvailableToSell = 1) THEN  \n" +
                "							' AND not exists (  \n" +
                "									SELECT 	1  \n" +
                "									FROM 	rfq_lineitems_alternatepart a  \n" +
                "									INNER JOIN 	component cr ON a.mfgPNID = cr.id  \n" +
                "									LEFT OUTER JOIN component cp ON cr.packaginggroupID = cp.packaginggroupID and cp.isDeleted = 0  \n" +
                "									WHERE 	c.id = IFNULL(cp.id, cr.id)  \n" +
                "									and 	a.isDeleted = 0 and cr.isDeleted = 0  \n" +
                "									AND 	EXISTS (SELECT 	1 FROM component ca WHERE ca.id = a.partID AND ca.partStatus = 1 AND ca.category = 3 AND ca.isDeleted = 0)  \n" +
                "								)  \n" +
                "						' else '' end),  \n" +
                "					\"  \n" +
                "					inner join mfgcodemst m on c.mfgcodeID = m.id  \n" +
                "					inner join rfq_rohsmst rohs on c.RoHSStatusID = rohs.id  \n" +
                "					inner join rfq_rohsmst umid_rohs on css.rohsStatusID = umid_rohs.id  \n" +
                "					inner join uoms u on css.uom = u.id  \n" +
                "					inner join cost_category cc on css.costCategoryID = cc.id  \n" +
                "					inner join component_packagingmst cp on css.packaging = cp.id  \n" +
                "					inner join binmst b on css.binID = b.id \" ,  \n" +
                "						(Case  \n" +
                "							when (pBinId IS NOT NULL) then CONCAT(' AND css.binID = ', pBinId, ' ')  \n" +
                "							when (pWHId IS NOT NULL) then  CONCAT(' and b.WarehouseID = ', pWHId,' ')  \n" +
                "							when (pWarehouse IS NOT NULL) THEN concat(' and b.WarehouseID in  (', pWarehouse, ') ')  \n" +
                "                            else ''  \n" +
                "						end),  \n" +
                "					\"inner join warehousemst w on b.WarehouseID = w.id \",  \n" +
                "						(Case when (pwarehouseType IS NOT NULL) THEN concat(' AND find_in_set(w.warehouseType, \"', pwarehouseType,'\") ') else '' end),  \n" +
                "                    \"inner join warehousemst pw on w.parentWHID = pw.id \",  \n" +
                "						(Case when (pdepartmentIDs IS NOT NULL AND pdepartmentIDs != '') THEN CONCAT(' AND pw.id in (', pdepartmentIDs, ') ') else '' end),  \n" +
                "					\"inner join binmst fb on css.fromBin = fb.id  \n" +
                "					inner join warehousemst fw on css.fromWarehouse = fw.id  \n" +
                "					inner join warehousemst fpw on css.fromDepartment = fpw.id  \n" +
                "					inner join binmst ob on css.orgRecBin = ob.id  \n" +
                "					inner join warehousemst ow on css.orgRecWarehouse = ow.id  \n" +
                "					inner join warehousemst opw on css.orgRecDepartment = opw.id  \n" +
                "					inner join rfq_mountingtypemst rmt on c.mountingTypeID = rmt.id  \n" +
                "					left join component_mslmst cmsl on c.mslID = cmsl.id  \n" +
                "					left join rfq_packagecasetypemst rpc on c.partPackageID = rpc.id and rpc.isDeleted = 0  \n" +
                "					left join vu_genericfilescount vgf on css.id = vgf.refTransID AND vgf.gencFileOwnerType = 'component_sid_stock'  \n" +
                "					left join (  \n" +
                "								SELECT 		cssh.refUIDId,	SUM(cssh.scrappedUnit) scrappedUnit  \n" +
                "								FROM 		component_sid_stock_history cssh  \n" +
                "								where 		cssh.scrappedUnit > 0  \n" +
                "								GROUP BY 	cssh.refUIDId  \n" +
                "					) cssh on css.id = cssh.refUIDId  \n" +
                "                   left join (  \n" +
                "								SELECT 		vu.umidid,	SUM((IFNULL(vu.scrappedunit,0) - IFNULL(vu.scrapExpiredUnit,0))) AS kitScrappepUnit  \n" +
                "								FROM 		vu_material_consumption_scrapped_det vu  \n" +
                "                                LEFT JOIN  component_sid_stock_history cssh ON cssh.id = vu.componentSIDStockHistoryID AND cssh.isDeleted = 0  \n" +
                "								WHERE 		vu.scrappedunit > 0  \n" +
                "								GROUP BY 	vu.umidid  \n" +
                "					) vuu on vuu.umidid = css.id  \n" +
                "					left join mfgcodemst cust on css.customerID = cust.id and cust.mfgType = 'MFG' and cust.isCustOrDisty = 1  and cust.isDeleted = 0  \n" +
                "					left join component assy on css.assyID = assy.id and assy.category = 3 and assy.isDeleted = 0  \n" +
                "					left join component cpn_comp on css.refCPNMFGPNID = cpn_comp.id and cpn_comp.isDeleted = 0  \n" +
                "					left join mfgcodemst m_cpn on cpn_comp.mfgcodeID = m_cpn.id and m_cpn.mfgType = 'MFG' and m_cpn.isDeleted = 0  \n" +
                "					left join component supp_comp on css.refSupplierPartId = supp_comp.id and supp_comp.refSupplierMfgpnComponentID is not null and supp_comp.isDeleted = 0  \n" +
                "					left join mfgcodemst m_supp on supp_comp.mfgcodeID = m_supp.id and m_supp.mfgType = 'DIST' and m_supp.isDeleted = 0  \n" +
                "					left join (  \n" +
                "						select css_rst.refUMIDId, css_rst.RestrictedCount, css_rst.reasonForRestrict  \n" +
                "						from (  \n" +
                "							select 	rank() over(partition by rest_umid.refUMIDId order by rest_umid.id desc) rnk, count(1) over(partition by rest_umid.refUMIDId) RestrictedCount,  \n" +
                "									rest_umid.refUMIDId, rest_umid.reasonForRestrict  \n" +
                "							from component_sid_stock_restrict_umid rest_umid  \n" +
                "						) css_rst where css_rst.rnk = 1  \n" +
                "					) css_rst_umid on css_rst_umid.refUMIDId = css.id  \n" +
                "					left join (  \n" +
                "						SELECT 		k.refUIDId,  \n" +
                "									group_concat('(', c.PIDCode, ', ', s.poNumber, ', ', s.salesOrderNumber, ', ', sd.qty, ', ', c.nickName ,'#', (TRIM(TRAILING '.' FROM(CAST(TRIM(TRAILING '0' FROM fun_getBOMLineNumberByBOMLineId(k.refBOMLineID))AS CHAR)))) ,') ') kitname  \n" +
                "						FROM 		kit_allocation k force index (FK_kit_allocation_refSalesOrderDetID)  \n" +
                "						INNER JOIN 	salesorderdet sd ON k.refSalesOrderDetID = sd.id AND sd.partCategory = 3  \n" +
                "						INNER JOIN 	salesordermst s ON sd.refSalesOrderID = s.id  \n" +
                "						INNER JOIN	component c ON k.assyID = c.id  \n" +
                "						WHERE 		k.status = 'A'  \n" +
                "						GROUP BY 	k.refUIDId  \n" +
                "					) kit  ON kit.refUIDId = css.id  \n" +
                "					WHERE 	css.isdeleted = 0\",  \n" +
                "						(case when (pCustomerId IS NOT NULL AND pRefSalesOrderDetIDs IS NOT NULL AND pRefSalesOrderDetIDs != '' AND pAssyIDs IS NOT NULL AND pAssyIDs != '') THEN  \n" +
                "								CONCAT(' AND (css.id in (SELECT refUidID FROM tempAllocatedKitUIDs) OR css.customerID = ',pCustomerId, ') ')  \n" +
                "							  when (pRefSalesOrderDetIDs IS NOT NULL AND pRefSalesOrderDetIDs != '' AND pAssyIDs IS NOT NULL AND pAssyIDs != '') THEN  \n" +
                "								CONCAT(' AND css.id in (SELECT refUidID FROM tempAllocatedKitUIDs) ')  \n" +
                "							  when (pCustomerId IS NOT NULL) then  \n" +
                "								CONCAT(' AND css.customerID = ',pCustomerId,' ')  \n" +
                "                            else ''  \n" +
                "						end),  \n" +
                "                        (case when (pInventoryType IS NOT NULL) THEN CONCAT(' AND find_in_set(css.stockInventoryType, \"', pInventoryType ,'\") ') else '' end),  \n" +
                "                        (case when (pRohsStatusIDs IS NOT NULL AND pRohsStatusIDs != '') THEN CONCAT(' AND css.rohsStatusID in (',pRohsStatusIDs,') ') else '' end),  \n" +
                "                        (case when (pCostCategoryIDs IS NOT NULL AND pCostCategoryIDs != '') THEN CONCAT(' AND css.costCategoryID in (', pCostCategoryIDs, ') ') else '' end),  \n" +
                "						(case when (pDateCode IS NOT NULL AND pDateCode != '') THEN CONCAT(' AND css.dateCode in (', pDateCode, ') ') else '' end),  \n" +
                "						(case when (pIsRestrictedUMID = 1) THEN ' AND css.isUMIDRestrict = 1 ' else '' end),  \n" +
                "						(case when (pIsInternalStock = 1 AND pIsCustomerStock IS NULL) THEN ' AND css.customerConsign = 0 ' else '' end),  \n" +
                "						(case when (pIsCustomerStock = 1 AND pIsInternalStock IS NULL) THEN ' AND css.customerConsign = 1 ' else '' end),  \n" +
                "                        (case when (pExpireMaterial = 1) THEN  \n" +
                "									(case when (pExpiredDay = 0) THEN  \n" +
                "										CONCAT(' AND css.expiryDate is not null AND css.expiryDate = fun_ConvertUTCDatetimeToDataKeyDateTimeZone(\"',v_ExpiryDate,'\") ')  \n" +
                "									ELSE  \n" +
                "										CONCAT(' AND css.expiryDate is not null AND css.expiryDate BETWEEN fun_ConvertUTCDatetimeToDataKeyDateTimeZone(\"',v_ExpiryDate,'\") AND (fun_ConvertUTCDatetimeToDataKeyDateTimeZone(\"',v_ExpiryDate,'\") + INTERVAL ', pExpiredDay,' DAY ) ')  \n" +
                "									END)  \n" +
                "							  else ''  \n" +
                "						end),  \n" +
                "                        (case when (pFromDate IS NOT NULL AND pToDate IS NOT NULL) THEN  \n" +
                "								CONCAT(' AND CAST(css.createdAt AS DATE) >= \"', pFromDate, '\" AND CAST(css.createdAt AS DATE) <= \"', pToDate, '\" ')  \n" +
                "							 when (pFromDate IS NOT NULL AND pToDate IS NULL) THEN  \n" +
                "								CONCAT(' AND CAST(css.createdAt AS DATE) >= \"', pFromDate, '\" ')  \n" +
                "							 when (pToDate IS NOT NULL AND pFromDate IS NULL) THEN  \n" +
                "								CONCAT(' AND CAST(css.createdAt AS DATE) <= \"', pToDate, '\" ')  \n" +
                "							 else ''  \n" +
                "                        end),  \n" +
                "						v_DescriptionWhereClause,  \n" +
                "                        pInnerQueryWhereClause,  \n" +
                "				\") As tempUMID\"  \n" +
                "			);  \n" +
                "	PREPARE tempSQLQuery FROM @temp_component_sid_stock;  \n" +
                "	EXECUTE tempSQLQuery;  \n" +
                "	DEALLOCATE PREPARE tempSQLQuery;  \n" +
                "  \n" +
                "    # Update count for self documents  \n" +
                "	Update temp_component_sid_stock t, vu_cofcdocumentcount g  \n" +
                "	set t.cocDocumentCount = g.cofcCount  \n" +
                "	where g.refTransID = t.id and g.gencFileOwnerType = 'component_sid_stock';  \n" +
                "  \n" +
                "	# Update count for parent documents  \n" +
                "	Update temp_component_sid_stock t, vu_cofcdocumentcount g  \n" +
                "	set t.parentCofCDocumentCount = g.cofcCount  \n" +
                "	where g.refTransID = t.parentUIDId and g.gencFileOwnerType = 'component_sid_stock';  \n" +
                "  \n" +
                "    # Update CofC detail  \n" +
                "	Update 	temp_component_sid_stock t, vu_umidcofcdetail ps  \n" +
                "	set  	t.packingSlipName =  (Case when (ps.cofcCount > 0 or t.cocDocumentCount > 0 or t.parentCofCDocumentCount > 0)  \n" +
                "											then CONCAT(ps.mfgCode, ps.packingSlipNumber)  \n" +
                "										else null  \n" +
                "								  end),  \n" +
                "			t.packingSupplierName = fun_GetFormattedMfgCode(ps.mfgCode, ps.mfgName, vMfgCodeFormat),  \n" +
                "			t.packingSlipId = ps.packingSlipId,  \n" +
                "			t.packingSlipSupplierId = ps.packingSlipSupplierId,  \n" +
                "            t.packingSlipNumber = ps.packingSlipNumber  \n" +
                "	where 	ps.refComponentSidStockID =  IFNULL(t.parentUIDId, t.id)  \n" +
                "	and 	t.stockInventoryType in ('NI', 'SI');  \n" +
                "  \n" +
                "	# Update CofC detail  \n" +
                "	Update 	temp_component_sid_stock t  \n" +
                "	set  	t.packingSlipName =  IFNULL(t.parentUID, t.uid)  \n" +
                "	where 	t.stockInventoryType in ('OI', 'AI', 'SI')  \n" +
                "	and		t.packingSlipId is null  \n" +
                "	and		(t.cocDocumentCount > 0 or t.parentCofCDocumentCount > 0);  \n" +
                "  \n" +
                "    # Update created by role  \n" +
                "    Update temp_component_sid_stock t  \n" +
                "    inner join roles r on r.id = t.createByRoleId  \n" +
                "	set t.createdbyRole = r.name;  \n" +
                "  \n" +
                "    # Update updated by role  \n" +
                "    Update temp_component_sid_stock t  \n" +
                "    inner join roles r on r.id = t.updateByRoleId  \n" +
                "	set t.updatedbyRole = r.name;  \n" +
                "  \n" +
                "    # Update created by name  \n" +
                "    Update temp_component_sid_stock t  \n" +
                "    inner join users u on u.id = t.createdBy  \n" +
                "    inner join employees emp on emp.id = u.employeeID  \n" +
                "	set t.createdByName = emp.initialName, t.createdUserCode = u.username ;  \n" +
                "  \n" +
                "    # Update updated by name  \n" +
                "    Update temp_component_sid_stock t  \n" +
                "    inner join users u on  u.id = t.updatedBy  \n" +
                "    inner join employees emp  on emp.id = u.employeeID  \n" +
                "	set t.umidModifiedBy = emp.initialName ;  \n" +
                "  \n" +
                "    # Update MFR Date Code Format  \n" +
                "    Update temp_component_sid_stock t  \n" +
                "	inner join date_code_format d on d.id = t.mfrDateCodeFormatID  \n" +
                "	set t.mfrDateCodeFormat = d.dateCodeFormat;  \n" +
                "  \n" +
                "    # Update In Transit Data  \n" +
                "	Update temp_component_sid_stock t  \n" +
                "    inner join smartcarttransaction s on s.reelBarCode = t.uid and s.isInTransit = 1 and s.transactionid IS NOT NULL  \n" +
                "	set t.isTransit = 'Yes',  \n" +
                "		t.searchUser = (Case when (messagetype = 104) then fun_getUserNameByID(s.createdBy)  \n" +
                "							when (messagetype = 1001) then 'Unauthorized'  \n" +
                "							else ''  \n" +
                "                        end);  \n" +
                "  \n" +
                "	set @vFromSQLQuery = concat(\" Select * from temp_component_sid_stock WHERE\", pWhereClause);  \n" +
                "  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \", @vFromSQLQuery, \") as a\");  \n" +
                "	PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT DISTINCT warehouseID as ID,warehouse as Name from ( \", @vFromSQLQuery, \" AND warehouseID) as warehouseDetail\");  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "	SET @SQLStatement3 = CONCAT(\" SELECT DISTINCT mfgcodeID AS id, mfg AS mfgCodeName from ( \", @vFromSQLQuery, \" AND mfgcodeID ) as mfrDetail\");  \n" +
                "	PREPARE query3 FROM @SQLStatement3;  \n" +
                "	EXECUTE query3;  \n" +
                "	DEALLOCATE PREPARE query3;  \n" +
                "  \n" +
                "    SET @SQLStatement4 = CONCAT(\" SELECT DISTINCT packingSlipSupplierId AS id, packingSupplierName AS  mfgCodeName from ( \", @vFromSQLQuery, \" AND packingSlipSupplierId ) as supplierDetail\");  \n" +
                "	PREPARE query4 FROM @SQLStatement4;  \n" +
                "	EXECUTE query4;  \n" +
                "	DEALLOCATE PREPARE query4;  \n" +
                "  \n" +
                "	SET @vSQLMainQuery =  CONCAT(@vFromSQLQuery, \" \", pOrderBy, \" \" , rowNumWhere);  \n" +
                "    PREPARE mainQuery FROM @vSQLMainQuery;  \n" +
                "	EXECUTE mainQuery;  \n" +
                "	DEALLOCATE PREPARE mainQuery;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 04-03-2022 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1354,'1.00','V1','Bug 42084: [Main Branch] Supplier showing blank in section once applied filters at UMID list page - CP'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1354:
            allDbChangesArray.push(
                /* **************************** New Script -> 04-03-2022 ******************************************* */
                "DROP procedure IF EXISTS `Sproc_GetReceivingMaterial`;  \n" +
                "CREATE PROCEDURE `Sproc_GetReceivingMaterial`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pWHId INT,  \n" +
                "	IN pBinId INT,  \n" +
                "	IN pFunctionalTypeIDs VARCHAR(16383),  \n" +
                "	IN pMountingTypeIDs VARCHAR(16383),  \n" +
                "	IN pRefSalesOrderDetIDs VARCHAR(16383),  \n" +
                "	IN pAssyIDs VARCHAR(16383),  \n" +
                "	IN pRestrictPart TINYINT,  \n" +
                "	IN pExpireMaterial TINYINT,  \n" +
                "	IN pPartId INT,  \n" +
                "	IN pIsShowPackagingAlias TINYINT,  \n" +
                "	IN pStandardIDs VARCHAR(16383),  \n" +
                "	IN pStandardsClassIDs VARCHAR(16383),  \n" +
                "	IN pCostCategoryIDs VARCHAR(16383),  \n" +
                "	IN pDateCode VARCHAR(16383),  \n" +
                "	IN pIsAvailableToSell TINYINT,  \n" +
                "	IN pIsRestrictedUMID TINYINT,  \n" +
                "	IN pIsInternalStock TINYINT,  \n" +
                "	IN pIsCustomerStock TINYINT,  \n" +
                "	IN pdepartmentIDs VARCHAR(16383),  \n" +
                "	IN pwarehouseType VARCHAR(255),  \n" +
                "	IN pWarehouse VARCHAR(16383),  \n" +
                "	IN pExpiredDay INT,  \n" +
                "	IN pRohsStatusIDs VARCHAR(16383),  \n" +
                "	IN pCustomerId INT,  \n" +
                "	IN pFromDate DATE,  \n" +
                "	IN pToDate DATE,  \n" +
                "	IN pSearchTextAttribute LONGTEXT,  \n" +
                "    IN pMfgCodeIDs VARCHAR(16383),  \n" +
                "    IN pSupplierCodeIDs VARCHAR(16383),  \n" +
                "	IN pInventoryType VARCHAR(255),  \n" +
                "    IN pInnerQueryWhereClause VARCHAR(16383),  \n" +
                "    IN pIsNonCofc TINYINT,  \n" +
                "    IN pEmployeeIDs VARCHAR(16383)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255);  \n" +
                "	DECLARE v_DescriptionWhereClause LONGTEXT;  \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "	DECLARE attributeSearchString LONGTEXT;  \n" +
                "	DECLARE attributeSearchLength INT DEFAULT 0;  \n" +
                "	DECLARE attributeSearchChip  VARCHAR(500) DEFAULT NULL;  \n" +
                "	DECLARE attributeSearchSubLength INT DEFAULT 0;  \n" +
                "	DECLARE groupConcateSepationValue VARCHAR(50);  \n" +
                "    DECLARE v_ExpiryDate datetime;  \n" +
                "    DECLARE v_PartIDs VARCHAR(16383);  \n" +
                "	DECLARE vMfgCodeFormat INT;  \n" +
                "  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
                "	SELECT fun_getMFGCodeNameFormat() INTO vMfgCodeFormat;  \n" +
                "	SET v_DescriptionWhereClause = '';  \n" +
                "    SET v_ExpiryDate = fun_DatetimetoUTCDateTime();  \n" +
                "  \n" +
                "	IF (pOrderBy IS NOT NULL) THEN  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy);  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = \"ORDER BY pkgQty DESC\";  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '\"\"') THEN  \n" +
                "		SET pWhereClause = ' 1=1';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pInnerQueryWhereClause IS NULL OR pInnerQueryWhereClause = '\"\"') THEN  \n" +
                "		SET pInnerQueryWhereClause = ' ';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF(pIsNonCofc = 1) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND  packingSlipName IS NULL ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    /* Non COFc records filter */  \n" +
                "	IF(pSupplierCodeIDs IS NOT NULL AND pSupplierCodeIDs != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND packingSlipSupplierId in (', pSupplierCodeIDs, ') ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF(pEmployeeIDs IS NOT NULL AND pEmployeeIDs != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND createdBy in (', pEmployeeIDs, ') ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pPartId IS NOT NULL AND pPartId != '') THEN  \n" +
                "		IF(pIsShowPackagingAlias = 1) THEN  \n" +
                "			SELECT 	group_concat(IFNULL(cp.id, c.id))  \n" +
                "            into	v_PartIDs  \n" +
                "			FROM 	component c  \n" +
                "			LEFT JOIN 	component cp ON c.packagingGroupid = cp.packagingGroupid AND cp.isDeleted = 0  \n" +
                "			WHERE 	c.id = pPartId  \n" +
                "			AND 	c.isDeleted = 0;  \n" +
                "		ELSE  \n" +
                "			select pPartId into v_PartIDs;  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/*below query need to refactor*/  \n" +
                "	IF (pSearchTextAttribute IS NOT NULL AND pSearchTextAttribute != '') THEN  \n" +
                "		SELECT `values` INTO groupConcateSepationValue FROM systemconfigrations WHERE `key` = 'GroupConcatSeparator' AND isDeleted = 0;  \n" +
                "		SET attributeSearchString = pSearchTextAttribute;  \n" +
                "		do_this:  \n" +
                "		LOOP  \n" +
                "			SET attributeSearchLength = CHAR_LENGTH(attributeSearchString);  \n" +
                "			SET attributeSearchChip = SUBSTRING_INDEX(attributeSearchString, groupConcateSepationValue, 1);  \n" +
                "			SET attributeSearchSubLength = CHAR_LENGTH(attributeSearchChip);  \n" +
                "			SET attributeSearchString = MID(attributeSearchString, (attributeSearchSubLength+4), attributeSearchLength);  \n" +
                "			SET v_DescriptionWhereClause = CONCAT(v_DescriptionWhereClause, ' AND (c.mfgPNDescription REGEXP ''(^|[[:space:]])', attributeSearchChip ,'([[:space:]]|$)'' ');  \n" +
                "			SET v_DescriptionWhereClause = CONCAT(v_DescriptionWhereClause, ' OR c.detailDescription REGEXP ''(^|[[:space:]])', attributeSearchChip ,'([[:space:]]|$)'' ) ');  \n" +
                "			IF (attributeSearchString = NULL OR attributeSearchString = \"\") THEN  \n" +
                "				LEAVE do_this;  \n" +
                "			END IF;  \n" +
                "		END LOOP do_this;  \n" +
                "	END IF;  \n" +
                "	IF(pCustomerId IS NOT NULL AND (pRefSalesOrderDetIDs IS NULL OR pRefSalesOrderDetIDs='') AND (pAssyIDs IS NULL OR pAssyIDs='')) THEN  \n" +
                "		SELECT 	GROUP_CONCAT(DISTINCT partId),GROUP_CONCAT(DISTINCT refSalesOrderDetID) INTO pAssyIDs,pRefSalesOrderDetIDs  \n" +
                "		FROM 	kit_allocation_assy_detail  \n" +
                "		WHERE 	isDeleted = 0  \n" +
                "			AND partId IN (SELECT id FROM component WHERE isDeleted = 0 AND mfgcodeid=pCustomerId);  \n" +
                "	END IF;  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS tempAllocatedKitUIDs;  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS tempAllocatedKitUIDs (refUidID INT);  \n" +
                "	IF(pRefSalesOrderDetIDs IS NOT NULL AND pRefSalesOrderDetIDs != '' AND pAssyIDs IS NOT NULL AND pAssyIDs != '') THEN  \n" +
                "		INSERT INTO tempAllocatedKitUIDs (refUidID)  \n" +
                "		SELECT 	k.refUIDId  \n" +
                "		FROM 	kit_allocation k  \n" +
                "		WHERE 	FIND_IN_SET(k.refSalesOrderDetID, pRefSalesOrderDetIDs)  \n" +
                "		AND	FIND_IN_SET(k.assyID, pAssyIDs)  \n" +
                "		AND	k.status = 'A';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    DROP temporary table if exists temp_component_sid_stock;  \n" +
                "    CREATE temporary table temp_component_sid_stock(  \n" +
                "		  id int NOT NULL DEFAULT '0',  \n" +
                "		  scanlabel varchar(1000) DEFAULT NULL,  \n" +
                "		  umidPrefix varchar(20) DEFAULT NULL,  \n" +
                "		  uid varchar(15) DEFAULT NULL,  \n" +
                "		  receiveMaterialType varchar(100) DEFAULT NULL,  \n" +
                "		  displayReceiveMaterialType varchar(37) DEFAULT NULL,  \n" +
                "		  stockInventoryType varchar(10) DEFAULT NULL,  \n" +
                "		  displayStockInventoryType varchar(39) DEFAULT NULL,  \n" +
                "		  fromUIDId int DEFAULT NULL,  \n" +
                "		  fromUID varchar(15) DEFAULT NULL,  \n" +
                "		  parentUIDId int DEFAULT NULL,  \n" +
                "		  parentUID varchar(15) DEFAULT NULL,  \n" +
                "		  mfgcodeID int NOT NULL,  \n" +
                "		  mfg text,  \n" +
                "		  refcompid int DEFAULT NULL,  \n" +
                "		  mfgPN varchar(100) NOT NULL,  \n" +
                "		  PIDCode varchar(109) NOT NULL,  \n" +
                "		  packageQty decimal(18,6) DEFAULT NULL,  \n" +
                "		  mslLevel varchar(58) DEFAULT NULL,  \n" +
                "		  RoHSStatusID int NOT NULL,  \n" +
                "		  rohsIcon varchar(255) DEFAULT NULL,  \n" +
                "		  rohsName varchar(50) DEFAULT NULL,  \n" +
                "		  mfgPNDescription varchar(2000) NOT NULL DEFAULT '',  \n" +
                "		  spq decimal(18,8) DEFAULT NULL,  \n" +
                "		  pkgQty decimal(18,8) DEFAULT NULL,  \n" +
                "		  pkgUnit decimal(18,8) DEFAULT NULL,  \n" +
                "		  uom int DEFAULT NULL,  \n" +
                "          uomClassID int DEFAULT NULL,  \n" +
                "		  uomName varchar(100) NOT NULL,  \n" +
                "		  orgPkgUnit decimal(18,8) NOT NULL DEFAULT '0.00000000',  \n" +
                "		  orgQty decimal(18,8) DEFAULT NULL,  \n" +
                "		  packaginggroupID int DEFAULT NULL,  \n" +
                "		  packaging int DEFAULT NULL,  \n" +
                "		  packagingName varchar(100) NOT NULL,  \n" +
                "		  printStatus tinyint(1) NOT NULL DEFAULT '0',  \n" +
                "		  tentativePrice decimal(18,8) NOT NULL DEFAULT '0.00000000',  \n" +
                "		  costScrapQty decimal(65,20) DEFAULT NULL,  \n" +
                "		  costCategoryID int DEFAULT NULL,  \n" +
                "		  costCategory varchar(147) DEFAULT NULL,  \n" +
                "		  lotCode varchar(255) DEFAULT NULL,  \n" +
                "		  dateCode varchar(10) DEFAULT NULL,  \n" +
                "		  UMIDrohsStatusID int NOT NULL,  \n" +
                "		  UMIDrohsStatus varchar(50) DEFAULT NULL,  \n" +
                "		  binID int DEFAULT NULL,  \n" +
                "		  location varchar(110) DEFAULT NULL,  \n" +
                "		  side varchar(5) NOT NULL DEFAULT '',  \n" +
                "		  warehouseID int DEFAULT NULL,  \n" +
                "		  warehouse varchar(50) NOT NULL,  \n" +
                "		  warehouseType varchar(50) DEFAULT NULL,  \n" +
                "		  department varchar(50) NOT NULL,  \n" +
                "		  departmentID int NOT NULL DEFAULT '0',  \n" +
                "		  fromBin int DEFAULT NULL,  \n" +
                "		  fromBinName varchar(110) DEFAULT NULL,  \n" +
                "		  fromSide varchar(5) NOT NULL DEFAULT '',  \n" +
                "		  fromWarehouse int DEFAULT NULL,  \n" +
                "		  fromWHName varchar(50) NOT NULL,  \n" +
                "		  fromDepartment int DEFAULT NULL,  \n" +
                "		  fromDepartmentName varchar(50) NOT NULL,  \n" +
                "		  orgRecBin int DEFAULT NULL,  \n" +
                "		  orgRecBinName varchar(110) DEFAULT NULL,  \n" +
                "		  orgRecWarehouse int DEFAULT NULL,  \n" +
                "		  orgRecWHName varchar(50) NOT NULL,  \n" +
                "		  orgRecDepartment int DEFAULT NULL,  \n" +
                "		  orgRecDepartmentName varchar(50) NOT NULL,  \n" +
                "		  expiryDate date DEFAULT NULL,  \n" +
                "		  expiredStatus varchar(7) DEFAULT NULL,  \n" +
                "		  pcbPerArray int DEFAULT NULL,  \n" +
                "		  nickName varchar(50) DEFAULT NULL,  \n" +
                "		  specialNote varchar(1000) DEFAULT NULL,  \n" +
                "		  isinStk tinyint(1) DEFAULT NULL,  \n" +
                "		  woNumber varchar(255) DEFAULT NULL,  \n" +
                "		  refRestrictUMIDId int DEFAULT NULL,  \n" +
                "		  isUMIDRestrict tinyint(1) DEFAULT NULL,  \n" +
                "		  UMIDRestricted varchar(3) NOT NULL DEFAULT '',  \n" +
                "		  restrictUsePermanently tinyint NOT NULL DEFAULT '0',  \n" +
                "		  restrictUSEwithpermission tinyint NOT NULL DEFAULT '0',  \n" +
                "		  restrictPackagingUsePermanently tinyint(1) DEFAULT NULL,  \n" +
                "		  restrictPackagingUseWithpermission tinyint(1) DEFAULT NULL,  \n" +
                "		  reasonUMIDRestricted longtext CHARACTER SET utf8,  \n" +
                "		  countOfRestrictUMID bigint DEFAULT NULL,  \n" +
                "		  mountingTypeID int NOT NULL,  \n" +
                "		  mountingTypeName varchar(50) DEFAULT NULL,  \n" +
                "		  externalPartPackage varchar(200) DEFAULT NULL,  \n" +
                "		  partPackage varchar(50) DEFAULT NULL,  \n" +
                "		  internalPartPackage varchar(50) DEFAULT NULL,  \n" +
                "		  isCustom tinyint NOT NULL DEFAULT '0',  \n" +
                "		  detailDescription text,  \n" +
                "		  pictureCount bigint NOT NULL DEFAULT '0',  \n" +
                "		  customerID int DEFAULT NULL,  \n" +
                "		  customer text,  \n" +
                "		  assyID int DEFAULT NULL,  \n" +
                "		  assembly varchar(109),  \n" +
                "		  cpn varchar(3) NOT NULL DEFAULT '',  \n" +
                "		  mfgAvailable varchar(3) NOT NULL DEFAULT '',  \n" +
                "		  customerConsign varchar(3) NOT NULL DEFAULT '',  \n" +
                "          cpnMFGCodeID INT DEFAULT NULL,  \n" +
                "		  cpnMFGCode text,  \n" +
                "		  refCPNMFGPNID int DEFAULT NULL,  \n" +
                "		  cpnMFGPN varchar(100),  \n" +
                "		  refSupplierPartId int DEFAULT NULL,  \n" +
                "		  supplierMFGCode text,  \n" +
                "		  supplieMFGPN varchar(100),  \n" +
                "		  totalScrapUnit decimal(40,8) DEFAULT NULL,  \n" +
                "		  perScrapQty decimal(55,12) DEFAULT NULL,  \n" +
                "		  isTransit varchar(10) DEFAULT NULL,  \n" +
                "		  searchUser varchar(50) DEFAULT NULL,  \n" +
                "		  mfrDateCodeFormatID int DEFAULT NULL,  \n" +
                "		  mfrDateCode varchar(50) DEFAULT NULL,  \n" +
                "		  mfrDateCodeFormat varchar(50) DEFAULT NULL,  \n" +
                "		  createdAt varchar(50) DEFAULT NULL,  \n" +
                "		  createdBy varchar(255) NOT NULL,  \n" +
                "		  createdByName varchar(50) DEFAULT NULL,  \n" +
                "		  createdbyRole varchar(255) DEFAULT NULL,  \n" +
                "		  createdUserCode varchar(255) DEFAULT NULL,  \n" +
                "		  updatedAt varchar(50) DEFAULT NULL,  \n" +
                "		  updatedBy varchar(255) DEFAULT NULL,  \n" +
                "		  umidModifiedBy varchar(50) DEFAULT NULL,  \n" +
                "		  updatedbyRole varchar(255) DEFAULT NULL,  \n" +
                "		  allocatedToKit text,  \n" +
                "		  packingSlipName varchar(305) DEFAULT NULL,  \n" +
                "		  packingSupplierName text,  \n" +
                "		  packingSlipId int DEFAULT NULL,  \n" +
                "		  packingSlipSupplierId int DEFAULT NULL,  \n" +
                "          packingSlipNumber VARCHAR(100) DEFAULT NULL,  \n" +
                "          cocDocumentCount int default 0,  \n" +
                "          parentCofCDocumentCount int default 0,  \n" +
                "          createByRoleId int default null,  \n" +
                "          updateByRoleId int default null,  \n" +
                "          isReservedStock TINYINT DEFAULT FALSE,  \n" +
                "          reservedStock VARCHAR(10),  \n" +
                "          custAssyPN varchar(100) DEFAULT NULL  \n" +
                "		);  \n" +
                "	SET @temp_component_sid_stock = CONCAT(\"Insert into temp_component_sid_stock  \n" +
                "					(		id, 				scanlabel, 			umidPrefix, 			uid,					receiveMaterialType, 	displayReceiveMaterialType,  \n" +
                "							stockInventoryType, displayStockInventoryType, 					fromUIDId, 				fromUID, 				parentUIDId,  \n" +
                "                            parentUID, 			mfgcodeID, 			mfg, 					refcompid, 				mfgPN, 					PIDCode,  \n" +
                "                            packageQty, 		mslLevel, 			RoHSStatusID, 			rohsIcon, 				rohsName, 				mfgPNDescription,  \n" +
                "                            spq, 				pkgQty, 			pkgUnit, 				uom, 					uomClassID, 			uomName,  \n" +
                "                            orgPkgUnit, 		orgQty, 			packaginggroupID, 		packaging, 				packagingName, 			printStatus,  \n" +
                "                            tentativePrice, 	costScrapQty, 		costCategoryID, 		costCategory, 			lotCode, 				dateCode,  \n" +
                "                            UMIDrohsStatusID, 	UMIDrohsStatus, 	binID, 					location, 				side, 					warehouseID,  \n" +
                "                            warehouse, 			warehouseType, 		department, 			departmentID, 			fromBin, 				fromBinName,  \n" +
                "                            fromSide, 			fromWarehouse, 		fromWHName, 			fromDepartment, 		fromDepartmentName, 	orgRecBin,  \n" +
                "                            orgRecBinName, 		orgRecWarehouse, 	orgRecWHName, 			orgRecDepartment, 		orgRecDepartmentName, 	expiryDate,  \n" +
                "                            expiredStatus, 		pcbPerArray, 		nickName, 				specialNote, 			isinStk, 				woNumber,  \n" +
                "                            refRestrictUMIDId, 	isUMIDRestrict, 	UMIDRestricted, 		restrictUsePermanently, restrictUSEwithpermission,  \n" +
                "                            restrictPackagingUsePermanently, 		restrictPackagingUseWithpermission, 			reasonUMIDRestricted, 	countOfRestrictUMID,  \n" +
                "                            mountingTypeID, 	mountingTypeName, 	externalPartPackage, 	partPackage, 			internalPartPackage, 	isCustom,  \n" +
                "                            detailDescription, 	pictureCount, 		customerID, 			customer, 				assyID,					assembly,  \n" +
                "                            cpn, 				mfgAvailable, 		customerConsign, 		cpnMFGCodeID, 			cpnMFGCode, 			refCPNMFGPNID,  \n" +
                "                            cpnMFGPN, 			refSupplierPartId, 	supplierMFGCode, 		supplieMFGPN, 			totalScrapUnit, 		perScrapQty,  \n" +
                "                            isTransit, 			searchUser, 		mfrDateCodeFormatID, 	mfrDateCode, 			mfrDateCodeFormat, 		createdAt,  \n" +
                "                            createdBy, 			createdByName, 		createdbyRole, 			createdUserCode, 		createByRoleId, 		updatedAt,  \n" +
                "                            updatedBy, 			umidModifiedBy, 	updatedbyRole, 			updateByRoleId, 		allocatedToKit, 		packingSlipName,  \n" +
                "                            packingSupplierName,packingSlipId, 		packingSlipSupplierId, 	packingSlipNumber,		isReservedStock,		reservedStock,  \n" +
                "                            custAssyPN)  \n" +
                "					SELECT 	id,					scanlabel,			umidPrefix,  			uid, 					receiveMaterialType, 	displayReceiveMaterialType,  \n" +
                "							stockInventoryType, displayStockInventoryType,					fromUIDId, 				fromUID, 				parentUIDId,  \n" +
                "							parentUID,    		mfgcodeID,		 	mfg,					refcompid,				mfgPN, 					PIDCode,  \n" +
                "							packageQty, 	 	mslLevel,			RoHSStatusID,			rohsIcon, 				rohsName,				mfgPNDescription,  \n" +
                "							spq,				pkgQty, 			pkgUnit,   		 		uom,  					uomClassID,				uomName,  \n" +
                "                            orgPkgUnit,      	orgQty, 			packaginggroupID,		packaging,				packagingName,  		printStatus,  \n" +
                "                            tentativePrice,   	costScrapQty,		costCategoryID,			costCategory,			lotCode,  \n" +
                "							dateCode,			UMIDrohsStatusID,   UMIDrohsStatus,    	 	binID,					location,				side,  \n" +
                "							warehouseID,		warehouse,			warehouseType,			department, 			departmentID,			fromBin,  \n" +
                "							fromBinName, 		fromSide,  			fromWarehouse,  		fromWHName,				fromDepartment,			fromDepartmentName,  \n" +
                "							orgRecBin,			orgRecBinName,		orgRecWarehouse,		orgRecWHName,			orgRecDepartment, 		orgRecDepartmentName,  \n" +
                "							expiryDate,			expiredStatus,		pcbPerArray, 			nickName, 		 	 	specialNote,			isinStk,  \n" +
                "							woNumber,       	refRestrictUMIDId,	isUMIDRestrict,			UMIDRestricted,		    restrictUsePermanently,	restrictUSEwithpermission,  \n" +
                "							restrictPackagingUsePermanently,		restrictPackagingUseWithpermission,				reasonUMIDRestricted,	countOfRestrictUMID,  \n" +
                "							mountingTypeID,		mountingTypeName,  	externalPartPackage,	partPackage,			internalPartPackage, 	isCustom,  \n" +
                "							detailDescription, 	pictureCount, 	  	customerID,				customer,		 		assyID,					assembly,  \n" +
                "							cpn,				mfgAvailable, 	 	customerConsign,		cpnMFGCodeID,			cpnMFGCode, 		 	refCPNMFGPNID,  \n" +
                "                            cpnMFGPN,  			refSupplierPartId,	supplierMFGCode,		supplieMFGPN,			totalScrapUnit,			perScrapQty,  \n" +
                "							isTransit,			searchUser,       	mfrDateCodeFormatID,	mfrDateCode, 			mfrDateCodeFormat,		createdAt,  \n" +
                "							createdBy,			createdByName,	  	createdbyRole,			createdUserCode, 		createByRoleId,			updatedAt,  \n" +
                "                            updatedBy,			umidModifiedBy,		updatedbyRole,			updateByRoleId ,		allocatedToKit,			packingSlipName,  \n" +
                "                            packingSupplierName,packingSlipId,		packingSlipSupplierId,	packingSlipNumber,		isReservedStock,		reservedStock,  \n" +
                "                            custAssyPN  \n" +
                "		FROM 		(  \n" +
                "					SELECT 		css.id,						css.scanlabel,				css.prefix umidPrefix,		css.uid,					css.receiveMaterialType,  \n" +
                "								(CASE WHEN css.receiveMaterialType = 'PP' THEN 'Purchased Part'  \n" +
                "										WHEN css.receiveMaterialType = 'CP' THEN 'Customer Consigned Part'  \n" +
                "										ELSE NULL  \n" +
                "								END) displayReceiveMaterialType,  \n" +
                "								css.stockInventoryType,  \n" +
                "								(CASE WHEN css.stockInventoryType = 'NI' THEN 'New Incoming Stock'  \n" +
                "										WHEN css.stockInventoryType = 'OI' THEN 'Move Non-Q2C to Q2C Stock'  \n" +
                "										WHEN css.stockInventoryType = 'AI' THEN 'Non-UMID Assembly Stock'  \n" +
                "										WHEN css.stockInventoryType = 'SI' THEN 'Split UMID'  \n" +
                "										ELSE NULL  \n" +
                "								END) displayStockInventoryType,  \n" +
                "								css.fromUIDId,				css.fromUID, 				css.parentUIDId, 			css.parentUID,      		c.mfgcodeID,  \n" +
                "								fun_GetFormattedMfgCode(m.mfgCode, m.mfgName,\", vMfgCodeFormat ,\") AS mfg,			css.refcompid,				c.mfgPN,					c.PIDCode,  \n" +
                "								c.packageQty,				CONCAT(cmsl.levelRating, ' (', cmsl.`time` ,')') mslLevel,							c.RoHSStatusID,  \n" +
                "								rohs.rohsIcon,				rohs.name  rohsName,		c.mfgPNDescription,			css.spq,					css.pkgQty,  \n" +
                "								css.pkgUnit,				css.uom,					u.measurementTypeID uomClassID,							u.unitName uomName,  \n" +
                "                                IFNULL(css.orgPkgUnit, 0) orgPkgUnit, 					css.orgQty,					c.packaginggroupID,			css.packaging,  \n" +
                "                                cp.name packagingName,		css.printStatus, 			IFNULL(c.price, 0) tentativePrice,  \n" +
                "                                ROUND((((IFNULL(cssh.scrappedUnit,0) + IFNULL(vuu.kitScrappepUnit,0))/css.orgPkgUnit) * IFNULL(c.price, 0)), 2) costScrapQty,  \n" +
                "                                ROUND((((IFNULL(cssh.scrappedUnit,0) + IFNULL(vuu.kitScrappepUnit,0))/css.orgPkgUnit) * 100), 2) perScrapQty,  \n" +
                "                                css.costCategoryID, 		CONCAT(cc.categoryName, ' (', cc.`from`, ' - ', cc.`to`, ' )') costCategory,  \n" +
                "								css.lotCode,				css.dateCode,				css.rohsStatusID UMIDrohsStatusID,    					umid_rohs.name UMIDrohsStatus,  \n" +
                "								css.binID, 					b.name location,			(CASE WHEN b.smartCartSide = 0 THEN 'Left' WHEN b.smartCartSide = 1 THEN  'Right' ELSE '' END) side,  \n" +
                "								b.warehouseID,				w.name warehouse,			w.warehouseType,  			pw.name department,      	pw.id departmentID,  \n" +
                "								css.fromBin,				fb.name fromBinName,		(CASE WHEN fb.smartCartSide = 0 THEN 'Left' WHEN fb.smartCartSide = 1 THEN  'Right' ELSE '' END) fromSide,  \n" +
                "								css.fromWarehouse,      	fw.name fromWHName,			css.fromDepartment,     	fpw.name fromDepartmentName,  \n" +
                "								css.orgRecBin,          	ob.name orgRecBinName,		css.orgRecWarehouse,    	ow.name orgRecWHName, 		css.orgRecDepartment,  \n" +
                "								opw.name orgRecDepartmentName,	css.expiryDate,			(CASE WHEN (css.expiryDate < '\", v_ExpiryDate, \"') THEN 'Expired' ELSE NULL END) AS expiredStatus,  \n" +
                "								css.pcbPerArray,			css.nickName,				css.specialNote,			css.isinStk,   				css.woNumber,  \n" +
                "								css.refRestrictUMIDId, 		css.isUMIDRestrict,			(CASE WHEN (css.isUMIDRestrict = 0) THEN 'No' WHEN (css.isUMIDRestrict = 1) THEN 'Yes' ELSE '' END) AS UMIDRestricted,  \n" +
                "								c.restrictUsePermanently,	c.restrictUSEwithpermission,		c.restrictPackagingUsePermanently,				c.restrictPackagingUseWithpermission,  \n" +
                "								css_rst_umid.reasonForRestrict reasonUMIDRestricted, 			css_rst_umid.RestrictedCount countOfRestrictUMID,  \n" +
                "								c.mountingTypeID,	        rmt.name mountingTypeName,	 		c.partPackageID, 			c.partPackage externalPartPackage,  \n" +
                "								rpc.name partPackage,		rpc.name internalPartPackage, 		c.isCustom,                 c.detailDescription,  \n" +
                "								IFNULL(vgf.cnt, 0) pictureCount,		css.customerID,  \n" +
                "								fun_GetFormattedMfgCode(cust.mfgCode, cust.mfgName,\", vMfgCodeFormat ,\") AS customer,  \n" +
                "								css.assyID,					assy.PIDCode assembly,  \n" +
                "								(CASE WHEN (css.cpn = 0) THEN 'No' WHEN (css.cpn = 1) THEN 'Yes' ELSE '' END) AS cpn,  \n" +
                "								(CASE WHEN (css.mfgAvailabel = 0) THEN 'No' WHEN (css.mfgAvailabel = 1) THEN 'Yes' ELSE '' END) AS mfgAvailable,  \n" +
                "								(CASE WHEN (css.customerConsign = 0) THEN 'No' WHEN (css.customerConsign = 1) THEN 'Yes' ELSE '' END) AS customerConsign,  \n" +
                "								css.refCPNMFGPNID,	 m_cpn.id cpnMFGCodeID,  \n" +
                "                                fun_GetFormattedMfgCode(m_cpn.mfgCode, m_cpn.mfgName,\", vMfgCodeFormat ,\") AS cpnMFGCode,  \n" +
                "                                cpn_comp.mfgPN cpnMFGPN,  \n" +
                "                                css.refSupplierPartId,  \n" +
                "								fun_GetFormattedMfgCode(m_supp.mfgCode, m_supp.mfgName,\", vMfgCodeFormat ,\") AS supplierMFGCode,  \n" +
                "                                supp_comp.mfgPN supplieMFGPN,  \n" +
                "								(IFNULL(cssh.scrappedUnit,0) + IFNULL(vuu.kitScrappepUnit,0)) totalScrapUnit,  \n" +
                "								null isTransit,  \n" +
                "								null searchUser,  \n" +
                "								css.mfrDateCodeFormatID,        css.mfrDateCode,              null mfrDateCodeFormat,  \n" +
                "								css.createdAt createdAtFilter,  	fun_ApplyCommonDateTimeFormatByParaValue(css.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAt,  \n" +
                "								css.createdBy,			(Case when css.createdBy = 'Auto' then 'Auto' else null end) createdByName,		null createdbyRole,  css.createByRoleId,  \n" +
                "								(Case when css.createdBy = 'Auto' then 'Auto' else null end) createdUserCode,  \n" +
                "								fun_ApplyCommonDateTimeFormatByParaValue(css.updatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt,  \n" +
                "								css.updatedBy,			(Case when css.updatedBy = 'Auto' then 'Auto' else null end) umidModifiedBy,   null updatedbyRole,    css.updateByRoleId,  \n" +
                "								kit.kitname allocatedToKit,  \n" +
                "								null packingSlipName,  \n" +
                "								null packingSupplierName,  \n" +
                "								null packingSlipId,  \n" +
                "								null packingSlipSupplierId,  \n" +
                "                                NULL packingSlipNumber,  \n" +
                "                                css.isReservedStock,  \n" +
                "                                IF(css.isReservedStock = 0,'No','Yes') AS reservedStock,		c.custAssyPN  \n" +
                "					FROM 		component_sid_stock css  \n" +
                "					INNER JOIN 	component c on css.refcompid = c.id \",  \n" +
                "						(case when (v_PartIDs IS NOT NULL AND v_PartIDs != '') THEN CONCAT(' AND c.id in (', v_PartIDs, ') ') else '' end),  \n" +
                "						(case when (pMfgCodeIDs IS NOT NULL AND pMfgCodeIDs != '') THEN CONCAT(' AND c.mfgcodeID in (', pMfgCodeIDs, ') ') else '' end),  \n" +
                "                        (case when (pMountingTypeIDs IS NOT NULL AND pMountingTypeIDs != '') THEN CONCAT(' AND c.mountingTypeID in (', pMountingTypeIDs, ') ') else '' end),  \n" +
                "                        (case when (pFunctionalTypeIDs IS NOT NULL AND pFunctionalTypeIDs != '') THEN CONCAT(' AND c.functionalCategoryID in (', pFunctionalTypeIDs, ') ') else '' end),  \n" +
                "						(case when (pStandardIDs IS NOT NULL AND pStandardIDs != '' AND pStandardsClassIDs IS NOT NULL AND pStandardsClassIDs != '') THEN  \n" +
                "									CONCAT(' and exists (select 1 from component_standard_details csd where csd.componentID = c.id and csd.isDeleted = 0 AND (csd.certificateStandardID in (', pStandardIDs, ' ) OR csd.ClassID in (', pStandardsClassIDs, ' ))) ')  \n" +
                "								when (pStandardIDs IS NOT NULL AND pStandardIDs != '') THEN  \n" +
                "									CONCAT(' and exists (select 1 from component_standard_details csd where csd.componentID = c.id and csd.isDeleted = 0 AND csd.certificateStandardID in (', pStandardIDs, ' )) ')  \n" +
                "								when (pStandardsClassIDs IS NOT NULL AND pStandardsClassIDs != '') THEN  \n" +
                "									CONCAT(' and exists (select 1 from component_standard_details csd where csd.componentID = c.id and csd.isDeleted = 0 AND csd.ClassID in (', pStandardsClassIDs, ' )) ')  \n" +
                "								else ''  \n" +
                "                        end),  \n" +
                "                        (case when (pRestrictPart = 1) THEN ' AND (c.restrictUsePermanently = 1 OR c.restrictPackagingUsePermanently = 1 OR c.restrictUSEwithpermission = 1 OR c.restrictPackagingUseWithpermission = 1)' else '' end),  \n" +
                "                        /*below query need to refactor*/  \n" +
                "                        (case when (pIsAvailableToSell = 1) THEN  \n" +
                "							' AND not exists (  \n" +
                "									SELECT 	1  \n" +
                "									FROM 	rfq_lineitems_alternatepart a  \n" +
                "									INNER JOIN 	component cr ON a.mfgPNID = cr.id  \n" +
                "									LEFT OUTER JOIN component cp ON cr.packaginggroupID = cp.packaginggroupID and cp.isDeleted = 0  \n" +
                "									WHERE 	c.id = IFNULL(cp.id, cr.id)  \n" +
                "									and 	a.isDeleted = 0 and cr.isDeleted = 0  \n" +
                "									AND 	EXISTS (SELECT 	1 FROM component ca WHERE ca.id = a.partID AND ca.partStatus = 1 AND ca.category = 3 AND ca.isDeleted = 0)  \n" +
                "								)  \n" +
                "						' else '' end),  \n" +
                "					\"  \n" +
                "					inner join mfgcodemst m on c.mfgcodeID = m.id  \n" +
                "					inner join rfq_rohsmst rohs on c.RoHSStatusID = rohs.id  \n" +
                "					inner join rfq_rohsmst umid_rohs on css.rohsStatusID = umid_rohs.id  \n" +
                "					inner join uoms u on css.uom = u.id  \n" +
                "					inner join cost_category cc on css.costCategoryID = cc.id  \n" +
                "					inner join component_packagingmst cp on css.packaging = cp.id  \n" +
                "					inner join binmst b on css.binID = b.id \" ,  \n" +
                "						(Case  \n" +
                "							when (pBinId IS NOT NULL) then CONCAT(' AND css.binID = ', pBinId, ' ')  \n" +
                "							when (pWHId IS NOT NULL) then  CONCAT(' and b.WarehouseID = ', pWHId,' ')  \n" +
                "							when (pWarehouse IS NOT NULL) THEN concat(' and b.WarehouseID in  (', pWarehouse, ') ')  \n" +
                "                            else ''  \n" +
                "						end),  \n" +
                "					\"inner join warehousemst w on b.WarehouseID = w.id \",  \n" +
                "						(Case when (pwarehouseType IS NOT NULL) THEN concat(' AND find_in_set(w.warehouseType, \"', pwarehouseType,'\") ') else '' end),  \n" +
                "                    \"inner join warehousemst pw on w.parentWHID = pw.id \",  \n" +
                "						(Case when (pdepartmentIDs IS NOT NULL AND pdepartmentIDs != '') THEN CONCAT(' AND pw.id in (', pdepartmentIDs, ') ') else '' end),  \n" +
                "					\"inner join binmst fb on css.fromBin = fb.id  \n" +
                "					inner join warehousemst fw on css.fromWarehouse = fw.id  \n" +
                "					inner join warehousemst fpw on css.fromDepartment = fpw.id  \n" +
                "					inner join binmst ob on css.orgRecBin = ob.id  \n" +
                "					inner join warehousemst ow on css.orgRecWarehouse = ow.id  \n" +
                "					inner join warehousemst opw on css.orgRecDepartment = opw.id  \n" +
                "					inner join rfq_mountingtypemst rmt on c.mountingTypeID = rmt.id  \n" +
                "					left join component_mslmst cmsl on c.mslID = cmsl.id  \n" +
                "					left join rfq_packagecasetypemst rpc on c.partPackageID = rpc.id and rpc.isDeleted = 0  \n" +
                "					left join vu_genericfilescount vgf on css.id = vgf.refTransID AND vgf.gencFileOwnerType = 'component_sid_stock'  \n" +
                "					left join (  \n" +
                "								SELECT 		cssh.refUIDId,	SUM(cssh.scrappedUnit) scrappedUnit  \n" +
                "								FROM 		component_sid_stock_history cssh  \n" +
                "								where 		cssh.scrappedUnit > 0  \n" +
                "								GROUP BY 	cssh.refUIDId  \n" +
                "					) cssh on css.id = cssh.refUIDId  \n" +
                "                   left join (  \n" +
                "								SELECT 		vu.umidid,	SUM((IFNULL(vu.scrappedunit,0) - IFNULL(vu.scrapExpiredUnit,0))) AS kitScrappepUnit  \n" +
                "								FROM 		vu_material_consumption_scrapped_det vu  \n" +
                "                                LEFT JOIN  component_sid_stock_history cssh ON cssh.id = vu.componentSIDStockHistoryID AND cssh.isDeleted = 0  \n" +
                "								WHERE 		vu.scrappedunit > 0  \n" +
                "								GROUP BY 	vu.umidid  \n" +
                "					) vuu on vuu.umidid = css.id  \n" +
                "					left join mfgcodemst cust on css.customerID = cust.id and cust.mfgType = 'MFG' and cust.isCustOrDisty = 1  and cust.isDeleted = 0  \n" +
                "					left join component assy on css.assyID = assy.id and assy.category = 3 and assy.isDeleted = 0  \n" +
                "					left join component cpn_comp on css.refCPNMFGPNID = cpn_comp.id and cpn_comp.isDeleted = 0  \n" +
                "					left join mfgcodemst m_cpn on cpn_comp.mfgcodeID = m_cpn.id and m_cpn.mfgType = 'MFG' and m_cpn.isDeleted = 0  \n" +
                "					left join component supp_comp on css.refSupplierPartId = supp_comp.id and supp_comp.refSupplierMfgpnComponentID is not null and supp_comp.isDeleted = 0  \n" +
                "					left join mfgcodemst m_supp on supp_comp.mfgcodeID = m_supp.id and m_supp.mfgType = 'DIST' and m_supp.isDeleted = 0  \n" +
                "					left join (  \n" +
                "						select css_rst.refUMIDId, css_rst.RestrictedCount, css_rst.reasonForRestrict  \n" +
                "						from (  \n" +
                "							select 	rank() over(partition by rest_umid.refUMIDId order by rest_umid.id desc) rnk, count(1) over(partition by rest_umid.refUMIDId) RestrictedCount,  \n" +
                "									rest_umid.refUMIDId, rest_umid.reasonForRestrict  \n" +
                "							from component_sid_stock_restrict_umid rest_umid  \n" +
                "						) css_rst where css_rst.rnk = 1  \n" +
                "					) css_rst_umid on css_rst_umid.refUMIDId = css.id  \n" +
                "					left join (  \n" +
                "						SELECT 		k.refUIDId,  \n" +
                "									group_concat('(', c.PIDCode, ', ', s.poNumber, ', ', s.salesOrderNumber, ', ', sd.qty, ', ', c.nickName ,'#', (TRIM(TRAILING '.' FROM(CAST(TRIM(TRAILING '0' FROM fun_getBOMLineNumberByBOMLineId(k.refBOMLineID))AS CHAR)))) ,') ') kitname  \n" +
                "						FROM 		kit_allocation k force index (FK_kit_allocation_refSalesOrderDetID)  \n" +
                "						INNER JOIN 	salesorderdet sd ON k.refSalesOrderDetID = sd.id AND sd.partCategory = 3  \n" +
                "						INNER JOIN 	salesordermst s ON sd.refSalesOrderID = s.id  \n" +
                "						INNER JOIN	component c ON k.assyID = c.id  \n" +
                "						WHERE 		k.status = 'A'  \n" +
                "						GROUP BY 	k.refUIDId  \n" +
                "					) kit  ON kit.refUIDId = css.id  \n" +
                "					WHERE 	css.isdeleted = 0\",  \n" +
                "						(case when (pCustomerId IS NOT NULL AND pRefSalesOrderDetIDs IS NOT NULL AND pRefSalesOrderDetIDs != '' AND pAssyIDs IS NOT NULL AND pAssyIDs != '') THEN  \n" +
                "								CONCAT(' AND (css.id in (SELECT refUidID FROM tempAllocatedKitUIDs) OR css.customerID = ',pCustomerId, ') ')  \n" +
                "							  when (pRefSalesOrderDetIDs IS NOT NULL AND pRefSalesOrderDetIDs != '' AND pAssyIDs IS NOT NULL AND pAssyIDs != '') THEN  \n" +
                "								CONCAT(' AND css.id in (SELECT refUidID FROM tempAllocatedKitUIDs) ')  \n" +
                "							  when (pCustomerId IS NOT NULL) then  \n" +
                "								CONCAT(' AND css.customerID = ',pCustomerId,' ')  \n" +
                "                            else ''  \n" +
                "						end),  \n" +
                "                        (case when (pInventoryType IS NOT NULL) THEN CONCAT(' AND find_in_set(css.stockInventoryType, \"', pInventoryType ,'\") ') else '' end),  \n" +
                "                        (case when (pRohsStatusIDs IS NOT NULL AND pRohsStatusIDs != '') THEN CONCAT(' AND css.rohsStatusID in (',pRohsStatusIDs,') ') else '' end),  \n" +
                "                        (case when (pCostCategoryIDs IS NOT NULL AND pCostCategoryIDs != '') THEN CONCAT(' AND css.costCategoryID in (', pCostCategoryIDs, ') ') else '' end),  \n" +
                "						(case when (pDateCode IS NOT NULL AND pDateCode != '') THEN CONCAT(' AND css.dateCode in (', pDateCode, ') ') else '' end),  \n" +
                "						(case when (pIsRestrictedUMID = 1) THEN ' AND css.isUMIDRestrict = 1 ' else '' end),  \n" +
                "						(case when (pIsInternalStock = 1 AND pIsCustomerStock IS NULL) THEN ' AND css.customerConsign = 0 ' else '' end),  \n" +
                "						(case when (pIsCustomerStock = 1 AND pIsInternalStock IS NULL) THEN ' AND css.customerConsign = 1 ' else '' end),  \n" +
                "                        (case when (pExpireMaterial = 1) THEN  \n" +
                "									(case when (pExpiredDay = 0) THEN  \n" +
                "										CONCAT(' AND css.expiryDate is not null AND css.expiryDate = fun_ConvertUTCDatetimeToDataKeyDateTimeZone(\"',v_ExpiryDate,'\") ')  \n" +
                "									ELSE  \n" +
                "										CONCAT(' AND css.expiryDate is not null AND css.expiryDate BETWEEN fun_ConvertUTCDatetimeToDataKeyDateTimeZone(\"',v_ExpiryDate,'\") AND (fun_ConvertUTCDatetimeToDataKeyDateTimeZone(\"',v_ExpiryDate,'\") + INTERVAL ', pExpiredDay,' DAY ) ')  \n" +
                "									END)  \n" +
                "							  else ''  \n" +
                "						end),  \n" +
                "                        (case when (pFromDate IS NOT NULL AND pToDate IS NOT NULL) THEN  \n" +
                "								CONCAT(' AND CAST(css.createdAt AS DATE) >= \"', pFromDate, '\" AND CAST(css.createdAt AS DATE) <= \"', pToDate, '\" ')  \n" +
                "							 when (pFromDate IS NOT NULL AND pToDate IS NULL) THEN  \n" +
                "								CONCAT(' AND CAST(css.createdAt AS DATE) >= \"', pFromDate, '\" ')  \n" +
                "							 when (pToDate IS NOT NULL AND pFromDate IS NULL) THEN  \n" +
                "								CONCAT(' AND CAST(css.createdAt AS DATE) <= \"', pToDate, '\" ')  \n" +
                "							 else ''  \n" +
                "                        end),  \n" +
                "						v_DescriptionWhereClause,  \n" +
                "                        pInnerQueryWhereClause,  \n" +
                "				\") As tempUMID\"  \n" +
                "			);  \n" +
                "	PREPARE tempSQLQuery FROM @temp_component_sid_stock;  \n" +
                "	EXECUTE tempSQLQuery;  \n" +
                "	DEALLOCATE PREPARE tempSQLQuery;  \n" +
                "  \n" +
                "    # Update count for self documents  \n" +
                "	Update temp_component_sid_stock t, vu_cofcdocumentcount g  \n" +
                "	set t.cocDocumentCount = g.cofcCount  \n" +
                "	where g.refTransID = t.id and g.gencFileOwnerType = 'component_sid_stock';  \n" +
                "  \n" +
                "	# Update count for parent documents  \n" +
                "	Update temp_component_sid_stock t, vu_cofcdocumentcount g  \n" +
                "	set t.parentCofCDocumentCount = g.cofcCount  \n" +
                "	where g.refTransID = t.parentUIDId and g.gencFileOwnerType = 'component_sid_stock';  \n" +
                "  \n" +
                "    # Update CofC detail  \n" +
                "	Update 	temp_component_sid_stock t, vu_umidcofcdetail ps  \n" +
                "	set  	t.packingSlipName =  (Case when (ps.cofcCount > 0 or t.cocDocumentCount > 0 or t.parentCofCDocumentCount > 0)  \n" +
                "											then CONCAT(ps.mfgCode, ps.packingSlipNumber)  \n" +
                "										else null  \n" +
                "								  end),  \n" +
                "			t.packingSupplierName = fun_GetFormattedMfgCode(ps.mfgCode, ps.mfgName, vMfgCodeFormat),  \n" +
                "			t.packingSlipId = ps.packingSlipId,  \n" +
                "			t.packingSlipSupplierId = ps.packingSlipSupplierId,  \n" +
                "            t.packingSlipNumber = ps.packingSlipNumber  \n" +
                "	where 	ps.refComponentSidStockID =  IFNULL(t.parentUIDId, t.id)  \n" +
                "	and 	t.stockInventoryType in ('NI', 'SI');  \n" +
                "  \n" +
                "	# Update CofC detail  \n" +
                "	Update 	temp_component_sid_stock t  \n" +
                "	set  	t.packingSlipName =  IFNULL(t.parentUID, t.uid)  \n" +
                "	where 	t.stockInventoryType in ('OI', 'AI', 'SI')  \n" +
                "	and		t.packingSlipId is null  \n" +
                "	and		(t.cocDocumentCount > 0 or t.parentCofCDocumentCount > 0);  \n" +
                "  \n" +
                "    # Update created by role  \n" +
                "    Update temp_component_sid_stock t  \n" +
                "    inner join roles r on r.id = t.createByRoleId  \n" +
                "	set t.createdbyRole = r.name;  \n" +
                "  \n" +
                "    # Update updated by role  \n" +
                "    Update temp_component_sid_stock t  \n" +
                "    inner join roles r on r.id = t.updateByRoleId  \n" +
                "	set t.updatedbyRole = r.name;  \n" +
                "  \n" +
                "    # Update created by name  \n" +
                "    Update temp_component_sid_stock t  \n" +
                "    inner join users u on u.id = t.createdBy  \n" +
                "    inner join employees emp on emp.id = u.employeeID  \n" +
                "	set t.createdByName = emp.initialName, t.createdUserCode = u.username ;  \n" +
                "  \n" +
                "    # Update updated by name  \n" +
                "    Update temp_component_sid_stock t  \n" +
                "    inner join users u on  u.id = t.updatedBy  \n" +
                "    inner join employees emp  on emp.id = u.employeeID  \n" +
                "	set t.umidModifiedBy = emp.initialName ;  \n" +
                "  \n" +
                "    # Update MFR Date Code Format  \n" +
                "    Update temp_component_sid_stock t  \n" +
                "	inner join datecodeformatmst d on d.id = t.mfrDateCodeFormatID  \n" +
                "	set t.mfrDateCodeFormat = d.dateCodeFormat;  \n" +
                "  \n" +
                "    # Update In Transit Data  \n" +
                "	Update temp_component_sid_stock t  \n" +
                "    inner join smartcarttransaction s on s.reelBarCode = t.uid and s.isInTransit = 1 and s.transactionid IS NOT NULL  \n" +
                "	set t.isTransit = 'Yes',  \n" +
                "		t.searchUser = (Case when (messagetype = 104) then fun_getUserNameByID(s.createdBy)  \n" +
                "							when (messagetype = 1001) then 'Unauthorized'  \n" +
                "							else ''  \n" +
                "                        end);  \n" +
                "  \n" +
                "	set @vFromSQLQuery = concat(\" Select * from temp_component_sid_stock WHERE\", pWhereClause);  \n" +
                "  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \", @vFromSQLQuery, \") as a\");  \n" +
                "	PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT DISTINCT warehouseID as ID,warehouse as Name from ( \", @vFromSQLQuery, \" AND warehouseID) as warehouseDetail\");  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "	SET @SQLStatement3 = CONCAT(\" SELECT DISTINCT mfgcodeID AS id, mfg AS mfgCodeName from ( \", @vFromSQLQuery, \" AND mfgcodeID ) as mfrDetail\");  \n" +
                "	PREPARE query3 FROM @SQLStatement3;  \n" +
                "	EXECUTE query3;  \n" +
                "	DEALLOCATE PREPARE query3;  \n" +
                "  \n" +
                "    SET @SQLStatement4 = CONCAT(\" SELECT DISTINCT packingSlipSupplierId AS id, packingSupplierName AS  mfgCodeName from ( \", @vFromSQLQuery, \" AND packingSlipSupplierId ) as supplierDetail\");  \n" +
                "	PREPARE query4 FROM @SQLStatement4;  \n" +
                "	EXECUTE query4;  \n" +
                "	DEALLOCATE PREPARE query4;  \n" +
                "  \n" +
                "	SET @vSQLMainQuery =  CONCAT(@vFromSQLQuery, \" \", pOrderBy, \" \" , rowNumWhere);  \n" +
                "    PREPARE mainQuery FROM @vSQLMainQuery;  \n" +
                "	EXECUTE mainQuery;  \n" +
                "	DEALLOCATE PREPARE mainQuery;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 04-03-2022 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1355,'1.00','V1','Bug 42084: [Main Branch] Supplier showing blank in section once applied filters at UMID list page - CP'," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
      case 1355:
          allDbChangesArray.push(
          /* **************************** New Script -> 07-03-2022  *********************************** */
            "DROP procedure IF EXISTS `Sproc_RetrieveSupplierInvoicePayment`;  \n" +
            "CREATE PROCEDURE `Sproc_RetrieveSupplierInvoicePayment`(  \n" +
            "	IN ppageIndex INT,  \n" +
            "	IN precordPerPage INT,  \n" +
            "	IN pOrderBy VARCHAR(255),  \n" +
            "	IN pWhereClause VARCHAR(16383),  \n" +
            "	IN pSupplierIDs VARCHAR(16383),  \n" +
            "	IN pPaymentMethodIDs VARCHAR(16383),  \n" +
            "	IN pBankAccountCodeIDs VARCHAR(16383),  \n" +
            "    IN pTransactionModeIDs VARCHAR(16383),  \n" +
            "    IN pExactPaymentNumberSearch TINYINT,  \n" +
            "	IN pPaymentNumber VARCHAR(50),  \n" +
            "    IN pInvoiceNumber VARCHAR(50),  \n" +
            "	IN pExactPaymentAmountSearch TINYINT,  \n" +
            "	IN pAmount VARCHAR(50),  \n" +
            "	IN pFromDate DATE,  \n" +
            "	IN pToDate DATE,  \n" +
            "    IN pRefPaymentMode VARCHAR(2),  \n" +
            "    IN pLockStatusFilter VARCHAR(50),  \n" +
            "    IN pSelectedDateType VARCHAR(10),  \n" +
            "    IN pPaymentComments VARCHAR(1000),  \n" +
            "    IN pInvoiceAmount VARCHAR(50),  \n" +
            "    IN pExactInvoiceAmountSearch TINYINT  \n" +
            ")  \n" +
            "BEGIN  \n" +
            "	DECLARE pOffset INT;  \n" +
            "	DECLARE rowNumWhere VARCHAR(255) ;  \n" +
            "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
            "	DECLARE v_TimeZone VARCHAR(50);  \n" +
            "	DECLARE v_InvoiceNumberWhereClause VARCHAR(500);  \n" +
            "    DECLARE v_mfgNameFormat VARCHAR(100);  \n" +
            "  \n" +
            "    SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
            "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
            "    select fun_getMFGCodeNameFormat() into v_mfgNameFormat;  \n" +
            "  \n" +
            "	SET v_InvoiceNumberWhereClause= '';  \n" +
            "  \n" +
            "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
            "  		SET pWhereClause = '1=1' ;  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	IF(pSupplierIDs IS NOT NULL AND pSupplierIDs != '' ) THEN  \n" +
            "		SET pWhereClause = CONCAT(pWhereClause, ' AND mfgcodeID in (',pSupplierIDs,')');  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	IF(pPaymentMethodIDs IS NOT NULL AND pPaymentMethodIDs != '') THEN  \n" +
            "		SET pWhereClause = CONCAT(pWhereClause, ' AND paymentType in (',pPaymentMethodIDs,')');  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	IF(pBankAccountCodeIDs IS NOT NULL AND pBankAccountCodeIDs != '') THEN  \n" +
            "		SET pWhereClause = CONCAT(pWhereClause, ' AND bankAccountMasID in (',pBankAccountCodeIDs,')');  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	IF(pTransactionModeIDs IS NOT NULL AND pTransactionModeIDs != '') THEN  \n" +
            "		SET pWhereClause = CONCAT(pWhereClause, ' AND refGencTransModeID in (',pTransactionModeIDs,')');  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	IF(pPaymentNumber IS NOT NULL) THEN  \n" +
            "		SET pWhereClause = CONCAT(pWhereClause, ' AND paymentNumber ',CASE WHEN pExactPaymentNumberSearch = TRUE THEN CONCAT(\" = '\", pPaymentNumber ,\"' \") ELSE CONCAT(\" like '%\", pPaymentNumber, \"%' \") END,' ');  \n" +
            "	END IF;  \n" +
            "  \n" +
            "    IF(pPaymentComments IS NOT NULL AND pPaymentComments != '')THEN  \n" +
            "    	SET pWhereClause = CONCAT(pWhereClause,\" AND remark LIKE '%\",pPaymentComments,\"%'\");  \n" +
            "	END IF;  \n" +
            "  \n" +
            "    IF(pLockStatusFilter IS NOT NULL)THEN  \n" +
            "    	SET pWhereClause = CONCAT(pWhereClause,\" AND lockStatus = '\", pLockStatusFilter ,\"'\");  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	IF(pInvoiceNumber IS NOT NULL) THEN  \n" +
            "		SET v_InvoiceNumberWhereClause = CONCAT(v_InvoiceNumberWhereClause,' AND  \n" +
            "			EXISTS (select 1  \n" +
            "					   from packing_slip_material_receive psd  \n" +
            "					   join packingslip_invoice_payment_det pdet on pdet.refPackingslipInvoiceID = psd.id  \n" +
            "					  where psd.isDeleted = 0  \n" +
            "						and pdet.refPayementid = inv.id  \n" +
            "						AND (', CASE WHEN pRefPaymentMode = 'P' THEN  CONCAT(\"psd.invoiceNumber = '\",pInvoiceNumber,\"'\") ELSE  CONCAT(\"psd.creditMemoNumber = '\",pInvoiceNumber,\"' or psd.debitMemoNumber= '\",pInvoiceNumber,\"'\") END, ')  \n" +
            "				)'  \n" +
            "		);  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	IF(pAmount IS NOT NULL OR pAmount = 0) THEN  \n" +
            "		SET pWhereClause = CONCAT(pWhereClause, ' AND paymentAmount ',CASE WHEN pExactPaymentAmountSearch = TRUE THEN CONCAT(\" = '\", pAmount ,\"' \") ELSE CONCAT(\" like '%\", pAmount, \"%' \") END,' ');  \n" +
            "	END IF;  \n" +
            "  \n" +
            "    IF(pInvoiceAmount IS NOT NULL OR pInvoiceAmount = 0) THEN  \n" +
            "		SET pWhereClause = CONCAT(pWhereClause, ' AND invoiceAmount ',CASE WHEN pExactInvoiceAmountSearch = TRUE THEN CONCAT(\" = '\", pInvoiceAmount ,\"' \") ELSE CONCAT(\" like '%\", pInvoiceAmount, \"%' \") END,' ');  \n" +
            "	END IF;  \n" +
            "  \n" +
            "    IF pFromDate IS NOT NULL AND pToDate IS NOT NULL THEN  \n" +
            "		IF pSelectedDateType = 'PO' THEN  \n" +
            "			SET v_InvoiceNumberWhereClause = CONCAT(v_InvoiceNumberWhereClause,' AND  \n" +
            "				EXISTS (select 1  \n" +
            "						   from packing_slip_material_receive psd  \n" +
            "						   join packingslip_invoice_payment_det pdet on pdet.refPackingslipInvoiceID = psd.id  \n" +
            "						  where psd.isDeleted = 0  \n" +
            "							and pdet.refPayementid = inv.id  \n" +
            "							and (psd.poDate between \"',pFromDate,'\" and \"',pToDate,'\")  \n" +
            "					)'  \n" +
            "			);  \n" +
            "			-- SET pWhereClause = CONCAT(pWhereClause,\" and (c.invoiceDate between \"',pFromDate,'\" and \"',pToDate,'\")\");  \n" +
            "		ELSEIF pSelectedDateType = 'M' THEN  \n" +
            "			SET v_InvoiceNumberWhereClause = CONCAT(v_InvoiceNumberWhereClause,' AND  \n" +
            "				EXISTS (select 1  \n" +
            "						   from packing_slip_material_receive psd  \n" +
            "						   join packingslip_invoice_payment_det pdet on pdet.refPackingslipInvoiceID = psd.id  \n" +
            "						  where psd.isDeleted = 0  \n" +
            "							and pdet.refPayementid = inv.id  \n" +
            "							and (psd.receiptDate between \"',pFromDate,'\" and \"',pToDate,'\")  \n" +
            "					)'  \n" +
            "			);  \n" +
            "			-- SET pWhereClause = CONCAT(pWhereClause,\" AND (receiptDate BETWEEN '\",pFromDate,\"' AND '\",pToDate,\"')\");  \n" +
            "		ELSEIF pSelectedDateType = 'P' THEN  \n" +
            "			SET v_InvoiceNumberWhereClause = CONCAT(v_InvoiceNumberWhereClause,' AND  \n" +
            "				EXISTS (select 1  \n" +
            "						   from packing_slip_material_receive psd  \n" +
            "						   join packingslip_invoice_payment_det pdet on pdet.refPackingslipInvoiceID = psd.id  \n" +
            "						  where psd.isDeleted = 0  \n" +
            "							and pdet.refPayementid = inv.id  \n" +
            "							and (psd.packingSlipDate between \"',pFromDate,'\" and \"',pToDate,'\")  \n" +
            "					)'  \n" +
            "			);  \n" +
            "        	-- SET pWhereClause = CONCAT(pWhereClause,\" AND (poDate BETWEEN '\",pFromDate,\"' AND '\",pToDate,\"')\");  \n" +
            "		ELSEIF pSelectedDateType = 'I' THEN  \n" +
            "			SET v_InvoiceNumberWhereClause = CONCAT(v_InvoiceNumberWhereClause,' AND  \n" +
            "				EXISTS (select 1  \n" +
            "						   from packing_slip_material_receive psd  \n" +
            "						   join packingslip_invoice_payment_det pdet on pdet.refPackingslipInvoiceID = psd.id  \n" +
            "						  where psd.isDeleted = 0  \n" +
            "							and pdet.refPayementid = inv.id  \n" +
            "							and (psd.invoiceDate between \"',pFromDate,'\" and \"',pToDate,'\")  \n" +
            "					)'  \n" +
            "			);  \n" +
            "			-- SET pWhereClause = CONCAT(pWhereClause,\" AND (creditMemoDate BETWEEN '\",pFromDate,\"' AND '\",pToDate,\"')\");  \n" +
            "		ELSEIF pSelectedDateType = 'PM' THEN  \n" +
            "			SET pWhereClause = CONCAT(pWhereClause,\" AND (paymentDate BETWEEN '\",pFromDate,\"' AND '\",pToDate,\"')\");  \n" +
            "		END IF;  \n" +
            "	ELSEIF pFromDate IS NOT NULL THEN  \n" +
            "		IF pSelectedDateType = 'PO' THEN  \n" +
            "			SET v_InvoiceNumberWhereClause = CONCAT(v_InvoiceNumberWhereClause,' AND  \n" +
            "				EXISTS (select 1  \n" +
            "						   from packing_slip_material_receive psd  \n" +
            "						   join packingslip_invoice_payment_det pdet on pdet.refPackingslipInvoiceID = psd.id  \n" +
            "						  where psd.isDeleted = 0  \n" +
            "							and pdet.refPayementid = inv.id  \n" +
            "							and (psd.poDate = \"',pFromDate,'\")  \n" +
            "					)'  \n" +
            "			);  \n" +
            "			-- SET pWhereClause = CONCAT(pWhereClause,\" and (c.invoiceDate = '\",pFromDate,\"')\");  \n" +
            "		ELSEIF pSelectedDateType = 'M' THEN  \n" +
            "			SET v_InvoiceNumberWhereClause = CONCAT(v_InvoiceNumberWhereClause,' AND  \n" +
            "				EXISTS (select 1  \n" +
            "						   from packing_slip_material_receive psd  \n" +
            "						   join packingslip_invoice_payment_det pdet on pdet.refPackingslipInvoiceID = psd.id  \n" +
            "						  where psd.isDeleted = 0  \n" +
            "							and pdet.refPayementid = inv.id  \n" +
            "							and (psd.receiptDate = \"',pFromDate,'\")  \n" +
            "					)'  \n" +
            "			);  \n" +
            "			-- SET pWhereClause = CONCAT(pWhereClause,\" AND (receiptDate = '\",pFromDate,\"')\");  \n" +
            "		ELSEIF pSelectedDateType = 'P' THEN  \n" +
            "			SET v_InvoiceNumberWhereClause = CONCAT(v_InvoiceNumberWhereClause,' AND  \n" +
            "				EXISTS (select 1  \n" +
            "						   from packing_slip_material_receive psd  \n" +
            "						   join packingslip_invoice_payment_det pdet on pdet.refPackingslipInvoiceID = psd.id  \n" +
            "						  where psd.isDeleted = 0  \n" +
            "							and pdet.refPayementid = inv.id  \n" +
            "							and (psd.packingSlipDate = \"',pFromDate,'\")  \n" +
            "					)'  \n" +
            "			);  \n" +
            "        	-- SET pWhereClause = CONCAT(pWhereClause,\" AND (poDate = '\",pFromDate,\"')\");  \n" +
            "		ELSEIF pSelectedDateType = 'I' THEN  \n" +
            "			SET v_InvoiceNumberWhereClause = CONCAT(v_InvoiceNumberWhereClause,' AND  \n" +
            "				EXISTS (select 1  \n" +
            "						   from packing_slip_material_receive psd  \n" +
            "						   join packingslip_invoice_payment_det pdet on pdet.refPackingslipInvoiceID = psd.id  \n" +
            "						  where psd.isDeleted = 0  \n" +
            "							and pdet.refPayementid = inv.id  \n" +
            "							and (psd.invoiceDate = \"',pFromDate,'\")  \n" +
            "					)'  \n" +
            "			);  \n" +
            "			-- SET pWhereClause = CONCAT(pWhereClause,\" AND (creditMemoDate = '\",pFromDate,\"')\");  \n" +
            "		ELSEIF pSelectedDateType = 'PM' THEN  \n" +
            "        	SET pWhereClause = CONCAT(pWhereClause,\" AND (paymentDate = '\",pFromDate,\"')\");  \n" +
            "		END IF;  \n" +
            "    END IF;  \n" +
            "  \n" +
            "	SET @Sproc_Sproc_RetrieveSupplierInvoicePayment = CONCAT(\"  \n" +
            "		SELECT		inv.id,  \n" +
            "				inv.systemId,  \n" +
            "				inv.mfgcodeID,  \n" +
            "				m.mfgCode supplier,  \n" +
            "				fun_GetFormattedMfgCode(m.mfgCode, m.mfgName, '\",v_mfgNameFormat,\"') supplierCodeName,  \n" +
            "				inv.isPaymentVoided,  \n" +
            "				case 	when inv.isPaymentVoided = 0 then  \n" +
            "						'Paid'  \n" +
            "					else  \n" +
            "						'Voided'  \n" +
            "				end isPaymentVoidedConvertedValue,  \n" +
            "				inv.voidPaymentReason,  \n" +
            "				inv.refVoidedPaymentNumber,  \n" +
            "                inv.refVoidedPaymentId,  \n" +
            "                (select c.lockStatus from packingslip_invoice_payment c  \n" +
            "					where c.id = inv.refVoidedPaymentId) refVoidedPaymentLockStatus,  \n" +
            "				inv.paymentNumber,  \n" +
            "				inv.bankName,  \n" +
            "				inv.bankAccountNo,  \n" +
            "				inv.paymentType,  \n" +
            "				inv.bankAccountMasID,  \n" +
            "				gc.gencCategoryName paymentMethod,  \n" +
            "				gc.systemGenerated systemGeneratedPaymentMethod,  \n" +
            "				inv.paymentDate,  \n" +
            "				invdet.invoiceAmount,  \n" +
            "				inv.paymentAmount,  \n" +
            "				inv.payToName,  \n" +
            "                fun_getAddressbyIDForCheckPrint(inv.payToAddressID, inv.payToContactPersonID) payToAddress,  \n" +
            "                fun_getAddressbyIDForCheckPrint(inv.billToAddressID, inv.billToContactPersonID) billToAddress,  \n" +
            "                inv.refGencTransModeID,  \n" +
            "                gtm.modeName transactionModeName,  \n" +
            "                gtm.systemGenerated systemGeneratedTransactionMode,  \n" +
            "				inv.accountReference,  \n" +
            "				inv.remark,  \n" +
            "                inv.depositBatchNumber,  \n" +
            "                inv.offsetAmount,  \n" +
            "                inv.acctId,  \n" +
            "                fun_getChartOfAccountsCodeNameByID(inv.acctId) coaName,  \n" +
            "				fun_getUserNameByID(inv.createdBy) createdby,  \n" +
            "				fun_getUserNameByID(inv.updatedBy) updatedby,  \n" +
            "				fun_ApplyCommonDateTimeFormatByParaValue(inv.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAt,  \n" +
            "				fun_ApplyCommonDateTimeFormatByParaValue(inv.UpdatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt,  \n" +
            "				fun_getRoleByID(inv.updateByRoleId) updatedbyRole,  \n" +
            "				fun_getRoleByID(inv.createByRoleId) createdbyRole,  \n" +
            "				inv.lockStatus,  \n" +
            "				(case when inv.lockStatus = 'NA' then 'Not Applicable'  \n" +
            "					when inv.lockStatus = 'RL' then 'Ready To Lock'  \n" +
            "					when inv.lockStatus = 'LC' then 'Locked'  \n" +
            "					else null end  \n" +
            "				) lockStatusValue,  \n" +
            "				fun_getUserNameByID(inv.lockedBy) lockByName,  \n" +
            "				fun_getRoleByID(inv.lockedByRoleId) lockedByRoleName,  \n" +
            "				fun_ApplyCommonDateTimeFormatByParaValue(inv.lockedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') lockedAt  \n" +
            "		FROM	packingslip_invoice_payment inv  \n" +
            "        join mfgcodemst m ON m.id = inv.mfgcodeID  \n" +
            "		INNER JOIN 	genericcategory gc ON inv.paymentType = gc.gencCategoryID  \n" +
            "        left join generic_transmode_mst gtm ON gtm.id = inv.refGencTransModeID  \n" +
            "		left JOIN (  \n" +
            "					SELECT 		pid.refPayementid,	SUM(psmd.extendedPrice) invoiceAmount  \n" +
            "					FROM 		packingslip_invoice_payment_det pid  \n" +
            "					LEFT JOIN 	packing_slip_material_receive_det psmd ON psmd.refPackingSlipMaterialRecID = pid.refPackingslipInvoiceID AND psmd.isDeleted = 0  \n" +
            "					WHERE 		pid.isDeleted = 0  \n" +
            "                       and		pid.isPaymentVoided = 0  \n" +
            "					GROUP BY 	pid.refPayementid  \n" +
            "				) invdet ON invdet.refPayementid = inv.id  \n" +
            "		WHERE 		inv.isDeleted = 0  \n" +
            "					AND inv.refPaymentMode = '\",pRefPaymentMode,\"'  \n" +
            "					AND gc.isDeleted = 0 \" ,v_InvoiceNumberWhereClause  \n" +
            "	);  \n" +
            "  \n" +
            "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
            "		SET pOrderBy = \" ORDER BY paymentDate desc, isPaymentVoided asc \";  \n" +
            "	ELSE  \n" +
            "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
            "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
            "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
            "	ELSE  \n" +
            "		SET rowNumWhere = '';  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	/* to get total count of rows */  \n" +
            "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@Sproc_Sproc_RetrieveSupplierInvoicePayment,\" ) c where 1=1 and \", pWhereClause);  \n" +
            "        PREPARE query1 FROM @SQLStatement1;  \n" +
            "	EXECUTE query1;  \n" +
            "	DEALLOCATE PREPARE query1;  \n" +
            "  \n" +
            "	SET @SQLStatement2 = CONCAT(\"select c.*  from ( \", @Sproc_Sproc_RetrieveSupplierInvoicePayment,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
            "	-- select @SQLStatement2;  \n" +
            "    PREPARE query2 FROM @SQLStatement2;  \n" +
            "	EXECUTE query2;  \n" +
            "	DEALLOCATE PREPARE query2;  \n" +
            "END;  \n" +
          /* **************************** Add Script Version -> 07-03-2022 *********************************** */
          "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
          "VALUES (1356,'1.00','V1',' User Story 41825: [Main Branch] Add Invoice Amount Filter on Supplier Payment List Page - Jay '," + userid + ", '" + requiredDet.ipAddress + "');"
          );
        break;
        case 1356:
         allDbChangesArray.push(
         /* **************************** New Script -> 10-03-2021  *********************************** */
         "DROP PROCEDURE IF EXISTS `Sproc_GetCustomerPaymentBalanceAndPastDue` ;  \n" +
         "CREATE PROCEDURE `Sproc_GetCustomerPaymentBalanceAndPastDue`(  \n" +
         "	IN pPageIndex INT,  \n" +
         "	IN pRecordPerPage INT,  \n" +
         "	IN pOrderBy VARCHAR(255),  \n" +
         "	IN pWhereClause VARCHAR(16383),  \n" +
         "	IN pRequestType VARCHAR(5),  \n" +
         "	IN pAgedReceivablesDueAsOfDate DATE ,  \n" +
         "	IN pDueDate DATE ,  \n" +
         "	IN pAdditionalDays INT,  \n" +
         "	IN pTermsAndAboveDays INT  ,  \n" +
         "	IN pIsIncludeZeroValueInvoices TINYINT  \n" +
         "    )  \n" +
         "BEGIN  \n" +
         "	/* pRequestType Aged Receivable - 'AR' , Past Due - 'PD'  */  \n" +
         "	DECLARE vDueDate DATE;  \n" +
         "	DECLARE pOffset INT;  \n" +
         "	DECLARE rowNumWhere VARCHAR(255);  \n" +
         "	DECLARE vDateDisplayFormat VARCHAR(15);  \n" +
         "	DECLARE vTimeZone VARCHAR(50);  \n" +
         "	DECLARE currDateWithAppliedTimeZone VARCHAR(15);  \n" +
         "	DECLARE v_mfgNameFormat VARCHAR(100);  \n" +
         "  \n" +
         "	SELECT fun_getMFGCodeNameFormat() INTO v_mfgNameFormat;  \n" +
         "  \n" +
         "	/* cps.subStatus 2-Invoiced,3-Corrected and Invoiced */  \n" +
         "  \n" +
         "	IF (pRequestType = 'AR') THEN	/* pRequestType Aged Receivable - 'AR' */  \n" +
         "		SET vDueDate = pAgedReceivablesDueAsOfDate;  \n" +
         "  \n" +
         "	ELSEIF (pRequestType = 'PD') THEN /* Past Due - 'PD' */  \n" +
         "		IF (pTermsAndAboveDays IS NOT NULL) THEN  \n" +
         "			SELECT fun_getDateFormatKey() INTO vDateDisplayFormat;  \n" +
         "			SELECT fun_getTimeZone() INTO vTimeZone;  \n" +
         "			SELECT fun_ApplyCommonDateFormatByParaValue(CURRENT_DATE(),vTimeZone,\"%Y-%m-%d\") INTO currDateWithAppliedTimeZone ;  \n" +
         "			SET vDueDate = DATE_ADD(currDateWithAppliedTimeZone, INTERVAL IFNULL(pTermsAndAboveDays,0) DAY);  \n" +
         "		ELSE  \n" +
         "			SET vDueDate = DATE_ADD(pDueDate, INTERVAL IFNULL(pAdditionalDays,0) DAY);  \n" +
         "		END IF;  \n" +
         "  \n" +
         "	END IF;  \n" +
         "  \n" +
         "	SET @temp_balanceDue = CONCAT(\"  \n" +
         "	SELECT  \n" +
         "		temp_aged_details.customerID,  \n" +
         "		fun_GetFormattedMfgCode(mcm.mfgCode, mcm.mfgName, '\",v_mfgNameFormat,\"') AS customerCodeName,  \n" +
         "		temp_aged_details.custCurrTermDays,  \n" +
         "		(SUM(temp_aged_details.invoiceCount) - SUM(temp_aged_details.paidInvoiceCount)) totalInvCount,  \n" +
         "		(SUM(temp_aged_details.unInvoiceCount)) totalUnInvCount,  \n" +
         "		(SUM(temp_aged_details.dratftCreditMemoCount)) totalDraftCreditMemoCount,  \n" +
         "		(SELECT count(1) FROM customer_packingslip WHERE transType='P' AND refCustInvoiceID IS NULL AND isDeleted=0 and customerID=temp_aged_details.customerID) packingSlipNotInvoicedCount,  \n" +
         "		SUM(temp_aged_details.totalDueAmount) totalAmountOfAgedDueReceivable,  \n" +
         "		SUM(temp_aged_details.currentAmount) totalAmountWithinTerms,  \n" +
         "		SUM(temp_aged_details.agedAmountAs0To30) agedAmountAs0To30,  \n" +
         "		SUM(temp_aged_details.agedAmountAs31To60) agedAmountAs31To60,  \n" +
         "		SUM(temp_aged_details.agedAmountAs61To90) agedAmountAs61To90,  \n" +
         "		SUM(temp_aged_details.agedAmountAs91To120) agedAmountAs91To120,  \n" +
         "		SUM(temp_aged_details.agedAmountAs121more) agedAmountAs121More,  \n" +
         "		SUM(temp_aged_details.totalOutstandingAmount) totalOutstandingAmount,  \n" +
         "		SUM(temp_aged_details.totalCreditMemoAmount) totalCreditMemoAmount,  \n" +
         "		SUM(temp_aged_details.totalUnappliedAmount) totalAdjustmentPendingAmount,  \n" +
         "		SUM(temp_aged_details.totalCreditAmount) totalCreditAmount,  \n" +
         "		(SUM(temp_aged_details.totalCustomerInvoicedAmount) - SUM(temp_aged_details.totalRecievedAmount)) totalOutStandingWithoutCreditMemo,  \n" +
         "		SUM(temp_aged_details.totalDraftAmount) totalNotInvoicedAmount,  \n" +
         "		SUM(temp_aged_details.totalRecievedAmount) totalRecievedAmount FROM (  \n" +
         "		SELECT  \n" +
         "				  `cid`.`customerID`                  AS `customerID`,  \n" +
         "				  `cid`.`refCustPackingslipInvoiceID` AS `refCustPackingslipInvoiceID`,  \n" +
         "				  SUM(`cid`.`invoiceCount`)           AS `invoiceCount`,  \n" +
         "				  SUM(`cid`.`unInvoiceCount`)         AS `unInvoiceCount`,  \n" +
         "				  SUM(`cid`.`dratftCreditMemoCount`)  AS `dratftCreditMemoCount`,  \n" +
         "				  -- `cid`.`DocDate`                  AS `DocDate`,  \n" +
         "				  -- `cpt`.`paymentTermsID`           AS `paymentTermsID`,  \n" +
         "				  `cid`.`termsDays`                   AS `termsDays`,  \n" +
         "				  `cpt`.`termsDays`                   AS `custCurrTermDays`,  \n" +
         "				  (TO_DAYS(CURDATE()) - TO_DAYS((`cid`.`DocDate` + INTERVAL `cid`.`termsDays` DAY))) AS `DueDaysDiff`,  \n" +
         "				  (CASE WHEN ((TO_DAYS('\",vDueDate,\"') - TO_DAYS((`cid`.`DocDate` + INTERVAL `cid`.`termsDays` DAY))) >= 0) THEN (SUM(`cid`.`totalInvoicedAmount`) - SUM(`cid`.`totalRecievedAmount`) + SUM(`cid`.`totalUnappliedAmount`) + SUM(`cid`.`totalUnappliedCreditMemoAmount`)) ELSE 0 END) AS `totalDueAmount`,  \n" +
         "				  (CASE WHEN ((TO_DAYS('\",vDueDate,\"') - TO_DAYS((`cid`.`DocDate` + INTERVAL `cid`.`termsDays` DAY))) < 0 OR (TO_DAYS('\",vDueDate,\"') - TO_DAYS((`cid`.`DocDate` + INTERVAL `cid`.`termsDays` DAY))) IS NULL) THEN (SUM(`cid`.`totalInvoicedAmount`) - SUM(`cid`.`totalRecievedAmount`) + SUM(`cid`.`totalUnappliedAmount`) + SUM(`cid`.`totalUnappliedCreditMemoAmount`)) ELSE 0 END) AS `currentAmount`,  \n" +
         "				  (CASE WHEN (((TO_DAYS('\",vDueDate,\"') - TO_DAYS((`cid`.`DocDate` + INTERVAL `cid`.`termsDays` DAY))) >= 0) AND ((TO_DAYS('\",vDueDate,\"') - TO_DAYS((`cid`.`DocDate` + INTERVAL `cid`.`termsDays` DAY))) <= 30)) THEN (SUM(`cid`.`totalInvoicedAmount`) - SUM(`cid`.`totalRecievedAmount`) +SUM(`cid`.`totalUnappliedAmount`) + SUM(`cid`.`totalUnappliedCreditMemoAmount`)) ELSE 0 END) AS `agedAmountAs0To30`,  \n" +
         "				  (CASE WHEN (((TO_DAYS('\",vDueDate,\"') - TO_DAYS((`cid`.`DocDate` + INTERVAL `cid`.`termsDays` DAY))) >= 31) AND ((TO_DAYS('\",vDueDate,\"') - TO_DAYS((`cid`.`DocDate` + INTERVAL `cid`.`termsDays` DAY))) <= 60)) THEN (SUM(`cid`.`totalInvoicedAmount`) - SUM(`cid`.`totalRecievedAmount`) +SUM(`cid`.`totalUnappliedAmount`) + SUM(`cid`.`totalUnappliedCreditMemoAmount`)) ELSE 0 END) AS `agedAmountAs31To60`,  \n" +
         "				  (CASE WHEN (((TO_DAYS('\",vDueDate,\"') - TO_DAYS((`cid`.`DocDate` + INTERVAL `cid`.`termsDays` DAY))) >= 61) AND ((TO_DAYS('\",vDueDate,\"') - TO_DAYS((`cid`.`DocDate` + INTERVAL `cid`.`termsDays` DAY))) <= 90)) THEN (SUM(`cid`.`totalInvoicedAmount`) - SUM(`cid`.`totalRecievedAmount`) +SUM(`cid`.`totalUnappliedAmount`) + SUM(`cid`.`totalUnappliedCreditMemoAmount`)) ELSE 0 END) AS `agedAmountAs61To90`,  \n" +
         "				  (CASE WHEN (((TO_DAYS('\",vDueDate,\"') - TO_DAYS((`cid`.`DocDate` + INTERVAL `cid`.`termsDays` DAY))) >= 91) AND ((TO_DAYS('\",vDueDate,\"') - TO_DAYS((`cid`.`DocDate` + INTERVAL `cid`.`termsDays` DAY))) <= 120)) THEN (SUM(`cid`.`totalInvoicedAmount`) - SUM(`cid`.`totalRecievedAmount`) +SUM(`cid`.`totalUnappliedAmount`) + SUM(`cid`.`totalUnappliedCreditMemoAmount`)) ELSE 0 END) AS `agedAmountAs91To120`,  \n" +
         "				  (CASE WHEN ((TO_DAYS('\",vDueDate,\"') - TO_DAYS((`cid`.`DocDate` + INTERVAL `cid`.`termsDays` DAY))) >= 121) THEN (SUM(`cid`.`totalInvoicedAmount`) - SUM(`cid`.`totalRecievedAmount`) + SUM(`cid`.`totalUnappliedCreditMemoAmount`)) ELSE 0 END) AS `agedAmountAs121more`,  \n" +
         "				  SUM(`cid`.`totalInvoicedAmount`) , SUM(`cid`.`totalRecievedAmount`) , SUM(`cid`.`totalUnappliedCreditMemoAmount`) , SUM(`cid`.`totalCreditMemoAppliedAmount`),  \n" +
         "				  (SUM(`cid`.`totalInvoicedAmount`) - SUM(`cid`.`totalRecievedAmount`) +SUM(`cid`.`totalUnappliedAmount`) + SUM(`cid`.`totalUnappliedCreditMemoAmount`)) AS `totalOutstandingAmount`,  \n" +
         "				  -- (CASE WHEN (`cid`.`refCustPackingslipInvoiceID`) IS NOT NULL THEN SUM(`cid`.`totalInvoicedAmount`) - SUM(`cid`.`totalRecievedAmount`) + SUM(`cid`.`totalCreditMemoAmount`) ELSE 0 END) AS `totalOutstandingAmount`,  \n" +
         "				  (SUM(`cid`.`totalUnappliedCreditMemoAmount`))  AS `totalCreditMemoAmount`,  \n" +
         "				  SUM(`cid`.`totalUnappliedAmount`)   AS `totalUnappliedAmount`,  \n" +
         "				  (SUM(`cid`.`totalUnappliedCreditMemoAmount`) + SUM(`cid`.`totalUnappliedAmount`)) AS `totalCreditAmount`,  \n" +
         "				  SUM(`cid`.`totalInvoicedAmount`)    AS `totalCustomerInvoicedAmount`,  \n" +
         "				  SUM(`cid`.`totalDraftAmount`)       AS `totalDraftAmount`,  \n" +
         "				  SUM(`cid`.`totalRecievedAmount`)    AS `totalRecievedAmount`,  \n" +
         "				  (CASE WHEN ((SUM(`cid`.`totalInvoicedAmount`) <> 0) AND (SUM(`cid`.`totalInvoicedAmount`) - SUM(`cid`.`totalRecievedAmount`)) = 0) THEN 1 ELSE 0 END) paidInvoiceCount  \n" +
         "                  FROM  \n" +
         "(  \n" +
         "	SELECT  \n" +
         "					 `a`.`customerID`                     AS `customerID`,  \n" +
         "					 `a`.termsDays			      AS `termsDays`,  \n" +
         "					 `a`.`id`                             AS `refCustPackingslipInvoiceID`,  \n" +
         "					IF(((`a`.`transType` = 'I') AND ((`a`.`subStatus` = '2') OR (`a`.`subStatus` = '3'))),1,0) AS `invoiceCount`,  \n" +
         "					IF(((`a`.`transType` = 'I') AND ((`a`.`subStatus` = '1') OR (`a`.`subStatus` > '3'))),1,0) AS `unInvoiceCount`,  \n" +
         "					IF(((`a`.`transType` = 'C') AND (`a`.`subStatus` = '1')),1,0) AS `dratftCreditMemoCount`,  \n" +
         "					IF((`a`.`transType` = 'I'),`a`.`invoiceDate`,`a`.`creditMemoDate`) AS `DocDate`,  \n" +
         "					IFNULL(b.totalCustomerInvoiceReceivedAmount,0)  AS `totalRecievedAmount`,  \n" +
         "					0                                    AS `totalUnappliedAmount`,  \n" +
         "					IF(((`a`.`transType` = 'C') AND (`a`.`subStatus` = '2')),(IFNULL(`a`.`totalAmount`,0) + (IFNULL(c.totalCreditMemoAppliedAmount,0) + IFNULL(d.totRefundIssuedAgainstCreditMemo,0))),0) AS `totalUnappliedCreditMemoAmount`,  \n" +
         "					IFNULL(c.totalCreditMemoAppliedAmount, 0) AS totalCreditMemoAppliedAmount,  \n" +
         "					IF(((`a`.`transType` = 'I') AND ((`a`.`subStatus` = '2') OR (`a`.`subStatus` = '3'))),IFNULL(`a`.`totalAmount`,0),0) AS `totalInvoicedAmount`,  \n" +
         "					IF(((`a`.`transType` = 'I') AND ((`a`.`subStatus` = '1') OR (`a`.`subStatus` > '3'))),IFNULL(`a`.`totalAmount`,0),0) AS `totalDraftAmount`  \n" +
         "                       FROM `customer_packingslip` `a`  \n" +
         "						LEFT JOIN 	(SELECT     `b`.`refCustPackingslipInvoiceID`     					AS `refCustPackingslipInvoiceID`,  \n" +
         "										      SUM(IF(a.refPaymentMode='R',IFNULL(`b`.`paymentAmount`,0), 0))  	AS `totalRecievedAmount`,  \n" +
         "										      0									  	AS `totalCreditMemoAppliedAmount`,  \n" +
         "											SUM(IFNULL(`b`.`paymentAmount`,0))    					AS `totalCustomerInvoiceReceivedAmount`  \n" +
         "										    FROM (`packingslip_invoice_payment` `a`  \n" +
         "										       LEFT JOIN `packingslip_invoice_payment_det` `b`  \n" +
         "											 ON ((`b`.`refPayementid` = `a`.`id`)))  \n" +
         "										    WHERE ((`a`.`isDeleted` = 0) AND (IFNULL(`b`.`isDeleted`,0) = 0)  \n" +
         "											   AND (`a`.`isPaymentVoided` = 0)  \n" +
         "											   AND (`a`.`refPaymentMode` IN ('R','CA','WOFF')))  \n" +
         "										    GROUP BY `b`.`refCustPackingslipInvoiceID` ) b  \n" +
         "										ON a.id = b.refCustPackingslipInvoiceID  \n" +
         "  \n" +
         "						LEFT JOIN 	(  \n" +
         "									SELECT  \n" +
         "											a.`refCustCreditMemoID` AS refCustCreditMemoID,  \n" +
         "											SUM(IF(a.refPaymentMode='CA',IFNULL(`b`.`paymentAmount`,0), 0))  	AS `totalCreditMemoAppliedAmount`  \n" +
         "									FROM `packingslip_invoice_payment` `a`  \n" +
         "										       LEFT JOIN `packingslip_invoice_payment_det` `b`  \n" +
         "											 ON (`b`.`refPayementid` = `a`.`id`)  \n" +
         "										    WHERE (`a`.`isDeleted` = 0) AND (IFNULL(`b`.`isDeleted`,0) = 0)  \n" +
         "											   AND (`a`.`isPaymentVoided` = 0)  \n" +
         "											   AND (`a`.`refPaymentMode` IN ('R','CA'))  \n" +
         "										    GROUP BY `a`.`refCustCreditMemoID`  \n" +
         "										    ) c  ON a.id = c.refCustCreditMemoID  \n" +
         "						LEFT JOIN (  \n" +
         "									SELECT SUM(paymentAmount) AS totRefundIssuedAgainstCreditMemo , refRefundCustCreditMemoID  \n" +
         "										FROM packingslip_invoice_payment_det  \n" +
         "										WHERE isDeleted = 0 AND isPaymentVoided = 0  \n" +
         "										GROUP BY refRefundCustCreditMemoID  \n" +
         "									) d  ON a.id = d.refRefundCustCreditMemoID  \n" +
         "					WHERE ((`a`.`transType` IN('I','C'))  \n" +
         "                -- AND a.paymentStatus <> 'RE'  \n" +
         "					      AND (CASE WHEN \",pIsIncludeZeroValueInvoices,\" = 0 AND a.transType = 'I' THEN IFNULL(a.totalAmount,0) > 0 ELSE 1=1 END)  \n" +
         "					      AND (`a`.`isDeleted` = 0))  \n" +
         "	UNION  \n" +
         "      SELECT  \n" +
         "			`a`.`mfgcodeID`                       					AS `customerID`,  \n" +
         "			NULL									AS `termsDays`,  \n" +
         "			NULL									AS `refCustPackingslipInvoiceID`,  \n" +
         "			0                                     					AS `invoiceCount`,  \n" +
         "			0                                     					AS `unInvoiceCount`,  \n" +
         "			0                                     					AS `dratftCreditMemoCount`,  \n" +
         "			`a`.`paymentDate`                     					AS `DocDate`,  \n" +
         "			0  									AS `totalRecievedAmount`,  \n" +
         "			((IFNULL(`a`.`paymentAmount`,0) - (SUM(IFNULL(`b`.`paymentAmount`,0)) + IFNULL(c.totRefundIssuedOfPayment,0))) * -(1)) 	AS `totalUnappliedAmount`,  \n" +
         "			0                                     					AS `totalUnappliedCreditMemoAmount`,  \n" +
         "			0									AS `totalCreditMemoAppliedAmount`,  \n" +
         "			0                                     					AS `totalInvoicedAmount`,  \n" +
         "			0                                     					AS `totalDraftAmount`  \n" +
         "			FROM (`packingslip_invoice_payment` `a`  \n" +
         "				LEFT JOIN `packingslip_invoice_payment_det` `b` ON ((`b`.`refPayementid` = `a`.`id`) AND (IFNULL(`b`.`isDeleted`,0) = 0) ))  \n" +
         "				LEFT JOIN (  \n" +
         "						SELECT SUM(paymentAmount) AS totRefundIssuedOfPayment , refRefundPaymentID  \n" +
         "						FROM packingslip_invoice_payment_det  \n" +
         "						WHERE isDeleted = 0 AND isPaymentVoided = 0  \n" +
         "						GROUP BY refRefundPaymentID  \n" +
         "					     ) c  ON a.id = c.refRefundPaymentID  \n" +
         "			WHERE ((`a`.`isDeleted` = 0)  \n" +
         "			AND (`a`.`isPaymentVoided` = 0)  \n" +
         "			AND (`a`.`refPaymentMode` = 'R'))  \n" +
         "			GROUP BY `a`.`mfgcodeID`,a.id  ,`a`.`paymentDate`,`a`.`paymentAmount` , c.totRefundIssuedOfPayment  \n" +
         "                   HAVING  ((IFNULL(`a`.`paymentAmount`,0) - SUM(IFNULL(`b`.`paymentAmount`,0))) * -(1))  != 0  \n" +
         "                ) AS  cid  \n" +
         "                     INNER JOIN `vu_customer_payment_terms` `cpt` ON (`cid`.`customerID` = `cpt`.`mfgCodeID`)  \n" +
         "                  GROUP BY `cid`.`customerID`,`cid`.`refCustPackingslipInvoiceID`, `cid`.`termsDays` , `cpt`.`termsDays`,  \n" +
         "				`cid`.`DocDate` ,  \n" +
         "			(TO_DAYS(CURDATE()) - TO_DAYS((`cid`.`DocDate` + INTERVAL `cid`.`termsDays` DAY)))  \n" +
         "                ) AS temp_aged_details  \n" +
         "  \n" +
         "		JOIN mfgcodemst mcm ON mcm.id = temp_aged_details.customerID AND mcm.isDeleted = 0  \n" +
         "		GROUP BY temp_aged_details.customerID, temp_aged_details.custCurrTermDays  \n" +
         "		 HAVING ((SUM(temp_aged_details.totalCustomerInvoicedAmount) - SUM(temp_aged_details.totalRecievedAmount)) <> 0)  \n" +
         "		 OR SUM(temp_aged_details.totalDraftAmount) <> 0  OR totalCreditAmount <> 0  \n" +
         "	\");  \n" +
         "  \n" +
         "  \n" +
         "	IF(pPageIndex <> 0 AND pRecordPerPage <> 0) THEN  \n" +
         "		SET pOffset = (pPageIndex -1) * pRecordPerPage;  \n" +
         "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
         "	ELSE  \n" +
         "		SET rowNumWhere = '';  \n" +
         "	END IF;  \n" +
         "  \n" +
         "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
         "		SET pOrderBy = CONCAT(\"ORDER BY totalOutstandingAmount desc, customerCodeName asc\") ;  \n" +
         "	ELSE  \n" +
         "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
         "	END IF;  \n" +
         "  \n" +
         "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
         "		SET pWhereClause = '1=1' ;  \n" +
         "	END IF;  \n" +
         "  \n" +
         "	/* to get total count of rows */  \n" +
         "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*) as TotalRecord FROM (\", @temp_balanceDue ,\" ) c where \", pWhereClause );  \n" +
         "	PREPARE query1 FROM @SQLStatement1;  \n" +
         "	EXECUTE query1;  \n" +
         "	DEALLOCATE PREPARE query1;  \n" +
         "  \n" +
         "	SET @SQLStatement2 = CONCAT(\"  \n" +
         "			SELECT 	c.*  \n" +
         "			FROM 	(\", @temp_balanceDue ,\" ) c  \n" +
         "			where 	\", pWhereClause ,\" \", pOrderBy , rowNumWhere);  \n" +
         "	-- SELECT @SQLStatement2;  \n" +
         "	PREPARE query2 FROM @SQLStatement2;  \n" +
         "	EXECUTE query2;  \n" +
         "	DEALLOCATE PREPARE query2;  \n" +
         "  \n" +
         "END;  \n" +
         /* **************************** Add Script Version -> 10-03-2021 *********************************** */
         "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
         "VALUES (1357,'1.00','V1',' #41709 Aged Receivable: Show Advance Payment and Open Credit Memo - KETAN '," + userid + ", '" + requiredDet.ipAddress + "');"
         );
        break;
      case 1357:
        allDbChangesArray.push(
          /* **************************** New Script -> 10-03-2022  *********************************** */
          "ALTER TABLE `dataentrychange_auditlog`  \n" +
          "ADD COLUMN `revision` VARCHAR(10) NULL AFTER `opVersion`;  \n" +
          /* **************************** Add Script Version -> 10-03-2022 *********************************** */
          "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
          "VALUES (1358,'1.00','V1',' User Story 41827: [Main Branch] Purchase Order Allow to add a new line in Completed PO - Jay '," + userid + ", '" + requiredDet.ipAddress + "');"
        );
        break;
      case 1358:
        allDbChangesArray.push(
          /* **************************** New Script -> 10-03-2022  *********************************** */
          "DROP procedure IF EXISTS `Sproc_PurchaseOrderChangeHistory`;  \n" +
          "CREATE PROCEDURE `Sproc_PurchaseOrderChangeHistory`(  \n" +
          "	IN ppurchaseOrderID INT,  \n" +
          "	IN ppurchaseOrderDetId INT,  \n" +
          "	IN ppageIndex INT,  \n" +
          "	IN precordPerPage INT,  \n" +
          "	IN pOrderBy VARCHAR(255),  \n" +
          "	IN pWhereClause VARCHAR(16383)  \n" +
          "    )  \n" +
          "BEGIN  \n" +
          "  \n" +
          "	DECLARE pOffset INT;  \n" +
          "	DECLARE rowNumWhere VARCHAR(255);  \n" +
          "	DECLARE vDateTimeDisplayFormat VARCHAR(100);  \n" +
          "	DECLARE vTimeZone VARCHAR(50);  \n" +
          "  \n" +
          "    SELECT fun_getTimeZone() INTO vTimeZone;  \n" +
          "	SELECT fun_getDateTimeFormat() INTO vDateTimeDisplayFormat;  \n" +
          "  \n" +
          "	SET @temp_Sproc_PurchaseOrderChangeHistory = CONCAT(\"  \n" +
          "			SELECT  \n" +
          "				da.ID,  \n" +
          "				da.Tablename,  \n" +
          "				da.RefTransID,  \n" +
          "				NULL AS poLineNumber,  \n" +
          "				NULL AS lineReleaseNumber,  \n" +
          "				FUN_GETPURCHASEORDERFIELDLABEL(da.Colname) Colname,  \n" +
          "				da.Oldval,  \n" +
          "				da.Newval,  \n" +
          "				da.valueDataType,  \n" +
          "				FUN_GETUSERNAMEBYID(da.updatedBy) updatedby,  \n" +
          "				FUN_GETUSERNAMEBYID(da.createdBy) createdby,  \n" +
          "				FUN_GETROLEBYID(da.createByRoleId) createdbyRole,  \n" +
          "				FUN_GETROLEBYID(da.updateByRoleId) updatedbyRole,  \n" +
          "				FUN_APPLYCOMMONDATETIMEFORMATBYPARAVALUE(da.createdAt,'\",vTimeZone,\"','\",vDateTimeDisplayFormat,\"') createdAt,  \n" +
          "				FUN_APPLYCOMMONDATETIMEFORMATBYPARAVALUE(da.UpdatedAt,'\",vTimeZone,\"','\",vDateTimeDisplayFormat,\"') updatedAt,  \n" +
          "                da.revision  \n" +
          "			FROM  \n" +
          "				dataentrychange_auditlog da  \n" +
          "			WHERE  \n" +
          "				da.RefTransID = \",ppurchaseOrderID,\" AND da.Tablename = 'PURCHASEORDERMST'  \n" +
          "			UNION ALL  \n" +
          "            SELECT  \n" +
          "				da.ID,  \n" +
          "				da.Tablename,  \n" +
          "				da.RefTransID,  \n" +
          "				pod.lineID AS poLineNumber,  \n" +
          "				NULL AS lineReleaseNumber,  \n" +
          "				FUN_GETPURCHASEORDERFIELDLABEL(da.Colname) Colname,  \n" +
          "				da.Oldval,  \n" +
          "				da.Newval,  \n" +
          "				da.valueDataType,  \n" +
          "				FUN_GETUSERNAMEBYID(da.updatedBy) updatedby,  \n" +
          "				FUN_GETUSERNAMEBYID(da.createdBy) createdby,  \n" +
          "				FUN_GETROLEBYID(da.createByRoleId) createdbyRole,  \n" +
          "				FUN_GETROLEBYID(da.updateByRoleId) updatedbyRole,  \n" +
          "				FUN_APPLYCOMMONDATETIMEFORMATBYPARAVALUE(da.createdAt,'\",vTimeZone,\"','\",vDateTimeDisplayFormat,\"') createdAt,  \n" +
          "				FUN_APPLYCOMMONDATETIMEFORMATBYPARAVALUE(da.UpdatedAt,'\",vTimeZone,\"','\",vDateTimeDisplayFormat,\"') updatedAt,  \n" +
          "                da.revision  \n" +
          "			FROM  \n" +
          "				dataentrychange_auditlog da  \n" +
          "					INNER JOIN  \n" +
          "				purchase_order_det pod ON pod.id = da.RefTransID AND da.Tablename = 'PURCHASE_ORDER_DET'  \n" +
          "			WHERE  \n" +
          "				da.RefTransID IN (SELECT id FROM purchase_order_det WHERE \",  \n" +
          "                CASE WHEN ppurchaseOrderDetId IS NOT NULL THEN CONCAT(\"id=\",ppurchaseOrderDetId,\" AND\")  ELSE '' END ,\" refpurchaseorderid = \",ppurchaseOrderID,\")  \n" +
          "			UNION ALL  \n" +
          "			SELECT  \n" +
          "				da.ID,  \n" +
          "				da.Tablename,  \n" +
          "				da.RefTransID,  \n" +
          "				pod.lineID AS poLineNumber,  \n" +
          "				pol.releaseNumber AS lineReleaseNumber,  \n" +
          "				FUN_GETPURCHASEORDERFIELDLABEL(da.Colname) Colname,  \n" +
          "				da.Oldval,  \n" +
          "				da.Newval,  \n" +
          "				da.valueDataType,  \n" +
          "				FUN_GETUSERNAMEBYID(da.updatedBy) updatedby,  \n" +
          "				FUN_GETUSERNAMEBYID(da.createdBy) createdby,  \n" +
          "				FUN_GETROLEBYID(da.createByRoleId) createdbyRole,  \n" +
          "				FUN_GETROLEBYID(da.updateByRoleId) updatedbyRole,  \n" +
          "				FUN_APPLYCOMMONDATETIMEFORMATBYPARAVALUE(da.createdAt,'\",vTimeZone,\"','\",vDateTimeDisplayFormat,\"') createdAt,  \n" +
          "				FUN_APPLYCOMMONDATETIMEFORMATBYPARAVALUE(da.UpdatedAt,'\",vTimeZone,\"','\",vDateTimeDisplayFormat,\"') updatedAt,  \n" +
          "                da.revision  \n" +
          "			FROM  \n" +
          "				dataentrychange_auditlog da  \n" +
          "					INNER JOIN  \n" +
          "				purchase_order_line_release_det pol ON pol.id = da.RefTransID  \n" +
          "					INNER JOIN  \n" +
          "				purchase_order_det pod ON pod.id = pol.refpurchaseorderdetid  \n" +
          "			WHERE  \n" +
          "				da.RefTransID IN (  \n" +
          "					SELECT id FROM purchase_order_line_release_det WHERE refPurchaseOrderDetID IN (  \n" +
          "						SELECT id FROM purchase_order_det WHERE \",  \n" +
          "                CASE WHEN ppurchaseOrderDetId IS NOT NULL THEN CONCAT(\"id=\",ppurchaseOrderDetId,\" AND\")  ELSE '' END ,\" refpurchaseorderid = \",ppurchaseOrderID,\"  \n" +
          "					)) AND da.Tablename = 'PURCHASEORDERLINERELEASEDET'  \n" +
          "			UNION ALL  \n" +
          "			SELECT  \n" +
          "				da.ID,  \n" +
          "				da.Tablename,  \n" +
          "				da.RefTransID,  \n" +
          "				pod.lineID AS poLineNumber,  \n" +
          "				NULL AS lineReleaseNumber,  \n" +
          "				FUN_GETPURCHASEORDERFIELDLABEL(da.Colname) Colname,  \n" +
          "				da.Oldval,  \n" +
          "				da.Newval,  \n" +
          "				da.valueDataType,  \n" +
          "				FUN_GETUSERNAMEBYID(da.updatedBy) updatedby,  \n" +
          "				FUN_GETUSERNAMEBYID(da.createdBy) createdby,  \n" +
          "				FUN_GETROLEBYID(da.createByRoleId) createdbyRole,  \n" +
          "				FUN_GETROLEBYID(da.updateByRoleId) updatedbyRole,  \n" +
          "				FUN_APPLYCOMMONDATETIMEFORMATBYPARAVALUE(da.createdAt,'\",vTimeZone,\"','\",vDateTimeDisplayFormat,\"') createdAt,  \n" +
          "				FUN_APPLYCOMMONDATETIMEFORMATBYPARAVALUE(da.UpdatedAt,'\",vTimeZone,\"','\",vDateTimeDisplayFormat,\"') updatedAt,  \n" +
          "                da.revision  \n" +
          "			FROM  \n" +
          "				dataentrychange_auditlog da  \n" +
          "					INNER JOIN  \n" +
          "				purchase_order_line_othercharges pol ON pol.id = da.RefTransID  \n" +
          "					INNER JOIN  \n" +
          "				purchase_order_det pod ON pod.id = pol.refPurchaseOrderDetID  \n" +
          "			WHERE  \n" +
          "				da.RefTransID IN (  \n" +
          "					SELECT id FROM purchase_order_line_othercharges WHERE refPurchaseOrderDetID IN (  \n" +
          "						SELECT id FROM purchase_order_det WHERE \",  \n" +
          "                CASE WHEN ppurchaseOrderDetId IS NOT NULL THEN CONCAT(\"id=\",ppurchaseOrderDetId,\" AND\")  ELSE '' END ,\" refpurchaseorderid = \",ppurchaseOrderID,\"  \n" +
          "					)) AND da.Tablename = 'PURCHASEORDERLINEOTHERCHARGES'  \n" +
          "         \");  \n" +
          "    IF (pOrderBy IS NOT NULL) THEN  \n" +
          "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
          "	ELSE  \n" +
          "		SET pOrderBy = \"ORDER BY ID DESC\";  \n" +
          "	END IF;  \n" +
          "  \n" +
          "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
          "		SET pWhereClause = '1=1' ;  \n" +
          "	END IF;  \n" +
          "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
          "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
          "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
          "	ELSE  \n" +
          "		SET rowNumWhere = '';  \n" +
          "	END IF;  \n" +
          "  \n" +
          "  \n" +
          "	/* to get total count of rows */  \n" +
          "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) AS TotalRecord FROM ( \",@temp_Sproc_PurchaseOrderChangeHistory,\" ) c WHERE 1=1 AND \", pWhereClause);  \n" +
          "    PREPARE query1 FROM @SQLStatement1;  \n" +
          "	EXECUTE query1;  \n" +
          "	DEALLOCATE PREPARE query1;  \n" +
          "	SET @SQLStatement2 = CONCAT(\"SELECT * FROM ( \", @temp_Sproc_PurchaseOrderChangeHistory,\" ) c  WHERE \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
          "    PREPARE query2 FROM @SQLStatement2;  \n" +
          "	EXECUTE query2;  \n" +
          "	DEALLOCATE PREPARE query2;  \n" +
          "END;  \n" +
          /* **************************** New Script -> 10-03-2022  *********************************** */
          "DROP procedure IF EXISTS `Sproc_UpdatePoWorkingLineStatus`;  \n" +
          "CREATE PROCEDURE `Sproc_UpdatePoWorkingLineStatus`(  \n" +
          "	IN pPOID INT  \n" +
          ")  \n" +
          "BEGIN  \n" +
          "	DECLARE vStatus VARCHAR(50);  \n" +
          "    DECLARE vPOTotalLinesWithOtherPart INT;  \n" +
          "	DECLARE vIsManualCompleted INT;  \n" +
          "    SELECT count(1) INTO vPOTotalLinesWithOtherPart FROM purchase_order_det WHERE refPurchaseOrderID=pPOID AND isDeleted=0;  \n" +
          "	IF vPOTotalLinesWithOtherPart > 0 THEN -- check po have any lines  \n" +
          "		SELECT poLineWorkingStatus INTO vStatus FROM vu_purchaseorder_shipping_release WHERE refPurchaseOrderID=pPOID AND poLineWorkingStatus='P' LIMIT 1;  \n" +
          "		SET vStatus=IFNULL(vStatus,'C');  \n" +
          "	ELSE  \n" +
          "		SET vStatus='P';  \n" +
          "	END IF;  \n" +
          "	IF(vStatus='P') THEN  \n" +
          "		UPDATE purchase_order_mst SET poWorkingStatus=(CASE WHEN poWorkingStatus='CA' THEN poWorkingStatus ELSE vStatus END),lockStatus='NA',lockedAt=NULL,lockedBy=NULL,lockedByRoleId=NULL WHERE id=pPOID;  \n" +
          "	ELSE  \n" +
          "		SELECT count(1) INTO vIsManualCompleted FROM vu_purchaseorder_shipping_release WHERE refPurchaseOrderID=pPOID AND poLineCompleteType='M';  \n" +
          "		UPDATE purchase_order_mst SET poWorkingStatus=(CASE WHEN poWorkingStatus='CA' THEN poWorkingStatus ELSE vStatus END),poCompleteType=(CASE WHEN vIsManualCompleted > 0 THEN 'M' ELSE 'A' END),lockStatus='RL' WHERE id=pPOID;  \n" +
          "	END IF;  \n" +
          "END;  \n" +
          /* **************************** New Script -> 10-03-2022  *********************************** */
          "DROP procedure IF EXISTS `Sproc_updatePurchaseOrderStatus`;  \n" +
          "CREATE PROCEDURE `Sproc_updatePurchaseOrderStatus`(  \n" +
          "	IN pPOID INT,  \n" +
          "	IN pupdatedBy VARCHAR(100),  \n" +
          "	IN pupdatedRoleID VARCHAR(100),  \n" +
          "	IN pcompleteReason VARCHAR(1000),  \n" +
          "	IN pcompleteType VARCHAR(20),  \n" +
          "	IN pcancellationReason VARCHAR(1000),  \n" +
          "	IN ptype VARCHAR(5),  \n" +
          "	IN pCancellationConfirmed TINYINT  \n" +
          ")  \n" +
          "BEGIN  \n" +
          "	IF pcompleteReason IS NOT NULL THEN  \n" +
          "		IF ptype = 'C' THEN /* for complete po */  \n" +
          "			UPDATE purchase_order_mst SET poWorkingStatus='C',updatedBy=pupdatedBy,updateByRoleId=pupdatedRoleID,poCompleteReason=pcompleteReason,poCompleteType=pcompleteType,lockStatus='RL',updatedAt=fun_DatetimetoUTCDateTime() WHERE id=pPOID;  \n" +
          "			UPDATE purchase_order_line_release_det pod SET pod.poLineWorkingStatus='C',pod.updatedBy=pupdatedBy,pod.updateByRoleId=pupdatedRoleID,poLineCompleteReason=pcompleteReason,poLineCompleteType=pcompleteType,updatedAt=fun_DatetimetoUTCDateTime() WHERE pod.refPurchaseOrderDetID IN (SELECT po.id FROM purchase_order_det po WHERE po.refPurchaseOrderID=pPOID);  \n" +
          "		ELSEIF ptype = 'P' THEN /* for open po */  \n" +
          "			UPDATE purchase_order_mst SET poWorkingStatus='P',updatedBy=pupdatedBy,updateByRoleId=pupdatedRoleID,poCompleteReason=pcompleteReason,poCompleteType=pcompleteType,lockStatus='NA',updatedAt=fun_DatetimetoUTCDateTime() WHERE id=pPOID;  \n" +
          "			UPDATE purchase_order_line_release_det pod SET pod.poLineWorkingStatus='P',pod.updatedBy=pupdatedBy,pod.updateByRoleId=pupdatedRoleID,poLineCompleteReason=pcompleteReason,poLineCompleteType=pcompleteType,updatedAt=fun_DatetimetoUTCDateTime() WHERE pod.refPurchaseOrderDetID IN (SELECT po.id FROM purchase_order_det po WHERE po.refPurchaseOrderID=pPOID);  \n" +
          "		END IF;  \n" +
          "	ELSEIF pcancellationReason IS NOT NULL THEN  \n" +
          "		IF ptype = 'C' THEN /* for cancellation po */  \n" +
          "			UPDATE purchase_order_mst SET poWorkingStatus='CA',CancellationConfirmed=pCancellationConfirmed,updatedBy=pupdatedBy,updateByRoleId=pupdatedRoleID,updatedAt=fun_DatetimetoUTCDateTime(),cancleReason=pcancellationReason,poCompleteType=pcompleteType WHERE id=pPOID;  \n" +
          "		ELSEIF ptype = 'R' THEN /* for revoke cancellation po */  \n" +
          "			UPDATE purchase_order_mst SET poWorkingStatus='P',CancellationConfirmed=0,updatedBy=pupdatedBy,updateByRoleId=pupdatedRoleID,updatedAt=fun_DatetimetoUTCDateTime(),cancleReason=pcancellationReason,lockStatus='NA',poCompleteType=pcompleteType WHERE id=pPOID;  \n" +
          "		END IF;  \n" +
          "	END IF;  \n" +
          "END;  \n" +
          /* **************************** Add Script Version -> 10-03-2022 *********************************** */
          "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
          "VALUES (1359,'1.00','V1',' User Story 41827: [Main Branch] Purchase Order Allow to add a new line in Completed PO - Jay '," + userid + ", '" + requiredDet.ipAddress + "');"
        );
        break;
      case 1359:
        allDbChangesArray.push(
          /* **************************** New Script -> 11-03-2022  *********************************** */
          "DROP TRIGGER IF EXISTS `Trg_AU_purchase_order_mst`;  \n" +
          "CREATE TRIGGER `Trg_AU_purchase_order_mst` AFTER UPDATE ON `purchase_order_mst` FOR EACH ROW BEGIN  \n" +
          "	DECLARE vMfgCodeFormat INT;  \n" +
          "    DECLARE vOldCustomer VARCHAR(100);  \n" +
          "    DECLARE vNewCustomer VARCHAR(100);  \n" +
          "    DECLARE vOldSupplier VARCHAR(100);  \n" +
          "    DECLARE vNewSupplier VARCHAR(100);  \n" +
          "    DECLARE vLockUnlockFieldPTText VARCHAR(10) DEFAULT 'Locked';  \n" +
          "    SELECT fun_getMFGCodeNameFormat() INTO vMfgCodeFormat;  \n" +
          "	IF IFNULL(OLD.poNumber,0) != IFNULL(NEW.poNumber,0) THEN  \n" +
          "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId, valueDataType, revision) VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'PONUMBER',CAST(OLD.poNumber AS CHAR), CAST(new.poNumber AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,fun_getDataTypeBasedOnTableAndColumnName('purchase_order_mst','poNumber'),NEW.poRevision);  \n" +
          "	END IF;  \n" +
          "	IF IFNULL(OLD.soNumber,0) != IFNULL(NEW.soNumber,0) THEN  \n" +
          "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId, valueDataType, revision) VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'SONUMBER',CAST(OLD.soNumber AS CHAR), CAST(new.soNumber AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,fun_getDataTypeBasedOnTableAndColumnName('purchase_order_mst','soNumber'),NEW.poRevision);  \n" +
          "    END IF;  \n" +
          "	IF IFNULL(OLD.poDate,0) != IFNULL(NEW.poDate,0) THEN  \n" +
          "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId, valueDataType, revision) VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'PODATE',CAST(OLD.poDate AS CHAR), CAST(new.poDate AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,fun_getDataTypeBasedOnTableAndColumnName('purchase_order_mst','poDate'),NEW.poRevision);  \n" +
          "	END IF;  \n" +
          "	IF IFNULL(OLD.soDate,0) != IFNULL(NEW.soDate,0) THEN  \n" +
          "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId, valueDataType, revision) VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'SODATE',CAST(OLD.soDate AS CHAR), CAST(new.soDate AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,fun_getDataTypeBasedOnTableAndColumnName('purchase_order_mst','soDate'),NEW.poRevision);  \n" +
          "	END IF;  \n" +
          "	IF IFNULL(OLD.supplierID,0) != IFNULL(NEW.supplierID,0) THEN  \n" +
          "		SELECT fun_GetFormattedMfgCode(mfgCode, mfgName, vMfgCodeFormat) INTO vOldSupplier FROM mfgcodemst WHERE id=OLD.supplierID;  \n" +
          "        SELECT fun_GetFormattedMfgCode(mfgCode, mfgName, vMfgCodeFormat) INTO vNewSupplier FROM mfgcodemst WHERE id=NEW.supplierID;  \n" +
          "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId, valueDataType, revision) VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'SUPPLIER', CAST(vOldSupplier AS CHAR), CAST(vNewSupplier AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,'varchar',NEW.poRevision);  \n" +
          "	END IF;  \n" +
          "	IF IFNULL(OLD.termsID,0) != IFNULL(NEW.termsID,0) THEN  \n" +
          "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId, valueDataType, revision) VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'TERMS', CAST(fun_getGenericCategoryCodeNameByID(OLD.termsID) AS CHAR), CAST(fun_getGenericCategoryCodeNameByID(new.termsID) AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,'varchar',NEW.poRevision);  \n" +
          "	END IF;  \n" +
          "	IF IFNULL(OLD.shippingMethodID,0) != IFNULL(NEW.shippingMethodID,0) THEN  \n" +
          "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId, valueDataType, revision) VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'SHIPPINGMETHOD', CAST(fun_getGenericCategoryCodeNameByID(OLD.shippingMethodID) AS CHAR), CAST(fun_getGenericCategoryCodeNameByID(new.shippingMethodID) AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,'varchar',NEW.poRevision);  \n" +
          "	END IF;  \n" +
          "	IF IFNULL(OLD.poRevision ,0) != IFNULL(NEW.poRevision ,0) THEN  \n" +
          "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId, valueDataType, revision) VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'POREVISION', CAST(OLD.poRevision AS CHAR), CAST(new.poRevision AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,fun_getDataTypeBasedOnTableAndColumnName('purchase_order_mst','poRevision'),NEW.poRevision);  \n" +
          "    END IF;  \n" +
          "	IF IFNULL(OLD.shippingComment ,0) != IFNULL(NEW.shippingComment ,0) THEN  \n" +
          "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId, valueDataType, revision) VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'INTERNALNOTES', CAST(OLD.shippingComment AS CHAR), CAST(new.shippingComment AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,fun_getDataTypeBasedOnTableAndColumnName('purchase_order_mst','shippingComment'),NEW.poRevision);  \n" +
          "	END IF;  \n" +
          "	IF IFNULL(OLD.poComment ,0) != IFNULL(NEW.poComment ,0) THEN  \n" +
          "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId, valueDataType, revision) VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'POCOMMENT', CAST(OLD.poComment AS CHAR), CAST(new.poComment AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,fun_getDataTypeBasedOnTableAndColumnName('purchase_order_mst','poComment'),NEW.poRevision);  \n" +
          "	END IF;  \n" +
          "	IF IFNULL(OLD.status ,0) != IFNULL(NEW.status ,0) THEN  \n" +
          "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId, valueDataType, revision) VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'POSTATUS', CAST(CASE WHEN OLD.status=0 THEN 'Draft' ELSE 'Published' END AS CHAR), CAST(CASE WHEN NEW.status=0 THEN 'Draft' ELSE 'Published' END AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,'varchar',NEW.poRevision);  \n" +
          "	END IF;  \n" +
          "	IF IFNULL(OLD.carrierID ,0) != IFNULL(NEW.carrierID ,0) THEN  \n" +
          "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId, valueDataType, revision) VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'CARRIER', CAST(fun_getGenericCategoryCodeNameByID(OLD.carrierID) AS CHAR), CAST(fun_getGenericCategoryCodeNameByID(new.carrierID) AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,'varchar',NEW.poRevision);  \n" +
          "    END IF;  \n" +
          "	IF IFNULL(OLD.carrierAccountNumber ,0) != IFNULL(NEW.carrierAccountNumber ,0) THEN  \n" +
          "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId, valueDataType, revision) VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'CARRIERACCOUNT#', CAST(OLD.carrierAccountNumber AS CHAR), CAST(new.carrierAccountNumber AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,fun_getDataTypeBasedOnTableAndColumnName('purchase_order_mst','carrierAccountNumber'),NEW.poRevision);  \n" +
          "	END IF;  \n" +
          "    IF IFNULL(OLD.isDeleted ,0) != IFNULL(NEW.isDeleted ,0) THEN  \n" +
          "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId, valueDataType, revision) VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'DELETED', CAST(CASE WHEN OLD.isDeleted=0 THEN 'No' ELSE 'Yes' END AS CHAR), CAST(CASE WHEN NEW.isDeleted=0 THEN 'No' ELSE 'Yes' END AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,'varchar',NEW.poRevision);  \n" +
          "	END IF;  \n" +
          "    IF IFNULL(OLD.isBlanketPO ,0) != IFNULL(NEW.isBlanketPO ,0) THEN  \n" +
          "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId, valueDataType, revision) VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'BLANKETPO', CAST(CASE WHEN OLD.isBlanketPO=0 THEN 'No' ELSE 'Yes' END AS CHAR), CAST(CASE WHEN NEW.isBlanketPO=0 THEN 'No' ELSE 'Yes' END AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,'varchar',NEW.poRevision);  \n" +
          "    END IF;  \n" +
          "    IF IFNULL(OLD.shippingInsurance ,0) != IFNULL(NEW.shippingInsurance ,0) THEN  \n" +
          "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId, valueDataType, revision) VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'SHIPPINGINSURANCE', CAST(CASE WHEN OLD.shippingInsurance=0 THEN 'No' ELSE 'Yes' END AS CHAR), CAST(CASE WHEN NEW.shippingInsurance=0 THEN 'No' ELSE 'Yes' END AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,'varchar',NEW.poRevision);  \n" +
          "    END IF;  \n" +
          "    IF IFNULL(OLD.supplierAddressID ,0) != IFNULL(NEW.supplierAddressID ,0) THEN  \n" +
          "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId, valueDataType, revision) VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'SUPPLIERADDRESS', CAST(OLD.supplierAddress AS CHAR), CAST(NEW.supplierAddress AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,'varchar',NEW.poRevision);  \n" +
          "	END IF;  \n" +
          "    IF IFNULL(OLD.shippingAddressID ,0) != IFNULL(NEW.shippingAddressID ,0) THEN  \n" +
          "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId, valueDataType, revision) VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'SHIPPINGADDRESS', CAST(OLD.shippingAddress AS CHAR), CAST(NEW.shippingAddress AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,'varchar',NEW.poRevision);  \n" +
          "	END IF;  \n" +
          "    IF IFNULL(OLD.intermediateShipmentID ,0) != IFNULL(NEW.intermediateShipmentID ,0) THEN  \n" +
          "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId, valueDataType, revision) VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'INTERMEDIATEADDRESS', CAST(OLD.intermediateAddress AS CHAR), CAST(NEW.intermediateAddress AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,'varchar',NEW.poRevision);  \n" +
          "    END IF;  \n" +
          "    IF IFNULL(OLD.freeOnBoardID ,0) != IFNULL(NEW.freeOnBoardID ,0) THEN  \n" +
          "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId, valueDataType, revision) VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'FOB', CAST(fun_getFOBById(OLD.freeOnBoardID) AS CHAR), CAST(fun_getFOBById(NEW.freeOnBoardID) AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId, 'varchar',NEW.poRevision);  \n" +
          "    END IF;  \n" +
          "    IF IFNULL(OLD.poWorkingStatus ,0) != IFNULL(NEW.poWorkingStatus ,0) THEN  \n" +
          "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId, valueDataType, revision) VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'POWORKINGSTATUS', CAST(CASE WHEN IFNULL(OLD.poWorkingStatus,'P')='P' THEN 'In Progress' WHEN OLD.poWorkingStatus='CA' THEN 'Cancelled' ELSE 'Completed' END  AS CHAR), CAST(CASE WHEN IFNULL(NEW.poWorkingStatus,'P')='P' THEN 'In Progress' WHEN NEW.poWorkingStatus='CA' THEN 'Cancelled' ELSE 'Completed' END AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,fun_getDataTypeBasedOnTableAndColumnName('purchase_order_mst','poWorkingStatus'),NEW.poRevision);  \n" +
          "    END IF;  \n" +
          "	IF IFNULL(OLD.cancleReason ,0) != IFNULL(NEW.cancleReason ,0) THEN  \n" +
          "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId, valueDataType, revision) VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'CANCELREASON', CAST(OLD.cancleReason AS CHAR), CAST(NEW.cancleReason AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,fun_getDataTypeBasedOnTableAndColumnName('purchase_order_mst','cancleReason'),NEW.poRevision);  \n" +
          "	END IF;  \n" +
          "    IF IFNULL(OLD.CancellationConfirmed ,0) != IFNULL(NEW.CancellationConfirmed ,0) THEN  \n" +
          "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId, valueDataType, revision) VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'CANCELLATIONCONFIRMED',  CAST(CASE WHEN OLD.CancellationConfirmed=0 THEN 'No' ELSE 'Yes' END AS CHAR), CAST(CASE WHEN NEW.CancellationConfirmed=0 THEN 'No' ELSE 'Yes' END AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,'varchar',NEW.poRevision);  \n" +
          "	END IF;  \n" +
          "    IF IFNULL(OLD.isCustConsigned, 0) != IFNULL(NEW.isCustConsigned, 0) THEN  \n" +
          "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId, valueDataType, revision) VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'POCUSTCONSIGNED',  CAST(CASE WHEN OLD.isCustConsigned=0 THEN 'No' ELSE 'Yes' END AS CHAR), CAST(CASE WHEN NEW.isCustConsigned=0 THEN 'No' ELSE 'Yes' END AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,'varchar',NEW.poRevision);  \n" +
          "	END IF;  \n" +
          "    IF IFNULL(OLD.customerID, 0) != IFNULL(NEW.customerID,0) THEN  \n" +
          "		SELECT fun_GetFormattedMfgCode(mfgCode, mfgName, vMfgCodeFormat) INTO vOldCustomer FROM mfgcodemst WHERE id=OLD.customerID;  \n" +
          "        SELECT fun_GetFormattedMfgCode(mfgCode, mfgName, vMfgCodeFormat) INTO vNewCustomer FROM mfgcodemst WHERE id=NEW.customerID;  \n" +
          "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId, valueDataType, revision) VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'POCUSTOMER',  CAST(vOldCustomer AS CHAR), CAST(vNewCustomer AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,'varchar',NEW.poRevision);  \n" +
          "	END IF;  \n" +
          "    IF IFNULL(OLD.isNonUMIDStock, 0) != IFNULL(NEW.isNonUMIDStock,0) THEN  \n" +
          "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId, valueDataType, revision) VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'NONSTOCKUMID',  CAST(CASE WHEN OLD.isNonUMIDStock=0 THEN 'No' ELSE 'Yes' END AS CHAR), CAST(CASE WHEN NEW.isNonUMIDStock=0 THEN 'No' ELSE 'Yes' END AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,'varchar',NEW.poRevision);  \n" +
          "	END IF;  \n" +
          "    IF IFNULL(OLD.lockStatus, 0) != IFNULL(NEW.lockStatus,0) THEN  \n" +
          "		IF (OLD.lockStatus = 'LC') THEN  \n" +
          "			SET vLockUnlockFieldPTText = \"Unlocked\";  \n" +
          "		END IF;  \n" +
          "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId, valueDataType, revision) VALUES (\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'LOCKSTATUS',  CAST(CASE WHEN OLD.lockStatus='RL' THEN 'Ready To Lock' WHEN OLD.lockStatus='LC' THEN 'Locked' ELSE 'Not Applicable' END AS CHAR), CAST(CASE WHEN NEW.lockStatus='RL' THEN 'Ready To Lock' WHEN NEW.lockStatus='LC' THEN 'Locked' ELSE 'Not Applicable' END AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,fun_getDataTypeBasedOnTableAndColumnName('purchase_order_mst','lockStatus'),NEW.poRevision);  \n" +
          "	END IF;  \n" +
          "    IF IFNULL(OLD.lockedBy, 0) != IFNULL(NEW.lockedBy,0) THEN  \n" +
          "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId, valueDataType, revision) VALUES (\"PURCHASEORDERMST\",CAST(new.id AS CHAR),CASE WHEN (OLD.lockStatus = 'LC') THEN 'UNLOCKEDBY' ELSE 'LOCKEDBY' END,  NULL, (CASE WHEN OLD.lockStatus = 'LC' THEN fun_getUserNameByID(NEW.updatedBy) ELSE fun_getUserNameByID(NEW.lockedBy) END), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,fun_getDataTypeBasedOnTableAndColumnName('purchase_order_mst','lockedBy'),NEW.poRevision);  \n" +
          "    END IF;  \n" +
          "    IF IFNULL(OLD.lockedAt, 0) != IFNULL(NEW.lockedAt,0) THEN  \n" +
          "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId, valueDataType, revision) VALUES (\"PURCHASEORDERMST\",CAST(new.id AS CHAR),CASE WHEN (OLD.lockStatus = 'LC') THEN 'UNLOCKEDAT' ELSE 'LOCKEDAT' END,  NULL, (CASE WHEN OLD.lockStatus = 'LC' THEN fun_DatetimetoUTCDateTime() ELSE NEW.lockedAt END), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,fun_getDataTypeBasedOnTableAndColumnName('purchase_order_mst','lockedAt'),NEW.poRevision);  \n" +
          "    END IF;  \n" +
          "    IF IFNULL(OLD.lockedByRoleId, 0) != IFNULL(NEW.lockedByRoleId,0) THEN  \n" +
          "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId, valueDataType, revision) VALUES (\"PURCHASEORDERMST\",CAST(new.id AS CHAR),CASE WHEN (OLD.lockStatus = 'LC') THEN 'UNLOCKEDBYROLE' ELSE 'LOCKEDBYROLE' END,  NULL, (CASE WHEN OLD.lockStatus = 'LC' THEN fun_getRoleByID(NEW.updateByRoleId) ELSE fun_getRoleByID(NEW.lockedByRoleId) END), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,'varchar',NEW.poRevision);  \n" +
          "    END IF;  \n" +
          "    IF IFNULL(OLD.poCompleteReason, 0) != IFNULL(NEW.poCompleteReason, 0) THEN  \n" +
          "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId, valueDataType, revision) VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'POCOMPLETEREASON', CAST(OLD.poCompleteReason AS CHAR), CAST(NEW.poCompleteReason AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,fun_getDataTypeBasedOnTableAndColumnName('purchase_order_mst','poCompleteReason'),NEW.poRevision);  \n" +
          "	END IF;  \n" +
          "      IF IFNULL(OLD.supplierContactPersonID ,0) != IFNULL(NEW.supplierContactPersonID ,0) THEN  \n" +
          "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId, valueDataType, revision) VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'SUPPLIERCONTACTPERSON', CAST(OLD.supplierContactPerson AS CHAR), CAST(NEW.supplierContactPerson AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,'varchar',NEW.poRevision);  \n" +
          "	END IF;  \n" +
          "    IF IFNULL(OLD.shippingContactPersonID ,0) != IFNULL(NEW.shippingContactPersonID ,0) THEN  \n" +
          "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId, valueDataType, revision) VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'SHIPPINGCONTACTPERSON', CAST(OLD.shippingContactPerson AS CHAR), CAST(NEW.shippingContactPerson AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,'varchar',NEW.poRevision);  \n" +
          "	END IF;  \n" +
          "    IF IFNULL(OLD.intermediateContactPersonID ,0) != IFNULL(NEW.intermediateContactPersonID ,0) THEN  \n" +
          "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId, valueDataType, revision) VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'INTERMEDIATECONTACTPERSON', CAST(OLD.intermediateContactPerson AS CHAR), CAST(NEW.intermediateContactPerson AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,'varchar',NEW.poRevision);  \n" +
          "    END IF;  \n" +
          "END;  \n" +
          /* **************************** New Script -> 11-03-2022  *********************************** */
          "DROP TRIGGER IF EXISTS `Trg_AU_purchase_order_det`;  \n" +
          "CREATE TRIGGER `Trg_AU_purchase_order_det` AFTER UPDATE ON `purchase_order_det` FOR EACH ROW BEGIN  \n" +
          "	DECLARE vMfgCodeFormat INT;  \n" +
          "    DECLARE vOldCustomer VARCHAR(100);  \n" +
          "    DECLARE vNewCustomer VARCHAR(100);  \n" +
          "    DECLARE vPORevision VARCHAR(10);  \n" +
          "	SELECT fun_getMFGCodeNameFormat() INTO vMfgCodeFormat;  \n" +
          "    SELECT poRevision INTO vPORevision FROM purchase_order_mst WHERE id = NEW.refPurchaseOrderID;  \n" +
          "    IF IFNULL(OLD.mfgPartID,0) != IFNULL(NEW.mfgPartID,0) THEN  \n" +
          "       INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType, revision)  \n" +
          "       VALUES(\"PURCHASE_ORDER_DET\",CAST(new.id AS CHAR),'MFGPART',CAST(fun_getComponentNameByID(OLD.mfgPartID) AS CHAR),  \n" +
          "       CAST(fun_getComponentNameByID(new.mfgPartID) AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId, 'varchar', vPORevision);  \n" +
          "	END IF;  \n" +
          "    IF IFNULL(OLD.supplierPartID,0) != IFNULL(NEW.supplierPartID,0) THEN  \n" +
          "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType, revision)  \n" +
          "       VALUES(\"PURCHASE_ORDER_DET\",CAST(new.id AS CHAR),'SUPPLIERPART',CAST(fun_getComponentNameByID(OLD.supplierPartID) AS CHAR),  \n" +
          "       CAST(fun_getComponentNameByID(new.supplierPartID) AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId, 'varchar', vPORevision);  \n" +
          "	END IF;  \n" +
          "        IF IFNULL(OLD.partDescription,0) != IFNULL(NEW.partDescription,0) THEN  \n" +
          "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType, revision)  \n" +
          "       VALUES(\"PURCHASE_ORDER_DET\",CAST(new.id AS CHAR),'PARTDESCRIPTION',CAST(OLD.partDescription AS CHAR),  \n" +
          "       CAST(new.partDescription AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,fun_getDataTypeBasedOnTableAndColumnName('purchase_order_det','partDescription'), vPORevision);  \n" +
          "	END IF;  \n" +
          "    IF IFNULL(OLD.pcbPerArray,0) != IFNULL(NEW.pcbPerArray,0) THEN  \n" +
          "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType, revision)  \n" +
          "       VALUES(\"PURCHASE_ORDER_DET\",CAST(new.id AS CHAR),'PCBPERARRAY',CAST(OLD.pcbPerArray AS CHAR),  \n" +
          "       CAST(new.pcbPerArray AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,fun_getDataTypeBasedOnTableAndColumnName('purchase_order_det','pcbPerArray'), vPORevision);  \n" +
          "	END IF;  \n" +
          "    IF IFNULL(OLD.internalRef,0) != IFNULL(NEW.internalRef,0) THEN  \n" +
          "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType, revision)  \n" +
          "       VALUES(\"PURCHASE_ORDER_DET\",CAST(new.id AS CHAR),'INTERNALREF',CAST(OLD.internalRef AS CHAR),  \n" +
          "       CAST(new.internalRef AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,fun_getDataTypeBasedOnTableAndColumnName('purchase_order_det','internalRef'), vPORevision);  \n" +
          "	END IF;  \n" +
          "     IF IFNULL(OLD.totalRelease,0) != IFNULL(NEW.totalRelease,0) THEN  \n" +
          "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType, revision)  \n" +
          "       VALUES(\"PURCHASE_ORDER_DET\",CAST(new.id AS CHAR),'TOTALRELEASE',CAST(OLD.totalRelease AS CHAR),  \n" +
          "       CAST(new.totalRelease AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,fun_getDataTypeBasedOnTableAndColumnName('purchase_order_det','totalRelease'), vPORevision);  \n" +
          "	END IF;  \n" +
          "     IF IFNULL(OLD.qty,0) != IFNULL(NEW.qty,0) THEN  \n" +
          "                  UPDATE packing_slip_material_receive_det SET orderedQty=NEW.qty WHERE refPurchaseOrderDetID=NEW.id AND isdeleted=0;  \n" +
          "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType, revision)  \n" +
          "       VALUES(\"PURCHASE_ORDER_DET\",CAST(new.id AS CHAR),'POQTY',CAST(OLD.qty AS CHAR),  \n" +
          "       CAST(new.qty AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,'qty', vPORevision);  \n" +
          "	END IF;  \n" +
          "    IF IFNULL(OLD.price,0) != IFNULL(NEW.price,0) THEN  \n" +
          "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType, revision)  \n" +
          "       VALUES(\"PURCHASE_ORDER_DET\",CAST(new.id AS CHAR),'PRICE',CAST(OLD.price AS CHAR),  \n" +
          "       CAST(NEW.price AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,'unitprice', vPORevision);  \n" +
          "	END IF;  \n" +
          "    IF IFNULL(OLD.lineComment,0) != IFNULL(NEW.lineComment,0) THEN  \n" +
          "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType, revision)  \n" +
          "       VALUES(\"PURCHASE_ORDER_DET\",CAST(new.id AS CHAR),'LINECOMMENT',CAST(OLD.lineComment AS CHAR),  \n" +
          "       CAST(NEW.lineComment AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,fun_getDataTypeBasedOnTableAndColumnName('purchase_order_det','lineComment'), vPORevision);  \n" +
          "	END IF;  \n" +
          "    IF IFNULL(OLD.supplierQuoteNumber,0) != IFNULL(NEW.supplierQuoteNumber,0) THEN  \n" +
          "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType, revision)  \n" +
          "       VALUES(\"PURCHASE_ORDER_DET\",CAST(new.id AS CHAR),'SUPPLIERQUOTE#',CAST(OLD.supplierQuoteNumber AS CHAR),  \n" +
          "       CAST(NEW.supplierQuoteNumber AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,fun_getDataTypeBasedOnTableAndColumnName('purchase_order_det','supplierQuoteNumber'), vPORevision);  \n" +
          "	END IF;  \n" +
          "	IF IFNULL(OLD.packagingID,0) != IFNULL(NEW.packagingID,0) THEN  \n" +
          "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType, revision)  \n" +
          "		VALUES(\"PURCHASE_ORDER_DET\",CAST(new.id AS CHAR),'PACKAGING',CAST(fun_getPackagingNameByID(OLD.packagingID) AS CHAR),  \n" +
          "		CAST(fun_getPackagingNameByID(NEW.packagingID) AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,'varchar', vPORevision);  \n" +
          "	END IF;  \n" +
          "	IF IFNULL(OLD.rohsStatusID,0) != IFNULL(NEW.rohsStatusID,0) THEN  \n" +
          "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType, revision)  \n" +
          "		VALUES(\"PURCHASE_ORDER_DET\",CAST(new.id AS CHAR),'ROHSSTATUS',CAST(fun_getRoHSNameByID(OLD.rohsStatusID) AS CHAR),  \n" +
          "		CAST(fun_getRoHSNameByID(NEW.rohsStatusID) AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,'varchar', vPORevision);  \n" +
          "	END IF;  \n" +
          "	IF IFNULL(OLD.internalLineComment,0) != IFNULL(NEW.internalLineComment,0) THEN  \n" +
          "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType, revision)  \n" +
          "		VALUES(\"PURCHASE_ORDER_DET\",CAST(new.id AS CHAR),'INTERNALLINECOMMENT',CAST(OLD.internalLineComment AS CHAR),  \n" +
          "		CAST(NEW.internalLineComment AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,fun_getDataTypeBasedOnTableAndColumnName('purchase_order_det','internalLineComment'), vPORevision);  \n" +
          "	END IF;  \n" +
          "	IF IFNULL(OLD.isLineCustConsigned,0) != IFNULL(NEW.isLineCustConsigned,0) THEN  \n" +
          "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType, revision)  \n" +
          "		VALUES(\"PURCHASE_ORDER_DET\",CAST(new.id AS CHAR),'LINECUSTCONSIGNED',CAST(CASE WHEN OLD.isLineCustConsigned=0 THEN 'No' ELSE 'Yes' END AS CHAR),  \n" +
          "		CAST(CASE WHEN NEW.isLineCustConsigned=0 THEN 'No' ELSE 'Yes' END AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId, 'varchar', vPORevision);  \n" +
          "	END IF;  \n" +
          "    IF IFNULL(OLD.lineCustomerID,0) != IFNULL(NEW.lineCustomerID,0) THEN  \n" +
          "		SELECT fun_GetFormattedMfgCode(mfgCode, mfgName, vMfgCodeFormat) INTO vOldCustomer FROM mfgcodemst WHERE id=OLD.lineCustomerID;  \n" +
          "        SELECT fun_GetFormattedMfgCode(mfgCode, mfgName, vMfgCodeFormat) INTO vNewCustomer FROM mfgcodemst WHERE id=NEW.lineCustomerID;  \n" +
          "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType, revision)  \n" +
          "		VALUES(\"PURCHASE_ORDER_DET\",CAST(new.id AS CHAR),'LINECUSTOMER',CAST(vOldCustomer AS CHAR),  \n" +
          "		CAST(vNewCustomer AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId, 'varchar', vPORevision);  \n" +
          "	END IF;  \n" +
          "    IF IFNULL(OLD.isNonUMIDStock,0) != IFNULL(NEW.isNonUMIDStock,0) THEN  \n" +
          "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType, revision)  \n" +
          "		VALUES(\"PURCHASE_ORDER_DET\",CAST(new.id AS CHAR),'LINENONUMIDSTOCK',CAST(CASE WHEN OLD.isNonUMIDStock=0 THEN 'No' ELSE 'Yes' END AS CHAR),  \n" +
          "		CAST(CASE WHEN NEW.isNonUMIDStock=0 THEN 'No' ELSE 'Yes' END AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId, 'varchar', vPORevision);  \n" +
          "	END IF;  \n" +
          "    IF IFNULL(OLD.isDeleted,0) != IFNULL(NEW.isDeleted,0) THEN  \n" +
          "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,valueDataType, revision)  \n" +
          "		VALUES(\"PURCHASE_ORDER_DET\", CAST(new.id AS CHAR), 'DELETED', NULL,  \n" +
          "        CONCAT('PO Line ID ', CAST(OLD.lineID AS CHAR), ' is Deleted'),fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,'varchar', vPORevision);  \n" +
          "	END IF;  \n" +
          "END;  \n" +
          /* **************************** New Script -> 11-03-2022  *********************************** */
          "DROP TRIGGER IF EXISTS `Trg_AU_purchase_order_line_othercharges`;  \n" +
          "CREATE TRIGGER `Trg_AU_purchase_order_line_othercharges` AFTER UPDATE ON `purchase_order_line_othercharges` FOR EACH ROW BEGIN  \n" +
          "	DECLARE vPORevision VARCHAR(10);  \n" +
          "    SELECT po.poRevision INTO vPORevision FROM purchase_order_mst po  \n" +
          "		JOIN purchase_order_det pod ON po.id = pod.refPurchaseOrderID  \n" +
          "    WHERE pod.id = NEW.refPurchaseOrderDetID;  \n" +
          "	IF IFNULL(OLD.qty,0) != IFNULL(NEW.qty,0) THEN  \n" +
          "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType, revision)  \n" +
          "		VALUES(\"PURCHASEORDERLINEOTHERCHARGES\",CAST(NEW.id AS CHAR),'QTY',CAST(OLD.qty AS CHAR),  \n" +
          "		CAST(NEW.qty AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,'qty', vPORevision);  \n" +
          "	END IF;  \n" +
          "	IF IFNULL(OLD.price,0) != IFNULL(NEW.price,0) THEN  \n" +
          "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType, revision)  \n" +
          "		VALUES(\"PURCHASEORDERLINEOTHERCHARGES\",CAST(NEW.id AS CHAR),'PRICE',CAST(OLD.price AS CHAR),  \n" +
          "		CAST(NEW.price AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,'unitprice', vPORevision);  \n" +
          "	END IF;  \n" +
          "    IF IFNULL(OLD.lineComment,0) != IFNULL(NEW.lineComment,0) THEN  \n" +
          "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType, revision)  \n" +
          "		VALUES(\"PURCHASEORDERLINEOTHERCHARGES\",CAST(NEW.id AS CHAR),'INTERNALNOTES',CAST(OLD.lineComment AS CHAR),  \n" +
          "		CAST(NEW.lineComment AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,'varchar', vPORevision);  \n" +
          "	END IF;  \n" +
          "    IF IFNULL(OLD.lineInternalComment,0) != IFNULL(NEW.lineInternalComment,0) THEN  \n" +
          "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType, revision)  \n" +
          "		VALUES(\"PURCHASEORDERLINEOTHERCHARGES\",CAST(NEW.id AS CHAR),'COMMENTS',CAST(OLD.lineInternalComment AS CHAR),  \n" +
          "		CAST(NEW.lineInternalComment AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,'varchar', vPORevision);  \n" +
          "	END IF;  \n" +
          "END;  \n" +
          /* **************************** New Script -> 11-03-2022  *********************************** */
          "DROP TRIGGER IF EXISTS `TRG_AU_purchase_order_line_release_det`;  \n" +
          "CREATE TRIGGER `TRG_AU_purchase_order_line_release_det` AFTER UPDATE ON `purchase_order_line_release_det` FOR EACH ROW BEGIN  \n" +
          "	DECLARE vPORevision VARCHAR(10);  \n" +
          "    SELECT po.poRevision INTO vPORevision FROM purchase_order_mst po  \n" +
          "		JOIN purchase_order_det pod ON po.id = pod.refPurchaseOrderID  \n" +
          "    WHERE pod.id = NEW.refPurchaseOrderDetID;  \n" +
          "	IF IFNULL(OLD.qty,0) != IFNULL(NEW.qty,0) THEN  \n" +
          "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType, revision)  \n" +
          "		VALUES(\"PURCHASEORDERLINERELEASEDET\",CAST(NEW.id AS CHAR),'QTY',CAST(OLD.qty AS CHAR),  \n" +
          "		CAST(NEW.qty AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,'qty', vPORevision);  \n" +
          "	END IF;  \n" +
          "    IF IFNULL(OLD.shippingDate,0) != IFNULL(NEW.shippingDate,0) THEN  \n" +
          "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType, revision)  \n" +
          "		VALUES(\"PURCHASEORDERLINERELEASEDET\",CAST(NEW.id AS CHAR),'DUEDATE',CAST(OLD.shippingDate AS CHAR),  \n" +
          "		CAST(NEW.shippingDate AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,fun_getDataTypeBasedOnTableAndColumnName('purchase_order_line_release_det','shippingDate'), vPORevision);  \n" +
          "	END IF;  \n" +
          "    IF IFNULL(OLD.promisedShipDate,0) != IFNULL(NEW.promisedShipDate,0) THEN  \n" +
          "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType, revision)  \n" +
          "		VALUES(\"PURCHASEORDERLINERELEASEDET\",CAST(NEW.id AS CHAR),'PROMISESHIPDATE',CAST(OLD.promisedShipDate AS CHAR),  \n" +
          "		CAST(NEW.promisedShipDate AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,fun_getDataTypeBasedOnTableAndColumnName('purchase_order_line_release_det','promisedShipDate'), vPORevision);  \n" +
          "	END IF;  \n" +
          "    IF IFNULL(OLD.releaseNumber,0) != IFNULL(NEW.releaseNumber,0) THEN  \n" +
          "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType, revision)  \n" +
          "		VALUES(\"PURCHASEORDERLINERELEASEDET\",CAST(NEW.id AS CHAR),'RELEASE#',CAST(OLD.releaseNumber AS CHAR),  \n" +
          "		CAST(NEW.releaseNumber AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,fun_getDataTypeBasedOnTableAndColumnName('purchase_order_line_release_det','releaseNumber'), vPORevision);  \n" +
          "	END IF;  \n" +
          "    IF IFNULL(OLD.shippingMethodID,0) != IFNULL(NEW.shippingMethodID,0) THEN  \n" +
          "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType, revision)  \n" +
          "		VALUES(\"PURCHASEORDERLINERELEASEDET\",CAST(NEW.id AS CHAR),'SHIPPINGMETHOD',CAST(fun_getGenericCategoryCodeNameByID(OLD.shippingMethodID) AS CHAR),  \n" +
          "		CAST(fun_getGenericCategoryCodeNameByID(NEW.shippingMethodID) AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,'varchar', vPORevision);  \n" +
          "	END IF;  \n" +
          "    IF IFNULL(OLD.shippingAddressID,0) != IFNULL(NEW.shippingAddressID,0) THEN  \n" +
          "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType, revision)  \n" +
          "		VALUES(\"PURCHASEORDERLINERELEASEDET\",CAST(NEW.id AS CHAR),'SHIPPINGADDRESS',CAST(OLD.shippingAddress AS CHAR),  \n" +
          "		CAST(NEW.shippingAddress AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,'varchar', vPORevision);  \n" +
          "	END IF;  \n" +
          "    IF IFNULL(OLD.releaseNotes,0) != IFNULL(NEW.releaseNotes,0) THEN  \n" +
          "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType, revision)  \n" +
          "		VALUES(\"PURCHASEORDERLINERELEASEDET\",CAST(NEW.id AS CHAR),'RELEASENOTES',CAST(OLD.releaseNotes AS CHAR),  \n" +
          "		CAST(NEW.releaseNotes AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,fun_getDataTypeBasedOnTableAndColumnName('purchase_order_line_release_det','releaseNotes'), vPORevision);  \n" +
          "	END IF;  \n" +
          "	IF IFNULL(OLD.additionalNotes,0) != IFNULL(NEW.additionalNotes,0) THEN  \n" +
          "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType, revision)  \n" +
          "		VALUES(\"PURCHASEORDERLINERELEASEDET\",CAST(NEW.id AS CHAR),'ADDITIONALNOTES',CAST(OLD.additionalNotes AS CHAR),  \n" +
          "		CAST(NEW.additionalNotes AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,fun_getDataTypeBasedOnTableAndColumnName('purchase_order_line_release_det','additionalNotes'), vPORevision);  \n" +
          "	END IF;  \n" +
          "	IF IFNULL(OLD.poLineWorkingStatus,0) != IFNULL(NEW.poLineWorkingStatus,0) THEN  \n" +
          "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType, revision)  \n" +
          "		VALUES(\"PURCHASEORDERLINERELEASEDET\",CAST(NEW.id AS CHAR),'POLINEWORKINGSTATUS',CAST((CASE WHEN OLD.poLineWorkingStatus='C' THEN 'Close' ELSE 'Open' END) AS CHAR),  \n" +
          "		CAST((CASE WHEN NEW.poLineWorkingStatus='C' THEN 'Close' ELSE 'Open' END) AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,'varchar', vPORevision);  \n" +
          "	END IF;  \n" +
          "    IF IFNULL(OLD.receivedQty,0) != IFNULL(NEW.receivedQty,0) THEN  \n" +
          "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType, revision)  \n" +
          "		VALUES(\"PURCHASEORDERLINERELEASEDET\",CAST(NEW.id AS CHAR),'RECEIVEDQTY',CAST(OLD.receivedQty AS CHAR),  \n" +
          "		CAST(NEW.receivedQty AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,'qty', vPORevision);  \n" +
          "	END IF;  \n" +
          "    IF IFNULL(OLD.poLineCompleteReason,0) != IFNULL(NEW.poLineCompleteReason,0) THEN  \n" +
          "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType, revision)  \n" +
          "		VALUES(\"PURCHASEORDERLINERELEASEDET\",CAST(NEW.id AS CHAR),'POLINECOMPLETEREASON',CAST(OLD.poLineCompleteReason AS CHAR),  \n" +
          "		CAST(NEW.poLineCompleteReason AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,'varchar', vPORevision);  \n" +
          "	END IF;  \n" +
          "    IF IFNULL(OLD.poLineCompleteType,0) != IFNULL(NEW.poLineCompleteType,0) THEN  \n" +
          "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType, revision)  \n" +
          "		VALUES(\"PURCHASEORDERLINERELEASEDET\",CAST(NEW.id AS CHAR),'POLINECOMPLETETYPE',CAST((CASE WHEN OLD.poLineCompleteType = 'M' THEN 'Manually Completed' WHEN OLD.poLineCompleteType = 'A' THEN 'Auto Completed' ELSE 'Open' END) AS CHAR),  \n" +
          "		CAST((CASE WHEN NEW.poLineCompleteType = 'M' THEN 'Manually Completed' WHEN NEW.poLineCompleteType = 'A' THEN 'Auto Completed' ELSE 'Open' END) AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,'varchar', vPORevision);  \n" +
          "	END IF;  \n" +
          "	IF IFNULL(OLD.carrierAccountNumber,0) != IFNULL(NEW.carrierAccountNumber,0) THEN  \n" +
          "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType, revision)  \n" +
          "		VALUES(\"PURCHASEORDERLINERELEASEDET\",CAST(NEW.id AS CHAR),'CARRIERACCOUNT#',CAST(OLD.carrierAccountNumber AS CHAR),  \n" +
          "		CAST(NEW.carrierAccountNumber AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,'varchar', vPORevision);  \n" +
          "	END IF;  \n" +
          "    IF IFNULL(OLD.carrierID,0) != IFNULL(NEW.carrierID,0) THEN  \n" +
          "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType, revision)  \n" +
          "		VALUES(\"PURCHASEORDERLINERELEASEDET\",CAST(NEW.id AS CHAR),'CARRIER',CAST(fun_getGenericCategoryCodeNameByID(OLD.carrierID) AS CHAR),  \n" +
          "		CAST(fun_getGenericCategoryCodeNameByID(NEW.carrierID) AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,'varchar', vPORevision);  \n" +
          "	END IF;  \n" +
          "    IF IFNULL(OLD.shippingContactPersonID,0) != IFNULL(NEW.shippingContactPersonID,0) THEN  \n" +
          "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType, revision)  \n" +
          "		VALUES(\"PURCHASEORDERLINERELEASEDET\",CAST(NEW.id AS CHAR),'CONTACTPERSON',CAST(OLD.shippingContactPerson AS CHAR),  \n" +
          "		CAST(NEW.shippingContactPerson AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,'varchar', vPORevision);  \n" +
          "	END IF;  \n" +
          "END;  \n" +
          /* **************************** New Script -> 11-03-2022  *********************************** */
          "DROP TRIGGER IF EXISTS `TRG_BU_purchase_order_line_release_det`;  \n" +
          "CREATE TRIGGER `TRG_BU_purchase_order_line_release_det` BEFORE UPDATE ON `purchase_order_line_release_det` FOR EACH ROW BEGIN  \n" +
          "	IF(NEW.isdeleted = 0) THEN  \n" +
          "		IF (SELECT COUNT(1) FROM purchase_order_det WHERE id = NEW.refPurchaseOrderDetID AND isdeleted = true) = 1 THEN  \n" +
          "			SIGNAL SQLSTATE '45001' SET MESSAGE_TEXT= 'Parent Detail does not exists, Please refresh page and try again.';  \n" +
          "		END IF;  \n" +
          "		IF (NEW.qty = NEW.receivedQty AND NEW.poLineWorkingStatus='P' AND NEW.poLineCompleteType != 'M') THEN  \n" +
          "			SET NEW.poLineWorkingStatus='C';  \n" +
          "			SET NEW.poLineCompleteType='A';  \n" +
          "		ELSEIF ((NEW.qty > NEW.receivedQty AND NEW.poLineCompleteType != 'M') OR (NEW.qty != OLD.qty AND New.poLineCompleteType = 'M' AND NEW.poLineWorkingStatus='C')) THEN  \n" +
          "			SET NEW.poLineWorkingStatus='P';  \n" +
          "			SET NEW.poLineCompleteType='P';  \n" +
          "		END IF;  \n" +
          "	END IF;  \n" +
          "END;  \n" +
          /* **************************** Add Script Version -> 11-03-2022 *********************************** */
          "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
          "VALUES (1360,'1.00','V1',' User Story 41827: [Main Branch] Purchase Order Allow to add a new line in Completed PO - Jay '," + userid + ", '" + requiredDet.ipAddress + "');"
        );
        break;
    case 1360:
      allDbChangesArray.push(
        /* **************************** New Script -> 11-03-2022  *********************************** */
        "DROP function IF EXISTS `fun_getPurchaseOrderFieldLabel`;  \n" +
          "CREATE FUNCTION `fun_getPurchaseOrderFieldLabel`(  \n" +
          "fieldName TEXT  \n" +
          ") RETURNS text CHARSET utf8mb4  \n" +
          "BEGIN  \n" +
          "	SELECT (CASE  \n" +
          "		WHEN fieldName = 'QTY' THEN 'Qty'  \n" +
          "        WHEN fieldName = 'PRICE' THEN 'Price ($)'  \n" +
          "        WHEN fieldName = 'INTERNALNOTES' THEN 'Internal Notes'  \n" +
          "        WHEN fieldName = 'COMMENTS' THEN 'Comments'  \n" +
          "        WHEN fieldName = 'DUEDATE' THEN 'Due Date'  \n" +
          "        WHEN fieldName = 'PROMISESHIPDATE' THEN 'Supplier Promised Delivery Date'  \n" +
          "        WHEN fieldName = 'RELEASE#' THEN 'Release#'  \n" +
          "        WHEN fieldName = 'SHIPPINGMETHOD' THEN 'Shipping Method'  \n" +
          "        WHEN fieldName = 'SHIPPINGADDRESS' THEN 'Shipping Address'  \n" +
          "        WHEN fieldName = 'RELEASENOTES' THEN 'Release Notes'  \n" +
          "        WHEN fieldName = 'ADDITIONALNOTES' THEN 'Additional Notes'  \n" +
          "        WHEN fieldName = 'POLINEWORKINGSTATUS' THEN 'PO Release Working Status'  \n" +
          "        WHEN fieldName = 'RECEIVEDQTY' THEN 'Received Qty'  \n" +
          "        WHEN fieldName = 'POLINECOMPLETEREASON' THEN 'PO Release Complete Reason'  \n" +
          "        WHEN fieldName = 'POLINECOMPLETETYPE' THEN 'PO Release Complete Type'  \n" +
          "        WHEN fieldName = 'CARRIERACCOUNT#' THEN 'Carrier Account#'  \n" +
          "        WHEN fieldName = 'CARRIER' THEN 'Carrier'  \n" +
          "        WHEN fieldName = 'CONTACTPERSON' THEN 'Contact Person'  \n" +
          "        WHEN fieldName = 'MFGPART' THEN 'MPN'  \n" +
          "        WHEN fieldName = 'SUPPLIERPART' THEN 'SPN'  \n" +
          "        WHEN fieldName = 'PARTDESCRIPTION' THEN 'Description'  \n" +
          "        WHEN fieldName = 'PCBPERARRAY' THEN 'PCB Per Array'  \n" +
          "        WHEN fieldName = 'INTERNALREF' THEN 'Internal Ref#'  \n" +
          "        WHEN fieldName = 'TOTALRELEASE' THEN 'Total Release'  \n" +
          "        WHEN fieldName = 'POQTY' THEN 'PO Qty'  \n" +
          "        WHEN fieldName = 'LINECOMMENT' THEN 'Line Comment'  \n" +
          "        WHEN fieldName = 'SUPPLIERQUOTE#' THEN 'Supplier Quote#'  \n" +
          "        WHEN fieldName = 'PACKAGING' THEN 'Packaging'  \n" +
          "        WHEN fieldName = 'ROHSSTATUS' THEN 'RoHS Requirement'  \n" +
          "        WHEN fieldName = 'INTERNALLINECOMMENT' THEN 'Line Internal Notes'  \n" +
          "        WHEN fieldName = 'LINECUSTCONSIGNED' THEN 'PO Line Customer Consigned (No Charge)'  \n" +
          "        WHEN fieldName = 'LINECUSTOMER' THEN 'PO Line Customer'  \n" +
          "        WHEN fieldName = 'LINENONUMIDSTOCK' THEN 'PO Line Do Not Create UMID Stock'  \n" +
          "        WHEN fieldName = 'PONUMBER' THEN 'PO#'  \n" +
          "        WHEN fieldName = 'SONUMBER' THEN 'SO#'  \n" +
          "        WHEN fieldName = 'PODATE' THEN 'PO Date'  \n" +
          "        WHEN fieldName = 'SODATE' THEN 'SO Date'  \n" +
          "        WHEN fieldName = 'SUPPLIER' THEN 'Supplier'  \n" +
          "        WHEN fieldName = 'TERMS' THEN 'Terms'  \n" +
          "        WHEN fieldName = 'POREVISION' THEN 'PO Revision'  \n" +
          "        WHEN fieldName = 'POCOMMENT' THEN 'PO Comment'  \n" +
          "        WHEN fieldName = 'POSTATUS' THEN 'PO Status'  \n" +
          "        WHEN fieldName = 'BLANKETPO' THEN 'Blanket PO'  \n" +
          "        WHEN fieldName = 'SHIPPINGINSURANCE' THEN 'Shipping with Insurance'  \n" +
          "        WHEN fieldName = 'SUPPLIERADDRESS' THEN 'Supplier Address'  \n" +
          "        WHEN fieldName = 'SHIPPINGADDRESS' THEN 'Bill To / Ship To'  \n" +
          "        WHEN fieldName = 'INTERMEDIATEADDRESS' THEN 'Mark For (Intermediate Ship to)'  \n" +
          "        WHEN fieldName = 'FOB' THEN 'FOB'  \n" +
          "        WHEN fieldName = 'POWORKINGSTATUS' THEN 'PO Working Status'  \n" +
          "        WHEN fieldName = 'CANCELREASON' THEN 'PO Cancellation / Undo Reason'  \n" +
          "        WHEN fieldName = 'CANCELLATIONCONFIRMED' THEN 'Cancellation Confirmed by Supplier'  \n" +
          "        WHEN fieldName = 'POCUSTCONSIGNED' THEN 'PO Customer Consigned (No Charge)'  \n" +
          "        WHEN fieldName = 'POCUSTOMER' THEN 'PO Customer'  \n" +
          "        WHEN fieldName = 'NONSTOCKUMID' THEN 'PO Do Not Create UMID Stock'  \n" +
          "        WHEN fieldName = 'LOCKSTATUS' THEN 'Lock Status'  \n" +
          "        WHEN fieldName = 'LOCKEDBY' THEN 'Locked By'  \n" +
          "        WHEN fieldName = 'UNLOCKEDBY' THEN 'Unlocked By'  \n" +
          "        WHEN fieldName = 'LOCKEDAT' THEN 'Locked Date'  \n" +
          "        WHEN fieldName = 'UNLOCKEDAT' THEN 'Unlocked Date'  \n" +
          "        WHEN fieldName = 'LOCKEDBYROLE' THEN 'Locked By Role'  \n" +
          "        WHEN fieldName = 'UNLOCKEDBYROLE' THEN 'Unlocked By Role'  \n" +
          "        WHEN fieldName = 'POCOMPLETEREASON' THEN 'PO Complete Reason'  \n" +
          "        WHEN fieldName = 'SUPPLIERCONTACTPERSON' THEN 'Supplier Address Contact Person'  \n" +
          "        WHEN fieldName = 'SHIPPINGCONTACTPERSON' THEN 'Bill To / Ship To Contact Person'  \n" +
          "        WHEN fieldName = 'INTERMEDIATECONTACTPERSON' THEN 'Mark For (Intermediate Ship to) Contact Person'  \n" +
          "        WHEN fieldName = 'DELETED' THEN 'Deleted'  \n" +
          "	END) INTO fieldName;  \n" +
          "	RETURN fieldName;  \n" +
          "END;  \n" +
          /* **************************** Add Script Version -> 11-03-2022 *********************************** */
          "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
          "VALUES (1361,'1.00','V1',' User Story 41827: [Main Branch] Purchase Order Allow to add a new line in Completed PO - Jay '," + userid + ", '" + requiredDet.ipAddress + "');"
        );
        break;
        case 1355:
            allDbChangesArray.push(
                /* **************************** New Script -> 07-03-2022  *********************************** */
                "DROP procedure IF EXISTS `Sproc_RetrieveSupplierInvoicePayment`;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveSupplierInvoicePayment`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pSupplierIDs VARCHAR(16383),  \n" +
                "	IN pPaymentMethodIDs VARCHAR(16383),  \n" +
                "	IN pBankAccountCodeIDs VARCHAR(16383),  \n" +
                "    IN pTransactionModeIDs VARCHAR(16383),  \n" +
                "    IN pExactPaymentNumberSearch TINYINT,  \n" +
                "	IN pPaymentNumber VARCHAR(50),  \n" +
                "    IN pInvoiceNumber VARCHAR(50),  \n" +
                "	IN pExactPaymentAmountSearch TINYINT,  \n" +
                "	IN pAmount VARCHAR(50),  \n" +
                "	IN pFromDate DATE,  \n" +
                "	IN pToDate DATE,  \n" +
                "    IN pRefPaymentMode VARCHAR(2),  \n" +
                "    IN pLockStatusFilter VARCHAR(50),  \n" +
                "    IN pSelectedDateType VARCHAR(10),  \n" +
                "    IN pPaymentComments VARCHAR(1000),  \n" +
                "    IN pInvoiceAmount VARCHAR(50),  \n" +
                "    IN pExactInvoiceAmountSearch TINYINT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;  \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "	DECLARE v_InvoiceNumberWhereClause VARCHAR(500);  \n" +
                "    DECLARE v_mfgNameFormat VARCHAR(100);  \n" +
                "  \n" +
                "    SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
                "    select fun_getMFGCodeNameFormat() into v_mfgNameFormat;  \n" +
                "  \n" +
                "	SET v_InvoiceNumberWhereClause= '';  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "  		SET pWhereClause = '1=1' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pSupplierIDs IS NOT NULL AND pSupplierIDs != '' ) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND mfgcodeID in (',pSupplierIDs,')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pPaymentMethodIDs IS NOT NULL AND pPaymentMethodIDs != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND paymentType in (',pPaymentMethodIDs,')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pBankAccountCodeIDs IS NOT NULL AND pBankAccountCodeIDs != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND bankAccountMasID in (',pBankAccountCodeIDs,')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pTransactionModeIDs IS NOT NULL AND pTransactionModeIDs != '') THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND refGencTransModeID in (',pTransactionModeIDs,')');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pPaymentNumber IS NOT NULL) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND paymentNumber ',CASE WHEN pExactPaymentNumberSearch = TRUE THEN CONCAT(\" = '\", pPaymentNumber ,\"' \") ELSE CONCAT(\" like '%\", pPaymentNumber, \"%' \") END,' ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF(pPaymentComments IS NOT NULL AND pPaymentComments != '')THEN  \n" +
                "    	SET pWhereClause = CONCAT(pWhereClause,\" AND remark LIKE '%\",pPaymentComments,\"%'\");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF(pLockStatusFilter IS NOT NULL)THEN  \n" +
                "    	SET pWhereClause = CONCAT(pWhereClause,\" AND lockStatus = '\", pLockStatusFilter ,\"'\");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pInvoiceNumber IS NOT NULL) THEN  \n" +
                "		SET v_InvoiceNumberWhereClause = CONCAT(v_InvoiceNumberWhereClause,' AND  \n" +
                "			EXISTS (select 1  \n" +
                "					   from packing_slip_material_receive psd  \n" +
                "					   join packingslip_invoice_payment_det pdet on pdet.refPackingslipInvoiceID = psd.id  \n" +
                "					  where psd.isDeleted = 0  \n" +
                "						and pdet.refPayementid = inv.id  \n" +
                "						AND (', CASE WHEN pRefPaymentMode = 'P' THEN  CONCAT(\"psd.invoiceNumber = '\",pInvoiceNumber,\"'\") ELSE  CONCAT(\"psd.creditMemoNumber = '\",pInvoiceNumber,\"' or psd.debitMemoNumber= '\",pInvoiceNumber,\"'\") END, ')  \n" +
                "				)'  \n" +
                "		);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pAmount IS NOT NULL OR pAmount = 0) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND paymentAmount ',CASE WHEN pExactPaymentAmountSearch = TRUE THEN CONCAT(\" = '\", pAmount ,\"' \") ELSE CONCAT(\" like '%\", pAmount, \"%' \") END,' ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF(pInvoiceAmount IS NOT NULL OR pInvoiceAmount = 0) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND invoiceAmount ',CASE WHEN pExactInvoiceAmountSearch = TRUE THEN CONCAT(\" = '\", pInvoiceAmount ,\"' \") ELSE CONCAT(\" like '%\", pInvoiceAmount, \"%' \") END,' ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF pFromDate IS NOT NULL AND pToDate IS NOT NULL THEN  \n" +
                "		IF pSelectedDateType = 'PO' THEN  \n" +
                "			SET v_InvoiceNumberWhereClause = CONCAT(v_InvoiceNumberWhereClause,' AND  \n" +
                "				EXISTS (select 1  \n" +
                "						   from packing_slip_material_receive psd  \n" +
                "						   join packingslip_invoice_payment_det pdet on pdet.refPackingslipInvoiceID = psd.id  \n" +
                "						  where psd.isDeleted = 0  \n" +
                "							and pdet.refPayementid = inv.id  \n" +
                "							and (psd.poDate between \"',pFromDate,'\" and \"',pToDate,'\")  \n" +
                "					)'  \n" +
                "			);  \n" +
                "			-- SET pWhereClause = CONCAT(pWhereClause,\" and (c.invoiceDate between \"',pFromDate,'\" and \"',pToDate,'\")\");  \n" +
                "		ELSEIF pSelectedDateType = 'M' THEN  \n" +
                "			SET v_InvoiceNumberWhereClause = CONCAT(v_InvoiceNumberWhereClause,' AND  \n" +
                "				EXISTS (select 1  \n" +
                "						   from packing_slip_material_receive psd  \n" +
                "						   join packingslip_invoice_payment_det pdet on pdet.refPackingslipInvoiceID = psd.id  \n" +
                "						  where psd.isDeleted = 0  \n" +
                "							and pdet.refPayementid = inv.id  \n" +
                "							and (psd.receiptDate between \"',pFromDate,'\" and \"',pToDate,'\")  \n" +
                "					)'  \n" +
                "			);  \n" +
                "			-- SET pWhereClause = CONCAT(pWhereClause,\" AND (receiptDate BETWEEN '\",pFromDate,\"' AND '\",pToDate,\"')\");  \n" +
                "		ELSEIF pSelectedDateType = 'P' THEN  \n" +
                "			SET v_InvoiceNumberWhereClause = CONCAT(v_InvoiceNumberWhereClause,' AND  \n" +
                "				EXISTS (select 1  \n" +
                "						   from packing_slip_material_receive psd  \n" +
                "						   join packingslip_invoice_payment_det pdet on pdet.refPackingslipInvoiceID = psd.id  \n" +
                "						  where psd.isDeleted = 0  \n" +
                "							and pdet.refPayementid = inv.id  \n" +
                "							and (psd.packingSlipDate between \"',pFromDate,'\" and \"',pToDate,'\")  \n" +
                "					)'  \n" +
                "			);  \n" +
                "        	-- SET pWhereClause = CONCAT(pWhereClause,\" AND (poDate BETWEEN '\",pFromDate,\"' AND '\",pToDate,\"')\");  \n" +
                "		ELSEIF pSelectedDateType = 'I' THEN  \n" +
                "			SET v_InvoiceNumberWhereClause = CONCAT(v_InvoiceNumberWhereClause,' AND  \n" +
                "				EXISTS (select 1  \n" +
                "						   from packing_slip_material_receive psd  \n" +
                "						   join packingslip_invoice_payment_det pdet on pdet.refPackingslipInvoiceID = psd.id  \n" +
                "						  where psd.isDeleted = 0  \n" +
                "							and pdet.refPayementid = inv.id  \n" +
                "							and (psd.invoiceDate between \"',pFromDate,'\" and \"',pToDate,'\")  \n" +
                "					)'  \n" +
                "			);  \n" +
                "			-- SET pWhereClause = CONCAT(pWhereClause,\" AND (creditMemoDate BETWEEN '\",pFromDate,\"' AND '\",pToDate,\"')\");  \n" +
                "		ELSEIF pSelectedDateType = 'PM' THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause,\" AND (paymentDate BETWEEN '\",pFromDate,\"' AND '\",pToDate,\"')\");  \n" +
                "		END IF;  \n" +
                "	ELSEIF pFromDate IS NOT NULL THEN  \n" +
                "		IF pSelectedDateType = 'PO' THEN  \n" +
                "			SET v_InvoiceNumberWhereClause = CONCAT(v_InvoiceNumberWhereClause,' AND  \n" +
                "				EXISTS (select 1  \n" +
                "						   from packing_slip_material_receive psd  \n" +
                "						   join packingslip_invoice_payment_det pdet on pdet.refPackingslipInvoiceID = psd.id  \n" +
                "						  where psd.isDeleted = 0  \n" +
                "							and pdet.refPayementid = inv.id  \n" +
                "							and (psd.poDate = \"',pFromDate,'\")  \n" +
                "					)'  \n" +
                "			);  \n" +
                "			-- SET pWhereClause = CONCAT(pWhereClause,\" and (c.invoiceDate = '\",pFromDate,\"')\");  \n" +
                "		ELSEIF pSelectedDateType = 'M' THEN  \n" +
                "			SET v_InvoiceNumberWhereClause = CONCAT(v_InvoiceNumberWhereClause,' AND  \n" +
                "				EXISTS (select 1  \n" +
                "						   from packing_slip_material_receive psd  \n" +
                "						   join packingslip_invoice_payment_det pdet on pdet.refPackingslipInvoiceID = psd.id  \n" +
                "						  where psd.isDeleted = 0  \n" +
                "							and pdet.refPayementid = inv.id  \n" +
                "							and (psd.receiptDate = \"',pFromDate,'\")  \n" +
                "					)'  \n" +
                "			);  \n" +
                "			-- SET pWhereClause = CONCAT(pWhereClause,\" AND (receiptDate = '\",pFromDate,\"')\");  \n" +
                "		ELSEIF pSelectedDateType = 'P' THEN  \n" +
                "			SET v_InvoiceNumberWhereClause = CONCAT(v_InvoiceNumberWhereClause,' AND  \n" +
                "				EXISTS (select 1  \n" +
                "						   from packing_slip_material_receive psd  \n" +
                "						   join packingslip_invoice_payment_det pdet on pdet.refPackingslipInvoiceID = psd.id  \n" +
                "						  where psd.isDeleted = 0  \n" +
                "							and pdet.refPayementid = inv.id  \n" +
                "							and (psd.packingSlipDate = \"',pFromDate,'\")  \n" +
                "					)'  \n" +
                "			);  \n" +
                "        	-- SET pWhereClause = CONCAT(pWhereClause,\" AND (poDate = '\",pFromDate,\"')\");  \n" +
                "		ELSEIF pSelectedDateType = 'I' THEN  \n" +
                "			SET v_InvoiceNumberWhereClause = CONCAT(v_InvoiceNumberWhereClause,' AND  \n" +
                "				EXISTS (select 1  \n" +
                "						   from packing_slip_material_receive psd  \n" +
                "						   join packingslip_invoice_payment_det pdet on pdet.refPackingslipInvoiceID = psd.id  \n" +
                "						  where psd.isDeleted = 0  \n" +
                "							and pdet.refPayementid = inv.id  \n" +
                "							and (psd.invoiceDate = \"',pFromDate,'\")  \n" +
                "					)'  \n" +
                "			);  \n" +
                "			-- SET pWhereClause = CONCAT(pWhereClause,\" AND (creditMemoDate = '\",pFromDate,\"')\");  \n" +
                "		ELSEIF pSelectedDateType = 'PM' THEN  \n" +
                "        	SET pWhereClause = CONCAT(pWhereClause,\" AND (paymentDate = '\",pFromDate,\"')\");  \n" +
                "		END IF;  \n" +
                "    END IF;  \n" +
                "  \n" +
                "	SET @Sproc_Sproc_RetrieveSupplierInvoicePayment = CONCAT(\"  \n" +
                "		SELECT		inv.id,  \n" +
                "				inv.systemId,  \n" +
                "				inv.mfgcodeID,  \n" +
                "				m.mfgCode supplier,  \n" +
                "				fun_GetFormattedMfgCode(m.mfgCode, m.mfgName, '\",v_mfgNameFormat,\"') supplierCodeName,  \n" +
                "				inv.isPaymentVoided,  \n" +
                "				case 	when inv.isPaymentVoided = 0 then  \n" +
                "						'Paid'  \n" +
                "					else  \n" +
                "						'Voided'  \n" +
                "				end isPaymentVoidedConvertedValue,  \n" +
                "				inv.voidPaymentReason,  \n" +
                "				inv.refVoidedPaymentNumber,  \n" +
                "                inv.refVoidedPaymentId,  \n" +
                "                (select c.lockStatus from packingslip_invoice_payment c  \n" +
                "					where c.id = inv.refVoidedPaymentId) refVoidedPaymentLockStatus,  \n" +
                "				inv.paymentNumber,  \n" +
                "				inv.bankName,  \n" +
                "				inv.bankAccountNo,  \n" +
                "				inv.paymentType,  \n" +
                "				inv.bankAccountMasID,  \n" +
                "				gc.gencCategoryName paymentMethod,  \n" +
                "				gc.systemGenerated systemGeneratedPaymentMethod,  \n" +
                "				inv.paymentDate,  \n" +
                "				invdet.invoiceAmount,  \n" +
                "				inv.paymentAmount,  \n" +
                "				inv.payToName,  \n" +
                "                fun_getAddressbyIDForCheckPrint(inv.payToAddressID, inv.payToContactPersonID) payToAddress,  \n" +
                "                fun_getAddressbyIDForCheckPrint(inv.billToAddressID, inv.billToContactPersonID) billToAddress,  \n" +
                "                inv.refGencTransModeID,  \n" +
                "                gtm.modeName transactionModeName,  \n" +
                "                gtm.systemGenerated systemGeneratedTransactionMode,  \n" +
                "				inv.accountReference,  \n" +
                "				inv.remark,  \n" +
                "                inv.depositBatchNumber,  \n" +
                "                inv.offsetAmount,  \n" +
                "                inv.acctId,  \n" +
                "                fun_getChartOfAccountsCodeNameByID(inv.acctId) coaName,  \n" +
                "				fun_getUserNameByID(inv.createdBy) createdby,  \n" +
                "				fun_getUserNameByID(inv.updatedBy) updatedby,  \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(inv.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAt,  \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(inv.UpdatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt,  \n" +
                "				fun_getRoleByID(inv.updateByRoleId) updatedbyRole,  \n" +
                "				fun_getRoleByID(inv.createByRoleId) createdbyRole,  \n" +
                "				inv.lockStatus,  \n" +
                "				(case when inv.lockStatus = 'NA' then 'Not Applicable'  \n" +
                "					when inv.lockStatus = 'RL' then 'Ready To Lock'  \n" +
                "					when inv.lockStatus = 'LC' then 'Locked'  \n" +
                "					else null end  \n" +
                "				) lockStatusValue,  \n" +
                "				fun_getUserNameByID(inv.lockedBy) lockByName,  \n" +
                "				fun_getRoleByID(inv.lockedByRoleId) lockedByRoleName,  \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(inv.lockedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') lockedAt  \n" +
                "		FROM	packingslip_invoice_payment inv  \n" +
                "        join mfgcodemst m ON m.id = inv.mfgcodeID  \n" +
                "		INNER JOIN 	genericcategory gc ON inv.paymentType = gc.gencCategoryID  \n" +
                "        left join generic_transmode_mst gtm ON gtm.id = inv.refGencTransModeID  \n" +
                "		left JOIN (  \n" +
                "					SELECT 		pid.refPayementid,	SUM(psmd.extendedPrice) invoiceAmount  \n" +
                "					FROM 		packingslip_invoice_payment_det pid  \n" +
                "					LEFT JOIN 	packing_slip_material_receive_det psmd ON psmd.refPackingSlipMaterialRecID = pid.refPackingslipInvoiceID AND psmd.isDeleted = 0  \n" +
                "					WHERE 		pid.isDeleted = 0  \n" +
                "                       and		pid.isPaymentVoided = 0  \n" +
                "					GROUP BY 	pid.refPayementid  \n" +
                "				) invdet ON invdet.refPayementid = inv.id  \n" +
                "		WHERE 		inv.isDeleted = 0  \n" +
                "					AND inv.refPaymentMode = '\",pRefPaymentMode,\"'  \n" +
                "					AND gc.isDeleted = 0 \" ,v_InvoiceNumberWhereClause  \n" +
                "	);  \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "		SET pOrderBy = \" ORDER BY paymentDate desc, isPaymentVoided asc \";  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/* to get total count of rows */  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@Sproc_Sproc_RetrieveSupplierInvoicePayment,\" ) c where 1=1 and \", pWhereClause);  \n" +
                "        PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"select c.*  from ( \", @Sproc_Sproc_RetrieveSupplierInvoicePayment,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "	-- select @SQLStatement2;  \n" +
                "    PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 07-03-2022 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1356,'1.00','V1',' User Story 41825: [Main Branch] Add Invoice Amount Filter on Supplier Payment List Page - Jay '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1356:
            allDbChangesArray.push(
                /* **************************** New Script -> 10-03-2021  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetCustomerPaymentBalanceAndPastDue` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetCustomerPaymentBalanceAndPastDue`(  \n" +
                "	IN pPageIndex INT,  \n" +
                "	IN pRecordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pRequestType VARCHAR(5),  \n" +
                "	IN pAgedReceivablesDueAsOfDate DATE ,  \n" +
                "	IN pDueDate DATE ,  \n" +
                "	IN pAdditionalDays INT,  \n" +
                "	IN pTermsAndAboveDays INT  ,  \n" +
                "	IN pIsIncludeZeroValueInvoices TINYINT  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "	/* pRequestType Aged Receivable - 'AR' , Past Due - 'PD'  */  \n" +
                "	DECLARE vDueDate DATE;  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255);  \n" +
                "	DECLARE vDateDisplayFormat VARCHAR(15);  \n" +
                "	DECLARE vTimeZone VARCHAR(50);  \n" +
                "	DECLARE currDateWithAppliedTimeZone VARCHAR(15);  \n" +
                "	DECLARE v_mfgNameFormat VARCHAR(100);  \n" +
                "  \n" +
                "	SELECT fun_getMFGCodeNameFormat() INTO v_mfgNameFormat;  \n" +
                "  \n" +
                "	/* cps.subStatus 2-Invoiced,3-Corrected and Invoiced */  \n" +
                "  \n" +
                "	IF (pRequestType = 'AR') THEN	/* pRequestType Aged Receivable - 'AR' */  \n" +
                "		SET vDueDate = pAgedReceivablesDueAsOfDate;  \n" +
                "  \n" +
                "	ELSEIF (pRequestType = 'PD') THEN /* Past Due - 'PD' */  \n" +
                "		IF (pTermsAndAboveDays IS NOT NULL) THEN  \n" +
                "			SELECT fun_getDateFormatKey() INTO vDateDisplayFormat;  \n" +
                "			SELECT fun_getTimeZone() INTO vTimeZone;  \n" +
                "			SELECT fun_ApplyCommonDateFormatByParaValue(CURRENT_DATE(),vTimeZone,\"%Y-%m-%d\") INTO currDateWithAppliedTimeZone ;  \n" +
                "			SET vDueDate = DATE_ADD(currDateWithAppliedTimeZone, INTERVAL IFNULL(pTermsAndAboveDays,0) DAY);  \n" +
                "		ELSE  \n" +
                "			SET vDueDate = DATE_ADD(pDueDate, INTERVAL IFNULL(pAdditionalDays,0) DAY);  \n" +
                "		END IF;  \n" +
                "  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	SET @temp_balanceDue = CONCAT(\"  \n" +
                "	SELECT  \n" +
                "		temp_aged_details.customerID,  \n" +
                "		fun_GetFormattedMfgCode(mcm.mfgCode, mcm.mfgName, '\",v_mfgNameFormat,\"') AS customerCodeName,  \n" +
                "		temp_aged_details.custCurrTermDays,  \n" +
                "		(SUM(temp_aged_details.invoiceCount) - SUM(temp_aged_details.paidInvoiceCount)) totalInvCount,  \n" +
                "		(SUM(temp_aged_details.unInvoiceCount)) totalUnInvCount,  \n" +
                "		(SUM(temp_aged_details.dratftCreditMemoCount)) totalDraftCreditMemoCount,  \n" +
                "		(SELECT count(1) FROM customer_packingslip WHERE transType='P' AND refCustInvoiceID IS NULL AND isDeleted=0 and customerID=temp_aged_details.customerID) packingSlipNotInvoicedCount,  \n" +
                "		SUM(temp_aged_details.totalDueAmount) totalAmountOfAgedDueReceivable,  \n" +
                "		SUM(temp_aged_details.currentAmount) totalAmountWithinTerms,  \n" +
                "		SUM(temp_aged_details.agedAmountAs0To30) agedAmountAs0To30,  \n" +
                "		SUM(temp_aged_details.agedAmountAs31To60) agedAmountAs31To60,  \n" +
                "		SUM(temp_aged_details.agedAmountAs61To90) agedAmountAs61To90,  \n" +
                "		SUM(temp_aged_details.agedAmountAs91To120) agedAmountAs91To120,  \n" +
                "		SUM(temp_aged_details.agedAmountAs121more) agedAmountAs121More,  \n" +
                "		SUM(temp_aged_details.totalOutstandingAmount) totalOutstandingAmount,  \n" +
                "		SUM(temp_aged_details.totalCreditMemoAmount) totalCreditMemoAmount,  \n" +
                "		SUM(temp_aged_details.totalUnappliedAmount) totalAdjustmentPendingAmount,  \n" +
                "		SUM(temp_aged_details.totalCreditAmount) totalCreditAmount,  \n" +
                "		(SUM(temp_aged_details.totalCustomerInvoicedAmount) - SUM(temp_aged_details.totalRecievedAmount)) totalOutStandingWithoutCreditMemo,  \n" +
                "		SUM(temp_aged_details.totalDraftAmount) totalNotInvoicedAmount,  \n" +
                "		SUM(temp_aged_details.totalRecievedAmount) totalRecievedAmount FROM (  \n" +
                "		SELECT  \n" +
                "				  `cid`.`customerID`                  AS `customerID`,  \n" +
                "				  `cid`.`refCustPackingslipInvoiceID` AS `refCustPackingslipInvoiceID`,  \n" +
                "				  SUM(`cid`.`invoiceCount`)           AS `invoiceCount`,  \n" +
                "				  SUM(`cid`.`unInvoiceCount`)         AS `unInvoiceCount`,  \n" +
                "				  SUM(`cid`.`dratftCreditMemoCount`)  AS `dratftCreditMemoCount`,  \n" +
                "				  -- `cid`.`DocDate`                  AS `DocDate`,  \n" +
                "				  -- `cpt`.`paymentTermsID`           AS `paymentTermsID`,  \n" +
                "				  `cid`.`termsDays`                   AS `termsDays`,  \n" +
                "				  `cpt`.`termsDays`                   AS `custCurrTermDays`,  \n" +
                "				  (TO_DAYS(CURDATE()) - TO_DAYS((`cid`.`DocDate` + INTERVAL `cid`.`termsDays` DAY))) AS `DueDaysDiff`,  \n" +
                "				  (CASE WHEN ((TO_DAYS('\",vDueDate,\"') - TO_DAYS((`cid`.`DocDate` + INTERVAL `cid`.`termsDays` DAY))) >= 0) THEN (SUM(`cid`.`totalInvoicedAmount`) - SUM(`cid`.`totalRecievedAmount`) + SUM(`cid`.`totalUnappliedAmount`) + SUM(`cid`.`totalUnappliedCreditMemoAmount`)) ELSE 0 END) AS `totalDueAmount`,  \n" +
                "				  (CASE WHEN ((TO_DAYS('\",vDueDate,\"') - TO_DAYS((`cid`.`DocDate` + INTERVAL `cid`.`termsDays` DAY))) < 0 OR (TO_DAYS('\",vDueDate,\"') - TO_DAYS((`cid`.`DocDate` + INTERVAL `cid`.`termsDays` DAY))) IS NULL) THEN (SUM(`cid`.`totalInvoicedAmount`) - SUM(`cid`.`totalRecievedAmount`) + SUM(`cid`.`totalUnappliedAmount`) + SUM(`cid`.`totalUnappliedCreditMemoAmount`)) ELSE 0 END) AS `currentAmount`,  \n" +
                "				  (CASE WHEN (((TO_DAYS('\",vDueDate,\"') - TO_DAYS((`cid`.`DocDate` + INTERVAL `cid`.`termsDays` DAY))) >= 0) AND ((TO_DAYS('\",vDueDate,\"') - TO_DAYS((`cid`.`DocDate` + INTERVAL `cid`.`termsDays` DAY))) <= 30)) THEN (SUM(`cid`.`totalInvoicedAmount`) - SUM(`cid`.`totalRecievedAmount`) +SUM(`cid`.`totalUnappliedAmount`) + SUM(`cid`.`totalUnappliedCreditMemoAmount`)) ELSE 0 END) AS `agedAmountAs0To30`,  \n" +
                "				  (CASE WHEN (((TO_DAYS('\",vDueDate,\"') - TO_DAYS((`cid`.`DocDate` + INTERVAL `cid`.`termsDays` DAY))) >= 31) AND ((TO_DAYS('\",vDueDate,\"') - TO_DAYS((`cid`.`DocDate` + INTERVAL `cid`.`termsDays` DAY))) <= 60)) THEN (SUM(`cid`.`totalInvoicedAmount`) - SUM(`cid`.`totalRecievedAmount`) +SUM(`cid`.`totalUnappliedAmount`) + SUM(`cid`.`totalUnappliedCreditMemoAmount`)) ELSE 0 END) AS `agedAmountAs31To60`,  \n" +
                "				  (CASE WHEN (((TO_DAYS('\",vDueDate,\"') - TO_DAYS((`cid`.`DocDate` + INTERVAL `cid`.`termsDays` DAY))) >= 61) AND ((TO_DAYS('\",vDueDate,\"') - TO_DAYS((`cid`.`DocDate` + INTERVAL `cid`.`termsDays` DAY))) <= 90)) THEN (SUM(`cid`.`totalInvoicedAmount`) - SUM(`cid`.`totalRecievedAmount`) +SUM(`cid`.`totalUnappliedAmount`) + SUM(`cid`.`totalUnappliedCreditMemoAmount`)) ELSE 0 END) AS `agedAmountAs61To90`,  \n" +
                "				  (CASE WHEN (((TO_DAYS('\",vDueDate,\"') - TO_DAYS((`cid`.`DocDate` + INTERVAL `cid`.`termsDays` DAY))) >= 91) AND ((TO_DAYS('\",vDueDate,\"') - TO_DAYS((`cid`.`DocDate` + INTERVAL `cid`.`termsDays` DAY))) <= 120)) THEN (SUM(`cid`.`totalInvoicedAmount`) - SUM(`cid`.`totalRecievedAmount`) +SUM(`cid`.`totalUnappliedAmount`) + SUM(`cid`.`totalUnappliedCreditMemoAmount`)) ELSE 0 END) AS `agedAmountAs91To120`,  \n" +
                "				  (CASE WHEN ((TO_DAYS('\",vDueDate,\"') - TO_DAYS((`cid`.`DocDate` + INTERVAL `cid`.`termsDays` DAY))) >= 121) THEN (SUM(`cid`.`totalInvoicedAmount`) - SUM(`cid`.`totalRecievedAmount`) + SUM(`cid`.`totalUnappliedCreditMemoAmount`)) ELSE 0 END) AS `agedAmountAs121more`,  \n" +
                "				  SUM(`cid`.`totalInvoicedAmount`) , SUM(`cid`.`totalRecievedAmount`) , SUM(`cid`.`totalUnappliedCreditMemoAmount`) , SUM(`cid`.`totalCreditMemoAppliedAmount`),  \n" +
                "				  (SUM(`cid`.`totalInvoicedAmount`) - SUM(`cid`.`totalRecievedAmount`) +SUM(`cid`.`totalUnappliedAmount`) + SUM(`cid`.`totalUnappliedCreditMemoAmount`)) AS `totalOutstandingAmount`,  \n" +
                "				  -- (CASE WHEN (`cid`.`refCustPackingslipInvoiceID`) IS NOT NULL THEN SUM(`cid`.`totalInvoicedAmount`) - SUM(`cid`.`totalRecievedAmount`) + SUM(`cid`.`totalCreditMemoAmount`) ELSE 0 END) AS `totalOutstandingAmount`,  \n" +
                "				  (SUM(`cid`.`totalUnappliedCreditMemoAmount`))  AS `totalCreditMemoAmount`,  \n" +
                "				  SUM(`cid`.`totalUnappliedAmount`)   AS `totalUnappliedAmount`,  \n" +
                "				  (SUM(`cid`.`totalUnappliedCreditMemoAmount`) + SUM(`cid`.`totalUnappliedAmount`)) AS `totalCreditAmount`,  \n" +
                "				  SUM(`cid`.`totalInvoicedAmount`)    AS `totalCustomerInvoicedAmount`,  \n" +
                "				  SUM(`cid`.`totalDraftAmount`)       AS `totalDraftAmount`,  \n" +
                "				  SUM(`cid`.`totalRecievedAmount`)    AS `totalRecievedAmount`,  \n" +
                "				  (CASE WHEN ((SUM(`cid`.`totalInvoicedAmount`) <> 0) AND (SUM(`cid`.`totalInvoicedAmount`) - SUM(`cid`.`totalRecievedAmount`)) = 0) THEN 1 ELSE 0 END) paidInvoiceCount  \n" +
                "                  FROM  \n" +
                "(  \n" +
                "	SELECT  \n" +
                "					 `a`.`customerID`                     AS `customerID`,  \n" +
                "					 `a`.termsDays			      AS `termsDays`,  \n" +
                "					 `a`.`id`                             AS `refCustPackingslipInvoiceID`,  \n" +
                "					IF(((`a`.`transType` = 'I') AND ((`a`.`subStatus` = '2') OR (`a`.`subStatus` = '3'))),1,0) AS `invoiceCount`,  \n" +
                "					IF(((`a`.`transType` = 'I') AND ((`a`.`subStatus` = '1') OR (`a`.`subStatus` > '3'))),1,0) AS `unInvoiceCount`,  \n" +
                "					IF(((`a`.`transType` = 'C') AND (`a`.`subStatus` = '1')),1,0) AS `dratftCreditMemoCount`,  \n" +
                "					IF((`a`.`transType` = 'I'),`a`.`invoiceDate`,`a`.`creditMemoDate`) AS `DocDate`,  \n" +
                "					IFNULL(b.totalCustomerInvoiceReceivedAmount,0)  AS `totalRecievedAmount`,  \n" +
                "					0                                    AS `totalUnappliedAmount`,  \n" +
                "					IF(((`a`.`transType` = 'C') AND (`a`.`subStatus` = '2')),(IFNULL(`a`.`totalAmount`,0) + (IFNULL(c.totalCreditMemoAppliedAmount,0) + IFNULL(d.totRefundIssuedAgainstCreditMemo,0))),0) AS `totalUnappliedCreditMemoAmount`,  \n" +
                "					IFNULL(c.totalCreditMemoAppliedAmount, 0) AS totalCreditMemoAppliedAmount,  \n" +
                "					IF(((`a`.`transType` = 'I') AND ((`a`.`subStatus` = '2') OR (`a`.`subStatus` = '3'))),IFNULL(`a`.`totalAmount`,0),0) AS `totalInvoicedAmount`,  \n" +
                "					IF(((`a`.`transType` = 'I') AND ((`a`.`subStatus` = '1') OR (`a`.`subStatus` > '3'))),IFNULL(`a`.`totalAmount`,0),0) AS `totalDraftAmount`  \n" +
                "                       FROM `customer_packingslip` `a`  \n" +
                "						LEFT JOIN 	(SELECT     `b`.`refCustPackingslipInvoiceID`     					AS `refCustPackingslipInvoiceID`,  \n" +
                "										      SUM(IF(a.refPaymentMode='R',IFNULL(`b`.`paymentAmount`,0), 0))  	AS `totalRecievedAmount`,  \n" +
                "										      0									  	AS `totalCreditMemoAppliedAmount`,  \n" +
                "											SUM(IFNULL(`b`.`paymentAmount`,0))    					AS `totalCustomerInvoiceReceivedAmount`  \n" +
                "										    FROM (`packingslip_invoice_payment` `a`  \n" +
                "										       LEFT JOIN `packingslip_invoice_payment_det` `b`  \n" +
                "											 ON ((`b`.`refPayementid` = `a`.`id`)))  \n" +
                "										    WHERE ((`a`.`isDeleted` = 0) AND (IFNULL(`b`.`isDeleted`,0) = 0)  \n" +
                "											   AND (`a`.`isPaymentVoided` = 0)  \n" +
                "											   AND (`a`.`refPaymentMode` IN ('R','CA','WOFF')))  \n" +
                "										    GROUP BY `b`.`refCustPackingslipInvoiceID` ) b  \n" +
                "										ON a.id = b.refCustPackingslipInvoiceID  \n" +
                "  \n" +
                "						LEFT JOIN 	(  \n" +
                "									SELECT  \n" +
                "											a.`refCustCreditMemoID` AS refCustCreditMemoID,  \n" +
                "											SUM(IF(a.refPaymentMode='CA',IFNULL(`b`.`paymentAmount`,0), 0))  	AS `totalCreditMemoAppliedAmount`  \n" +
                "									FROM `packingslip_invoice_payment` `a`  \n" +
                "										       LEFT JOIN `packingslip_invoice_payment_det` `b`  \n" +
                "											 ON (`b`.`refPayementid` = `a`.`id`)  \n" +
                "										    WHERE (`a`.`isDeleted` = 0) AND (IFNULL(`b`.`isDeleted`,0) = 0)  \n" +
                "											   AND (`a`.`isPaymentVoided` = 0)  \n" +
                "											   AND (`a`.`refPaymentMode` IN ('R','CA'))  \n" +
                "										    GROUP BY `a`.`refCustCreditMemoID`  \n" +
                "										    ) c  ON a.id = c.refCustCreditMemoID  \n" +
                "						LEFT JOIN (  \n" +
                "									SELECT SUM(paymentAmount) AS totRefundIssuedAgainstCreditMemo , refRefundCustCreditMemoID  \n" +
                "										FROM packingslip_invoice_payment_det  \n" +
                "										WHERE isDeleted = 0 AND isPaymentVoided = 0  \n" +
                "										GROUP BY refRefundCustCreditMemoID  \n" +
                "									) d  ON a.id = d.refRefundCustCreditMemoID  \n" +
                "					WHERE ((`a`.`transType` IN('I','C'))  \n" +
                "                -- AND a.paymentStatus <> 'RE'  \n" +
                "					      AND (CASE WHEN \",pIsIncludeZeroValueInvoices,\" = 0 AND a.transType = 'I' THEN IFNULL(a.totalAmount,0) > 0 ELSE 1=1 END)  \n" +
                "					      AND (`a`.`isDeleted` = 0))  \n" +
                "	UNION  \n" +
                "      SELECT  \n" +
                "			`a`.`mfgcodeID`                       					AS `customerID`,  \n" +
                "			NULL									AS `termsDays`,  \n" +
                "			NULL									AS `refCustPackingslipInvoiceID`,  \n" +
                "			0                                     					AS `invoiceCount`,  \n" +
                "			0                                     					AS `unInvoiceCount`,  \n" +
                "			0                                     					AS `dratftCreditMemoCount`,  \n" +
                "			`a`.`paymentDate`                     					AS `DocDate`,  \n" +
                "			0  									AS `totalRecievedAmount`,  \n" +
                "			((IFNULL(`a`.`paymentAmount`,0) - (SUM(IFNULL(`b`.`paymentAmount`,0)) + IFNULL(c.totRefundIssuedOfPayment,0))) * -(1)) 	AS `totalUnappliedAmount`,  \n" +
                "			0                                     					AS `totalUnappliedCreditMemoAmount`,  \n" +
                "			0									AS `totalCreditMemoAppliedAmount`,  \n" +
                "			0                                     					AS `totalInvoicedAmount`,  \n" +
                "			0                                     					AS `totalDraftAmount`  \n" +
                "			FROM (`packingslip_invoice_payment` `a`  \n" +
                "				LEFT JOIN `packingslip_invoice_payment_det` `b` ON ((`b`.`refPayementid` = `a`.`id`) AND (IFNULL(`b`.`isDeleted`,0) = 0) ))  \n" +
                "				LEFT JOIN (  \n" +
                "						SELECT SUM(paymentAmount) AS totRefundIssuedOfPayment , refRefundPaymentID  \n" +
                "						FROM packingslip_invoice_payment_det  \n" +
                "						WHERE isDeleted = 0 AND isPaymentVoided = 0  \n" +
                "						GROUP BY refRefundPaymentID  \n" +
                "					     ) c  ON a.id = c.refRefundPaymentID  \n" +
                "			WHERE ((`a`.`isDeleted` = 0)  \n" +
                "			AND (`a`.`isPaymentVoided` = 0)  \n" +
                "			AND (`a`.`refPaymentMode` = 'R'))  \n" +
                "			GROUP BY `a`.`mfgcodeID`,a.id  ,`a`.`paymentDate`,`a`.`paymentAmount` , c.totRefundIssuedOfPayment  \n" +
                "                   HAVING  ((IFNULL(`a`.`paymentAmount`,0) - SUM(IFNULL(`b`.`paymentAmount`,0))) * -(1))  != 0  \n" +
                "                ) AS  cid  \n" +
                "                     INNER JOIN `vu_customer_payment_terms` `cpt` ON (`cid`.`customerID` = `cpt`.`mfgCodeID`)  \n" +
                "                  GROUP BY `cid`.`customerID`,`cid`.`refCustPackingslipInvoiceID`, `cid`.`termsDays` , `cpt`.`termsDays`,  \n" +
                "				`cid`.`DocDate` ,  \n" +
                "			(TO_DAYS(CURDATE()) - TO_DAYS((`cid`.`DocDate` + INTERVAL `cid`.`termsDays` DAY)))  \n" +
                "                ) AS temp_aged_details  \n" +
                "  \n" +
                "		JOIN mfgcodemst mcm ON mcm.id = temp_aged_details.customerID AND mcm.isDeleted = 0  \n" +
                "		GROUP BY temp_aged_details.customerID, temp_aged_details.custCurrTermDays  \n" +
                "		 HAVING ((SUM(temp_aged_details.totalCustomerInvoicedAmount) - SUM(temp_aged_details.totalRecievedAmount)) <> 0)  \n" +
                "		 OR SUM(temp_aged_details.totalDraftAmount) <> 0  OR totalCreditAmount <> 0  \n" +
                "	\");  \n" +
                "  \n" +
                "  \n" +
                "	IF(pPageIndex <> 0 AND pRecordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (pPageIndex -1) * pRecordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY totalOutstandingAmount desc, customerCodeName asc\") ;  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = '1=1' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	/* to get total count of rows */  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(*) as TotalRecord FROM (\", @temp_balanceDue ,\" ) c where \", pWhereClause );  \n" +
                "	PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"  \n" +
                "			SELECT 	c.*  \n" +
                "			FROM 	(\", @temp_balanceDue ,\" ) c  \n" +
                "			where 	\", pWhereClause ,\" \", pOrderBy , rowNumWhere);  \n" +
                "	-- SELECT @SQLStatement2;  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 10-03-2021 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1357,'1.00','V1',' #41709 Aged Receivable: Show Advance Payment and Open Credit Memo - KETAN '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1357:
            allDbChangesArray.push(
                /* **************************** New Script -> 10-03-2022  *********************************** */
                "ALTER TABLE `dataentrychange_auditlog`  \n" +
                "ADD COLUMN `revision` VARCHAR(10) NULL AFTER `opVersion`;  \n" +
                /* **************************** Add Script Version -> 10-03-2022 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1358,'1.00','V1',' User Story 41827: [Main Branch] Purchase Order Allow to add a new line in Completed PO - Jay '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1358:
            allDbChangesArray.push(
                /* **************************** New Script -> 10-03-2022  *********************************** */
                "DROP procedure IF EXISTS `Sproc_PurchaseOrderChangeHistory`;  \n" +
                "CREATE PROCEDURE `Sproc_PurchaseOrderChangeHistory`(  \n" +
                "	IN ppurchaseOrderID INT,  \n" +
                "	IN ppurchaseOrderDetId INT,  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383)  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255);  \n" +
                "	DECLARE vDateTimeDisplayFormat VARCHAR(100);  \n" +
                "	DECLARE vTimeZone VARCHAR(50);  \n" +
                "  \n" +
                "    SELECT fun_getTimeZone() INTO vTimeZone;  \n" +
                "	SELECT fun_getDateTimeFormat() INTO vDateTimeDisplayFormat;  \n" +
                "  \n" +
                "	SET @temp_Sproc_PurchaseOrderChangeHistory = CONCAT(\"  \n" +
                "			SELECT  \n" +
                "				da.ID,  \n" +
                "				da.Tablename,  \n" +
                "				da.RefTransID,  \n" +
                "				NULL AS poLineNumber,  \n" +
                "				NULL AS lineReleaseNumber,  \n" +
                "				FUN_GETPURCHASEORDERFIELDLABEL(da.Colname) Colname,  \n" +
                "				da.Oldval,  \n" +
                "				da.Newval,  \n" +
                "				da.valueDataType,  \n" +
                "				FUN_GETUSERNAMEBYID(da.updatedBy) updatedby,  \n" +
                "				FUN_GETUSERNAMEBYID(da.createdBy) createdby,  \n" +
                "				FUN_GETROLEBYID(da.createByRoleId) createdbyRole,  \n" +
                "				FUN_GETROLEBYID(da.updateByRoleId) updatedbyRole,  \n" +
                "				FUN_APPLYCOMMONDATETIMEFORMATBYPARAVALUE(da.createdAt,'\",vTimeZone,\"','\",vDateTimeDisplayFormat,\"') createdAt,  \n" +
                "				FUN_APPLYCOMMONDATETIMEFORMATBYPARAVALUE(da.UpdatedAt,'\",vTimeZone,\"','\",vDateTimeDisplayFormat,\"') updatedAt,  \n" +
                "                da.revision  \n" +
                "			FROM  \n" +
                "				dataentrychange_auditlog da  \n" +
                "			WHERE  \n" +
                "				da.RefTransID = \",ppurchaseOrderID,\" AND da.Tablename = 'PURCHASEORDERMST'  \n" +
                "			UNION ALL  \n" +
                "            SELECT  \n" +
                "				da.ID,  \n" +
                "				da.Tablename,  \n" +
                "				da.RefTransID,  \n" +
                "				pod.lineID AS poLineNumber,  \n" +
                "				NULL AS lineReleaseNumber,  \n" +
                "				FUN_GETPURCHASEORDERFIELDLABEL(da.Colname) Colname,  \n" +
                "				da.Oldval,  \n" +
                "				da.Newval,  \n" +
                "				da.valueDataType,  \n" +
                "				FUN_GETUSERNAMEBYID(da.updatedBy) updatedby,  \n" +
                "				FUN_GETUSERNAMEBYID(da.createdBy) createdby,  \n" +
                "				FUN_GETROLEBYID(da.createByRoleId) createdbyRole,  \n" +
                "				FUN_GETROLEBYID(da.updateByRoleId) updatedbyRole,  \n" +
                "				FUN_APPLYCOMMONDATETIMEFORMATBYPARAVALUE(da.createdAt,'\",vTimeZone,\"','\",vDateTimeDisplayFormat,\"') createdAt,  \n" +
                "				FUN_APPLYCOMMONDATETIMEFORMATBYPARAVALUE(da.UpdatedAt,'\",vTimeZone,\"','\",vDateTimeDisplayFormat,\"') updatedAt,  \n" +
                "                da.revision  \n" +
                "			FROM  \n" +
                "				dataentrychange_auditlog da  \n" +
                "					INNER JOIN  \n" +
                "				purchase_order_det pod ON pod.id = da.RefTransID AND da.Tablename = 'PURCHASE_ORDER_DET'  \n" +
                "			WHERE  \n" +
                "				da.RefTransID IN (SELECT id FROM purchase_order_det WHERE \",  \n" +
                "                CASE WHEN ppurchaseOrderDetId IS NOT NULL THEN CONCAT(\"id=\",ppurchaseOrderDetId,\" AND\")  ELSE '' END ,\" refpurchaseorderid = \",ppurchaseOrderID,\")  \n" +
                "			UNION ALL  \n" +
                "			SELECT  \n" +
                "				da.ID,  \n" +
                "				da.Tablename,  \n" +
                "				da.RefTransID,  \n" +
                "				pod.lineID AS poLineNumber,  \n" +
                "				pol.releaseNumber AS lineReleaseNumber,  \n" +
                "				FUN_GETPURCHASEORDERFIELDLABEL(da.Colname) Colname,  \n" +
                "				da.Oldval,  \n" +
                "				da.Newval,  \n" +
                "				da.valueDataType,  \n" +
                "				FUN_GETUSERNAMEBYID(da.updatedBy) updatedby,  \n" +
                "				FUN_GETUSERNAMEBYID(da.createdBy) createdby,  \n" +
                "				FUN_GETROLEBYID(da.createByRoleId) createdbyRole,  \n" +
                "				FUN_GETROLEBYID(da.updateByRoleId) updatedbyRole,  \n" +
                "				FUN_APPLYCOMMONDATETIMEFORMATBYPARAVALUE(da.createdAt,'\",vTimeZone,\"','\",vDateTimeDisplayFormat,\"') createdAt,  \n" +
                "				FUN_APPLYCOMMONDATETIMEFORMATBYPARAVALUE(da.UpdatedAt,'\",vTimeZone,\"','\",vDateTimeDisplayFormat,\"') updatedAt,  \n" +
                "                da.revision  \n" +
                "			FROM  \n" +
                "				dataentrychange_auditlog da  \n" +
                "					INNER JOIN  \n" +
                "				purchase_order_line_release_det pol ON pol.id = da.RefTransID  \n" +
                "					INNER JOIN  \n" +
                "				purchase_order_det pod ON pod.id = pol.refpurchaseorderdetid  \n" +
                "			WHERE  \n" +
                "				da.RefTransID IN (  \n" +
                "					SELECT id FROM purchase_order_line_release_det WHERE refPurchaseOrderDetID IN (  \n" +
                "						SELECT id FROM purchase_order_det WHERE \",  \n" +
                "                CASE WHEN ppurchaseOrderDetId IS NOT NULL THEN CONCAT(\"id=\",ppurchaseOrderDetId,\" AND\")  ELSE '' END ,\" refpurchaseorderid = \",ppurchaseOrderID,\"  \n" +
                "					)) AND da.Tablename = 'PURCHASEORDERLINERELEASEDET'  \n" +
                "			UNION ALL  \n" +
                "			SELECT  \n" +
                "				da.ID,  \n" +
                "				da.Tablename,  \n" +
                "				da.RefTransID,  \n" +
                "				pod.lineID AS poLineNumber,  \n" +
                "				NULL AS lineReleaseNumber,  \n" +
                "				FUN_GETPURCHASEORDERFIELDLABEL(da.Colname) Colname,  \n" +
                "				da.Oldval,  \n" +
                "				da.Newval,  \n" +
                "				da.valueDataType,  \n" +
                "				FUN_GETUSERNAMEBYID(da.updatedBy) updatedby,  \n" +
                "				FUN_GETUSERNAMEBYID(da.createdBy) createdby,  \n" +
                "				FUN_GETROLEBYID(da.createByRoleId) createdbyRole,  \n" +
                "				FUN_GETROLEBYID(da.updateByRoleId) updatedbyRole,  \n" +
                "				FUN_APPLYCOMMONDATETIMEFORMATBYPARAVALUE(da.createdAt,'\",vTimeZone,\"','\",vDateTimeDisplayFormat,\"') createdAt,  \n" +
                "				FUN_APPLYCOMMONDATETIMEFORMATBYPARAVALUE(da.UpdatedAt,'\",vTimeZone,\"','\",vDateTimeDisplayFormat,\"') updatedAt,  \n" +
                "                da.revision  \n" +
                "			FROM  \n" +
                "				dataentrychange_auditlog da  \n" +
                "					INNER JOIN  \n" +
                "				purchase_order_line_othercharges pol ON pol.id = da.RefTransID  \n" +
                "					INNER JOIN  \n" +
                "				purchase_order_det pod ON pod.id = pol.refPurchaseOrderDetID  \n" +
                "			WHERE  \n" +
                "				da.RefTransID IN (  \n" +
                "					SELECT id FROM purchase_order_line_othercharges WHERE refPurchaseOrderDetID IN (  \n" +
                "						SELECT id FROM purchase_order_det WHERE \",  \n" +
                "                CASE WHEN ppurchaseOrderDetId IS NOT NULL THEN CONCAT(\"id=\",ppurchaseOrderDetId,\" AND\")  ELSE '' END ,\" refpurchaseorderid = \",ppurchaseOrderID,\"  \n" +
                "					)) AND da.Tablename = 'PURCHASEORDERLINEOTHERCHARGES'  \n" +
                "         \");  \n" +
                "    IF (pOrderBy IS NOT NULL) THEN  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = \"ORDER BY ID DESC\";  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = '1=1' ;  \n" +
                "	END IF;  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	/* to get total count of rows */  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) AS TotalRecord FROM ( \",@temp_Sproc_PurchaseOrderChangeHistory,\" ) c WHERE 1=1 AND \", pWhereClause);  \n" +
                "    PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "	SET @SQLStatement2 = CONCAT(\"SELECT * FROM ( \", @temp_Sproc_PurchaseOrderChangeHistory,\" ) c  WHERE \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "    PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 10-03-2022  *********************************** */
                "DROP procedure IF EXISTS `Sproc_UpdatePoWorkingLineStatus`;  \n" +
                "CREATE PROCEDURE `Sproc_UpdatePoWorkingLineStatus`(  \n" +
                "	IN pPOID INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE vStatus VARCHAR(50);  \n" +
                "    DECLARE vPOTotalLinesWithOtherPart INT;  \n" +
                "	DECLARE vIsManualCompleted INT;  \n" +
                "    SELECT count(1) INTO vPOTotalLinesWithOtherPart FROM purchase_order_det WHERE refPurchaseOrderID=pPOID AND isDeleted=0;  \n" +
                "	IF vPOTotalLinesWithOtherPart > 0 THEN -- check po have any lines  \n" +
                "		SELECT poLineWorkingStatus INTO vStatus FROM vu_purchaseorder_shipping_release WHERE refPurchaseOrderID=pPOID AND poLineWorkingStatus='P' LIMIT 1;  \n" +
                "		SET vStatus=IFNULL(vStatus,'C');  \n" +
                "	ELSE  \n" +
                "		SET vStatus='P';  \n" +
                "	END IF;  \n" +
                "	IF(vStatus='P') THEN  \n" +
                "		UPDATE purchase_order_mst SET poWorkingStatus=(CASE WHEN poWorkingStatus='CA' THEN poWorkingStatus ELSE vStatus END),lockStatus='NA',lockedAt=NULL,lockedBy=NULL,lockedByRoleId=NULL WHERE id=pPOID;  \n" +
                "	ELSE  \n" +
                "		SELECT count(1) INTO vIsManualCompleted FROM vu_purchaseorder_shipping_release WHERE refPurchaseOrderID=pPOID AND poLineCompleteType='M';  \n" +
                "		UPDATE purchase_order_mst SET poWorkingStatus=(CASE WHEN poWorkingStatus='CA' THEN poWorkingStatus ELSE vStatus END),poCompleteType=(CASE WHEN vIsManualCompleted > 0 THEN 'M' ELSE 'A' END),lockStatus='RL' WHERE id=pPOID;  \n" +
                "	END IF;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 10-03-2022  *********************************** */
                "DROP procedure IF EXISTS `Sproc_updatePurchaseOrderStatus`;  \n" +
                "CREATE PROCEDURE `Sproc_updatePurchaseOrderStatus`(  \n" +
                "	IN pPOID INT,  \n" +
                "	IN pupdatedBy VARCHAR(100),  \n" +
                "	IN pupdatedRoleID VARCHAR(100),  \n" +
                "	IN pcompleteReason VARCHAR(1000),  \n" +
                "	IN pcompleteType VARCHAR(20),  \n" +
                "	IN pcancellationReason VARCHAR(1000),  \n" +
                "	IN ptype VARCHAR(5),  \n" +
                "	IN pCancellationConfirmed TINYINT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	IF pcompleteReason IS NOT NULL THEN  \n" +
                "		IF ptype = 'C' THEN /* for complete po */  \n" +
                "			UPDATE purchase_order_mst SET poWorkingStatus='C',updatedBy=pupdatedBy,updateByRoleId=pupdatedRoleID,poCompleteReason=pcompleteReason,poCompleteType=pcompleteType,lockStatus='RL',updatedAt=fun_DatetimetoUTCDateTime() WHERE id=pPOID;  \n" +
                "			UPDATE purchase_order_line_release_det pod SET pod.poLineWorkingStatus='C',pod.updatedBy=pupdatedBy,pod.updateByRoleId=pupdatedRoleID,poLineCompleteReason=pcompleteReason,poLineCompleteType=pcompleteType,updatedAt=fun_DatetimetoUTCDateTime() WHERE pod.refPurchaseOrderDetID IN (SELECT po.id FROM purchase_order_det po WHERE po.refPurchaseOrderID=pPOID);  \n" +
                "		ELSEIF ptype = 'P' THEN /* for open po */  \n" +
                "			UPDATE purchase_order_mst SET poWorkingStatus='P',updatedBy=pupdatedBy,updateByRoleId=pupdatedRoleID,poCompleteReason=pcompleteReason,poCompleteType=pcompleteType,lockStatus='NA',updatedAt=fun_DatetimetoUTCDateTime() WHERE id=pPOID;  \n" +
                "			UPDATE purchase_order_line_release_det pod SET pod.poLineWorkingStatus='P',pod.updatedBy=pupdatedBy,pod.updateByRoleId=pupdatedRoleID,poLineCompleteReason=pcompleteReason,poLineCompleteType=pcompleteType,updatedAt=fun_DatetimetoUTCDateTime() WHERE pod.refPurchaseOrderDetID IN (SELECT po.id FROM purchase_order_det po WHERE po.refPurchaseOrderID=pPOID);  \n" +
                "		END IF;  \n" +
                "	ELSEIF pcancellationReason IS NOT NULL THEN  \n" +
                "		IF ptype = 'C' THEN /* for cancellation po */  \n" +
                "			UPDATE purchase_order_mst SET poWorkingStatus='CA',CancellationConfirmed=pCancellationConfirmed,updatedBy=pupdatedBy,updateByRoleId=pupdatedRoleID,updatedAt=fun_DatetimetoUTCDateTime(),cancleReason=pcancellationReason,poCompleteType=pcompleteType WHERE id=pPOID;  \n" +
                "		ELSEIF ptype = 'R' THEN /* for revoke cancellation po */  \n" +
                "			UPDATE purchase_order_mst SET poWorkingStatus='P',CancellationConfirmed=0,updatedBy=pupdatedBy,updateByRoleId=pupdatedRoleID,updatedAt=fun_DatetimetoUTCDateTime(),cancleReason=pcancellationReason,lockStatus='NA',poCompleteType=pcompleteType WHERE id=pPOID;  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 10-03-2022 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1359,'1.00','V1',' User Story 41827: [Main Branch] Purchase Order Allow to add a new line in Completed PO - Jay '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1359:
            allDbChangesArray.push(
                /* **************************** New Script -> 11-03-2022  *********************************** */
                "DROP TRIGGER IF EXISTS `Trg_AU_purchase_order_mst`;  \n" +
                "CREATE TRIGGER `Trg_AU_purchase_order_mst` AFTER UPDATE ON `purchase_order_mst` FOR EACH ROW BEGIN  \n" +
                "	DECLARE vMfgCodeFormat INT;  \n" +
                "    DECLARE vOldCustomer VARCHAR(100);  \n" +
                "    DECLARE vNewCustomer VARCHAR(100);  \n" +
                "    DECLARE vOldSupplier VARCHAR(100);  \n" +
                "    DECLARE vNewSupplier VARCHAR(100);  \n" +
                "    DECLARE vLockUnlockFieldPTText VARCHAR(10) DEFAULT 'Locked';  \n" +
                "    SELECT fun_getMFGCodeNameFormat() INTO vMfgCodeFormat;  \n" +
                "	IF IFNULL(OLD.poNumber,0) != IFNULL(NEW.poNumber,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId, valueDataType, revision) VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'PONUMBER',CAST(OLD.poNumber AS CHAR), CAST(new.poNumber AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,fun_getDataTypeBasedOnTableAndColumnName('purchase_order_mst','poNumber'),NEW.poRevision);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.soNumber,0) != IFNULL(NEW.soNumber,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId, valueDataType, revision) VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'SONUMBER',CAST(OLD.soNumber AS CHAR), CAST(new.soNumber AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,fun_getDataTypeBasedOnTableAndColumnName('purchase_order_mst','soNumber'),NEW.poRevision);  \n" +
                "    END IF;  \n" +
                "	IF IFNULL(OLD.poDate,0) != IFNULL(NEW.poDate,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId, valueDataType, revision) VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'PODATE',CAST(OLD.poDate AS CHAR), CAST(new.poDate AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,fun_getDataTypeBasedOnTableAndColumnName('purchase_order_mst','poDate'),NEW.poRevision);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.soDate,0) != IFNULL(NEW.soDate,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId, valueDataType, revision) VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'SODATE',CAST(OLD.soDate AS CHAR), CAST(new.soDate AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,fun_getDataTypeBasedOnTableAndColumnName('purchase_order_mst','soDate'),NEW.poRevision);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.supplierID,0) != IFNULL(NEW.supplierID,0) THEN  \n" +
                "		SELECT fun_GetFormattedMfgCode(mfgCode, mfgName, vMfgCodeFormat) INTO vOldSupplier FROM mfgcodemst WHERE id=OLD.supplierID;  \n" +
                "        SELECT fun_GetFormattedMfgCode(mfgCode, mfgName, vMfgCodeFormat) INTO vNewSupplier FROM mfgcodemst WHERE id=NEW.supplierID;  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId, valueDataType, revision) VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'SUPPLIER', CAST(vOldSupplier AS CHAR), CAST(vNewSupplier AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,'varchar',NEW.poRevision);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.termsID,0) != IFNULL(NEW.termsID,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId, valueDataType, revision) VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'TERMS', CAST(fun_getGenericCategoryCodeNameByID(OLD.termsID) AS CHAR), CAST(fun_getGenericCategoryCodeNameByID(new.termsID) AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,'varchar',NEW.poRevision);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.shippingMethodID,0) != IFNULL(NEW.shippingMethodID,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId, valueDataType, revision) VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'SHIPPINGMETHOD', CAST(fun_getGenericCategoryCodeNameByID(OLD.shippingMethodID) AS CHAR), CAST(fun_getGenericCategoryCodeNameByID(new.shippingMethodID) AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,'varchar',NEW.poRevision);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.poRevision ,0) != IFNULL(NEW.poRevision ,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId, valueDataType, revision) VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'POREVISION', CAST(OLD.poRevision AS CHAR), CAST(new.poRevision AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,fun_getDataTypeBasedOnTableAndColumnName('purchase_order_mst','poRevision'),NEW.poRevision);  \n" +
                "    END IF;  \n" +
                "	IF IFNULL(OLD.shippingComment ,0) != IFNULL(NEW.shippingComment ,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId, valueDataType, revision) VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'INTERNALNOTES', CAST(OLD.shippingComment AS CHAR), CAST(new.shippingComment AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,fun_getDataTypeBasedOnTableAndColumnName('purchase_order_mst','shippingComment'),NEW.poRevision);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.poComment ,0) != IFNULL(NEW.poComment ,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId, valueDataType, revision) VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'POCOMMENT', CAST(OLD.poComment AS CHAR), CAST(new.poComment AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,fun_getDataTypeBasedOnTableAndColumnName('purchase_order_mst','poComment'),NEW.poRevision);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.status ,0) != IFNULL(NEW.status ,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId, valueDataType, revision) VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'POSTATUS', CAST(CASE WHEN OLD.status=0 THEN 'Draft' ELSE 'Published' END AS CHAR), CAST(CASE WHEN NEW.status=0 THEN 'Draft' ELSE 'Published' END AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,'varchar',NEW.poRevision);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.carrierID ,0) != IFNULL(NEW.carrierID ,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId, valueDataType, revision) VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'CARRIER', CAST(fun_getGenericCategoryCodeNameByID(OLD.carrierID) AS CHAR), CAST(fun_getGenericCategoryCodeNameByID(new.carrierID) AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,'varchar',NEW.poRevision);  \n" +
                "    END IF;  \n" +
                "	IF IFNULL(OLD.carrierAccountNumber ,0) != IFNULL(NEW.carrierAccountNumber ,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId, valueDataType, revision) VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'CARRIERACCOUNT#', CAST(OLD.carrierAccountNumber AS CHAR), CAST(new.carrierAccountNumber AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,fun_getDataTypeBasedOnTableAndColumnName('purchase_order_mst','carrierAccountNumber'),NEW.poRevision);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.isDeleted ,0) != IFNULL(NEW.isDeleted ,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId, valueDataType, revision) VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'DELETED', CAST(CASE WHEN OLD.isDeleted=0 THEN 'No' ELSE 'Yes' END AS CHAR), CAST(CASE WHEN NEW.isDeleted=0 THEN 'No' ELSE 'Yes' END AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,'varchar',NEW.poRevision);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.isBlanketPO ,0) != IFNULL(NEW.isBlanketPO ,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId, valueDataType, revision) VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'BLANKETPO', CAST(CASE WHEN OLD.isBlanketPO=0 THEN 'No' ELSE 'Yes' END AS CHAR), CAST(CASE WHEN NEW.isBlanketPO=0 THEN 'No' ELSE 'Yes' END AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,'varchar',NEW.poRevision);  \n" +
                "    END IF;  \n" +
                "    IF IFNULL(OLD.shippingInsurance ,0) != IFNULL(NEW.shippingInsurance ,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId, valueDataType, revision) VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'SHIPPINGINSURANCE', CAST(CASE WHEN OLD.shippingInsurance=0 THEN 'No' ELSE 'Yes' END AS CHAR), CAST(CASE WHEN NEW.shippingInsurance=0 THEN 'No' ELSE 'Yes' END AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,'varchar',NEW.poRevision);  \n" +
                "    END IF;  \n" +
                "    IF IFNULL(OLD.supplierAddressID ,0) != IFNULL(NEW.supplierAddressID ,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId, valueDataType, revision) VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'SUPPLIERADDRESS', CAST(OLD.supplierAddress AS CHAR), CAST(NEW.supplierAddress AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,'varchar',NEW.poRevision);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.shippingAddressID ,0) != IFNULL(NEW.shippingAddressID ,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId, valueDataType, revision) VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'SHIPPINGADDRESS', CAST(OLD.shippingAddress AS CHAR), CAST(NEW.shippingAddress AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,'varchar',NEW.poRevision);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.intermediateShipmentID ,0) != IFNULL(NEW.intermediateShipmentID ,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId, valueDataType, revision) VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'INTERMEDIATEADDRESS', CAST(OLD.intermediateAddress AS CHAR), CAST(NEW.intermediateAddress AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,'varchar',NEW.poRevision);  \n" +
                "    END IF;  \n" +
                "    IF IFNULL(OLD.freeOnBoardID ,0) != IFNULL(NEW.freeOnBoardID ,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId, valueDataType, revision) VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'FOB', CAST(fun_getFOBById(OLD.freeOnBoardID) AS CHAR), CAST(fun_getFOBById(NEW.freeOnBoardID) AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId, 'varchar',NEW.poRevision);  \n" +
                "    END IF;  \n" +
                "    IF IFNULL(OLD.poWorkingStatus ,0) != IFNULL(NEW.poWorkingStatus ,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId, valueDataType, revision) VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'POWORKINGSTATUS', CAST(CASE WHEN IFNULL(OLD.poWorkingStatus,'P')='P' THEN 'In Progress' WHEN OLD.poWorkingStatus='CA' THEN 'Cancelled' ELSE 'Completed' END  AS CHAR), CAST(CASE WHEN IFNULL(NEW.poWorkingStatus,'P')='P' THEN 'In Progress' WHEN NEW.poWorkingStatus='CA' THEN 'Cancelled' ELSE 'Completed' END AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,fun_getDataTypeBasedOnTableAndColumnName('purchase_order_mst','poWorkingStatus'),NEW.poRevision);  \n" +
                "    END IF;  \n" +
                "	IF IFNULL(OLD.cancleReason ,0) != IFNULL(NEW.cancleReason ,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId, valueDataType, revision) VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'CANCELREASON', CAST(OLD.cancleReason AS CHAR), CAST(NEW.cancleReason AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,fun_getDataTypeBasedOnTableAndColumnName('purchase_order_mst','cancleReason'),NEW.poRevision);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.CancellationConfirmed ,0) != IFNULL(NEW.CancellationConfirmed ,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId, valueDataType, revision) VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'CANCELLATIONCONFIRMED',  CAST(CASE WHEN OLD.CancellationConfirmed=0 THEN 'No' ELSE 'Yes' END AS CHAR), CAST(CASE WHEN NEW.CancellationConfirmed=0 THEN 'No' ELSE 'Yes' END AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,'varchar',NEW.poRevision);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.isCustConsigned, 0) != IFNULL(NEW.isCustConsigned, 0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId, valueDataType, revision) VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'POCUSTCONSIGNED',  CAST(CASE WHEN OLD.isCustConsigned=0 THEN 'No' ELSE 'Yes' END AS CHAR), CAST(CASE WHEN NEW.isCustConsigned=0 THEN 'No' ELSE 'Yes' END AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,'varchar',NEW.poRevision);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.customerID, 0) != IFNULL(NEW.customerID,0) THEN  \n" +
                "		SELECT fun_GetFormattedMfgCode(mfgCode, mfgName, vMfgCodeFormat) INTO vOldCustomer FROM mfgcodemst WHERE id=OLD.customerID;  \n" +
                "        SELECT fun_GetFormattedMfgCode(mfgCode, mfgName, vMfgCodeFormat) INTO vNewCustomer FROM mfgcodemst WHERE id=NEW.customerID;  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId, valueDataType, revision) VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'POCUSTOMER',  CAST(vOldCustomer AS CHAR), CAST(vNewCustomer AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,'varchar',NEW.poRevision);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.isNonUMIDStock, 0) != IFNULL(NEW.isNonUMIDStock,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId, valueDataType, revision) VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'NONSTOCKUMID',  CAST(CASE WHEN OLD.isNonUMIDStock=0 THEN 'No' ELSE 'Yes' END AS CHAR), CAST(CASE WHEN NEW.isNonUMIDStock=0 THEN 'No' ELSE 'Yes' END AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,'varchar',NEW.poRevision);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.lockStatus, 0) != IFNULL(NEW.lockStatus,0) THEN  \n" +
                "		IF (OLD.lockStatus = 'LC') THEN  \n" +
                "			SET vLockUnlockFieldPTText = \"Unlocked\";  \n" +
                "		END IF;  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId, valueDataType, revision) VALUES (\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'LOCKSTATUS',  CAST(CASE WHEN OLD.lockStatus='RL' THEN 'Ready To Lock' WHEN OLD.lockStatus='LC' THEN 'Locked' ELSE 'Not Applicable' END AS CHAR), CAST(CASE WHEN NEW.lockStatus='RL' THEN 'Ready To Lock' WHEN NEW.lockStatus='LC' THEN 'Locked' ELSE 'Not Applicable' END AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,fun_getDataTypeBasedOnTableAndColumnName('purchase_order_mst','lockStatus'),NEW.poRevision);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.lockedBy, 0) != IFNULL(NEW.lockedBy,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId, valueDataType, revision) VALUES (\"PURCHASEORDERMST\",CAST(new.id AS CHAR),CASE WHEN (OLD.lockStatus = 'LC') THEN 'UNLOCKEDBY' ELSE 'LOCKEDBY' END,  NULL, (CASE WHEN OLD.lockStatus = 'LC' THEN fun_getUserNameByID(NEW.updatedBy) ELSE fun_getUserNameByID(NEW.lockedBy) END), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,fun_getDataTypeBasedOnTableAndColumnName('purchase_order_mst','lockedBy'),NEW.poRevision);  \n" +
                "    END IF;  \n" +
                "    IF IFNULL(OLD.lockedAt, 0) != IFNULL(NEW.lockedAt,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId, valueDataType, revision) VALUES (\"PURCHASEORDERMST\",CAST(new.id AS CHAR),CASE WHEN (OLD.lockStatus = 'LC') THEN 'UNLOCKEDAT' ELSE 'LOCKEDAT' END,  NULL, (CASE WHEN OLD.lockStatus = 'LC' THEN fun_DatetimetoUTCDateTime() ELSE NEW.lockedAt END), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,fun_getDataTypeBasedOnTableAndColumnName('purchase_order_mst','lockedAt'),NEW.poRevision);  \n" +
                "    END IF;  \n" +
                "    IF IFNULL(OLD.lockedByRoleId, 0) != IFNULL(NEW.lockedByRoleId,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy, updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId, valueDataType, revision) VALUES (\"PURCHASEORDERMST\",CAST(new.id AS CHAR),CASE WHEN (OLD.lockStatus = 'LC') THEN 'UNLOCKEDBYROLE' ELSE 'LOCKEDBYROLE' END,  NULL, (CASE WHEN OLD.lockStatus = 'LC' THEN fun_getRoleByID(NEW.updateByRoleId) ELSE fun_getRoleByID(NEW.lockedByRoleId) END), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,'varchar',NEW.poRevision);  \n" +
                "    END IF;  \n" +
                "    IF IFNULL(OLD.poCompleteReason, 0) != IFNULL(NEW.poCompleteReason, 0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId, valueDataType, revision) VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'POCOMPLETEREASON', CAST(OLD.poCompleteReason AS CHAR), CAST(NEW.poCompleteReason AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,fun_getDataTypeBasedOnTableAndColumnName('purchase_order_mst','poCompleteReason'),NEW.poRevision);  \n" +
                "	END IF;  \n" +
                "      IF IFNULL(OLD.supplierContactPersonID ,0) != IFNULL(NEW.supplierContactPersonID ,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId, valueDataType, revision) VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'SUPPLIERCONTACTPERSON', CAST(OLD.supplierContactPerson AS CHAR), CAST(NEW.supplierContactPerson AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,'varchar',NEW.poRevision);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.shippingContactPersonID ,0) != IFNULL(NEW.shippingContactPersonID ,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId, valueDataType, revision) VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'SHIPPINGCONTACTPERSON', CAST(OLD.shippingContactPerson AS CHAR), CAST(NEW.shippingContactPerson AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,'varchar',NEW.poRevision);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.intermediateContactPersonID ,0) != IFNULL(NEW.intermediateContactPersonID ,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId, valueDataType, revision) VALUES(\"PURCHASEORDERMST\",CAST(new.id AS CHAR),'INTERMEDIATECONTACTPERSON', CAST(OLD.intermediateContactPerson AS CHAR), CAST(NEW.intermediateContactPerson AS CHAR), fun_DatetimetoUTCDateTime(), NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,'varchar',NEW.poRevision);  \n" +
                "    END IF;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 11-03-2022  *********************************** */
                "DROP TRIGGER IF EXISTS `Trg_AU_purchase_order_det`;  \n" +
                "CREATE TRIGGER `Trg_AU_purchase_order_det` AFTER UPDATE ON `purchase_order_det` FOR EACH ROW BEGIN  \n" +
                "	DECLARE vMfgCodeFormat INT;  \n" +
                "    DECLARE vOldCustomer VARCHAR(100);  \n" +
                "    DECLARE vNewCustomer VARCHAR(100);  \n" +
                "    DECLARE vPORevision VARCHAR(10);  \n" +
                "	SELECT fun_getMFGCodeNameFormat() INTO vMfgCodeFormat;  \n" +
                "    SELECT poRevision INTO vPORevision FROM purchase_order_mst WHERE id = NEW.refPurchaseOrderID;  \n" +
                "    IF IFNULL(OLD.mfgPartID,0) != IFNULL(NEW.mfgPartID,0) THEN  \n" +
                "       INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType, revision)  \n" +
                "       VALUES(\"PURCHASE_ORDER_DET\",CAST(new.id AS CHAR),'MFGPART',CAST(fun_getComponentNameByID(OLD.mfgPartID) AS CHAR),  \n" +
                "       CAST(fun_getComponentNameByID(new.mfgPartID) AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId, 'varchar', vPORevision);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.supplierPartID,0) != IFNULL(NEW.supplierPartID,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType, revision)  \n" +
                "       VALUES(\"PURCHASE_ORDER_DET\",CAST(new.id AS CHAR),'SUPPLIERPART',CAST(fun_getComponentNameByID(OLD.supplierPartID) AS CHAR),  \n" +
                "       CAST(fun_getComponentNameByID(new.supplierPartID) AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId, 'varchar', vPORevision);  \n" +
                "	END IF;  \n" +
                "        IF IFNULL(OLD.partDescription,0) != IFNULL(NEW.partDescription,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType, revision)  \n" +
                "       VALUES(\"PURCHASE_ORDER_DET\",CAST(new.id AS CHAR),'PARTDESCRIPTION',CAST(OLD.partDescription AS CHAR),  \n" +
                "       CAST(new.partDescription AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,fun_getDataTypeBasedOnTableAndColumnName('purchase_order_det','partDescription'), vPORevision);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.pcbPerArray,0) != IFNULL(NEW.pcbPerArray,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType, revision)  \n" +
                "       VALUES(\"PURCHASE_ORDER_DET\",CAST(new.id AS CHAR),'PCBPERARRAY',CAST(OLD.pcbPerArray AS CHAR),  \n" +
                "       CAST(new.pcbPerArray AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,fun_getDataTypeBasedOnTableAndColumnName('purchase_order_det','pcbPerArray'), vPORevision);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.internalRef,0) != IFNULL(NEW.internalRef,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType, revision)  \n" +
                "       VALUES(\"PURCHASE_ORDER_DET\",CAST(new.id AS CHAR),'INTERNALREF',CAST(OLD.internalRef AS CHAR),  \n" +
                "       CAST(new.internalRef AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,fun_getDataTypeBasedOnTableAndColumnName('purchase_order_det','internalRef'), vPORevision);  \n" +
                "	END IF;  \n" +
                "     IF IFNULL(OLD.totalRelease,0) != IFNULL(NEW.totalRelease,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType, revision)  \n" +
                "       VALUES(\"PURCHASE_ORDER_DET\",CAST(new.id AS CHAR),'TOTALRELEASE',CAST(OLD.totalRelease AS CHAR),  \n" +
                "       CAST(new.totalRelease AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,fun_getDataTypeBasedOnTableAndColumnName('purchase_order_det','totalRelease'), vPORevision);  \n" +
                "	END IF;  \n" +
                "     IF IFNULL(OLD.qty,0) != IFNULL(NEW.qty,0) THEN  \n" +
                "                  UPDATE packing_slip_material_receive_det SET orderedQty=NEW.qty WHERE refPurchaseOrderDetID=NEW.id AND isdeleted=0;  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType, revision)  \n" +
                "       VALUES(\"PURCHASE_ORDER_DET\",CAST(new.id AS CHAR),'POQTY',CAST(OLD.qty AS CHAR),  \n" +
                "       CAST(new.qty AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,'qty', vPORevision);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.price,0) != IFNULL(NEW.price,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType, revision)  \n" +
                "       VALUES(\"PURCHASE_ORDER_DET\",CAST(new.id AS CHAR),'PRICE',CAST(OLD.price AS CHAR),  \n" +
                "       CAST(NEW.price AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,'unitprice', vPORevision);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.lineComment,0) != IFNULL(NEW.lineComment,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType, revision)  \n" +
                "       VALUES(\"PURCHASE_ORDER_DET\",CAST(new.id AS CHAR),'LINECOMMENT',CAST(OLD.lineComment AS CHAR),  \n" +
                "       CAST(NEW.lineComment AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,fun_getDataTypeBasedOnTableAndColumnName('purchase_order_det','lineComment'), vPORevision);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.supplierQuoteNumber,0) != IFNULL(NEW.supplierQuoteNumber,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType, revision)  \n" +
                "       VALUES(\"PURCHASE_ORDER_DET\",CAST(new.id AS CHAR),'SUPPLIERQUOTE#',CAST(OLD.supplierQuoteNumber AS CHAR),  \n" +
                "       CAST(NEW.supplierQuoteNumber AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,fun_getDataTypeBasedOnTableAndColumnName('purchase_order_det','supplierQuoteNumber'), vPORevision);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.packagingID,0) != IFNULL(NEW.packagingID,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType, revision)  \n" +
                "		VALUES(\"PURCHASE_ORDER_DET\",CAST(new.id AS CHAR),'PACKAGING',CAST(fun_getPackagingNameByID(OLD.packagingID) AS CHAR),  \n" +
                "		CAST(fun_getPackagingNameByID(NEW.packagingID) AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,'varchar', vPORevision);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.rohsStatusID,0) != IFNULL(NEW.rohsStatusID,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType, revision)  \n" +
                "		VALUES(\"PURCHASE_ORDER_DET\",CAST(new.id AS CHAR),'ROHSSTATUS',CAST(fun_getRoHSNameByID(OLD.rohsStatusID) AS CHAR),  \n" +
                "		CAST(fun_getRoHSNameByID(NEW.rohsStatusID) AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,'varchar', vPORevision);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.internalLineComment,0) != IFNULL(NEW.internalLineComment,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType, revision)  \n" +
                "		VALUES(\"PURCHASE_ORDER_DET\",CAST(new.id AS CHAR),'INTERNALLINECOMMENT',CAST(OLD.internalLineComment AS CHAR),  \n" +
                "		CAST(NEW.internalLineComment AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,fun_getDataTypeBasedOnTableAndColumnName('purchase_order_det','internalLineComment'), vPORevision);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.isLineCustConsigned,0) != IFNULL(NEW.isLineCustConsigned,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType, revision)  \n" +
                "		VALUES(\"PURCHASE_ORDER_DET\",CAST(new.id AS CHAR),'LINECUSTCONSIGNED',CAST(CASE WHEN OLD.isLineCustConsigned=0 THEN 'No' ELSE 'Yes' END AS CHAR),  \n" +
                "		CAST(CASE WHEN NEW.isLineCustConsigned=0 THEN 'No' ELSE 'Yes' END AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId, 'varchar', vPORevision);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.lineCustomerID,0) != IFNULL(NEW.lineCustomerID,0) THEN  \n" +
                "		SELECT fun_GetFormattedMfgCode(mfgCode, mfgName, vMfgCodeFormat) INTO vOldCustomer FROM mfgcodemst WHERE id=OLD.lineCustomerID;  \n" +
                "        SELECT fun_GetFormattedMfgCode(mfgCode, mfgName, vMfgCodeFormat) INTO vNewCustomer FROM mfgcodemst WHERE id=NEW.lineCustomerID;  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType, revision)  \n" +
                "		VALUES(\"PURCHASE_ORDER_DET\",CAST(new.id AS CHAR),'LINECUSTOMER',CAST(vOldCustomer AS CHAR),  \n" +
                "		CAST(vNewCustomer AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId, 'varchar', vPORevision);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.isNonUMIDStock,0) != IFNULL(NEW.isNonUMIDStock,0) THEN  \n" +
                "        INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType, revision)  \n" +
                "		VALUES(\"PURCHASE_ORDER_DET\",CAST(new.id AS CHAR),'LINENONUMIDSTOCK',CAST(CASE WHEN OLD.isNonUMIDStock=0 THEN 'No' ELSE 'Yes' END AS CHAR),  \n" +
                "		CAST(CASE WHEN NEW.isNonUMIDStock=0 THEN 'No' ELSE 'Yes' END AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId, 'varchar', vPORevision);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.isDeleted,0) != IFNULL(NEW.isDeleted,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby, createByRoleId, updateByRoleId, deleteByRoleId,valueDataType, revision)  \n" +
                "		VALUES(\"PURCHASE_ORDER_DET\", CAST(new.id AS CHAR), 'DELETED', NULL,  \n" +
                "        CONCAT('PO Line ID ', CAST(OLD.lineID AS CHAR), ' is Deleted'),fun_DatetimetoUTCDateTime(), NEW.createdBy, fun_DatetimetoUTCDateTime(), NEW.updatedBy, NEW.createByRoleId, NEW.updateByRoleId, NEW.deleteByRoleId,'varchar', vPORevision);  \n" +
                "	END IF;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 11-03-2022  *********************************** */
                "DROP TRIGGER IF EXISTS `Trg_AU_purchase_order_line_othercharges`;  \n" +
                "CREATE TRIGGER `Trg_AU_purchase_order_line_othercharges` AFTER UPDATE ON `purchase_order_line_othercharges` FOR EACH ROW BEGIN  \n" +
                "	DECLARE vPORevision VARCHAR(10);  \n" +
                "    SELECT po.poRevision INTO vPORevision FROM purchase_order_mst po  \n" +
                "		JOIN purchase_order_det pod ON po.id = pod.refPurchaseOrderID  \n" +
                "    WHERE pod.id = NEW.refPurchaseOrderDetID;  \n" +
                "	IF IFNULL(OLD.qty,0) != IFNULL(NEW.qty,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType, revision)  \n" +
                "		VALUES(\"PURCHASEORDERLINEOTHERCHARGES\",CAST(NEW.id AS CHAR),'QTY',CAST(OLD.qty AS CHAR),  \n" +
                "		CAST(NEW.qty AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,'qty', vPORevision);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.price,0) != IFNULL(NEW.price,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType, revision)  \n" +
                "		VALUES(\"PURCHASEORDERLINEOTHERCHARGES\",CAST(NEW.id AS CHAR),'PRICE',CAST(OLD.price AS CHAR),  \n" +
                "		CAST(NEW.price AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,'unitprice', vPORevision);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.lineComment,0) != IFNULL(NEW.lineComment,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType, revision)  \n" +
                "		VALUES(\"PURCHASEORDERLINEOTHERCHARGES\",CAST(NEW.id AS CHAR),'INTERNALNOTES',CAST(OLD.lineComment AS CHAR),  \n" +
                "		CAST(NEW.lineComment AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,'varchar', vPORevision);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.lineInternalComment,0) != IFNULL(NEW.lineInternalComment,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType, revision)  \n" +
                "		VALUES(\"PURCHASEORDERLINEOTHERCHARGES\",CAST(NEW.id AS CHAR),'COMMENTS',CAST(OLD.lineInternalComment AS CHAR),  \n" +
                "		CAST(NEW.lineInternalComment AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,'varchar', vPORevision);  \n" +
                "	END IF;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 11-03-2022  *********************************** */
                "DROP TRIGGER IF EXISTS `TRG_AU_purchase_order_line_release_det`;  \n" +
                "CREATE TRIGGER `TRG_AU_purchase_order_line_release_det` AFTER UPDATE ON `purchase_order_line_release_det` FOR EACH ROW BEGIN  \n" +
                "	DECLARE vPORevision VARCHAR(10);  \n" +
                "    SELECT po.poRevision INTO vPORevision FROM purchase_order_mst po  \n" +
                "		JOIN purchase_order_det pod ON po.id = pod.refPurchaseOrderID  \n" +
                "    WHERE pod.id = NEW.refPurchaseOrderDetID;  \n" +
                "	IF IFNULL(OLD.qty,0) != IFNULL(NEW.qty,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType, revision)  \n" +
                "		VALUES(\"PURCHASEORDERLINERELEASEDET\",CAST(NEW.id AS CHAR),'QTY',CAST(OLD.qty AS CHAR),  \n" +
                "		CAST(NEW.qty AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,'qty', vPORevision);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.shippingDate,0) != IFNULL(NEW.shippingDate,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType, revision)  \n" +
                "		VALUES(\"PURCHASEORDERLINERELEASEDET\",CAST(NEW.id AS CHAR),'DUEDATE',CAST(OLD.shippingDate AS CHAR),  \n" +
                "		CAST(NEW.shippingDate AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,fun_getDataTypeBasedOnTableAndColumnName('purchase_order_line_release_det','shippingDate'), vPORevision);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.promisedShipDate,0) != IFNULL(NEW.promisedShipDate,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType, revision)  \n" +
                "		VALUES(\"PURCHASEORDERLINERELEASEDET\",CAST(NEW.id AS CHAR),'PROMISESHIPDATE',CAST(OLD.promisedShipDate AS CHAR),  \n" +
                "		CAST(NEW.promisedShipDate AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,fun_getDataTypeBasedOnTableAndColumnName('purchase_order_line_release_det','promisedShipDate'), vPORevision);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.releaseNumber,0) != IFNULL(NEW.releaseNumber,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType, revision)  \n" +
                "		VALUES(\"PURCHASEORDERLINERELEASEDET\",CAST(NEW.id AS CHAR),'RELEASE#',CAST(OLD.releaseNumber AS CHAR),  \n" +
                "		CAST(NEW.releaseNumber AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,fun_getDataTypeBasedOnTableAndColumnName('purchase_order_line_release_det','releaseNumber'), vPORevision);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.shippingMethodID,0) != IFNULL(NEW.shippingMethodID,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType, revision)  \n" +
                "		VALUES(\"PURCHASEORDERLINERELEASEDET\",CAST(NEW.id AS CHAR),'SHIPPINGMETHOD',CAST(fun_getGenericCategoryCodeNameByID(OLD.shippingMethodID) AS CHAR),  \n" +
                "		CAST(fun_getGenericCategoryCodeNameByID(NEW.shippingMethodID) AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,'varchar', vPORevision);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.shippingAddressID,0) != IFNULL(NEW.shippingAddressID,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType, revision)  \n" +
                "		VALUES(\"PURCHASEORDERLINERELEASEDET\",CAST(NEW.id AS CHAR),'SHIPPINGADDRESS',CAST(OLD.shippingAddress AS CHAR),  \n" +
                "		CAST(NEW.shippingAddress AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,'varchar', vPORevision);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.releaseNotes,0) != IFNULL(NEW.releaseNotes,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType, revision)  \n" +
                "		VALUES(\"PURCHASEORDERLINERELEASEDET\",CAST(NEW.id AS CHAR),'RELEASENOTES',CAST(OLD.releaseNotes AS CHAR),  \n" +
                "		CAST(NEW.releaseNotes AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,fun_getDataTypeBasedOnTableAndColumnName('purchase_order_line_release_det','releaseNotes'), vPORevision);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.additionalNotes,0) != IFNULL(NEW.additionalNotes,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType, revision)  \n" +
                "		VALUES(\"PURCHASEORDERLINERELEASEDET\",CAST(NEW.id AS CHAR),'ADDITIONALNOTES',CAST(OLD.additionalNotes AS CHAR),  \n" +
                "		CAST(NEW.additionalNotes AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,fun_getDataTypeBasedOnTableAndColumnName('purchase_order_line_release_det','additionalNotes'), vPORevision);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.poLineWorkingStatus,0) != IFNULL(NEW.poLineWorkingStatus,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType, revision)  \n" +
                "		VALUES(\"PURCHASEORDERLINERELEASEDET\",CAST(NEW.id AS CHAR),'POLINEWORKINGSTATUS',CAST((CASE WHEN OLD.poLineWorkingStatus='C' THEN 'Close' ELSE 'Open' END) AS CHAR),  \n" +
                "		CAST((CASE WHEN NEW.poLineWorkingStatus='C' THEN 'Close' ELSE 'Open' END) AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,'varchar', vPORevision);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.receivedQty,0) != IFNULL(NEW.receivedQty,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType, revision)  \n" +
                "		VALUES(\"PURCHASEORDERLINERELEASEDET\",CAST(NEW.id AS CHAR),'RECEIVEDQTY',CAST(OLD.receivedQty AS CHAR),  \n" +
                "		CAST(NEW.receivedQty AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,'qty', vPORevision);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.poLineCompleteReason,0) != IFNULL(NEW.poLineCompleteReason,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType, revision)  \n" +
                "		VALUES(\"PURCHASEORDERLINERELEASEDET\",CAST(NEW.id AS CHAR),'POLINECOMPLETEREASON',CAST(OLD.poLineCompleteReason AS CHAR),  \n" +
                "		CAST(NEW.poLineCompleteReason AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,'varchar', vPORevision);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.poLineCompleteType,0) != IFNULL(NEW.poLineCompleteType,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType, revision)  \n" +
                "		VALUES(\"PURCHASEORDERLINERELEASEDET\",CAST(NEW.id AS CHAR),'POLINECOMPLETETYPE',CAST((CASE WHEN OLD.poLineCompleteType = 'M' THEN 'Manually Completed' WHEN OLD.poLineCompleteType = 'A' THEN 'Auto Completed' ELSE 'Open' END) AS CHAR),  \n" +
                "		CAST((CASE WHEN NEW.poLineCompleteType = 'M' THEN 'Manually Completed' WHEN NEW.poLineCompleteType = 'A' THEN 'Auto Completed' ELSE 'Open' END) AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,'varchar', vPORevision);  \n" +
                "	END IF;  \n" +
                "	IF IFNULL(OLD.carrierAccountNumber,0) != IFNULL(NEW.carrierAccountNumber,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType, revision)  \n" +
                "		VALUES(\"PURCHASEORDERLINERELEASEDET\",CAST(NEW.id AS CHAR),'CARRIERACCOUNT#',CAST(OLD.carrierAccountNumber AS CHAR),  \n" +
                "		CAST(NEW.carrierAccountNumber AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,'varchar', vPORevision);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.carrierID,0) != IFNULL(NEW.carrierID,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType, revision)  \n" +
                "		VALUES(\"PURCHASEORDERLINERELEASEDET\",CAST(NEW.id AS CHAR),'CARRIER',CAST(fun_getGenericCategoryCodeNameByID(OLD.carrierID) AS CHAR),  \n" +
                "		CAST(fun_getGenericCategoryCodeNameByID(NEW.carrierID) AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,'varchar', vPORevision);  \n" +
                "	END IF;  \n" +
                "    IF IFNULL(OLD.shippingContactPersonID,0) != IFNULL(NEW.shippingContactPersonID,0) THEN  \n" +
                "		INSERT INTO dataentrychange_auditlog(Tablename, RefTransID, Colname, Oldval, Newval, createdAt, createdBy , updatedAt, Updatedby,createByRoleId,updateByRoleId,deleteByRoleId,valueDataType, revision)  \n" +
                "		VALUES(\"PURCHASEORDERLINERELEASEDET\",CAST(NEW.id AS CHAR),'CONTACTPERSON',CAST(OLD.shippingContactPerson AS CHAR),  \n" +
                "		CAST(NEW.shippingContactPerson AS CHAR),fun_DatetimetoUTCDateTime(),NEW.createdBy,fun_DatetimetoUTCDateTime(),NEW.updatedBy,NEW.createByRoleId,NEW.updateByRoleId,NEW.deleteByRoleId,'varchar', vPORevision);  \n" +
                "	END IF;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 11-03-2022  *********************************** */
                "DROP TRIGGER IF EXISTS `TRG_BU_purchase_order_line_release_det`;  \n" +
                "CREATE TRIGGER `TRG_BU_purchase_order_line_release_det` BEFORE UPDATE ON `purchase_order_line_release_det` FOR EACH ROW BEGIN  \n" +
                "	IF(NEW.isdeleted = 0) THEN  \n" +
                "		IF (SELECT COUNT(1) FROM purchase_order_det WHERE id = NEW.refPurchaseOrderDetID AND isdeleted = true) = 1 THEN  \n" +
                "			SIGNAL SQLSTATE '45001' SET MESSAGE_TEXT= 'Parent Detail does not exists, Please refresh page and try again.';  \n" +
                "		END IF;  \n" +
                "		IF (NEW.qty = NEW.receivedQty AND NEW.poLineWorkingStatus='P' AND NEW.poLineCompleteType != 'M') THEN  \n" +
                "			SET NEW.poLineWorkingStatus='C';  \n" +
                "			SET NEW.poLineCompleteType='A';  \n" +
                "		ELSEIF ((NEW.qty > NEW.receivedQty AND NEW.poLineCompleteType != 'M') OR (NEW.qty != OLD.qty AND New.poLineCompleteType = 'M' AND NEW.poLineWorkingStatus='C')) THEN  \n" +
                "			SET NEW.poLineWorkingStatus='P';  \n" +
                "			SET NEW.poLineCompleteType='P';  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 11-03-2022 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1360,'1.00','V1',' User Story 41827: [Main Branch] Purchase Order Allow to add a new line in Completed PO - Jay '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1360:
            allDbChangesArray.push(
                /* **************************** New Script -> 11-03-2022  *********************************** */
                "DROP function IF EXISTS `fun_getPurchaseOrderFieldLabel`;  \n" +
                "CREATE FUNCTION `fun_getPurchaseOrderFieldLabel`(  \n" +
                "fieldName TEXT  \n" +
                ") RETURNS text CHARSET utf8mb4  \n" +
                "BEGIN  \n" +
                "	SELECT (CASE  \n" +
                "		WHEN fieldName = 'QTY' THEN 'Qty'  \n" +
                "        WHEN fieldName = 'PRICE' THEN 'Price ($)'  \n" +
                "        WHEN fieldName = 'INTERNALNOTES' THEN 'Internal Notes'  \n" +
                "        WHEN fieldName = 'COMMENTS' THEN 'Comments'  \n" +
                "        WHEN fieldName = 'DUEDATE' THEN 'Due Date'  \n" +
                "        WHEN fieldName = 'PROMISESHIPDATE' THEN 'Supplier Promised Delivery Date'  \n" +
                "        WHEN fieldName = 'RELEASE#' THEN 'Release#'  \n" +
                "        WHEN fieldName = 'SHIPPINGMETHOD' THEN 'Shipping Method'  \n" +
                "        WHEN fieldName = 'SHIPPINGADDRESS' THEN 'Shipping Address'  \n" +
                "        WHEN fieldName = 'RELEASENOTES' THEN 'Release Notes'  \n" +
                "        WHEN fieldName = 'ADDITIONALNOTES' THEN 'Additional Notes'  \n" +
                "        WHEN fieldName = 'POLINEWORKINGSTATUS' THEN 'PO Release Working Status'  \n" +
                "        WHEN fieldName = 'RECEIVEDQTY' THEN 'Received Qty'  \n" +
                "        WHEN fieldName = 'POLINECOMPLETEREASON' THEN 'PO Release Complete Reason'  \n" +
                "        WHEN fieldName = 'POLINECOMPLETETYPE' THEN 'PO Release Complete Type'  \n" +
                "        WHEN fieldName = 'CARRIERACCOUNT#' THEN 'Carrier Account#'  \n" +
                "        WHEN fieldName = 'CARRIER' THEN 'Carrier'  \n" +
                "        WHEN fieldName = 'CONTACTPERSON' THEN 'Contact Person'  \n" +
                "        WHEN fieldName = 'MFGPART' THEN 'MPN'  \n" +
                "        WHEN fieldName = 'SUPPLIERPART' THEN 'SPN'  \n" +
                "        WHEN fieldName = 'PARTDESCRIPTION' THEN 'Description'  \n" +
                "        WHEN fieldName = 'PCBPERARRAY' THEN 'PCB Per Array'  \n" +
                "        WHEN fieldName = 'INTERNALREF' THEN 'Internal Ref#'  \n" +
                "        WHEN fieldName = 'TOTALRELEASE' THEN 'Total Release'  \n" +
                "        WHEN fieldName = 'POQTY' THEN 'PO Qty'  \n" +
                "        WHEN fieldName = 'LINECOMMENT' THEN 'Line Comment'  \n" +
                "        WHEN fieldName = 'SUPPLIERQUOTE#' THEN 'Supplier Quote#'  \n" +
                "        WHEN fieldName = 'PACKAGING' THEN 'Packaging'  \n" +
                "        WHEN fieldName = 'ROHSSTATUS' THEN 'RoHS Requirement'  \n" +
                "        WHEN fieldName = 'INTERNALLINECOMMENT' THEN 'Line Internal Notes'  \n" +
                "        WHEN fieldName = 'LINECUSTCONSIGNED' THEN 'PO Line Customer Consigned (No Charge)'  \n" +
                "        WHEN fieldName = 'LINECUSTOMER' THEN 'PO Line Customer'  \n" +
                "        WHEN fieldName = 'LINENONUMIDSTOCK' THEN 'PO Line Do Not Create UMID Stock'  \n" +
                "        WHEN fieldName = 'PONUMBER' THEN 'PO#'  \n" +
                "        WHEN fieldName = 'SONUMBER' THEN 'SO#'  \n" +
                "        WHEN fieldName = 'PODATE' THEN 'PO Date'  \n" +
                "        WHEN fieldName = 'SODATE' THEN 'SO Date'  \n" +
                "        WHEN fieldName = 'SUPPLIER' THEN 'Supplier'  \n" +
                "        WHEN fieldName = 'TERMS' THEN 'Terms'  \n" +
                "        WHEN fieldName = 'POREVISION' THEN 'PO Revision'  \n" +
                "        WHEN fieldName = 'POCOMMENT' THEN 'PO Comment'  \n" +
                "        WHEN fieldName = 'POSTATUS' THEN 'PO Status'  \n" +
                "        WHEN fieldName = 'BLANKETPO' THEN 'Blanket PO'  \n" +
                "        WHEN fieldName = 'SHIPPINGINSURANCE' THEN 'Shipping with Insurance'  \n" +
                "        WHEN fieldName = 'SUPPLIERADDRESS' THEN 'Supplier Address'  \n" +
                "        WHEN fieldName = 'SHIPPINGADDRESS' THEN 'Bill To / Ship To'  \n" +
                "        WHEN fieldName = 'INTERMEDIATEADDRESS' THEN 'Mark For (Intermediate Ship to)'  \n" +
                "        WHEN fieldName = 'FOB' THEN 'FOB'  \n" +
                "        WHEN fieldName = 'POWORKINGSTATUS' THEN 'PO Working Status'  \n" +
                "        WHEN fieldName = 'CANCELREASON' THEN 'PO Cancellation / Undo Reason'  \n" +
                "        WHEN fieldName = 'CANCELLATIONCONFIRMED' THEN 'Cancellation Confirmed by Supplier'  \n" +
                "        WHEN fieldName = 'POCUSTCONSIGNED' THEN 'PO Customer Consigned (No Charge)'  \n" +
                "        WHEN fieldName = 'POCUSTOMER' THEN 'PO Customer'  \n" +
                "        WHEN fieldName = 'NONSTOCKUMID' THEN 'PO Do Not Create UMID Stock'  \n" +
                "        WHEN fieldName = 'LOCKSTATUS' THEN 'Lock Status'  \n" +
                "        WHEN fieldName = 'LOCKEDBY' THEN 'Locked By'  \n" +
                "        WHEN fieldName = 'UNLOCKEDBY' THEN 'Unlocked By'  \n" +
                "        WHEN fieldName = 'LOCKEDAT' THEN 'Locked Date'  \n" +
                "        WHEN fieldName = 'UNLOCKEDAT' THEN 'Unlocked Date'  \n" +
                "        WHEN fieldName = 'LOCKEDBYROLE' THEN 'Locked By Role'  \n" +
                "        WHEN fieldName = 'UNLOCKEDBYROLE' THEN 'Unlocked By Role'  \n" +
                "        WHEN fieldName = 'POCOMPLETEREASON' THEN 'PO Complete Reason'  \n" +
                "        WHEN fieldName = 'SUPPLIERCONTACTPERSON' THEN 'Supplier Address Contact Person'  \n" +
                "        WHEN fieldName = 'SHIPPINGCONTACTPERSON' THEN 'Bill To / Ship To Contact Person'  \n" +
                "        WHEN fieldName = 'INTERMEDIATECONTACTPERSON' THEN 'Mark For (Intermediate Ship to) Contact Person'  \n" +
                "        WHEN fieldName = 'DELETED' THEN 'Deleted'  \n" +
                "	END) INTO fieldName;  \n" +
                "	RETURN fieldName;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 11-03-2022 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1361,'1.00','V1',' User Story 41827: [Main Branch] Purchase Order Allow to add a new line in Completed PO - Jay '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1361:
            allDbChangesArray.push(
                /* **************************** New Script -> 14-03-2021  *********************************** */
                "DROP VIEW IF EXISTS `vu_salesorder_shipped_report` ;  \n" +
                "CREATE VIEW `vu_salesorder_shipped_report` AS  \n" +
                "    SELECT  \n" +
                "        `a`.`wosalesOrderDetail` AS `wosalesOrderDetail`,  \n" +
                "        `a`.`salesOrderId` AS `Sales Order ID`,  \n" +
                "        `a`.`salesOrderNumber` AS `Sales Order`,  \n" +
                "        `a`.`poNumber` AS `Po Number`,  \n" +
                "        `a`.`poDate` AS `Po Date`,  \n" +
                "        `a`.`customerID` AS `Customer ID`,  \n" +
                "        `a`.`contactPersonID` AS `ContactPerson ID`,  \n" +
                "        `a`.`shippingMethodID` AS `ShippingMethod ID`,  \n" +
                "        `a`.`status` AS `Sales Order Status`,  \n" +
                "        `a`.`revision` AS `Revision`,  \n" +
                "        `a`.`shippingComment` AS `Shipping Comment`,  \n" +
                "        `a`.`termsID` AS `Terms ID`,  \n" +
                "        `a`.`soDate` AS `So Date`,  \n" +
                "        `a`.`partID` AS `PartID`,  \n" +
                "        `a`.`PIDCode` AS `Assy ID`,  \n" +
                "        `a`.`mfgPN` AS `Assy Name`,  \n" +
                "        `a`.`rev` AS `Assy Revision`,  \n" +
                "        `a`.`nickName` AS `NickName`,  \n" +
                "        `a`.`liveVersion` AS `liveVersion`,  \n" +
                "        `a`.`mfgPNDescription` AS `AssyDescr`,  \n" +
                "        `a`.`isCustomPart` AS `isCustomPart`,  \n" +
                "        `a`.`qty` AS `PO Qty`,  \n" +
                "        `a`.`ShippedQty` AS `Shipped Qty`,  \n" +
                "        `a`.`shippingQty` AS `shippingQty`,  \n" +
                "        `a`.`companyCode` AS `Company Code`,  \n" +
                "        `a`.`companyMfgName` AS `companyMfgName`,  \n" +
                "        `a`.`companyName` AS `Company Name`,  \n" +
                "        `a`.`fullName` AS `Full Name`,  \n" +
                "        `a`.`gencCategoryCode` AS `GencCategory Code`,  \n" +
                "        `a`.`isCancle` AS `isCancle`,  \n" +
                "        `a`.`cancleReason` AS `cancleReason`,  \n" +
                "        `a`.`materialTentitiveDocDate` AS `materialTentitiveDocDate`,  \n" +
                "        `a`.`materialDueDate` AS `materialDueDate`,  \n" +
                "        `a`.`shippingDate` AS `shippingDate`,  \n" +
                "        `a`.`prcNumberofWeek` AS `prcNumberofWeek`,  \n" +
                "        `a`.`remark` AS `remark`,  \n" +
                "        `a`.`price` AS `price`,  \n" +
                "        `a`.`mrpQty` AS `mrpQty`,  \n" +
                "        `a`.`kitQty` AS `kitQty`,  \n" +
                "        `a`.`isHotJob` AS `isHotJob`,  \n" +
                "        `a`.`RoHSStatusID` AS `RoHSStatusID`,  \n" +
                "        `a`.`RoHSName` AS `RoHSName`,  \n" +
                "        `a`.`rohsIcon` AS `RohsIcon`,  \n" +
                "        (IFNULL(`a`.`qty`, 0) - IFNULL(`a`.`ShippedQty`, 0)) AS `Balanced Due Qty`,  \n" +
                "        (CASE  \n" +
                "            WHEN (`a`.`isCancle` = 1) THEN 'Canceled'  \n" +
                "            WHEN (`a`.`salesOrderDetStatus` = 2) THEN 'Completed'  \n" +
                "            ELSE 'In Progress'  \n" +
                "        END) AS `Status`,  \n" +
                "        `a`.`modifyDate` AS `modifyDate`,  \n" +
                "        `a`.`createdDate` AS `createdDate`,  \n" +
                "        `a`.`soModifiedBy` AS `soModifiedBy`,  \n" +
                "        `a`.`soCreatedBy` AS `soCreatedBy`,  \n" +
                "        `a`.`updatedbyRole` AS `updatedbyRole`,  \n" +
                "        `a`.`deletedbyRole` AS `deletedbyRole`,  \n" +
                "        `a`.`salesOrderDetailId` AS `SalesOrderDetailId`,  \n" +
                "        `a`.`kitNumber` AS `kitNumber`,  \n" +
                "        `a`.`isSkipKitCreation` AS `isSkipKitCreation`,  \n" +
                "        `a`.`lineID` AS `lineID`,  \n" +
                "        `a`.`custPOLineNumber` AS `custPOLineNumber`,  \n" +
                "        `a`.`isLegacyPO` AS `isLegacyPO`,  \n" +
                "        `a`.`isLegacyPOText` AS `IsLegacyPOText`,  \n" +
                "        `a`.`isRmaPO` AS `isRmaPO`,  \n" +
                "        `a`.`isRmaPOText` AS `isRmaPOText`,  \n" +
                "        `a`.`specialNote` AS `AssySpecialNote`,  \n" +
                "        a.refBlanketPOID  \n" +
                "    FROM  \n" +
                "        (SELECT  \n" +
                "            `sm`.`id` AS `salesOrderId`,  \n" +
                "                `sm`.`salesOrderNumber` AS `salesOrderNumber`,  \n" +
                "                `sm`.`poNumber` AS `poNumber`,  \n" +
                "                `sm`.`poDate` AS `poDate`,  \n" +
                "                `sm`.`customerID` AS `customerID`,  \n" +
                "                `sm`.`contactPersonID` AS `contactPersonID`,  \n" +
                "                `sm`.`shippingMethodID` AS `shippingMethodID`,  \n" +
                "                `sm`.`status` AS `status`,  \n" +
                "                `sm`.`revision` AS `revision`,  \n" +
                "                `sm`.`shippingComment` AS `shippingComment`,  \n" +
                "                `sm`.`termsID` AS `termsID`,  \n" +
                "                `sm`.`soDate` AS `soDate`,  \n" +
                "                FUN_GETUSERNAMEBYID(`sm`.`updatedBy`) AS `soModifiedBy`,  \n" +
                "                FUN_GETUSERNAMEBYID(`sm`.`createdBy`) AS `soCreatedBy`,  \n" +
                "                FUN_GETROLEBYID(`sm`.`updateByRoleId`) AS `updatedbyRole`,  \n" +
                "                FUN_GETROLEBYID(`sm`.`deleteByRoleId`) AS `deletedbyRole`,  \n" +
                "                FUN_CONVERTUTCDATETIMETODATAKEYTIMEZONE(`sm`.`createdAt`) AS `createdDate`,  \n" +
                "                FUN_CONVERTUTCDATETIMETODATAKEYTIMEZONE(`sm`.`updatedAt`) AS `modifyDate`,  \n" +
                "                (SELECT  \n" +
                "                        1  \n" +
                "                    FROM  \n" +
                "                        `workorder_salesorder_details` `x`  \n" +
                "                    WHERE  \n" +
                "                        ((`x`.`salesOrderDetailID` = `a`.`id`)  \n" +
                "                            AND (`x`.`isDeleted` = 0))  \n" +
                "                    LIMIT 1) AS `wosalesOrderDetail`,  \n" +
                "                `co`.`PIDCode` AS `PIDCode`,  \n" +
                "                `co`.`mfgPN` AS `mfgPN`,  \n" +
                "                `co`.`rev` AS `rev`,  \n" +
                "                `co`.`nickName` AS `nickName`,  \n" +
                "                `co`.`liveVersion` AS `liveVersion`,  \n" +
                "                `co`.`mfgPNDescription` AS `mfgPNDescription`,  \n" +
                "                `co`.`isCustom` AS `isCustomPart`,  \n" +
                "                `cu`.`mfgCode` AS `companyCode`,  \n" +
                "                `cu`.`mfgName` AS `companyMfgName`,  \n" +
                "                CONCAT('(', `cu`.`mfgCode`, ') ', `cu`.`mfgName`) AS `companyName`,  \n" +
                "                CONCAT(`cc`.`firstName`, ' ', `cc`.`lastName`) AS `fullName`,  \n" +
                "                `gc`.`gencCategoryCode` AS `gencCategoryCode`,  \n" +
                "                `co`.`RoHSStatusID` AS `RoHSStatusID`,  \n" +
                "                `roh`.`name` AS `RoHSName`,  \n" +
                "                `roh`.`rohsIcon` AS `rohsIcon`,  \n" +
                "                `a`.`qty` AS `qty`,  \n" +
                "                `a`.`id` AS `salesOrderDetailId`,  \n" +
                "                `a`.`kitNumber` AS `kitNumber`,  \n" +
                "                `a`.`isSkipKitCreation` AS `isSkipKitCreation`,  \n" +
                "                `a`.`partID` AS `partID`,  \n" +
                "                `a`.`isCancle` AS `isCancle`,  \n" +
                "                `a`.`salesOrderDetStatus` AS `salesOrderDetStatus`,  \n" +
                "                `a`.`isHotJob` AS `isHotJob`,  \n" +
                "                `a`.`cancleReason` AS `cancleReason`,  \n" +
                "                `a`.`materialTentitiveDocDate` AS `materialTentitiveDocDate`,  \n" +
                "                (SELECT  \n" +
                "                        MIN(`ssm`.`shippingDate`)  \n" +
                "                    FROM  \n" +
                "                        `salesshippingmst` `ssm`  \n" +
                "                    WHERE  \n" +
                "                        ((`ssm`.`sDetID` = `a`.`id`)  \n" +
                "                            AND (`ssm`.`isDeleted` = 0))) AS `shippingDate`,  \n" +
                "                `a`.`materialDueDate` AS `materialDueDate`,  \n" +
                "                `a`.`prcNumberofWeek` AS `prcNumberofWeek`,  \n" +
                "                `a`.`remark` AS `remark`,  \n" +
                "                `a`.`price` AS `price`,  \n" +
                "                `a`.`mrpQty` AS `mrpQty`,  \n" +
                "                `a`.`kitQty` AS `kitQty`,  \n" +
                "                `a`.`shippingQty` AS `shippingQty`,  \n" +
                "                a.refBlanketPOID,  \n" +
                "                CASE WHEN sm.blanketPOOption=2 THEN IFNULL(bpo.bshipQty,0) ELSE IFNULL(bsp.shipQty,0) END ShippedQty,  \n" +
                "                `a`.`lineID` AS `lineID`,  \n" +
                "                `a`.`custPOLineNumber` AS `custPOLineNumber`,  \n" +
                "                `sm`.`isLegacyPO` AS `isLegacyPO`,  \n" +
                "                FUN_GETINTTOTEXT(`sm`.`isLegacyPO`) AS `isLegacyPOText`,  \n" +
                "                `sm`.`isRmaPO` AS `isRmaPO`,  \n" +
                "                FUN_GETINTTOTEXT(`sm`.`isRmaPO`) AS `isRmaPOText`,  \n" +
                "                `co`.`specialNote` AS `specialNote`  \n" +
                "        FROM  \n" +
                "            ((((((`salesorderdet` `a`  \n" +
                "        JOIN `salesordermst` `sm` ON (((`sm`.`id` = `a`.`refSalesOrderID`)  \n" +
                "            AND (IFNULL(`sm`.`isDeleted`, 0) = 0))))  \n" +
                "        LEFT JOIN `mfgcodemst` `cu` ON (((`sm`.`customerID` = `cu`.`id`)  \n" +
                "            AND (IFNULL(`cu`.`isDeleted`, 0) = 0))))  \n" +
                "        LEFT JOIN (  \n" +
                "		SELECT SUM(cpd.shipQty) shipQty,cpd.refSalesorderDetid FROM customer_packingslip_det cpd JOIN customer_packingslip cp ON cp.id=cpd.refcustpackingslipid  \n" +
                "	 WHERE cp.transtype='P' AND cpd.refSalesorderDetid IS NOT NULL AND cp.isdeleted=0 AND cpd.isdeleted=0  GROUP BY cpd.refSalesorderDetid  \n" +
                "        ) bsp ON bsp.refSalesorderDetid=a.id  \n" +
                "        LEFT JOIN(  \n" +
                "         SELECT SUM(cpd.shipQty) bshipQty,sd.refBlanketPOID FROM customer_packingslip_det cpd JOIN salesorderdet sd ON cpd.refSalesorderDetid=sd.id AND cpd.isdeleted=0  \n" +
                "	 JOIN customer_packingslip cp ON cp.id=cpd.refcustpackingslipid AND cp.isdeleted=0  \n" +
                "	 WHERE sd.refBlanketPOID IS NOT NULL AND cp.transtype='P' AND sd.isdeleted=0  \n" +
                "	 GROUP BY sd.refBlanketPOID  \n" +
                "        ) bpo ON bpo.refBlanketPOID=a.id  \n" +
                "        LEFT JOIN `component` `co` ON (((`a`.`partID` = `co`.`id`)  \n" +
                "            AND (IFNULL(`co`.`isDeleted`, 0) = 0))))  \n" +
                "        LEFT JOIN `rfq_rohsmst` `roh` ON (((`roh`.`id` = `co`.`RoHSStatusID`)  \n" +
                "            AND (IFNULL(`roh`.`isDeleted`, 0) = 0))))  \n" +
                "        LEFT JOIN `contactperson` `cc` ON (((`sm`.`contactPersonID` = `cc`.`personId`)  \n" +
                "            AND (IFNULL(`cc`.`isDeleted`, 0) = 0))))  \n" +
                "        LEFT JOIN `genericcategory` `gc` ON (((`sm`.`shippingMethodID` = `gc`.`gencCategoryID`)  \n" +
                "            AND (IFNULL(`gc`.`isDeleted`, 0) = 0))))  \n" +
                "        WHERE  \n" +
                "            ((`a`.`isDeleted` = 0)  \n" +
                "                AND (`a`.`partCategory` = 3))) `a`;  \n" +
                /* **************************** Add Script Version ->  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetAssemblyPOStockDetails` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetAssemblyPOStockDetails`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN pRecordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pPartID INT ,  \n" +
                "    IN pIsShowAllPO TINYINT)  \n" +
                "BEGIN  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;  \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "    DECLARE paymentCMJoin VARCHAR(1000);  \n" +
                "    DECLARE whereClause1 VARCHAR(500);  \n" +
                "	SET whereClause1 = \"where 1=1\";  \n" +
                "  \n" +
                "    SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
                "  \n" +
                "    IF pPartID IS NOT NULL THEN  \n" +
                "		SET whereClause1 = CONCAT(whereClause1,\" AND PartID IN (SELECT partID FROM part_sub_assy_relationship WHERE prPerPartID=\", pPartID, \")\");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF !pIsShowAllPO THEN  \n" +
                "		SET whereClause1 = CONCAT(whereClause1,\" AND a.status in ('In Progress')\");  \n" +
                "	ELSE  \n" +
                "		SET whereClause1 = CONCAT(whereClause1,\" AND a.status in ('Completed','In Progress')\");  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	SET @Sproc_GetAssemblyPOStockDetails = CONCAT(\"  \n" +
                "	select a.salesOrderDetailId,  \n" +
                "		a.soID,  \n" +
                "		a.poNumber,  \n" +
                "		a.poDate,  \n" +
                "		a.soNumber,  \n" +
                "		a.PartID,  \n" +
                "		(CASE WHEN (a.qpa IS NULL OR a.qpa = 0) THEN a.poQty ELSE (a.qpa * a.poQty) END) AS poQty,  \n" +
                "		a.shippedQty,  a.status , a.lineID , a.custPOLineNumber ,  \n" +
                "		(CASE WHEN (a.qpa IS NULL OR a.qpa = 0) THEN (a.poQty - a.shippedQty) ELSE ((a.qpa * a.poQty) - a.shippedQty) END) AS backOrderQty,  \n" +
                "		(CASE WHEN (a.shippedQty - (CASE WHEN (a.qpa IS NULL OR a.qpa = 0) THEN a.poQty ELSE (a.qpa * a.poQty) END)) > 0 THEN  \n" +
                "					(a.shippedQty - (CASE WHEN (a.qpa IS NULL OR a.qpa = 0) THEN a.poQty ELSE (a.qpa * a.poQty) END))  \n" +
                "			ELSE 0 END) AS excessShipQty,  \n" +
                "		a.buildQty,  \n" +
                "        a.woCount ,a.isLegacyPO,a.IsLegacyPOText ,  \n" +
                "        a.POType  \n" +
                "        from (SELECT  \n" +
                "				vu_ssr.`SalesOrderDetailId` salesOrderDetailId,  \n" +
                "				vu_ssr.`Sales Order ID` soID,  \n" +
                "				vu_ssr.`Po Number` poNumber,  \n" +
                "				vu_ssr.`Po Date` poDate,  \n" +
                "				vu_ssr.`Sales Order` soNumber,  \n" +
                "				vu_ssr.`PO Qty` poQty,  \n" +
                "				vu_ssr.`Shipped Qty` shippedQty,  \n" +
                "				vu_ssr.`Balanced Due Qty` backOrderQty,  \n" +
                "				vu_ssr.`PartID` PartID,  \n" +
                "				ka.perAssyBuildQty AS    qpa,  \n" +
                "                vu_ssr.`Status` status,  \n" +
                "				vu_ssr.`lineID` lineID,  \n" +
                "                vu_ssr.`custPOLineNumber` custPOLineNumber ,  \n" +
                "				IFNULL((SELECT IFNULL(SUM(wsd.poQty),0)  \n" +
                "                FROM workorder_salesorder_details wsd  \n" +
                "					WHERE wsd.salesOrderDetailID=vu_ssr.salesOrderDetailId AND wsd.isdeleted=0  \n" +
                "					AND wsd.parentPartID = \", pPartID,\"),0) buildQty ,  \n" +
                "                 (select count(vwss.woNumber) from  vu_workorder_summary_stk vwss  \n" +
                "                JOIN vu_workorder_sopoNumber_details vwsd ON vwsd.woID =  ifnull(vwss.woID,vwss.woNumber) and vwsd.partID = vwss.partID  \n" +
                "                LEFT JOIN workorder wo on ifnull(wo.terminateWOID,wo.woID) = vwss.woID  \n" +
                "                where FIND_IN_SET (vu_ssr.`Po Number`,vwsd.poNumber) AND   FIND_IN_SET (vu_ssr.`Sales Order`,vwsd.salesOrderNumber)  \n" +
                "                and vwss.partID = \",pPartID , \"  \n" +
                "                and (CASE WHEN vwss.woid IS NULL THEN ((vwss.readytoShipQty + vwss.shippedQty + vwss.stockAdjustmentQty) - (vwss.shippedQty)) ELSE ((vwss.buildQty) - (vwss.scrapQty + vwss.shippedQty + vwss.readytoShipQty)) END) >  0)   woCount  ,  \n" +
                "				vu_ssr.isLegacyPO,vu_ssr.IsLegacyPOText  ,  \n" +
                "                fun_getPOTypeByID(vu_ssr.`Sales Order ID`) POType  \n" +
                "	FROM vu_salesorder_shipped_report vu_ssr LEFT JOIN kit_allocation_assy_detail ka ON ka.refSalesorderdetid=vu_ssr.`SalesOrderDetailId`  \n" +
                "	AND ka.partId=\", pPartID,\" AND ka.isDeleted=0  where vu_ssr.refBlanketPOID IS NULL) a \", whereClause1);  \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY c.salesOrderDetailId ASC\");  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = '1=1' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND pRecordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (ppageIndex -1) * pRecordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@Sproc_GetAssemblyPOStockDetails,\" ) c where 1=1 and \", pWhereClause);  \n" +
                "	-- select @SQLStatement1;  \n" +
                "	PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "	SET @SQLStatement2 = CONCAT(\"select c.*  from ( \", @Sproc_GetAssemblyPOStockDetails,\" ) c where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "   -- select @SQLStatement2;  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version ->  *********************************** */
                "DROP PROCEDURE IF EXISTS `Sproc_GetAssemblySummaryDetails` ;  \n" +
                "CREATE PROCEDURE `Sproc_GetAssemblySummaryDetails`(  \n" +
                "	IN pPartID INT)  \n" +
                "BEGIN  \n" +
                "  \n" +
                "     SELECT  \n" +
                "	a.partID,  \n" +
                "	SUM(readytoShipQty) readytoShipQty,  \n" +
                "	SUM(stockAdjustmentQty) stockAdjustmentQty,  \n" +
                "	SUM(wipQty) wipQty,  \n" +
                "	SUM(excessFreetoUseQty) excessFreetoUseQty,  \n" +
                "	SUM(poQty) poQty,  \n" +
                "	SUM(shippedQty) shippedQty,  \n" +
                "	SUM(backOrderQty) backOrderQty  \n" +
                "	FROM(  \n" +
                "		SELECT  \n" +
                "			vu_ssr.partId partID,  \n" +
                "			0 readytoShipQty,  \n" +
                "			0 stockAdjustmentQty,  \n" +
                "			0 wipQty,  \n" +
                "			0 excessFreetoUseQty,  \n" +
                "			SUM(vu_ssr.`PO Qty`) poQty,  \n" +
                "			SUM(vu_ssr.`Shipped Qty`) shippedQty,  \n" +
                "			SUM((CASE WHEN (ka.perAssyBuildQty IS NULL OR ka.perAssyBuildQty = 0) THEN  \n" +
                "				(vu_ssr.`PO Qty` - vu_ssr.`Shipped Qty`)  \n" +
                "			ELSE  \n" +
                "				((ka.perAssyBuildQty * vu_ssr.`PO Qty`) - vu_ssr.`Shipped Qty`)  \n" +
                "			END)) AS backOrderQty,  \n" +
                "			ka.perAssyBuildQty AS qpa  \n" +
                "		 FROM vu_salesorder_shipped_report vu_ssr  \n" +
                "		 LEFT JOIN kit_allocation_assy_detail ka  \n" +
                "			ON ka.refSalesorderdetid=vu_ssr.`SalesOrderDetailId` AND ka.isDeleted=0  \n" +
                "		WHERE vu_ssr.partID = pPartID AND vu_ssr.refBlanketPOID IS NULL  \n" +
                "		GROUP BY vu_ssr.partID ,ka.perAssyBuildQty  \n" +
                "		UNION ALL  \n" +
                "		SELECT  \n" +
                "			vu_wss.partID,  \n" +
                "			SUM(readytoShipQty) readytoShipQty,  \n" +
                "			SUM(stockAdjustmentQty) stockAdjustmentQty,  \n" +
                "			SUM(wipQty) wipQty,  \n" +
                "			SUM((CASE WHEN vu_wss.woid IS NULL THEN vu_wss.stockAdjustmentQty  \n" +
                "				ELSE ((vu_wss.buildQty - vu_wss.scrapQty - vu_wss.poQty) + vu_wss.stockAdjustmentQty) END)) AS excessFreetoUseQty,  \n" +
                "			0 poQty,  \n" +
                "			0 shippedQty,  \n" +
                "			0 backOrderQty,  \n" +
                "			1 qpa  \n" +
                "		FROM vu_workorder_summary_stk vu_wss  \n" +
                "		WHERE vu_wss.partID = pPartID  \n" +
                "		GROUP BY vu_wss.partID) a GROUP BY a.partID;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version ->  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1362,'1.00','V1',' vu_salesorder_shipped_report-CC '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1362:
            allDbChangesArray.push(
                /* **************************** New Script -> 14-03-2022 *********************************** */
                "DROP PROCEDURE IF EXISTS Sproc_GetAllOtherComponentList;  \n" +
                "CREATE PROCEDURE `Sproc_GetAllOtherComponentList`(  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "      DECLARE pmfgCodeID INT;  \n" +
                "      DECLARE vMfgCodeIds VARCHAR(50) DEFAULT '';  \n" +
                "      DECLARE v_mfgNameFormat VARCHAR(10);  \n" +
                "	  SELECT fun_getMFGCodeNameFormat() INTO v_mfgNameFormat;  \n" +
                "      SELECT id INTO pmfgCodeID FROM mfgcodemst WHERE iscompany=1  AND isdeleted=0;  \n" +
                "      SELECT GROUP_CONCAT(refMfgCodeMstID) INTO vMfgCodeIds  \n" +
                "      FROM supplier_mapping_mst  \n" +
                "      WHERE supplierID  = pmfgCodeID AND isDeleted =0 AND isCustMapping=0;  \n" +
                "      #get component having mfg as iscompany and part type other  \n" +
                "      SELECT c.pidcode,c.id,c.mfgPN,rr.name AS rohsName,rr.rohsIcon,c.frequency,c.mfgPNDescription,c.category,c.partType,  \n" +
                "      cp.name AS packagingName,c.imageURL,c.unit, c.pcbPerArray, c.packageQty,c.minimum, c.mult,  \n" +
                "      c.packagingId,u.unitName,c.rohsStatusID,mc.mfgCode,mc.mfgName,c.mfgcodeid , pmfgCodeID   fcaCompId , c.partStatus,  \n" +
                "      c.frequencyType, fun_GetFormattedMfgCode(mc.mfgCode, mc.mfgName, v_mfgNameFormat) mfgCodeName, c.internalReference  ,  \n" +
                "      c.mfgPN AS otherMPN  \n" +
                "      FROM COMPONENT c JOIN rfq_rohsmst rr ON rr.id=c.rohsStatusID  \n" +
                "      LEFT JOIN component_packagingmst cp ON cp.id=c.packagingId  \n" +
                "      LEFT JOIN uoms u ON u.id=c.uom  \n" +
                "      JOIN mfgcodemst mc ON  mc.id=c.mfgcodeid  \n" +
                "      WHERE c.partType=4  \n" +
                "      AND c.isdeleted=0  \n" +
                "      AND (c.mfgcodeid=pmfgCodeID OR FIND_IN_SET(c.mfgcodeid ,vMfgCodeIds))  \n" +
                "      AND c.isGoodPart  = 1;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 14-03-2022  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1363,'1.00','V1','US40780: [Main Branch] Other charge provision for PO/SO based packing slip - Shweta '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1363:
            allDbChangesArray.push(
                /* **************************** New Script -> 14-03-2022 *********************************** */
                "DROP PROCEDURE IF EXISTS Sproc_GetCustomerPackingSlipDetailByPackingSlipNumber;  \n" +
                "CREATE PROCEDURE `Sproc_GetCustomerPackingSlipDetailByPackingSlipNumber`(  \n" +
                "	IN pPackingSlipNumber VARCHAR(100)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE v_CountOfPSRecord INT;  \n" +
                "	DECLARE v_CountOfSIRecord INT;  \n" +
                "	DECLARE v_StringOfMFGCode VARCHAR(255);  \n" +
                "	DECLARE Status_Check TINYINT;  \n" +
                "	DECLARE vPackingSlipId INT;  \n" +
                "	DECLARE vrefSalesOrderID INT;  \n" +
                "	DECLARE vMfgCodeFormat INT;  \n" +
                "  \n" +
                "	select fun_getMFGCodeNameFormat() into vMfgCodeFormat ;  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS  temp_CustomerPackingSlip_Validation_Error;  \n" +
                "	CREATE TEMPORARY TABLE temp_CustomerPackingSlip_Validation_Error  \n" +
                "	(  \n" +
                "		IsSuccess BOOLEAN,  \n" +
                "		Error VARCHAR(1000)  \n" +
                "	);  \n" +
                "  \n" +
                "	SELECT 	COUNT(1) INTO v_CountOfPSRecord  \n" +
                "	FROM 	customer_packingslip  \n" +
                "	WHERE 	packingSlipNumber = pPackingSlipNumber  \n" +
                "			AND transType = 'P'  \n" +
                "			AND deletedAt IS NULL;  \n" +
                "  \n" +
                "	IF (v_CountOfPSRecord = 0) THEN  \n" +
                "		INSERT INTO temp_CustomerPackingSlip_Validation_Error (IsSuccess, Error) VALUES (FALSE, CONCAT('Customer Packing Slip# <b>',pPackingSlipNumber,'</b> not found.'));  \n" +
                "		SELECT IsSuccess, Error FROM temp_CustomerPackingSlip_Validation_Error;  \n" +
                "	ELSE  \n" +
                "  \n" +
                "		SELECT 	a.refCustInvoiceID, GROUP_CONCAT(a.fullCustCode),a.`subStatus` ,a.id ,a.refSalesOrderID  \n" +
                "        INTO v_CountOfSIRecord, v_StringOfMFGCode,Status_Check  ,  vPackingSlipId ,vrefSalesOrderID  \n" +
                "		FROM 	(  \n" +
                "				SELECT 	cp.id, cp.packingSlipNumber,fun_GetFormattedMfgCode(mfg.mfgCode,mfg.mfgName,vMfgCodeFormat) fullCustCode,  \n" +
                "					cp.`subStatus`,cp.refCustInvoiceID,cp.refSalesOrderID  \n" +
                "				FROM 	customer_packingslip  cp  \n" +
                "                left join mfgcodemst mfg on mfg.id= cp.customerID  \n" +
                "				WHERE 	cp.packingSlipNumber = pPackingSlipNumber  \n" +
                "						AND cp.transType = 'P'  \n" +
                "						AND cp.isDeleted =0  \n" +
                "		) a  \n" +
                "        GROUP BY a.refCustInvoiceID,id ,a.refSalesOrderID  ;  \n" +
                "  \n" +
                "			IF(Status_Check=1)THEN      /* status 1-> Draft */  \n" +
                "				INSERT INTO temp_CustomerPackingSlip_Validation_Error (IsSuccess, Error) VALUES (FALSE, CONCAT(\"Customer Packing Slip# <b>\",pPackingSlipNumber,\"</b> is in <b>Draft</b>. So you cannot get any details of packing slip.\"));  \n" +
                "				SELECT IsSuccess, Error FROM temp_CustomerPackingSlip_Validation_Error;  \n" +
                "			ELSEIF(v_CountOfSIRecord IS NOT NULL)THEN  \n" +
                "				INSERT INTO temp_CustomerPackingSlip_Validation_Error (IsSuccess, Error) VALUES (FALSE, CONCAT(\"Customer Packing Slip# <b>\",pPackingSlipNumber,\"'s</b> customer invoice is already created for customer \",v_StringOfMFGCode,\".\"));  \n" +
                "				SELECT IsSuccess, Error FROM temp_CustomerPackingSlip_Validation_Error;  \n" +
                "			ELSE  \n" +
                "				INSERT INTO temp_CustomerPackingSlip_Validation_Error (IsSuccess, Error) VALUES (TRUE, '');  \n" +
                "				SELECT IsSuccess, Error FROM temp_CustomerPackingSlip_Validation_Error;  \n" +
                "  \n" +
                "				SELECT packingSlipNumber,packingSlipDate,  \n" +
                "                fun_getMfgCodeAndNameByID(customerID) customerName,  \n" +
                "                customerID,  \n" +
                "                    id AS packingSlipID,  \n" +
                "                    poNumber, poDate,poRevision,  \n" +
                "					soNumber, soDate, refSalesOrderId,sorevision,  \n" +
                "                    packingSlipType,  \n" +
                "                    (CASE WHEN packingSlipType = 1 THEN 'MISC' WHEN packingSlipType = 2 THEN 'PO' END) packingSlipTypeText,  \n" +
                "					fun_getGenericCategoryCodeNameByID(shippingMethodId) shippingMethod,      shippingMethodId,  \n" +
                "                    fun_getGenericCategoryNameByID(termsId) terms,termsId,  \n" +
                "                    shipToId, billToId ,  \n" +
                "                    freeOnBoardId,salesCommissionTo,  \n" +
                "                    fun_getEmployeeInitialNameByEmpID(salesCommissionTo) salesCommInitial,  \n" +
                "                    CONCAT('(',fun_getEmployeeInitialNameByEmpID(salesCommissionTo),') ',fun_getEmployeeNameByEmpID(salesCommissionTo) ) salesCommName,  \n" +
                "                    fun_getFOBById(freeOnBoardId) FOBName,  \n" +
                "                    contactPersonId,  \n" +
                "                    intermediateShipmentId ,  \n" +
                "                    billingAddress,  \n" +
                "                    shippingAddress,  \n" +
                "                    intermediateAddress,  \n" +
                "                    packingSlipComment,  \n" +
                "                    headerComment,  \n" +
                "                    revision packingSlipVersion,  \n" +
                "                    billingContactPersonID,  \n" +
                "                    shippingContactPersonID,  \n" +
                "                    intermediateContactPersonID,  \n" +
                "                    carrierID,  \n" +
                "                    fun_getGenericCategoryCodeNameByID(carrierID) carrier,  \n" +
                "                    carrierAccountNumber  \n" +
                "				 FROM customer_packingslip WHERE packingSlipNumber = pPackingSlipNumber  \n" +
                "						AND transType = 'P'  \n" +
                "						AND isDeleted = 0 ;  \n" +
                "  \n" +
                "				SELECT  cpd.custPOLineID,  \n" +
                "						cpd.refSalesorderDetid,  \n" +
                "						cpd.reflineID AS packingSlipSerialNumber,  \n" +
                "                        fun_getMFGPNByID(cpd.partId) mfgpn,  \n" +
                "                        fun_getRoHSIconByPartID(cpd.partId) rohsIcon,  \n" +
                "                        fun_getRoHSNameByPartID(cpd.partId) rohsName,  \n" +
                "                        cpd.partId,cpd.refChargesTypeID,  \n" +
                "                        cpd.shippingId,  \n" +
                "						(SELECT c.partType FROM component c WHERE c.isDeleted = 0 AND c.id = cpd.partId) partType,  \n" +
                "						cpd.shipQty,  \n" +
                "						(case  when cp.packingSlipType = 2 and sod.id is not null then sod.price  \n" +
                "								when cp.packingSlipType = 2 and sod.id is null then cpd.unitPrice  \n" +
                "								else cpd.unitPrice end)  unitPrice,  \n" +
                "						cpd.assyDescription,  \n" +
                "						fun_getAssyPIDCodeByID(cpd.partId)	PIDCode,  \n" +
                "						fun_getMfgCodeAndNameByPartID(cpd.partId) mfgName,  \n" +
                "						(SELECT ss.releaseNumber FROM salesshippingmst ss WHERE  ss.shippingId = cpd.shippingId AND ss.isdeleted=0) releaseNumber,  \n" +
                "						fun_getGenericCategoryNameByID(cpd.refChargesTypeID) othercharge,  \n" +
                "                        (case  when cp.packingSlipType = 2 and sod.id is not null then cpd.shipQty * sod.price  \n" +
                "								when cp.packingSlipType = 2 and sod.id is null then cpd.shipQty * IFNULL(cpd.unitPrice,0)  \n" +
                "								else cpd.shipQty * IFNULL(cpd.unitPrice,0) end) extPrice,  \n" +
                "						cpd.otherCharges AS lineOtherCharges,  \n" +
                "						0 totalExtPrice ,  \n" +
                "						1 isFromPackingSlip,  \n" +
                "						(case  when cp.packingSlipType = 2 and sod.id is not null then sod.quoteFrom  \n" +
                "							when cp.packingSlipType = 2 and sod.id is null then cpd.quoteFrom  \n" +
                "							else cpd.quoteFrom end) quoteFrom,  \n" +
                "                        IF(cp.packingSlipType = 2 ,sod.refAssyQtyTurnTimeID, cpd.refAssyQtyTurnTimeID) refAssyQtyTurnTimeID,  \n" +
                "                        IF(cp.packingSlipType = 2 ,sod.assyQtyTurnTimeText, cpd.assyQtyTurnTimeText) assyQtyTurnTimeText,  \n" +
                "						IF(cp.packingSlipType = 2 ,sod.quoteNumber, cpd.quoteNumber) quoteNumber,  \n" +
                "                        IF(cp.packingSlipType = 2 ,sod.refRFQGroupID ,cpd.refRFQGroupID) refRFQGroupID,  \n" +
                "                        IF(cp.packingSlipType = 2 ,sod.refRFQQtyTurnTimeID, cpd.refRFQQtyTurnTimeID) refRFQQtyTurnTimeID,  \n" +
                "						(case	when cp.packingSlipType = 2 and sod.id is not null and sod.quoteFrom = 1 then 'From RFQ'  \n" +
                "							when cp.packingSlipType = 2 and sod.id is null and cpd.quoteFrom = 1 then 'From RFQ'  \n" +
                "							when cp.packingSlipType = 2 and sod.id is not null and sod.quoteFrom = 3 then 'N/A'  \n" +
                "							when cp.packingSlipType = 2 and sod.id is null and cpd.quoteFrom = 3 then 'N/A'  \n" +
                "							when cp.packingSlipType = 2 and sod.id is not null and sod.quoteFrom = 2 then 'From Part Master'  \n" +
                "							when cp.packingSlipType = 2 and sod.id is null and cpd.quoteFrom = 2 then 'From Part Master'  \n" +
                "							else '' end) quoteFromText ,  \n" +
                "					    cpd.releaseNotes  \n" +
                "				 FROM customer_packingslip_det cpd  \n" +
                "                 LEFT JOIN customer_packingslip cp ON cp.id = cpd.refCustPackingSlipID AND cp.isDeleted = 0  AND cp.transType = 'P'  \n" +
                "                 LEFT JOIN salesorderdet sod ON sod.id = cpd.refSalesorderDetid AND sod.isDeleted = 0  \n" +
                "                 WHERE cpd.isDeleted=0  \n" +
                "                 AND cp.packingSlipNumber = pPackingSlipNumber  \n" +
                "                ORDER BY refSalesorderdetid,shippingId ASC;  \n" +
                "  \n" +
                "                -- get other charges  \n" +
                "                -- 1, Every 2 First 3 Last  \n" +
                "			  SELECT dtl.refCustPackingSlipID ,  \n" +
                "					 dtl.refSalesorderDetid,  \n" +
                "                     dtl.remainingQty,  \n" +
                "                     sother.partID,  \n" +
                "                     fun_getMFGPNByID(sother.partID) mfgPN,  \n" +
                "					 fun_getRoHSIconByPartID(sother.partID) rohsIcon,  \n" +
                "					 fun_getRoHSNameByPartID(sother.partID) rohsName,  \n" +
                "                     sother.price ,  \n" +
                "                     sother.qty,  \n" +
                "                     (IFNULL(sother.qty,0)*IFNULL(sother.price,0)) extOtherPrice,  \n" +
                "                     sother.frequency,  \n" +
                "                      sother.lineComment,  \n" +
                "                       sother.lineInternalComment,  \n" +
                "                       sother.frequencyType,  \n" +
                "                     (CASE  WHEN (sother.frequency = 1) THEN 'Every'  \n" +
                "							WHEN (sother.frequency = 2) THEN 'First'  \n" +
                "							WHEN (sother.frequency = 3) THEN  'Last'  \n" +
                "							ELSE ''  \n" +
                "						END) AS frequencyName ,  \n" +
                "						(CASE  WHEN (sother.frequencyType = 1) THEN 'Release'  \n" +
                "							WHEN (sother.frequencyType = 2) THEN 'Shipment'  \n" +
                "							ELSE ''  \n" +
                "						END) AS frequencyTypeName  \n" +
                "				FROM (  \n" +
                "					SELECT b.refCustPackingSlipID , b.refSalesorderDetid, b.poQty, b.shipQty ,b.remainingQty, b.packingslipIndex ,b.shippingId,b.calcFrequency FROM  \n" +
                "					 	(SELECT  a.refCustPackingSlipID , a.refSalesorderDetid, a.poQty, a.shipQty ,a.remainingQty, a.packingslipIndex ,a.shippingId,  \n" +
                "						CASE WHEN packingslipIndex = 1 AND  remainingQty > 0 THEN '1,2'  \n" +
                "							 WHEN packingslipIndex = 1 AND  remainingQty = 0 THEN '1,2,3'  \n" +
                "							 WHEN packingslipIndex > 1 AND  remainingQty > 0 THEN '1'  \n" +
                "							 WHEN packingslipIndex > 1 AND  remainingQty =  0 THEN '1,3' END AS calcFrequency  \n" +
                "						FROM (  \n" +
                "							SELECT cpd2.refCustPackingSlipID,cpd2.refSalesorderDetid,cpd2.poQty,cpd2.shipQty ,  \n" +
                "								cpd2.remainingQty,cpd2.shippingId,  \n" +
                "                                cpd2.partID,  \n" +
                "								row_number() over(PARTITION BY cpd1.refSalesorderDetid,cpd1.shippingId  ORDER BY cpd2.id ) packingslipIndex  \n" +
                "							FROM customer_packingslip_det cpd1  \n" +
                "							JOIN customer_packingslip_det cpd2 ON cpd2.refSalesOrderDetid = cpd1.refSalesOrderDetid AND cpd2.isDeleted = 0  \n" +
                "							WHERE cpd1.refCustPackingSlipID = vPackingSlipId  \n" +
                "                            AND cpd1.isDeleted = 0  \n" +
                "						) AS a  \n" +
                "						)AS b  GROUP BY b.refCustPackingSlipID,b.refSalesorderDetid,b.poQty, b.shipQty ,b.remainingQty, b.packingslipIndex ,b.shippingId,b.calcFrequency  \n" +
                "				) AS dtl  \n" +
                "				JOIN salesorder_otherexpense_details sother  \n" +
                "                ON sother.refSalesOrderDetID = dtl.refSalesorderDetid AND sother.isDeleted = 0  \n" +
                "				WHERE FIND_IN_SET ( sother.frequency ,dtl.calcFrequency)  \n" +
                "				AND dtl.refCustPackingSlipID = vPackingSlipId;  \n" +
                "  \n" +
                "  \n" +
                "                 --  Tracking Number  \n" +
                "                SELECT trackNumber  \n" +
                "                FROM customer_packing_slip_track_number  \n" +
                "                WHERE refCustPackingSlipID = vPackingSlipId  \n" +
                "                AND isDeleted = 0;  \n" +
                "  \n" +
                "                -- other charges  \n" +
                "                SELECT cpd.partId,cpd.shipQty,cpd.poQty,cpd.refSalesorderDetid,cpd.shippingId  \n" +
                "		FROM customer_packingslip cp JOIN customer_packingslip_det cpd ON cpd.refCustPackingSlipID=cp.id  \n" +
                "			WHERE transType='I' AND cp.refSalesOrderID=vrefSalesOrderID AND cp.isdeleted=0  ;  \n" +
                "			END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 14-03-2022  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1364,'1.00','V1','US40780: [Main Branch] Other charge provision for PO/SO based packing slip - Shweta '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1364:
            allDbChangesArray.push(
                /* **************************** New Script -> 14-03-2022 *********************************** */
                "DROP PROCEDURE IF EXISTS Sproc_GetPendingCustomerSalesDetails;  \n" +
                "CREATE PROCEDURE `Sproc_GetPendingCustomerSalesDetails`(  \n" +
                "	IN psalesorderID INT ,  \n" +
                "	IN packingSlipID INT  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "DECLARE vMfgCodeFormat INT;  \n" +
                "select fun_getMFGCodeNameFormat() into vMfgCodeFormat ;  \n" +
                " SELECT  \n" +
                "        sd.id,  \n" +
                "        IFNULL(sd.custPOLineNumber,1) custPOLineNumber,  \n" +
                "        sd.tentativeBuild,  \n" +
                "        sd.qty AS poQty,  \n" +
                "        sd.partID,  \n" +
                "        sd.price,  \n" +
                "        sd.lineID,  \n" +
                "		CONCAT(c.pidcode,' | ',IFNULL(sd.custPOLineNumber,1)) soDets,  \n" +
                "		(SELECT CASE WHEN SUM(cpd.shipQty)>=sd.qty THEN TRUE ELSE FALSE END  \n" +
                "			FROM customer_packingslip_det cpd  \n" +
                "			WHERE cpd.refsalesorderDetid=sd.id AND cpd.isDeleted = 0  \n" +
                "			AND cpd.refCustPackingSlipID IN (SELECT id FROM customer_packingslip  \n" +
                "						WHERE isDeleted = 0  \n" +
                "						AND transType = 'P')) isShipped  ,  \n" +
                "		sd.partCategory,  \n" +
                "		c.partType    ,  \n" +
                "		c.rfqOnly,  \n" +
                "		c.PIDCode  ,  \n" +
                "		c.partStatus ,  \n" +
                "		sd.internalComment,  \n" +
                "        sd.partDescription,  \n" +
                "        sd.remark,  \n" +
                "        c.iscustom,  \n" +
                "		c.mfgPN,  \n" +
                "		c.mfgpndescription,  \n" +
                "		fun_getUnitNameByID(c.uom) unitMeaser,  \n" +
                "		c.nickName,  \n" +
                "		c.mfgcodeID,  \n" +
                "		sd.originalPOQty,  \n" +
                "        fun_GetFormattedMfgCode(mfg.mfgcode,mfg.mfgName,vMfgCodeFormat) mfgName,  \n" +
                "        -- fun_getMfgCodeAndNameByID(c.mfgcodeID)mfgName,  \n" +
                "        ro.rohsIcon,		ro.name AS rohsName,  \n" +
                "        c.category partCategory  \n" +
                "	FROM salesorderdet sd  \n" +
                "	INNER JOIN COMPONENT c ON c.id=sd.partid  \n" +
                "    INNER JOIN rfq_rohsmst ro ON c.RoHSStatusID = ro.id  \n" +
                "    LEFT JOIN mfgcodemst mfg ON mfg.id = c.mfgCodeId and mfg.isDeleted = 0  \n" +
                "	WHERE sd.refsalesOrderID=psalesorderID  \n" +
                "	AND sd.isdeleted=0 AND sd.isCancle=0  \n" +
                "	AND sd.partCategory IN (2,3)  \n" +
                "    AND c.partType != 4;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 14-03-2022  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1365,'1.00','V1','US40780: [Main Branch] Other charge provision for PO/SO based packing slip - Shweta '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1365:
            allDbChangesArray.push(
                /* **************************** New Script -> 14-03-2022 *********************************** */
                "DROP PROCEDURE IF EXISTS Sproc_GetPendingSalesShippingDetails;  \n" +
                "CREATE PROCEDURE `Sproc_GetPendingSalesShippingDetails`(  \n" +
                "	IN psalesorderDetID INT ,  \n" +
                "	IN packingSlipID INT,  \n" +
                "	IN ppackingslipDetID INT  ,  \n" +
                "    IN pSoReleaseID INT  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "	DECLARE vMfgCodeFormat INT;  \n" +
                "    SELECT fun_getMFGCodeNameFormat() INTO vMfgCodeFormat;  \n" +
                "  \n" +
                "      SELECT ss.shippingID,  \n" +
                "        ss.sDetId,  \n" +
                "		IFNULL(sd.custPOLineNumber ,1)  custPOLineNumber,  \n" +
                "        IFNULL(ss.releaseNumber,1) releaseNumber,  \n" +
                "        ss.qty,  \n" +
                "        ss.shippingDate,  \n" +
                "        sd.tentativeBuild,  \n" +
                "        sd.qty AS poQty,  \n" +
                "        sd.partID,  \n" +
                "        sd.price,  \n" +
                "        sd.lineID,  \n" +
                "        sd.internalComment,  \n" +
                "        sd.partDescription,  \n" +
                "        sd.remark,  \n" +
                "        c.iscustom,  \n" +
                "        smp.poNumber,  \n" +
                "        ss.poReleaseNumber,  \n" +
                "		c.mfgPN,  \n" +
                "		c.mfgpndescription,  \n" +
                "		c.pidcode,  \n" +
                "		fun_getUnitNameByID(c.uom) unitMeaser,  \n" +
                "		c.nickName,  \n" +
                "		c.mfgcodeID,  \n" +
                "        c.custAssyPN,  \n" +
                "        c.isCPN,  \n" +
                "		sd.originalPOQty,  \n" +
                "		fun_GetFormattedMfgCode(mfgmst.mfgcode,mfgmst.mfgname, vMfgCodeFormat)  mfgName,  \n" +
                "		(CASE WHEN ss.shippingMethodID IS NULL THEN som.shippingMethodID  \n" +
                "			ELSE ss.shippingMethodID END) shippingMethodID ,  \n" +
                "		(CASE WHEN ss.shippingAddressID IS NULL THEN som.shippingAddressID  \n" +
                "			ELSE ss.shippingAddressID END) shippingAddressID ,  \n" +
                "		-- (CASE WHEN ss.shippingAddressID IS NULL THEN som.shippingAddress END) shippingAddress ,  \n" +
                "		fun_getRoHSIconByPartID(sd.partID) rohsIcon,  \n" +
                "		fun_getRoHSNameByPartID(sd.partID) rohsName,  \n" +
                "		fun_getCertificationByPartID(sd.partID)standards,  \n" +
                "		CONCAT(IFNULL(ss.releaseNumber,1),' | ',ss.qty,' | ',DATE_FORMAT((CASE WHEN ss.isAgreeToShip=1 THEN IFNULL(ss.revisedRequestedShipDate,ss.revisedRequestedDockDate) ELSE IFNULL(ss.shippingDate,ss.requestedDockDate) END), '%m-%d-%y')) shipping,  \n" +
                "        cpsDet.shippedQty,  \n" +
                "		-- sum(cpsDet.shippedQty) over(partition by ss.sDetId) shippedQty ,  \n" +
                "		(SELECT SUM(IFNULL(cpdet.shipQty,0))  \n" +
                "			FROM customer_packingslip_det cpdet  \n" +
                "            JOIN customer_packingslip cpsdet ON cpsdet.id = cpdet.refCustPackingSlipID  and cpsdet.isDeleted = 0  \n" +
                "            WHERE cpdet.refsalesorderdetid=ss.sDetId  \n" +
                "			AND cpdet.isdeleted=0 AND cpsdet.transType ='P') lineTotShippedQty ,  \n" +
                "		(CASE WHEN ss.shippingMethodID IS NULL THEN (fun_getGenericCategoryCodeNameByID(som.shippingMethodID))  \n" +
                "				ELSE (fun_getGenericCategoryCodeNameByID(ss.shippingMethodID)) END) shippingMethodText,  \n" +
                "		c.partType,  \n" +
                "		(SELECT mfg.mfgType FROM mfgcodemst mfg WHERE mfg.id = c.mfgcodeid AND mfg.isDeleted = 0 ) mfgType,  \n" +
                "		sd.quoteNumber,sd.quoteFrom, sd.refAssyQtyTurnTimeID,  \n" +
                "        sd.refRFQGroupID,  \n" +
                "        sd.refRFQQtyTurnTimeID  ,  \n" +
                "		IFNULL(sd.assyQtyTurnTimeText, (SELECT CONCAT( '(',rfqAssyQty.requestQty,')',  rfqAssyTurn.turnTime,' ',  \n" +
                "											CASE WHEN rfqAssyTurn.unitOfTime='B' THEN 'Bussiness Days'  \n" +
                "												WHEN rfqAssyTurn.unitOfTime='D' THEN 'Week Days'  \n" +
                "												WHEN rfqAssyTurn.unitOfTime='W' THEN 'Week' END )  \n" +
                "										FROM rfq_assy_quantity_turn_time rfqAssyTurn  \n" +
                "										JOIN rfq_assy_quantity rfqAssyQty ON rfqAssyQty.id = rfqAssyTurn.rfqAssyQtyID AND  rfqAssyQty.isDeleted = 0  \n" +
                "										WHERE rfqAssyTurn.id = sd.refRFQQtyTurnTimeID AND rfqAssyTurn.isDeleted = 0)) assyQtyTurnTimeText,  \n" +
                "		c.category partCategory,  \n" +
                "        ss.releaseNotes,  \n" +
                "        ss.description additionalNotes,  \n" +
                "        ss.customerReleaseLine,  \n" +
                "        sd.salesOrderDetStatus,  \n" +
                "        sd.qty custPOQty,  \n" +
                "        sd.materialTentitiveDocDate  ,  \n" +
                "		(case when ss.carrierID is null then  som.carrierID else ss.carrierID end) carrierID,  \n" +
                "		(CASE WHEN ss.carrierID IS NULL THEN (fun_getGenericCategoryCodeNameByID(som.carrierID))  \n" +
                "			ELSE (fun_getGenericCategoryCodeNameByID(ss.carrierID)) END) carrierText,  \n" +
                "		(CASE WHEN ss.carrierID IS NULL THEN som.carrierAccountNumber ELSE ss.carrierAccountNumber END) carrierAccountNumber ,  \n" +
                "        (CASE WHEN ss.shippingContactPersonID IS NULL THEN som.shippingContactPersonID  \n" +
                "			ELSE ss.shippingContactPersonID END) shippingContactPersonID  \n" +
                "	FROM salesshippingmst ss  \n" +
                "	JOIN salesorderdet sd ON ss.sDetID=sd.id  \n" +
                "	JOIN salesordermst som ON som.id = sd.refSalesOrderID  \n" +
                "	JOIN COMPONENT c ON c.id=sd.partid  \n" +
                "    LEFT JOIN mfgcodemst mfgmst ON mfgmst.id = c.mfgcodeId  and mfgmst.isDeleted = 0  \n" +
                "	LEFT JOIN salesorderdet sdp ON sd.refBlanketPOID=sdp.id AND sdp.isdeleted=0  \n" +
                "	LEFT JOIN salesordermst smp ON smp.id=sdp.refSalesOrderID AND smp.isdeleted=0  \n" +
                "	LEFT JOIN (select cpd.refsalesorderdetid,cpd.shippingId, sum(shipQty) shippedQty from customer_packingslip_det cpd  \n" +
                "				JOIN customer_packingslip  cps ON cps.id = cpd.refCustPackingSlipID and cps.isDeleted = 0 and cps.transType= 'P'  \n" +
                "				where cpd.isDeleted = 0 Group by cpd.refsalesorderdetid, cpd.shippingId ) cpsDet  \n" +
                "		ON ss.sDetId = cpsDet.refsalesorderdetid  \n" +
                "          and ss.shippingID = cpsDet.shippingId  \n" +
                "	WHERE sd.id=psalesorderDetID  \n" +
                "	AND  sd.isDeleted = 0  \n" +
                "	AND (CASE WHEN ppackingslipDetID IS NULL THEN  ss.qty > ifnull(cpsDet.shippedQty,0)  \n" +
                "		ELSE  ss.qty=ss.qty  END)  \n" +
                "	AND (CASE WHEN pSoReleaseID IS NOT NULL THEN ss.shippingID=pSoReleaseID ELSE 1 = 1 END)  \n" +
                "	AND ss.isdeleted=0  \n" +
                "	ORDER BY ss.releaseNumber,ss.shippingDate;  \n" +
                "  \n" +
                "	SELECT NULL AS shippingID,  \n" +
                "			sDetId,  \n" +
                "			custPOLineNumber,  \n" +
                "			NULL releaseNumber,  \n" +
                "			qty,  \n" +
                "			NULL shippingDate,  \n" +
                "			releaseNotes,  \n" +
                "			tentativeBuild,  \n" +
                "			poQty,  \n" +
                "			partID,  \n" +
                "			price,  \n" +
                "			lineID,  \n" +
                "			partDescription,  \n" +
                "			mfgPN,  \n" +
                "			mfgPNDescription,  \n" +
                "			unitMeaser,  \n" +
                "			nickName,  \n" +
                "			pidcode,  \n" +
                "			NULL shippingMethodID,  \n" +
                "			NULL shippingAddressID,  \n" +
                "			mfgcodeID,  \n" +
                "			mfgName,  \n" +
                "			rohsIcon,  \n" +
                "			rohsName,  \n" +
                "			rohsStatusID,  \n" +
                "			standards,  \n" +
                "			shippedQty   ,  \n" +
                "			remark,  \n" +
                "			internalcomment,  \n" +
                "			mfgPnwihLineId,  \n" +
                "			refSODetID,  \n" +
                "			refSOReleaseLineID,  \n" +
                "			frequency,  \n" +
                "			originalPOQty,  \n" +
                "			frequencyType,  \n" +
                "			poNumber  \n" +
                "    FROM (SELECT  \n" +
                "			NULL AS shippingID,  \n" +
                "			sd.id AS sDetId,  \n" +
                "			sd.custPOLineNumber custPOLineNumber,  \n" +
                "			-- IFNULL(sd.custPOLineNumber,1) custPOLineNumber,  \n" +
                "			NULL releaseNumber,  \n" +
                "			sd.qty,  \n" +
                "			NULL shippingDate,  \n" +
                "			sd.remark releaseNotes,  \n" +
                "			sd.tentativeBuild,  \n" +
                "			sd.qty AS poQty,  \n" +
                "			sd.partID,  \n" +
                "			sd.price,  \n" +
                "			sd.lineID,  \n" +
                "			sd.partDescription,  \n" +
                "			c.mfgPN,  \n" +
                "			c.mfgPNDescription,  \n" +
                "			fun_getUnitNameByID(c.uom) unitMeaser,  \n" +
                "			c.nickName,  \n" +
                "			c.pidcode,  \n" +
                "			sd.refSODetID,  \n" +
                "			sd.refSOReleaseLineID,  \n" +
                "			sd.frequency,  \n" +
                "			CONCAT(c.mfgPN,' | ',IFNULL(sd.custPOLineNumber,1)) mfgPnwihLineId,  \n" +
                "			NULL shippingMethodID,  \n" +
                "			NULL shippingAddressID,  \n" +
                "			c.mfgcodeID,  \n" +
                "			fun_getMfgCodeAndNameByID(c.mfgcodeID) mfgName,  \n" +
                "			fun_getRoHSIconByPartID(sd.partID) rohsIcon,  \n" +
                "			fun_getRoHSNameByPartID(sd.partID) rohsName,  \n" +
                "			c.rohsStatusID,  \n" +
                "			sd.originalPOQty,  \n" +
                "			smp.poNumber,  \n" +
                "			fun_getCertificationByPartID(c.id)standards,  \n" +
                "			sd.frequencyType,  \n" +
                "			 (SELECT SUM(IFNULL(cpd.shipQty,0)) FROM customer_packingslip_det cpd  \n" +
                "				JOIN customer_packingslip cp ON cp.id = cpd.refCustPackingSlipID AND cp.isDeleted = 0 AND cp.transType = 'P'  \n" +
                "				WHERE refsalesorderdetid=sd.id AND cpd.isDeleted=0 ) shippedQty   ,  \n" +
                "			sd.remark,  \n" +
                "			sd.internalcomment  \n" +
                "		FROM salesorderdet sd  \n" +
                "		LEFT JOIN component c ON c.id=sd.partid  \n" +
                "		LEFT JOIN salesorderdet sdp ON sd.refBlanketPOID=sdp.id AND sdp.isdeleted=0  \n" +
                "	        LEFT JOIN salesordermst smp ON smp.id=sdp.refSalesOrderID AND smp.isdeleted=0  \n" +
                "		WHERE sd.refSODetID=psalesorderDetID  \n" +
                "		AND sd.isdeleted=0  \n" +
                "    ) a;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 14-03-2022  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1366,'1.00','V1','US40780: [Main Branch] Other charge provision for PO/SO based packing slip - Shweta '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1366:
            allDbChangesArray.push(
                /* **************************** New Script -> 14-03-2022 *********************************** */
                "DROP PROCEDURE IF EXISTS Sproc_GetPendingSalesShippingDetForOtherCharges;  \n" +
                "CREATE PROCEDURE `Sproc_GetPendingSalesShippingDetForOtherCharges`(  \n" +
                "	IN psalesorderID INT  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "	SELECT NULL AS shippingID,  \n" +
                "		 sDetId,  \n" +
                "		custPOLineNumber,  \n" +
                "		-- IFNULL(sd.custPOLineNumber,1) custPOLineNumber,  \n" +
                "		NULL releaseNumber,  \n" +
                "		qty,  \n" +
                "		NULL shippingDate,  \n" +
                "		releaseNotes,  \n" +
                "		tentativeBuild,  \n" +
                "		poQty,  \n" +
                "		partID,  \n" +
                "		price,  \n" +
                "		lineID,  \n" +
                "		partDescription,  \n" +
                "		 mfgPN,  \n" +
                "		 mfgPNDescription,  \n" +
                "		 unitMeaser,  \n" +
                "		 nickName,  \n" +
                "         pidcode,  \n" +
                "		 NULL shippingMethodID,  \n" +
                "		NULL shippingAddressID,  \n" +
                "		mfgcodeID,  \n" +
                "		mfgName,  \n" +
                "		rohsIcon,  \n" +
                "		rohsName,  \n" +
                "        rohsStatusID,  \n" +
                "		standards,  \n" +
                "		shippedQty   ,  \n" +
                "        remark,  \n" +
                "        internalcomment,  \n" +
                "        mfgPnwihLineId,  \n" +
                "        poNumber ,  \n" +
                "        mfgPnwihLineId AS otherMPN  \n" +
                "    FROM (SELECT  \n" +
                "			NULL AS shippingID,  \n" +
                "			sd.id AS sDetId,  \n" +
                "			sd.custPOLineNumber custPOLineNumber,  \n" +
                "			-- IFNULL(sd.custPOLineNumber,1) custPOLineNumber,  \n" +
                "			NULL releaseNumber,  \n" +
                "			sd.qty,  \n" +
                "			NULL shippingDate,  \n" +
                "			sd.remark releaseNotes,  \n" +
                "			sd.tentativeBuild,  \n" +
                "			sd.qty AS poQty,  \n" +
                "			sd.partID,  \n" +
                "			sd.price,  \n" +
                "			sd.lineID,  \n" +
                "			sd.partDescription,  \n" +
                "			 c.mfgPN,  \n" +
                "			 c.mfgPNDescription,  \n" +
                "			 fun_getUnitNameByID(c.uom) unitMeaser,  \n" +
                "			 c.nickName,  \n" +
                "			 c.pidcode,  \n" +
                "			 smb.poNumber,  \n" +
                "             CONCAT(c.mfgPN,' | ',IFNULL(sd.custPOLineNumber,1)) mfgPnwihLineId,  \n" +
                "			 NULL shippingMethodID,  \n" +
                "			NULL shippingAddressID,  \n" +
                "			c.mfgcodeID,  \n" +
                "			fun_getMfgCodeAndNameByID(c.mfgcodeID) mfgName,  \n" +
                "			fun_getRoHSIconByPartID(sd.partID) rohsIcon,  \n" +
                "			fun_getRoHSNameByPartID(sd.partID) rohsName,  \n" +
                "			c.rohsStatusID,  \n" +
                "			fun_getCertificationByPartID(c.id)standards,  \n" +
                "			 (SELECT SUM(IFNULL(cpd.shippedQty,0)) FROM customer_packingslip_det cpd  \n" +
                "				JOIN customer_packingslip cp ON cp.id = cpd.refCustPackingSlipID AND cp.isDeleted = 0 AND cp.transType = 'P'  \n" +
                "				WHERE refsalesorderdetid=sd.id AND cpd.isDeleted=0) shippedQty   ,  \n" +
                "				sd.remark,  \n" +
                "				sd.internalcomment  \n" +
                "		FROM salesorderdet sd  \n" +
                "		LEFT JOIN component c ON c.id=sd.partid  \n" +
                "		LEFT JOIN salesorderdet sdb ON sdb.id=sd.refBlanketPOID AND sdb.isdeleted=0  \n" +
                "		LEFT JOIN salesordermst smb ON smb.id=sdb.refsalesOrderID  \n" +
                "		WHERE sd.refSalesOrderID = psalesorderID  \n" +
                "		AND sd.isdeleted=0  \n" +
                "		AND sd.isCancle=0  \n" +
                "		AND sd.partCategory = 2  \n" +
                "		AND sd.refSODetID IS NULL  \n" +
                "		AND c.partType  =4  \n" +
                "    ) a  WHERE a.poQty - IFNULL(a.shippedQty,0) > 0;  \n" +
                "  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 14-03-2022  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1367,'1.00','V1','US40780: [Main Branch] Other charge provision for PO/SO based packing slip - Shweta '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1367:
            allDbChangesArray.push(
                /* **************************** New Script -> 14-03-2022 *********************************** */
                "DROP PROCEDURE IF EXISTS Sproc_RetrieveCustomerPackingShippingDetail;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveCustomerPackingShippingDetail`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN prefCustPackingSlipID INT  \n" +
                "	)  \n" +
                "BEGIN  \n" +
                "  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;  \n" +
                "    DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "  	DECLARE vMfgCodeFormat INT;  \n" +
                "  \n" +
                "	SELECT fun_getMFGCodeNameFormat() INTO vMfgCodeFormat;  \n" +
                "	SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
                "  \n" +
                "  SET @tempQuerypackingSlip = CONCAT(\"SELECT cpd.id, cpd.refCustPackingSlipID,cpd.refSalesorderDetid,  \n" +
                "			cpd.partId , cpd.custPOLineID, cpd.assyDescription,  \n" +
                "			cpd.poQty,cpd.shipQty,cpd.remainingQty,cpd.shippedQty,cpd.shippingNotes,cpd.shippingId,  \n" +
                "			cpd.internalComment,  \n" +
                "			cpd.binID, cpd.whID,  \n" +
                "			ss.qty as releaseLineQty,  \n" +
                "			cpd.standrads,  \n" +
                "			ss.releaseNumber,  \n" +
                "			cpd.poReleaseNumber,  \n" +
                "			cpd.refBlanketPONumber,  \n" +
                "			fun_getUserNameByID(cpd.updatedBy) updatedby,  \n" +
                "			fun_getUserNameByID(cpd.createdBy) createdby,  \n" +
                "			fun_getRoleByID(cpd.createByRoleId) createdbyRole,  \n" +
                "			fun_getRoleByID(cpd.updateByRoleId) updatedbyRole,  \n" +
                "			fun_ApplyCommonDateTimeFormatByParaValue(cpd.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAt,  \n" +
                "			fun_ApplyCommonDateTimeFormatByParaValue(cpd.UpdatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt,  \n" +
                "			c.mfgPN,c.pidcode PIDCode,c.nickName,c.mfgpndescription,rr.name as rohsName,rr.rohsIcon, c.partType ,  \n" +
                "			fun_getUnitNameByID(c.uom) unitMeaser ,  c.custAssyPN,  \n" +
                "			cpd.reflineID as lineID ,  \n" +
                "			fun_GetFormattedMfgCode(mfgmst.mfgcode,mfgmst.mfgname,\", vMfgCodeFormat,\") mfgName,  \n" +
                "			c.mfgcodeid ,  \n" +
                "			cpd.lineID AS lineIDSequenceNum   ,  \n" +
                "			(SELECT GROUP_CONCAT(DISTINCT woNumber SEPARATOR ', ') FROM shippedassembly  \n" +
                "			   WHERE refCustPackingSlipDetID = cpd.id AND isDeleted = 0 AND shippedqty > 0) shippedFromWONumbers ,  \n" +
                "			(SELECT GROUP_CONCAT(DISTINCT css.uid) FROM shippedassembly sa  \n" +
                "					JOIN component_sid_stock css ON sa.refsidid = css.id AND  css.isDeleted = 0  \n" +
                "			  WHERE sa.refCustPackingSlipDetID = cpd.id AND sa.isDeleted = 0 AND sa.shippedqty > 0) shippedFromUMIDs ,  \n" +
                "             cpd.refLineId soLineId ,  \n" +
                "             cpd.refCustPackingSlipDetID,  \n" +
                "             CASE WHEN c.partType = 4 THEN FALSE ELSE TRUE END materialType,  \n" +
                "             (select mfg.mfgType from mfgcodemst mfg where mfg.id = c.mfgcodeID and mfg.isDeleted = 0) mfgType,  \n" +
                "             cpd.componentStockType,  \n" +
                "             (case  when cp.packingSlipType = 2 and sod.id is not null then sod.price  \n" +
                "					when cp.packingSlipType = 2 and sod.id is null then cpd.unitPrice  \n" +
                "                    else cpd.unitPrice end)  unitPrice,  \n" +
                "             if(cp.packingSlipType = 2, sod.quoteNumber, cpd.quoteNumber)  quoteNumber,  \n" +
                "             (case  when cp.packingSlipType = 2 and sod.id is not null then sod.quoteFrom  \n" +
                "					when cp.packingSlipType = 2 and sod.id is null then cpd.quoteFrom  \n" +
                "                    else cpd.quoteFrom end) quoteFrom,  \n" +
                "             if(cp.packingSlipType = 2, sod.refAssyQtyTurnTimeID, cpd.refAssyQtyTurnTimeID) refAssyQtyTurnTimeID,  \n" +
                "             c.iscustom,c.isCPN,  \n" +
                "             (case  when cp.packingSlipType = 2 and sod.id is not null then cpd.shipQty * sod.price  \n" +
                "					when cp.packingSlipType = 2 and sod.id is null then cpd.extendedPrice  \n" +
                "                    else cpd.extendedPrice end) extendedPrice,  \n" +
                "             (select group_concat(cert.fullName)from  certificate_standards cert  \n" +
                "						where cert.certificateStandardID in (select compstd.certificateStandardID  \n" +
                "							from component_standard_details compstd where compstd.componentID = c.id and compstd.isDeleted= 0) )componentStandardList,  \n" +
                "            if(cp.packingSlipType = 2, sod.assyQtyTurnTimeText, cpd.assyQtyTurnTimeText) assyQtyTurnTimeText,  \n" +
                "            if(cp.packingSlipType = 2, sod.refRFQGroupID, cpd.refRFQGroupID)  refRFQGroupID,  \n" +
                "            if(cp.packingSlipType = 2, sod.refRFQQtyTurnTimeID, cpd.refRFQQtyTurnTimeID) refRFQQtyTurnTimeID,  \n" +
                "			(case	when cp.packingSlipType = 2 and sod.id is not null and sod.quoteFrom = 1 then 'From RFQ'  \n" +
                "					when cp.packingSlipType = 2 and sod.id is null and cpd.quoteFrom = 1 then 'From RFQ'  \n" +
                "                    when cp.packingSlipType = 2 and sod.id is not null and sod.quoteFrom = 3 then 'N/A'  \n" +
                "                    when cp.packingSlipType = 2 and sod.id is null and cpd.quoteFrom = 3 then 'N/A'  \n" +
                "                    when cp.packingSlipType = 2 and sod.id is not null and sod.quoteFrom = 2 then 'From Part Master'  \n" +
                "                    when cp.packingSlipType = 2 and sod.id is null and cpd.quoteFrom = 2 then 'From Part Master'  \n" +
                "					else '' end) quoteFromText  ,  \n" +
                "            cpd.releaseNotes ,if(sod.id is not null ,1,0) isFromSO  \n" +
                "		FROM `customer_packingslip_det` AS cpd  \n" +
                "			left join component c on c.id=cpd.partid  \n" +
                "			left join mfgcodemst mfgmst on mfgmst.id = c.mfgCodeId and mfgmst.isDeleted = 0  \n" +
                "			left join rfq_rohsmst rr on rr.id=c.rohsStatusID  \n" +
                "			left join salesshippingmst ss on ss.shippingID=cpd.shippingID and ss.isdeleted=0  \n" +
                "            left join salesorderdet sod on sod.id = cpd.refSalesorderDetid and sod.isDeleted = 0  \n" +
                "            left join customer_packingslip cp on cp.id  = cpd.refCustPackingSlipID and cp.isDeleted = 0  \n" +
                "		WHERE cpd.isDeleted=0 and cpd.refCustPackingSlipID=\",IFNULL(prefCustPackingSlipID,0));  \n" +
                "  \n" +
                "		IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY lineIDSequenceNum ASC\") ;  \n" +
                "		ELSE  \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "  \n" +
                "		IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "			SET pWhereClause = '1=1' ;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "  \n" +
                "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "			SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "		ELSE  \n" +
                "			SET rowNumWhere = '';  \n" +
                "		END IF;  \n" +
                "        /* to get total count of rows */  \n" +
                "			SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@tempQuerypackingSlip,\" ) c where 1=1 and \", pWhereClause);  \n" +
                "  \n" +
                "			PREPARE query2 FROM @SQLStatement2;  \n" +
                "			EXECUTE query2;  \n" +
                "			DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "			SET @SQLStatement2 = CONCAT(\"select * from ( \", @tempQuerypackingSlip,\" ) c  \n" +
                "				where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "			PREPARE query1 FROM @SQLStatement2;  \n" +
                "			EXECUTE query1;  \n" +
                "			DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** Add Script Version -> 14-03-2022  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1368,'1.00','V1','US40780: [Main Branch] Other charge provision for PO/SO based packing slip - Shweta '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1368:
            allDbChangesArray.push(
                /* **************************** New Script -> 14-03-2022 *********************************** */
                "DROP PROCEDURE IF EXISTS Sproc_RetrieveCustomerPackingSlipDetailPerLine;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveCustomerPackingSlipDetailPerLine`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pfilterStatus VARCHAR(1000),  \n" +
                "	IN pmfgCodelist VARCHAR(16000),  \n" +
                "	IN pmfgPartID  VARCHAR(5000) ,  \n" +
                "	IN ppsSearchType VARCHAR(5),  \n" +
                "	IN padvanceSearchPoSoPsInv VARCHAR(100),  \n" +
                "	IN pstatusIds VARCHAR(50),  \n" +
                "	IN pfromDate DATE,  \n" +
                "	IN ptoDate DATE   ,  \n" +
                "    IN pDateType VARCHAR(10),  \n" +
                "	IN pSearchComments VARCHAR(200)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;  \n" +
                "	DECLARE vTimeZone VARCHAR(50);  \n" +
                "	DECLARE vDateTimeDisplayFormat VARCHAR(100);  \n" +
                "    DECLARE vMfgCodeFormat INT;  \n" +
                "  \n" +
                "	SELECT fun_getDateTimeFormat() INTO vDateTimeDisplayFormat;  \n" +
                "	SELECT fun_getTimeZone() INTO vTimeZone;  \n" +
                "    SELECT fun_getMFGCodeNameFormat() INTO vMfgCodeFormat;  \n" +
                "  \n" +
                "	SET @temp_Sproc_RetrieveCustomerPackingSlipDetails = CONCAT(\"  \n" +
                "		SELECT cd.id,  \n" +
                "				cd.packingSlipNumber,  \n" +
                "		       cd.packingslipDate,  \n" +
                "		       cd.poNumber,  \n" +
                "		       cd.soNumber,  \n" +
                "		       cd.soDate,  \n" +
                "		       cd.poDate,  \n" +
                "               cd.poRevision,  \n" +
                "		       ss.releaseNumber,  \n" +
                "		       ss.qty as releaseLineQty,  \n" +
                "		       cd.customerID,  \n" +
                "			fun_GetFormattedMfgCode(mfgmst.mfgcode,mfgmst.mfgname,\", vMfgCodeFormat,\") customerName,  \n" +
                "			cd.systemID,  \n" +
                "			fun_getFOBById(cd.freeOnBoardId) freeOnBoard,  \n" +
                "			cd.packingslipcomment,  \n" +
                "			cd.refCustInvoiceID,  \n" +
                "			cpd.internalComment,  \n" +
                "			cd.headerComment,  \n" +
                "			fun_getGenericCategoryCodeNameByID(cd.shippingmethodid)  shippingMethod,  \n" +
                "			cd.subStatus,  \n" +
                "			cd.sorevision,  \n" +
                "            cpd.poReleaseNumber,  \n" +
                "			cpd.refBlanketPONumber,  \n" +
                "            cpd.partId,  \n" +
                "            fun_getRoHSNameByPartID(cpd.partId) rohsName,  \n" +
                "            `cpd`.assyDescription,  \n" +
                "            fun_getRoHSIconByPartID(cpd.partId) rohsIcon,  \n" +
                "            c.mfgPN as assyName ,  \n" +
                "            c.PIDCode as assyId,  \n" +
                "            c.mfgCodeID,  \n" +
                "            cd.termsID,  \n" +
                "            cd.shippingmethodid,  \n" +
                "            invoice.invoiceNumber,  \n" +
                "            invoice.id as invoiceID,  \n" +
                "            invoice.subStatus as invoiceSubstatus,  \n" +
                "            fun_GetFormattedMfgCode(co_mfgmst.mfgcode,co_mfgmst.mfgname,\", vMfgCodeFormat,\")  mfrName,  \n" +
                "			mfgmst.mfgcode custCode,  \n" +
                "			case when som.isBlanketPO=1 then 'Yes' else 'No' end blanketPOText,  \n" +
                "			som.isBlanketPO,  \n" +
                "			ifnull(invoice.paymentStatus,'') paymentStatus,  \n" +
                "			case when cd.transType = 'P' then fun_getPaymentStatusByCustPackingSlipSubStatus(invoice.subStatus,cd.transType,invoice.paymentStatus,'VAL') end paymentStatusValue,  \n" +
                "			case when cd.transType = 'P' then fun_getPaymentStatusByCustPackingSlipSubStatus(invoice.subStatus,cd.transType,invoice.paymentStatus,'CODE') end paymentStatusCode,  \n" +
                "			fun_getCustomerInvoiceSubStatusName(cd.subStatus,'P') statusConvertedValue,  \n" +
                "            cd.refSalesOrderID,  \n" +
                "			cpd.custPOLineID,cpd.poQty,cpd.shipQty,fun_getUnitAbbrivationByID(c.uom) uom,  \n" +
                "			cpd.shippingNotes,cpd.id AS customerSlipDetID, cd.id AS customerslipId,  \n" +
                "			case when cd.packingSlipType=1 then 'MISC' else 'PO/SO' end as packingTypeText,cd.packingSlipType,  \n" +
                "			fun_getCustomerInvoiceSubStatusName(invoice.subStatus,'I') as packingSlipStatusValue,  \n" +
                "			fun_getAddressbyID(cd.intermediateShipmentId) markFor,fun_getAddressbyID(cd.shipToId) shipTo,fun_getAddressbyID(cd.billToId) billTo,  \n" +
                "			concat('(',emp.initialName,')',' ',ifnull(emp.firstName,''),' ',ifnull(emp.lastName,'')) salesCommissionTo,  \n" +
                "		(CASE WHEN cd.termsID IS NULL THEN '' ELSE fun_getGenericCategoryCodeNameByID(cd.termsID) END) AS termsDisplayText ,  \n" +
                "         CASE WHEN cpd.id IS NULL THEN  fun_getUserNameByID(cd.updatedBy) ELSE fun_getUserNameByID(cpd.updatedBy) END  updatedby,  \n" +
                "         CASE WHEN cpd.id IS NULL THEN  fun_getUserNameByID(cd.createdBy) ELSE fun_getUserNameByID(cpd.createdBy) END  createdby,  \n" +
                "         CASE WHEN cpd.id IS NULL THEN  fun_getRoleByID(cd.createByRoleId) ELSE fun_getRoleByID(cpd.createByRoleId) END  createdbyRole,  \n" +
                "         CASE WHEN cpd.id IS NULL THEN  fun_getRoleByID(cd.updateByRoleId) ELSE fun_getRoleByID(cpd.updateByRoleId) END  updatedbyRole,  \n" +
                "         CASE WHEN cpd.id IS NULL THEN fun_ApplyCommonDateTimeFormatByParaValue(cd.createdAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') ELSE fun_ApplyCommonDateTimeFormatByParaValue(cpd.createdAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') END  createdAt,  \n" +
                "         CASE WHEN cpd.id IS NULL THEN fun_ApplyCommonDateTimeFormatByParaValue(cd.UpdatedAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') ELSE fun_ApplyCommonDateTimeFormatByParaValue(cpd.UpdatedAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') END  updatedAt,  \n" +
                "		 cd.isLocked,  \n" +
                "         fun_getIntToText(cd.isLocked) isLockedConvertedValue,  \n" +
                "         fun_getUserNameByID(cd.lockedBy) lockedBy,  \n" +
                "         fun_getRoleByID(cd.lockedByRole) lockedByRole,  \n" +
                "         fun_ApplyCommonDateTimeFormatByParaValue(cd.lockedAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') lockedAt ,  \n" +
                "        if(cd.packingSlipType = 2 and sod.id is not null , sod.price, cpd.unitPrice)  unitPrice,  \n" +
                "        if(cd.packingSlipType = 2 and sod.id is not null , cpd.shipQty * sod.price,  cpd.extendedPrice) extendedPrice,  \n" +
                "        if(cd.packingSlipType = 2, sod.quoteNumber, cpd.quoteNumber)  quoteNumber,  \n" +
                "		if(cd.packingSlipType = 2 and sod.id is not null , sod.quoteFrom, cpd.quoteFrom) quoteFrom,  \n" +
                "        if(cd.packingSlipType = 2, sod.refAssyQtyTurnTimeID, cpd.refAssyQtyTurnTimeID) refAssyQtyTurnTimeID,  \n" +
                "        if(cd.packingSlipType = 2, sod.assyQtyTurnTimeText, cpd.assyQtyTurnTimeText) assyQtyTurnTimeText,  \n" +
                "        if(cd.packingSlipType = 2, sod.refRFQGroupID, cpd.refRFQGroupID)  refRFQGroupID,  \n" +
                "		if(cd.packingSlipType = 2, sod.refRFQQtyTurnTimeID, cpd.refRFQQtyTurnTimeID) refRFQQtyTurnTimeID,  \n" +
                "		(case when if(cd.packingSlipType = 2, sod.quoteFrom, cpd.quoteFrom) = 1 then 'From RFQ' when if(cd.packingSlipType = 2, sod.quoteFrom, cpd.quoteFrom) = 3 then 'N/A' when if(cd.packingSlipType = 2, sod.quoteFrom, cpd.quoteFrom) = 2 then 'From Part Master' else '' end) quoteFromText,  \n" +
                "        (case when cd.subStatus = 5 and (invoice.subStatus = 4 or invoice.subStatus = 5) then concat(fun_getCustomerInvoiceSubStatusName(cd.subStatus,'P'),' - ',fun_getCustomerInvoiceSubStatusName(invoice.subStatus,'I'))  \n" +
                "						else '' end) materialStatus,  \n" +
                "        cd.revision,  \n" +
                "		(select group_concat(cert.fullName)from  certificate_standards cert  \n" +
                "			where cert.certificateStandardID in (select compstd.certificateStandardID  \n" +
                "			from component_standard_details compstd where compstd.componentID = c.id and compstd.isDeleted= 0) )componentStandardList,  \n" +
                "		c.isCustom,   c.custAssyPN customPartNumber  ,        cpd.remainingQty ,  \n" +
                "			som.rmaNumber,som.isRmaPO,  \n" +
                "			(CASE when som.isRmaPO = 1 then 'YES' when som.isRmaPO = 0 then 'NO' else 'NA' end) isRmaPOText,  \n" +
                "			(CASE when som.isRmaPO = 1 then 'Yes' when som.isRmaPO = 0 then 'No' else 'N/A' end) isRmaPOTextDisp  ,  \n" +
                "            cpd.releaseNotes  \n" +
                "		FROM customer_packingslip cd  \n" +
                "		LEFT JOIN mfgcodemst mfgmst ON mfgmst.id = cd.customerId and mfgmst.isDeleted = 0  \n" +
                "		JOIN customer_packingslip_det AS `cpd`  ON cd.id=cpd.refCustPackingSlipID AND cpd.isdeleted=0  \n" +
                "		LEFT JOIN component c ON c.id=cpd.partid  \n" +
                "        LEFT JOIN mfgcodemst co_mfgmst ON co_mfgmst.id = c.mfgcodeID and co_mfgmst.isDeleted = 0  \n" +
                "		LEFT JOIN salesshippingmst ss ON ss.shippingID=cpd.shippingId  \n" +
                "		LEFT JOIN employees emp on emp.id=cd.salesCommissionTo and emp.isdeleted=0  \n" +
                "		LEFT JOIN customer_packingslip invoice on invoice.id=cd.refCustInvoiceID and invoice.isDeleted = 0 and invoice.transType ='I'  \n" +
                "        LEFT JOIN salesorderdet sod on sod.id = cpd.refSalesorderDetid and sod.isDeleted = 0  \n" +
                "        LEFT JOIN salesordermst som on som.id = cd.refSalesOrderID and som.isDeleted = 0  \n" +
                "		WHERE  cd.isDeleted=0 and cd.transType='P'  \n" +
                "	\");  \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "        SET pOrderBy = \"ORDER BY systemID DESC\";  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = '1=1' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  IF(pfilterStatus IS NOT NULL AND pfilterStatus!='')THEN  \n" +
                "    if (pfilterStatus = '0') then  \n" +
                "		SET pWhereClause=CONCAT(pWhereClause, ' and c.invoiceSubStatus is null');  \n" +
                "    else  \n" +
                "		SET pWhereClause=CONCAT(pWhereClause, ' and c.invoiceSubStatus in (', pfilterStatus ,')');  \n" +
                "    end if;  \n" +
                "  END IF;  \n" +
                "  IF pSearchComments IS NOT NULL AND pSearchComments != '' THEN  \n" +
                "			SET pWhereClause= CONCAT(pWhereClause, \" AND (c.shippingNotes like '%\", pSearchComments, \"%'  \n" +
                "									OR 	c.internalComment like '%\", pSearchComments, \"%'  \n" +
                "                                    OR 	c.assyDescription like '%\", pSearchComments, \"%'  \n" +
                "                                    OR 	c.packingSlipComment like '%\", pSearchComments, \"%'  \n" +
                "                                    OR 	c.headerComment like '%\", pSearchComments, \"%')\" );  \n" +
                "  END IF;  \n" +
                "  IF(pstatusIds IS NOT NULL AND pstatusIds!='')THEN  \n" +
                "	SET @temp_Sproc_RetrieveCustomerPackingSlipDetails=CONCAT(@temp_Sproc_RetrieveCustomerPackingSlipDetails, ' and cd.subStatus in (',pstatusIds,')');  \n" +
                "  END IF;  \n" +
                "  IF(pmfgCodelist IS NOT NULL AND pmfgCodelist!='')THEN  \n" +
                "	SET @temp_Sproc_RetrieveCustomerPackingSlipDetails=CONCAT(@temp_Sproc_RetrieveCustomerPackingSlipDetails, ' and cd.customerID in (',pmfgCodelist,')');  \n" +
                "  END IF;  \n" +
                "  IF(pmfgPartID IS NOT NULL)THEN  \n" +
                "	SET @temp_Sproc_RetrieveCustomerPackingSlipDetails=CONCAT(@temp_Sproc_RetrieveCustomerPackingSlipDetails, ' and cpd.partId in ( ',pmfgPartID,')');  \n" +
                "  END IF;  \n" +
                "  IF(padvanceSearchPoSoPsInv IS NOT NULL AND padvanceSearchPoSoPsInv!='')THEN  \n" +
                "    IF(ppsSearchType='E')THEN  \n" +
                "      SET @temp_Sproc_RetrieveCustomerPackingSlipDetails=CONCAT(@temp_Sproc_RetrieveCustomerPackingSlipDetails, ' and (cd.poNumber=''',padvanceSearchPoSoPsInv,''' or cd.soNumber=''',padvanceSearchPoSoPsInv,''' or cd.packingSlipNumber=''',  \n" +
                "      padvanceSearchPoSoPsInv,''' or invoice.invoiceNumber=''',padvanceSearchPoSoPsInv,''' or som.rmaNumber=''',padvanceSearchPoSoPsInv,''')');  \n" +
                "   ELSE  \n" +
                "       SET @temp_Sproc_RetrieveCustomerPackingSlipDetails=CONCAT(@temp_Sproc_RetrieveCustomerPackingSlipDetails, ' and (cd.poNumber like''%',padvanceSearchPoSoPsInv,'%'' or cd.soNumber like ''%',  \n" +
                "       padvanceSearchPoSoPsInv,'%'' or cd.packingSlipNumber like ''%',padvanceSearchPoSoPsInv,'%'' or invoice.invoiceNumber like ''%',padvanceSearchPoSoPsInv,'%'' or som.rmaNumber like ''%',padvanceSearchPoSoPsInv,'%'')');  \n" +
                "  END IF;  \n" +
                "  END IF;  \n" +
                "   IF(pfromDate IS NOT NULL AND ptoDate IS NOT NULL)THEN  \n" +
                "	IF pDateType = 'P' THEN  \n" +
                "		SET @temp_Sproc_RetrieveCustomerPackingSlipDetails=CONCAT(@temp_Sproc_RetrieveCustomerPackingSlipDetails, ' and (cd.packingslipdate>=''',pfromDate,''' and cd.packingslipdate<=''',ptoDate,''')');  \n" +
                "    ELSEIF pDateType = 'PO' THEN  \n" +
                "		SET @temp_Sproc_RetrieveCustomerPackingSlipDetails=CONCAT(@temp_Sproc_RetrieveCustomerPackingSlipDetails, ' and (cd.poDate>=''',pfromDate,''' and cd.poDate<=''',ptoDate,''')');  \n" +
                "    ELSEIF pDateType = 'SO' THEN  \n" +
                "		SET @temp_Sproc_RetrieveCustomerPackingSlipDetails=CONCAT(@temp_Sproc_RetrieveCustomerPackingSlipDetails, ' and (cd.soDate>=''',pfromDate,''' and cd.soDate<=''',ptoDate,''')');  \n" +
                "    END IF;  \n" +
                "  ELSEIF(pfromDate IS NOT NULL)THEN  \n" +
                "		IF pDateType = 'P' THEN  \n" +
                "			SET @temp_Sproc_RetrieveCustomerPackingSlipDetails=CONCAT(@temp_Sproc_RetrieveCustomerPackingSlipDetails, ' and (cd.packingslipdate>=''',pfromDate,''')');  \n" +
                "		ELSEIF pDateType = 'PO' THEN  \n" +
                "			SET @temp_Sproc_RetrieveCustomerPackingSlipDetails=CONCAT(@temp_Sproc_RetrieveCustomerPackingSlipDetails, ' and (cd.poDate>=''',pfromDate,''')');  \n" +
                "		ELSEIF pDateType = 'SO' THEN  \n" +
                "			       SET @temp_Sproc_RetrieveCustomerPackingSlipDetails=CONCAT(@temp_Sproc_RetrieveCustomerPackingSlipDetails, ' and (cd.soDate >=''',pfromDate,''')');  \n" +
                "		END IF;  \n" +
                "  ELSEIF(ptoDate IS NOT NULL)THEN  \n" +
                "  		IF pDateType = 'P' THEN  \n" +
                "		SET @temp_Sproc_RetrieveCustomerPackingSlipDetails=CONCAT(@temp_Sproc_RetrieveCustomerPackingSlipDetails, ' and (cd.packingslipdate<=''',ptoDate,''')');  \n" +
                "		ELSEIF pDateType = 'PO' THEN  \n" +
                "			SET @temp_Sproc_RetrieveCustomerPackingSlipDetails=CONCAT(@temp_Sproc_RetrieveCustomerPackingSlipDetails, ' and (cd.poDate<=''',ptoDate,''')');  \n" +
                "		ELSEIF pDateType = 'SO' THEN  \n" +
                "			       SET @temp_Sproc_RetrieveCustomerPackingSlipDetails=CONCAT(@temp_Sproc_RetrieveCustomerPackingSlipDetails, ' and (cd.soDate<=''',ptoDate,''')');  \n" +
                "		END IF;  \n" +
                "  END IF;  \n" +
                "  /*IF(pfromDate IS NOT NULL AND ptoDate IS NOT NULL)THEN  \n" +
                "	 SET @temp_Sproc_RetrieveCustomerPackingSlipDetails=CONCAT(@temp_Sproc_RetrieveCustomerPackingSlipDetails, ' and (cd.packingslipdate>=''',pfromDate,''' and cd.packingslipdate<=''',ptoDate,''')');  \n" +
                "  ELSEIF(pfromDate IS NOT NULL)THEN  \n" +
                "       SET @temp_Sproc_RetrieveCustomerPackingSlipDetails=CONCAT(@temp_Sproc_RetrieveCustomerPackingSlipDetails, ' and (cd.packingslipdate>=''',pfromDate,''')');  \n" +
                "  ELSEIF(ptoDate IS NOT NULL)THEN  \n" +
                "       SET @temp_Sproc_RetrieveCustomerPackingSlipDetails=CONCAT(@temp_Sproc_RetrieveCustomerPackingSlipDetails, ' and (cd.packingslipdate<=''',ptoDate,''')');  \n" +
                "  END IF;  */  \n" +
                "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                " -- select   @temp_Sproc_RetrieveCustomerPackingSlipDetails ,pWhereClause ;  \n" +
                "  \n" +
                "	 /* to get total count of rows */  \n" +
                "	SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_RetrieveCustomerPackingSlipDetails,\" ) c where 1=1 and \", pWhereClause);  \n" +
                "	PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "	SET @SQLStatement2 = CONCAT(\"select * from ( \", @temp_Sproc_RetrieveCustomerPackingSlipDetails,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "	PREPARE query1 FROM @SQLStatement2;  \n" +
                "	-- select @SQLStatement2;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 14-03-2022  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1369,'1.00','V1','US40780: [Main Branch] Other charge provision for PO/SO based packing slip - Shweta '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1369:
            allDbChangesArray.push(
                /* **************************** New Script -> 14-03-2022 *********************************** */
                "DROP PROCEDURE IF EXISTS Sproc_SaveCustomerInvoiceDetail;  \n" +
                "CREATE PROCEDURE `Sproc_SaveCustomerInvoiceDetail`(  \n" +
                "	IN pTransType VARCHAR(5),  \n" +
                "	IN pInvoiceType VARCHAR(1),  \n" +
                "	IN pInvoiceID INT,  \n" +
                "	IN pInvData JSON,  \n" +
                "	IN pPackingSlipID INT,  \n" +
                "	IN puserID INT,  \n" +
                "	IN puserRoleID INT ,  \n" +
                "	IN pCustomerInvoiceSystemIDTypeConst VARCHAR(50),  \n" +
                "	IN pSystemId VARCHAR(20)  ,  \n" +
                "	IN pPackingSlipType INT  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE v_maxCurrSystemIDForInv VARCHAR(20) ;  \n" +
                "	DECLARE v_prefix VARCHAR(20);  \n" +
                "	DECLARE vTermsDays INT ;  \n" +
                "	DECLARE v_incrementI INT;  \n" +
                "	DECLARE v_commissionPercentage DECIMAL(10,2);  \n" +
                "	DECLARE vTotRefundIssuedOfCreditMemo DECIMAL(18,8);  \n" +
                "	DECLARE vIsAgreedRefundLessThanTotIssued TINYINT;  \n" +
                "  \n" +
                "  \n" +
                "	SET vIsAgreedRefundLessThanTotIssued = 0;  \n" +
                "  \n" +
                "	DROP TEMPORARY TABLE IF EXISTS temp_customerInvoice;  \n" +
                "	CREATE TEMPORARY TABLE IF NOT EXISTS temp_customerInvoice AS  \n" +
                "	SELECT 	*  \n" +
                "	FROM 	JSON_TABLE(  \n" +
                "			pInvData,  \n" +
                "			\"$[*]\" COLUMNS(  \n" +
                "				`transType` VARCHAR(5) PATH \"$.transType\",  \n" +
                "				`invoiceID` INT PATH \"$.invoiceID\",  \n" +
                "				`packingSlipID` INT PATH \"$.packingSlipID\",  \n" +
                "				`packingSlipType` INT PATH \"$.packingSlipType\",  \n" +
                "				`customerID` INT PATH \"$.customerID\" ,  \n" +
                "				`status` INT PATH \"$.status\",  \n" +
                "				`subStatus` INT PATH \"$.subStatus\",  \n" +
                "				`refSalesOrderID` INT PATH \"$.refSalesOrderID\",  \n" +
                "				`poNumber` VARCHAR(50) PATH \"$.poNumber\",  \n" +
                "				`poDate` DATE PATH \"$.poDate\",  \n" +
                "				`soNumber` VARCHAR(50) PATH \"$.soNumber\",  \n" +
                "				`soDate` DATE PATH \"$.soDate\",  \n" +
                "				`sorevision` VARCHAR(50) PATH \"$.sorevision\" ,  \n" +
                "				`packingSlipNumber` VARCHAR(50) PATH \"$.packingSlipNumber\" ,  \n" +
                "				`packingSlipDate` DATE PATH \"$.packingSlipDate\" ,  \n" +
                "				`invoiceNumber` VARCHAR(50) PATH \"$.invoiceNumber\" ,  \n" +
                "				`invoiceDate` DATE PATH \"$.invoiceDate\" ,  \n" +
                "				`shippingMethodID` INT PATH \"$.shippingMethodID\",  \n" +
                "				`headerComment` TEXT PATH \"$.headerComment\" ,  \n" +
                "				`packingSlipComment` TEXT PATH \"$.packingSlipComment\" ,  \n" +
                "				`billingAddress` TEXT PATH \"$.billingAddress\" ,  \n" +
                "				`shippingAddress` TEXT PATH \"$.shippingAddress\" ,  \n" +
                "				`intermediateAddress` TEXT PATH \"$.intermediateAddress\" ,  \n" +
                "				`billToId` INT PATH \"$.billToId\" ,  \n" +
                "				`shipToId` INT PATH \"$.shipToId\" ,  \n" +
                "				`intermediateShipmentId` INT PATH \"$.intermediateShipmentId\" ,  \n" +
                "				`totalAmount` DECIMAL(18,6) PATH \"$.totalAmount\" ,  \n" +
                "				`freeOnBoardId` INT PATH \"$.freeOnBoardId\" ,  \n" +
                "				`termsId` INT PATH \"$.termsId\" ,  \n" +
                "				`salesCommissionTo` INT PATH \"$.salesCommissionTo\" ,  \n" +
                "				`creditMemoNumber` VARCHAR(50) PATH \"$.creditMemoNumber\" ,  \n" +
                "				`creditMemoDate` DATE PATH \"$.creditMemoDate\" ,  \n" +
                "				`refDebitMemoNumber` VARCHAR(50) PATH \"$.refDebitMemoNumber\" ,  \n" +
                "				`refDebitMemoDate` DATE PATH \"$.refDebitMemoDate\",  \n" +
                "				`rmaNumber`  VARCHAR(50) PATH \"$.rmaNumber\" ,  \n" +
                "				`contactPersonId` INT PATH \"$.contactPersonId\",  \n" +
                "				`revision` VARCHAR(10) PATH \"$.revision\",  \n" +
                "				`isZeroValue` TINYINT PATH \"$.isZeroValue\",  \n" +
                "				`isAlreadyPublished` TINYINT PATH \"$.isAlreadyPublished\",  \n" +
                "				`poRevision` VARCHAR(50) PATH \"$.poRevision\" ,  \n" +
                "				`isMarkForRefund` TINYINT PATH \"$.isMarkForRefund\",  \n" +
                "				`agreedRefundAmt` DECIMAL(18,8) PATH \"$.agreedRefundAmt\",  \n" +
                "				`isAskForVersionConfirmation` TINYINT PATH \"$.isAskForVersionConfirmation\",  \n" +
                "				`refundStatus` VARCHAR(5) PATH \"$.refundStatus\" ,  \n" +
                "				`carrierID` INT PATH \"$.carrierID\",  \n" +
                "				`carrierAccountNumber` VARCHAR(50) PATH \"$.carrierAccountNumber\"  ,  \n" +
                "                `billingContactPersonID` INT PATH \"$.billingContactPersonID\",  \n" +
                "                `billingContactPerson` VARCHAR(1000) PATH \"$.billingContactPerson\",  \n" +
                "                `shippingContactPersonID` INT PATH \"$.shippingContactPersonID\",  \n" +
                "                `shippingContactPerson` VARCHAR(1000) PATH \"$.shippingContactPerson\",  \n" +
                "                `intermediateContactPersonID` INT PATH \"$.intermediateContactPersonID\",  \n" +
                "                `intermediateContactPerson` VARCHAR(1000) PATH \"$.intermediateContactPerson\"  \n" +
                "			)  \n" +
                "		) AS CustInv_JT;  \n" +
                "  \n" +
                "  \n" +
                "	SELECT  termsDays INTO 	vTermsDays  \n" +
                "	FROM genericCategory gc  \n" +
                "	WHERE gc.gencCategoryID IN (SELECT temp.termsId FROM temp_customerInvoice temp)  \n" +
                "	AND categoryType = 'Payment Terms';  \n" +
                "  \n" +
                "	IF (pInvoiceID IS NULL)THEN  \n" +
                "			/* get max identity value of 'CustomerInvoiceSystemID' for systemID */  \n" +
                "			/* SELECT `maxValue`,prefix INTO v_maxCurrSystemIDForInv,v_prefix  \n" +
                "			FROM `identity`  \n" +
                "			WHERE `type` = pCustomerInvoiceSystemIDTypeConst ; */  \n" +
                "  \n" +
                "			INSERT INTO customer_packingslip(customerID,packingSlipType,transType,`status`,refSalesOrderID,  \n" +
                "				poNumber,poDate,soNumber,soDate,packingSlipNumber,  \n" +
                "				packingSlipDate,invoiceNumber,invoiceDate,shippingMethodID,  \n" +
                "				packingSlipComment,headerComment,sorevision,  \n" +
                "				freeOnBoardId,createdBy,updatedBy,createByRoleId, createdAt,updatedAt,  \n" +
                "				updateByRoleId,packingSlipStatus,systemID, termsID,salesCommissionTo,  \n" +
                "				billingAddress,shippingAddress,intermediateAddress ,subStatus, paymentStatus ,  \n" +
                "				totalAmount,termsDays, freeOnBoardName, creditMemoNumber,creditMemoDate ,  \n" +
                "				refDebitMemoNumber,refDebitMemoDate, rmaNumber , billToId,shipToId ,intermediateShipmentId,  \n" +
                "				contactPersonId, revision, isZeroValue ,isAlreadyPublished, poRevision,isAskForVersionConfirmation,  \n" +
                "				refundStatus,carrierID,carrierAccountNumber,  \n" +
                "                billingContactPersonID,billingContactPerson,  \n" +
                "                shippingContactPersonID,shippingContactPerson,  \n" +
                "                intermediateContactPersonID,intermediateContactPerson)  \n" +
                "			SELECT customerID,packingSlipType,transType,`status`,refSalesOrderID,  \n" +
                "					poNumber,poDate,soNumber,soDate,packingSlipNumber,  \n" +
                "					packingSlipDate,invoiceNumber,invoiceDate,shippingMethodID,  \n" +
                "					packingSlipComment,headerComment,sorevision,  \n" +
                "					freeOnBoardId,puserID,puserID,puserRoleID,fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime() ,  \n" +
                "					puserRoleID,'W' , pSystemId, termsID ,salesCommissionTo,  \n" +
                "					billingAddress, shippingAddress, intermediateAddress,subStatus , 'PE' ,  \n" +
                "					IFNULL(totalAmount,0),vTermsDays ,   fun_getFOBById(freeOnBoardId) ,creditMemoNumber,creditMemoDate ,  \n" +
                "					refDebitMemoNumber,refDebitMemoDate , rmaNumber  , billToId,shipToId ,intermediateShipmentId ,  \n" +
                "					contactPersonId,  LPAD(IFNULL(revision,0),2,'0'), IFNULL(isZeroValue,0), isAlreadyPublished, poRevision ,0,  \n" +
                "					refundStatus,carrierID,carrierAccountNumber,  \n" +
                "                     billingContactPersonID,billingContactPerson,  \n" +
                "					shippingContactPersonID,shippingContactPerson,  \n" +
                "					intermediateContactPersonID,intermediateContactPerson  \n" +
                "			FROM temp_customerInvoice ;  \n" +
                "  \n" +
                "		 SET pInvoiceID=LAST_INSERT_ID();  \n" +
                "  \n" +
                "		 UPDATE customer_packingslip  \n" +
                "		 SET refCustInvoiceID=LAST_INSERT_ID(),packingSlipStatus='A'  \n" +
                "		 WHERE id= pPackingSlipID;  \n" +
                "  \n" +
                "	 IF pPackingSlipID IS NOT NULL THEN  \n" +
                "			-- FOR PO/SO flow quote related data not store in packing slip. retrieve it from sales order  \n" +
                "			 INSERT INTO customer_packingslip_det(refCustPackingSlipID,refSalesorderDetid,partId,custPOLineID,  \n" +
                "					poQty,shipQty,remainingQty,shippedQty,unitPrice,  extendedPrice,  \n" +
                "					shippingNotes,whID,binID,createdBy,updatedBy,createdAt, updatedAt,  \n" +
                "					createByRoleId,updateByRoleId,shippingId,reflineID,otherCharges,  \n" +
                "					assyDescription,lineID, internalComment, quoteNumber,quoteFrom,refAssyQtyTurnTimeID,assyQtyTurnTimeText,  \n" +
                "		    refRFQGroupID,refRFQQtyTurnTimeID, isZeroValue,releaseNotes)  \n" +
                "			SELECT LAST_INSERT_ID(),cpd.refSalesorderDetid,cpd.partId,cpd.custPOLineID,  \n" +
                "					cpd.poQty,cpd.shipQty,cpd.remainingQty,cpd.shippedQty,  \n" +
                "                     (case  when cp.packingSlipType = 2 and sod.id is not null then sod.price  \n" +
                "								when cp.packingSlipType = 2 and sod.id is null then IFNULL(cpd.unitPrice,0)  \n" +
                "								else IFNULL(cpd.unitPrice,0) end),  \n" +
                "					-- IF(cp.packingSlipType = 2, sod.price,cpd.unitPrice),  \n" +
                "                    (case  when cp.packingSlipType = 2 and sod.id is not null then cpd.shipQty * sod.price  \n" +
                "								when cp.packingSlipType = 2 and sod.id is null then cpd.shipQty * IFNULL(cpd.unitPrice,0)  \n" +
                "								else cpd.shipQty * IFNULL(cpd.unitPrice,0) end) ,  \n" +
                "					-- (cpd.shipQty * (IF(cp.packingSlipType = 2, sod.price,cpd.unitPrice))),  \n" +
                "						cpd.shippingNotes,cpd.whID,cpd.binID,  \n" +
                "						puserID,puserID,  fun_DatetimetoUTCDateTime(),fun_DatetimetoUTCDateTime(),  \n" +
                "						puserRoleID,puserRoleID,  \n" +
                "						cpd.shippingId,cpd.reflineID,cpd.otherCharges,  \n" +
                "						cpd.assyDescription, cpd.lineID, cpd.internalComment ,  \n" +
                "						IF(cp.packingSlipType = 2 ,sod.quoteNumber,cpd.quoteNumber),  \n" +
                "						(case  	when cp.packingSlipType = 2 and sod.id is not null then sod.quoteFrom  \n" +
                "								when cp.packingSlipType = 2 and sod.id is null then cpd.quoteFrom  \n" +
                "								else cpd.quoteFrom end),  \n" +
                "						-- IF(cp.packingSlipType = 2 ,sod.quoteFrom,cpd.quoteFrom),  \n" +
                "						IF(cp.packingSlipType = 2 ,sod.refAssyQtyTurnTimeID,cpd.refAssyQtyTurnTimeID),  \n" +
                "						IF(cp.packingSlipType = 2 ,sod.assyQtyTurnTimeText, cpd.assyQtyTurnTimeText),  \n" +
                "						IF(cp.packingSlipType = 2 ,sod.refRFQGroupID,cpd.refRFQGroupID),  \n" +
                "						IF(cp.packingSlipType = 2 ,sod.refRFQQtyTurnTimeID, cpd.refRFQQtyTurnTimeID) ,  \n" +
                "					cpd.isZeroValue, cpd.releaseNotes  \n" +
                "					FROM customer_packingslip_det   cpd  \n" +
                "					LEFT JOIN customer_packingslip cp ON cp.id = cpd.refCustPackingSlipID AND cp.isDeleted = 0  \n" +
                "					LEFT JOIN salesorderdet sod ON sod.id = cpd.refSalesorderDetid AND sod.isDeleted = 0  \n" +
                "					WHERE cpd.refCustPackingSlipID= pPackingSlipID  \n" +
                "					AND cpd.isDeleted = 0;  \n" +
                "  \n" +
                "	    IF pPackingSlipType = 2 THEN -- PO/SO INV  \n" +
                "	    INSERT INTO customer_packingslip_commission_attribute_mstdet(refCustPackingSlipDetID,	unitPrice,  \n" +
                "							commissionPercentage, commissionValue, quoted_commissionPercentage,  \n" +
                "							quoted_commissionValue, poQty, partId, refComponentSalesPriceBreakID,  \n" +
                "							quoted_unitPrice, quotedQty,commissionCalculateFrom,`type`, isDeleted,createdBy,createdAt,createByRoleId,salesCommissionNotes)  \n" +
                "				SELECT cpd.id refCustPackingSlipDetID,	sca.unitPrice,  \n" +
                "							sca.commissionPercentage, sca.commissionValue, sca.quoted_commissionPercentage,  \n" +
                "							sca.quoted_commissionValue, cpd.shipQty, sca.partId, sca.refComponentSalesPriceBreakID,  \n" +
                "							sca.quoted_unitPrice,sca.quotedQty,sca.commissionCalculateFrom,sca.type, sca.isDeleted,puserID, fun_DatetimetoUTCDateTime() ,puserRoleID,salesCommissionNotes  \n" +
                "					FROM salesorderdet_commission_attribute_mstdet sca  \n" +
                "					JOIN customer_packingslip_det cpd ON cpd.refSalesorderDetid=sca.refSalesorderDetid AND cpd.isDeleted = 0  \n" +
                "					AND cpd.refCustPackingSlipID =  pInvoiceID;  \n" +
                "					-- child records  \n" +
                "				INSERT INTO customer_packingslip_commission_attribute(refCustPackingSlipDetID,refcustInvoiceCommissionID,unitPrice, refQuoteAttributeId,  \n" +
                "							commissionPercentage, commissionValue, org_commissionPercentage,  \n" +
                "							org_commissionValue, category, partId, refComponentSalesPriceBreakID,  \n" +
                "							org_unitPrice, isDeleted,createdBy,createdAt,createByRoleId)  \n" +
                "				SELECT cpd.id refCustPackingSlipDetID,(SELECT id FROM customer_packingslip_commission_attribute_mstdet WHERE refCustPackingSlipDetID=cpd.id AND `type`=2 AND isdeleted=0 LIMIT 1),sca.unitPrice, sca.refQuoteAttributeId,  \n" +
                "							sca.commissionPercentage, sca.commissionValue, sca.org_commissionPercentage,  \n" +
                "							sca.org_commissionValue, sca.category, sca.partId, sca.refComponentSalesPriceBreakID,  \n" +
                "							sca.org_unitPrice, sca.isDeleted,puserID, fun_DatetimetoUTCDateTime() ,puserRoleID  \n" +
                "					FROM salesorderdet_commission_attribute sca  \n" +
                "					JOIN customer_packingslip_det cpd ON cpd.refSalesorderDetid=sca.refSalesorderDetid AND cpd.isDeleted = 0  \n" +
                "					AND cpd.refCustPackingSlipID =  pInvoiceID;  \n" +
                "  \n" +
                "	     ELSEIF pPackingSlipType = 1 THEN -- MISC packing slip INV  \n" +
                "					-- SP to generate line wise sales commission.  \n" +
                "		    CALL Sproc_GetSalesCommissionDetailsForMultiplePart(pInvoiceID);  \n" +
                "		-- Sales Price details for Part master  \n" +
                "		    INSERT INTO customer_packingslip_commission_attribute_mstdet(refCustPackingSlipDetID,	unitPrice,  \n" +
                "							commissionPercentage, commissionValue, quoted_commissionPercentage,`type`,commissionCalculateFrom,quotedQty,poQty,  \n" +
                "							quoted_commissionValue, salesCommissionNotes, partId, refComponentSalesPriceBreakID,  \n" +
                "							quoted_unitPrice, isDeleted,createdBy,createdAt,createByRoleId)  \n" +
                "					SELECT sca.refCustPackingSlipDetID,	sca.unitPrice,  \n" +
                "							sca.commissionPercentage, sca.commissionValue, sca.org_commissionPercentage,sca.type,sca.commissionCalculateFrom,sca.quotedQty,sca.poQty,  \n" +
                "							sca.org_commissionValue, sca.category, sca.partId, sca.refComponentSalesPriceBreakID,  \n" +
                "							sca.unitPrice,0,puserID, fun_DatetimetoUTCDateTime() ,puserRoleID  \n" +
                "					FROM temp_salesCommission sca  \n" +
                "					JOIN customer_packingslip_det cpd ON cpd.id = sca.refCustPackingSlipDetID AND cpd.isDeleted = 0  \n" +
                "					AND cpd.refCustPackingSlipID =  pInvoiceID AND sca.type=1;  \n" +
                "  \n" +
                "  \n" +
                "					-- save sales commission details for RFQ  \n" +
                "					DROP TEMPORARY TABLE IF EXISTS temp_salescommission_mst;  \n" +
                "			     CREATE TEMPORARY TABLE IF NOT EXISTS temp_salescommission_mst AS  \n" +
                "			       SELECT   sca.refCustPackingSlipDetID FROM temp_salesCommission sca  \n" +
                "			       JOIN customer_packingslip_det cpd ON cpd.id = sca.refCustPackingSlipDetID AND cpd.isDeleted = 0  \n" +
                "					AND cpd.refCustPackingSlipID =  pInvoiceID AND sca.type=2 GROUP BY sca.refCustPackingSlipDetID;  \n" +
                "  \n" +
                "			SELECT COUNT(1) INTO @mstCommissionCount FROM  temp_salescommission_mst;  \n" +
                "			SET v_incrementI=0;  \n" +
                "			temp_commission_Det: WHILE v_incrementI < @mstCommissionCount DO  \n" +
                "				SELECT refCustPackingSlipDetID INTO @refCustPackingSlipDetID FROM temp_salescommission_mst LIMIT v_incrementI,1;  \n" +
                "  \n" +
                "				SELECT unitPrice INTO @totalUnitPrice FROM customer_packingslip_det WHERE id=@refCustPackingSlipDetID;  \n" +
                "  \n" +
                "				SELECT SUM(commissionValue) INTO @totalCommissionValue FROM  \n" +
                "				temp_salesCommission WHERE refCustPackingSlipDetID=@refCustPackingSlipDetID;  \n" +
                "  \n" +
                "				IF(@totalCommissionValue>(@totalUnitPrice/2))THEN  \n" +
                "					SET @totalCommissionValue=(@totalUnitPrice/2);  \n" +
                "				END IF;  \n" +
                "  \n" +
                "				SET v_commissionPercentage=((@totalUnitPrice - (@totalUnitPrice - @totalCommissionValue)) *100/ (@totalUnitPrice - @totalCommissionValue));  \n" +
                "  \n" +
                "				INSERT INTO customer_packingslip_commission_attribute_mstdet(refCustPackingSlipDetID,	unitPrice,  \n" +
                "							commissionPercentage, commissionValue, quoted_commissionPercentage,`type`,commissionCalculateFrom,quotedQty,poQty,  \n" +
                "							quoted_commissionValue, salesCommissionNotes, partId, refComponentSalesPriceBreakID,  \n" +
                "							quoted_unitPrice, isDeleted,createdBy,createdAt,createByRoleId,rfqAssyID)  \n" +
                "					SELECT sca.refCustPackingSlipDetID,	@totalUnitPrice,  \n" +
                "							v_commissionPercentage, @totalCommissionValue, v_commissionPercentage,sca.type,sca.commissionCalculateFrom,sca.quotedQty,sca.poQty,  \n" +
                "							@totalCommissionValue, 'All', sca.partId, sca.refComponentSalesPriceBreakID,  \n" +
                "							@totalUnitPrice,0,puserID, fun_DatetimetoUTCDateTime() ,puserRoleID,sca.rfqAssyID  \n" +
                "					FROM temp_salesCommission sca WHERE sca.type=2 AND sca.refCustPackingSlipDetID=@refCustPackingSlipDetID LIMIT 1;  \n" +
                "					-- sales commission child details  \n" +
                "					SELECT LAST_INSERT_ID() INTO @lstID;  \n" +
                "					INSERT INTO customer_packingslip_commission_attribute(refCustPackingSlipDetID,refcustInvoiceCommissionID,unitPrice, refQuoteAttributeId,  \n" +
                "							commissionPercentage, commissionValue, org_commissionPercentage,  \n" +
                "							org_commissionValue, category, partId, refComponentSalesPriceBreakID,  \n" +
                "							org_unitPrice, isDeleted,createdBy,createdAt,createByRoleId)  \n" +
                "					SELECT sca.refCustPackingSlipDetID,@lstID,sca.unitPrice, sca.refQuoteAttributeId,  \n" +
                "							sca.commissionPercentage, sca.commissionValue, sca.org_commissionPercentage,  \n" +
                "							sca.org_commissionValue, sca.category, sca.partId, sca.refComponentSalesPriceBreakID,  \n" +
                "							sca.unitPrice,0,puserID, fun_DatetimetoUTCDateTime() ,puserRoleID  \n" +
                "					FROM temp_salesCommission sca WHERE sca.type=2 AND sca.refCustPackingSlipDetID=@refCustPackingSlipDetID;  \n" +
                "  \n" +
                "					SET v_incrementI=v_incrementI+1;  \n" +
                "  \n" +
                "			END WHILE temp_commission_Det;  \n" +
                "	     END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	ELSE  \n" +
                "  \n" +
                "  \n" +
                "		IF pInvoiceType = 'I' AND pTransType = 'I' THEN  \n" +
                "			UPDATE customer_packingslip cp  \n" +
                "				JOIN temp_customerInvoice tci ON tci.invoiceID = cp.id  \n" +
                "			SET cp.invoiceDate= tci.invoiceDate,  \n" +
                "				cp.`status`= tci.status,  \n" +
                "				cp.subStatus = tci.subStatus,  \n" +
                "				cp.headerComment= tci.headerComment,  \n" +
                "				cp.packingSlipComment= tci.packingSlipComment,  \n" +
                "				cp.totalAmount = IFNULL(tci.totalAmount,0) ,  \n" +
                "				cp.updatedAt = fun_DatetimetoUTCDateTime(),  \n" +
                "				cp.updatedBy = puserID,  \n" +
                "				cp.updateByRoleId = puserRoleID  ,  \n" +
                "				cp.billingAddress= tci.billingAddress,  \n" +
                "				cp.shippingAddress= tci.shippingAddress,  \n" +
                "				cp.intermediateAddress= tci.intermediateAddress,  \n" +
                "				cp.contactPersonId = tci.contactPersonId,  \n" +
                "				cp.billToId = tci.billToId,  \n" +
                "				cp.shipToId  = tci.shipToId,  \n" +
                "				cp.intermediateShipmentId = tci.intermediateShipmentId,  \n" +
                "				cp.revision = LPAD(tci.revision,2,'0'),  \n" +
                "				cp.isZeroValue = IFNULL(tci.isZeroValue,0)  ,  \n" +
                "				cp.isAlreadyPublished = IFNULL(tci.isAlreadyPublished,0),  \n" +
                "				cp.poRevision = tci.poRevision ,  \n" +
                "				cp.isAskForVersionConfirmation = tci.isAskForVersionConfirmation,  \n" +
                "				cp.carrierID = tci.carrierID,  \n" +
                "				cp.carrierAccountNumber = tci.carrierAccountNumber,  \n" +
                "                cp.billingContactPersonID = tci.billingContactPersonID,  \n" +
                "                cp.billingContactPerson = tci.billingContactPerson,  \n" +
                "                cp.shippingContactPersonID = tci.shippingContactPersonID,  \n" +
                "                cp.shippingContactPerson = tci.shippingContactPerson,  \n" +
                "                 cp.intermediateContactPersonID = tci.intermediateContactPersonID,  \n" +
                "                cp.intermediateContactPerson = tci.intermediateContactPerson  \n" +
                "			WHERE cp.id=pInvoiceID  \n" +
                "			AND cp.transType = pTransType;  \n" +
                "  \n" +
                "		ELSE  \n" +
                "  \n" +
                "			IF (pTransType = 'C') THEN  \n" +
                "				/* get total refunded amount till now  */  \n" +
                "				SELECT IFNULL(SUM(paymentAmount),0) INTO vTotRefundIssuedOfCreditMemo  \n" +
                "				FROM packingslip_invoice_payment_det  \n" +
                "				WHERE refRefundCustCreditMemoID = pInvoiceID  \n" +
                "				AND isDeleted = 0 AND isPaymentVoided = 0  \n" +
                "				;  \n" +
                "  \n" +
                "				/* check agreed refund amount is less than total refunded amount , if yes then give error  */  \n" +
                "				IF (IFNULL((SELECT agreedRefundAmt FROM temp_customerInvoice),0) < vTotRefundIssuedOfCreditMemo) THEN  \n" +
                "					SET vIsAgreedRefundLessThanTotIssued = 1;  \n" +
                "				END IF;  \n" +
                "			END IF;  \n" +
                "  \n" +
                "			IF (vIsAgreedRefundLessThanTotIssued = 0) THEN  \n" +
                "				# in case of tariff invoice & credit memo update all other field  \n" +
                "				UPDATE customer_packingslip  cp  \n" +
                "					JOIN temp_customerInvoice tci ON tci.invoiceID = cp.id  \n" +
                "				SET	cp.status= tci.status,  \n" +
                "					cp.subStatus= tci.subStatus,  \n" +
                "					cp.poNumber= tci.poNumber,  \n" +
                "					cp.poDate= tci.poDate,  \n" +
                "					cp.soNumber= tci.soNumber,  \n" +
                "					cp.soDate= tci.soDate,  \n" +
                "					cp.packingSlipNumber= tci.packingSlipNumber,  \n" +
                "					cp.packingSlipDate= tci.packingSlipDate,  \n" +
                "					cp.invoiceDate= tci.invoiceDate,  \n" +
                "					cp.shippingMethodID= tci.shippingMethodID,  \n" +
                "					cp.headerComment= tci.headerComment,  \n" +
                "					cp.packingSlipComment= tci.packingSlipComment,  \n" +
                "					cp.billingAddress= tci.billingAddress,  \n" +
                "					cp.shippingAddress= tci.shippingAddress,  \n" +
                "					cp.intermediateAddress= tci.intermediateAddress,  \n" +
                "					cp.totalAmount= IFNULL(tci.totalAmount,0),  \n" +
                "					cp.freeOnBoardId= tci.freeOnBoardId,  \n" +
                "					cp.termsId= tci.termsId,  \n" +
                "					cp.termsDays = vTermsDays,  \n" +
                "					cp.salesCommissionTo= tci.salesCommissionTo ,  \n" +
                "					cp.refDebitMemoNumber = tci.refDebitMemoNumber,  \n" +
                "					cp.refDebitMemoDate = tci.refDebitMemoDate,  \n" +
                "					cp.updatedAt = fun_DatetimetoUTCDateTime(),  \n" +
                "					cp.updatedBy = puserID,  \n" +
                "					cp.updateByRoleId = puserRoleID,  \n" +
                "					cp.rmaNumber= tci.rmaNumber,  \n" +
                "					cp.billToId = tci.billToId,  \n" +
                "					cp.shipToId  = tci.shipToId,  \n" +
                "					cp.intermediateShipmentId = tci.intermediateShipmentId ,  \n" +
                "					cp.invoiceNumber = tci.invoiceNumber ,  \n" +
                "					cp.contactPersonId = tci.contactPersonId,  \n" +
                "					cp.revision =  LPAD(tci.revision,2,'0'),  \n" +
                "					cp.isZeroValue = IFNULL(tci.isZeroValue,0),  \n" +
                "					cp.isAlreadyPublished = IFNULL(tci.isAlreadyPublished,0),  \n" +
                "					cp.poRevision = tci.poRevision ,  \n" +
                "					cp.isMarkForRefund = tci.isMarkForRefund,  \n" +
                "					cp.agreedRefundAmt = IFNULL(tci.agreedRefundAmt,0),  \n" +
                "					cp.isAskForVersionConfirmation = tci.isAskForVersionConfirmation,  \n" +
                "					cp.refundStatus = (CASE WHEN pTransType = 'C' THEN  \n" +
                "								(CASE WHEN tci.isMarkForRefund = 1 THEN  \n" +
                "									(CASE WHEN vTotRefundIssuedOfCreditMemo = 0 THEN 'PE'  \n" +
                "										WHEN vTotRefundIssuedOfCreditMemo < ABS(IFNULL(tci.totalAmount,0)) THEN 'PR'  \n" +
                "										WHEN vTotRefundIssuedOfCreditMemo = ABS(IFNULL(tci.totalAmount,0)) THEN 'FR'  \n" +
                "									   END)  \n" +
                "								ELSE 'NA' END)  \n" +
                "							ELSE NULL END)  ,  \n" +
                "					cp.carrierID = tci.carrierID,  \n" +
                "					cp.carrierAccountNumber = tci.carrierAccountNumber,  \n" +
                "                    cp.billingContactPersonID = tci.billingContactPersonID,  \n" +
                "                cp.billingContactPerson = tci.billingContactPerson,  \n" +
                "                cp.shippingContactPersonID = tci.shippingContactPersonID,  \n" +
                "                cp.shippingContactPerson = tci.shippingContactPerson,  \n" +
                "                 cp.intermediateContactPersonID = tci.intermediateContactPersonID,  \n" +
                "                cp.intermediateContactPerson = tci.intermediateContactPerson  \n" +
                "				 WHERE cp.id = pInvoiceID  \n" +
                "				 AND cp.transType = pTransType;  \n" +
                "  \n" +
                "			 END IF;  \n" +
                "  \n" +
                "		END IF;  \n" +
                "  \n" +
                "	  END IF;  \n" +
                "  \n" +
                "  \n" +
                "	  /* Resp[0] - created invoice/credit memo mst ID  */  \n" +
                "	  SELECT pInvoiceID invoiceID;  \n" +
                "	/* Resp[1] - detail Id  */  \n" +
                "	SELECT id  detId ,refSalesorderDetId , reflineID  \n" +
                "	FROM customer_packingslip_det  \n" +
                "	WHERE  refCustPackingSlipID = pInvoiceID  \n" +
                "	AND isDeleted = 0;  \n" +
                "  \n" +
                "	/* Resp[2] - store procedure status  */  \n" +
                "	  IF (vIsAgreedRefundLessThanTotIssued > 0) THEN  \n" +
                "		SELECT 0 AS 'spStatus' ;  \n" +
                "	  ELSE  \n" +
                "		SELECT 1 AS 'spStatus' ;  \n" +
                "	  END IF;  \n" +
                "  \n" +
                "	  /* Resp[3] -  Agreed Refund Amount Less Than Total Issued Amout */  \n" +
                "	IF (vIsAgreedRefundLessThanTotIssued > 0) THEN  \n" +
                "		SELECT 1 AS isAgreedRefundAmtLessThanTotIssued, vTotRefundIssuedOfCreditMemo AS totRefundIssuedAgainstCreditMemo;  \n" +
                "	ELSE  \n" +
                "		SELECT 0 AS isAgreedRefundAmtLessThanTotIssued, vTotRefundIssuedOfCreditMemo AS totRefundIssuedAgainstCreditMemo;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "  \n" +
                "	  DROP TEMPORARY TABLE IF EXISTS temp_part_data ;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 14-03-2022  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1370,'1.00','V1','US40780: [Main Branch] Other charge provision for PO/SO based packing slip - Shweta '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1370:
            allDbChangesArray.push(
                /* **************************** New Script -> 14-03-2022  *********************************** */
                "DROP procedure IF EXISTS `Sproc_removeExternalVerifiedPart`;  \n" +
                "CREATE PROCEDURE `Sproc_removeExternalVerifiedPart`(  \n" +
                "    IN pPartID INT(11) ,  \n" +
                "	IN ptransactionID VARCHAR(50),  \n" +
                "    IN pPartNumber varchar(150)  \n" +
                "	)  \n" +
                "BEGIN  \n" +
                "	DELETE FROM external_partverificationrequest_log  as a WHERE a.partID= pPartID  \n" +
                "    and a.transactionID = IFNULL(ptransactionID, a.transactionID)  \n" +
                "    AND a.partNumber =IFNULL(pPartNumber, a.partNumber);  \n" +
                "  \n" +
                "END;  \n" +

                "DROP procedure IF EXISTS `Sproc_GetComponentByMPNExteranlAPI`;  \n" +
                "CREATE PROCEDURE `Sproc_GetComponentByMPNExteranlAPI`(  \n" +
                "	IN pMPN varchar(1000)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "SELECT  \n" +
                "    (CASE WHEN c.refSupplierMfgpnComponentID is null THEN c.id ELSE refSupplierMfr.id END) as id,  \n" +
                "    (CASE WHEN c.refSupplierMfgpnComponentID is null THEN c.mfgPN ELSE refSupplierMfr.mfgPN END) as mfgPN,  \n" +
                "    (CASE WHEN c.refSupplierMfgpnComponentID is null THEN m.mfgName ELSE refSupplierMfgCode.mfgName END) as mfrName,  \n" +
                "    (CASE WHEN c.refSupplierMfgpnComponentID is null THEN c.mfgcodeId ELSE refSupplierMfr.mfgcodeID END) as mfgcodeId,  \n" +
                "    c.mfgType,  \n" +
                "    c.refSupplierMfgpnComponentID,  \n" +
                "    c.createdAt,  \n" +
                "    FUN_GETUSERNAMEBYID(c.createdBy) AS employeeName,  \n" +
                "    c.createdAt AS createdAt,  \n" +
                "    (CASE WHEN c.refSupplierMfgpnComponentID is not null THEN m.mfgName ELSE '' END) as supplierName,  \n" +
                "    (CASE WHEN c.refSupplierMfgpnComponentID is not null THEN c.mfgPN ELSE '' END) AS spn,  \n" +
                "    (CASE WHEN c.refSupplierMfgpnComponentID is not null THEN c.mfgcodeID  ELSE null END) AS supplierId  \n" +
                "FROM  \n" +
                "    component AS c  \n" +
                "        LEFT JOIN  \n" +
                "    mfgCodemst AS m ON c.mfgcodeID = m.id  \n" +
                "        LEFT OUTER JOIN  \n" +
                "    component AS refSupplierMfr ON c.refSupplierMfgpnComponentID = refSupplierMfr.id  \n" +
                "        LEFT OUTER JOIN  \n" +
                "    mfgCodemst AS refSupplierMfgCode ON refSupplierMfr.mfgcodeID = refSupplierMfgCode.id  \n" +
                "WHERE  \n" +
                "	c.mfgPN = pMPN  and c.isDeleted = 0 LIMIT 1;  \n" +
                "END;  \n" +

                "DROP procedure IF EXISTS `Sproc_GetBOMCleanProcessPercentage`;  \n" +
                "DROP procedure IF EXISTS `Sproc_GetBOMCleanProcessPercentage`;  \n" +
                "DROP procedure IF EXISTS `Sproc_GetBOMCleanOrUpdatePMProcessPercentage`;  \n" +
                "CREATE PROCEDURE `Sproc_GetBOMCleanOrUpdatePMProcessPercentage`(  \n" +
                "	IN pPartID INT,  \n" +
                "    IN ptransactionID VARCHAR(50),  \n" +
                "    IN pType VARCHAR(50)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE totalParts INT(11);  \n" +
                "	DECLARE percentage INT;  \n" +
                "	DECLARE remainingParts INT(11);  \n" +
                "	DECLARE remainTime INT(11);  \n" +
                "    DECLARE remainTimeDiff INT;  \n" +
                "    set remainTimeDiff = 6;  \n" +
                "  \n" +
                "	IF(pType ='FJTV3-ScheduleForPartUpdate')  \n" +
                "    THEN  \n" +
                "		IF(ptransactionID IS NULL)THEN  \n" +
                "			SELECT transactionID INTO ptransactionID FROM external_partverificationrequest_log WHERE `type`=ptype ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "	  SELECT COUNT(DISTINCT(partId)) INTO totalParts FROM external_partverificationrequest_log WHERE `type`=ptype AND transactionID=ptransactionID;  \n" +
                "	  SELECT  COUNT(DISTINCT(partId)) INTO remainingParts   FROM external_partverificationrequest_log WHERE  `type`=ptype AND transactionID=ptransactionID AND partStatus=0;  \n" +
                "	  SELECT  (COUNT(1) * remainTimeDiff) INTO  remainTime   FROM external_partverificationrequest_log WHERE  `type`=ptype AND transactionID=ptransactionID AND partStatus=0;  \n" +
                "    ELSE  \n" +
                "		SELECT (  \n" +
                "				 ((SELECT  COUNT(DISTINCT(partnumber)) FROM external_partverificationrequest_log as p WHERE p.partid=pPartID  \n" +
                "						and p.transactionID = IFNULL(ptransactionID, p.transactionID) AND p.`type`='FJTV3-CleanBOM')-  \n" +
                "				 (SELECT  COUNT(DISTINCT(partnumber)) FROM external_partverificationrequest_log as e WHERE e.partid=pPartID AND e.`type`='FJTV3-CleanBOM' AND e.partStatus=0  \n" +
                "					and e.transactionID = IFNULL(ptransactionID, e.transactionID))  \n" +
                "				) *100/  \n" +
                "				(SELECT  COUNT(DISTINCT(partnumber)) FROM external_partverificationrequest_log as l WHERE l.partid=pPartID AND l.`type`='FJTV3-CleanBOM'  \n" +
                "					and l.transactionID = IFNULL(ptransactionID, l.transactionID))  \n" +
                "		)  INTO percentage;  \n" +
                "		 SELECT  (COUNT(1) * remainTimeDiff) INTO  remainTime   FROM external_partverificationrequest_log WHERE  `type`='FJTV3-CleanBOM' AND partid=pPartID AND partStatus=0  \n" +
                "		 and transactionID = IFNULL(ptransactionID, transactionID);  \n" +
                "     END IF;  \n" +
                "     select totalParts,remainingParts,percentage,remainTime;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version ->  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1371,'1.00','V1',' User Story 40461: Part Master Improvement Points - Jan 2022 - SHUBHAM '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1371:
            allDbChangesArray.push(
                /* **************************** New Script -> 16-02-2022 *********************************** */
                "Drop procedure if exists `Sproc_RetrieveContactPersonList`;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveContactPersonList`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN prefEntityType VARCHAR(255),  \n" +
                "	IN pisPrimary TINYINT,  \n" +
                "	IN pisDefault TINYINT,  \n" +
                "	IN pmfgId VARCHAR(16000),  \n" +
                "	IN padditionalComment VARCHAR(2000),  \n" +
                "	IN pempId VARCHAR(16000),  \n" +
                "	IN pnameSearch VARCHAR(255),  \n" +
                "	IN pcheckNameType VARCHAR(5)  \n" +
                "   )  \n" +
                "BEGIN  \n" +
                "		DECLARE pOffset INT;  \n" +
                "		DECLARE rowNumWhere VARCHAR(255) ;  \n" +
                "        DECLARE mfgcodemstCondition VARCHAR(255) DEFAULT '';  \n" +
                "		DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
                "		DECLARE v_TimeZone VARCHAR(50);  \n" +
                "		DECLARE vMfgCodeFormat INT;  \n" +
                "		DECLARE vEmployeeNameFormat INT;  \n" +
                "		DECLARE vContPersonNameFormat INT;  \n" +
                "  \n" +
                "		SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "		SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
                "		SELECT fun_getMFGCodeNameFormat() INTO vMfgCodeFormat;  \n" +
                "		SELECT fun_getEmployeeDisplayFormat() INTO vEmployeeNameFormat;  \n" +
                "		SELECT fun_getContPersonNameDisplayFormat() INTO vContPersonNameFormat;  \n" +
                "  \n" +
                "  		IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "			SET pWhereClause = ' 1=1 ';  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF(prefEntityType = 'Customer/Manufacturer') THEN  \n" +
                "			SET mfgcodemstCondition = CONCAT(\" AND  mfg.mfgType = 'MFG'\");  \n" +
                "		ELSEIF (prefEntityType = 'Supplier') THEN  \n" +
                "			SET mfgcodemstCondition = CONCAT(\" AND  mfg.mfgType = 'DIST' and mfg.isCustOrDisty = 1\");  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF(pisPrimary) THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause,\" AND isPrimary = '\",pisPrimary,\"'\");  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF(pisDefault) THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause,\" AND isDefault = '\",pisDefault,\"'\");  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF(pmfgId IS NOT NULL AND pmfgId != '') THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause, \" AND mfgId IN (\",pmfgId,\") \");  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF(pempId IS NOT NULL AND pempId != '') THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause, \" AND empId IN (\",pempId,\") \");  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF(padditionalComment IS NOT NULL AND padditionalComment != '') THEN  \n" +
                "			SET pWhereClause = CONCAT(pWhereClause, \" AND additionalComment LIKE '%\",padditionalComment,\"%' \");  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF(pnameSearch IS NOT NULL AND pnameSearch != '')THEN  \n" +
                "			IF(pcheckNameType='C')THEN  \n" +
                "				SET pWhereClause = CONCAT(pWhereClause, \" AND (firstName LIKE '%\",pnameSearch,\"%' OR middleName LIKE '%\",pnameSearch,\"%' OR lastName LIKE '%\",pnameSearch,\"%')\");  \n" +
                "			ELSE  \n" +
                "				SET pWhereClause = CONCAT(pWhereClause, \" AND (firstName = '\",pnameSearch,\"' OR middleName = '\",pnameSearch,\"' OR lastName = '\",pnameSearch,\"')\");  \n" +
                "			END IF;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "        # Common Details for Retrive Contact Person.  \n" +
                "        SET @temp_Sproc_RetrieveMasterTemplate_Common = CONCAT(\"  \n" +
                "			fun_GetFormattedContactPersonName(a.firstName, a.middleName, a.lastName, \",vContPersonNameFormat,\") formattedName,  \n" +
                "			fun_getUserNameByID(a.updatedBy) updatedbyValue, fun_getUserNameByID(a.createdBy) createdbyValue,  \n" +
                "			fun_getRoleByID(a.createByRoleId) createdbyRoleValue, fun_getRoleByID(a.updateByRoleId) updatedbyRoleValue,  \n" +
                "			fun_ApplyCommonDateTimeFormatByParaValue(a.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAtValue,  \n" +
                "			fun_ApplyCommonDateTimeFormatByParaValue(a.updatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAtValue,  \n" +
                "            (CASE WHEN (a.systemGenerated = 0) THEN 'No' WHEN (a.systemGenerated = 1) THEN 'Yes' ELSE '' END) AS `syatemGeneratedValue`,  \n" +
                "			(CASE WHEN (a.isDefault = 0) THEN 'No' WHEN (a.isDefault = 1) THEN 'Yes' ELSE '' END) AS `isDefaultValue`,  \n" +
                "			(CASE WHEN (a.isPrimary = 0) THEN 'No' WHEN (a.isPrimary = 1) THEN 'Yes' ELSE '' END) AS `isPrimaryValue`,  \n" +
                "            (CASE WHEN (a.mailToCategory = 'N') THEN 'None' WHEN (a.mailToCategory = 'P') THEN 'Primary Email' WHEN (a.mailToCategory = 'A') THEN 'All Email' ELSE '' END) AS `mailToValue`  \n" +
                "		\");  \n" +
                "  \n" +
                "		# Filter: Personnel  \n" +
                "		SET @temp_Sproc_RetrieveMasterTemplate_employees = CONCAT(\"  \n" +
                "			select cp.personId, ecp.employeeId AS refTransID, cp.refTableName, cp.firstName, cp.middleName, cp.lastName, cp.title, cp.email, cp.isDefault, cp.additionalComment, cp.phoneNumber, cp.mailToCategory,  \n" +
                "					cp.division, cp.isPrimary, cp.systemGenerated, '' As refName, 'Personnel' AS refEntityType,  \n" +
                "                    fun_convertJsonEmailToCommaSepList(cp.email) emailList, (CASE WHEN cp.isActive = '1' THEN 'Active' ELSE 'Inactive' END) isActiveValue, cp.isActive,  \n" +
                "                    fun_GetEmployeeFormattedName(emp.firstName, emp.middleName, emp.lastName, emp.initialName,\",vEmployeeNameFormat,\") personnel,  \n" +
                "                    (SELECT GROUP_CONCAT(jsonTblPhone.phone, ifnull(concat(' Ext.' ,jsonTblPhone.phExtension), '')) from JSON_TABLE(cp.phoneNumber, '$[*]' COLUMNS (phone VARCHAR(40)  PATH '$.phone',phExtension VARCHAR(40)  PATH '$.phExtension')) jsonTblPhone ) phoneNumberList,  \n" +
                "					vuCPPhones.workNum, vuCPPhones.mobileNum, vuCPPhones.mainNum, vuCPPhones.faxNum, vuCPPhones.faxNumJson, vuCPPhones.otherNum,vuCPPhones.otherNumJson, emp.id as empId, null as mfgId,  \n" +
                "                    cp.updatedBy, cp.createdBy, cp.createByRoleId, cp.updateByRoleId, cp.createdAt, cp.updatedAt  \n" +
                "				FROM contactperson cp  \n" +
                "				LEFT JOIN vu_cont_person_phones_by_Category AS vuCPPhones ON cp.personId = vuCPPhones.personId  \n" +
                "                LEFT JOIN employee_contactperson AS ecp ON  ecp.contactPersonId = cp.personId and ecp.isDeleted = 0 and ecp.releasedAt Is Null  \n" +
                "				LEFT JOIN employees emp ON emp.id = ecp.employeeId and emp.isDeleted = 0  \n" +
                "					WHERE cp.refTableName = 'employees' AND cp.isDeleted = 0  \n" +
                "		\");  \n" +
                "  \n" +
                "        # Filter: Manufacturer AND Supplier  \n" +
                "        SET @temp_Sproc_RetrieveMasterTemplate_mfgcodemst = CONCAT(\"  \n" +
                "			select cp.personId, cp.refTransID, cp.refTableName, cp.firstName, cp.middleName, cp.lastName, cp.title, cp.email, cp.isDefault, cp.additionalComment, cp.phoneNumber, cp.mailToCategory,  \n" +
                "					cp.division, cp.isPrimary, cp.systemGenerated, fun_GetFormattedMfgCode(mfg.mfgCode, mfg.mfgName, \",vMfgCodeFormat,\") AS refName,  \n" +
                "					(CASE WHEN mfg.mfgType = 'MFG' THEN 'Customer/Manufacturer' WHEN mfg.mfgType = 'DIST' and mfg.isCustOrDisty = 1 THEN 'Supplier' ELSE ''  END) AS refEntityType,  \n" +
                "					(SELECT GROUP_CONCAT(jsonTblEmails.emails) from JSON_TABLE(cp.email, '$[*]' COLUMNS (emails VARCHAR(40)  PATH '$.email')) jsonTblEmails) emailList, (CASE WHEN cp.isActive = '1' THEN 'Active' ELSE 'Inactive' END) isActiveValue, cp.isActive, '' AS personnels,  \n" +
                "                    (SELECT GROUP_CONCAT(jsonTblPhone.phone, ifnull(concat(' Ext.' ,jsonTblPhone.phExtension), '')) from JSON_TABLE(cp.phoneNumber, '$[*]' COLUMNS (phone VARCHAR(40)  PATH '$.phone',phExtension VARCHAR(40)  PATH '$.phExtension')) jsonTblPhone ) phoneNumberList,  \n" +
                "					vuCPPhones.workNum, vuCPPhones.mobileNum, vuCPPhones.mainNum, vuCPPhones.faxNum, vuCPPhones.faxNumJson, vuCPPhones.otherNum, vuCPPhones.otherNumJson, null as empId, mfg.id as mfgId,  \n" +
                "                    cp.updatedBy, cp.createdBy, cp.createByRoleId, cp.updateByRoleId, cp.createdAt, cp.updatedAt  \n" +
                "                FROM contactperson cp  \n" +
                "				INNER JOIN mfgcodemst mfg ON mfg.id = cp.refTransID and mfg.isDeleted = 0 \",mfgcodemstCondition,\"  \n" +
                "				LEFT JOIN vu_cont_person_phones_by_Category AS vuCPPhones ON cp.personId = vuCPPhones.personId  \n" +
                "						WHERE cp.isDeleted = 0  \n" +
                "		\");  \n" +
                "  \n" +
                "        # UNION Records based of Filer : Create Final Query for Fetch Contact Person Records.  \n" +
                "        IF(prefEntityType = 'Supplier' OR prefEntityType = 'Customer/Manufacturer') THEN  \n" +
                "			SET @temp_Sproc_RetrieveMasterTemplate = CONCAT(\"select *, \",@temp_Sproc_RetrieveMasterTemplate_Common,\" from  \n" +
                "					(\",@temp_Sproc_RetrieveMasterTemplate_mfgcodemst,\") a \");  \n" +
                "		ELSEIF (prefEntityType = 'Personnel') THEN  \n" +
                "			SET @temp_Sproc_RetrieveMasterTemplate = CONCAT(\"select *, \",@temp_Sproc_RetrieveMasterTemplate_Common,\" from  \n" +
                "					(\",@temp_Sproc_RetrieveMasterTemplate_employees,\") a \");  \n" +
                "        ELSE  \n" +
                "			SET @temp_Sproc_RetrieveMasterTemplate= CONCAT(\"select *,\",@temp_Sproc_RetrieveMasterTemplate_Common,\" from  \n" +
                "					(\",@temp_Sproc_RetrieveMasterTemplate_employees,\" UNION ALL \",@temp_Sproc_RetrieveMasterTemplate_mfgcodemst,\") a \");  \n" +
                "        END IF;  \n" +
                "  \n" +
                "		IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "			SET pOrderBy = \"ORDER BY isDefault DESC, isPrimary DESC, firstName ASC\" ;  \n" +
                "		ELSE  \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "			SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "		ELSE  \n" +
                "			SET rowNumWhere = '';  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		 /* to get total count of rows */  \n" +
                "		SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_RetrieveMasterTemplate,\" ) c where 1=1 and \", pWhereClause);  \n" +
                "		PREPARE query2 FROM @SQLStatement2;  \n" +
                "		EXECUTE query2;  \n" +
                "		DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "		SET @SQLStatement2 = CONCAT(\"select * from ( \", @temp_Sproc_RetrieveMasterTemplate,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "		PREPARE query1 FROM @SQLStatement2;  \n" +
                "		EXECUTE query1;  \n" +
                "		DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** New Script -> 16-02-2022 *********************************** */
                "Drop view if exists `vu_cont_person_phones_by_Category`;  \n" +
                "CREATE VIEW `vu_cont_person_phones_by_Category` AS  \n" +
                "    select cp.personId,  \n" +
                "		(select CONCAT('[',(group_concat(phoneList.phones)),']') from  \n" +
                "			(SELECT concat(GROUP_CONCAT(Json_object('category',jsonTblPhone.category,'phone', jsonTblPhone.phone,'phExtension' ,ifnull(concat(' Ext.' ,jsonTblPhone.phExtension), ''), 'isPrimary', jsonTblPhone.isPrimary))) phones  \n" +
                "				FROM JSON_TABLE(cp.phoneNumber, '$[*]' COLUMNS (phone VARCHAR(40)  PATH '$.phone', phExtension VARCHAR(40) PATH '$.phExtension', category VARCHAR(40) PATH '$.category', isPrimary VARCHAR(40) PATH '$.isPrimary')  \n" +
                "				) jsonTblPhone where category = 'Work') phoneList) workNum,  \n" +
                "		(select CONCAT('[',(group_concat(phoneList.phones)),']') from  \n" +
                "			(SELECT concat(GROUP_CONCAT(Json_object('category',jsonTblPhone.category,'phone', jsonTblPhone.phone,'phExtension' ,ifnull(concat(' Ext.' ,jsonTblPhone.phExtension), ''), 'isPrimary', jsonTblPhone.isPrimary))) phones  \n" +
                "				FROM JSON_TABLE(cp.phoneNumber, '$[*]' COLUMNS (phone VARCHAR(40)  PATH '$.phone', phExtension VARCHAR(40) PATH '$.phExtension', category VARCHAR(40) PATH '$.category', isPrimary VARCHAR(40) PATH '$.isPrimary')  \n" +
                "				) jsonTblPhone where category = 'Mobile') phoneList) mobileNum,  \n" +
                "		(select CONCAT('[',(group_concat(phoneList.phones)),']') from  \n" +
                "			(SELECT concat(GROUP_CONCAT(Json_object('category',jsonTblPhone.category,'phone', jsonTblPhone.phone,'phExtension' ,ifnull(concat(' Ext.' ,jsonTblPhone.phExtension), ''), 'isPrimary', jsonTblPhone.isPrimary))) phones  \n" +
                "				FROM JSON_TABLE(cp.phoneNumber, '$[*]' COLUMNS (phone VARCHAR(40)  PATH '$.phone', phExtension VARCHAR(40) PATH '$.phExtension', category VARCHAR(40) PATH '$.category', isPrimary VARCHAR(40) PATH '$.isPrimary')  \n" +
                "				) jsonTblPhone where category = 'Main') phoneList) mainNum,  \n" +
                "		(select GROUP_CONCAT(catgWiseList.catgWisePhones SEPARATOR ' | ' ) from  \n" +
                "			(SELECT concat(jsonTblPhone.category,': ', GROUP_CONCAT(jsonTblPhone.phone, ifnull(concat(' Ext.' ,jsonTblPhone.phExtension), ''))) catgWisePhones  \n" +
                "				FROM JSON_TABLE(cp.phoneNumber, '$[*]' COLUMNS (phone VARCHAR(40)  PATH '$.phone', phExtension VARCHAR(40) PATH '$.phExtension', category VARCHAR(40) PATH '$.category')  \n" +
                "			) jsonTblPhone where category IN ('Work Fax','Home Fax') group by jsonTblPhone.category ) catgWiseList) faxNum,  \n" +
                "		(select CONCAT('[',(group_concat(phoneList.phones)),']') from  \n" +
                "			(SELECT concat(GROUP_CONCAT(Json_object('category',jsonTblPhone.category,'phone', jsonTblPhone.phone,'phExtension' ,ifnull(concat(' Ext.' ,jsonTblPhone.phExtension), ''), 'isPrimary', jsonTblPhone.isPrimary))) phones  \n" +
                "				FROM JSON_TABLE(cp.phoneNumber, '$[*]' COLUMNS (phone VARCHAR(40)  PATH '$.phone', phExtension VARCHAR(40) PATH '$.phExtension', category VARCHAR(40) PATH '$.category', isPrimary VARCHAR(40) PATH '$.isPrimary')  \n" +
                "				) jsonTblPhone where category IN ('Work Fax','Home Fax')) phoneList) faxNumJson,  \n" +
                "		(select GROUP_CONCAT(catgWiseList.catgWisePhones SEPARATOR ' | ' ) from  \n" +
                "			(SELECT concat(jsonTblPhone.category,': ', GROUP_CONCAT(jsonTblPhone.phone, ifnull(concat(' Ext.' ,jsonTblPhone.phExtension), ''))) catgWisePhones  \n" +
                "				FROM JSON_TABLE(cp.phoneNumber, '$[*]' COLUMNS (phone VARCHAR(40)  PATH '$.phone', phExtension VARCHAR(40) PATH '$.phExtension', category VARCHAR(40) PATH '$.category')  \n" +
                "			) jsonTblPhone where category NOT IN ('Work','Mobile','Main','Work Fax','Home Fax') group by jsonTblPhone.category ) catgWiseList) otherNum,  \n" +
                "		(select CONCAT('[',(group_concat(phoneList.phones)),']') from  \n" +
                "			(SELECT concat(GROUP_CONCAT(Json_object('category',jsonTblPhone.category,'phone', jsonTblPhone.phone,'phExtension' ,ifnull(concat(' Ext.' ,jsonTblPhone.phExtension), ''), 'isPrimary', jsonTblPhone.isPrimary))) phones  \n" +
                "				FROM JSON_TABLE(cp.phoneNumber, '$[*]' COLUMNS (phone VARCHAR(40)  PATH '$.phone', phExtension VARCHAR(40) PATH '$.phExtension', category VARCHAR(40) PATH '$.category', isPrimary VARCHAR(40) PATH '$.isPrimary')  \n" +
                "				) jsonTblPhone where category NOT IN ('Work','Mobile','Main','Work Fax','Home Fax')) phoneList) otherNumJson  \n" +
                "	FROM contactperson cp  \n" +
                "    where cp.phoneNumber is not null AND cp.isDeleted = 0;  \n" +
                /* **************************** New Script -> 16-02-2022 *********************************** */
                "Drop function if exists `fun_getPrimaryPhoneFromJsonList`;  \n" +
                "CREATE FUNCTION `fun_getPrimaryPhoneFromJsonList`(  \n" +
                "	pJsonPhoneList TEXT  \n" +
                ") RETURNS text CHARSET utf8mb4  \n" +
                "BEGIN  \n" +
                "		DECLARE v_Phone VARCHAR(100);  \n" +
                "  \n" +
                "		SELECT jsonTblPhones.phone INTO v_Phone  \n" +
                "		FROM JSON_TABLE(pJsonPhoneList, '$[*]' COLUMNS (phone VARCHAR(50)  PATH '$.phone', isprimary TINYINT  PATH '$.isPrimary',category VARCHAR(40)  PATH '$.category')) jsonTblPhones  \n" +
                "		WHERE jsonTblPhones.isPrimary = 1 and jsonTblPhones.category NOT IN ('Work Fax', 'Home Fax')  Limit 1;  \n" +
                "  \n" +
                "	RETURN v_Phone;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** New Script -> 16-02-2022 *********************************** */
                "Drop function if exists `fun_getPrimaryFaxFromJsonList`;  \n" +
                "CREATE FUNCTION `fun_getPrimaryFaxFromJsonList`(  \n" +
                "	pJsonPhoneList TEXT  \n" +
                ") RETURNS text CHARSET utf8mb4  \n" +
                "BEGIN  \n" +
                "		DECLARE v_Phone VARCHAR(100);  \n" +
                "  \n" +
                "		SELECT jsonTblPhones.phone INTO v_Phone  \n" +
                "		FROM JSON_TABLE(pJsonPhoneList, '$[*]' COLUMNS (phone VARCHAR(50)  PATH '$.phone', isprimary TINYINT  PATH '$.isPrimary',category VARCHAR(40)  PATH '$.category')) jsonTblPhones  \n" +
                "		WHERE isPrimary = 1 and category IN ('Work Fax', 'Home Fax')  Limit 1;  \n" +
                "  \n" +
                "	RETURN v_Phone;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** New Script -> 16-02-2022 *********************************** */
                "Drop function if exists `fun_getPrimaryPhExtensionFromJsonList`;  \n" +
                "CREATE FUNCTION `fun_getPrimaryPhExtensionFromJsonList`(  \n" +
                "	pJsonPhextList TEXT  \n" +
                ") RETURNS text CHARSET utf8mb4  \n" +
                "BEGIN  \n" +
                "		DECLARE v_Phext VARCHAR(100);  \n" +
                "  \n" +
                "		SELECT jsonTblPhExt.phExtension INTO v_Phext  \n" +
                "		FROM JSON_TABLE(pJsonPhextList, '$[*]' COLUMNS (phExtension VARCHAR(50)  PATH '$.phExtension', isprimary TINYINT  PATH '$.isPrimary',category VARCHAR(40)  PATH '$.category')) jsonTblPhExt  \n" +
                "		WHERE jsonTblPhExt.isPrimary = 1 AND jsonTblPhExt.category NOT IN ('Work Fax', 'Home Fax')  Limit 1;  \n" +
                "  \n" +
                "	RETURN v_Phext;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** New Script -> 16-02-2022 *********************************** */
                "Drop function if exists `fun_getAddressbyIDAndContactPersonID`;  \n" +
                "CREATE FUNCTION `fun_getAddressbyIDAndContactPersonID`(  \n" +
                "	pAddressID INT,  \n" +
                "	pcontactPersonID INT  \n" +
                ") RETURNS varchar(2000) CHARSET utf8mb4  \n" +
                "BEGIN  \n" +
                "	DECLARE pAddress VARCHAR(2000);  \n" +
                "    DECLARE vFormatValue INT;  \n" +
                "  \n" +
                "	SELECT `values` INTO vFormatValue FROM systemconfigrations WHERE `key`='ContactPersonDisplayNameFormat';  \n" +
                "  \n" +
                "	SELECT CONCAT('<b>',IFNULL(ca.companyName,''),'</b>','<br/>','ATTN: ',fun_GetFormattedContactPersonName(cp.firstName,cp.middleName,cp.lastName,vFormatValue),'<br/>', IFNULL(cp.division,''),(CASE WHEN cp.division IS NOT NULL THEN'<br/>' ELSE '' END), IFNULL(ca.street1,''),' ', IFNULL(ca.street2,''),' ',IFNULL(ca.street3,''),'<br/>',  \n" +
                "	IFNULL(ca.city,''),', ', IFNULL(ca.state,''),', ', IFNULL(co.countryName,''),' ','-',' ', IFNULL(ca.postcode,''),  \n" +
                "	CASE WHEN cp.phoneNumber IS NULL THEN '' ELSE IFNULL(CONCAT('<br/>Phone: ', fun_getPrimaryPhoneFromJsonList(cp.phoneNumber)), '') END,  \n" +
                "	CASE WHEN cp.phoneNumber IS NULL THEN '' ELSE IFNULL(CONCAT(' Ext. ', fun_getPrimaryPhExtensionFromJsonList(cp.phoneNumber)), '') END,  \n" +
                "    CASE WHEN cp.phoneNumber IS NULL THEN '' ELSE IFNULL(CONCAT('<br/>Fax: ', fun_getPrimaryFaxFromJsonList(cp.phoneNumber)), '') END,  \n" +
                "	(CASE WHEN cp.email IS NOT NULL THEN '<br/>' ELSE '' END), IFNULL(CONCAT('Email: ',fun_getPrimaryEmailFromJsonList(cp.email)),'')) INTO  pAddress  \n" +
                "	FROM customer_addresses ca  \n" +
                "	JOIN countrymst co ON co.countryID = ca.countryID  \n" +
                "	LEFT JOIN contactperson cp ON ca.customerId=cp.refTransID AND cp.personId=pcontactPersonID  \n" +
                "	WHERE ca.id = pAddressID  AND ca.isDeleted = 0;  \n" +
                "  \n" +
                "	RETURN pAddress;  \n" +
                "  \n" +
                "END;  \n" +
                /* **************************** New Script -> 16-02-2022 *********************************** */
                "Drop function if exists `fun_getCategoryWisePhonesFromJsonList`;  \n" +
                "CREATE FUNCTION `fun_getCategoryWisePhonesFromJsonList`(  \n" +
                "	pJsonPhoneList TEXT  \n" +
                ") RETURNS text CHARSET utf8mb4  \n" +
                "BEGIN  \n" +
                "	DECLARE v_Phones TEXT;  \n" +
                "  \n" +
                "	select GROUP_CONCAT(catgWiseList.catgWisePhones SEPARATOR ' | ') INTO v_Phones  \n" +
                "		FROM (SELECT concat(jsonTblPhone.category,': ', GROUP_CONCAT(jsonTblPhone.phone, ifnull(concat(' Ext.' ,jsonTblPhone.phExtension), ''))) catgWisePhones  \n" +
                "			FROM JSON_TABLE(pJsonPhoneList,  \n" +
                "				'$[*]' COLUMNS (phone VARCHAR(40)  PATH '$.phone', phExtension VARCHAR(40) PATH '$.phExtension', category VARCHAR(40) PATH '$.category')  \n" +
                "			) jsonTblPhone group by jsonTblPhone.category order by FIELD(jsonTblPhone.category,'Home Fax','Home','Main','Mobile','Work Fax','Work') DESC  \n" +
                "        ) catgWiseList;  \n" +
                "  \n" +
                "	RETURN v_Phones;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 16-02-2022 *********************************** */
                "Drop procedure if exists `Sproc_getCustomerSupplierGeographicalLocationReportDetails`;  \n" +
                "CREATE PROCEDURE `Sproc_getCustomerSupplierGeographicalLocationReportDetails`(  \n" +
                "	IN pEntityType varchar(5),  \n" +
                "	IN pAddressType varchar(5),  \n" +
                "	IN pisDefaultAddress tinyint  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE vWhereClause VARCHAR(16383);  \n" +
                "    SET vWhereClause = ' 1=1 ';  \n" +
                "	IF(pEntityType IS NOT NULL) THEN  \n" +
                "		IF pEntityType = 'CUST' THEN  \n" +
                "			SET vWhereClause = CONCAT(vWhereClause, \" AND cu.mfgType = 'MFG' AND cu.isCustOrDisty = 1 \");  \n" +
                "		ELSEIF pEntityType = 'DIST' THEN  \n" +
                "			SET vWhereClause = CONCAT(vWhereClause, \" AND cu.mfgType = 'DIST' \");  \n" +
                "		ELSE  \n" +
                "			SET vWhereClause = CONCAT(vWhereClause, \" AND 1=1 \");  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(pAddressType IS NOT NULL) THEN  \n" +
                "		IF pAddressType = 'B' THEN  \n" +
                "			SET vWhereClause = CONCAT(vWhereClause, \" AND cua.addressType = 'B' \");  \n" +
                "		ELSEIF pAddressType = 'S' THEN  \n" +
                "			SET vWhereClause = CONCAT(vWhereClause, \" AND cua.addressType = 'S' \");  \n" +
                "		ELSEIF pAddressType = 'I' THEN  \n" +
                "			SET vWhereClause = CONCAT(vWhereClause, \" AND cua.addressType = 'I' \");  \n" +
                "		ELSEIF pAddressType = 'P' THEN  \n" +
                "			SET vWhereClause = CONCAT(vWhereClause, \" AND cua.addressType = 'P' \");  \n" +
                "		ELSEIF pAddressType = 'R' THEN  \n" +
                "			SET vWhereClause = CONCAT(vWhereClause, \" AND cua.addressType = 'R' \");  \n" +
                "		ELSEIF pAddressType = 'W' THEN  \n" +
                "			SET vWhereClause = CONCAT(vWhereClause, \" AND cua.addressType = 'W' \");  \n" +
                "		ELSEIF pAddressType = 'BU' THEN  \n" +
                "			SET vWhereClause = CONCAT(vWhereClause, \" AND cua.addressType = 'BU' \");  \n" +
                "		ELSE  \n" +
                "			SET vWhereClause = CONCAT(vWhereClause, \" AND 1=1 \");  \n" +
                "		END IF;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF pisDefaultAddress = 1 THEN  \n" +
                "		SET vWhereClause = CONCAT(vWhereClause, ' AND cua.isDefault = 1 ');  \n" +
                "    ELSE  \n" +
                "		SET vWhereClause = CONCAT(vWhereClause, ' AND 1=1 ');  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	SET @tempQuery = CONCAT(\"SELECT DISTINCT CONCAT(IF(cu.legalName = '' OR cu.legalName is null,'' ,CONCAT(cu.legalName, ' d/b/a, ')), IFNULL(cu.mfgName, ''), ' Address: ',IFNULL(cua.street1, ''), ' ',IFNULL(cua.city, ''),', ',IFNULL(cua.state, ''),' ',IFNULL(cua.postcode, ''), ',', IFNULL(c.countryName,''), ' ' ,IFNULL(CONCAT('Email:',fun_getPrimaryEmailFromJsonList(cp.email)),''),  \n" +
                "	IFNULL(CONCAT(' Phone: ',fun_getPrimaryPhoneFromJsonList(cp.phoneNumber)),''),IFNULL(CONCAT(' Ext.',fun_getPrimaryPhExtensionFromJsonList(cp.phoneNumber)),''),IFNULL(CONCAT(' Fax: ',fun_getPrimaryFaxFromJsonList(cp.phoneNumber)),''))AS Address,  \n" +
                "	CONCAT(cua.Latitude ,' ',  cua.longitude) AS Location , cu.mfgCode as Code, cu.mfgName as Name, (case WHEN cu.mfgType = 'MFG' then 'Customer' WHEN cu.mfgType = 'DIST' then 'Supplier' else '' END) as Type, (case WHEN cua.isDefault = 1 then 'Yes' else 'No' END) as DefaultAddress,  \n" +
                "    (case WHEN cua.addressType = 'B' then 'Billing Address' WHEN cua.addressType = 'S' then 'Shipping Address'  WHEN cua.addressType = 'I' then 'Mark For (Intermediate Ship To) Address'  \n" +
                "		WHEN cua.addressType = 'P' then 'Remit To Address' WHEN cua.addressType = 'R' then 'RMA Shipping Address'  \n" +
                "        WHEN cua.addressType = 'W' then 'Wire Transfer Address' WHEN cua.addressType = 'BU' then 'Business Address' else '' END) as AddressType  \n" +
                "        FROM customer_addresses cua  \n" +
                "				Left Join contactperson cp on cua.defaultContactPersonID = cp.personId  \n" +
                "				JOIN mfgcodemst cu ON cu.id = cua.customerId  \n" +
                "				LEFT JOIN countrymst c ON cua.countryID=c.countryID  \n" +
                "				WHERE (cua.latitude is not null And cua.longitude is not null) and\", vWhereClause ,\";\");  \n" +
                "  \n" +
                "	PREPARE query1 FROM @tempQuery;  \n" +
                "			EXECUTE query1;  \n" +
                "			DEALLOCATE PREPARE query1;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 16-02-2022 *********************************** */
                "Drop procedure if exists `Sproc_RetrieveEmployee`;  \n" +
                "CREATE PROCEDURE `Sproc_RetrieveEmployee`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN precordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383)  \n" +
                "	)  \n" +
                "BEGIN  \n" +
                "  \n" +
                "		DECLARE pOffset INT;  \n" +
                "		DECLARE rowNumWhere VARCHAR(255) ;  \n" +
                "		DECLARE vDateTimeDisplayFormat VARCHAR(100);  \n" +
                "		DECLARE vTimeZone VARCHAR(50);  \n" +
                "		DECLARE vEmployeeNameFormat INT;  \n" +
                "		DECLARE vContPersonNameFormat INT;  \n" +
                "  \n" +
                "		SELECT fun_getTimeZone() INTO vTimeZone;  \n" +
                "		SELECT fun_getDateTimeFormat() INTO vDateTimeDisplayFormat ;  \n" +
                "		SELECT fun_getEmployeeDisplayFormat() INTO vEmployeeNameFormat;  \n" +
                "		SELECT fun_getContPersonNameDisplayFormat() INTO vContPersonNameFormat;  \n" +
                "  \n" +
                "  		SET @temp_Sproc_RetrieveEmployee = CONCAT(\"  \n" +
                "			SELECT  \n" +
                "				`Employee`.id,  \n" +
                "				`Employee`.firstName,  \n" +
                "				`Employee`.email,  \n" +
                "				`Employee`.contact,  \n" +
                "				`Employee`.burdenRate,  \n" +
                "				`Employee`.street1,  \n" +
                "				`Employee`.street2,  \n" +
                "				`Employee`.postcode,  \n" +
                "				`Employee`.city,  \n" +
                "				`Employee`.state,  \n" +
                "				`Employee`.countryID,  \n" +
                "				`Employee`.paymentMode,  \n" +
                "				`Employee`.isActive,  \n" +
                "				`Employee`.middleName,  \n" +
                "				`Employee`.lastName,  \n" +
                "				`Employee`.initialName,  \n" +
                "				`Employee`.visibleCode,  \n" +
                "				`Employee`.phExtension,  \n" +
                "				`Employee`.profileImg ,  \n" +
                "				`Employee`.personnelType ,  \n" +
                "				fun_GetFormattedContactPersonName(cp.firstName, cp.middleName, cp.lastName, \",vContPersonNameFormat,\") contactPerson,  \n" +
                "				fun_GetEmployeeFormattedName(Employee.firstName, Employee.middleName, Employee.lastName, Employee.initialName, \",vEmployeeNameFormat,\" ) fullName,  \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(ecp.assignedAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') assignedAt,  \n" +
                "				fun_getUserNameByID(`Employee`.updatedBy) updatedby,  \n" +
                "				fun_getUserNameByID(`Employee`.createdBy) createdby,  \n" +
                "				fun_getRoleByID(`Employee`.createByRoleId) createdbyRole,  \n" +
                "				fun_getRoleByID(`Employee`.updateByRoleId) updatedbyRole,  \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(`Employee`.createdAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') createdAt,  \n" +
                "				fun_ApplyCommonDateTimeFormatByParaValue(`Employee`.UpdatedAt,'\",vTimeZone,\"', '\",vDateTimeDisplayFormat,\"') updatedAt,  \n" +
                "				`user`.`id` AS `userID`,  \n" +
                "				fun_getEmployeeInitialNameByEmpID (`Employee`.`managerID`) AS `managerEmployeeName`,  \n" +
                "				fun_getStatusByValue(`Employee`.`isActive`) AS `isActiveConvertedValue`,  \n" +
                "				fun_getEmployeeCertificationByEmpID(`Employee`.`id`) AS `empCertificationList`,  \n" +
                "				fun_getEmployeeResponsibilitByEmpID (`Employee`.`id`) AS employeeResponsibility,  \n" +
                "                (case when Employee.personnelType = 'P' THEN 'Personal' WHEN Employee.personnelType = 'F' THEN 'Functional' ELSE '' END) userAccountType  \n" +
                "			FROM `employees` AS `Employee`  \n" +
                "				INNER JOIN `users` AS `user` ON `Employee`.`id` = `user`.`employeeID` AND `user`.`isDeleted`=0  \n" +
                "				LEFT JOIN employee_contactperson AS ecp ON  ecp.employeeId = Employee.id and ecp.isDeleted = 0 and ecp.releasedAt Is Null  \n" +
                "				LEFT JOIN contactperson cp ON cp.personId = ecp.contactPersonId and cp.isDeleted = 0  \n" +
                "			WHERE `Employee`.`isDeleted` = 0  \n" +
                "		\");  \n" +
                "  \n" +
                "		IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "			SET pOrderBy = \"ORDER BY firstName ASC\";  \n" +
                "		ELSE  \n" +
                "			SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "  \n" +
                "		IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "			SET pWhereClause = '1=1' ;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "  \n" +
                "		IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
                "			SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
                "			SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "		ELSE  \n" +
                "			SET rowNumWhere = '';  \n" +
                "		END IF;  \n" +
                "  \n" +
                "		/* to get total count of rows */  \n" +
                "		SET @SQLStatement2 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@temp_Sproc_RetrieveEmployee,\" ) c where 1=1 and \", pWhereClause);  \n" +
                "		PREPARE query2 FROM @SQLStatement2;  \n" +
                "		EXECUTE query2;  \n" +
                "		DEALLOCATE PREPARE query2;  \n" +
                "  \n" +
                "		SET @SQLStatement2 = CONCAT(\"select * from ( \", @temp_Sproc_RetrieveEmployee,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "		PREPARE query1 FROM @SQLStatement2;  \n" +
                "		EXECUTE query1;  \n" +
                "		DEALLOCATE PREPARE query1;  \n" +
                "  \n" +
                "  \n" +
                "    END;  \n" +
                /* **************************** New Script -> 16-02-2022 *********************************** */
                "Drop procedure if exists `Sproc_GetCheckPrintAndRemittanceReport`;  \n" +
                "CREATE PROCEDURE `Sproc_GetCheckPrintAndRemittanceReport`(  \n" +
                "	IN pPaymentID INT  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "		SELECT pip.id, pip.accountReference, pip.payToName, pip.paymentDate, pip.paymentNumber,  \n" +
                "				pip.paymentAmount,  \n" +
                "                fun_NumberToWords(pip.paymentAmount) paymentAmountInWords,  \n" +
                "                fun_getAddressbyIDForCheckPrint(pip.payToAddressID, pip.payToContactPersonID) payToAddress,  \n" +
                "				/*pip.payToAddress,  */  \n" +
                "				pip.billToName supplierName,  \n" +
                "                fun_getAddressbyIDForCheckPrint(pip.billToAddressID, pip.billToContactPersonID) supplierAddress,  \n" +
                "                /*pip.billToAddress supplierAddress,*/  \n" +
                "                fun_getPrimaryEmailFromJsonList(cp.email) supplierEmail, fun_getPrimaryFaxFromJsonList(cp.phoneNumber) supplierFaxNumber,  \n" +
                "                pip.bankAccountNo,  \n" +
                "                g.gencCategoryName paymentType  \n" +
                "		  FROM packingslip_invoice_payment pip  \n" +
                "          LEFT JOIN customer_addresses ca ON ca.customerId = pip.mfgcodeID AND ca.isDeleted = 0 AND ca.addressType = 'BU' AND ca.isDefault = 1  \n" +
                "			LEFT JOIN contactperson cp ON ca.customerId=cp.refTransID AND cp.personId = ca.defaultContactPersonID  \n" +
                "          JOIN genericcategory g ON g.categoryType = 'Payable Payment Method' AND g.gencCategoryID = pip.paymentType  \n" +
                "		 WHERE pip.isDeleted = 0  \n" +
                "			AND pip.refPaymentMode = 'P'  \n" +
                "		   AND pip.id = pPaymentID;  \n" +
                "  \n" +
                "		  SELECT pd.refPayementid id,  \n" +
                "				(CASE 	WHEN p.`receiptType` = 'I' THEN  \n" +
                "							p.invoiceNumber  \n" +
                "						WHEN p.`receiptType` = 'C' THEN  \n" +
                "							p.creditMemoNumber  \n" +
                "						ELSE  \n" +
                "							p.debitMemoNumber  \n" +
                "					END) invoiceNumber,  \n" +
                "  \n" +
                "				(CASE 	WHEN p.`receiptType` = 'I' THEN  \n" +
                "							p.invoiceNumber  \n" +
                "				ELSE  \n" +
                "					(SELECT 	ps.invoiceNumber  \n" +
                "					FROM 	packing_slip_material_receive ps  \n" +
                "					WHERE 	ps.id = p.refParentCreditDebitInvoiceno  \n" +
                "							AND ps.isDeleted = 0  )  \n" +
                "				END  \n" +
                "				) refInvoiceNumber,  \n" +
                "  \n" +
                "				(CASE WHEN p.`receiptType` = 'I' THEN  \n" +
                "							p.invoiceDate  \n" +
                "						WHEN p.`receiptType` = 'C' THEN  \n" +
                "							p.creditMemoDate  \n" +
                "						ELSE  \n" +
                "							p.debitMemoDate  \n" +
                "					END) invoiceDate,  \n" +
                "  \n" +
                "				p.remark `description`,  \n" +
                "				/*(select sum(extendedPrice) from  packing_slip_material_receive_det pd where p.id = pd.refPackingSlipMaterialRecID and pd.isDeleted = 0) extendedPrice,*/  \n" +
                "                pd.paymentAmount extendedPrice,  \n" +
                "				0 discount,  \n" +
                "				(CASE 	WHEN p.`receiptType` = 'I' THEN  \n" +
                "							'Invoice'  \n" +
                "						WHEN p.`receiptType` = 'C' THEN  \n" +
                "							'Credit Memo'  \n" +
                "						ELSE  \n" +
                "							'Debit Memo'  \n" +
                "					END) receiptMemoType,  \n" +
                "                    p.poNumber  \n" +
                "			FROM packing_slip_material_receive p  \n" +
                "            JOIN packingslip_invoice_payment_det pd ON pd.refPackingslipInvoiceID = p.id  \n" +
                "			WHERE /*p.isDeleted =0  \n" +
                "			and*/ p.receiptType IN ('I','C','D')  \n" +
                "            AND EXISTS (SELECT 1 FROM packingslip_invoice_payment pip WHERE pip.refPaymentMode = 'P' AND pip.id = pd.refPayementid)  \n" +
                "			/*and p.`status` = 'P'*/  \n" +
                "			AND pd.refPayementid = pPaymentID  \n" +
                "            ORDER BY invoiceDate, invoiceNumber;  \n" +
                "  \n" +
                "        	SELECT CONCAT('<b>',IF(ci.legalName = '' OR ci.legalName IS NULL,'' ,CONCAT(ci.legalName, ' d/b/a,<br/>')),IFNULL(ci.name, ''),'</b><br/>',IFNULL(ci.street1, ''),'<br/>',IFNULL(ci.city, ''),', ',IFNULL(ci.state, ''),' ',IFNULL(ci.postalCode, ''),'<br/>',  \n" +
                "				IFNULL(c.countryName,''))AS address,  \n" +
                "				ci.personName AS companyContactName,ci.registeredEmail AS companyEmail,ci.faxNumber,ci.contactNumber AS phoneNo,ci.phoneExt,ci.contactNumber AS contact, ci.name AS  companyName,ci.registeredEmail AS email  \n" +
                "			FROM company_info ci  \n" +
                "			LEFT JOIN countrymst c ON ci.countryID=c.countryID AND c.isDeleted = 0  \n" +
                "			WHERE ci.isDeleted=0;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 16-02-2022 *********************************** */
                "Drop procedure if exists `Sproc_GetCheckPrintAndRemittanceCustRefundReport`;  \n" +
                "CREATE PROCEDURE `Sproc_GetCheckPrintAndRemittanceCustRefundReport`(  \n" +
                "	IN pPaymentID INT  \n" +
                "    )  \n" +
                "BEGIN  \n" +
                "		/* Refund master details */  \n" +
                "		SELECT pip.id, pip.accountReference,  \n" +
                "			pip.paymentDate, pip.paymentNumber,  \n" +
                "			pip.paymentAmount,  \n" +
                "			fun_NumberToWords(pip.paymentAmount) AS paymentAmountInWords,  \n" +
                "			pip.payToName ,   -- pip.payToAddress,  \n" +
                "			fun_getAddressbyIDForCheckPrint(pip.payToAddressID, pip.payToContactPersonID) AS payToAddress,  \n" +
                "			 pip.billToName AS customerName,  \n" +
                "			 -- pip.billToAddress AS customerAddress,  \n" +
                "			fun_getAddressbyIDForCheckPrint(pip.billToAddressID, pip.billToContactPersonID) AS customerAddress,  \n" +
                "			-- ca.email AS customerEmail, ca.faxNumber AS customerFaxNumber,  \n" +
                "			fun_getPrimaryEmailFromJsonList(cp.email) AS customerEmail ,  \n" +
                "			#cp.faxNumber AS customerFaxNumber ,  \n" +
                "			fun_getPrimaryFaxFromJsonList(cp.phoneNumber) AS customerFaxNumber ,  \n" +
                "			pip.bankAccountNo, pip.refGencTransModeID,  \n" +
                "			g.gencCategoryName AS paymentType ,  \n" +
                "			pip.remark  \n" +
                "		FROM packingslip_invoice_payment pip  \n" +
                "			-- LEFT JOIN customer_addresses ca ON ca.customerId = pip.mfgcodeID AND ca.isDeleted = 0 AND ca.addressType = 'B' AND ca.isDefault = 1  \n" +
                "			LEFT JOIN contactperson cp ON cp.personId = pip.billToContactPersonID AND cp.isDeleted = 0  \n" +
                "			JOIN genericcategory g ON g.categoryType = 'Payable Payment Method' AND g.gencCategoryID = pip.paymentType  \n" +
                "		WHERE pip.id = pPaymentID  \n" +
                "		AND pip.refPaymentMode = 'CR'  \n" +
                "		AND pip.isDeleted = 0  ;  \n" +
                "  \n" +
                "		/* get refunded payment or refunded credit memo details */  \n" +
                "		SELECT  \n" +
                "		       (CASE WHEN(refGencTransModeID = -6) THEN cmRefundDetTemp.creditMemoNumber  \n" +
                "				WHEN(refGencTransModeID = -9) THEN payRefundDetTemp.paymentNumber  \n" +
                "				ELSE NULL END) AS paymentCMNumber ,  \n" +
                "			(CASE WHEN(refGencTransModeID = -6) THEN cmRefundDetTemp.creditMemoDate  \n" +
                "				WHEN(refGencTransModeID = -9) THEN payRefundDetTemp.paymentDate  \n" +
                "				ELSE NULL END) AS paymentCMDate ,  \n" +
                "			(CASE WHEN(refGencTransModeID = -6) THEN cmRefundDetTemp.paymentAmount  \n" +
                "				WHEN(refGencTransModeID = -9) THEN payRefundDetTemp.paymentAmount  \n" +
                "				ELSE NULL END) AS refundedAmountForPaymentCM ,  \n" +
                "			(CASE WHEN(refGencTransModeID = -6) THEN cmRefundDetTemp.comment  \n" +
                "				WHEN(refGencTransModeID = -9) THEN payRefundDetTemp.comment  \n" +
                "				ELSE NULL END) AS commentForPaymentCM  \n" +
                "  \n" +
                "		FROM packingslip_invoice_payment psip  \n" +
                "		     LEFT JOIN (SELECT psipd.refPayementid, psipd.paymentAmount, psipd.comment, psipt.paymentNumber, psipt.paymentDate  \n" +
                "					FROM packingslip_invoice_payment_det psipd  \n" +
                "						JOIN packingslip_invoice_payment psipt ON psipd.refRefundPaymentID = psipt.id AND psipt.isDeleted = 0 AND psipt.isPaymentVoided = 0  \n" +
                "					WHERE psipd.refPayementid = pPaymentID  \n" +
                "					AND psipd.refRefundPaymentID IS NOT NULL  \n" +
                "					AND psipd.isDeleted = 0  AND psipd.isPaymentVoided = 0  \n" +
                "					 ) payRefundDetTemp  \n" +
                "				ON psip.id = payRefundDetTemp.refPayementid  \n" +
                "  \n" +
                "		     LEFT JOIN (SELECT psipd.refPayementid, psipd.paymentAmount ,psipd.comment, cps.creditMemoNumber, cps.creditMemoDate  \n" +
                "					 FROM packingslip_invoice_payment_det psipd  \n" +
                "						JOIN customer_packingslip cps ON psipd.refRefundCustCreditMemoID = cps.id AND cps.isDeleted = 0  \n" +
                "					WHERE psipd.refPayementid = pPaymentID  \n" +
                "					AND psipd.refRefundCustCreditMemoID IS NOT NULL  \n" +
                "					AND psipd.isDeleted = 0  AND psipd.isPaymentVoided = 0  \n" +
                "					) cmRefundDetTemp  \n" +
                "				ON psip.id = cmRefundDetTemp.refPayementid  \n" +
                "  \n" +
                "		WHERE psip.id = pPaymentID  \n" +
                "		AND psip.refPaymentMode = 'CR'  \n" +
                "		AND psip.isDeleted = 0  ;  \n" +
                "  \n" +
                "		/* Default set company (isCompany = 1) address details  */  \n" +
                "		SELECT CONCAT('<b>', IF(ci.legalName = '' OR ci.legalName IS NULL,'' ,CONCAT(ci.legalName, ' d/b/a,<br/>')),IFNULL(ci.name, ''),'</b><br/>',IFNULL(ci.street1, ''),'<br/>',IFNULL(ci.city, ''),', ',IFNULL(ci.state, ''),' ',IFNULL(ci.postalCode, ''),'<br/>',  \n" +
                "			IFNULL(c.countryName,''))AS address,  \n" +
                "			ci.personName AS companyContactName,ci.registeredEmail AS companyEmail,ci.faxNumber,ci.contactNumber AS phoneNo,ci.phoneExt,ci.contactNumber AS contact, ci.name AS  companyName, ci.registeredEmail AS email  \n" +
                "		FROM company_info ci  \n" +
                "		LEFT JOIN countrymst c ON ci.countryID=c.countryID AND c.isDeleted = 0  \n" +
                "		WHERE ci.isDeleted=0;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 16-02-2022 *********************************** */
                "Drop procedure if exists `Sproc_Uti_SetFirstFaxAsPrimaryContactPerson`;  \n" +
                "CREATE PROCEDURE `Sproc_Uti_SetFirstFaxAsPrimaryContactPerson`( )  \n" +
                "BEGIN  \n" +
                "    DECLARE n INT DEFAULT 0;  \n" +
                "	DECLARE i INT DEFAULT 0;  \n" +
                "  \n" +
                "	Drop temporary table if exists contTemp;  \n" +
                "	Create temporary table if not exists contTemp as (select cp.personId,  \n" +
                "		(select case when count(a.id) = 1 then null else (  \n" +
                "			select tbl.id from (select ROW_NUMBER() over() as id , jsonTblPhone.* from JSON_TABLE  \n" +
                "						(cp.phoneNumber, '$[*]' COLUMNS (phone VARCHAR(40)  PATH '$.phone', category VARCHAR(40)  PATH '$.category', isPrimary VARCHAR(40)  PATH '$.isPrimary')  \n" +
                "						) jsonTblPhone) tbl where (tbl.category = 'Work Fax'  and tbl.isPrimary = 'false') limit 1  \n" +
                "		) END from (  \n" +
                "			select ROW_NUMBER() over() as id ,jsonTblPhone.category,jsonTblPhone.isPrimary   from JSON_TABLE  \n" +
                "				(cp.phoneNumber, '$[*]' COLUMNS  \n" +
                "					(phone VARCHAR(40)  PATH '$.phone', category VARCHAR(40)  PATH '$.category', isPrimary VARCHAR(40)  PATH '$.isPrimary')  \n" +
                "				) jsonTblPhone where (jsonTblPhone.category = 'Work Fax'  and jsonTblPhone.isPrimary = 'true') limit 1  \n" +
                "		) a ) jsonPosition from contactperson cp where cp.isDeleted = false and cp.phoneNumber is not null);  \n" +
                "  \n" +
                "	select count(1) as needToUpdateRecordCount from contTemp where jsonPosition is not null;  \n" +
                "  \n" +
                "    if(exists(select 1 from contTemp where jsonPosition is not null)) then  \n" +
                "		SELECT COUNT(*) FROM contTemp INTO n;  \n" +
                "		SET i=0;  \n" +
                "		WHILE i<n DO  \n" +
                "			select jsonPosition,personId into @jsonPosition,@personId from ContTemp  limit 1 offset i;  \n" +
                "			if(@jsonPosition is not null) THEN  \n" +
                "				set @SQLStatement = CONCAT(\"Update contactperson cp  SET  cp.phoneNumber = JSON_SET(cp.phoneNumber,'$[\",(@jsonPosition -1),\"].isPrimary', TRUE)  \n" +
                "					where cp.personId = \",@personId,\";\");  \n" +
                "  \n" +
                "				PREPARE query1 FROM @SQLStatement;  \n" +
                "				EXECUTE query1;  \n" +
                "				DEALLOCATE PREPARE query1;  \n" +
                "			END IF;  \n" +
                "			SET i = i + 1;  \n" +
                "		END WHILE;  \n" +
                "	END IF;  \n" +
                "END;  \n" +
                /* **************************** New Script -> 16-02-2022 *********************************** */
                /* **************************** Add Script Version -> 16-02-2022 *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1372,'1.00','V1',' User Story 41763: [Main Branch] - Contact person and Primary Contact Person changes suggested by client - 28/02/2022 - Bhavik '," + userid + " , '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1372:
            allDbChangesArray.push(
                /* **************************** New Script -> 21-03-2021  *********************************** */
                "DROP procedure IF EXISTS `Sproc_GetBOMCleanOrUpdatePMProcessPercentage`;  \n" +
                "CREATE PROCEDURE `Sproc_GetBOMCleanOrUpdatePMProcessPercentage`(  \n" +
                "	IN pPartID INT,  \n" +
                "    IN ptransactionID VARCHAR(50),  \n" +
                "    IN pType VARCHAR(50)  \n" +
                ")  \n" +
                "BEGIN  \n" +
                "	DECLARE totalParts INT(11);  \n" +
                "	DECLARE percentage INT;  \n" +
                "	DECLARE remainingParts INT(11);  \n" +
                "	DECLARE remainTime INT(11);  \n" +
                "    DECLARE remainTimeDiff INT;  \n" +
                "    set remainTimeDiff = 6;  \n" +
                "  \n" +
                "	IF(pType ='FJTV3-ScheduleForPartUpdate')  \n" +
                "    THEN  \n" +
                "		IF(ptransactionID IS NULL)THEN  \n" +
                "			SELECT transactionID INTO ptransactionID FROM external_partverificationrequest_log WHERE `type`=ptype ORDER BY id DESC LIMIT 1;  \n" +
                "		END IF;  \n" +
                "  \n" +
                "	  SELECT COUNT(DISTINCT(partId)) INTO totalParts FROM external_partverificationrequest_log WHERE `type`=ptype AND transactionID=ptransactionID;  \n" +
                "	  SELECT  COUNT(DISTINCT(partId)) INTO remainingParts   FROM external_partverificationrequest_log WHERE  `type`=ptype AND transactionID=ptransactionID AND partStatus=0;  \n" +
                "	  SELECT  (COUNT(1) * remainTimeDiff) INTO  remainTime   FROM external_partverificationrequest_log WHERE  `type`=ptype AND transactionID=ptransactionID AND partStatus=0;  \n" +
                "    ELSE  \n" +
                "		SELECT (  \n" +
                "				 ((SELECT  COUNT(DISTINCT(partnumber)) FROM external_partverificationrequest_log as p WHERE p.partid=pPartID  \n" +
                "						and   IFNULL(p.transactionID, 0) = IFNULL(ptransactionID, 0) AND p.`type`='FJTV3-CleanBOM')-  \n" +
                "				 (SELECT  COUNT(DISTINCT(partnumber)) FROM external_partverificationrequest_log as e WHERE e.partid=pPartID AND e.`type`='FJTV3-CleanBOM' AND e.partStatus=0  \n" +
                "					and IFNULL(e.transactionID ,0)= IFNULL(ptransactionID, 0))  \n" +
                "				) *100/  \n" +
                "				(SELECT  COUNT(DISTINCT(partnumber)) FROM external_partverificationrequest_log as l WHERE l.partid=pPartID AND l.`type`='FJTV3-CleanBOM'  \n" +
                "					and IFNULL(l.transactionID, 0) = IFNULL(ptransactionID, 0))  \n" +
                "		)  INTO percentage;  \n" +
                "		 SELECT  (COUNT(1) * remainTimeDiff) INTO  remainTime   FROM external_partverificationrequest_log WHERE  `type`='FJTV3-CleanBOM' AND partid=pPartID AND partStatus=0  \n" +
                "		 and IFNULL(transactionID,0) = IFNULL(ptransactionID, 0);  \n" +
                "     END IF;  \n" +
                "     select totalParts,remainingParts,percentage,remainTime;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version ->  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1373,'1.00','V1',' Bug 42326: [Main Branch]: QA Testing findings for User Story 40461: Part Master Improvement Points - Jan 2022 - SHUBHAM '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
        case 1373:
            allDbChangesArray.push(
                /* **************************** New Script -> 22-03-2022 *********************************** */
                "DROP PROCEDURE IF EXISTS Sproc_GetAssemblyWOStockDetails;  \n" +
                "CREATE PROCEDURE `Sproc_GetAssemblyWOStockDetails`(  \n" +
                "	IN ppageIndex INT,  \n" +
                "	IN pRecordPerPage INT,  \n" +
                "	IN pOrderBy VARCHAR(255),  \n" +
                "	IN pWhereClause VARCHAR(16383),  \n" +
                "	IN pPartID INT,  \n" +
                "	IN pWoID INT ,  \n" +
                "    IN pPONumber VARCHAR(255),  \n" +
                "    IN pIsShowAllWO TINYINT,  \n" +
                "    IN pSONumber VARCHAR(255))  \n" +
                "BEGIN  \n" +
                "	DECLARE pOffset INT;  \n" +
                "	DECLARE rowNumWhere VARCHAR(255) ;  \n" +
                "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
                "	DECLARE v_TimeZone VARCHAR(50);  \n" +
                "	DECLARE whereClause1 VARCHAR(500);  \n" +
                "	SET whereClause1 = \"where 1=1\";  \n" +
                "  \n" +
                "    IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
                "		SET pWhereClause = '1=1' ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
                "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
                "  \n" +
                "    IF pPartID IS NOT NULL THEN  \n" +
                "		SET whereClause1 = CONCAT(whereClause1,\" AND PartID = \", pPartID);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF pWoID IS NOT NULL THEN  \n" +
                "		SET whereClause1 = CONCAT(whereClause1,\" AND vu_wss.woID = \", pWoID);  \n" +
                "	END IF;  \n" +
                "  \n" +
                "    IF (pPONumber IS NOT NULL) THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND c.poNumber like \"%' ,pPONumber,'%\" and c.soNumbers like \"%' ,pSONumber,'%\" ' );  \n" +
                "	END IF;  \n" +
                "  \n" +
                "     IF (pIsShowAllWO = FALSE)  THEN  \n" +
                "		SET pWhereClause = CONCAT(pWhereClause, ' AND remaningtotalQty > 0 ');  \n" +
                "    END IF;  \n" +
                "  \n" +
                "	SET @Sproc_GetAssemblyWOStockDetails = CONCAT(\"SELECT vu_wss.* ,  \n" +
                "						(vu_wss.readytoShipQty + vu_wss.shippedQty) AS movedToStockQty ,  \n" +
                "						vu_wosod.totalPOQty, vu_wosod.POQtyValues soPOQty,  \n" +
                "						 vu_wosod.totalMRPQty, vu_wosod.MRPQtyValues soMRPQty,  \n" +
                "                         (CASE WHEN vu_wss.woid IS NULL THEN vu_wss.initialStockPoQty ELSE vu_wss.poQty END) AS initialWOStockPOQty ,  \n" +
                "						 (CASE WHEN vu_wss.woid IS NULL THEN  \n" +
                "							(select group_concat(poNumberList SEPARATOR ',') FROM (  \n" +
                "								SELECT (case when refSalesOrderID is Null then GROUP_CONCAT(DISTINCT poNumber SEPARATOR ', ')  \n" +
                "								else GROUP_CONCAT(DISTINCT poNumber,'#####',refSalesOrderID  SEPARATOR '@@@@@') end	) poNumberList  \n" +
                "								 FROM `assemblystock`  \n" +
                "								 WHERE woNumber = vu_wss.woNumber AND isDeleted = 0 AND `type` = 'OS' and partID = vu_wss.partID  \n" +
                "								 GROUP BY refSalesOrderID, poNumber) a)  \n" +
                "							ELSE (CASE WHEN wo.isRevisedWO = 0 THEN  vu_wosod.poNumber ELSE parentSaleDtl.poNumber END)  \n" +
                "						   END) poNumber,  \n" +
                "						 (CASE WHEN vu_wss.woid IS NULL THEN  \n" +
                "							(select group_concat(if(soNumberList='',null,soNumberList) SEPARATOR ',') FROM (  \n" +
                "								SELECT (case when refSalesOrderID is Null then GROUP_CONCAT(DISTINCT soNumber SEPARATOR ', ')  \n" +
                "									 else GROUP_CONCAT(DISTINCT soNumber,'#####',refSalesOrderID  SEPARATOR '@@@@@') end)  soNumberList  \n" +
                "									FROM `assemblystock`  \n" +
                "									WHERE woNumber = vu_wss.woNumber AND isDeleted = 0 AND `type` = 'OS' and partID = vu_wss.partID  \n" +
                "								 GROUP BY refSalesOrderID, soNumber) a)  \n" +
                "							ELSE (CASE WHEN wo.isRevisedWO = 0 THEN  vu_wosod.salesOrderNumber ELSE parentSaleDtl.salesOrderNumber END)  \n" +
                "                            END) soNumbers,  \n" +
                "						vu_wosod.lineID, vu_wosod.salesOrderMstIDs, vu_wosod.SOPOQtyValues ,  \n" +
                "						(CASE WHEN vu_wss.woid IS NULL THEN 'Initial Stock' ELSE 'Work Order Stock' END) AS stockTypeName ,  \n" +
                "                        (CASE WHEN vu_wss.woid IS NULL THEN vu_wss.stockAdjustmentQty ELSE ((vu_wss.buildQty - vu_wss.scrapQty - vu_wss.poQty) + vu_wss.stockAdjustmentQty) END) AS excessFreetoUseQty,  \n" +
                "                        (CASE WHEN vu_wss.woid IS NULL THEN ((vu_wss.readytoShipQty + vu_wss.shippedQty + vu_wss.stockAdjustmentQty) - (vu_wss.shippedQty)) ELSE ((vu_wss.buildQty) - (vu_wss.scrapQty + vu_wss.shippedQty + vu_wss.readytoShipQty)) END) AS remaningtotalQty  ,  \n" +
                "                        (CASE WHEN (CASE WHEN vu_wss.woid IS NULL THEN ((vu_wss.readytoShipQty + vu_wss.shippedQty + vu_wss.stockAdjustmentQty) - (vu_wss.shippedQty)) ELSE ((vu_wss.buildQty) - (vu_wss.scrapQty + vu_wss.shippedQty + vu_wss.readytoShipQty)) END) = 0 THEN 'Completed' ELSE '' END) workOrderStatus  \n" +
                "					FROM vu_workorder_summary_stk vu_wss  \n" +
                "						LEFT JOIN (SELECT woID AS woMstID, terminateWOID, isRevisedWO FROM workorder WHERE deletedAt IS NULL) AS wo  \n" +
                "								ON vu_wss.woid = wo.woMstID  \n" +
                "						LEFT JOIN vu_workorder_salesorder_details vu_wosod ON vu_wss.woid =  vu_wosod.woID  \n" +
                "						LEFT JOIN vu_workorder_salesorder_details parentSaleDtl ON wo.terminateWOID = parentSaleDtl.woID  \n" +
                "					\", whereClause1);  \n" +
                "  \n" +
                "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY woid ASC\");  \n" +
                "	ELSE  \n" +
                "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	IF(ppageIndex <> 0 AND pRecordPerPage <> 0) THEN  \n" +
                "		SET pOffset = (ppageIndex -1) * pRecordPerPage;  \n" +
                "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
                "	ELSE  \n" +
                "		SET rowNumWhere = '';  \n" +
                "	END IF;  \n" +
                "  \n" +
                "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@Sproc_GetAssemblyWOStockDetails,\" ) c where 1=1 and \", pWhereClause);  \n" +
                "	PREPARE query1 FROM @SQLStatement1;  \n" +
                "	EXECUTE query1;  \n" +
                "	DEALLOCATE PREPARE query1;  \n" +
                "	SET @SQLStatement2 = CONCAT(\"select c.*  from ( \", @Sproc_GetAssemblyWOStockDetails,\" ) c where \" , pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
                "    PREPARE query2 FROM @SQLStatement2;  \n" +
                "	EXECUTE query2;  \n" +
                "	DEALLOCATE PREPARE query2;  \n" +
                "END;  \n" +
                /* **************************** Add Script Version -> 22-03-2022  *********************************** */
                "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
                "VALUES (1374,'1.00','V1','Sproc_GetAssemblyWOStockDetails - Shweta '," + userid + ", '" + requiredDet.ipAddress + "');"
            );
            break;
            case 1374:
             allDbChangesArray.push(
             /* **************************** New Script -> 25-03-2021  *********************************** */
             "ALTER TABLE customer_addresses  \n" +
             "ADD COLUMN defaultIntermediateAddressID INT  ;  \n" +
             "  \n" +
             "ALTER TABLE `customer_addresses`  \n" +
             "ADD CONSTRAINT FK_customer_addresses_defaultIntermediateAddressID  \n" +
             "FOREIGN KEY (defaultIntermediateAddressID) REFERENCES `customer_addresses`(id) ;  \n" +
             "  \n" +
             "  \n" +
             "ALTER TABLE customer_addresses  \n" +
             "ADD COLUMN defaultIntermediateContactPersonID INT  ;  \n" +
             "  \n" +
             "ALTER TABLE `customer_addresses`  \n" +
             "ADD CONSTRAINT FK_customer_addresses_defaultIntermediateContactPersonID  \n" +
             "FOREIGN KEY (defaultIntermediateContactPersonID) REFERENCES `contactperson`(personId) ;  \n" +
             /* **************************** Add Script Version ->  *********************************** */
             "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
             "VALUES (1375,'1.00','V1',' #41484 add new column entry - KETAN '," + userid + ", '" + requiredDet.ipAddress + "');"
             );
            break;
            case 1375:
             allDbChangesArray.push(
             /* *************************** New Script -> 25-03-2021  *********************************** */
             "INSERT INTO `page_detail`  \n" +
             "     (`pageName`, `RO`, `RW`, `pageRoute`, `pageURL`, `menuName`, `parentPageID`, `hasChild`,  `isActive`,  \n" +
             "              `createdAt`, `updatedAt`, `createdBy`, `updatedBy` ,`isDeleted`, `isDisplay`, `displayMenuName`,`iconClass` ,  \n" +
             "              `createByRoleId`, `updateByRoleId`)  \n" +
             " VALUES ('Manage Supplier Wire Transfer Addresses', 0, 0, 'app.supplier.managesupplier.wiretransferaddresses', '/wiretransferaddresses/:customerType/:cid',  \n" +
             "         'Manage Supplier Wire Transfer Addresses', (SELECT a.pageID FROM page_detail a WHERE a.pageName='Manage Supplier'),  0, 1,  \n" +
             "           fun_DatetimetoUTCDateTime(), fun_DatetimetoUTCDateTime(), '1' , '1' , 0, 1, 'Supplier','t-icons-supplier add-icon',  \n" +
             "           1, 1) ;  \n" +
             /* **************************** New Script -> 25-03-2021  *********************************** */
             "CALL Sproc_giveRightToChildPage('Manage Supplier Wire Transfer Addresses');  \n" +
             /* **************************** Add Script Version ->  *********************************** */
             "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
             "VALUES (1376,'1.00','V1',' #41484 add new page detail entry for wire transfer address - KETAN '," + userid + ", '" + requiredDet.ipAddress + "');"
             );
            break;
            case 1376:
             allDbChangesArray.push(
             /* **************************** New Script -> 25-03-2021  *********************************** */
             "INSERT INTO customer_addresses (`customerId`,`street1`,`street2`,`city`,`state`,  \n" +
             "		`countryID`,`postcode`,`addressType`,`isDefault`, `street3`,  \n" +
             "		`companyName`, `systemGenerated`, `bankRemitToName`, `latitude`, `longitude`,  \n" +
             "		`additionalComment`, `defaultContactPersonID`, `isActive`, `copyFromShipToAddrMstID`,  \n" +
             "		`createdBy`,`updatedBy`,`createByRoleId`,`updateByRoleId`,`createdAt`,`updatedAt`)  \n" +
             "SELECT `customerId`,`street1`,`street2`,`city`,`state`,  \n" +
             "		`countryID`,`postcode`,'RI',`isDefault`, `street3`,  \n" +
             "		`companyName`, `systemGenerated`, `bankRemitToName`, `latitude`, `longitude`,  \n" +
             "		`additionalComment`, `defaultContactPersonID`, `isActive`, `id` ,  \n" +
             "		1, 1, 1, 1, fun_DatetimetoUTCDateTime(), fun_DatetimetoUTCDateTime()  \n" +
             "FROM customer_addresses  \n" +
             "WHERE id IN (  \n" +
             "		SELECT rmaMarkForAddressId FROM `packing_slip_material_receive` WHERE rmaMarkForAddressId IS NOT NULL  \n" +
             "	    )  \n" +
             "   ;  \n" +
             /* **************************** Add Script Version ->  *********************************** */
             "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
             "VALUES (1377,'1.00','V1',' #41484 from transaction wire transfer address entry into master - KETAN '," + userid + ", '" + requiredDet.ipAddress + "');"
             );
            break;
            case 1377:
             allDbChangesArray.push(
             /* **************************** New Script -> 25-03-2021  *********************************** */
             "DROP PROCEDURE IF EXISTS `Sproc_checkDelete_customer_addresses` ;  \n" +
             "CREATE PROCEDURE `Sproc_checkDelete_customer_addresses`(  \n" +
             "	IN tableName VARCHAR(255),  \n" +
             "	IN IDs LONGTEXT,  \n" +
             "	IN deletedBy INT,  \n" +
             "	IN entityID VARCHAR(255),  \n" +
             "	IN refrenceIDs LONGTEXT,  \n" +
             "	IN countList INT,  \n" +
             "	IN pRoleID INT  \n" +
             "    )  \n" +
             "BEGIN  \n" +
             "  \n" +
             "SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempcustomer_addresses as  \n" +
             "  \n" +
             "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"salesordermst\" else \"\" end as msg FROM salesordermst WHERE isDeleted = 0  \n" +
             "				AND (billingAddressID IN (',IDs,') OR shippingAddressID IN (',IDs,') OR intermediateShipmentId IN (',IDs,')) LIMIT 1)  \n" +
             "			UNION ALL  \n" +
             "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"salesshippingmst\" else \"\" end as msg FROM salesshippingmst WHERE isDeleted = 0  \n" +
             "				AND (shippingAddressID IN (',IDs,')) LIMIT 1)  \n" +
             "			UNION ALL  \n" +
             "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"rfq_assemblies\" else \"\" end as msg FROM rfq_assemblies_quotation_submitted WHERE isDeleted = 0  \n" +
             "				AND (custShippingAddressID IN (',IDs,') OR custBillingAddressID IN (',IDs,')) LIMIT 1)  \n" +
             "			UNION ALL  \n" +
             "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"supplier_payment\" else \"\" end as msg FROM packingslip_invoice_payment WHERE refPaymentMode = \"P\"  \n" +
             "				AND (billToAddressID IN (',IDs,') OR  payToAddressID IN (',IDs,')) AND isDeleted = 0 LIMIT 1)  \n" +
             "			UNION ALL  \n" +
             "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"packingslip_invoice_payment_cust_refund\" else \"\" end as msg FROM packingslip_invoice_payment WHERE refPaymentMode = \"CR\"  \n" +
             "				AND (billToAddressID IN (',IDs,') OR  payToAddressID IN (',IDs,')) AND isDeleted = 0 LIMIT 1)  \n" +
             "			UNION ALL  \n" +
             "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"packing_slip_material_receive_det_debit_memo\" else \"\" end as msg FROM packing_slip_material_receive WHERE receiptType = \"D\"  \n" +
             "				AND (billToAddressID IN (',IDs,')) AND isDeleted = 0 LIMIT 1)  \n" +
             "			UNION ALL  \n" +
             "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"packing_slip_material_receive_det_supplier_rma\" else \"\" end as msg FROM packing_slip_material_receive WHERE receiptType = \"R\"  \n" +
             "				AND (rmaShippingAddressId IN (',IDs,') OR rmaMarkForAddressId IN (',IDs,')) AND isDeleted = 0 LIMIT 1)  \n" +
             "			UNION ALL  \n" +
             "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"purchase_order_line_release_det\" else \"\" end as msg FROM purchase_order_line_release_det WHERE isDeleted = 0  \n" +
             "				AND (shippingAddressID IN (',IDs,')) LIMIT 1)  \n" +
             "			UNION ALL  \n" +
             "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"purchase_order_mst\" else \"\" end as msg FROM purchase_order_mst WHERE isDeleted = 0  \n" +
             "				AND (supplierAddressID IN (',IDs,') OR shippingAddressID IN (',IDs,') OR intermediateShipmentID IN (',IDs,')) LIMIT 1)  \n" +
             "			UNION ALL  \n" +
             "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"supplier_quote_mst\" else \"\" end as msg FROM supplier_quote_mst WHERE isDeleted = 0  \n" +
             "				AND (shippingAddressID IN (',IDs,') OR billingAddressID IN (',IDs,')) LIMIT 1)  \n" +
             "			UNION ALL  \n" +
             "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"customer_addresses\" else \"\" end as msg FROM customer_addresses WHERE isDeleted = 0  \n" +
             "				AND (defaultIntermediateAddressID IN (',IDs,')) LIMIT 1)  \n" +
             "  \n" +
             "		    ');  \n" +
             "  \n" +
             "	/* (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"rfqforms\" else \"\" end as msg FROM rfqforms WHERE deletedAt IS NULL AND custShippingAddID IN(',IDs,') LIMIT 1)  \n" +
             "			UNION ALL  \n" +
             "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"rfqforms\" else \"\" end as msg FROM rfqforms WHERE deletedAt IS NULL AND custBillingAddID IN (',IDs,') LIMIT 1)  \n" +
             "			UNION ALL  \n" +
             "			 (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"salesordermst\" else \"\" end as msg FROM salesordermst WHERE deletedAt IS NULL AND billingAddressID IN (',IDs,') LIMIT 1)  \n" +
             "			UNION ALL  \n" +
             "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"salesordermst\" else \"\" end as msg FROM salesordermst WHERE deletedAt IS NULL AND shippingAddressID IN (',IDs,') LIMIT 1)  */  \n" +
             "  \n" +
             "	PREPARE stmt FROM @SQL;  \n" +
             "	EXECUTE stmt;  \n" +
             "	IF (countList=FALSE) THEN  \n" +
             "		IF (SELECT SUM(t.cnt) FROM tempcustomer_addresses t)=0 THEN  \n" +
             "			/* check any record is - isDefault from delete list */  \n" +
             "			DROP TEMPORARY TABLE IF EXISTS temp_SetIsDefaultAddrList ;  \n" +
             "			CREATE TEMPORARY TABLE temp_SetIsDefaultAddrList AS  \n" +
             "				SELECT customerId, addressType  \n" +
             "				FROM customer_addresses  \n" +
             "				WHERE FIND_IN_SET(id, IDs)  \n" +
             "				AND isDefault = 1 AND isDeleted = 0 ;  \n" +
             "  \n" +
             "			SET @SQl1 = CONCAT('update customer_addresses set isDeleted=',1,',deletedBy=',deletedBy,', deleteByRoleId = ',pRoleID,', deletedAt=\"',fun_DatetimetoUTCDateTime(),'\" where id IN(',IDs,') and deletedAt is NULL');  \n" +
             "			PREPARE stmt1 FROM @SQL1;  \n" +
             "			EXECUTE stmt1;  \n" +
             "			DEALLOCATE PREPARE stmt1;  \n" +
             "  \n" +
             "			/* if any record is - isDefault from delete list then apply new isDefault */  \n" +
             "			 IF (EXISTS (SELECT 1 FROM temp_SetIsDefaultAddrList)) THEN  \n" +
             "				DROP TEMPORARY TABLE IF EXISTS temp_NewDefaultAddrIdList;  \n" +
             "				CREATE TEMPORARY TABLE temp_NewDefaultAddrIdList AS  \n" +
             "					(SELECT MIN(ca.id) addrMstId  \n" +
             "					  FROM customer_addresses ca  \n" +
             "					WHERE EXISTS (  \n" +
             "							SELECT 1 FROM temp_SetIsDefaultAddrList tmca  \n" +
             "							WHERE tmca.customerId = ca.customerId  \n" +
             "							AND tmca.addressType = ca.addressType  \n" +
             "							)  \n" +
             "					AND ca.isActive = 1  \n" +
             "					AND ca.isDeleted = 0  \n" +
             "					GROUP BY ca.customerId  \n" +
             "					);  \n" +
             "  \n" +
             "				UPDATE customer_addresses  \n" +
             "				SET isDefault = 1 , updatedBy = deletedBy,  updateByRoleId = pRoleID, updatedAt = fun_DatetimetoUTCDateTime()  \n" +
             "				WHERE id IN (SELECT addrMstId FROM temp_NewDefaultAddrIdList);  \n" +
             "  \n" +
             "				DROP TEMPORARY TABLE IF EXISTS temp_NewDefaultAddrIdList;  \n" +
             "			END IF;  \n" +
             "  \n" +
             "			SELECT * FROM tempcustomer_addresses WHERE IFNULL(cnt,0) > 0 AND msg IS NOT NULL AND msg != \"\";  \n" +
             "		ELSE  \n" +
             "			SELECT SUM(t.cnt) AS TotalCount, GROUP_CONCAT(t.msg SEPARATOR ',') AS Message FROM tempcustomer_addresses t;  \n" +
             "  \n" +
             "		END IF;  \n" +
             "	ELSE  \n" +
             "		SELECT SUM(t1.cnt) AS cnt,t2.display_page_name AS msg  \n" +
             "                FROM tempcustomer_addresses t1  \n" +
             "                   INNER JOIN table_mapping_details t2 ON t1.msg=t2.tabel_name  \n" +
             "                WHERE IFNULL(cnt,0) > 0 AND msg IS NOT NULL AND msg != \"\"  \n" +
             "		GROUP BY t2.display_page_name  \n" +
             "                ORDER BY t2.display_page_name  \n" +
             "                 ;  \n" +
             "	END IF;  \n" +
             "	DROP TEMPORARY TABLE tempcustomer_addresses;  \n" +
             "END;  \n" +
             /* **************************** New Script -> 25-03-2021  *********************************** */
             "DROP PROCEDURE IF EXISTS `Sproc_checkDelete_contactperson` ;  \n" +
             "CREATE PROCEDURE `Sproc_checkDelete_contactperson`(  \n" +
             "	IN tableName VARCHAR(255),  \n" +
             "	IN IDs LONGTEXT,  \n" +
             "	IN deletedBy INT,  \n" +
             "	IN entityID VARCHAR(255),  \n" +
             "	IN refrenceIDs LONGTEXT,  \n" +
             "	IN countList INT,  \n" +
             "    IN pRoleID INT  \n" +
             "    )  \n" +
             "BEGIN  \n" +
             "DROP TEMPORARY TABLE IF EXISTS tempContactperson;  \n" +
             "	SET @SQL = CONCAT('CREATE TEMPORARY TABLE if not exists tempContactperson as  \n" +
             "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"contactperson\" else \"\" end as msg FROM employee_contactperson WHERE contactPersonId IN (',IDs,') AND isDeleted = 0 LIMIT 1)  \n" +
             "		UNION ALL  \n" +
             "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"packing_slip_material_receive_det_supplier_rma\" else \"\" end as msg FROM packing_slip_material_receive WHERE receiptType = \"R\" AND (rmaShippingContactPersonID IN (',IDs,') OR rmaMarkForContactPersonID IN (',IDs,')) AND isDeleted = 0 LIMIT 1)  \n" +
             "		UNION ALL  \n" +
             "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"packing_slip_material_receive_det_debit_memo\" else \"\" end as msg FROM packing_slip_material_receive WHERE receiptType = \"D\" AND billToContactPersonID IN (',IDs,') AND isDeleted = 0 LIMIT 1)  \n" +
             "		UNION ALL  \n" +
             "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"packingslip_invoice_payment_cust_refund\" else \"\" end as msg FROM packingslip_invoice_payment  WHERE (billToContactPersonID IN (',IDs,') OR payToContactPersonID IN (',IDs,')) AND refPaymentMode = \"CR\" AND isDeleted = 0 LIMIT 1)  \n" +
             "		UNION ALL  \n" +
             "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"customer_packingslip\" else \"\" end as msg FROM customer_packingslip WHERE transType = \"P\" AND (billingContactPersonID IN (',IDs,') OR shippingContactPersonID IN (',IDs,') OR intermediateContactPersonID IN (',IDs,')) AND isDeleted = 0 LIMIT 1)  \n" +
             "		UNION ALL  \n" +
             "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"customer_packingslip_invoice\" else \"\" end as msg FROM customer_packingslip WHERE transType = \"I\" AND (billingContactPersonID IN (',IDs,') OR shippingContactPersonID IN (',IDs,') OR intermediateContactPersonID IN (',IDs,')) AND isDeleted = 0 LIMIT 1)  \n" +
             "		UNION ALL  \n" +
             "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"customer_packingslip_creditmemo\" else \"\" end as msg FROM customer_packingslip WHERE transType = \"C\" AND (billingContactPersonID IN (',IDs,') OR shippingContactPersonID IN (',IDs,') OR intermediateContactPersonID IN (',IDs,')) AND isDeleted = 0 LIMIT 1)  \n" +
             "		UNION ALL  \n" +
             "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"purchase_order_mst\" else \"\" end as msg FROM purchase_order_mst WHERE  (supplierContactPersonID IN (',IDs,') OR shippingContactPersonID IN (',IDs,') OR intermediateContactPersonID IN (',IDs,')) AND isDeleted = 0 LIMIT 1)  \n" +
             "		UNION ALL  \n" +
             "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"purchase_order_mst\" else \"\" end as msg FROM purchase_order_line_release_det WHERE shippingContactPersonID IN (',IDs,') AND isDeleted = 0 LIMIT 1)  \n" +
             "		UNION ALL  \n" +
             "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"supplier_quote_mst\" else \"\" end as msg FROM supplier_quote_mst WHERE isDeleted = 0 AND (billingContactPersonID IN (',IDs,') OR shippingContactPersonID IN (',IDs,')) LIMIT 1)  \n" +
             "		UNION ALL  \n" +
             "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"rfq_assemblies\" else \"\" end as msg FROM rfq_assemblies_quotation_submitted WHERE isDeleted = 0 AND (custBillingContactPersonID IN (',IDs,') OR custShippingContactPersonID IN (',IDs,')) LIMIT 1)  \n" +
             "		UNION ALL  \n" +
             "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"salesordermst\" else \"\" end as msg FROM salesordermst WHERE isDeleted = 0 AND (billingContactPersonID IN (',IDs,') OR contactPersonID IN (',IDs,') OR shippingContactPersonID IN (',IDs,') OR intermediateContactPersonID IN (',IDs,')) LIMIT 1)  \n" +
             "		UNION ALL  \n" +
             "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"salesordermst\" else \"\" end as msg FROM salesshippingmst WHERE isDeleted = 0 AND shippingContactPersonID IN (',IDs,') LIMIT 1)  \n" +
             "		UNION ALL  \n" +
             "			(SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"customer_addresses\" else \"\" end as msg FROM customer_addresses WHERE isDeleted = 0 AND defaultIntermediateContactPersonID IN (',IDs,') LIMIT 1)  \n" +
             "		');  \n" +
             "/*	  (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"packing_slip_material_receive\" else \"\" end as msg FROM packing_slip_material_receive WHERE isDeleted = 0 AND (billToConactPerson IN (',IDs,')  \n" +
             "			OR shipToContactPersonID IN (',IDs,') OR rmaShippingContactPersonID IN (',IDs,') OR rmaMarkForContactPersonID IN (',IDs,')) LIMIT 1)  \n" +
             "      UNION ALL  \n" +
             "      (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"packingslip_invoice_payment\" else \"\" end as msg FROM packingslip_invoice_payment WHERE isDeleted = 0 AND (payToContactPersonID IN (',IDs,') OR billToContactPersonID IN (',IDs,')) LIMIT 1)  \n" +
             "      UNION ALL  \n" +
             "      (SELECT COUNT(1) cnt ,CASE WHEN COUNT(1) > 0 then \"rfqforms\" else \"\" end as msg FROM rfqforms WHERE isDeleted = 0 AND (custBillingConactPersonID IN (',IDs,') OR custShippingConactPersonID IN (',IDs,')) LIMIT 1)  \n" +
             "  */  \n" +
             "  \n" +
             "  	PREPARE stmt FROM @SQL;  \n" +
             "	EXECUTE stmt;  \n" +
             "  \n" +
             "    IF(countList=FALSE) THEN  \n" +
             "		IF(SELECT SUM(t.cnt) FROM tempContactperson t)=0 THEN  \n" +
             "			CREATE TEMPORARY TABLE IF NOT EXISTS tempSetIsDefaultContactperson AS  \n" +
             "				SELECT cp.refTransID,cp.refTableName FROM contactperson cp  WHERE FIND_IN_SET(cp.personId,IDs) AND cp.isDeleted = 0  GROUP BY cp.refTransID,cp.refTableName;  \n" +
             "  \n" +
             "			SET @SQl1 = CONCAT('update contactperson set isDeleted=',1,',deletedBy=',deletedBy,', deleteByRoleId = ',pRoleID,', deletedAt=\"',fun_DatetimetoUTCDateTime(),'\" where personId in(',IDs,') and deletedAt is NULL');  \n" +
             "			PREPARE stmt1 FROM @SQL1;  \n" +
             "			EXECUTE stmt1;  \n" +
             "  \n" +
             "            # If Default Contact person is Deleted then Set new Default Contact Person.  \n" +
             "            IF(EXISTS (SELECT 1 FROM tempSetIsDefaultContactperson)) THEN  \n" +
             "				CREATE TEMPORARY TABLE IF NOT EXISTS tempPersonId AS (SELECT MIN(cp.personId) personId, COUNT(cp.personId) activePersonCnt FROM contactperson cp  \n" +
             "						WHERE EXISTS (  \n" +
             "							SELECT 1 FROM tempSetIsDefaultContactperson tcp WHERE tcp.refTransID = cp.refTransID AND tcp.refTableName = cp.refTableName  \n" +
             "							) AND cp.isDeleted = 0 AND cp.isActive = 1 GROUP BY cp.refTransID,cp.refTableName);  \n" +
             "				UPDATE contactperson SET isDefault =1 WHERE personId IN  \n" +
             "					(SELECT personId FROM tempPersonId WHERE activePersonCnt = 1);  \n" +
             "				DROP TEMPORARY TABLE IF EXISTS tempPersonId;  \n" +
             "			END IF;  \n" +
             "			DROP TEMPORARY TABLE IF EXISTS tempSetIsDefaultContactperson;  \n" +
             "  \n" +
             "			SELECT * FROM tempContactperson WHERE IFNULL(cnt,0) > 0 AND msg IS NOT NULL AND msg != \"\";  \n" +
             "		ELSE  \n" +
             "			SELECT SUM(t.cnt) AS TotalCount, GROUP_CONCAT(t.msg SEPARATOR ',') AS Message FROM tempContactperson t;  \n" +
             "		END IF;  \n" +
             "	ELSE  \n" +
             "		SELECT t1.cnt,t2.display_page_name AS msg  \n" +
             "		FROM tempContactperson t1  \n" +
             "		INNER JOIN table_mapping_details t2 ON t1.msg=t2.tabel_name  \n" +
             "			WHERE IFNULL(cnt,0) > 0 AND msg IS NOT NULL AND msg != \"\"  \n" +
             "			ORDER BY t2.display_page_name;  \n" +
             "	END IF;  \n" +
             "	DROP TEMPORARY TABLE IF EXISTS tempContactperson;  \n" +
             "END;  \n" +
             /* **************************** Add Script Version ->  *********************************** */
             "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
             "VALUES (1378,'1.00','V1',' #41484 sps - KETAN '," + userid + ", '" + requiredDet.ipAddress + "');"
             );
            break;
      case 1378:
          allDbChangesArray.push(
          /* **************************** New Script -> 25-03-2022  *********************************** */
            "DROP procedure IF EXISTS `Sproc_RetrieveSupplierInvoicePayment`;  \n" +
            "CREATE PROCEDURE `Sproc_RetrieveSupplierInvoicePayment`(  \n" +
            "	IN ppageIndex INT,  \n" +
            "	IN precordPerPage INT,  \n" +
            "	IN pOrderBy VARCHAR(255),  \n" +
            "	IN pWhereClause VARCHAR(16383),  \n" +
            "	IN pSupplierIDs VARCHAR(16383),  \n" +
            "	IN pPaymentMethodIDs VARCHAR(16383),  \n" +
            "	IN pBankAccountCodeIDs VARCHAR(16383),  \n" +
            "    IN pTransactionModeIDs VARCHAR(16383),  \n" +
            "    IN pExactPaymentNumberSearch TINYINT,  \n" +
            "	IN pPaymentNumber VARCHAR(50),  \n" +
            "    IN pInvoiceNumber VARCHAR(50),  \n" +
            "	IN pExactPaymentAmountSearch TINYINT,  \n" +
            "	IN pAmount VARCHAR(50),  \n" +
            "	IN pFromDate DATE,  \n" +
            "	IN pToDate DATE,  \n" +
            "    IN pRefPaymentMode VARCHAR(2),  \n" +
            "    IN pLockStatusFilter VARCHAR(50),  \n" +
            "    IN pSelectedDateType VARCHAR(10),  \n" +
            "    IN pPaymentComments VARCHAR(1000),  \n" +
            "    IN pInvoiceAmount VARCHAR(50),  \n" +
            "    IN pExactInvoiceAmountSearch TINYINT  \n" +
            ")  \n" +
            "BEGIN  \n" +
            "	DECLARE pOffset INT;  \n" +
            "	DECLARE rowNumWhere VARCHAR(255) ;  \n" +
            "	DECLARE v_DateTimeDisplayFormat VARCHAR(100);  \n" +
            "	DECLARE v_TimeZone VARCHAR(50);  \n" +
            "	DECLARE v_InvoiceNumberWhereClause VARCHAR(500);  \n" +
            "    DECLARE v_mfgNameFormat VARCHAR(100);  \n" +
            "  \n" +
            "    SELECT fun_getTimeZone() INTO v_TimeZone;  \n" +
            "	SELECT fun_getDateTimeFormat() INTO v_DateTimeDisplayFormat;  \n" +
            "    select fun_getMFGCodeNameFormat() into v_mfgNameFormat;  \n" +
            "  \n" +
            "	SET v_InvoiceNumberWhereClause= '';  \n" +
            "  \n" +
            "	IF(pWhereClause IS NULL OR pWhereClause = '') THEN  \n" +
            "  		SET pWhereClause = '1=1' ;  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	IF(pSupplierIDs IS NOT NULL AND pSupplierIDs != '' ) THEN  \n" +
            "		SET pWhereClause = CONCAT(pWhereClause, ' AND mfgcodeID in (',pSupplierIDs,')');  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	IF(pPaymentMethodIDs IS NOT NULL AND pPaymentMethodIDs != '') THEN  \n" +
            "		SET pWhereClause = CONCAT(pWhereClause, ' AND paymentType in (',pPaymentMethodIDs,')');  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	IF(pBankAccountCodeIDs IS NOT NULL AND pBankAccountCodeIDs != '') THEN  \n" +
            "		SET pWhereClause = CONCAT(pWhereClause, ' AND bankAccountMasID in (',pBankAccountCodeIDs,')');  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	IF(pTransactionModeIDs IS NOT NULL AND pTransactionModeIDs != '') THEN  \n" +
            "		SET pWhereClause = CONCAT(pWhereClause, ' AND refGencTransModeID in (',pTransactionModeIDs,')');  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	IF(pPaymentNumber IS NOT NULL) THEN  \n" +
            "		SET pWhereClause = CONCAT(pWhereClause, ' AND paymentNumber ',CASE WHEN pExactPaymentNumberSearch = TRUE THEN CONCAT(\" = '\", pPaymentNumber ,\"' \") ELSE CONCAT(\" like '%\", pPaymentNumber, \"%' \") END,' ');  \n" +
            "	END IF;  \n" +
            "  \n" +
            "    IF(pPaymentComments IS NOT NULL AND pPaymentComments != '')THEN  \n" +
            "    	SET pWhereClause = CONCAT(pWhereClause,\" AND remark LIKE '%\",pPaymentComments,\"%'\");  \n" +
            "	END IF;  \n" +
            "  \n" +
            "    IF(pLockStatusFilter IS NOT NULL)THEN  \n" +
            "    	SET pWhereClause = CONCAT(pWhereClause,\" AND lockStatus = '\", pLockStatusFilter ,\"'\");  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	IF(pInvoiceNumber IS NOT NULL) THEN  \n" +
            "		SET v_InvoiceNumberWhereClause = CONCAT(v_InvoiceNumberWhereClause,' AND  \n" +
            "			EXISTS (select 1  \n" +
            "					   from packing_slip_material_receive psd  \n" +
            "					   join packingslip_invoice_payment_det pdet on pdet.refPackingslipInvoiceID = psd.id  \n" +
            "					  where psd.isDeleted = 0  \n" +
            "						and pdet.refPayementid = inv.id  \n" +
            "						AND (', CASE WHEN pRefPaymentMode = 'P' THEN  CONCAT(\"psd.invoiceNumber = '\",pInvoiceNumber,\"'\") ELSE  CONCAT(\"psd.creditMemoNumber = '\",pInvoiceNumber,\"' or psd.debitMemoNumber= '\",pInvoiceNumber,\"'\") END, ')  \n" +
            "				)'  \n" +
            "		);  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	IF(pAmount IS NOT NULL OR pAmount = 0) THEN  \n" +
            "		SET pWhereClause = CONCAT(pWhereClause, ' AND paymentAmount ',CASE WHEN pExactPaymentAmountSearch = TRUE THEN CONCAT(\" = '\", pAmount ,\"' \") ELSE CONCAT(\" like '%\", pAmount, \"%' \") END,' ');  \n" +
            "	END IF;  \n" +
            "  \n" +
            "    IF(pInvoiceAmount IS NOT NULL OR pInvoiceAmount = 0) THEN  \n" +
            "		IF (pInvoiceAmount < 0) THEN  \n" +
            "			SET pWhereClause = CONCAT(pWhereClause, \" AND EXISTS (  \n" +
            "				  SELECT 1 FROM packingslip_invoice_payment_det b  \n" +
            "						JOIN packing_slip_material_receive a ON a.id = b.refPackingslipInvoiceID  \n" +
            "						WHERE b.refPayementid=c.id AND (a.receiptType='C' OR a.receiptType='D') AND a.invoiceTotalDue \",  \n" +
            "						CASE WHEN pExactInvoiceAmountSearch = TRUE THEN CONCAT(\" = '\", pInvoiceAmount * (-1) ,\"' \") ELSE CONCAT(\" LIKE '%\", pInvoiceAmount * (-1), \"%' \") END,  \n" +
            "						\")\"  \n" +
            "			);  \n" +
            "		ELSE  \n" +
            "			SET pWhereClause = CONCAT(pWhereClause, \" AND EXISTS (  \n" +
            "				  SELECT 1 from packingslip_invoice_payment_det b  \n" +
            "						JOIN packing_slip_material_receive a ON a.id = b.refPackingslipInvoiceID  \n" +
            "						WHERE b.refPayementid=c.id AND a.receiptType='I' AND a.invoiceTotalDue \",  \n" +
            "						CASE WHEN pExactInvoiceAmountSearch = TRUE THEN CONCAT(\" = '\", pInvoiceAmount ,\"' \") ELSE CONCAT(\" LIKE '%\", pInvoiceAmount, \"%' \") END,  \n" +
            "						\")\");  \n" +
            "        END IF;  \n" +
            "	END IF;  \n" +
            "  \n" +
            "    IF pFromDate IS NOT NULL AND pToDate IS NOT NULL THEN  \n" +
            "		IF pSelectedDateType = 'PO' THEN  \n" +
            "			SET v_InvoiceNumberWhereClause = CONCAT(v_InvoiceNumberWhereClause,' AND  \n" +
            "				EXISTS (select 1  \n" +
            "						   from packing_slip_material_receive psd  \n" +
            "						   join packingslip_invoice_payment_det pdet on pdet.refPackingslipInvoiceID = psd.id  \n" +
            "						  where psd.isDeleted = 0  \n" +
            "							and pdet.refPayementid = inv.id  \n" +
            "							and (psd.poDate between \"',pFromDate,'\" and \"',pToDate,'\")  \n" +
            "					)'  \n" +
            "			);  \n" +
            "			-- SET pWhereClause = CONCAT(pWhereClause,\" and (c.invoiceDate between \"',pFromDate,'\" and \"',pToDate,'\")\");  \n" +
            "		ELSEIF pSelectedDateType = 'M' THEN  \n" +
            "			SET v_InvoiceNumberWhereClause = CONCAT(v_InvoiceNumberWhereClause,' AND  \n" +
            "				EXISTS (select 1  \n" +
            "						   from packing_slip_material_receive psd  \n" +
            "						   join packingslip_invoice_payment_det pdet on pdet.refPackingslipInvoiceID = psd.id  \n" +
            "						  where psd.isDeleted = 0  \n" +
            "							and pdet.refPayementid = inv.id  \n" +
            "							and (psd.receiptDate between \"',pFromDate,'\" and \"',pToDate,'\")  \n" +
            "					)'  \n" +
            "			);  \n" +
            "			-- SET pWhereClause = CONCAT(pWhereClause,\" AND (receiptDate BETWEEN '\",pFromDate,\"' AND '\",pToDate,\"')\");  \n" +
            "		ELSEIF pSelectedDateType = 'P' THEN  \n" +
            "			SET v_InvoiceNumberWhereClause = CONCAT(v_InvoiceNumberWhereClause,' AND  \n" +
            "				EXISTS (select 1  \n" +
            "						   from packing_slip_material_receive psd  \n" +
            "						   join packingslip_invoice_payment_det pdet on pdet.refPackingslipInvoiceID = psd.id  \n" +
            "						  where psd.isDeleted = 0  \n" +
            "							and pdet.refPayementid = inv.id  \n" +
            "							and (psd.packingSlipDate between \"',pFromDate,'\" and \"',pToDate,'\")  \n" +
            "					)'  \n" +
            "			);  \n" +
            "        	-- SET pWhereClause = CONCAT(pWhereClause,\" AND (poDate BETWEEN '\",pFromDate,\"' AND '\",pToDate,\"')\");  \n" +
            "		ELSEIF pSelectedDateType = 'I' THEN  \n" +
            "			SET v_InvoiceNumberWhereClause = CONCAT(v_InvoiceNumberWhereClause,' AND  \n" +
            "				EXISTS (select 1  \n" +
            "						   from packing_slip_material_receive psd  \n" +
            "						   join packingslip_invoice_payment_det pdet on pdet.refPackingslipInvoiceID = psd.id  \n" +
            "						  where psd.isDeleted = 0  \n" +
            "							and pdet.refPayementid = inv.id  \n" +
            "							and (psd.invoiceDate between \"',pFromDate,'\" and \"',pToDate,'\")  \n" +
            "					)'  \n" +
            "			);  \n" +
            "			-- SET pWhereClause = CONCAT(pWhereClause,\" AND (creditMemoDate BETWEEN '\",pFromDate,\"' AND '\",pToDate,\"')\");  \n" +
            "		ELSEIF pSelectedDateType = 'PM' THEN  \n" +
            "			SET pWhereClause = CONCAT(pWhereClause,\" AND (paymentDate BETWEEN '\",pFromDate,\"' AND '\",pToDate,\"')\");  \n" +
            "		END IF;  \n" +
            "	ELSEIF pFromDate IS NOT NULL THEN  \n" +
            "		IF pSelectedDateType = 'PO' THEN  \n" +
            "			SET v_InvoiceNumberWhereClause = CONCAT(v_InvoiceNumberWhereClause,' AND  \n" +
            "				EXISTS (select 1  \n" +
            "						   from packing_slip_material_receive psd  \n" +
            "						   join packingslip_invoice_payment_det pdet on pdet.refPackingslipInvoiceID = psd.id  \n" +
            "						  where psd.isDeleted = 0  \n" +
            "							and pdet.refPayementid = inv.id  \n" +
            "							and (psd.poDate = \"',pFromDate,'\")  \n" +
            "					)'  \n" +
            "			);  \n" +
            "			-- SET pWhereClause = CONCAT(pWhereClause,\" and (c.invoiceDate = '\",pFromDate,\"')\");  \n" +
            "		ELSEIF pSelectedDateType = 'M' THEN  \n" +
            "			SET v_InvoiceNumberWhereClause = CONCAT(v_InvoiceNumberWhereClause,' AND  \n" +
            "				EXISTS (select 1  \n" +
            "						   from packing_slip_material_receive psd  \n" +
            "						   join packingslip_invoice_payment_det pdet on pdet.refPackingslipInvoiceID = psd.id  \n" +
            "						  where psd.isDeleted = 0  \n" +
            "							and pdet.refPayementid = inv.id  \n" +
            "							and (psd.receiptDate = \"',pFromDate,'\")  \n" +
            "					)'  \n" +
            "			);  \n" +
            "			-- SET pWhereClause = CONCAT(pWhereClause,\" AND (receiptDate = '\",pFromDate,\"')\");  \n" +
            "		ELSEIF pSelectedDateType = 'P' THEN  \n" +
            "			SET v_InvoiceNumberWhereClause = CONCAT(v_InvoiceNumberWhereClause,' AND  \n" +
            "				EXISTS (select 1  \n" +
            "						   from packing_slip_material_receive psd  \n" +
            "						   join packingslip_invoice_payment_det pdet on pdet.refPackingslipInvoiceID = psd.id  \n" +
            "						  where psd.isDeleted = 0  \n" +
            "							and pdet.refPayementid = inv.id  \n" +
            "							and (psd.packingSlipDate = \"',pFromDate,'\")  \n" +
            "					)'  \n" +
            "			);  \n" +
            "        	-- SET pWhereClause = CONCAT(pWhereClause,\" AND (poDate = '\",pFromDate,\"')\");  \n" +
            "		ELSEIF pSelectedDateType = 'I' THEN  \n" +
            "			SET v_InvoiceNumberWhereClause = CONCAT(v_InvoiceNumberWhereClause,' AND  \n" +
            "				EXISTS (select 1  \n" +
            "						   from packing_slip_material_receive psd  \n" +
            "						   join packingslip_invoice_payment_det pdet on pdet.refPackingslipInvoiceID = psd.id  \n" +
            "						  where psd.isDeleted = 0  \n" +
            "							and pdet.refPayementid = inv.id  \n" +
            "							and (psd.invoiceDate = \"',pFromDate,'\")  \n" +
            "					)'  \n" +
            "			);  \n" +
            "			-- SET pWhereClause = CONCAT(pWhereClause,\" AND (creditMemoDate = '\",pFromDate,\"')\");  \n" +
            "		ELSEIF pSelectedDateType = 'PM' THEN  \n" +
            "        	SET pWhereClause = CONCAT(pWhereClause,\" AND (paymentDate = '\",pFromDate,\"')\");  \n" +
            "		END IF;  \n" +
            "    END IF;  \n" +
            "  \n" +
            "	SET @Sproc_Sproc_RetrieveSupplierInvoicePayment = CONCAT(\"  \n" +
            "		SELECT		inv.id,  \n" +
            "				inv.systemId,  \n" +
            "				inv.mfgcodeID,  \n" +
            "				m.mfgCode supplier,  \n" +
            "				fun_GetFormattedMfgCode(m.mfgCode, m.mfgName, '\",v_mfgNameFormat,\"') supplierCodeName,  \n" +
            "				inv.isPaymentVoided,  \n" +
            "				case 	when inv.isPaymentVoided = 0 then  \n" +
            "						'Paid'  \n" +
            "					else  \n" +
            "						'Voided'  \n" +
            "				end isPaymentVoidedConvertedValue,  \n" +
            "				inv.voidPaymentReason,  \n" +
            "				inv.refVoidedPaymentNumber,  \n" +
            "                inv.refVoidedPaymentId,  \n" +
            "                (select c.lockStatus from packingslip_invoice_payment c  \n" +
            "					where c.id = inv.refVoidedPaymentId) refVoidedPaymentLockStatus,  \n" +
            "				inv.paymentNumber,  \n" +
            "				inv.bankName,  \n" +
            "				inv.bankAccountNo,  \n" +
            "				inv.paymentType,  \n" +
            "				inv.bankAccountMasID,  \n" +
            "				gc.gencCategoryName paymentMethod,  \n" +
            "				gc.systemGenerated systemGeneratedPaymentMethod,  \n" +
            "				inv.paymentDate,  \n" +
            "				invdet.invoiceAmount,  \n" +
            "				inv.paymentAmount,  \n" +
            "				inv.payToName,  \n" +
            "                fun_getAddressbyIDForCheckPrint(inv.payToAddressID, inv.payToContactPersonID) payToAddress,  \n" +
            "                fun_getAddressbyIDForCheckPrint(inv.billToAddressID, inv.billToContactPersonID) billToAddress,  \n" +
            "                inv.refGencTransModeID,  \n" +
            "                gtm.modeName transactionModeName,  \n" +
            "                gtm.systemGenerated systemGeneratedTransactionMode,  \n" +
            "				inv.accountReference,  \n" +
            "				inv.remark,  \n" +
            "                inv.depositBatchNumber,  \n" +
            "                inv.offsetAmount,  \n" +
            "                inv.acctId,  \n" +
            "                fun_getChartOfAccountsCodeNameByID(inv.acctId) coaName,  \n" +
            "				fun_getUserNameByID(inv.createdBy) createdby,  \n" +
            "				fun_getUserNameByID(inv.updatedBy) updatedby,  \n" +
            "				fun_ApplyCommonDateTimeFormatByParaValue(inv.createdAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') createdAt,  \n" +
            "				fun_ApplyCommonDateTimeFormatByParaValue(inv.UpdatedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') updatedAt,  \n" +
            "				fun_getRoleByID(inv.updateByRoleId) updatedbyRole,  \n" +
            "				fun_getRoleByID(inv.createByRoleId) createdbyRole,  \n" +
            "				inv.lockStatus,  \n" +
            "				(case when inv.lockStatus = 'NA' then 'Not Applicable'  \n" +
            "					when inv.lockStatus = 'RL' then 'Ready To Lock'  \n" +
            "					when inv.lockStatus = 'LC' then 'Locked'  \n" +
            "					else null end  \n" +
            "				) lockStatusValue,  \n" +
            "				fun_getUserNameByID(inv.lockedBy) lockByName,  \n" +
            "				fun_getRoleByID(inv.lockedByRoleId) lockedByRoleName,  \n" +
            "				fun_ApplyCommonDateTimeFormatByParaValue(inv.lockedAt,'\",v_TimeZone,\"', '\",v_DateTimeDisplayFormat,\"') lockedAt  \n" +
            "		FROM	packingslip_invoice_payment inv  \n" +
            "        join mfgcodemst m ON m.id = inv.mfgcodeID  \n" +
            "		INNER JOIN 	genericcategory gc ON inv.paymentType = gc.gencCategoryID  \n" +
            "        left join generic_transmode_mst gtm ON gtm.id = inv.refGencTransModeID  \n" +
            "		left JOIN (  \n" +
            "					SELECT 		pid.refPayementid,	SUM(psmd.extendedPrice) invoiceAmount  \n" +
            "					FROM 		packingslip_invoice_payment_det pid  \n" +
            "					LEFT JOIN 	packing_slip_material_receive_det psmd ON psmd.refPackingSlipMaterialRecID = pid.refPackingslipInvoiceID AND psmd.isDeleted = 0  \n" +
            "					WHERE 		pid.isDeleted = 0  \n" +
            "                       and		pid.isPaymentVoided = 0  \n" +
            "					GROUP BY 	pid.refPayementid  \n" +
            "				) invdet ON invdet.refPayementid = inv.id  \n" +
            "		WHERE 		inv.isDeleted = 0  \n" +
            "					AND inv.refPaymentMode = '\",pRefPaymentMode,\"'  \n" +
            "					AND gc.isDeleted = 0 \" ,v_InvoiceNumberWhereClause  \n" +
            "	);  \n" +
            "  \n" +
            "	IF (pOrderBy IS NULL OR pOrderBy = '') THEN  \n" +
            "		SET pOrderBy = \" ORDER BY paymentDate desc, isPaymentVoided asc \";  \n" +
            "	ELSE  \n" +
            "		SET pOrderBy = CONCAT(\"ORDER BY \" , pOrderBy) ;  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	IF(ppageIndex <> 0 AND precordPerPage <> 0) THEN  \n" +
            "		SET pOffset = (ppageIndex -1) * precordPerPage;  \n" +
            "		SET rowNumWhere = CONCAT(\" LIMIT \" , pRecordPerPage , \" OFFSET \" , pOffset) ;  \n" +
            "	ELSE  \n" +
            "		SET rowNumWhere = '';  \n" +
            "	END IF;  \n" +
            "  \n" +
            "	/* to get total count of rows */  \n" +
            "	SET @SQLStatement1 = CONCAT(\" SELECT COUNT(1) as TotalRecord from ( \",@Sproc_Sproc_RetrieveSupplierInvoicePayment,\" ) c where 1=1 and \", pWhereClause);  \n" +
            "        PREPARE query1 FROM @SQLStatement1;  \n" +
            "	EXECUTE query1;  \n" +
            "	DEALLOCATE PREPARE query1;  \n" +
            "  \n" +
            "	SET @SQLStatement2 = CONCAT(\"select c.*  from ( \", @Sproc_Sproc_RetrieveSupplierInvoicePayment,\" ) c  where \", pWhereClause , \" \" , pOrderBy , rowNumWhere);  \n" +
            "	-- select @SQLStatement2;  \n" +
            "    PREPARE query2 FROM @SQLStatement2;  \n" +
            "	EXECUTE query2;  \n" +
            "	DEALLOCATE PREPARE query2;  \n" +
            "END;  \n" +
          /* **************************** Add Script Version -> 25-03-2022 *********************************** */
          "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
          "VALUES (1379,'1.00','V1',' User Story 41825: [Main Branch] Add Invoice Amount Filter on Supplier Payment List Page - Jay '," + userid + ", '" + requiredDet.ipAddress + "');"
          );
        break;
    }
    return allDbChangesArray;
});

// sample
//case 1123:
//  allDbChangesArray.push(
//  /* **************************** New Script -> 09-09-2021  *********************************** */
//  put your formatted script here
//  /* **************************** Add Script Version ->  *********************************** */
//  "INSERT INTO dbversion(`buildNumber`,`schemaVersion`,`releaseName`,`description`,`createdBy`,`executedFromIPAddress`) " +
//  "VALUES (1124,'1.00','V1',' Sample entry - CC '," + userid + ", '" + requiredDet.ipAddress + "');"
//  );
//break;