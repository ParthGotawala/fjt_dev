const _ = require('lodash');
const resHandler = require('../../resHandler');
const { STATE, COMMON } = require('../../constant');
const { MESSAGE_CONSTANT, DATA_CONSTANT } = require('../../../constant');
const fs = require('fs');
const { Op } = require('sequelize');

var Excel = require('exceljs');
Excel.config.setValue('promise', require('bluebird'));
const fsextra = require('fs-extra');
const mkdirp = require('mkdirp');
const uuidv1 = require('uuid/v1');
const { createUserOnIdentityServer } = require('../../Identity/IdentityApiHandler');

let entity = null;
let moduleName = 'Master file data';
const bcrypt = require('bcryptjs');


module.exports = {
    getFieldList: (req, res) => {
        const entityModel = req.params.entity;
        const Model = _.find(req.app.locals.models, (i, item) => item === entityModel);
        const modelAttribue = Model.attributes;
        const fieldSet = [];
        _.each(modelAttribue, (item) => {
            // eslint-disable-next-line no-underscore-dangle
            if (!item._autoGenerated) {
                const obj = { fieldName: item.fieldName, selectedExcelField: null };
                fieldSet.push(obj);
            }
        });
        return resHandler.successRes(res, DATA_CONSTANT.API_RESPONSE_CODE.SUCCESS, STATE.SUCCESS, fieldSet, null);
    },


    // Get List of entity fields that imported
    // GET : /api/v1/uploadmodelDocuments/getEntityFieldListByTableName
    // @param {string} table name
    // @return List of field list of table
    getEntityFieldListByTableName: (req, res) => {
        if (req.params.entityTableName) {
            const ImportEntityFields = req.app.locals.models.ImportEntityFields;
            return ImportEntityFields.findAll({
                where: {
                    entityTableName: req.params.entityTableName
                },
                attributes: ['field', 'displayName', 'displayOrder', 'required']
            }).then(entityFieldList => resHandler.successRes(res, DATA_CONSTANT.API_RESPONSE_CODE.SUCCESS, STATE.SUCCESS, entityFieldList, null)).catch((err) => {
                console.trace();
                console.error(err);
                return resHandler.errorRes(res, DATA_CONSTANT.API_RESPONSE_CODE.ERROR, STATE.EMPTY, { messageContent: MESSAGE_CONSTANT.GLOBAL.SOMTHING_WRONG, err: err, data: null });
            });
        } else {
            return resHandler.errorRes(res, DATA_CONSTANT.API_RESPONSE_CODE.ERROR, STATE.FAILED, { messageContent: MESSAGE_CONSTANT.GLOBAL.INVALID_PARAMETER, err: null, data: null });
        }
    },

    // eslint-disable-next-line consistent-return
    uploadmodelDocuments: (req, res) => {
        const dir = './uploads/modelFiles/';
        if (typeof (req.files) === 'object' && Array.isArray(req.files.documents)) {
            const file = req.files.documents[0];
            const ext = (/[.]/.exec(file.originalFilename)) ? /[^.]+$/.exec(file.originalFilename)[0] : null;
            const fileName = `${uuidv1()}.${ext}`;
            const path = dir + fileName;
            fsextra.move(file.path, path, (err) => {
                module.exports.importModelDocument(req, res, err, path);
            });
        } else {
            console.trace();
            return resHandler.errorRes(res, DATA_CONSTANT.API_RESPONSE_CODE.ERROR, STATE.EMPTY, { messageContent: MESSAGE_CONSTANT.MASTER.INVALID_FILE_DATA, err: null, data: null });
        }
    },
    // eslint-disable-next-line consistent-return
    importModelDocument: (req, res, err, filePath) => {
        entity = req.body.entity;
        const path = filePath;
        // let stream = fs.createReadStream(path);
        const statusArray = [];
        statusArray.push(true);
        statusArray.push(false);
        const modelObj = [];
        const objModel = {};
        const workbook = new Excel.Workbook();
        try {
            workbook.xlsx.readFile(path)
                .then(() => {
                    // fetch sheet by id
                    var worksheet = workbook.getWorksheet(1);
                    // eslint-disable-next-line consistent-return
                    worksheet.eachRow((row, rowNumber) => {
                        if (rowNumber === 1) {
                            row.eachCell({ includeEmpty: false }, (cell) => {
                                objModel[cell.value] = null;
                                const obj = { key: cell.value, Data: [] };
                                modelObj.push(obj);
                            });
                        } else if (modelObj.length > 0) {
                            const tbl = {};
                            row.eachCell({ includeEmpty: true }, (cell, colNumber) => {
                                const objkey = Object.keys(objModel)[colNumber - 1];
                                tbl[objkey] = cell.value;
                                const obj = _.find(modelObj, i => i.key === objkey);
                                const value = cell.value ? cell.value : '';
                                if (obj) {
                                    obj.Data = obj.Data ? obj.Data : [];
                                    obj.Data.push(value);
                                }
                            });

                            /* static code to set blank ("") for empty cell value to set as complete row data */
                            _.each(modelObj, (item) => {
                                if (item.Data.length !== rowNumber - 1) {
                                    item.Data.push('');
                                }
                            });
                        } else {
                            return resHandler.errorRes(res, DATA_CONSTANT.API_RESPONSE_CODE.ERROR, STATE.EMPTY, { messageContent: MESSAGE_CONSTANT.MASTER.INVALID_FILE_DATA, err: null, data: null });
                        }
                    });
                    /* GenericDataList - data list that need to be added in table */
                    if (modelObj.length > 0) {
                        // SaveModelData(Model,modelObj,res,entity);
                        return resHandler.successRes(res, DATA_CONSTANT.API_RESPONSE_CODE.SUCCESS, STATE.SUCCESS, modelObj, null);
                    } else {
                        return resHandler.errorRes(res, DATA_CONSTANT.API_RESPONSE_CODE.ERROR, STATE.EMPTY, { messageContent: MESSAGE_CONSTANT.MASTER.INVALID_FILE_DATA, err: null, data: null });
                    }
                }).catch((error) => {
                    console.trace();
                    console.error(error);
                    return resHandler.errorRes(res, DATA_CONSTANT.API_RESPONSE_CODE.ERROR, STATE.EMPTY, { messageContent: MESSAGE_CONSTANT.GLOBAL.SOMTHING_WRONG, err: error, data: null });
                });
        } catch (error) {
            console.trace();
            console.error(error);
            return resHandler.errorRes(res, DATA_CONSTANT.API_RESPONSE_CODE.ERROR, STATE.EMPTY, { messageContent: MESSAGE_CONSTANT.GLOBAL.SOMTHING_WRONG, err: error, data: null });
        }
    },
    downloadEXCELFile: (req, res) => {
        const AllDataWithError = req.body;

        var workbook1 = new Excel.Workbook();
        var sheet1 = workbook1.addWorksheet('Sheet1');
        sheet1.columns = [];
        let columns = [];
        _.each(AllDataWithError.data, (item) => {
            let keys = [];
            keys = Object.keys(item);
            _.each(keys, (key) => {
                // if(idx < keys.length-1){
                const obj = { header: key, key: key };
                columns.push(obj);
                // }
            });
        });
        columns = _.uniqBy(columns, e => e.header);
        sheet1.columns = columns;
        _.each(AllDataWithError.data, (item) => {
            sheet1.addRow(item);
        });

        res.setHeader('Content-Type', 'application/vnd.ms-excel');
        /* bellow code line change because as is it creating issue if file name has comma in it, done by Ashish confirm with Vaibhav*/
        res.setHeader('Content-Disposition', `attachment; filename="${entity}".xls`);
        const path = DATA_CONSTANT.GENERICCATEGORY.UPLOAD_PATH;
        mkdirp(path, () => { });
        entity = entity ? entity : 'error';
        const filename = `${path + entity}.xls`;
        workbook1.xlsx.writeFile(filename).then(() => {
            const file = `${path + entity}.xls`;
            /* bellow code line change because as is it creating issue if file name has comma in it, done by Ashish confirm with Vaibhav*/
            res.setHeader('Content-disposition', `attachment; filename="${entity}".xls`);
            res.setHeader('Content-type', 'application/vnd.ms-excel');
            const filestream = fs.createReadStream(file);
            fs.unlink(filename, () => { });
            filestream.pipe(res);
        });
    },

    /* Create document data based on import given */
    createEntity: (req, res) => {
        const { sequelize, User, Employee } = req.app.locals.models;
        const Model = _.find(req.app.locals.models, (i, item) => item === req.body.model);

        let isImportFileContainError = false;
        if (req.body.entity === DATA_CONSTANT.modulesForExportSampleTemplate.PERSONNEL) {
            const importEmployeeData = req.body.importEntityFileData;

            global.PromiseData.mapSeries(importEmployeeData, (importEmpItem) => {
                let empUserNameMailMatchingList = null;

                if (importEmpItem.initialName) { importEmpItem.initialName = importEmpItem.initialName.toUpperCase(); }

                if (importEmpItem.email) {
                    importEmpItem.email = importEmpItem.email.text ? importEmpItem.email.text : importEmpItem.email;
                    importEmpItem.email = importEmpItem.email.toLowerCase().trim();
                }

                if (importEmpItem.managerID) {
                    importEmpItem.managerID = importEmpItem.managerID.toUpperCase();
                }

                /* check employee username,initial name,mail already exists */
                const queryWhere = [
                    { initialName: importEmpItem.initialName },
                    { codeDigest: COMMON.ENCRYPT(importEmpItem.code.toString().toUpperCase()) }
                ];

                if (importEmpItem.email) {
                    queryWhere.push({ email: importEmpItem.email });
                }

                return Employee.findAll({
                    where: {
                        [Op.or]: queryWhere
                    },
                    attributes: ['email', 'initialName', 'codeDigest']
                }).then((userNameResponse) => {
                    empUserNameMailMatchingList = userNameResponse;

                    /* check employee exists for manager [ Initial Name passed from import document in Manager field] */
                    return Employee.findOne({
                        where: {
                            initialName: importEmpItem.managerID ? (importEmpItem.managerID.toString()) : ''
                        },
                        attributes: ['id']
                        // eslint-disable-next-line consistent-return
                    }).then((managerEmpResponse) => {
                        let isError = false;

                        /* set validation message for employee username , initial name , mail exists */
                        if (empUserNameMailMatchingList && empUserNameMailMatchingList.length > 0) {
                            empUserNameMailMatchingList.forEach((dbemployee) => {
                                if (importEmpItem.initialName.toLowerCase() === dbemployee.initialName.toLowerCase()) { /* check same initial Name */
                                    if (!importEmpItem.error) {
                                        importEmpItem.error = '';
                                    }
                                    importEmpItem.error += MESSAGE_CONSTANT.UNIQUE('Initial name').message || '';
                                    isError = true;
                                }
                                if (importEmpItem.code === COMMON.DECRYPT(dbemployee.codeDigest)) { /* check same user name */
                                    if (!importEmpItem.error) {
                                        importEmpItem.error = '';
                                    }
                                    importEmpItem.error += MESSAGE_CONSTANT.UNIQUE('Personnel user id').message || '';
                                    isError = true;
                                }
                                if (importEmpItem.email && importEmpItem.email === dbemployee.email) {  /* check same mail */
                                    if (!importEmpItem.error) {
                                        importEmpItem.error = '';
                                    }
                                    importEmpItem.error += MESSAGE_CONSTANT.UNIQUE('Email').message || '';
                                    isError = true;
                                }
                            });
                        }

                        /* set validation message for employee exists to set it as manager */
                        if (importEmpItem.managerID) {
                            if (!managerEmpResponse) {
                                if (!importEmpItem.error) {
                                    importEmpItem.error = '';
                                }
                                importEmpItem.error += MESSAGE_CONSTANT.EMPLOYEE.NO_MANAGER_FOUND;
                                isError = true;
                            } else {
                                importEmpItem.managerID = managerEmpResponse.id;
                            }
                        }

                        if (isError === false) {
                            return sequelize.transaction().then((t) => {
                                let tempEmpObj = {};
                                tempEmpObj = Object.assign({}, importEmpItem);

                                /* set object blank properties to null */
                                Object.keys(tempEmpObj).forEach((key) => {
                                    tempEmpObj[key] = tempEmpObj[key] ? tempEmpObj[key] : null;
                                });
                                tempEmpObj.isActive = true;
                                tempEmpObj.visibleCode = (tempEmpObj.code.toString().substr(tempEmpObj.code.toString().length - 4)).toUpperCase();
                                // tempEmpObj.createdBy = COMMON.getRequestUserID(req);
                                COMMON.setModelCreatedObjectFieldValue(req.user, tempEmpObj);
                                // phone number converted data store into it like 9016445001 >> +91 901 644 5001
                                tempEmpObj.contact = tempEmpObj['contact_ConvertedData'];
                                // country code converted data store into it like +91 >> IN
                                tempEmpObj.contactCountryCode = tempEmpObj['contactCountryCode_ConvertedData'];
                                delete importEmpItem['contact_ConvertedData'];
                                delete importEmpItem['contactCountryCode_ConvertedData'];

                                if (tempEmpObj.code) {
                                    tempEmpObj.codeDigest = COMMON.ENCRYPT(tempEmpObj.code.toString().toUpperCase());
                                }

                                return Employee.create(tempEmpObj, {
                                    transaction: t,
                                    individualHooks: true
                                }).then((createdEmp) => {
                                    const tempUserObj = {};
                                    tempUserObj.username = COMMON.DECRYPT(createdEmp.codeDigest);
                                    tempUserObj.password = COMMON.DEFAULT_PASSWORD;
                                    tempUserObj.passwordConfirmation = COMMON.DEFAULT_PASSWORD;
                                    tempUserObj.firstName = createdEmp.firstName;
                                    tempUserObj.lastName = createdEmp.lastName;
                                    tempUserObj.emailAddress = createdEmp.email;
                                    tempUserObj.employeeID = createdEmp.dataValues.id;

                                    if (tempUserObj.password !== tempUserObj.passwordConfirmation) {
                                        throw new Error('Password confirmation doesn\'t match Password');
                                    }
                                    tempUserObj.passwordDigest = bcrypt.hashSync(tempUserObj.password, 10);

                                    // tempUserObj.createdBy= COMMON.getRequestUserID(req);
                                    COMMON.setModelCreatedObjectFieldValue(req.user, tempUserObj);
                                    moduleName = DATA_CONSTANT.EMPLOYEE.DISPLYNAME;

                                    const reqBody = {
                                        Username: tempUserObj.username,
                                        Password: tempUserObj.password,
                                        Email: tempUserObj.emailAddress
                                    };
                                    return createUserOnIdentityServer(reqBody, req.headers.authorization).then((resIDS) => {
                                        var resUserCreated = JSON.parse(resIDS);
                                        if (resUserCreated.status === STATE.SUCCESS) {
                                            tempUserObj.IdentityUserId = COMMON.DECRYPT_AES(resUserCreated.data.userID);
                                            return User.create(tempUserObj, {
                                                transaction: t
                                            }).then(() => {
                                                t.commit();
                                            }).catch((err) => {
                                                console.trace();
                                                console.error(err);
                                                if (!t.finished) { t.rollback(); }
                                                return resHandler.errorRes(res, DATA_CONSTANT.API_RESPONSE_CODE.ERROR, STATE.EMPTY, { messageContent: MESSAGE_CONSTANT.GLOBAL.SOMTHING_WRONG, err: err, data: null });
                                            });
                                        } else {
                                            if (!t.finished) { t.rollback(); }
                                            return resHandler.errorRes(res, DATA_CONSTANT.API_RESPONSE_CODE.ERROR, STATE.EMPTY, {
                                                messageContent: resUserCreated.userMessage.messageContent,
                                                err: null,
                                                data: null
                                            });
                                        }
                                    }).catch((createUserErr) => {
                                        console.error(createUserErr);
                                        if (!t.finished) { t.rollback(); }
                                        return resHandler.errorRes(res, DATA_CONSTANT.API_RESPONSE_CODE.ERROR, STATE.EMPTY, {
                                            messageContent: MESSAGE_CONSTANT.GLOBAL.SOMTHING_WRONG,
                                            err: createUserErr,
                                            data: null
                                        });
                                    });
                                }).catch((err) => {
                                    console.trace();
                                    console.error(err);
                                    // t.rollback();
                                    return resHandler.errorRes(res, DATA_CONSTANT.API_RESPONSE_CODE.ERROR, STATE.EMPTY, { messageContent: MESSAGE_CONSTANT.GLOBAL.SOMTHING_WRONG, err: err, data: null });
                                });
                            });
                        } else {
                            // remove phone number property (converted data store into it like +91 901 644 5001 >> 9016445001)
                            delete importEmpItem['contact_ConvertedData'];
                            // remove country code property (converted data store into it like +91 >> IN)
                            delete importEmpItem['contactCountryCode_ConvertedData'];
                            isImportFileContainError = true;
                        }
                    }).catch((err) => {
                        console.trace();
                        console.error(err);
                        return resHandler.errorRes(res, DATA_CONSTANT.API_RESPONSE_CODE.ERROR, STATE.EMPTY, { messageContent: MESSAGE_CONSTANT.GLOBAL.SOMTHING_WRONG, err: err, data: null });
                    });
                }).catch((err) => {
                    console.trace();
                    console.error(err);
                    return resHandler.errorRes(res, DATA_CONSTANT.API_RESPONSE_CODE.ERROR, STATE.EMPTY, { messageContent: MESSAGE_CONSTANT.GLOBAL.SOMTHING_WRONG, err: err, data: null });
                });
            }).then(() => {
                if (isImportFileContainError) {
                    return resHandler.successRes(res, DATA_CONSTANT.API_RESPONSE_CODE.SUCCESS, STATE.SUCCESS, { isError: true, importEntityFileData: importEmployeeData });
                } else {
                    return resHandler.successRes(res, DATA_CONSTANT.API_RESPONSE_CODE.SUCCESS, STATE.SUCCESS, null, MESSAGE_CONSTANT.CREATED(moduleName));
                }
            }).catch((err) => {
                console.trace();
                console.error(err);
                return resHandler.errorRes(res, DATA_CONSTANT.API_RESPONSE_CODE.ERROR, STATE.EMPTY, { messageContent: MESSAGE_CONSTANT.GLOBAL.SOMTHING_WRONG, err: err, data: null });
            });
        } else if (req.body.entity === DATA_CONSTANT.modulesForExportSampleTemplate.MANUFACTURE
            || req.body.entity === DATA_CONSTANT.modulesForExportSampleTemplate.SUPPLIER) {
            const { MfgCodeMst, MfgCodeAlias } = req.app.locals.models;

            const importEntityFileData = req.body.importEntityFileData;
            const mfgType = req.body.entity === DATA_CONSTANT.modulesForExportSampleTemplate.MANUFACTURE ? DATA_CONSTANT.MFGCODE.MFGTYPE.MFG : DATA_CONSTANT.MFGCODE.MFGTYPE.DIST;
            const allUpComingMfgCode = _.map(importEntityFileData, 'mfgCode');
            const allUpComingMfgName = _.map(importEntityFileData, 'mfgName');

            const whereClauseForMfgCodeMst = {
                [Op.or]: [{
                    mfgCode: { [Op.in]: allUpComingMfgName }
                },
                {
                    mfgName: { [Op.in]: allUpComingMfgName }
                },
                {
                    mfgCode: { [Op.in]: allUpComingMfgCode }
                },
                {
                    mfgName: { [Op.in]: allUpComingMfgCode }
                }
                ],
                mfgType: mfgType
            };

            MfgCodeMst.findAll({
                where: whereClauseForMfgCodeMst,
                attributes: ['mfgCode', 'mfgName']
            }).then((mfgCodeMstList) => {
                MfgCodeAlias.findAll({
                    attributes: ['alias'],
                    where: {
                        [Op.or]: [{
                            alias: { [Op.in]: allUpComingMfgCode }
                        },
                        {
                            alias: { [Op.in]: allUpComingMfgName }
                        }
                        ]
                    },
                    include: [{
                        model: MfgCodeMst,
                        as: 'mfgCodemst',
                        attributes: ['mfgCode', 'mfgName'],
                        where: {
                            mfgType: mfgType
                        }
                    }]
                }).then((mfgCodeAliasList) => {
                    var isError = false;

                    importEntityFileData.forEach((importitem) => {
                        let objCodeExists = null;
                        let objNameExists = null;
                        objCodeExists = _.find(mfgCodeMstList, mfgCodeMst => importitem.mfgCode.toUpperCase() === mfgCodeMst.dataValues.mfgCode.toUpperCase());
                        objNameExists = _.find(mfgCodeMstList, mfgCodeMst => importitem.mfgName.toUpperCase() === mfgCodeMst.dataValues.mfgName.toUpperCase());

                        /* if code exists in MfgCodeMst */
                        if (objCodeExists) {
                            if (!importitem.error) {
                                importitem.error = '';
                            }
                            importitem.error += MESSAGE_CONSTANT.MFGCODE.MFGCODE_UNIQUE;
                            isError = true;
                        }
                        /* if name exists in MfgCodeMst */
                        if (objNameExists) {
                            if (!importitem.error) {
                                importitem.error = '';
                            }
                            importitem.error += MESSAGE_CONSTANT.MFGCODE.MFGNAME_UNIQUE;
                            isError = true;
                        }

                        if (!objCodeExists && !objNameExists) {
                            objCodeExists = _.find(mfgCodeAliasList, mfgCodeAlias => importitem.mfgCode.toUpperCase() === mfgCodeAlias.dataValues.alias.toUpperCase());
                            objNameExists = _.find(mfgCodeAliasList, mfgCodeAlias => importitem.mfgName.toUpperCase() === mfgCodeAlias.dataValues.alias.toUpperCase());

                            /* if code exists in MfgCodeAlias */
                            if (objCodeExists) {
                                if (!importitem.error) {
                                    importitem.error = '';
                                }
                                importitem.error += MESSAGE_CONSTANT.MFGCODE.MFGCODE_UNIQUE;
                                isError = true;
                            }
                            /* if name exists in MfgCodeAlias */
                            if (objNameExists) {
                                if (!importitem.error) {
                                    importitem.error = '';
                                }
                                importitem.error += MESSAGE_CONSTANT.MFGCODE.MFGNAME_UNIQUE;
                                isError = true;
                            }
                        }
                    });

                    if (isError === true) {
                        return resHandler.successRes(res, DATA_CONSTANT.API_RESPONSE_CODE.SUCCESS, STATE.SUCCESS, { isError: true, importEntityFileData: importEntityFileData });
                    }


                    COMMON.setModelCreatedArrayFieldValue(req.user, importEntityFileData);


                    return sequelize.transaction().then((t) => {
                        global.PromiseData.mapSeries(importEntityFileData, (importMfgItem, index) => {
                            importMfgItem.mfgType = mfgType;
                            if (req.body.entity === DATA_CONSTANT.modulesForExportSampleTemplate.MANUFACTURE) {
                                importMfgItem.isCustOrDisty = (importMfgItem.isCustOrDisty && importMfgItem.isCustOrDisty.toLowerCase() === 'yes') ? true : null;
                            } else {
                                importMfgItem.isCustOrDisty = true;
                            }

                            importMfgItem.mfgCode = importMfgItem.mfgCode.toUpperCase();
                            return MfgCodeMst.create(importMfgItem, {
                                fields: ['id', 'mfgCode', 'mfgType', 'mfgName', 'isdeleted', 'createdAt', 'createdBy', 'updatedAt',
                                    'updatedBy', 'deletedBy', 'deletedAT', 'isActive', 'isCustOrDisty'],
                                individualHooks: true,
                                transaction: t
                            }).then((mfgCodeMaster) => {
                                const newAliasList = [{
                                    mfgcodeId: mfgCodeMaster.dataValues.id,
                                    createdBy: req.user.id,
                                    alias: mfgCodeMaster.dataValues.mfgCode.toUpperCase(),
                                    mfgType: mfgType
                                }];
                                if (mfgCodeMaster.dataValues.mfgCode.toUpperCase() !== mfgCodeMaster.dataValues.mfgName.toUpperCase()) {
                                    newAliasList.push(
                                        {
                                            mfgcodeId: mfgCodeMaster.dataValues.id,
                                            createdBy: req.user.id,
                                            alias: mfgCodeMaster.dataValues.mfgName.toUpperCase(),
                                            mfgType: mfgType
                                        }
                                    );
                                }


                                return MfgCodeAlias.bulkCreate(newAliasList, {
                                    fields: ['mfgcodeId', 'alias', 'mfgType', 'isdeleted', 'createdAt', 'createdBy', 'updatedAt',
                                        'updatedBy', 'deletedBy', 'deletedAT'],
                                    transaction: t
                                    // eslint-disable-next-line consistent-return
                                }).then(() => {
                                    if (index === importEntityFileData.length - 1) {
                                        t.commit();
                                        return resHandler.successRes(res, DATA_CONSTANT.API_RESPONSE_CODE.SUCCESS, STATE.SUCCESS, null, MESSAGE_CONSTANT.CREATED(moduleName));
                                    }
                                }).catch((err) => {
                                    t.rollback();
                                    console.trace();
                                    console.error(err);
                                    return resHandler.errorRes(res, DATA_CONSTANT.API_RESPONSE_CODE.ERROR, STATE.EMPTY, { messageContent: MESSAGE_CONSTANT.GLOBAL.SOMTHING_WRONG, err: err, data: null });
                                });
                            }).catch((err) => {
                                t.rollback();
                                console.trace();
                                console.error(err);
                                return resHandler.errorRes(res, DATA_CONSTANT.API_RESPONSE_CODE.ERROR, STATE.EMPTY, { messageContent: MESSAGE_CONSTANT.GLOBAL.SOMTHING_WRONG, err: err, data: null });
                            });
                        });
                    });
                }).catch((err) => {
                    console.trace();
                    console.error(err);
                    return resHandler.errorRes(res, DATA_CONSTANT.API_RESPONSE_CODE.ERROR, STATE.EMPTY, { messageContent: MESSAGE_CONSTANT.GLOBAL.SOMTHING_WRONG, err: err, data: null });
                });
            }).catch((err) => {
                console.trace();
                console.error(err);
                return resHandler.errorRes(res, DATA_CONSTANT.API_RESPONSE_CODE.ERROR, STATE.EMPTY, { messageContent: MESSAGE_CONSTANT.GLOBAL.SOMTHING_WRONG, err: err, data: null });
            });
        } else if (req.body.entity === DATA_CONSTANT.modulesForExportSampleTemplate.EQUIPMENT_WORKSTATION
            || req.body.entity === DATA_CONSTANT.modulesForExportSampleTemplate.EQUIPMENT) {
            let allCustomersList = [];
            const { GenericCategory, Equipment } = req.app.locals.models;

            Equipment.findAll({
                where: {
                    isActive: true
                },
                attributes: ['equipmentAs', 'assetName', 'assyId']
                // eslint-disable-next-line consistent-return
            }).then((equipmentList) => {
                let isImportFileDataUnique = true;
                let isRequired = true;
                let isError = false;
                let importEquipmentData = req.body.importEntityFileData;
                _.each(importEquipmentData, (importEqpItem) => {
                    if (importEqpItem.placedInServiceDate && importEqpItem.equipmentAs === 'W') {
                        importEqpItem.placedInServiceDate = '';
                    }
                    if (importEqpItem.placedInServiceDate === '' && importEqpItem.equipmentAs === 'E') {
                        if (!importEqpItem.error) {
                            importEqpItem.error = '';
                        }
                        importEqpItem.error += MESSAGE_CONSTANT.IMPORT_EQUIPMENT.PLACED_IN_OF_SERVICE_DATE_REQUIRED;
                        isError = true;
                        isRequired = false;
                    }
                    if (importEqpItem.binId === '' && importEqpItem.equipmentAs === 'S') {
                        if (!importEqpItem.error) {
                            importEqpItem.error = '';
                        }
                        const messageObj = Object.assign({}, MESSAGE_CONSTANT.GLOBAL.REQUIRED);
                        messageObj.message = COMMON.stringFormat(messageObj.message, 'Bin');
                        importEqpItem.error += messageObj.message;
                        isError = true;
                        isRequired = false;
                    }
                    if (importEqpItem.assyId === '' && importEqpItem.equipmentAs === 'S') {
                        if (!importEqpItem.error) {
                            importEqpItem.error = '';
                        }
                        const messageObj = Object.assign({}, MESSAGE_CONSTANT.GLOBAL.REQUIRED);
                        messageObj.message = COMMON.stringFormat(messageObj.message, 'Ref Assembly');
                        importEqpItem.error += messageObj.message;
                        isError = true;
                        isRequired = false;
                    }

                    if (importEqpItem.equipmentAs) {
                        const equipmentAsType = _.find(equipmentList, item => item.equipmentAs === importEqpItem.equipmentAs && item.assetName.toLowerCase() === importEqpItem.assetName.toLowerCase());

                        if (equipmentAsType) {
                            if (!importEqpItem.error) {
                                importEqpItem.error = '';
                            }
                            importEqpItem.error += MESSAGE_CONSTANT.IMPORT_EQUIPMENT.EQUIPMENTANDWORKSTATION_NAME_UNIQUE;
                            isError = true;
                            isImportFileDataUnique = false;
                        }
                    }
                });
                if (!isImportFileDataUnique || !isRequired || isError) {
                    return resHandler.successRes(res, DATA_CONSTANT.API_RESPONSE_CODE.SUCCESS, STATE.SUCCESS, { isError: true, importEntityFileData: importEquipmentData }, null);
                }
                GenericCategory.findAll({
                    where: {
                        categoryType: COMMON.CategoryType.EquipmentOwnership.Name,
                        isActive: true
                    },
                    attributes: ['gencCategoryID', 'gencCategoryName']
                }).then((genericCategorylist) => {
                    if (!genericCategorylist) {
                        return resHandler.errorRes(res, DATA_CONSTANT.API_RESPONSE_CODE.ERROR, STATE.EMPTY, { messageContent: MESSAGE_CONSTANT.NOT_CREATED(moduleName), err: null, data: null });
                    }

                    const genericCategoryOwnershipTypeList = genericCategorylist;
                    importEquipmentData = req.body.importEntityFileData;
                    // eslint-disable-next-line consistent-return
                    return global.PromiseData.mapSeries(importEquipmentData, (importEqpItem) => {
                        isError = false;
                        let tempEqpObj = {};
                        if (importEqpItem.eqpOwnershipTypeID) { /* check ownership type exists in db */
                            const existsOwnerShipType = _.find(genericCategoryOwnershipTypeList, item => item.gencCategoryName === importEqpItem.eqpOwnershipTypeID);
                            if (!existsOwnerShipType) {
                                if (!importEqpItem.error) {
                                    importEqpItem.error = '';
                                }
                                importEqpItem.error += MESSAGE_CONSTANT.IMPORT_EQUIPMENT.OWNERSHIP_TYPE_NOT_EXISTS;
                                isError = true;
                                isImportFileContainError = true;
                            } else {
                                /* if ownership type is Loan - check exists */
                                if (importEqpItem.eqpOwnershipTypeID === DATA_CONSTANT.GENERICCATEGORY.EQUIPMENT_OWNERSHIP.SYSTEM_GENERATED_DATA.Loan) {
                                    if (!importEqpItem.bankName) {
                                        if (!importEqpItem.error) {
                                            importEqpItem.error = '';
                                        }
                                        importEqpItem.error += MESSAGE_CONSTANT.IMPORT_EQUIPMENT.BANK_NAME_REQUIRED;
                                        isError = true;
                                    } else {
                                        tempEqpObj = Object.assign({}, importEqpItem);
                                        tempEqpObj.eqpOwnershipTypeID = existsOwnerShipType.gencCategoryID;
                                        tempEqpObj.customerId = null;
                                    }
                                } else if (importEqpItem.eqpOwnershipTypeID === DATA_CONSTANT.GENERICCATEGORY.EQUIPMENT_OWNERSHIP.SYSTEM_GENERATED_DATA.Customer) {
                                    if (!importEqpItem.customerId) {
                                        if (!importEqpItem.error) {
                                            importEqpItem.error = '';
                                        }
                                        importEqpItem.error += MESSAGE_CONSTANT.IMPORT_EQUIPMENT.CUSTOMER_REQUIRED;
                                        isError = true;
                                    }
                                    if (!importEqpItem.outOfServiceDate) {
                                        if (!importEqpItem.error) {
                                            importEqpItem.error = '';
                                        }
                                        importEqpItem.error += MESSAGE_CONSTANT.IMPORT_EQUIPMENT.OUT_OF_SERVICE_DATE_REQUIRED;
                                        isError = true;
                                    }
                                    const promises = [];
                                    if (allCustomersList.length === 0) { /* call get customer only once */
                                        const MfgCodeMst = req.app.locals.models.MfgCodeMst;
                                        const mfgTypes = DATA_CONSTANT.MFGCODE.MFGTYPE.MFG;
                                        promises.push(MfgCodeMst.findAll({
                                            where: {
                                                mfgType: mfgTypes,
                                                isCustOrDisty: true
                                            },
                                            attributes: ['id', 'mfgCode', 'mfgName']
                                        }));
                                    }
                                    // eslint-disable-next-line consistent-return
                                    return Promise.all(promises).then((allCustomers) => {
                                        if (allCustomersList.length === 0) {
                                            if (!allCustomers || allCustomers[0].length === 0) {
                                                return resHandler.errorRes(res, DATA_CONSTANT.API_RESPONSE_CODE.ERROR, STATE.EMPTY, { messageContent: MESSAGE_CONSTANT.NOT_CREATED(moduleName), err: null, data: null });
                                            }
                                            allCustomersList = allCustomers[0];
                                        }
                                        const existsCustomer = _.find(allCustomersList, item => item.mfgName === importEqpItem.customerId);
                                        if (!existsCustomer) {
                                            if (!importEqpItem.error) {
                                                importEqpItem.error = '';
                                            }
                                            importEqpItem.error += MESSAGE_CONSTANT.IMPORT_EQUIPMENT.CUSTOMER_NOT_EXISTS;
                                            isError = true;
                                            isImportFileContainError = true;
                                        } else {
                                            tempEqpObj = Object.assign({}, importEqpItem);
                                            tempEqpObj.eqpOwnershipTypeID = existsOwnerShipType.gencCategoryID;
                                            tempEqpObj.bankName = null;
                                            tempEqpObj.customerId = existsCustomer.id;
                                            if (!isError && importEqpItem.equipmentAs === 'S') {
                                                return module.exports.setBinAndAssemblyIdForSample(req, res, importEqpItem, isImportFileContainError, existsOwnerShipType, isError, Model, tempEqpObj, equipmentList).then(() => {
                                                    // console.log("Success");
                                                    isImportFileContainError = importEqpItem.error ? true : false;
                                                }).catch((err) => {
                                                    console.trace();
                                                    console.error(err);
                                                    return resHandler.errorRes(res, DATA_CONSTANT.API_RESPONSE_CODE.ERROR, STATE.EMPTY, { messageContent: MESSAGE_CONSTANT.GLOBAL.SOMTHING_WRONG, err: err, data: null });
                                                });
                                            } else if (!isError) {
                                                if (importEqpItem.equipmentAs !== 'S') {
                                                    tempEqpObj.binId = null;
                                                    tempEqpObj.assyId = null;
                                                }
                                                return module.exports.createEquipmentEntityDataFromFile(req, Model, tempEqpObj).then(() => {
                                                    // console.log("Success");
                                                }).catch((err) => {
                                                    console.trace();
                                                    console.error(err);
                                                    return resHandler.errorRes(res, DATA_CONSTANT.API_RESPONSE_CODE.ERROR, STATE.EMPTY, { messageContent: MESSAGE_CONSTANT.GLOBAL.SOMTHING_WRONG, err: err, data: null });
                                                });
                                            }
                                        }
                                    });
                                } else { /* if ownership type is other than LOAN/Customer  */
                                    tempEqpObj = Object.assign({}, importEqpItem);
                                    tempEqpObj.eqpOwnershipTypeID = existsOwnerShipType.gencCategoryID;
                                    tempEqpObj.bankName = null;
                                    tempEqpObj.customerId = null;
                                }
                                if (!isError && importEqpItem.equipmentAs === 'S') {
                                    return module.exports.setBinAndAssemblyIdForSample(req, res, importEqpItem, isImportFileContainError, existsOwnerShipType, isError, Model, tempEqpObj, equipmentList).then(() => {
                                        isImportFileContainError = importEqpItem.error ? true : false;
                                    }).catch((err) => {
                                        console.trace();
                                        console.error(err);
                                        return resHandler.errorRes(res, DATA_CONSTANT.API_RESPONSE_CODE.ERROR, STATE.EMPTY, { messageContent: MESSAGE_CONSTANT.GLOBAL.SOMTHING_WRONG, err: err, data: null });
                                    });
                                } else if (!isError) {
                                    if (importEqpItem.equipmentAs !== 'S') {
                                        tempEqpObj.binId = null;
                                        tempEqpObj.assyId = null;
                                    }
                                    return module.exports.createEquipmentEntityDataFromFile(req, Model, tempEqpObj).then(() => {
                                        // console.log("Success");
                                    }).catch((err) => {
                                        console.trace();
                                        console.error(err);
                                        return resHandler.errorRes(res, DATA_CONSTANT.API_RESPONSE_CODE.ERROR, STATE.EMPTY, { messageContent: MESSAGE_CONSTANT.GLOBAL.SOMTHING_WRONG, err: err, data: null });
                                    });
                                } else {
                                    isImportFileContainError = true;
                                }
                            }
                        } else {
                            tempEqpObj = Object.assign({}, importEqpItem);
                            tempEqpObj.bankName = null;
                            tempEqpObj.customerId = null;
                            return module.exports.createEquipmentEntityDataFromFile(req, Model, tempEqpObj).then(() => {
                                // console.log("Success");
                            }).catch((err) => {
                                console.trace();
                                console.error(err);
                                return resHandler.errorRes(res, DATA_CONSTANT.API_RESPONSE_CODE.ERROR, STATE.EMPTY, { messageContent: MESSAGE_CONSTANT.GLOBAL.SOMTHING_WRONG, err: err, data: null });
                            });
                        }
                    }).then(() => {
                        if (isImportFileContainError) {
                            return resHandler.successRes(res, DATA_CONSTANT.API_RESPONSE_CODE.SUCCESS, STATE.SUCCESS, { isError: true, importEntityFileData: importEquipmentData });
                        } else {
                            return resHandler.successRes(res, DATA_CONSTANT.API_RESPONSE_CODE.SUCCESS, STATE.SUCCESS, null, MESSAGE_CONSTANT.CREATED(moduleName));
                        }
                    });
                }).catch((err) => {
                    console.trace();
                    console.error(err);
                    return resHandler.errorRes(res, DATA_CONSTANT.API_RESPONSE_CODE.ERROR, STATE.EMPTY, { messageContent: MESSAGE_CONSTANT.GLOBAL.SOMTHING_WRONG, err: err, data: null });
                });
            }).catch((err) => {
                console.trace();
                console.error(err);
                return resHandler.errorRes(res, DATA_CONSTANT.API_RESPONSE_CODE.ERROR, STATE.EMPTY, { messageContent: MESSAGE_CONSTANT.GLOBAL.SOMTHING_WRONG, err: err, data: null });
            });
        } else {
            module.exports.addMasterDataFromFile(req, res, Model);
        }
    },

    addMasterDataFromFile: (req, res, Model) => {
        COMMON.setModelCreatedArrayFieldValue(req.user, req.body.importEntityFileData);
        Model.bulkCreate(req.body.importEntityFileData).then(() => resHandler.successRes(res, DATA_CONSTANT.API_RESPONSE_CODE.SUCCESS, STATE.SUCCESS, null, MESSAGE_CONSTANT.CREATED(moduleName))).catch((err) => {
            console.trace();
            console.error(err);
            return resHandler.errorRes(res, DATA_CONSTANT.API_RESPONSE_CODE.ERROR, STATE.EMPTY, { messageContent: MESSAGE_CONSTANT.GLOBAL.SOMTHING_WRONG, err: err, data: null });
        });
    },

    /* add Equipment entity data to DB from import document  */
    createEquipmentEntityDataFromFile: (req, Model, tempEqpObj) => {
        tempEqpObj.isActive = true;
        // tempEqpObj.createdBy = COMMON.getRequestUserID(req);
        COMMON.setModelCreatedObjectFieldValue(req.user, tempEqpObj);
        /* set object blank properties to null */
        Object.keys(tempEqpObj).forEach((key) => {
            tempEqpObj[key] = tempEqpObj[key] ? tempEqpObj[key] : null;
        });
        tempEqpObj.calibrationRequired = tempEqpObj.calibrationRequired ? tempEqpObj.calibrationRequired : false;
        return Model.create(tempEqpObj);
    },

    setBinAndAssemblyIdForSample: (req, res, importEqpItem, isImportFileContainError, existsOwnerShipType, isError, Model, tempEqpObj, equipmentList) => {
        const {
            Component,
            BinMst
        } = req.app.locals.models;
        const promises = [];
        var binName;
        var assemblyName;
        promises.push(BinMst.findOne({
            where: {
                Name: importEqpItem.binId
            },
            attributes: ['id', 'Name']
        }).then((resp) => {
            binName = resp;
        })
        );
        promises.push(Component.findOne({
            where: {
                PIDCode: importEqpItem.assyId,
                category: 3
            },
            attributes: ['id', 'PIDCode', 'mfgPN']
        }).then((resp) => {
            assemblyName = resp;
        })
        );
        return Promise.all(promises).then(() => {
            if (!binName || binName.length === 0) {
                if (!importEqpItem.error) {
                    importEqpItem.error = '';
                }
                const messageObj = Object.assign({}, MESSAGE_CONSTANT.GLOBAL.NOT_EXISTS);
                messageObj.message = COMMON.stringFormat(messageObj.message, 'Bin');
                importEqpItem.error += messageObj.message;
                isError = true;
                isImportFileContainError = true;
                return isImportFileContainError;
            } else if (!assemblyName || assemblyName.length === 0) {
                if (!importEqpItem.error) {
                    importEqpItem.error = '';
                }
                const messageObj = Object.assign({}, MESSAGE_CONSTANT.GLOBAL.NOT_EXISTS);
                messageObj.message = COMMON.stringFormat(messageObj.message, 'Assembly');
                importEqpItem.error += messageObj.message;
                isError = true;
                isImportFileContainError = true;
                return isImportFileContainError;
            } else {
                const equipmentAsType = _.find(equipmentList, item => item.equipmentAs === importEqpItem.equipmentAs && parseInt(item.assyId) === parseInt(assemblyName.id));
                if (equipmentAsType) {
                    if (!importEqpItem.error) {
                        importEqpItem.error = '';
                    }
                    const messageObj = Object.assign({}, MESSAGE_CONSTANT.GLOBAL.ALREADY_EXISTS);
                    messageObj.message = COMMON.stringFormat(messageObj.message, 'Assembly sample');
                    importEqpItem.error += messageObj.message;
                    isError = true;
                    isImportFileContainError = false;
                    return isImportFileContainError;
                }
                if (!isError) {
                    tempEqpObj.binId = binName.id;
                    tempEqpObj.assyId = assemblyName.id;
                    tempEqpObj.eqpOwnershipTypeID = existsOwnerShipType.gencCategoryID;
                    tempEqpObj.eqpOwnershipTypeID = existsOwnerShipType.gencCategoryID;
                    tempEqpObj.placedInServiceDate = null;
                    tempEqpObj.outOfServiceDate = null;
                    return module.exports.createEquipmentEntityDataFromFile(req, Model, tempEqpObj).then(() => STATE.SUCCESS).catch((err) => {
                        console.trace();
                        console.error(err);
                        return resHandler.errorRes(res, DATA_CONSTANT.API_RESPONSE_CODE.ERROR, STATE.EMPTY, { messageContent: MESSAGE_CONSTANT.GLOBAL.SOMTHING_WRONG, err: err, data: null });
                    });
                } else {
                    return isImportFileContainError;
                }
            }
        });
    }

};