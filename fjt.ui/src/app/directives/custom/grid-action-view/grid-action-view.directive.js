(function () {
  'use strict';

  angular
    .module('app.core')
    .directive('gridActionView', gridActionView);

  /** @ngInject */
  function gridActionView($state, $timeout, $mdSidenav,
    CORE, BaseService, TRANSACTION) {
    var directive = {
      restrict: 'E',
      scope: {
        grid: '=',
        row: '=',
        numberOfActionButton: '=?',
        rowEntity: '=?'
      },
      templateUrl: 'app/directives/custom/grid-action-view/grid-action-view.html',
      link: function (scope, element, attrs) {
        let uiGridMenuItems = [];
        //let AuditimagePath = stringFormat(CORE.IMAGE_ICON_PATH, WebsiteBaseUrl, "audit.png");
        let ModifyPriceimagePath = stringFormat(CORE.IMAGE_ICON_PATH, WebsiteBaseUrl, 'price-modify.png');
        let BOMimagePath = stringFormat(CORE.IMAGE_ICON_PATH, WebsiteBaseUrl, 'bom-icon.png');
        let CartOnlineImagePath = stringFormat(CORE.IMAGE_ICON_PATH, WebsiteBaseUrl, 'online.png');
        let CartOfflineImagePath = stringFormat(CORE.IMAGE_ICON_PATH, WebsiteBaseUrl, 'offline.png');
        let CartShowGrayImagePath = stringFormat(CORE.IMAGE_ICON_PATH, WebsiteBaseUrl, 'show-gray.png');
        let CartShowGreenImagePath = stringFormat(CORE.IMAGE_ICON_PATH, WebsiteBaseUrl, 'show-green.png');
        let releaseImagePath = stringFormat(CORE.IMAGE_ICON_PATH, WebsiteBaseUrl, 'release.png');

        function gridActionMenu() {
          var displayCount = scope.numberOfActionButton ? scope.numberOfActionButton : 2;
          uiGridMenuItems = [
            { name: 'Update', icon: 'icon-pencil', isView: scope.grid.appScope.$parent.vm.isUpdatable, callback: function ($event) { scope.grid.appScope.$parent.vm.updateRecord(scope.row, $event) }, isDisabled: scope.row.entity.isDisabledUpdate, isFeatureBase: scope.grid.appScope.$parent.vm.editFeatureBased },
            //{ name: 'Delete', icon: 'icon-trash', isView: !scope.grid.appScope.$parent.vm.isHideDelete, callback: function ($event) { scope.grid.appScope.$parent.vm.deleteRecord(scope.row.entity) }, isDisabled: scope.row.entity.isDisabledDelete },
            { name: 'View', icon: 'icon-eye', isView: scope.grid.appScope.$parent.vm.viewWOProfile, callback: function ($event) { scope.grid.appScope.$parent.vm.viewRecordProfile(scope.row, $event) }, isDisabled: false },
            { name: 'View', icon: 'icon-eye', isView: scope.grid.appScope.$parent.vm.viewPackingSlipDet, callback: function ($event) { scope.grid.appScope.$parent.vm.viewPackingSlipDetRecord(scope.row, $event) }, isDisabled: false },
            { name: 'BOM', icon: 't-icons-bom', isView: scope.grid.appScope.$parent.vm.isBOM, callback: function ($event) { scope.grid.appScope.$parent.vm.getBOM(scope.row.entity, $event) }, isDisabled: false },
            { name: 'Copy', icon: 'icon-content-copy', isView: scope.grid.appScope.$parent.vm.isCopy, callback: function ($event) { scope.grid.appScope.$parent.vm.copyRecord(scope.row, $event) }, isDisabled: scope.row.entity.isDisabledCopy },
            { name: 'Copy RFQ & Save', icon: 'icon-content-copy', isView: scope.grid.appScope.$parent.vm.isCopyRFQ, callback: function ($event) { scope.grid.appScope.$parent.vm.copyRFQ(scope.row.entity, $event) }, isDisabled: scope.row.entity.isCopyRFQ },
            { name: 'Copy BOM & Save', icon: 'icon-content-copy', isView: scope.grid.appScope.$parent.vm.isCopyBOM, callback: function ($event) { scope.grid.appScope.$parent.vm.copyBOM(scope.row.entity, $event) }, isDisabled: scope.row.entity.isCopyBOM },
            { name: 'Copy Template', icon: 'icon-content-copy', isView: scope.grid.appScope.$parent.vm.isCopyTemplate, callback: function ($event) { scope.grid.appScope.$parent.vm.copyMasterTemplate(scope.row.entity, $event) }, isDisabled: scope.row.entity.isDisabledCopyTemplate },
            { name: 'Create Duplicate Contact Person', icon: 't-icons-duplicate-contact-person add-icon', isView: scope.grid.appScope.$parent.vm.isCreateDuplicateContactPerson, callback: function ($event) { scope.grid.appScope.$parent.vm.createDuplicateContactPerson(scope.row.entity, $event) }, isDisabled: false },
            { name: 'View Timeline', icon: 't-icons-history-text', isView: scope.grid.appScope.$parent.vm.isTimeline, callback: function ($event) { scope.grid.appScope.$parent.vm.viewEmployeeTimeline(scope.row, $event) }, isDisabled: false, isShowSqureIcon: true },
            { name: 'View', icon: 'icon-eye', isView: (scope.grid.appScope.$parent.vm.view || (scope.grid.appScope.pagingInfo.isMesurmentTypeView)), callback: function ($event) { scope.grid.appScope.$parent.vm.viewRecord(scope.row, $event) }, isDisabled: false, hasDatailData: scope.row.entity.hasDatailData },
            { name: 'Copy Work Order', icon: 'icon-content-copy', isView: scope.grid.appScope.$parent.vm.isCopyWorkOrder, callback: function ($event) { scope.grid.appScope.$parent.vm.copyRecord(scope.row, $event) }, isDisabled: scope.row.entity.isDisabledCopy },
            { name: 'Delete', icon: 'icon-trash', isView: (scope.grid.appScope.$parent.vm.isSalesDelete && !scope.grid.appScope.$parent.vm.isFeederStatus), callback: function ($event) { scope.grid.appScope.$parent.vm.deleteRecord(scope.row) }, isDisabled: scope.grid.appScope.$parent.vm.isDisable || scope.row.entity.isDisabledDelete },
            { name: 'BOM', icon: 'icon-export', isView: scope.grid.appScope.$parent.vm.isbom, callback: angular.noop, isDisabled: false },
            { name: CORE.LabelConstant.UMIDManagement.TransferMaterial, icon: 't-icons-transfer-material', isView: scope.grid.appScope.$parent.vm.showTransfer, callback: function ($event) { scope.grid.appScope.$parent.vm.transferStock(scope.row.entity, $event) }, isDisabled: !scope.row.entity.pkgQty },
            { name: 'Count Material', icon: 't-icons-count111', isView: scope.grid.appScope.$parent.vm.showTransfer, callback: function ($event) { scope.grid.appScope.$parent.vm.countMaterial(scope.row.entity, $event) }, isDisabled: false, isShowSqureIcon: true },
            // { name: scope.row.entity.ledColorName, icon: 'icon-lightbulb-outline', callback: function ($event) { scope.grid.appScope.$parent.vm.showLightForUMID(scope.row.entity, $event) }, isView: scope.grid.appScope.$parent.vm.colorStatus, ledColorCssClass: scope.row.entity.ledColorCssClass, isDisabled: (scope.row.entity.warehouseType != TRANSACTION.warehouseType.SmartCart.key) || (!scope.row.entity.uid) || (scope.row.entity.isTransit) },
            { name: 'Xfer Bin', icon: 't-icons-xfer-bin', isView: scope.grid.appScope.$parent.vm.showBinTransfer, callback: function ($event) { scope.grid.appScope.$parent.vm.transferBin(scope.row.entity, $event) }, isDisabled: !scope.row.entity.allowBinTransfer, isShowSqureIcon: true },
            { name: scope.row.entity.ledColorName, icon: 'icon-lightbulb-outline', callback: function ($event) { scope.grid.appScope.$parent.vm.showLightForUMID(scope.row.entity, $event) }, isView: scope.grid.appScope.$parent.vm.colorStatus, ledColorCssClass: scope.row.entity.ledColorCssClass, isDisabled: (scope.row.entity.warehouseType != TRANSACTION.warehouseType.SmartCart.key) || (!scope.row.entity.uid) || (scope.row.entity.isTransit) },
            { name: 'Print', icon: 'icon-printer', iconDisabled: scope.row.entity.isPrintBtnDisable ? 'icon-printer' : 'mdi mdi-spin mdi-loading', isView: scope.grid.appScope.$parent.vm.isPrinted, callback: function ($event) { scope.grid.appScope.$parent.vm.printRecord(scope.row) }, isDisabled: scope.row.entity.isPrintDisable || scope.row.entity.isPrintBtnDisable },
            { name: 'Print (Reporting Tool)', icon: 'icon-printer', iconDisabled: scope.row.entity.isPrintBtnDisableReportingTool ? 'icon-printer' : 'mdi mdi-spin mdi-loading', isView: scope.grid.appScope.$parent.vm.isPrintedReportingTool, callback: function ($event) { scope.grid.appScope.$parent.vm.printRecordFromReportingTool(scope.row) }, isDisabled: scope.row.entity.isPrintDisableReportingTool || scope.row.entity.isPrintBtnDisableReportingTool },
            { name: 'Print Debit Memo Report', icon: 'icon-printer', iconDisabled: scope.row.entity.isDisabledPrintCreditMemoAndInvoice ? 'icon-printer' : 'mdi mdi-spin mdi-loading', isView: scope.grid.appScope.$parent.vm.isPrintDebitMemoReport, callback: function ($event) { scope.grid.appScope.$parent.vm.printDebitMemoReport(scope.row, false) }, isDisabled: scope.row.entity.isDisabledPrintDebitMemoReport || scope.row.entity.isDisabledPrintCreditMemoAndInvoice },
            { name: 'Download', icon: 'icon-download', iconDisabled: scope.row.entity.isDisabledPrintCreditMemoAndInvoice ? 'icon-download' : 'mdi mdi-spin mdi-loading', isView: scope.grid.appScope.$parent.vm.isDownload, callback: function ($event) { scope.grid.appScope.$parent.vm.onDownload(scope.row) }, isDisabled: scope.row.entity.isDownloadDisabled },
            { name: 'Download (Reporting Tool)', icon: 'icon-download', iconDisabled: scope.row.entity.isDisabledPrintDebitMemoReport ? 'icon-download' : 'mdi mdi-spin mdi-loading', isView: scope.grid.appScope.$parent.vm.isDownloadReportingTool, callback: function ($event) { scope.grid.appScope.$parent.vm.onDownloadReportFromReportingTool(scope.row) }, isDisabled: scope.row.entity.isDownloadDisabledReportingTool },
            { name: 'Documents', icon: 'icon-file-document', isView: scope.grid.appScope.$parent.vm.documents, callback: function ($event) { scope.grid.appScope.$parent.vm.documents(scope.row, $event) }, isDisabled: false },
            { name: 'View Formula', icon: 'icons-view-formula', isView: (scope.grid.appScope.$parent.vm.isFormula || (scope.grid.appScope.pagingInfo.isUOMFormula)), callback: function ($event) { scope.grid.appScope.$parent.vm.viewFormula(scope.row, $event) }, isDisabled: scope.row.entity.isDisabledFormula },
            { name: 'Add Assembly ECO', icon: 't-icons-add-assembly-eco add-icon', isView: scope.grid.appScope.$parent.vm.isECORequest, callback: function ($event) { scope.grid.appScope.$parent.vm.addEcoRequest(scope.row) }, isDisabled: scope.row.entity.isDisabledECORequest },
            { name: 'Add Assembly DFM', icon: 't-icons-add-assembly-dfm add-icon', isView: scope.grid.appScope.$parent.vm.isDFMRequest, callback: function ($event) { scope.grid.appScope.$parent.vm.addDFMRequest(scope.row) }, isDisabled: scope.row.entity.isDisabledDFMRequest },
            { name: 'Change Status', icon: 't-icons-change-status change-icon', isView: scope.grid.appScope.$parent.vm.isFeederStatus, callback: function ($event) { scope.grid.appScope.$parent.vm.changeFeederStatus(scope.row.entity, $event) }, isDisabled: !scope.grid.appScope.$parent.vm.isAllowUpdateStatus },
            { name: scope.grid.appScope.$parent.vm.actionButtonName, icon: 't-icons-build-quantity-change-history change-icon', isView: scope.grid.appScope.$parent.vm.isQtyConfirmationlist, callback: function ($event) { scope.grid.appScope.$parent.vm.viewQtyConfirmationlist(scope.row, $event) }, isDisabled: false },
            { name: 'WO Status Change History', icon: 't-icons-work-status-change-history change-icon', isView: scope.grid.appScope.$parent.vm.isViewWOStatusChangeConfirmationList, callback: function ($event) { scope.grid.appScope.$parent.vm.viewWOStatusChangeConfirmationList(scope.row, $event) }, isDisabled: false },
            { name: 'Verify Part From Cloud', icon: 'icon-cloud-download', isView: scope.grid.appScope.$parent.vm.componentverify, callback: function ($event) { scope.grid.appScope.$parent.vm.componentVerification(scope.row.entity, $event) }, isDisabled: scope.row.entity.isCPN || scope.row.entity.isCustom || scope.row.entity.id < 0 || scope.row.entity.isOtherPart },
            { name: 'Go To BOM', icon: 't-icons-bom', isView: scope.grid.appScope.$parent.vm.isGoToBOM, callback: function ($event) { scope.grid.appScope.$parent.vm.goToBOM(scope.row.entity, $event) }, isDisabled: scope.row.entity.isGoToBOMDisabled, hasBOMLineCount: scope.row.entity.bomLineCount > 0 ? true : false },
            { name: 'Plan Kit', icon: 't-icons-plan-kit', isView: (scope.grid.appScope.$parent.vm.salesOrderList || scope.grid.appScope.$parent.vm.kitList), callback: function ($event) { scope.grid.appScope.$parent.vm.goToPlannPurchase(scope.row, $event) }, isDisabled: !scope.row.entity.salesOrderDetailId || scope.row.entity.isSkipKitCreation || (scope.row.entity.partCategory === CORE.PartCategory.Component) || scope.row.entity.isSubAssembly },
            { name: 'Release Detail', icon: 't-icons-release-line', isView: (scope.grid.appScope.$parent.vm.salesOrderList), hasDatailData: scope.row.entity.ledColorCssClass, callback: function ($event) { scope.grid.appScope.$parent.vm.goToReleaseDetail(scope.row, $event) }, isDisabled: !scope.row.entity.salesOrderDetailId || scope.row.entity.blanketPOOption === 2 || (scope.row.entity.partType === CORE.PartType.Other) },
            { name: 'View Assembly Stock Details', icon: 't-icons-view-assembly-stock', isView: scope.grid.appScope.$parent.vm.isViewAssembly, callback: function ($event) { scope.grid.appScope.$parent.vm.ViewAssemblyStockStatus(scope.row, $event) }, isDisabled: scope.row.entity.isDisabledAddInvoice || (scope.row.entity.partCategory === CORE.PartCategory.Component) },
            { name: 'Assembly At Glance', icon: 't-icons-assembly-at-glance', isView: scope.grid.appScope.$parent.vm.isAssyAtGlance, callback: function ($event) { scope.grid.appScope.$parent.vm.getAssyAtGlance(scope.row.entity, $event) }, isDisabled: scope.row.entity.disableAssyAtGlance || (scope.row.entity.partCategory === CORE.PartCategory.Component) },
            { name: 'Sales Order Change History', icon: 't-icons-so-change-history change-icon', isView: scope.grid.appScope.$parent.vm.salesorderChangesHistory, callback: function ($event) { scope.grid.appScope.$parent.vm.opensalesorderChangesHistoryAuditLog(scope.row, $event) }, isDisabled: false, isShowSqureIcon: true },
            { name: 'Release/Return Kit', image: releaseImagePath, isView: scope.grid.appScope.$parent.vm.isKitRelease, callback: function ($event) { scope.grid.appScope.$parent.vm.kitRelease(scope.row, $event) }, isDisabled: scope.row.entity.isDisabledKitRelease || (scope.row.entity.partCategory === CORE.PartCategory.Component), isShowRelease: scope.row.entity.isSetPlanCountBackground },
            { name: 'Approve Invoice', icon: 't-icons-approve-invoice', isView: scope.grid.appScope.$parent.vm.isShowApproveInvoice, callback: function ($event) { scope.grid.appScope.$parent.vm.approveInvoice(scope.row.entity, $event); }, isDisabled: (!scope.row.entity.invoiceRequireManagementApproval || scope.row.entity.invoiceApprovalStatus !== 2 || !scope.grid.appScope.$parent.vm.allowSupplierInvoiceApproval), isFeatureBase: true },
            { name: 'Add Refund', icon: 'icons-add-supplier-refund', isView: scope.grid.appScope.$parent.vm.isAddSupplierRefund, callback: function ($event) { scope.grid.appScope.$parent.vm.addSupplierRefund(scope.row.entity, $event); }, isDisabled: (scope.row.entity.receiptType === 'I' || !scope.row.entity.markedForRefund) },
            { name: 'Halt/Resume History', icon: 't-icons-halt-resume-history', isView: scope.grid.appScope.$parent.vm.isHaltResumeHistory, callback: function ($event) { scope.grid.appScope.$parent.vm.haltResumeHistoryList(scope.row, $event) }, isDisabled: scope.row.entity.isDisabledHaltResumeHistory },
            { name: scope.row.entity.isCancle ? 'Undo Cancel' : 'Cancel Sales Order', icon: scope.row.entity.isCancle ? 't-icons-undo cancel-icon' : 't-icons-so cancel-icon', isView: scope.grid.appScope.$parent.vm.iscancle, callback: function ($event) { scope.grid.appScope.$parent.vm.isCancleReason(scope.row, $event) }, isDisabled: (scope.row.entity.isCancle ? false : scope.row.entity.isDisabledCancle) || !scope.row.entity.salesOrderDetailId },
            { name: 'User Change Request', icon: 't-icons-user-change-request change-icon', isView: scope.grid.appScope.$parent.vm.tempWorkorderReview, callback: function ($event) { scope.grid.appScope.$parent.vm.openTempWorkorderReview(scope.row, $event, true) }, isDisabled: scope.row.entity.isDisabledWorkorderReview },
            { name: 'Work Order Change History', icon: 't-icons-wo-change-history change-icon', isView: scope.grid.appScope.$parent.vm.workorderChangesHistory, callback: function ($event) { scope.grid.appScope.$parent.vm.openWorkorderChangesHistoryAuditLog(scope.row) }, isShowSqureIcon: true, isDisabled: false },
            { name: 'View Difference', icon: 't-icons-view-difference', isView: scope.grid.appScope.$parent.vm.ViewDiffOfChange, callback: function ($event) { scope.grid.appScope.$parent.vm.openDifferenceOfChange(scope.row, $event) }, isDisabled: false, isShowSqureIcon: true },
            { name: 'Manually Added Activity History', icon: 'icons-manualy-added-activity-history', isView: scope.grid.appScope.$parent.vm.ViewWorkorderManualEntryList, callback: function ($event) { scope.grid.appScope.$parent.vm.openWorkorderManualEntryList(scope.row) }, isDisabled: scope.row.entity.isDisabledManualEntryList },
            { name: 'Add Activity Entry Manually', icon: 'icons-add-activity-entry-manually', isView: scope.grid.appScope.$parent.vm.addWorkorderManualEntry, callback: function ($event) { scope.grid.appScope.$parent.vm.openAddWorkorderManualEntryPage(scope.row) }, isDisabled: scope.row.entity.isDisabledAddManualEntry },
            { name: 'Assign Feature', icon: 't-icons-assign-feature', isView: scope.grid.appScope.$parent.vm.viewAssignFeature, callback: function ($event) { scope.grid.appScope.$parent.vm.AssignFeature(scope.row.entity, $event) }, isDisabled: scope.row.entity.isDisabledAssignFeature },
            { name: 'Comments', icon: 'icon-comment-text-outline', isView: scope.grid.appScope.$parent.vm.isComment, callback: function ($event) { scope.grid.appScope.$parent.vm.addComment(scope.row, $event) }, isDisabled: false },
            { name: 'Add MFR PN', icon: 't-icons-add-mfr-pn add-icon', isView: scope.grid.appScope.$parent.vm.isMFGPN, callback: function ($event) { scope.grid.appScope.$parent.vm.addMFGPN(scope.row.entity, $event) }, isDisabled: false },
            { name: 'Update Line Level Price', icon: 'icons-update-line-level-price', isView: scope.grid.appScope.$parent.vm.isPricing, callback: function ($event) { scope.grid.appScope.$parent.vm.getPricingApis(scope.row.entity, $event) }, isDisabled: !scope.row.entity.isPurchase || scope.row.entity.isCustom || scope.row.entity.isDisabled || scope.grid.appScope.$parent.vm.isSummaryComplete || (scope.grid.appScope.$parent.vm.bom && (!scope.grid.appScope.$parent.vm.bom.isActivityStart || (scope.grid.appScope.$parent.vm.bom.activityStartBy != scope.grid.appScope.$parent.vm.loginUserId))) || (scope.grid.appScope.$parent.vm.bom && !scope.grid.appScope.$parent.vm.bom.isMaterialAllow) || scope.row.entity.restrictCPNUseInBOMStep || !scope.row.entity.restrictCPNUsePermanentlyStep || !scope.row.entity.restrictCPNUseWithPermissionStep },
            { name: 'Show Pricing Status', icon: 't-icons-show-pricing-status', isView: scope.grid.appScope.$parent.vm.isPricingStatus, callback: function (data, $event) { scope.grid.appScope.$parent.vm.showPricingStatus(scope.row, data, $event) }, isDisabled: !scope.row.entity.isPurchase, isPricing: scope.grid.appScope.$parent.vm.isShowPricingStatus, isShowSqureIcon: true },
            { name: 'Assign Operations', icon: 't-icons-assign-operation', isView: scope.grid.appScope.$parent.vm.isViewOperaiton, callback: function ($event) { scope.grid.appScope.$parent.vm.showOperationAssigned(scope.row.entity, $event) }, isDisabled: false },
            { name: 'Alias', icon: 't-icons-alias', isView: (scope.grid.appScope.$parent.vm.isViewAlias), callback: function ($event) { scope.grid.appScope.$parent.vm.showAlias(scope.row.entity, $event) }, isDisabled: scope.row.entity.isDisabledAlias },
            { name: 'Add Good Part', icon: 't-icons-good-part add-icon', isView: scope.grid.appScope.$parent.vm.isgoodPart, callback: function ($event) { scope.grid.appScope.$parent.vm.goodPart(scope.row.entity, $event) } },
            { name: 'Verify Price Category', icon: 't-icons-verify-price-category', isView: scope.grid.appScope.$parent.vm.pricecategory, callback: function ($event) { scope.grid.appScope.$parent.vm.getPriceCategory(scope.row.entity, $event) }, isDisabled: !scope.row.entity.pkgQty },
            { name: 'Take Picture', icon: 't-icons-take-picture', isView: scope.grid.appScope.$parent.vm.showcamera, callback: function ($event) { scope.grid.appScope.$parent.vm.takePicture(scope.row.entity, $event) }, isDisabled: false },
            { name: 'Transfer Label', icon: 't-icons-transfer-label', isView: scope.grid.appScope.$parent.vm.showTransferLabel, callback: function ($event) { scope.grid.appScope.$parent.vm.transferLabel(scope.row.entity, $event) }, isDisabled: false },
            { name: 'Copy Part Details', icon: 'icons-copy-part-details', isView: scope.grid.appScope.$parent.vm.isCopyPart, callback: function ($event) { scope.grid.appScope.$parent.vm.copyPart(scope.row.entity, $event) }, isDisabled: !scope.row.entity.isCopyPart },
            { name: 'Delete BOM', icon: 't-icons-delete-bom', isView: scope.grid.appScope.$parent.vm.isDeleteBOM, callback: function ($event) { scope.grid.appScope.$parent.vm.deleteBOM(scope.row.entity, $event) }, isDisabled: scope.row.entity.isBOMDelete, isFeatureBase: true },
            { name: 'Create Duplicate Part', icon: 't-icons-add-duplicate-part add-icon', isView: scope.grid.appScope.$parent.vm.isCreateDuplicatePart, callback: function ($event) { scope.grid.appScope.$parent.vm.createDuplicatePart(scope.row.entity, $event) }, isDisabled: false },
            //This action button `history` is reflected in UMID-management,part-marster,RFQ list,Warehousemst and binmst
            { name: scope.grid.appScope.$parent.vm.actionButtonName, icon: scope.grid.appScope.$parent.vm.umidHistoryIcon || 't-icons-history-text', isView: scope.grid.appScope.$parent.vm.showUMIDHistory, callback: function ($event) { scope.grid.appScope.$parent.vm.UMIDHistory(scope.row.entity, $event) }, isDisabled: scope.row.entity.isDisabledUMIDHistory ? scope.row.entity.isDisabledUMIDHistory : false, isShowSqureIcon: true },
            { name: 'Export Costed BOM Consolidate', icon: 't-icons-export-costed-bom export-icon', isView: scope.grid.appScope.$parent.vm.isExportQuoteReport, callback: function ($event) { scope.grid.appScope.$parent.vm.exportQuoteReport(scope.row.entity, $event) }, isDisabled: !scope.row.entity.isExportQuoteReport },
            { name: 'Export Costed BOM Per Line', icon: 't-icons-export-costed-bom-per-line export-icon', isView: scope.grid.appScope.$parent.vm.isExportQuoteReport, callback: function ($event) { scope.grid.appScope.$parent.vm.exportCostReport(scope.row.entity, $event) }, isDisabled: !scope.row.entity.isExportQuoteReport },
            { name: 'Copy and Modify Price', icon: 'icons-pricing', isView: scope.grid.appScope.$parent.vm.isModifyPrice, callback: function ($event) { scope.grid.appScope.$parent.vm.modifyPrice(scope.row, $event) }, isDisabled: scope.grid.appScope.$parent.vm.ishistory || scope.row.entity.refSupplierQuoteDateValue },
            { name: 'Suggested Alternates', icon: 't-icons-suggested-alternates', isView: scope.grid.appScope.$parent.vm.isSuggestedParts, callback: function ($event) { scope.grid.appScope.$parent.vm.suggestedAlternates(scope.row, $event) }, isDisabled: false },
            { name: 'View Quote Detail', icon: 't-icons-view-quote-detail', isView: scope.grid.appScope.$parent.vm.isAssyAssyQuoteHistory, callback: function ($event) { scope.grid.appScope.$parent.vm.getAssyQuoteHistory(scope.row.entity, $event) }, isDisabled: false },
            { name: 'Change Assembly Quote Status', icon: 't-icons-change-quote-status change-icon', isView: scope.grid.appScope.$parent.vm.isAssyChangeStatus, callback: function ($event) { scope.grid.appScope.$parent.vm.rfqAssyChangeStatus(scope.row.entity, $event) }, isDisabled: !scope.row.entity.rfqAssyChangeStatus },
            { name: 'Convert WO To Operation Template', icon: 't-icons-convert-wo-to-operation-template change-icon', isView: scope.grid.appScope.$parent.vm.isConvertToTemplate, callback: function ($event) { scope.grid.appScope.$parent.vm.convertToMasterTemplate(scope.row.entity, $event) }, isDisabled: scope.row.entity.isDisabledConvertToTemplate },
            { name: 'Terminate & Transfer History', icon: 't-icons-terminate-transfer-history', isView: scope.grid.appScope.$parent.vm.isTerminateAndTransfer, callback: function ($event) { scope.grid.appScope.$parent.vm.showTerminateAndTransfer(scope.row, $event, true) }, isDisabled: scope.row.entity.isDisabledTerminateAndTransfer },
            { name: 'R&D Narrative History', icon: 't-icons-r-d-history', isView: scope.grid.appScope.$parent.vm.isWorkorderNarrativeHistory, callback: function ($event) { scope.grid.appScope.$parent.vm.goToNarrativeHistory(scope.row, $event) }, isDisabled: scope.row.entity.isDisbaledWorkorderNarrativeHistory, isShowSqureIcon: true },
            { name: 'Assign Form Rights To Personnel', icon: 'icons-add-form-owner', isView: scope.grid.appScope.$parent.vm.isInviteEmployee, callback: function ($event) { scope.grid.appScope.$parent.vm.inviteEmployee(scope.row.entity, $event) }, isDisabled: false },
            { name: 'Kit Allocation', icon: 'icons-kit-allocation-preparation', isView: scope.grid.appScope.$parent.vm.kitRelease, callback: function ($event) { scope.grid.appScope.$parent.vm.openkitRelease(scope.row, $event) }, isDisabled: !scope.row.entity.salesOrderDetailId },
            { name: 'Regenerate Token', icon: 'icons-regenerate-token', isView: scope.grid.appScope.$parent.vm.customerType == 0, callback: function ($event) { scope.grid.appScope.$parent.vm.generateToken(scope.row, $event) }, isDisabled: scope.row.entity.mfgCode != "DK" },
            { name: scope.grid.appScope.$parent.vm.addInvoiceActionButtonName, icon: 'icon-playlist-plus', isView: scope.grid.appScope.$parent.vm.isAddInvoice, callback: function ($event) { scope.grid.appScope.$parent.vm.addInvoiceInPackingSlip(scope.row, $event) }, isDisabled: scope.row.entity.isDisabledAddInvoice },
            { name: 'View Geolocation', icon: 'icons-view-location', isView: scope.grid.appScope.$parent.vm.isViewAssyStockLocationDetails, callback: function ($event) { scope.grid.appScope.$parent.vm.viewAssyStockLocationDetails(scope.row, $event) }, isDisabled: scope.row.entity.isDisabledViewAssyStockLocationDetails },
            { name: 'View Stock Adjustment Details', icon: 't-icons-view-stock-adjustment', isView: scope.grid.appScope.$parent.vm.isViewStockAdjustment, callback: function ($event) { scope.grid.appScope.$parent.vm.ViewStockAdjustment(scope.row, $event) }, isDisabled: false },
            { name: 'Add Purchase List Details', icon: 'mdi mdi-cart-plus', isView: scope.grid.appScope.$parent.vm.isAddPurchaseDetails, callback: function ($event) { scope.grid.appScope.$parent.vm.AddPurchaseDetails(scope.row, $event) }, isDisabled: false },
            { name: 'Audit Smart Cart', icon: 't-icons-audit-action', isView: scope.grid.appScope.$parent.vm.isAudit, callback: function ($event) { scope.grid.appScope.$parent.$parent.vm.openAuditPage($event, scope.row) }, isDisabled: (scope.row.entity.warehouseType != TRANSACTION.warehouseType.SmartCart.key), isShowSqureIcon: true, isAuditIconCss: true },
            { name: 'Generate Bin', icon: 't-icons-bin add-icon', isView: scope.row.entity.isGenerateBin, callback: function ($event) { scope.grid.appScope.$parent.vm.generateBin(scope.row, $event) }, isDisabled: scope.row.entity.isDisabledGenerateBin },
            { name: 'Department To Department Transfer', icon: 't-icons-d2d-transfer', isView: scope.grid.appScope.$parent.vm.isWarehouseTransfer, callback: function ($event) { scope.grid.appScope.$parent.vm.transferWarehouse(scope.row.entity, $event) }, isDisabled: !scope.row.entity.isDisableWarehouseTransfer },
            { name: 'Warehouse To Warehouse Transfer', icon: 't-icons-w2w-transfer', isView: scope.grid.appScope.$parent.vm.isWHToWHTransfer, callback: function ($event) { scope.grid.appScope.$parent.vm.transferWarehouseToWarehouse(scope.row.entity, $event) }, isDisabled: !scope.row.entity.isDisableWHToWHTransfer, isShowSqureIcon: true, iswToWIconCss: true },
            { name: scope.row.entity.isCartOnline ? 'Online' : 'Offline', image: scope.row.entity.isCartOnline ? CartOnlineImagePath : CartOfflineImagePath, isView: scope.row.entity.isShowLight || scope.grid.appScope.$parent.vm.isShowLight, callback: function ($event) { scope.grid.appScope.$parent.vm.showLight(scope.row, $event) }, isDisabled: scope.row.entity.isDisabledShowLight, isCartOnline: scope.row.entity.isCartOnline },
            { name: 'Show Light', image: CartShowGrayImagePath, isView: scope.grid.appScope.$parent.vm.isShowKitAllocationLight, callback: function ($event) { scope.grid.appScope.$parent.vm.showKitAllocationLight(scope.row, $event) }, isDisabled: scope.row.entity.isDisabledShowKitAllocationLight },
            { name: 'Select Price', icon: 'icons-select-price', isView: scope.grid.appScope.$parent.vm.isApplyPrice, callback: function ($event) { scope.grid.appScope.$parent.vm.applyPurchasePrice(scope.row.entity, $event) }, isDisabled: false },
            { name: 'View Change History', icon: 't-icons-view-change-history change-icon', isView: scope.grid.appScope.$parent.vm.isViewChangeHistory, callback: function ($event) { scope.grid.appScope.$parent.vm.showChangeFeederDetails(scope.row, $event) }, isDisabled: scope.row.entity.isDisableChangeDetails },
            { name: 'View Verification History', icon: 't-icons-history-text', isView: scope.grid.appScope.$parent.vm.isViewVerificationHistory, callback: function ($event) { scope.grid.appScope.$parent.vm.showVerificationDetails(scope.row, $event) }, isDisabled: scope.row.entity.isDisableVerificationDetails },
            { name: 'Go To UMID Management', icon: 't-icons-umid-management', isView: scope.grid.appScope.$parent.vm.isGoToUMIDManagement, callback: function ($event) { scope.grid.appScope.$parent.vm.goToUMIDManagement(scope.row, $event) }, isDisabled: scope.row.entity.isDisableGoToUMIDManagement, isShowSqureIcon: true },
            { name: 'Restrict UMID', icon: 't-icons-restrict-umid', isView: scope.row.entity.isShowRestrictUMID, callback: function ($event) { scope.grid.appScope.$parent.vm.restrictUMID(scope.row, $event) }, isDisabled: false },
            { name: 'Unrestrict UMID', icon: 't-icons-unrestrict-umid', isView: scope.row.entity.isShowUnrestrictUMID, callback: function ($event) { scope.grid.appScope.$parent.vm.restrictUMID(scope.row, $event) }, isDisabled: false },
            { name: 'Restrict Error Code', icon: 't-icons-restrict-error-code', isView: scope.grid.appScope.$parent.vm.isRestrictErrorCode, callback: function ($event) { scope.grid.appScope.$parent.vm.goToRestrictErrorCode(scope.row, $event) }, isDisabled: false },
            { name: 'Restricted UMID History', icon: 't-icons-history-text', isView: scope.grid.appScope.$parent.vm.isShowRestrictUMIDHistory, callback: function ($event) { scope.grid.appScope.$parent.vm.restrictUMIDHistory(scope.row, $event) }, isDisabled: scope.row.entity.isDisableRestrictUMIDHistory, isShowSqureIcon: true },
            { name: 'Copy Part Alias Validations', icon: 'icon-content-copy', isView: scope.grid.appScope.$parent.vm.isCopyAliasPartValidations, callback: function ($event) { scope.grid.appScope.$parent.vm.copyAliasPartValidations(scope.row.entity, $event) }, isDisabled: false },
            { name: 'Message History', icon: 't-icons-history-text', isView: scope.grid.appScope.$parent.vm.isViewDynamicMessageHistory, callback: function ($event) { scope.grid.appScope.$parent.vm.viewDynamicMessageHistory(scope.row, $event) }, isDisabled: false, isShowSqureIcon: true },
            { name: 'Assign Personnel', icon: 't-icons-assign-personnel', isView: scope.grid.appScope.$parent.vm.isAssignPersonnel, callback: function ($event) { scope.grid.appScope.$parent.vm.openAssignPersonnel(scope.row.entity, $event) }, isDisabled: false },
            { name: CORE.LabelConstant.KitAllocation.CheckBuildFeasibility, isView: scope.grid.appScope.$parent.vm.isCheckKitFeasibility, callback: function ($event) { scope.grid.appScope.$parent.vm.checkKitFeasibility(scope.row, $event) }, isDisabled: scope.row.entity.isDisabledCheckKitFeasibility || (scope.row.entity.partCategory === CORE.PartCategory.Component) },
            { name: 'View Request Response', icon: 'icon-eye', isView: scope.grid.appScope.$parent.vm.showRequestResponse, callback: function ($event) { scope.grid.appScope.$parent.vm.openRequestResponseView(scope.row, $event) }, isDisabled: false },
            { name: 'Verify Label Template', icon: 't-icons-verify-label', isView: scope.grid.appScope.$parent.vm.isVerifyLabelTemplate, callback: function ($event) { scope.grid.appScope.$parent.vm.verifyLabelTemplate(scope.row, $event) }, isDisabled: false },
            { name: CORE.LabelConstant.UMIDManagement.TransferBulkMaterial, icon: 't-icons-transfer-bulk5', isView: scope.grid.appScope.$parent.vm.isBulkTransfer, callback: function ($event) { scope.grid.appScope.$parent.vm.bulkTransfer(scope.row, $event) }, isDisabled: scope.row.entity.isDisabledBulkTransfer },
            { name: scope.row.entity.kitAllocationHalt, image: scope.row.entity.kitAllocationHaltImage, isView: scope.grid.appScope.$parent.vm.isHaltResumeKitAllocation, callback: function ($event) { scope.grid.appScope.$parent.vm.haltResumeKitAllocation(scope.row, $event) }, isDisabled: scope.row.entity.isDisabledHaltResumeKitAllocation },
            { name: scope.row.entity.KitReleaseHalt, image: scope.row.entity.kitReleaseHaltImage, isView: scope.grid.appScope.$parent.vm.isHaltResumeKitRelease, callback: function ($event) { scope.grid.appScope.$parent.vm.haltResumeKitRelease(scope.row, $event) }, isDisabled: scope.row.entity.isDisabledHaltResumeKitRelease },
            { name: scope.row.entity.salesOrderHalt, image: scope.row.entity.salesOrderHaltImage, isView: scope.grid.appScope.$parent.vm.isHaltResumeSalesOrder, callback: function ($event) { scope.grid.appScope.$parent.vm.haltResumeSalesOrder(scope.row, $event) }, isDisabled: scope.row.entity.isDisabledHaltResumeSalesOrder },
            { name: 'Clear Request', icon: 'icons-data-clean', isView: scope.grid.appScope.$parent.vm.isClearRequest, callback: function ($event) { scope.grid.appScope.$parent.vm.clearInovaxeRequest(scope.row, $event) }, isDisabled: (scope.row.entity.isClearRequest || scope.row.entity.messageType == TRANSACTION.UNAUTHORIZEREQUEST) },
            { name: scope.row.entity.workOrderHalt, image: scope.row.entity.workOrderHaltImage, isView: scope.grid.appScope.$parent.vm.isHaltResumeWorkOrder, callback: function ($event) { scope.grid.appScope.$parent.vm.haltResumeWorkOrder(scope.row, $event) }, isDisabled: scope.row.entity.isDisabledHaltResumeWorkOrder, isFeatureBase: scope.grid.appScope.$parent.vm.HaltResumeWOFeatureBased },
            //{ name: 'Add New Data Fields', icon: 'mdi mdi-library-plus', isView: scope.grid.appScope.$parent.vm.isDataFields, callback: function ($event) { scope.grid.appScope.$parent.vm.moveToDataFields(scope.row.entity, $event) } }
            { name: 'Add Work Order', icon: 't-icons-wo add-icon', isView: scope.grid.appScope.$parent.vm.isWorkOrder, callback: function ($event) { scope.grid.appScope.$parent.vm.addWorkOrder(scope.row, $event) }, isDisabled: scope.row.entity.isHiddenAddWorkOrder },
            { name: 'Update Part Attributes', icon: 't-icons-part-attribute change-icon', isView: scope.grid.appScope.$parent.vm.isUpdatePartAttribute, callback: function ($event) { scope.grid.appScope.$parent.vm.updatePartsAttributes($event, scope.row.entity) }, isDisabled: scope.row.entity.isverified },
            { name: 'Assign Mounting Type', icon: 't-icons-assign-mounting-type', isView: (scope.grid.appScope.$parent.vm.isAssignMountingType), callback: function ($event) { scope.grid.appScope.$parent.vm.assignMountingType(scope.row.entity, $event) }, isDisabled: scope.row.entity.isDisabledAssign },
            { name: 'Acknowledgment History', icon: 'icons-acknowledgement-history', isView: (scope.grid.appScope.$parent.vm.isShowNotificationAck), callback: function ($event) { scope.grid.appScope.$parent.vm.ShowNotificationAckPopup(scope.row.entity, $event) }, isDisabled: false, isShowSqureIcon: true },
            {
              name: 'Design Report', icon: 'icon-library-books', isView: scope.grid.appScope.$parent.vm.isDesignReport, callback: function ($event) { scope.grid.appScope.$parent.vm.designReport(scope.row, $event) }, isDisabled: scope.row.entity.isDisabledDesignReport
            },
            { name: 'Copy Report', icon: 'icon-content-copy', isView: scope.grid.appScope.$parent.vm.isCopyReport, callback: function ($event) { scope.grid.appScope.$parent.vm.copyReport(scope.row, $event) }, isDisabled: scope.row.entity.isDisabledCopyReport },
            { name: 'Generate Report', icon: 'icon-printer', isView: scope.grid.appScope.$parent.vm.isGenerateInspectionRequirmentReport, callback: function ($event) { scope.grid.appScope.$parent.vm.generateInspectionRequirmentReport(scope.row) }, isDisabled: (scope.row.entity.isDisableGenerateInspectionRequirmentReport || scope.row.entity.isGeneratingInspectionReport) },
            { name: 'Preview Report', icon: 'icons-preview-report', isView: scope.grid.appScope.$parent.vm.isViewReport, callback: function ($event) { scope.grid.appScope.$parent.vm.viewReport(scope.row, $event) }, isDisabled: scope.row.entity.isDisabledViewReport },
            { name: 'Report Filter Parameter', icon: 'icon-filter', isView: scope.grid.appScope.$parent.vm.isFilterReport, callback: function ($event) { scope.grid.appScope.$parent.vm.configureFilterParameter(scope.row, $event) }, isDisabled: scope.row.entity.isDisabledConfigureFilterParameter },
            { name: 'Add/ Modify Report', icon: 'icon-library-books', isView: scope.grid.appScope.$parent.vm.isAddModifyReport, callback: function ($event) { scope.grid.appScope.$parent.vm.addModifyReport(scope.row.entity, $event) }, isDisabled: scope.row.entity.isDisabledAddModifyReport },
            { name: 'Custom Form History', icon: 't-icons-form-history', isView: scope.grid.appScope.$parent.vm.isViewCustomFormHistory, callback: function ($event) { scope.grid.appScope.$parent.vm.viewCustomFormHistory(scope.row, $event) }, isDisabled: false, isShowSqureIcon: true },
            { name: 'Where Used', icon: 'icon-history', isView: scope.grid.appScope.$parent.vm.isViewRequirementReference, callback: function ($event) { scope.grid.appScope.$parent.vm.viewRequirementReference(scope.row, $event) }, isDisabled: !scope.row.entity.isRequirementReference },
            { name: 'Inspection Requirement(s) & Verification', icon: 'icons-inspection-requirement-verification', isView: scope.grid.appScope.$parent.vm.isMaterialReceivePartInstructionDetail, callback: function ($event) { scope.grid.appScope.$parent.vm.materialReceivePartInstructionDetail(scope.row, $event) }, isDisabled: scope.row.entity.isDisableMaterialReceivePartInstructionDetail },
            { name: 'Copy Quote', icon: 't-icons-copy-quote', isView: scope.grid.appScope.$parent.vm.isCopySupplierQuote, callback: function ($event) { scope.grid.appScope.$parent.vm.copySupplierQuote(scope.row, $event) }, isDisabled: scope.row.entity.isDisabledCopySupplierQuote },
            { name: 'Part Pricing', icon: 'icons-part-pricing', isView: scope.grid.appScope.$parent.vm.isPartPricing, callback: function ($event) { scope.grid.appScope.$parent.vm.partPricing(scope.row, $event) }, isDisabled: scope.row.entity.isDisabledPartPricing, hasPartPricing: scope.row.entity.pricingCount > 0 ? true : false },
            { name: 'Part Pricing History', icon: 't-icons-history-text', isView: scope.grid.appScope.$parent.vm.isPartPricingHistory, callback: function ($event) { scope.grid.appScope.$parent.vm.partPricingHistory(scope.row, $event) }, isDisabled: scope.row.entity.isDisabledPartPricingHistory, isShowSqureIcon: true },
            { name: 'Costing Activity History', icon: 't-icons-history-text', isView: scope.grid.appScope.$parent.vm.isCostingActivityHistory, callback: function ($event) { scope.grid.appScope.$parent.vm.CostingActivityHistory(scope.row.entity, $event) }, isDisabled: false, isShowSqureIcon: true },
            { name: 'Clear Price', icon: 'icons-clear-price', isView: scope.grid.appScope.$parent.vm.isCleanPrice, callback: function ($event) { scope.grid.appScope.$parent.vm.clearselectedPrice(scope.row.entity, $event) }, isDisabled: !scope.row.entity.isPurchase || scope.row.entity.isDisabled || scope.grid.appScope.$parent.vm.isSummaryComplete || (scope.grid.appScope.$parent.vm.bom && (!scope.grid.appScope.$parent.vm.bom.isActivityStart || scope.grid.appScope.$parent.vm.bom.activityStartBy != scope.grid.appScope.$parent.vm.loginUserId)) || (scope.grid.appScope.$parent.vm.bom && !scope.grid.appScope.$parent.vm.bom.isMaterialAllow) },
            { name: scope.grid.appScope.$parent.vm.completePOactionButtonName, icon: 'icon-check-bookmark', isView: scope.grid.appScope.$parent.vm.isPurchaseOrderStatus, callback: function ($event) { scope.grid.appScope.$parent.vm.purchaseOrderStatusUpdate(scope.row, $event) }, isDisabled: !scope.grid.appScope.$parent.vm.allowCompletePurchaseOrder || !scope.row.entity.status || !(scope.row.entity.poWorkingStatus === CORE.PO_Working_Status.InProgress.id) || scope.row.entity.poLineWorkingStatus === CORE.PO_Line_WorkingStatus.Close.id || scope.row.entity.isDisabledManualCompleteOpenPO || scope.grid.appScope.$parent.vm.isReadOnly, isFeatureBase: true },
            { name: 'Duplicate PO', icon: 't-icons-duplicate-po', isView: scope.grid.appScope.$parent.vm.isCreateDuplicatePO, callback: function ($event) { scope.grid.appScope.$parent.vm.createDuplicatePO(scope.row.entity, $event) }, isDisabled: scope.row.entity.isDisabledDuplicatePOIcon || scope.grid.appScope.$parent.vm.isReadOnly },
            { name: 'Duplicate SO', icon: 't-icons-duplicate-so', isView: scope.grid.appScope.$parent.vm.isCreateDuplicateSO, callback: function ($event) { scope.grid.appScope.$parent.vm.createDuplicateSO(scope.row.entity, $event) }, isDisabled: false },
            { name: 'Add Calibration Detail', icon: 't-icons-calibration add-icon', isView: scope.grid.appScope.$parent.vm.isCalibrationDetail, callback: function ($event) { scope.grid.appScope.$parent.vm.openAddCalibrationDetailPopup(scope.row, $event) }, isDisabled: !scope.row.entity.calibrationRequired },
            { name: 'Material Usage Report', icon: 't-icons-material-usage', isView: scope.grid.appScope.$parent.vm.isUsageMaterial, callback: function ($event) { scope.grid.appScope.$parent.vm.usageMaterialReport(scope.row.entity, $event) }, isDisabled: scope.row.entity.isDisableUsageMaterialReport },
            { name: 'View', icon: 'icon-eye', isView: (scope.grid.appScope.$parent.vm.isViewTemplate), callback: function ($event) { scope.grid.appScope.$parent.vm.viewTemplate(scope.row, $event) }, isDisabled: scope.row.entity.isDisableViewTemplate },
            { name: 'Publish', icon: 'icons-publish', isView: scope.grid.appScope.$parent.vm.isUnPublish, callback: function ($event) { scope.grid.appScope.$parent.vm.openPublishPopup(scope.row, $event) }, isDisabled: scope.row.entity.isPublished },
            { name: 'Archived Versions', icon: 'icons-version-history', isView: scope.grid.appScope.$parent.vm.isArchieveVersion, callback: function ($event) { scope.grid.appScope.$parent.vm.openArchieveVersionPopup(scope.row, $event) }, isDisabled: false },
            { name: 'Agreed User List', icon: 't-icons-user-list', isView: scope.grid.appScope.$parent.vm.isAgridUserList, callback: function ($event) { scope.grid.appScope.$parent.vm.openAgridUserListPopup(scope.row, $event) }, isDisabled: !scope.row.entity.isShowAgreedUser },
            { name: 'Add Stock Adjustment', icon: 't-icons-stock-adjustment add-icon', isView: scope.grid.appScope.$parent.vm.isViewAddStockAdjustment, callback: function ($event) { scope.grid.appScope.$parent.vm.addStockAdjustment(scope.row, $event) }, isDisabled: scope.row.entity.isDisableAddStockAdjustment },
            { name: CORE.LabelConstant.MFG.PackagingBoxSerial, icon: 't-icons-view-serial-no', isView: scope.grid.appScope.$parent.vm.isViewBoxSerialNo, callback: function ($event) { scope.grid.appScope.$parent.vm.openBoxSerialNoListPopup(scope.row, $event) }, isDisabled: false },
            { name: 'Move ' + CORE.LabelConstant.MFG.PackagingBoxSerial, icon: 't-icons-move-serial-no', isView: scope.grid.appScope.$parent.vm.isMoveBoxSerialNo, callback: function ($event) { scope.grid.appScope.$parent.vm.moveSerialNoPopup(scope.row, $event) }, isDisabled: false, isShowSqureIcon: true },
            { name: 'Scan Serial# History', icon: 't-icons-serial-no-history', isView: scope.grid.appScope.$parent.vm.scanSerialNoHistory, callback: function ($event) { scope.grid.appScope.$parent.vm.openScanSerialNoHistory(scope.row, $event); }, isDisabled: !scope.row.entity.isTrackBySerialNo, isShowSqureIcon: true },
            { name: 'Update Template Name', icon: 't-icons-update-template-name', isView: scope.grid.appScope.$parent.vm.isEditAgreement, callback: function ($event) { scope.grid.appScope.$parent.vm.openAgreementTypePopup(scope.row, $event) }, isDisabled: false },
            { name: 'View Invoice Details', icon: 't-icons-view-invoice', isView: scope.grid.appScope.$parent.vm.isViewInvoiceDetails, callback: function ($event) { scope.grid.appScope.$parent.vm.viewInvoiceDetails(scope.row, $event) }, isDisabled: scope.row.entity.isDisabledViewInvoiceDetails },
            { name: 'Change Reason History', icon: 't-icons-history-text', isView: scope.grid.appScope.$parent.vm.isChangeReasonHistory, callback: function ($event) { scope.grid.appScope.$parent.vm.changeReasonHistory(scope.row, $event) }, isDisabled: scope.row.entity.isDisabledChangeReasonHistory, isShowSqureIcon: true },
            { name: scope.grid.appScope.$parent.vm.historyActionButtonText || '', icon: 't-icons-history-text', isView: scope.grid.appScope.$parent.vm.isPaymentHistory, callback: function ($event) { scope.grid.appScope.$parent.vm.paymentHistory(scope.row, $event) }, isDisabled: scope.row.entity.isDisabledPaymentHistory, isShowSqureIcon: true },
            { name: 'View Applied Customer Credit Memo History', icon: 't-icons-history-text', isView: scope.grid.appScope.$parent.vm.isApplyCustCMHistory, callback: function ($event) { scope.grid.appScope.$parent.vm.applyCustCMHistory(scope.row, $event) }, isDisabled: scope.row.entity.isDisabledApplyCustCMHistory, isShowSqureIcon: true },
            { name: 'Print Check', icon: 't-icons-print-check', iconDisabled: scope.row.entity.isPrintLoader ? 'mdi mdi-spin mdi-loading' : 't-icons-print-check', isView: scope.grid.appScope.$parent.vm.isPrintCheck, callback: function ($event) { scope.grid.appScope.$parent.vm.printCheck(scope.row, $event) }, isDisabled: scope.row.entity.isPaymentVoided || scope.row.entity.isPrintLoader || scope.row.entity.isDisablePrintCheck },
            { name: 'Print Remittance', icon: 't-icons-print-remittance', iconDisabled: scope.row.entity.isPrintRemittLoader ? 'mdi mdi-spin mdi-loading' : 't-icons-print-remittance', isView: scope.grid.appScope.$parent.vm.isPrintRemittance, callback: function ($event) { scope.grid.appScope.$parent.vm.printRemittance(scope.row, $event) }, isDisabled: scope.row.entity.isPrintRemittDisabled },
            { name: scope.row.entity.lockUnlockTransactionBtnText, icon: scope.row.entity.lockStatus === TRANSACTION.CustomerPaymentLockStatus.Locked ? 'icon-lock-unlocked' : 'icon-lock', isView: scope.grid.appScope.$parent.vm.isViewLockCustomerPayment, callback: function ($event) { scope.grid.appScope.$parent.vm.lockUnlockCustomerPayment(scope.row.entity, $event) }, isDisabled: scope.row.entity.isDisableLockUnlockTransaction || scope.row.entity.isDisabledLockUnlockBtn, isFeatureBase: true },
            { name: 'Add Customer Packing Slip ', icon: 't-icons-customer-ps add-icon', isView: scope.grid.appScope.$parent.vm.isAddCustPackingSlip, callback: function ($event) { scope.grid.appScope.$parent.vm.addCustomerPackingSlip(scope.row, $event) }, isDisabled: scope.row.entity.isDisableAddCustPackingSlip },
            { name: scope.grid.appScope.$parent.vm.voidAndReissuePaymentActionButtonText || 'Void & Reissue Payment', icon: 'icons-void-reissue-payment', isView: scope.grid.appScope.$parent.vm.isVoidAndReIssuePayment, callback: function ($event) { scope.grid.appScope.$parent.vm.voidAndReIssuePayment(scope.row, $event) }, isDisabled: scope.row.entity.isDisableVoidAndReIssuePayment, isFeatureBase: true },
            { name: 'Void & Re-Receive Payment', icon: 'icons-void-reissue-payment', isView: scope.grid.appScope.$parent.vm.isVoidAndReReceivePayment, callback: function ($event) { scope.grid.appScope.$parent.vm.voidAndReIssuePayment(scope.row, $event) }, isDisabled: scope.row.entity.isDisableVoidAndReIssuePayment, isFeatureBase: true },
            { name: scope.grid.appScope.$parent.vm.voidPaymentAndReleaseInvoiceGroupActionButtonText || 'Void Payment & Release Invoice Group', icon: 't-icons-void-payment-release-invoice-group', isView: scope.grid.appScope.$parent.vm.isVoidPaymentAndReleaseInvoiceGroup, callback: function ($event) { scope.grid.appScope.$parent.vm.voidPaymentAndReleaseInvoiceGroup(scope.row, $event) }, isDisabled: scope.row.entity.isDisableVoidPaymentAndReleaseInvoiceGroup, isFeatureBase: true },
            { name: 'Void Applied CM & Release Invoice Group', icon: 't-icons-void-payment-release-invoice-group', isView: scope.grid.appScope.$parent.vm.isVoidAndReleaseInvoiceGroup, callback: function ($event) { scope.grid.appScope.$parent.vm.voidAndReleaseInvoiceGroup(scope.row, $event) }, isDisabled: scope.row.entity.isDisableVoidAndReleaseInvoiceGroup, isFeatureBase: true },
            { name: 'Void WOFF & Release Invoice Group', icon: 't-icons-void-payment-release-invoice-group', isView: scope.grid.appScope.$parent.vm.isVoidWOFFAndReleaseInvoiceGroup, callback: function ($event) { scope.grid.appScope.$parent.vm.voidAndReleaseInvoiceGroup(scope.row, $event) }, isDisabled: scope.row.entity.isDisableVoidWOFFAndReleaseInvoiceGroup, isFeatureBase: true },
            { name: scope.grid.appScope.$parent.vm.ispoPartRequirementIconName ? scope.grid.appScope.$parent.vm.ispoPartRequirementIconName : 'View', icon: 'icon-eye', isView: (scope.grid.appScope.$parent.vm.ispoPartRequirement), callback: function ($event) { scope.grid.appScope.$parent.vm.viewPurchaseRequirement(scope.row, $event) }, isDisabled: scope.row.entity.isDisableRequirementIcon },
            { name: 'Change Status to Completed', icon: 't-icons-change-status-complete change-icon', isView: scope.grid.appScope.$parent.vm.isManualStatusChange, callback: function ($event) { scope.grid.appScope.$parent.vm.manualStatusChange(scope.row, $event) }, isDisabled: scope.row.entity.isDisableManualStatusChange },
            { name: 'Manage Customer Invoice', icon: 't-icons-manage-customer-invoice', isView: scope.grid.appScope.$parent.vm.isViewCustomerInvoiceDetails, callback: function ($event) { scope.grid.appScope.$parent.vm.viewCustomerInvoice(scope.row.entity, $event) }, isDisabled: scope.row.entity.isDisabledViewCustomerInvoice },
            { name: 'Verification Action', icon: 'icon-verified', isView: scope.grid.appScope.$parent.vm.isShowVerificationAction, callback: function ($event) { scope.grid.appScope.$parent.vm.showVerificationAction(scope.row.entity, $event) }, isDisabled: scope.row.entity.isDisabledVerificationAction },
            /*used in Supplier and Customer Transactions*/
            { name: stringFormat('{0} {1}', 'Lock', (scope.row.entity.lockButtonNameText || scope.grid.appScope.$parent.vm.transTypeText || '')), icon: 'icon-lock', isView: scope.grid.appScope.$parent.vm.isViewLock, callback: function ($event) { scope.grid.appScope.$parent.vm.lockRecord(scope.row, $event) }, isDisabled: scope.row.entity.isDisableLockTransaction, isFeatureBase: true },
            { name: scope.row.entity.lockUnlockTransactionBtnText, icon: scope.row.entity.lockUnlockTransactionIcon, isView: scope.grid.appScope.$parent.vm.isViewLockUnlockTransaction, callback: function ($event) { scope.grid.appScope.$parent.vm.lockUnlockRecord(scope.row, $event) }, isDisabled: scope.row.entity.isDisableLockUnlockTransaction, isFeatureBase: true },
            { name: scope.grid.appScope.$parent.vm.historyactionButtonName || scope.row.entity.historyactionButtonName, icon: 't-icons-history-text', isView: scope.grid.appScope.$parent.vm.customerpackingsliphistory, callback: function ($event) { scope.grid.appScope.$parent.vm.opencustomerpackingSlipChangesHistoryAuditLog(scope.row, $event) }, isDisabled: scope.row.entity.isDisabledHistoryIcon, isShowSqureIcon: true },
            { name: CORE.PURCHASE_ORDER_CHANGE_HISTORY_POPUP_TITLE, icon: 't-icons-po-change-history change-icon', isView: scope.grid.appScope.$parent.vm.purchaseOrderChangeHistory, callback: function ($event) { scope.grid.appScope.$parent.vm.openPurchaseOrderChangesHistory(scope.row, $event) }, isDisabled: scope.row.entity.isDisabledHistoryIcon, isShowSqureIcon: true },
            { name: 'Cancel PO', icon: 't-icons-po cancel-icon', isView: scope.row.entity.isCanclePO, callback: function ($event) { scope.grid.appScope.$parent.vm.isCancleReason(scope.row, $event); }, isDisabled: !scope.grid.appScope.$parent.vm.isAllowToCancelPO || scope.row.entity.isDisabledCanclePO || !scope.row.entity.id || scope.row.entity.packingSlipId || scope.grid.appScope.$parent.vm.isReadOnly, isFeatureBase: true },
            { name: 'Undo Cancellation', icon: 't-icons-undo cancel-icon', isView: scope.row.entity.isUndoPO, callback: function ($event) { scope.grid.appScope.$parent.vm.isCancleReason(scope.row, $event); }, isDisabled: !scope.grid.appScope.$parent.vm.isAllowToCancelPO || scope.row.entity.isDisabledUndoPO || !scope.row.entity.id, isFeatureBase: true },
            { name: 'Split UMID', icon: 't-icons-split-umid', isView: scope.row.entity.isSplitUID, callback: function ($event) { scope.grid.appScope.$parent.vm.SplitUID(scope.row.entity, $event); }, isDisabled: false, isFeatureBase: false },
            { name: 'Apply Credit Memo to Invoice', icon: 't-icons-apply-credit-memo', isView: scope.grid.appScope.$parent.vm.isApplyCustCreditMemo, callback: function ($event) { scope.grid.appScope.$parent.vm.applyCustCreditMemo(scope.row.entity, $event) }, isDisabled: scope.row.entity.isDisabledApplyCustCreditMemo },
            { name: 'Add/Modify Tracking#', icon: 't-icons-tracking-number change-icon', isView: scope.grid.appScope.$parent.vm.isUpdateTrackingNumber, callback: function ($event) { scope.grid.appScope.$parent.vm.showTrackingNumber(scope.row, $event, false) }, isDisabled: scope.row.entity.isDisableManageTrackingNumber, isFeatureBase: true },
            { name: 'Terminate Workorder', icon: 't-icons-terminate-workorder', isView: scope.grid.appScope.$parent.vm.isTerminateWorkorder, callback: function ($event) { scope.grid.appScope.$parent.vm.TerminateWorkOrder(scope.row.entity, $event) }, isDisabled: scope.row.entity.isDisabledTerminatWo },
            { name: 'Deallocated UMID List', icon: 'icons-deallocated-material', isView: scope.grid.appScope.$parent.vm.isDeallocatedUMID, callback: function ($event) { scope.grid.appScope.$parent.vm.deallocatedUMID(scope.row.entity, $event) }, isDisabled: false },
            { name: 'UMID Pending Parts List', icon: 't-icons-umid-pending', isView: scope.grid.appScope.$parent.vm.isNonUMIDStock, callback: function ($event) { scope.grid.appScope.$parent.vm.goToNonUMIDStockList(scope.row.entity, $event) }, isDisabled: scope.row.entity.isPendingUMIDDisable },
            { name: 'Add/Update RMA', icon: 't-icons-supplier-rma add-icon', isView: scope.grid.appScope.$parent.vm.isCreateSupplierRMA, callback: function ($event) { scope.grid.appScope.$parent.vm.createSupplierRMA(scope.row.entity, $event) }, isDisabled: scope.row.entity.isDisableCreateRMA },
            { name: 'View Initial Assembly Stock', icon: 't-icons-initial-stock', isView: scope.grid.appScope.$parent.vm.isViewAssemblyInitialStock, callback: function ($event) { scope.grid.appScope.$parent.vm.viewAssemblyInitialStock(scope.row.entity, $event) }, isDisabled: scope.row.entity.isDisabledViewAssemblyInitialStock },
            { name: 'View Assembly WO Details', icon: 't-icons-select', isView: (scope.grid.appScope.$parent.vm.isViewAssemblyWO && scope.grid.appScope.pagingInfo.isAssemblyPO), callback: function ($event) { scope.grid.appScope.$parent.vm.viewAssemblyWO(scope.row, $event) }, isDisabled: scope.row.entity.isDisabledViewAssemblyWO, hasDatailData: scope.row.entity.hasDatailData },
            { name: 'Payment History', icon: 't-icons-supplier-payment-history', isView: scope.grid.appScope.$parent.vm.isSupplierPaymentHistory, callback: function ($event) { scope.grid.appScope.$parent.vm.showPaymentTransactions(scope.row.entity, scope.grid.appScope.$parent.vm.refPaymentModeForInvoicePayment.Payable, $event) }, isDisabled: false },
            { name: 'Refund History', icon: 't-icons-refund-history', isView: scope.grid.appScope.$parent.vm.isSupplierRefundHistory, callback: function ($event) { scope.grid.appScope.$parent.vm.showPaymentTransactions(scope.row.entity, scope.grid.appScope.$parent.vm.refPaymentModeForInvoicePayment.SupplierRefund, $event) }, isDisabled: scope.row.entity.receiptType === 'I' },
            { name: 'Allocation Internal Stock', icon: 't-icons-internal-stock', isView: scope.grid.appScope.$parent.vm.isInternalStock, callback: function ($event) { scope.grid.appScope.$parent.vm.kitAllocatPopUp($event, scope.row.entity, 'AvailableStock', 'IS') }, isDisabled: false },
            { name: 'Allocation Customer Stock', icon: 't-icons-customer-stock ', isView: scope.grid.appScope.$parent.vm.isCustomerStock, callback: function ($event) { scope.grid.appScope.$parent.vm.kitAllocatPopUp($event, scope.row.entity, 'AvailableStock', 'CS') }, isDisabled: false },
            { name: 'Deallocation', icon: 'icon-close', isView: scope.grid.appScope.$parent.vm.isDeallocationStock, callback: function ($event) { scope.grid.appScope.$parent.vm.deallocateFromKit(scope.row.entity, $event) }, isDisabled: scope.row.entity.isDisableDeallocation },
            { name: 'Change Customer Consigned Status', toolTip: scope.row.entity.isPurchase ? 'Make it Customer Consigned' : 'Make it Purchased', icon: 't-icons-customer-consigned-state', isView: scope.grid.appScope.$parent.vm.isCustConsignStatus, callback: function ($event) { scope.grid.appScope.$parent.vm.changeCustConsignStatus($event, scope.row.entity) }, isDisabled: !scope.grid.appScope.$parent.vm.isEnableKitLineCustConsignStatus, isFeatureBase: true },
            { name: 'Customer Consigned Status History', icon: 't-icons-customer-consigned-state-history', isView: scope.grid.appScope.$parent.vm.isCustConsignHistory, callback: function ($event) { scope.grid.appScope.$parent.vm.custConsignHistory(scope.row.entity, $event) }, isDisabled: false },
            { name: scope.grid.appScope.$parent.vm.openPOiconButtonName, icon: 't-icons-open', isView: scope.grid.appScope.$parent.vm.isOpenPO, callback: function ($event) { scope.grid.appScope.$parent.vm.purchaseOrderStatusUpdate(scope.row, $event, true) }, isDisabled: !scope.grid.appScope.$parent.vm.AllowToOpenPurchaseOrderManually || !scope.row.entity.status || scope.row.entity.isDisabledManualOpenPO || scope.row.entity.isDisabledManualCompleteOpenPO || scope.grid.appScope.$parent.vm.isReadOnly, isFeatureBase: true },
            { name: 'Add Kit Activity Entry Manually', icon: 'icons-add-activity-entry-manually', isView: scope.grid.appScope.$parent.vm.isAddManualKitEntry, callback: function ($event) { scope.grid.appScope.$parent.vm.addManualKitEntry(scope.row.entity, $event) }, isDisabled: scope.row.entity.isSubAssembly },
            { name: 'Kit Activity History', icon: 't-icons-history-text', isView: scope.grid.appScope.$parent.vm.isKitActivityHistory, callback: function ($event) { scope.grid.appScope.$parent.vm.KitActivityHistory(scope.row.entity, $event) }, isDisabled: scope.row.entity.isSubAssembly, isShowSqureIcon: true },
            { name: 'Kit Assembly Level View', icon: 't-icons-mdi-tree', isView: scope.grid.appScope.$parent.vm.isKitTreeView, callback: function ($event) { scope.grid.appScope.$parent.vm.KitTreeView(scope.row.entity, $event) }, isDisabled: scope.row.entity.isSubAssembly, isShowSqureIcon: true },
            { name: 'Recalculate', icon: 't-icons-recalc', isView: scope.grid.appScope.$parent.vm.isRecalculation, callback: function ($event) { scope.grid.appScope.$parent.vm.KitRecalcuation(scope.row.entity, $event) }, isDisabled: scope.row.entity.isDisableRecalc, isShowSqureIcon: true },
            { name: 'Create UMID with Identical Details', icon: 't-icons-umid-identical add-icon', isView: scope.row.entity.isIdenticalUID, callback: function ($event) { scope.grid.appScope.$parent.vm.CreateIdenticalDetailUID(scope.row.entity, $event) }, isDisabled: false, isShowSqureIcon: true },
            { name: 'Print Label', icon: 'icon-printer', iconDisabled: 'icon-printer', isView: scope.grid.appScope.$parent.vm.isPrintLabel, callback: function ($event) { scope.grid.appScope.$parent.vm.printLabelRecord(scope.row) }, isDisabled: scope.row.entity.isPrintLabelDisable }
          ];
          // added static code to display pricing status on screen


          var uiGridMenuPricingItems = _.remove(uiGridMenuItems, (item) => item.isPricing === true);
          // reduce display count one as we have to show one static menu of pricing
          if (uiGridMenuPricingItems.length > 0) {
            displayCount = displayCount - uiGridMenuPricingItems.length;
          }
          uiGridMenuItems = _.remove(uiGridMenuItems, (item) => item.isView === true);
          if (uiGridMenuItems.length > displayCount) {
            var menuPartition = _.partition(uiGridMenuItems, (item) => uiGridMenuItems.indexOf(item) < displayCount);
            scope.visibleIcons = menuPartition[0];
            scope.uiGridMenuItems = [];
            scope.uiGridMenuItems = menuPartition[1];
          }
          else {
            scope.visibleIcons = uiGridMenuItems;
          }
          scope.uiGridMenuPricingItems = _.first(uiGridMenuPricingItems);
        }
        const initMenu = () => {
          uiGridMenuItems = scope.uiGridMenuItems = [];
          gridActionMenu();
        };
        scope.$watch('row', () => initMenu());
        scope.$watch('row.entity.ledColorCssClass', () => initMenu());
        scope.$watchCollection('rowEntity', () => initMenu());
        scope.$watchCollection('row.entity.isDownloadDisabled', () => initMenu());
        scope.$watchCollection('row.entity.isPrintDisable', () => initMenu());
        scope.$watchCollection('row.entity.isDisabledPrintDebitMemoReport', () => initMenu());
        scope.$watchCollection('row.entity.isDownloadDisabledReportingTool', () => initMenu());
        scope.$watchCollection('row.entity.isPrintDisableReportingTool', () => initMenu());
        scope.$watchCollection('row.entity.isDisabledDelete', () => initMenu());
        scope.$watchCollection('row.entity.isDisabledManualCompleteOpenPO', () => initMenu());
        scope.$watchCollection('row.entity.isDisabledDuplicatePOIcon', () => initMenu());
        scope.$watchCollection('row.entity.isDisabledLockUnlockBtn', () => initMenu());
        scope.$watchCollection('row.entity.isDisabledHistoryIcon', () => initMenu());
        scope.$watchCollection('row.entity.isDisabledCancledUndoPOIcon', () => initMenu());
        scope.$watchCollection('row.entity.isDisableRequirementIcon', () => initMenu());
        gridActionMenu();

        //scope.grid.api.core.on.renderingComplete(scope, function () {
        //    $timeout(() => {
        //        scope.visibleIcons = [];
        //        scope.uiGridMenuItems = [];
        //        scope.uiGridMenuPricingItems = [];
        //        gridActionMenu();
        //    });
        //});
        //scope.grid.api.core.on.scrollEnd(scope, function () {
        //    // initMenu();
        //    console.log("end");
        //    $timeout(() => {
        //        scope.visibleIcons = [];
        //        scope.uiGridMenuItems = [];
        //        scope.uiGridMenuPricingItems = [];
        //        gridActionMenu();
        //    });
        //});
      }
    };
    return directive;
  }
})();



